[
  {
    "_": -1,
    "namespace": "",
    "from": "mainLoop /Users/jonathanrezende/Projects/testes/typings/typings/work/vscode/download/0index.d.ts",
    "items": {
      "structs": [
        {
          "_": 17174,
          "name": "Thenable",
          "generics": [
            {
              "name": "T",
              "_": 17174,
              "source": "T"
            }
          ],
          "doc": "Thenable is a common denominator between ES6 promises, Q, jquery.Deferred, WinJS.Promise,\nand others. This API makes no assumption about what promise library is being used which\nenables reusing existing code without migrating to a specific promise implementation. Still,\nwe recommend the use of native promises which are available in this editor.",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "Attaches callbacks for the resolution and/or rejection of the Promise.\n @param onfulfilled The callback to execute when the Promise is resolved.\n @param onrejected The callback to execute when the Promise is rejected.\n @returns A Promise for the completion of which ever callback is executed.",
              "isMethod": true,
              "_": 17181,
              "source": "\n\t/**\n\t* Attaches callbacks for the resolution and/or rejection of the Promise.\n\t* @param onfulfilled The callback to execute when the Promise is resolved.\n\t* @param onrejected The callback to execute when the Promise is rejected.\n\t* @returns A Promise for the completion of which ever callback is executed.\n\t*/\n\tthen<TResult>(onfulfilled?: (value: T) => TResult | Thenable<TResult>, onrejected?: (reason: any) => TResult | Thenable<TResult>): Thenable<TResult>;",
              "name": "then",
              "generics": [
                {
                  "name": "TResult",
                  "_": 17181,
                  "source": "TResult"
                }
              ],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "onfulfilled",
                  "type": {
                    "ctor": false,
                    "generics": [],
                    "returns": {
                      "union": [
                        {
                          "ref": "TResult",
                          "targs": [],
                          "isNullable": false,
                          "_": 17181,
                          "source": " TResult"
                        },
                        {
                          "ref": "Thenable",
                          "targs": [
                            {
                              "ref": "TResult",
                              "targs": [],
                              "isNullable": false,
                              "_": 17181,
                              "source": "TResult"
                            }
                          ],
                          "isNullable": false,
                          "_": 17181,
                          "source": " Thenable<TResult>"
                        }
                      ],
                      "isNullable": false,
                      "_": 17181,
                      "source": " TResult | Thenable<TResult>"
                    },
                    "params": [
                      {
                        "name": "value",
                        "type": {
                          "ref": "T",
                          "targs": [],
                          "isNullable": false,
                          "_": 17181,
                          "source": " T"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "isNullable": false,
                    "_": 17181,
                    "source": " (value: T) => TResult | Thenable<TResult>"
                  },
                  "varargs": false,
                  "isNullable": true
                },
                {
                  "name": "onrejected",
                  "type": {
                    "ctor": false,
                    "generics": [],
                    "returns": {
                      "union": [
                        {
                          "ref": "TResult",
                          "targs": [],
                          "isNullable": false,
                          "_": 17181,
                          "source": " TResult"
                        },
                        {
                          "ref": "Thenable",
                          "targs": [
                            {
                              "ref": "TResult",
                              "targs": [],
                              "isNullable": false,
                              "_": 17181,
                              "source": "TResult"
                            }
                          ],
                          "isNullable": false,
                          "_": 17181,
                          "source": " Thenable<TResult>"
                        }
                      ],
                      "isNullable": false,
                      "_": 17181,
                      "source": " TResult | Thenable<TResult>"
                    },
                    "params": [
                      {
                        "name": "reason",
                        "type": {
                          "core": "any",
                          "isNullable": false,
                          "_": 17181,
                          "source": " any"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "isNullable": false,
                    "_": 17181,
                    "source": " (reason: any) => TResult | Thenable<TResult>"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "ref": "Thenable",
                "targs": [
                  {
                    "ref": "TResult",
                    "targs": [],
                    "isNullable": false,
                    "_": 17181,
                    "source": "TResult"
                  }
                ],
                "isNullable": false,
                "_": 17181,
                "source": " Thenable<TResult>"
              }
            },
            {
              "doc": "Attaches callbacks for the resolution and/or rejection of the Promise.",
              "isMethod": true,
              "_": 17182,
              "source": "\n\tthen<TResult>(onfulfilled?: (value: T) => TResult | Thenable<TResult>, onrejected?: (reason: any) => void): Thenable<TResult>;",
              "name": "then",
              "generics": [
                {
                  "name": "TResult",
                  "_": 17182,
                  "source": "TResult"
                }
              ],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "onfulfilled",
                  "type": {
                    "ctor": false,
                    "generics": [],
                    "returns": {
                      "union": [
                        {
                          "ref": "TResult",
                          "targs": [],
                          "isNullable": false,
                          "_": 17182,
                          "source": " TResult"
                        },
                        {
                          "ref": "Thenable",
                          "targs": [
                            {
                              "ref": "TResult",
                              "targs": [],
                              "isNullable": false,
                              "_": 17182,
                              "source": "TResult"
                            }
                          ],
                          "isNullable": false,
                          "_": 17182,
                          "source": " Thenable<TResult>"
                        }
                      ],
                      "isNullable": false,
                      "_": 17182,
                      "source": " TResult | Thenable<TResult>"
                    },
                    "params": [
                      {
                        "name": "value",
                        "type": {
                          "ref": "T",
                          "targs": [],
                          "isNullable": false,
                          "_": 17182,
                          "source": " T"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "isNullable": false,
                    "_": 17182,
                    "source": " (value: T) => TResult | Thenable<TResult>"
                  },
                  "varargs": false,
                  "isNullable": true
                },
                {
                  "name": "onrejected",
                  "type": {
                    "ctor": false,
                    "generics": [],
                    "returns": {
                      "core": "void",
                      "isNullable": false,
                      "_": 17182,
                      "source": " void"
                    },
                    "params": [
                      {
                        "name": "reason",
                        "type": {
                          "core": "any",
                          "isNullable": false,
                          "_": 17182,
                          "source": " any"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "isNullable": false,
                    "_": 17182,
                    "source": " (reason: any) => void"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "ref": "Thenable",
                "targs": [
                  {
                    "ref": "TResult",
                    "targs": [],
                    "isNullable": false,
                    "_": 17182,
                    "source": "TResult"
                  }
                ],
                "isNullable": false,
                "_": 17182,
                "source": " Thenable<TResult>"
              }
            }
          ],
          "calls": [],
          "isClass": false
        }
      ],
      "typedefs": [],
      "modules": [
        {
          "_": 17,
          "namespace": "vscode",
          "from": "submodule ",
          "items": {
            "structs": [
              {
                "_": 30,
                "name": "Command",
                "generics": [],
                "doc": "Represents a reference to a command. Provides a title which\nwill be used to represent a command in the UI and, optionally,\nan array of arguments which will be passed to the command handler\nfunction when invoked.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Title of the command, like `save`.",
                    "isMethod": false,
                    "_": 34,
                    "source": "\n\t\t/**\n\t\t * Title of the command, like `save`.\n\t\t */\n\t\ttitle: string;",
                    "name": "title",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 34,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The identifier of the actual command handler.\n @see {@link commands.registerCommand}",
                    "isMethod": false,
                    "_": 40,
                    "source": "\n\n\t\t/**\n\t\t * The identifier of the actual command handler.\n\t\t * @see {@link commands.registerCommand}\n\t\t */\n\t\tcommand: string;",
                    "name": "command",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 40,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "A tooltip for the command, when represented in the UI.",
                    "isMethod": false,
                    "_": 45,
                    "source": "\n\n\t\t/**\n\t\t * A tooltip for the command, when represented in the UI.\n\t\t */\n\t\ttooltip?: string;",
                    "name": "tooltip",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 45,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Arguments that the command handler should be\n invoked with.",
                    "isMethod": false,
                    "_": 51,
                    "source": "\n\n\t\t/**\n\t\t * Arguments that the command handler should be\n\t\t * invoked with.\n\t\t */\n\t\targuments?: any[];",
                    "name": "arguments",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "core": "any",
                          "isNullable": false,
                          "_": 51,
                          "source": " any"
                        }
                      ],
                      "isNullable": false,
                      "_": 51,
                      "source": " any[]"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 60,
                "name": "TextLine",
                "generics": [],
                "doc": "Represents a line of text, such as a line of source code.\n\nTextLine objects are __immutable__. When a {@link TextDocumentdocument} changes,\npreviously retrieved lines will not represent the latest state.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The zero-based line number.",
                    "isMethod": false,
                    "_": 65,
                    "source": "\n\n\t\t/**\n\t\t * The zero-based line number.\n\t\t */\n\t\treadonly lineNumber: number;",
                    "name": "lineNumber",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 65,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "The text of this line without the line separator characters.",
                    "isMethod": false,
                    "_": 70,
                    "source": "\n\n\t\t/**\n\t\t * The text of this line without the line separator characters.\n\t\t */\n\t\treadonly text: string;",
                    "name": "text",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 70,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The range this line covers without the line separator characters.",
                    "isMethod": false,
                    "_": 75,
                    "source": "\n\n\t\t/**\n\t\t * The range this line covers without the line separator characters.\n\t\t */\n\t\treadonly range: Range;",
                    "name": "range",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Range",
                      "targs": [],
                      "isNullable": false,
                      "_": 75,
                      "source": " Range"
                    }
                  },
                  {
                    "doc": "The range this line covers with the line separator characters.",
                    "isMethod": false,
                    "_": 80,
                    "source": "\n\n\t\t/**\n\t\t * The range this line covers with the line separator characters.\n\t\t */\n\t\treadonly rangeIncludingLineBreak: Range;",
                    "name": "rangeIncludingLineBreak",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Range",
                      "targs": [],
                      "isNullable": false,
                      "_": 80,
                      "source": " Range"
                    }
                  },
                  {
                    "doc": "The offset of the first character which is not a whitespace character as defined\nby `/\\s/`. **Note** that if a line is all whitespace the length of the line is returned.",
                    "isMethod": false,
                    "_": 86,
                    "source": "\n\n\t\t/**\n\t\t * The offset of the first character which is not a whitespace character as defined\n\t\t * by `/\\s/`. **Note** that if a line is all whitespace the length of the line is returned.\n\t\t */\n\t\treadonly firstNonWhitespaceCharacterIndex: number;",
                    "name": "firstNonWhitespaceCharacterIndex",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 86,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "Whether this line is whitespace only, shorthand\nfor {@link TextLine.firstNonWhitespaceCharacterIndex} === {@link TextLine.textTextLine.text.length}.",
                    "isMethod": false,
                    "_": 92,
                    "source": "\n\n\t\t/**\n\t\t * Whether this line is whitespace only, shorthand\n\t\t * for {@link TextLine.firstNonWhitespaceCharacterIndex} === {@link TextLine.text TextLine.text.length}.\n\t\t */\n\t\treadonly isEmptyOrWhitespace: boolean;",
                    "name": "isEmptyOrWhitespace",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 92,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 99,
                "name": "TextDocument",
                "generics": [],
                "doc": "Represents a text document, such as a source file. Text documents have\n{@link TextLinelines} and knowledge about an underlying resource like a file.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The associated uri for this document.\n\n*Note* that most documents use the `file`-scheme, which means they are files on disk. However, **not** all documents are\nsaved on disk and therefore the `scheme` must be checked before trying to access the underlying file or siblings on disk.",
                    "isMethod": false,
                    "_": 110,
                    "source": "\n\n\t\t/**\n\t\t * The associated uri for this document.\n\t\t *\n\t\t * *Note* that most documents use the `file`-scheme, which means they are files on disk. However, **not** all documents are\n\t\t * saved on disk and therefore the `scheme` must be checked before trying to access the underlying file or siblings on disk.\n\t\t *\n\t\t * @see {@link FileSystemProvider}\n\t\t * @see {@link TextDocumentContentProvider}\n\t\t */\n\t\treadonly uri: Uri;",
                    "name": "uri",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 110,
                      "source": " Uri"
                    }
                  },
                  {
                    "doc": "The file system path of the associated resource. Shorthand\nnotation for {@link TextDocument.uriTextDocument.uri.fsPath}. Independent of the uri scheme.",
                    "isMethod": false,
                    "_": 116,
                    "source": "\n\n\t\t/**\n\t\t * The file system path of the associated resource. Shorthand\n\t\t * notation for {@link TextDocument.uri TextDocument.uri.fsPath}. Independent of the uri scheme.\n\t\t */\n\t\treadonly fileName: string;",
                    "name": "fileName",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 116,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Is this document representing an untitled file which has never been saved yet. *Note* that\nthis does not mean the document will be saved to disk, use {@linkcode Uri.scheme}\nto figure out where a document will be {@link FileSystemProvidersaved}, e.g. `file`, `ftp` etc.",
                    "isMethod": false,
                    "_": 123,
                    "source": "\n\n\t\t/**\n\t\t * Is this document representing an untitled file which has never been saved yet. *Note* that\n\t\t * this does not mean the document will be saved to disk, use {@linkcode Uri.scheme}\n\t\t * to figure out where a document will be {@link FileSystemProvider saved}, e.g. `file`, `ftp` etc.\n\t\t */\n\t\treadonly isUntitled: boolean;",
                    "name": "isUntitled",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 123,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "The identifier of the language associated with this document.",
                    "isMethod": false,
                    "_": 128,
                    "source": "\n\n\t\t/**\n\t\t * The identifier of the language associated with this document.\n\t\t */\n\t\treadonly languageId: string;",
                    "name": "languageId",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 128,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The version number of this document (it will strictly increase after each\nchange, including undo/redo).",
                    "isMethod": false,
                    "_": 134,
                    "source": "\n\n\t\t/**\n\t\t * The version number of this document (it will strictly increase after each\n\t\t * change, including undo/redo).\n\t\t */\n\t\treadonly version: number;",
                    "name": "version",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 134,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "`true` if there are unpersisted changes.",
                    "isMethod": false,
                    "_": 139,
                    "source": "\n\n\t\t/**\n\t\t * `true` if there are unpersisted changes.\n\t\t */\n\t\treadonly isDirty: boolean;",
                    "name": "isDirty",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 139,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "`true` if the document has been closed. A closed document isn't synchronized anymore\nand won't be re-used when the same resource is opened again.",
                    "isMethod": false,
                    "_": 145,
                    "source": "\n\n\t\t/**\n\t\t * `true` if the document has been closed. A closed document isn't synchronized anymore\n\t\t * and won't be re-used when the same resource is opened again.\n\t\t */\n\t\treadonly isClosed: boolean;",
                    "name": "isClosed",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 145,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Save the underlying file.\n\n @return A promise that will resolve to `true` when the file\n has been saved. If the save failed, will return `false`.",
                    "isMethod": true,
                    "_": 153,
                    "source": "\n\n\t\t/**\n\t\t * Save the underlying file.\n\t\t *\n\t\t * @return A promise that will resolve to `true` when the file\n\t\t * has been saved. If the save failed, will return `false`.\n\t\t */\n\t\tsave(): Thenable<boolean>;",
                    "name": "save",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "ref": "Thenable",
                      "targs": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 153,
                          "source": "boolean"
                        }
                      ],
                      "isNullable": false,
                      "_": 153,
                      "source": " Thenable<boolean>"
                    }
                  },
                  {
                    "doc": "The {@link EndOfLineend of line} sequence that is predominately\nused in this document.",
                    "isMethod": false,
                    "_": 159,
                    "source": "\n\n\t\t/**\n\t\t * The {@link EndOfLine end of line} sequence that is predominately\n\t\t * used in this document.\n\t\t */\n\t\treadonly eol: EndOfLine;",
                    "name": "eol",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "EndOfLine",
                      "targs": [],
                      "isNullable": false,
                      "_": 159,
                      "source": " EndOfLine"
                    }
                  },
                  {
                    "doc": "The number of lines in this document.",
                    "isMethod": false,
                    "_": 164,
                    "source": "\n\n\t\t/**\n\t\t * The number of lines in this document.\n\t\t */\n\t\treadonly lineCount: number;",
                    "name": "lineCount",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 164,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "Returns a text line denoted by the line number. Note\n that the returned object is *not* live and changes to the\n document are not reflected.\n\n @param line A line number in [0, lineCount).\n @return A {@link TextLine line}.",
                    "isMethod": true,
                    "_": 174,
                    "source": "\n\n\t\t/**\n\t\t * Returns a text line denoted by the line number. Note\n\t\t * that the returned object is *not* live and changes to the\n\t\t * document are not reflected.\n\t\t *\n\t\t * @param line A line number in [0, lineCount).\n\t\t * @return A {@link TextLine line}.\n\t\t */\n\t\tlineAt(line: number): TextLine;",
                    "name": "lineAt",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "line",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 174,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "TextLine",
                      "targs": [],
                      "isNullable": false,
                      "_": 174,
                      "source": " TextLine"
                    }
                  },
                  {
                    "doc": "Returns a text line denoted by the position. Note\n that the returned object is *not* live and changes to the\n document are not reflected.\n\n The position will be {@link TextDocument.validatePosition adjusted}.\n\n @see {@link TextDocument.lineAt}\n\n @param position A position.\n @return A {@link TextLine line}.",
                    "isMethod": true,
                    "_": 188,
                    "source": "\n\n\t\t/**\n\t\t * Returns a text line denoted by the position. Note\n\t\t * that the returned object is *not* live and changes to the\n\t\t * document are not reflected.\n\t\t *\n\t\t * The position will be {@link TextDocument.validatePosition adjusted}.\n\t\t *\n\t\t * @see {@link TextDocument.lineAt}\n\t\t *\n\t\t * @param position A position.\n\t\t * @return A {@link TextLine line}.\n\t\t */\n\t\tlineAt(position: Position): TextLine;",
                    "name": "lineAt",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "position",
                        "type": {
                          "ref": "Position",
                          "targs": [],
                          "isNullable": false,
                          "_": 188,
                          "source": " Position"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "TextLine",
                      "targs": [],
                      "isNullable": false,
                      "_": 188,
                      "source": " TextLine"
                    }
                  },
                  {
                    "doc": "Converts the position to a zero-based offset.\n\n The position will be {@link TextDocument.validatePosition adjusted}.\n\n @param position A position.\n @return A valid zero-based offset.",
                    "isMethod": true,
                    "_": 198,
                    "source": "\n\n\t\t/**\n\t\t * Converts the position to a zero-based offset.\n\t\t *\n\t\t * The position will be {@link TextDocument.validatePosition adjusted}.\n\t\t *\n\t\t * @param position A position.\n\t\t * @return A valid zero-based offset.\n\t\t */\n\t\toffsetAt(position: Position): number;",
                    "name": "offsetAt",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "position",
                        "type": {
                          "ref": "Position",
                          "targs": [],
                          "isNullable": false,
                          "_": 198,
                          "source": " Position"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 198,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "Converts a zero-based offset to a position.\n\n @param offset A zero-based offset.\n @return A valid {@link Position}.",
                    "isMethod": true,
                    "_": 206,
                    "source": "\n\n\t\t/**\n\t\t * Converts a zero-based offset to a position.\n\t\t *\n\t\t * @param offset A zero-based offset.\n\t\t * @return A valid {@link Position}.\n\t\t */\n\t\tpositionAt(offset: number): Position;",
                    "name": "positionAt",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "offset",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 206,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Position",
                      "targs": [],
                      "isNullable": false,
                      "_": 206,
                      "source": " Position"
                    }
                  },
                  {
                    "doc": "Get the text of this document. A substring can be retrieved by providing\n a range. The range will be {@link TextDocument.validateRange adjusted}.\n\n @param range Include only the text included by the range.\n @return The text inside the provided range or the entire text.",
                    "isMethod": true,
                    "_": 215,
                    "source": "\n\n\t\t/**\n\t\t * Get the text of this document. A substring can be retrieved by providing\n\t\t * a range. The range will be {@link TextDocument.validateRange adjusted}.\n\t\t *\n\t\t * @param range Include only the text included by the range.\n\t\t * @return The text inside the provided range or the entire text.\n\t\t */\n\t\tgetText(range?: Range): string;",
                    "name": "getText",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "range",
                        "type": {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 215,
                          "source": " Range"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 215,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Get a word-range at the given position. By default words are defined by\n common separators, like space, -, _, etc. In addition, per language custom\n [word definitions] can be defined. It\n is also possible to provide a custom regular expression.\n\n * *Note 1:* A custom regular expression must not match the empty string and\n if it does, it will be ignored.\n * *Note 2:* A custom regular expression will fail to match multiline strings\n and in the name of speed regular expressions should not match words with\n spaces. Use {@linkcode TextLine.text} for more complex, non-wordy, scenarios.\n\n The position will be {@link TextDocument.validatePosition adjusted}.\n\n @param position A position.\n @param regex Optional regular expression that describes what a word is.\n @return A range spanning a word, or `undefined`.",
                    "isMethod": true,
                    "_": 235,
                    "source": "\n\n\t\t/**\n\t\t * Get a word-range at the given position. By default words are defined by\n\t\t * common separators, like space, -, _, etc. In addition, per language custom\n\t\t * [word definitions] can be defined. It\n\t\t * is also possible to provide a custom regular expression.\n\t\t *\n\t\t * * *Note 1:* A custom regular expression must not match the empty string and\n\t\t * if it does, it will be ignored.\n\t\t * * *Note 2:* A custom regular expression will fail to match multiline strings\n\t\t * and in the name of speed regular expressions should not match words with\n\t\t * spaces. Use {@linkcode TextLine.text} for more complex, non-wordy, scenarios.\n\t\t *\n\t\t * The position will be {@link TextDocument.validatePosition adjusted}.\n\t\t *\n\t\t * @param position A position.\n\t\t * @param regex Optional regular expression that describes what a word is.\n\t\t * @return A range spanning a word, or `undefined`.\n\t\t */\n\t\tgetWordRangeAtPosition(position: Position, regex?: RegExp): Range | undefined;",
                    "name": "getWordRangeAtPosition",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "position",
                        "type": {
                          "ref": "Position",
                          "targs": [],
                          "isNullable": false,
                          "_": 235,
                          "source": " Position"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "regex",
                        "type": {
                          "ref": "RegExp",
                          "targs": [],
                          "isNullable": false,
                          "_": 235,
                          "source": " RegExp"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "union": [
                        {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 235,
                          "source": " Range"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 235,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 235,
                      "source": " Range | undefined"
                    }
                  },
                  {
                    "doc": "Ensure a range is completely contained in this document.\n\n @param range A range.\n @return The given range or a new, adjusted range.",
                    "isMethod": true,
                    "_": 243,
                    "source": "\n\n\t\t/**\n\t\t * Ensure a range is completely contained in this document.\n\t\t *\n\t\t * @param range A range.\n\t\t * @return The given range or a new, adjusted range.\n\t\t */\n\t\tvalidateRange(range: Range): Range;",
                    "name": "validateRange",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "range",
                        "type": {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 243,
                          "source": " Range"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Range",
                      "targs": [],
                      "isNullable": false,
                      "_": 243,
                      "source": " Range"
                    }
                  },
                  {
                    "doc": "Ensure a position is contained in the range of this document.\n\n @param position A position.\n @return The given position or a new, adjusted position.",
                    "isMethod": true,
                    "_": 251,
                    "source": "\n\n\t\t/**\n\t\t * Ensure a position is contained in the range of this document.\n\t\t *\n\t\t * @param position A position.\n\t\t * @return The given position or a new, adjusted position.\n\t\t */\n\t\tvalidatePosition(position: Position): Position;",
                    "name": "validatePosition",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "position",
                        "type": {
                          "ref": "Position",
                          "targs": [],
                          "isNullable": false,
                          "_": 251,
                          "source": " Position"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Position",
                      "targs": [],
                      "isNullable": false,
                      "_": 251,
                      "source": " Position"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline0",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "Position",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 352,
                    "source": " lineDelta?: number;",
                    "name": "lineDelta",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 352,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 352,
                    "source": " characterDelta?: number",
                    "name": "characterDelta",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 352,
                      "source": " number"
                    }
                  }
                ],
                "calls": []
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline1",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "Position",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 370,
                    "source": " line?: number;",
                    "name": "line",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 370,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 370,
                    "source": " character?: number",
                    "name": "character",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 370,
                      "source": " number"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 262,
                "name": "Position",
                "generics": [],
                "doc": "Represents a line and character position, such as\nthe position of the cursor.\n\nPosition objects are __immutable__. Use the {@link Position.withwith} or\n{@link Position.translatetranslate} methods to derive new positions\nfrom an existing position.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 278,
                    "source": "\n\n\t\t/**\n\t\t * @param line A zero-based line value.\n\t\t * @param character A zero-based character value.\n\t\t */\n\t\tconstructor(line: number, character: number);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "line",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 278,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "character",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 278,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The zero-based line value.",
                    "isMethod": false,
                    "_": 267,
                    "source": "\n\n\t\t/**\n\t\t * The zero-based line value.\n\t\t */\n\t\treadonly line: number;",
                    "name": "line",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 267,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "The zero-based character value.",
                    "isMethod": false,
                    "_": 272,
                    "source": "\n\n\t\t/**\n\t\t * The zero-based character value.\n\t\t */\n\t\treadonly character: number;",
                    "name": "character",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 272,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "Check if this position is before `other`.\n\n @param other A position.\n @return `true` if position is on a smaller line\n or on the same line on a smaller character.",
                    "isMethod": true,
                    "_": 287,
                    "source": "\n\n\t\t/**\n\t\t * Check if this position is before `other`.\n\t\t *\n\t\t * @param other A position.\n\t\t * @return `true` if position is on a smaller line\n\t\t * or on the same line on a smaller character.\n\t\t */\n\t\tisBefore(other: Position): boolean;",
                    "name": "isBefore",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "other",
                        "type": {
                          "ref": "Position",
                          "targs": [],
                          "isNullable": false,
                          "_": 287,
                          "source": " Position"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 287,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Check if this position is before or equal to `other`.\n\n @param other A position.\n @return `true` if position is on a smaller line\n or on the same line on a smaller or equal character.",
                    "isMethod": true,
                    "_": 296,
                    "source": "\n\n\t\t/**\n\t\t * Check if this position is before or equal to `other`.\n\t\t *\n\t\t * @param other A position.\n\t\t * @return `true` if position is on a smaller line\n\t\t * or on the same line on a smaller or equal character.\n\t\t */\n\t\tisBeforeOrEqual(other: Position): boolean;",
                    "name": "isBeforeOrEqual",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "other",
                        "type": {
                          "ref": "Position",
                          "targs": [],
                          "isNullable": false,
                          "_": 296,
                          "source": " Position"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 296,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Check if this position is after `other`.\n\n @param other A position.\n @return `true` if position is on a greater line\n or on the same line on a greater character.",
                    "isMethod": true,
                    "_": 305,
                    "source": "\n\n\t\t/**\n\t\t * Check if this position is after `other`.\n\t\t *\n\t\t * @param other A position.\n\t\t * @return `true` if position is on a greater line\n\t\t * or on the same line on a greater character.\n\t\t */\n\t\tisAfter(other: Position): boolean;",
                    "name": "isAfter",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "other",
                        "type": {
                          "ref": "Position",
                          "targs": [],
                          "isNullable": false,
                          "_": 305,
                          "source": " Position"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 305,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Check if this position is after or equal to `other`.\n\n @param other A position.\n @return `true` if position is on a greater line\n or on the same line on a greater or equal character.",
                    "isMethod": true,
                    "_": 314,
                    "source": "\n\n\t\t/**\n\t\t * Check if this position is after or equal to `other`.\n\t\t *\n\t\t * @param other A position.\n\t\t * @return `true` if position is on a greater line\n\t\t * or on the same line on a greater or equal character.\n\t\t */\n\t\tisAfterOrEqual(other: Position): boolean;",
                    "name": "isAfterOrEqual",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "other",
                        "type": {
                          "ref": "Position",
                          "targs": [],
                          "isNullable": false,
                          "_": 314,
                          "source": " Position"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 314,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Check if this position is equal to `other`.\n\n @param other A position.\n @return `true` if the line and character of the given position are equal to\n the line and character of this position.",
                    "isMethod": true,
                    "_": 323,
                    "source": "\n\n\t\t/**\n\t\t * Check if this position is equal to `other`.\n\t\t *\n\t\t * @param other A position.\n\t\t * @return `true` if the line and character of the given position are equal to\n\t\t * the line and character of this position.\n\t\t */\n\t\tisEqual(other: Position): boolean;",
                    "name": "isEqual",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "other",
                        "type": {
                          "ref": "Position",
                          "targs": [],
                          "isNullable": false,
                          "_": 323,
                          "source": " Position"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 323,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Compare this to `other`.\n\n @param other A position.\n @return A number smaller than zero if this position is before the given position,\n a number greater than zero if this position is after the given position, or zero when\n this and the given position are equal.",
                    "isMethod": true,
                    "_": 333,
                    "source": "\n\n\t\t/**\n\t\t * Compare this to `other`.\n\t\t *\n\t\t * @param other A position.\n\t\t * @return A number smaller than zero if this position is before the given position,\n\t\t * a number greater than zero if this position is after the given position, or zero when\n\t\t * this and the given position are equal.\n\t\t */\n\t\tcompareTo(other: Position): number;",
                    "name": "compareTo",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "other",
                        "type": {
                          "ref": "Position",
                          "targs": [],
                          "isNullable": false,
                          "_": 333,
                          "source": " Position"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 333,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "Create a new position relative to this position.\n\n @param lineDelta Delta value for the line value, default is `0`.\n @param characterDelta Delta value for the character value, default is `0`.\n @return A position which line and character is the sum of the current line and\n character and the corresponding deltas.",
                    "isMethod": true,
                    "_": 343,
                    "source": "\n\n\t\t/**\n\t\t * Create a new position relative to this position.\n\t\t *\n\t\t * @param lineDelta Delta value for the line value, default is `0`.\n\t\t * @param characterDelta Delta value for the character value, default is `0`.\n\t\t * @return A position which line and character is the sum of the current line and\n\t\t * character and the corresponding deltas.\n\t\t */\n\t\ttranslate(lineDelta?: number, characterDelta?: number): Position;",
                    "name": "translate",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "lineDelta",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 343,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": true
                      },
                      {
                        "name": "characterDelta",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 343,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "Position",
                      "targs": [],
                      "isNullable": false,
                      "_": 343,
                      "source": " Position"
                    }
                  },
                  {
                    "doc": "Derived a new position relative to this position.\n\n @param change An object that describes a delta to this position.\n @return A position that reflects the given delta. Will return `this` position if the change\n is not changing anything.",
                    "isMethod": true,
                    "_": 352,
                    "source": "\n\n\t\t/**\n\t\t * Derived a new position relative to this position.\n\t\t *\n\t\t * @param change An object that describes a delta to this position.\n\t\t * @return A position that reflects the given delta. Will return `this` position if the change\n\t\t * is not changing anything.\n\t\t */\n\t\ttranslate(change: { lineDelta?: number; characterDelta?: number }): Position;",
                    "name": "translate",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "change",
                        "type": {
                          "ref": "IInline0",
                          "targs": [],
                          "isNullable": false,
                          "_": 352,
                          "source": " { lineDelta?: number; characterDelta?: number }"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Position",
                      "targs": [],
                      "isNullable": false,
                      "_": 352,
                      "source": " Position"
                    }
                  },
                  {
                    "doc": "Create a new position derived from this position.\n\n @param line Value that should be used as line value, default is the {@link Position.line existing value}\n @param character Value that should be used as character value, default is the {@link Position.character existing value}\n @return A position where line and character are replaced by the given values.",
                    "isMethod": true,
                    "_": 361,
                    "source": "\n\n\t\t/**\n\t\t * Create a new position derived from this position.\n\t\t *\n\t\t * @param line Value that should be used as line value, default is the {@link Position.line existing value}\n\t\t * @param character Value that should be used as character value, default is the {@link Position.character existing value}\n\t\t * @return A position where line and character are replaced by the given values.\n\t\t */\n\t\twith(line?: number, character?: number): Position;",
                    "name": "with",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "line",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 361,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": true
                      },
                      {
                        "name": "character",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 361,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "Position",
                      "targs": [],
                      "isNullable": false,
                      "_": 361,
                      "source": " Position"
                    }
                  },
                  {
                    "doc": "Derived a new position from this position.\n\n @param change An object that describes a change to this position.\n @return A position that reflects the given change. Will return `this` position if the change\n is not changing anything.",
                    "isMethod": true,
                    "_": 370,
                    "source": "\n\n\t\t/**\n\t\t * Derived a new position from this position.\n\t\t *\n\t\t * @param change An object that describes a change to this position.\n\t\t * @return A position that reflects the given change. Will return `this` position if the change\n\t\t * is not changing anything.\n\t\t */\n\t\twith(change: { line?: number; character?: number }): Position;",
                    "name": "with",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "change",
                        "type": {
                          "ref": "IInline1",
                          "targs": [],
                          "isNullable": false,
                          "_": 370,
                          "source": " { line?: number; character?: number }"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Position",
                      "targs": [],
                      "isNullable": false,
                      "_": 370,
                      "source": " Position"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline2",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "Range",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 476,
                    "source": " start?: Position;",
                    "name": "start",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Position",
                      "targs": [],
                      "isNullable": false,
                      "_": 476,
                      "source": " Position"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 476,
                    "source": " end?: Position",
                    "name": "end",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Position",
                      "targs": [],
                      "isNullable": false,
                      "_": 476,
                      "source": " Position"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 381,
                "name": "Range",
                "generics": [],
                "doc": "A range represents an ordered pair of two positions.\nIt is guaranteed that {@link Range.startstart}.isBeforeOrEqual({@link Range.endend})\n\nRange objects are __immutable__. Use the {@link Range.withwith},\n{@link Range.intersectionintersection}, or {@link Range.unionunion} methods\nto derive new ranges from an existing range.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 400,
                    "source": "\n\n\t\t/**\n\t\t * Create a new range from two positions. If `start` is not\n\t\t * before or equal to `end`, the values will be swapped.\n\t\t *\n\t\t * @param start A position.\n\t\t * @param end A position.\n\t\t */\n\t\tconstructor(start: Position, end: Position);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "start",
                        "type": {
                          "ref": "Position",
                          "targs": [],
                          "isNullable": false,
                          "_": 400,
                          "source": " Position"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "end",
                        "type": {
                          "ref": "Position",
                          "targs": [],
                          "isNullable": false,
                          "_": 400,
                          "source": " Position"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  },
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 411,
                    "source": "\n\n\t\t/**\n\t\t * Create a new range from number coordinates. It is a shorter equivalent of\n\t\t * using `new Range(new Position(startLine, startCharacter), new Position(endLine, endCharacter))`\n\t\t *\n\t\t * @param startLine A zero-based line value.\n\t\t * @param startCharacter A zero-based character value.\n\t\t * @param endLine A zero-based line value.\n\t\t * @param endCharacter A zero-based character value.\n\t\t */\n\t\tconstructor(startLine: number, startCharacter: number, endLine: number, endCharacter: number);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "startLine",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 411,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "startCharacter",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 411,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "endLine",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 411,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "endCharacter",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 411,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The start position. It is before or equal to {@link Range.endend}.",
                    "isMethod": false,
                    "_": 386,
                    "source": "\n\n\t\t/**\n\t\t * The start position. It is before or equal to {@link Range.end end}.\n\t\t */\n\t\treadonly start: Position;",
                    "name": "start",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Position",
                      "targs": [],
                      "isNullable": false,
                      "_": 386,
                      "source": " Position"
                    }
                  },
                  {
                    "doc": "The end position. It is after or equal to {@link Range.startstart}.",
                    "isMethod": false,
                    "_": 391,
                    "source": "\n\n\t\t/**\n\t\t * The end position. It is after or equal to {@link Range.start start}.\n\t\t */\n\t\treadonly end: Position;",
                    "name": "end",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Position",
                      "targs": [],
                      "isNullable": false,
                      "_": 391,
                      "source": " Position"
                    }
                  },
                  {
                    "doc": "`true` if `start` and `end` are equal.",
                    "isMethod": false,
                    "_": 416,
                    "source": "\n\n\t\t/**\n\t\t * `true` if `start` and `end` are equal.\n\t\t */\n\t\tisEmpty: boolean;",
                    "name": "isEmpty",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 416,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "`true` if `start.line` and `end.line` are equal.",
                    "isMethod": false,
                    "_": 421,
                    "source": "\n\n\t\t/**\n\t\t * `true` if `start.line` and `end.line` are equal.\n\t\t */\n\t\tisSingleLine: boolean;",
                    "name": "isSingleLine",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 421,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Check if a position or a range is contained in this range.\n\n @param positionOrRange A position or a range.\n @return `true` if the position or range is inside or equal\n to this range.",
                    "isMethod": true,
                    "_": 430,
                    "source": "\n\n\t\t/**\n\t\t * Check if a position or a range is contained in this range.\n\t\t *\n\t\t * @param positionOrRange A position or a range.\n\t\t * @return `true` if the position or range is inside or equal\n\t\t * to this range.\n\t\t */\n\t\tcontains(positionOrRange: Position | Range): boolean;",
                    "name": "contains",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "positionOrRange",
                        "type": {
                          "union": [
                            {
                              "ref": "Position",
                              "targs": [],
                              "isNullable": false,
                              "_": 430,
                              "source": " Position"
                            },
                            {
                              "ref": "Range",
                              "targs": [],
                              "isNullable": false,
                              "_": 430,
                              "source": " Range"
                            }
                          ],
                          "isNullable": false,
                          "_": 430,
                          "source": " Position | Range"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 430,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Check if `other` equals this range.\n\n @param other A range.\n @return `true` when start and end are {@link Position.isEqual equal} to\n start and end of this range.",
                    "isMethod": true,
                    "_": 439,
                    "source": "\n\n\t\t/**\n\t\t * Check if `other` equals this range.\n\t\t *\n\t\t * @param other A range.\n\t\t * @return `true` when start and end are {@link Position.isEqual equal} to\n\t\t * start and end of this range.\n\t\t */\n\t\tisEqual(other: Range): boolean;",
                    "name": "isEqual",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "other",
                        "type": {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 439,
                          "source": " Range"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 439,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Intersect `range` with this range and returns a new range or `undefined`\n if the ranges have no overlap.\n\n @param range A range.\n @return A range of the greater start and smaller end positions. Will\n return undefined when there is no overlap.",
                    "isMethod": true,
                    "_": 449,
                    "source": "\n\n\t\t/**\n\t\t * Intersect `range` with this range and returns a new range or `undefined`\n\t\t * if the ranges have no overlap.\n\t\t *\n\t\t * @param range A range.\n\t\t * @return A range of the greater start and smaller end positions. Will\n\t\t * return undefined when there is no overlap.\n\t\t */\n\t\tintersection(range: Range): Range | undefined;",
                    "name": "intersection",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "range",
                        "type": {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 449,
                          "source": " Range"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "union": [
                        {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 449,
                          "source": " Range"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 449,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 449,
                      "source": " Range | undefined"
                    }
                  },
                  {
                    "doc": "Compute the union of `other` with this range.\n\n @param other A range.\n @return A range of smaller start position and the greater end position.",
                    "isMethod": true,
                    "_": 457,
                    "source": "\n\n\t\t/**\n\t\t * Compute the union of `other` with this range.\n\t\t *\n\t\t * @param other A range.\n\t\t * @return A range of smaller start position and the greater end position.\n\t\t */\n\t\tunion(other: Range): Range;",
                    "name": "union",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "other",
                        "type": {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 457,
                          "source": " Range"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Range",
                      "targs": [],
                      "isNullable": false,
                      "_": 457,
                      "source": " Range"
                    }
                  },
                  {
                    "doc": "Derived a new range from this range.\n\n @param start A position that should be used as start. The default value is the {@link Range.start current start}.\n @param end A position that should be used as end. The default value is the {@link Range.end current end}.\n @return A range derived from this range with the given start and end position.\n If start and end are not different `this` range will be returned.",
                    "isMethod": true,
                    "_": 467,
                    "source": "\n\n\t\t/**\n\t\t * Derived a new range from this range.\n\t\t *\n\t\t * @param start A position that should be used as start. The default value is the {@link Range.start current start}.\n\t\t * @param end A position that should be used as end. The default value is the {@link Range.end current end}.\n\t\t * @return A range derived from this range with the given start and end position.\n\t\t * If start and end are not different `this` range will be returned.\n\t\t */\n\t\twith(start?: Position, end?: Position): Range;",
                    "name": "with",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "start",
                        "type": {
                          "ref": "Position",
                          "targs": [],
                          "isNullable": false,
                          "_": 467,
                          "source": " Position"
                        },
                        "varargs": false,
                        "isNullable": true
                      },
                      {
                        "name": "end",
                        "type": {
                          "ref": "Position",
                          "targs": [],
                          "isNullable": false,
                          "_": 467,
                          "source": " Position"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "Range",
                      "targs": [],
                      "isNullable": false,
                      "_": 467,
                      "source": " Range"
                    }
                  },
                  {
                    "doc": "Derived a new range from this range.\n\n @param change An object that describes a change to this range.\n @return A range that reflects the given change. Will return `this` range if the change\n is not changing anything.",
                    "isMethod": true,
                    "_": 476,
                    "source": "\n\n\t\t/**\n\t\t * Derived a new range from this range.\n\t\t *\n\t\t * @param change An object that describes a change to this range.\n\t\t * @return A range that reflects the given change. Will return `this` range if the change\n\t\t * is not changing anything.\n\t\t */\n\t\twith(change: { start?: Position; end?: Position }): Range;",
                    "name": "with",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "change",
                        "type": {
                          "ref": "IInline2",
                          "targs": [],
                          "isNullable": false,
                          "_": 476,
                          "source": " { start?: Position; end?: Position }"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Range",
                      "targs": [],
                      "isNullable": false,
                      "_": 476,
                      "source": " Range"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 482,
                "name": "Selection",
                "generics": [],
                "doc": "Represents a text selection in an editor.",
                "heritage": [
                  [
                    {
                      "ref": "Range",
                      "targs": [],
                      "isNullable": false,
                      "_": 482,
                      "source": " Range"
                    }
                  ]
                ],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 502,
                    "source": "\n\n\t\t/**\n\t\t * Create a selection from two positions.\n\t\t *\n\t\t * @param anchor A position.\n\t\t * @param active A position.\n\t\t */\n\t\tconstructor(anchor: Position, active: Position);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "anchor",
                        "type": {
                          "ref": "Position",
                          "targs": [],
                          "isNullable": false,
                          "_": 502,
                          "source": " Position"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "active",
                        "type": {
                          "ref": "Position",
                          "targs": [],
                          "isNullable": false,
                          "_": 502,
                          "source": " Position"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  },
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 512,
                    "source": "\n\n\t\t/**\n\t\t * Create a selection from four coordinates.\n\t\t *\n\t\t * @param anchorLine A zero-based line value.\n\t\t * @param anchorCharacter A zero-based character value.\n\t\t * @param activeLine A zero-based line value.\n\t\t * @param activeCharacter A zero-based character value.\n\t\t */\n\t\tconstructor(anchorLine: number, anchorCharacter: number, activeLine: number, activeCharacter: number);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "anchorLine",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 512,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "anchorCharacter",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 512,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "activeLine",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 512,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "activeCharacter",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 512,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The position at which the selection starts.\n This position might be before or after {@link Selection.active active}.",
                    "isMethod": false,
                    "_": 488,
                    "source": "\n\n\t\t/**\n\t\t * The position at which the selection starts.\n\t\t * This position might be before or after {@link Selection.active active}.\n\t\t */\n\t\tanchor: Position;",
                    "name": "anchor",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Position",
                      "targs": [],
                      "isNullable": false,
                      "_": 488,
                      "source": " Position"
                    }
                  },
                  {
                    "doc": "The position of the cursor.\n This position might be before or after {@link Selection.anchor anchor}.",
                    "isMethod": false,
                    "_": 494,
                    "source": "\n\n\t\t/**\n\t\t * The position of the cursor.\n\t\t * This position might be before or after {@link Selection.anchor anchor}.\n\t\t */\n\t\tactive: Position;",
                    "name": "active",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Position",
                      "targs": [],
                      "isNullable": false,
                      "_": 494,
                      "source": " Position"
                    }
                  },
                  {
                    "doc": "A selection is reversed if its {@link Selection.anchor anchor} is the {@link Selection.end end} position.",
                    "isMethod": false,
                    "_": 517,
                    "source": "\n\n\t\t/**\n\t\t * A selection is reversed if its {@link Selection.anchor anchor} is the {@link Selection.end end} position.\n\t\t */\n\t\tisReversed: boolean;",
                    "name": "isReversed",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 517,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 541,
                "name": "TextEditorSelectionChangeEvent",
                "generics": [],
                "doc": "Represents an event describing the change in a {@link TextEditor.selectionstext editor's selections}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The {@link TextEditortext editor} for which the selections have changed.",
                    "isMethod": false,
                    "_": 545,
                    "source": "\n\t\t/**\n\t\t * The {@link TextEditor text editor} for which the selections have changed.\n\t\t */\n\t\treadonly textEditor: TextEditor;",
                    "name": "textEditor",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "TextEditor",
                      "targs": [],
                      "isNullable": false,
                      "_": 545,
                      "source": " TextEditor"
                    }
                  },
                  {
                    "doc": "The new value for the {@link TextEditor.selectionstext editor's selections}.",
                    "isMethod": false,
                    "_": 549,
                    "source": "\n\t\t/**\n\t\t * The new value for the {@link TextEditor.selections text editor's selections}.\n\t\t */\n\t\treadonly selections: readonly Selection[];",
                    "name": "selections",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "Selection",
                            "targs": [],
                            "isNullable": false,
                            "_": 549,
                            "source": " Selection"
                          }
                        ],
                        "isNullable": false,
                        "_": 549,
                        "source": " Selection[]"
                      },
                      "isNullable": false,
                      "_": 549,
                      "source": " readonly Selection[]"
                    }
                  },
                  {
                    "doc": "The {@link TextEditorSelectionChangeKindchange kind} which has triggered this\nevent. Can be `undefined`.",
                    "isMethod": false,
                    "_": 554,
                    "source": "\n\t\t/**\n\t\t * The {@link TextEditorSelectionChangeKind change kind} which has triggered this\n\t\t * event. Can be `undefined`.\n\t\t */\n\t\treadonly kind: TextEditorSelectionChangeKind | undefined;",
                    "name": "kind",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "TextEditorSelectionChangeKind",
                          "targs": [],
                          "isNullable": false,
                          "_": 554,
                          "source": " TextEditorSelectionChangeKind"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 554,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 554,
                      "source": " TextEditorSelectionChangeKind | undefined"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 560,
                "name": "TextEditorVisibleRangesChangeEvent",
                "generics": [],
                "doc": "Represents an event describing the change in a {@link TextEditor.visibleRangestext editor's visible ranges}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The {@link TextEditortext editor} for which the visible ranges have changed.",
                    "isMethod": false,
                    "_": 564,
                    "source": "\n\t\t/**\n\t\t * The {@link TextEditor text editor} for which the visible ranges have changed.\n\t\t */\n\t\treadonly textEditor: TextEditor;",
                    "name": "textEditor",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "TextEditor",
                      "targs": [],
                      "isNullable": false,
                      "_": 564,
                      "source": " TextEditor"
                    }
                  },
                  {
                    "doc": "The new value for the {@link TextEditor.visibleRangestext editor's visible ranges}.",
                    "isMethod": false,
                    "_": 568,
                    "source": "\n\t\t/**\n\t\t * The new value for the {@link TextEditor.visibleRanges text editor's visible ranges}.\n\t\t */\n\t\treadonly visibleRanges: readonly Range[];",
                    "name": "visibleRanges",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "Range",
                            "targs": [],
                            "isNullable": false,
                            "_": 568,
                            "source": " Range"
                          }
                        ],
                        "isNullable": false,
                        "_": 568,
                        "source": " Range[]"
                      },
                      "isNullable": false,
                      "_": 568,
                      "source": " readonly Range[]"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 574,
                "name": "TextEditorOptionsChangeEvent",
                "generics": [],
                "doc": "Represents an event describing the change in a {@link TextEditor.optionstext editor's options}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The {@link TextEditortext editor} for which the options have changed.",
                    "isMethod": false,
                    "_": 578,
                    "source": "\n\t\t/**\n\t\t * The {@link TextEditor text editor} for which the options have changed.\n\t\t */\n\t\treadonly textEditor: TextEditor;",
                    "name": "textEditor",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "TextEditor",
                      "targs": [],
                      "isNullable": false,
                      "_": 578,
                      "source": " TextEditor"
                    }
                  },
                  {
                    "doc": "The new value for the {@link TextEditor.optionstext editor's options}.",
                    "isMethod": false,
                    "_": 582,
                    "source": "\n\t\t/**\n\t\t * The new value for the {@link TextEditor.options text editor's options}.\n\t\t */\n\t\treadonly options: TextEditorOptions;",
                    "name": "options",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "TextEditorOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 582,
                      "source": " TextEditorOptions"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 588,
                "name": "TextEditorViewColumnChangeEvent",
                "generics": [],
                "doc": "Represents an event describing the change of a {@link TextEditor.viewColumntext editor's view column}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The {@link TextEditortext editor} for which the view column has changed.",
                    "isMethod": false,
                    "_": 592,
                    "source": "\n\t\t/**\n\t\t * The {@link TextEditor text editor} for which the view column has changed.\n\t\t */\n\t\treadonly textEditor: TextEditor;",
                    "name": "textEditor",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "TextEditor",
                      "targs": [],
                      "isNullable": false,
                      "_": 592,
                      "source": " TextEditor"
                    }
                  },
                  {
                    "doc": "The new value for the {@link TextEditor.viewColumntext editor's view column}.",
                    "isMethod": false,
                    "_": 596,
                    "source": "\n\t\t/**\n\t\t * The new value for the {@link TextEditor.viewColumn text editor's view column}.\n\t\t */\n\t\treadonly viewColumn: ViewColumn;",
                    "name": "viewColumn",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "ViewColumn",
                      "targs": [],
                      "isNullable": false,
                      "_": 596,
                      "source": " ViewColumn"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 650,
                "name": "TextEditorOptions",
                "generics": [],
                "doc": "Represents a {@link TextEditortext editor}'s {@link TextEditor.optionsoptions}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The size in spaces a tab takes. This is used for two purposes:\n  - the rendering width of a tab character;\n  - the number of spaces to insert when {@link TextEditorOptions.insertSpaces insertSpaces} is true.\n\n When getting a text editor's options, this property will always be a number (resolved).\n When setting a text editor's options, this property is optional and it can be a number or `\"auto\"`.",
                    "isMethod": false,
                    "_": 660,
                    "source": "\n\n\t\t/**\n\t\t * The size in spaces a tab takes. This is used for two purposes:\n\t\t *  - the rendering width of a tab character;\n\t\t *  - the number of spaces to insert when {@link TextEditorOptions.insertSpaces insertSpaces} is true.\n\t\t *\n\t\t * When getting a text editor's options, this property will always be a number (resolved).\n\t\t * When setting a text editor's options, this property is optional and it can be a number or `\"auto\"`.\n\t\t */\n\t\ttabSize?: number | string;",
                    "name": "tabSize",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 660,
                          "source": " number"
                        },
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 660,
                          "source": " string"
                        }
                      ],
                      "isNullable": false,
                      "_": 660,
                      "source": " number | string"
                    }
                  },
                  {
                    "doc": "When pressing Tab insert {@link TextEditorOptions.tabSize n} spaces.\n When getting a text editor's options, this property will always be a boolean (resolved).\n When setting a text editor's options, this property is optional and it can be a boolean or `\"auto\"`.",
                    "isMethod": false,
                    "_": 667,
                    "source": "\n\n\t\t/**\n\t\t * When pressing Tab insert {@link TextEditorOptions.tabSize n} spaces.\n\t\t * When getting a text editor's options, this property will always be a boolean (resolved).\n\t\t * When setting a text editor's options, this property is optional and it can be a boolean or `\"auto\"`.\n\t\t */\n\t\tinsertSpaces?: boolean | string;",
                    "name": "insertSpaces",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 667,
                          "source": " boolean"
                        },
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 667,
                          "source": " string"
                        }
                      ],
                      "isNullable": false,
                      "_": 667,
                      "source": " boolean | string"
                    }
                  },
                  {
                    "doc": "The rendering style of the cursor in this editor.\n When getting a text editor's options, this property will always be present.\n When setting a text editor's options, this property is optional.",
                    "isMethod": false,
                    "_": 674,
                    "source": "\n\n\t\t/**\n\t\t * The rendering style of the cursor in this editor.\n\t\t * When getting a text editor's options, this property will always be present.\n\t\t * When setting a text editor's options, this property is optional.\n\t\t */\n\t\tcursorStyle?: TextEditorCursorStyle;",
                    "name": "cursorStyle",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "TextEditorCursorStyle",
                      "targs": [],
                      "isNullable": false,
                      "_": 674,
                      "source": " TextEditorCursorStyle"
                    }
                  },
                  {
                    "doc": "Render relative line numbers w.r.t. the current line number.\n When getting a text editor's options, this property will always be present.\n When setting a text editor's options, this property is optional.",
                    "isMethod": false,
                    "_": 681,
                    "source": "\n\n\t\t/**\n\t\t * Render relative line numbers w.r.t. the current line number.\n\t\t * When getting a text editor's options, this property will always be present.\n\t\t * When setting a text editor's options, this property is optional.\n\t\t */\n\t\tlineNumbers?: TextEditorLineNumbersStyle;",
                    "name": "lineNumbers",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "TextEditorLineNumbersStyle",
                      "targs": [],
                      "isNullable": false,
                      "_": 681,
                      "source": " TextEditorLineNumbersStyle"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 691,
                "name": "TextEditorDecorationType",
                "generics": [],
                "doc": "Represents a handle to a set of decorations\nsharing the same {@link DecorationRenderOptionsstyling options} in a {@link TextEditortext editor}.\n\nTo get an instance of a `TextEditorDecorationType` use\n{@link window.createTextEditorDecorationTypecreateTextEditorDecorationType}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Internal representation of the handle.",
                    "isMethod": false,
                    "_": 696,
                    "source": "\n\n\t\t/**\n\t\t * Internal representation of the handle.\n\t\t */\n\t\treadonly key: string;",
                    "name": "key",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 696,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Remove this decoration type and all decorations on all text editors using it.",
                    "isMethod": true,
                    "_": 701,
                    "source": "\n\n\t\t/**\n\t\t * Remove this decoration type and all decorations on all text editors using it.\n\t\t */\n\t\tdispose(): void;",
                    "name": "dispose",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 701,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 763,
                "name": "TextDocumentShowOptions",
                "generics": [],
                "doc": "Represents options to configure the behavior of showing a {@link TextDocumentdocument} in an {@link TextEditoreditor}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "An optional view column in which the {@link TextEditor editor} should be shown.\n The default is the {@link ViewColumn.Active active}. Columns that do not exist\n will be created as needed up to the maximum of {@linkcode ViewColumn.Nine}.\n Use {@linkcode ViewColumn.Beside} to open the editor to the side of the currently\n active one.",
                    "isMethod": false,
                    "_": 771,
                    "source": "\n\t\t/**\n\t\t * An optional view column in which the {@link TextEditor editor} should be shown.\n\t\t * The default is the {@link ViewColumn.Active active}. Columns that do not exist\n\t\t * will be created as needed up to the maximum of {@linkcode ViewColumn.Nine}.\n\t\t * Use {@linkcode ViewColumn.Beside} to open the editor to the side of the currently\n\t\t * active one.\n\t\t */\n\t\tviewColumn?: ViewColumn;",
                    "name": "viewColumn",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "ViewColumn",
                      "targs": [],
                      "isNullable": false,
                      "_": 771,
                      "source": " ViewColumn"
                    }
                  },
                  {
                    "doc": "An optional flag that when `true` will stop the {@link TextEditor editor} from taking focus.",
                    "isMethod": false,
                    "_": 776,
                    "source": "\n\n\t\t/**\n\t\t * An optional flag that when `true` will stop the {@link TextEditor editor} from taking focus.\n\t\t */\n\t\tpreserveFocus?: boolean;",
                    "name": "preserveFocus",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 776,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "An optional flag that controls if an {@link TextEditor editor}-tab shows as preview. Preview tabs will\n be replaced and reused until set to stay - either explicitly or through editing.\n\n *Note* that the flag is ignored if a user has disabled preview editors in settings.",
                    "isMethod": false,
                    "_": 784,
                    "source": "\n\n\t\t/**\n\t\t * An optional flag that controls if an {@link TextEditor editor}-tab shows as preview. Preview tabs will\n\t\t * be replaced and reused until set to stay - either explicitly or through editing.\n\t\t *\n\t\t * *Note* that the flag is ignored if a user has disabled preview editors in settings.\n\t\t */\n\t\tpreview?: boolean;",
                    "name": "preview",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 784,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "An optional selection to apply for the document in the {@link TextEditor editor}.",
                    "isMethod": false,
                    "_": 789,
                    "source": "\n\n\t\t/**\n\t\t * An optional selection to apply for the document in the {@link TextEditor editor}.\n\t\t */\n\t\tselection?: Range;",
                    "name": "selection",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Range",
                      "targs": [],
                      "isNullable": false,
                      "_": 789,
                      "source": " Range"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 795,
                "name": "NotebookEditorSelectionChangeEvent",
                "generics": [],
                "doc": "Represents an event describing the change in a {@link NotebookEditor.selectionsnotebook editor's selections}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The {@link NotebookEditornotebook editor} for which the selections have changed.",
                    "isMethod": false,
                    "_": 799,
                    "source": "\n\t\t/**\n\t\t * The {@link NotebookEditor notebook editor} for which the selections have changed.\n\t\t */\n\t\treadonly notebookEditor: NotebookEditor;",
                    "name": "notebookEditor",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "NotebookEditor",
                      "targs": [],
                      "isNullable": false,
                      "_": 799,
                      "source": " NotebookEditor"
                    }
                  },
                  {
                    "doc": "The new value for the {@link NotebookEditor.selectionsnotebook editor's selections}.",
                    "isMethod": false,
                    "_": 804,
                    "source": "\n\n\t\t/**\n\t\t * The new value for the {@link NotebookEditor.selections notebook editor's selections}.\n\t\t */\n\t\treadonly selections: readonly NotebookRange[];",
                    "name": "selections",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "NotebookRange",
                            "targs": [],
                            "isNullable": false,
                            "_": 804,
                            "source": " NotebookRange"
                          }
                        ],
                        "isNullable": false,
                        "_": 804,
                        "source": " NotebookRange[]"
                      },
                      "isNullable": false,
                      "_": 804,
                      "source": " readonly NotebookRange[]"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 810,
                "name": "NotebookEditorVisibleRangesChangeEvent",
                "generics": [],
                "doc": "Represents an event describing the change in a {@link NotebookEditor.visibleRangesnotebook editor's visibleRanges}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The {@link NotebookEditornotebook editor} for which the visible ranges have changed.",
                    "isMethod": false,
                    "_": 814,
                    "source": "\n\t\t/**\n\t\t * The {@link NotebookEditor notebook editor} for which the visible ranges have changed.\n\t\t */\n\t\treadonly notebookEditor: NotebookEditor;",
                    "name": "notebookEditor",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "NotebookEditor",
                      "targs": [],
                      "isNullable": false,
                      "_": 814,
                      "source": " NotebookEditor"
                    }
                  },
                  {
                    "doc": "The new value for the {@link NotebookEditor.visibleRangesnotebook editor's visibleRanges}.",
                    "isMethod": false,
                    "_": 819,
                    "source": "\n\n\t\t/**\n\t\t * The new value for the {@link NotebookEditor.visibleRanges notebook editor's visibleRanges}.\n\t\t */\n\t\treadonly visibleRanges: readonly NotebookRange[];",
                    "name": "visibleRanges",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "NotebookRange",
                            "targs": [],
                            "isNullable": false,
                            "_": 819,
                            "source": " NotebookRange"
                          }
                        ],
                        "isNullable": false,
                        "_": 819,
                        "source": " NotebookRange[]"
                      },
                      "isNullable": false,
                      "_": 819,
                      "source": " readonly NotebookRange[]"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 825,
                "name": "NotebookDocumentShowOptions",
                "generics": [],
                "doc": "Represents options to configure the behavior of showing a {@link NotebookDocumentnotebook document} in an {@link NotebookEditornotebook editor}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "An optional view column in which the {@link NotebookEditornotebook editor} should be shown.\nThe default is the {@link ViewColumn.Activeactive}. Columns that do not exist\nwill be created as needed up to the maximum of {@linkcode ViewColumn.Nine}.\nUse {@linkcode ViewColumn.Beside} to open the editor to the side of the currently\nactive one.",
                    "isMethod": false,
                    "_": 833,
                    "source": "\n\t\t/**\n\t\t * An optional view column in which the {@link NotebookEditor notebook editor} should be shown.\n\t\t * The default is the {@link ViewColumn.Active active}. Columns that do not exist\n\t\t * will be created as needed up to the maximum of {@linkcode ViewColumn.Nine}.\n\t\t * Use {@linkcode ViewColumn.Beside} to open the editor to the side of the currently\n\t\t * active one.\n\t\t */\n\t\treadonly viewColumn?: ViewColumn;",
                    "name": "viewColumn",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "ViewColumn",
                      "targs": [],
                      "isNullable": false,
                      "_": 833,
                      "source": " ViewColumn"
                    }
                  },
                  {
                    "doc": "An optional flag that when `true` will stop the {@link NotebookEditornotebook editor} from taking focus.",
                    "isMethod": false,
                    "_": 838,
                    "source": "\n\n\t\t/**\n\t\t * An optional flag that when `true` will stop the {@link NotebookEditor notebook editor} from taking focus.\n\t\t */\n\t\treadonly preserveFocus?: boolean;",
                    "name": "preserveFocus",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 838,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "An optional flag that controls if an {@link NotebookEditornotebook editor}-tab shows as preview. Preview tabs will\nbe replaced and reused until set to stay - either explicitly or through editing. The default behaviour depends\non the `workbench.editor.enablePreview`-setting.",
                    "isMethod": false,
                    "_": 845,
                    "source": "\n\n\t\t/**\n\t\t * An optional flag that controls if an {@link NotebookEditor notebook editor}-tab shows as preview. Preview tabs will\n\t\t * be replaced and reused until set to stay - either explicitly or through editing. The default behaviour depends\n\t\t * on the `workbench.editor.enablePreview`-setting.\n\t\t */\n\t\treadonly preview?: boolean;",
                    "name": "preview",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 845,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "An optional selection to apply for the document in the {@link NotebookEditornotebook editor}.",
                    "isMethod": false,
                    "_": 850,
                    "source": "\n\n\t\t/**\n\t\t * An optional selection to apply for the document in the {@link NotebookEditor notebook editor}.\n\t\t */\n\t\treadonly selections?: readonly NotebookRange[];",
                    "name": "selections",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "NotebookRange",
                            "targs": [],
                            "isNullable": false,
                            "_": 850,
                            "source": " NotebookRange"
                          }
                        ],
                        "isNullable": false,
                        "_": 850,
                        "source": " NotebookRange[]"
                      },
                      "isNullable": false,
                      "_": 850,
                      "source": " readonly NotebookRange[]"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 857,
                "name": "ThemeColor",
                "generics": [],
                "doc": "A reference to one of the workbench colors as defined in https://code.visualstudio.com/docs/getstarted/theme-color-reference.\nUsing a theme color is preferred over a custom color as it gives theme authors and users the possibility to change the color.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 863,
                    "source": "\n\n\t\t/**\n\t\t * Creates a reference to a theme color.\n\t\t * @param id of the color. The available colors are listed in https://code.visualstudio.com/docs/getstarted/theme-color-reference.\n\t\t */\n\t\tconstructor(id: string);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "id",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 863,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [],
                "calls": [],
                "isClass": true
              },
              {
                "_": 874,
                "name": "ThemeIcon",
                "generics": [],
                "doc": "A reference to a named icon. Currently, {@link ThemeIcon.FileFile}, {@link ThemeIcon.FolderFolder},\nand [ThemeIcon ids](https://code.visualstudio.com/api/references/icons-in-labels#icon-listing) are supported.\nUsing a theme icon is preferred over a custom icon as it gives product theme authors the possibility to change the icons.\n\n*Note* that theme icons can also be rendered inside labels and descriptions. Places that support theme icons spell this out\nand they use the `$(<name>)`-syntax, for instance `quickPick.label = \"Hello World $(globe)\"`.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 900,
                    "source": "\n\n\t\t/**\n\t\t * Creates a reference to a theme icon.\n\t\t * @param id id of the icon. The available icons are listed in https://code.visualstudio.com/api/references/icons-in-labels#icon-listing.\n\t\t * @param color optional `ThemeColor` for the icon. The color is currently only used in {@link TreeItem}.\n\t\t */\n\t\tconstructor(id: string, color?: ThemeColor);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "id",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 900,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "color",
                        "type": {
                          "ref": "ThemeColor",
                          "targs": [],
                          "isNullable": false,
                          "_": 900,
                          "source": " ThemeColor"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "Reference to an icon representing a file. The icon is taken from the current file icon theme or a placeholder icon is used.",
                    "isMethod": false,
                    "_": 878,
                    "source": "\n\t\t/**\n\t\t * Reference to an icon representing a file. The icon is taken from the current file icon theme or a placeholder icon is used.\n\t\t */\n\t\tstatic readonly File: ThemeIcon;",
                    "name": "File",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "ThemeIcon",
                      "targs": [],
                      "isNullable": false,
                      "_": 878,
                      "source": " ThemeIcon"
                    }
                  },
                  {
                    "doc": "Reference to an icon representing a folder. The icon is taken from the current file icon theme or a placeholder icon is used.",
                    "isMethod": false,
                    "_": 883,
                    "source": "\n\n\t\t/**\n\t\t * Reference to an icon representing a folder. The icon is taken from the current file icon theme or a placeholder icon is used.\n\t\t */\n\t\tstatic readonly Folder: ThemeIcon;",
                    "name": "Folder",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "ThemeIcon",
                      "targs": [],
                      "isNullable": false,
                      "_": 883,
                      "source": " ThemeIcon"
                    }
                  },
                  {
                    "doc": "The id of the icon. The available icons are listed in https://code.visualstudio.com/api/references/icons-in-labels#icon-listing.",
                    "isMethod": false,
                    "_": 888,
                    "source": "\n\n\t\t/**\n\t\t * The id of the icon. The available icons are listed in https://code.visualstudio.com/api/references/icons-in-labels#icon-listing.\n\t\t */\n\t\treadonly id: string;",
                    "name": "id",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 888,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The optional ThemeColor of the icon. The color is currently only used in {@link TreeItem}.",
                    "isMethod": false,
                    "_": 893,
                    "source": "\n\n\t\t/**\n\t\t * The optional ThemeColor of the icon. The color is currently only used in {@link TreeItem}.\n\t\t */\n\t\treadonly color?: ThemeColor | undefined;",
                    "name": "color",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "ThemeColor",
                          "targs": [],
                          "isNullable": false,
                          "_": 893,
                          "source": " ThemeColor"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 893,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 893,
                      "source": " ThemeColor | undefined"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 906,
                "name": "ThemableDecorationRenderOptions",
                "generics": [],
                "doc": "Represents theme specific rendering styles for a {@link TextEditorDecorationTypetext editor decoration}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Background color of the decoration. Use rgba() and define transparent background colors to play well with other decorations.\n Alternatively a color from the color registry can be {@link ThemeColor referenced}.",
                    "isMethod": false,
                    "_": 911,
                    "source": "\n\t\t/**\n\t\t * Background color of the decoration. Use rgba() and define transparent background colors to play well with other decorations.\n\t\t * Alternatively a color from the color registry can be {@link ThemeColor referenced}.\n\t\t */\n\t\tbackgroundColor?: string | ThemeColor;",
                    "name": "backgroundColor",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 911,
                          "source": " string"
                        },
                        {
                          "ref": "ThemeColor",
                          "targs": [],
                          "isNullable": false,
                          "_": 911,
                          "source": " ThemeColor"
                        }
                      ],
                      "isNullable": false,
                      "_": 911,
                      "source": " string | ThemeColor"
                    }
                  },
                  {
                    "doc": "CSS styling property that will be applied to text enclosed by a decoration.",
                    "isMethod": false,
                    "_": 916,
                    "source": "\n\n\t\t/**\n\t\t * CSS styling property that will be applied to text enclosed by a decoration.\n\t\t */\n\t\toutline?: string;",
                    "name": "outline",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 916,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "CSS styling property that will be applied to text enclosed by a decoration.\n Better use 'outline' for setting one or more of the individual outline properties.",
                    "isMethod": false,
                    "_": 922,
                    "source": "\n\n\t\t/**\n\t\t * CSS styling property that will be applied to text enclosed by a decoration.\n\t\t * Better use 'outline' for setting one or more of the individual outline properties.\n\t\t */\n\t\toutlineColor?: string | ThemeColor;",
                    "name": "outlineColor",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 922,
                          "source": " string"
                        },
                        {
                          "ref": "ThemeColor",
                          "targs": [],
                          "isNullable": false,
                          "_": 922,
                          "source": " ThemeColor"
                        }
                      ],
                      "isNullable": false,
                      "_": 922,
                      "source": " string | ThemeColor"
                    }
                  },
                  {
                    "doc": "CSS styling property that will be applied to text enclosed by a decoration.\n Better use 'outline' for setting one or more of the individual outline properties.",
                    "isMethod": false,
                    "_": 928,
                    "source": "\n\n\t\t/**\n\t\t * CSS styling property that will be applied to text enclosed by a decoration.\n\t\t * Better use 'outline' for setting one or more of the individual outline properties.\n\t\t */\n\t\toutlineStyle?: string;",
                    "name": "outlineStyle",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 928,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "CSS styling property that will be applied to text enclosed by a decoration.\n Better use 'outline' for setting one or more of the individual outline properties.",
                    "isMethod": false,
                    "_": 934,
                    "source": "\n\n\t\t/**\n\t\t * CSS styling property that will be applied to text enclosed by a decoration.\n\t\t * Better use 'outline' for setting one or more of the individual outline properties.\n\t\t */\n\t\toutlineWidth?: string;",
                    "name": "outlineWidth",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 934,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "CSS styling property that will be applied to text enclosed by a decoration.",
                    "isMethod": false,
                    "_": 939,
                    "source": "\n\n\t\t/**\n\t\t * CSS styling property that will be applied to text enclosed by a decoration.\n\t\t */\n\t\tborder?: string;",
                    "name": "border",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 939,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "CSS styling property that will be applied to text enclosed by a decoration.\n Better use 'border' for setting one or more of the individual border properties.",
                    "isMethod": false,
                    "_": 945,
                    "source": "\n\n\t\t/**\n\t\t * CSS styling property that will be applied to text enclosed by a decoration.\n\t\t * Better use 'border' for setting one or more of the individual border properties.\n\t\t */\n\t\tborderColor?: string | ThemeColor;",
                    "name": "borderColor",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 945,
                          "source": " string"
                        },
                        {
                          "ref": "ThemeColor",
                          "targs": [],
                          "isNullable": false,
                          "_": 945,
                          "source": " ThemeColor"
                        }
                      ],
                      "isNullable": false,
                      "_": 945,
                      "source": " string | ThemeColor"
                    }
                  },
                  {
                    "doc": "CSS styling property that will be applied to text enclosed by a decoration.\n Better use 'border' for setting one or more of the individual border properties.",
                    "isMethod": false,
                    "_": 951,
                    "source": "\n\n\t\t/**\n\t\t * CSS styling property that will be applied to text enclosed by a decoration.\n\t\t * Better use 'border' for setting one or more of the individual border properties.\n\t\t */\n\t\tborderRadius?: string;",
                    "name": "borderRadius",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 951,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "CSS styling property that will be applied to text enclosed by a decoration.\n Better use 'border' for setting one or more of the individual border properties.",
                    "isMethod": false,
                    "_": 957,
                    "source": "\n\n\t\t/**\n\t\t * CSS styling property that will be applied to text enclosed by a decoration.\n\t\t * Better use 'border' for setting one or more of the individual border properties.\n\t\t */\n\t\tborderSpacing?: string;",
                    "name": "borderSpacing",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 957,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "CSS styling property that will be applied to text enclosed by a decoration.\n Better use 'border' for setting one or more of the individual border properties.",
                    "isMethod": false,
                    "_": 963,
                    "source": "\n\n\t\t/**\n\t\t * CSS styling property that will be applied to text enclosed by a decoration.\n\t\t * Better use 'border' for setting one or more of the individual border properties.\n\t\t */\n\t\tborderStyle?: string;",
                    "name": "borderStyle",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 963,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "CSS styling property that will be applied to text enclosed by a decoration.\n Better use 'border' for setting one or more of the individual border properties.",
                    "isMethod": false,
                    "_": 969,
                    "source": "\n\n\t\t/**\n\t\t * CSS styling property that will be applied to text enclosed by a decoration.\n\t\t * Better use 'border' for setting one or more of the individual border properties.\n\t\t */\n\t\tborderWidth?: string;",
                    "name": "borderWidth",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 969,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "CSS styling property that will be applied to text enclosed by a decoration.",
                    "isMethod": false,
                    "_": 974,
                    "source": "\n\n\t\t/**\n\t\t * CSS styling property that will be applied to text enclosed by a decoration.\n\t\t */\n\t\tfontStyle?: string;",
                    "name": "fontStyle",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 974,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "CSS styling property that will be applied to text enclosed by a decoration.",
                    "isMethod": false,
                    "_": 979,
                    "source": "\n\n\t\t/**\n\t\t * CSS styling property that will be applied to text enclosed by a decoration.\n\t\t */\n\t\tfontWeight?: string;",
                    "name": "fontWeight",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 979,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "CSS styling property that will be applied to text enclosed by a decoration.",
                    "isMethod": false,
                    "_": 984,
                    "source": "\n\n\t\t/**\n\t\t * CSS styling property that will be applied to text enclosed by a decoration.\n\t\t */\n\t\ttextDecoration?: string;",
                    "name": "textDecoration",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 984,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "CSS styling property that will be applied to text enclosed by a decoration.",
                    "isMethod": false,
                    "_": 989,
                    "source": "\n\n\t\t/**\n\t\t * CSS styling property that will be applied to text enclosed by a decoration.\n\t\t */\n\t\tcursor?: string;",
                    "name": "cursor",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 989,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "CSS styling property that will be applied to text enclosed by a decoration.",
                    "isMethod": false,
                    "_": 994,
                    "source": "\n\n\t\t/**\n\t\t * CSS styling property that will be applied to text enclosed by a decoration.\n\t\t */\n\t\tcolor?: string | ThemeColor;",
                    "name": "color",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 994,
                          "source": " string"
                        },
                        {
                          "ref": "ThemeColor",
                          "targs": [],
                          "isNullable": false,
                          "_": 994,
                          "source": " ThemeColor"
                        }
                      ],
                      "isNullable": false,
                      "_": 994,
                      "source": " string | ThemeColor"
                    }
                  },
                  {
                    "doc": "CSS styling property that will be applied to text enclosed by a decoration.",
                    "isMethod": false,
                    "_": 999,
                    "source": "\n\n\t\t/**\n\t\t * CSS styling property that will be applied to text enclosed by a decoration.\n\t\t */\n\t\topacity?: string;",
                    "name": "opacity",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 999,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "CSS styling property that will be applied to text enclosed by a decoration.",
                    "isMethod": false,
                    "_": 1004,
                    "source": "\n\n\t\t/**\n\t\t * CSS styling property that will be applied to text enclosed by a decoration.\n\t\t */\n\t\tletterSpacing?: string;",
                    "name": "letterSpacing",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1004,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "An **absolute path** or an URI to an image to be rendered in the gutter.",
                    "isMethod": false,
                    "_": 1009,
                    "source": "\n\n\t\t/**\n\t\t * An **absolute path** or an URI to an image to be rendered in the gutter.\n\t\t */\n\t\tgutterIconPath?: string | Uri;",
                    "name": "gutterIconPath",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 1009,
                          "source": " string"
                        },
                        {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 1009,
                          "source": " Uri"
                        }
                      ],
                      "isNullable": false,
                      "_": 1009,
                      "source": " string | Uri"
                    }
                  },
                  {
                    "doc": "Specifies the size of the gutter icon.\n Available values are 'auto', 'contain', 'cover' and any percentage value.\n For further information: https://msdn.microsoft.com/en-us/library/jj127316(v=vs.85).aspx",
                    "isMethod": false,
                    "_": 1016,
                    "source": "\n\n\t\t/**\n\t\t * Specifies the size of the gutter icon.\n\t\t * Available values are 'auto', 'contain', 'cover' and any percentage value.\n\t\t * For further information: https://msdn.microsoft.com/en-us/library/jj127316(v=vs.85).aspx\n\t\t */\n\t\tgutterIconSize?: string;",
                    "name": "gutterIconSize",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1016,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The color of the decoration in the overview ruler. Use rgba() and define transparent colors to play well with other decorations.",
                    "isMethod": false,
                    "_": 1021,
                    "source": "\n\n\t\t/**\n\t\t * The color of the decoration in the overview ruler. Use rgba() and define transparent colors to play well with other decorations.\n\t\t */\n\t\toverviewRulerColor?: string | ThemeColor;",
                    "name": "overviewRulerColor",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 1021,
                          "source": " string"
                        },
                        {
                          "ref": "ThemeColor",
                          "targs": [],
                          "isNullable": false,
                          "_": 1021,
                          "source": " ThemeColor"
                        }
                      ],
                      "isNullable": false,
                      "_": 1021,
                      "source": " string | ThemeColor"
                    }
                  },
                  {
                    "doc": "Defines the rendering options of the attachment that is inserted before the decorated text.",
                    "isMethod": false,
                    "_": 1026,
                    "source": "\n\n\t\t/**\n\t\t * Defines the rendering options of the attachment that is inserted before the decorated text.\n\t\t */\n\t\tbefore?: ThemableDecorationAttachmentRenderOptions;",
                    "name": "before",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "ThemableDecorationAttachmentRenderOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 1026,
                      "source": " ThemableDecorationAttachmentRenderOptions"
                    }
                  },
                  {
                    "doc": "Defines the rendering options of the attachment that is inserted after the decorated text.",
                    "isMethod": false,
                    "_": 1031,
                    "source": "\n\n\t\t/**\n\t\t * Defines the rendering options of the attachment that is inserted after the decorated text.\n\t\t */\n\t\tafter?: ThemableDecorationAttachmentRenderOptions;",
                    "name": "after",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "ThemableDecorationAttachmentRenderOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 1031,
                      "source": " ThemableDecorationAttachmentRenderOptions"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 1034,
                "name": "ThemableDecorationAttachmentRenderOptions",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Defines a text content that is shown in the attachment. Either an icon or a text can be shown, but not both.",
                    "isMethod": false,
                    "_": 1038,
                    "source": "\n\t\t/**\n\t\t * Defines a text content that is shown in the attachment. Either an icon or a text can be shown, but not both.\n\t\t */\n\t\tcontentText?: string;",
                    "name": "contentText",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1038,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "An **absolute path** or an URI to an image to be rendered in the attachment. Either an icon\n or a text can be shown, but not both.",
                    "isMethod": false,
                    "_": 1043,
                    "source": "\n\t\t/**\n\t\t * An **absolute path** or an URI to an image to be rendered in the attachment. Either an icon\n\t\t * or a text can be shown, but not both.\n\t\t */\n\t\tcontentIconPath?: string | Uri;",
                    "name": "contentIconPath",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 1043,
                          "source": " string"
                        },
                        {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 1043,
                          "source": " Uri"
                        }
                      ],
                      "isNullable": false,
                      "_": 1043,
                      "source": " string | Uri"
                    }
                  },
                  {
                    "doc": "CSS styling property that will be applied to the decoration attachment.",
                    "isMethod": false,
                    "_": 1047,
                    "source": "\n\t\t/**\n\t\t * CSS styling property that will be applied to the decoration attachment.\n\t\t */\n\t\tborder?: string;",
                    "name": "border",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1047,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "CSS styling property that will be applied to text enclosed by a decoration.",
                    "isMethod": false,
                    "_": 1051,
                    "source": "\n\t\t/**\n\t\t * CSS styling property that will be applied to text enclosed by a decoration.\n\t\t */\n\t\tborderColor?: string | ThemeColor;",
                    "name": "borderColor",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 1051,
                          "source": " string"
                        },
                        {
                          "ref": "ThemeColor",
                          "targs": [],
                          "isNullable": false,
                          "_": 1051,
                          "source": " ThemeColor"
                        }
                      ],
                      "isNullable": false,
                      "_": 1051,
                      "source": " string | ThemeColor"
                    }
                  },
                  {
                    "doc": "CSS styling property that will be applied to the decoration attachment.",
                    "isMethod": false,
                    "_": 1055,
                    "source": "\n\t\t/**\n\t\t * CSS styling property that will be applied to the decoration attachment.\n\t\t */\n\t\tfontStyle?: string;",
                    "name": "fontStyle",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1055,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "CSS styling property that will be applied to the decoration attachment.",
                    "isMethod": false,
                    "_": 1059,
                    "source": "\n\t\t/**\n\t\t * CSS styling property that will be applied to the decoration attachment.\n\t\t */\n\t\tfontWeight?: string;",
                    "name": "fontWeight",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1059,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "CSS styling property that will be applied to the decoration attachment.",
                    "isMethod": false,
                    "_": 1063,
                    "source": "\n\t\t/**\n\t\t * CSS styling property that will be applied to the decoration attachment.\n\t\t */\n\t\ttextDecoration?: string;",
                    "name": "textDecoration",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1063,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "CSS styling property that will be applied to the decoration attachment.",
                    "isMethod": false,
                    "_": 1067,
                    "source": "\n\t\t/**\n\t\t * CSS styling property that will be applied to the decoration attachment.\n\t\t */\n\t\tcolor?: string | ThemeColor;",
                    "name": "color",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 1067,
                          "source": " string"
                        },
                        {
                          "ref": "ThemeColor",
                          "targs": [],
                          "isNullable": false,
                          "_": 1067,
                          "source": " ThemeColor"
                        }
                      ],
                      "isNullable": false,
                      "_": 1067,
                      "source": " string | ThemeColor"
                    }
                  },
                  {
                    "doc": "CSS styling property that will be applied to the decoration attachment.",
                    "isMethod": false,
                    "_": 1071,
                    "source": "\n\t\t/**\n\t\t * CSS styling property that will be applied to the decoration attachment.\n\t\t */\n\t\tbackgroundColor?: string | ThemeColor;",
                    "name": "backgroundColor",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 1071,
                          "source": " string"
                        },
                        {
                          "ref": "ThemeColor",
                          "targs": [],
                          "isNullable": false,
                          "_": 1071,
                          "source": " ThemeColor"
                        }
                      ],
                      "isNullable": false,
                      "_": 1071,
                      "source": " string | ThemeColor"
                    }
                  },
                  {
                    "doc": "CSS styling property that will be applied to the decoration attachment.",
                    "isMethod": false,
                    "_": 1075,
                    "source": "\n\t\t/**\n\t\t * CSS styling property that will be applied to the decoration attachment.\n\t\t */\n\t\tmargin?: string;",
                    "name": "margin",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1075,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "CSS styling property that will be applied to the decoration attachment.",
                    "isMethod": false,
                    "_": 1079,
                    "source": "\n\t\t/**\n\t\t * CSS styling property that will be applied to the decoration attachment.\n\t\t */\n\t\twidth?: string;",
                    "name": "width",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1079,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "CSS styling property that will be applied to the decoration attachment.",
                    "isMethod": false,
                    "_": 1083,
                    "source": "\n\t\t/**\n\t\t * CSS styling property that will be applied to the decoration attachment.\n\t\t */\n\t\theight?: string;",
                    "name": "height",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1083,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 1089,
                "name": "DecorationRenderOptions",
                "generics": [],
                "doc": "Represents rendering styles for a {@link TextEditorDecorationTypetext editor decoration}.",
                "heritage": [
                  [
                    {
                      "ref": "ThemableDecorationRenderOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 1089,
                      "source": " ThemableDecorationRenderOptions"
                    }
                  ]
                ],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Should the decoration be rendered also on the whitespace after the line text.\n Defaults to `false`.",
                    "isMethod": false,
                    "_": 1094,
                    "source": "\n\t\t/**\n\t\t * Should the decoration be rendered also on the whitespace after the line text.\n\t\t * Defaults to `false`.\n\t\t */\n\t\tisWholeLine?: boolean;",
                    "name": "isWholeLine",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 1094,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Customize the growing behavior of the decoration when edits occur at the edges of the decoration's range.\n Defaults to `DecorationRangeBehavior.OpenOpen`.",
                    "isMethod": false,
                    "_": 1100,
                    "source": "\n\n\t\t/**\n\t\t * Customize the growing behavior of the decoration when edits occur at the edges of the decoration's range.\n\t\t * Defaults to `DecorationRangeBehavior.OpenOpen`.\n\t\t */\n\t\trangeBehavior?: DecorationRangeBehavior;",
                    "name": "rangeBehavior",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "DecorationRangeBehavior",
                      "targs": [],
                      "isNullable": false,
                      "_": 1100,
                      "source": " DecorationRangeBehavior"
                    }
                  },
                  {
                    "doc": "The position in the overview ruler where the decoration should be rendered.",
                    "isMethod": false,
                    "_": 1105,
                    "source": "\n\n\t\t/**\n\t\t * The position in the overview ruler where the decoration should be rendered.\n\t\t */\n\t\toverviewRulerLane?: OverviewRulerLane;",
                    "name": "overviewRulerLane",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "OverviewRulerLane",
                      "targs": [],
                      "isNullable": false,
                      "_": 1105,
                      "source": " OverviewRulerLane"
                    }
                  },
                  {
                    "doc": "Overwrite options for light themes.",
                    "isMethod": false,
                    "_": 1110,
                    "source": "\n\n\t\t/**\n\t\t * Overwrite options for light themes.\n\t\t */\n\t\tlight?: ThemableDecorationRenderOptions;",
                    "name": "light",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "ThemableDecorationRenderOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 1110,
                      "source": " ThemableDecorationRenderOptions"
                    }
                  },
                  {
                    "doc": "Overwrite options for dark themes.",
                    "isMethod": false,
                    "_": 1115,
                    "source": "\n\n\t\t/**\n\t\t * Overwrite options for dark themes.\n\t\t */\n\t\tdark?: ThemableDecorationRenderOptions;",
                    "name": "dark",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "ThemableDecorationRenderOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 1115,
                      "source": " ThemableDecorationRenderOptions"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 1121,
                "name": "DecorationOptions",
                "generics": [],
                "doc": "Represents options for a specific decoration in a {@link TextEditorDecorationTypedecoration set}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Range to which this decoration is applied. The range must not be empty.",
                    "isMethod": false,
                    "_": 1126,
                    "source": "\n\n\t\t/**\n\t\t * Range to which this decoration is applied. The range must not be empty.\n\t\t */\n\t\trange: Range;",
                    "name": "range",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Range",
                      "targs": [],
                      "isNullable": false,
                      "_": 1126,
                      "source": " Range"
                    }
                  },
                  {
                    "doc": "A message that should be rendered when hovering over the decoration.",
                    "isMethod": false,
                    "_": 1131,
                    "source": "\n\n\t\t/**\n\t\t * A message that should be rendered when hovering over the decoration.\n\t\t */\n\t\thoverMessage?: MarkdownString | MarkedString | Array<MarkdownString | MarkedString>;",
                    "name": "hoverMessage",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "MarkdownString",
                          "targs": [],
                          "isNullable": false,
                          "_": 1131,
                          "source": " MarkdownString"
                        },
                        {
                          "ref": "MarkedString",
                          "targs": [],
                          "isNullable": false,
                          "_": 1131,
                          "source": " MarkedString"
                        },
                        {
                          "ref": "Array",
                          "targs": [
                            {
                              "union": [
                                {
                                  "ref": "MarkdownString",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 1131,
                                  "source": "MarkdownString"
                                },
                                {
                                  "ref": "MarkedString",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 1131,
                                  "source": " MarkedString"
                                }
                              ],
                              "isNullable": false,
                              "_": 1131,
                              "source": "MarkdownString | MarkedString"
                            }
                          ],
                          "isNullable": false,
                          "_": 1131,
                          "source": " Array<MarkdownString | MarkedString>"
                        }
                      ],
                      "isNullable": false,
                      "_": 1131,
                      "source": " MarkdownString | MarkedString | Array<MarkdownString | MarkedString>"
                    }
                  },
                  {
                    "doc": "Render options applied to the current decoration. For performance reasons, keep the\n number of decoration specific options small, and use decoration types wherever possible.",
                    "isMethod": false,
                    "_": 1137,
                    "source": "\n\n\t\t/**\n\t\t * Render options applied to the current decoration. For performance reasons, keep the\n\t\t * number of decoration specific options small, and use decoration types wherever possible.\n\t\t */\n\t\trenderOptions?: DecorationInstanceRenderOptions;",
                    "name": "renderOptions",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "DecorationInstanceRenderOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 1137,
                      "source": " DecorationInstanceRenderOptions"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 1140,
                "name": "ThemableDecorationInstanceRenderOptions",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Defines the rendering options of the attachment that is inserted before the decorated text.",
                    "isMethod": false,
                    "_": 1144,
                    "source": "\n\t\t/**\n\t\t * Defines the rendering options of the attachment that is inserted before the decorated text.\n\t\t */\n\t\tbefore?: ThemableDecorationAttachmentRenderOptions;",
                    "name": "before",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "ThemableDecorationAttachmentRenderOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 1144,
                      "source": " ThemableDecorationAttachmentRenderOptions"
                    }
                  },
                  {
                    "doc": "Defines the rendering options of the attachment that is inserted after the decorated text.",
                    "isMethod": false,
                    "_": 1149,
                    "source": "\n\n\t\t/**\n\t\t * Defines the rendering options of the attachment that is inserted after the decorated text.\n\t\t */\n\t\tafter?: ThemableDecorationAttachmentRenderOptions;",
                    "name": "after",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "ThemableDecorationAttachmentRenderOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 1149,
                      "source": " ThemableDecorationAttachmentRenderOptions"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 1152,
                "name": "DecorationInstanceRenderOptions",
                "generics": [],
                "doc": "",
                "heritage": [
                  [
                    {
                      "ref": "ThemableDecorationInstanceRenderOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 1152,
                      "source": " ThemableDecorationInstanceRenderOptions"
                    }
                  ]
                ],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Overwrite options for light themes.",
                    "isMethod": false,
                    "_": 1156,
                    "source": "\n\t\t/**\n\t\t * Overwrite options for light themes.\n\t\t */\n\t\tlight?: ThemableDecorationInstanceRenderOptions;",
                    "name": "light",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "ThemableDecorationInstanceRenderOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 1156,
                      "source": " ThemableDecorationInstanceRenderOptions"
                    }
                  },
                  {
                    "doc": "Overwrite options for dark themes.",
                    "isMethod": false,
                    "_": 1161,
                    "source": "\n\n\t\t/**\n\t\t * Overwrite options for dark themes.\n\t\t */\n\t\tdark?: ThemableDecorationInstanceRenderOptions;",
                    "name": "dark",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "ThemableDecorationInstanceRenderOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 1161,
                      "source": " ThemableDecorationInstanceRenderOptions"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline3",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "TextEditor",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 1213,
                    "source": " readonly undoStopBefore: boolean;",
                    "name": "undoStopBefore",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 1213,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 1213,
                    "source": " readonly undoStopAfter: boolean",
                    "name": "undoStopAfter",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 1213,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": []
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline4",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "TextEditor",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 1226,
                    "source": " readonly undoStopBefore: boolean;",
                    "name": "undoStopBefore",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 1226,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 1226,
                    "source": " readonly undoStopAfter: boolean",
                    "name": "undoStopAfter",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 1226,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 1167,
                "name": "TextEditor",
                "generics": [],
                "doc": "Represents an editor that is attached to a {@link TextDocumentdocument}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The document associated with this text editor. The document will be the same for the entire lifetime of this text editor.",
                    "isMethod": false,
                    "_": 1172,
                    "source": "\n\n\t\t/**\n\t\t * The document associated with this text editor. The document will be the same for the entire lifetime of this text editor.\n\t\t */\n\t\treadonly document: TextDocument;",
                    "name": "document",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "TextDocument",
                      "targs": [],
                      "isNullable": false,
                      "_": 1172,
                      "source": " TextDocument"
                    }
                  },
                  {
                    "doc": "The primary selection on this text editor. Shorthand for `TextEditor.selections[0]`.",
                    "isMethod": false,
                    "_": 1177,
                    "source": "\n\n\t\t/**\n\t\t * The primary selection on this text editor. Shorthand for `TextEditor.selections[0]`.\n\t\t */\n\t\tselection: Selection;",
                    "name": "selection",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Selection",
                      "targs": [],
                      "isNullable": false,
                      "_": 1177,
                      "source": " Selection"
                    }
                  },
                  {
                    "doc": "The selections in this text editor. The primary selection is always at index 0.",
                    "isMethod": false,
                    "_": 1182,
                    "source": "\n\n\t\t/**\n\t\t * The selections in this text editor. The primary selection is always at index 0.\n\t\t */\n\t\tselections: readonly Selection[];",
                    "name": "selections",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "Selection",
                            "targs": [],
                            "isNullable": false,
                            "_": 1182,
                            "source": " Selection"
                          }
                        ],
                        "isNullable": false,
                        "_": 1182,
                        "source": " Selection[]"
                      },
                      "isNullable": false,
                      "_": 1182,
                      "source": " readonly Selection[]"
                    }
                  },
                  {
                    "doc": "The current visible ranges in the editor (vertically).\nThis accounts only for vertical scrolling, and not for horizontal scrolling.",
                    "isMethod": false,
                    "_": 1188,
                    "source": "\n\n\t\t/**\n\t\t * The current visible ranges in the editor (vertically).\n\t\t * This accounts only for vertical scrolling, and not for horizontal scrolling.\n\t\t */\n\t\treadonly visibleRanges: readonly Range[];",
                    "name": "visibleRanges",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "Range",
                            "targs": [],
                            "isNullable": false,
                            "_": 1188,
                            "source": " Range"
                          }
                        ],
                        "isNullable": false,
                        "_": 1188,
                        "source": " Range[]"
                      },
                      "isNullable": false,
                      "_": 1188,
                      "source": " readonly Range[]"
                    }
                  },
                  {
                    "doc": "Text editor options.",
                    "isMethod": false,
                    "_": 1193,
                    "source": "\n\n\t\t/**\n\t\t * Text editor options.\n\t\t */\n\t\toptions: TextEditorOptions;",
                    "name": "options",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "TextEditorOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 1193,
                      "source": " TextEditorOptions"
                    }
                  },
                  {
                    "doc": "The column in which this editor shows. Will be `undefined` in case this\nisn't one of the main editors, e.g. an embedded editor, or when the editor\ncolumn is larger than three.",
                    "isMethod": false,
                    "_": 1200,
                    "source": "\n\n\t\t/**\n\t\t * The column in which this editor shows. Will be `undefined` in case this\n\t\t * isn't one of the main editors, e.g. an embedded editor, or when the editor\n\t\t * column is larger than three.\n\t\t */\n\t\treadonly viewColumn: ViewColumn | undefined;",
                    "name": "viewColumn",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "ViewColumn",
                          "targs": [],
                          "isNullable": false,
                          "_": 1200,
                          "source": " ViewColumn"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 1200,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 1200,
                      "source": " ViewColumn | undefined"
                    }
                  },
                  {
                    "doc": "Perform an edit on the document associated with this text editor.\n\n The given callback-function is invoked with an {@link TextEditorEdit edit-builder} which must\n be used to make edits. Note that the edit-builder is only valid while the\n callback executes.\n\n @param callback A function which can create edits using an {@link TextEditorEdit edit-builder}.\n @param options The undo/redo behavior around this edit. By default, undo stops will be created before and after this edit.\n @return A promise that resolves with a value indicating if the edits could be applied.",
                    "isMethod": true,
                    "_": 1213,
                    "source": "\n\n\t\t/**\n\t\t * Perform an edit on the document associated with this text editor.\n\t\t *\n\t\t * The given callback-function is invoked with an {@link TextEditorEdit edit-builder} which must\n\t\t * be used to make edits. Note that the edit-builder is only valid while the\n\t\t * callback executes.\n\t\t *\n\t\t * @param callback A function which can create edits using an {@link TextEditorEdit edit-builder}.\n\t\t * @param options The undo/redo behavior around this edit. By default, undo stops will be created before and after this edit.\n\t\t * @return A promise that resolves with a value indicating if the edits could be applied.\n\t\t */\n\t\tedit(callback: (editBuilder: TextEditorEdit) => void, options?: { readonly undoStopBefore: boolean; readonly undoStopAfter: boolean }): Thenable<boolean>;",
                    "name": "edit",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "callback",
                        "type": {
                          "ctor": false,
                          "generics": [],
                          "returns": {
                            "core": "void",
                            "isNullable": false,
                            "_": 1213,
                            "source": " void"
                          },
                          "params": [
                            {
                              "name": "editBuilder",
                              "type": {
                                "ref": "TextEditorEdit",
                                "targs": [],
                                "isNullable": false,
                                "_": 1213,
                                "source": " TextEditorEdit"
                              },
                              "varargs": false,
                              "isNullable": false
                            }
                          ],
                          "isNullable": false,
                          "_": 1213,
                          "source": " (editBuilder: TextEditorEdit) => void"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "options",
                        "type": {
                          "ref": "IInline3",
                          "targs": [],
                          "isNullable": false,
                          "_": 1213,
                          "source": " { readonly undoStopBefore: boolean; readonly undoStopAfter: boolean }"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "Thenable",
                      "targs": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 1213,
                          "source": "boolean"
                        }
                      ],
                      "isNullable": false,
                      "_": 1213,
                      "source": " Thenable<boolean>"
                    }
                  },
                  {
                    "doc": "Insert a {@link SnippetString snippet} and put the editor into snippet mode. \"Snippet mode\"\n means the editor adds placeholders and additional cursors so that the user can complete\n or accept the snippet.\n\n @param snippet The snippet to insert in this edit.\n @param location Position or range at which to insert the snippet, defaults to the current editor selection or selections.\n @param options The undo/redo behavior around this edit. By default, undo stops will be created before and after this edit.\n @return A promise that resolves with a value indicating if the snippet could be inserted. Note that the promise does not signal\n that the snippet is completely filled-in or accepted.",
                    "isMethod": true,
                    "_": 1226,
                    "source": "\n\n\t\t/**\n\t\t * Insert a {@link SnippetString snippet} and put the editor into snippet mode. \"Snippet mode\"\n\t\t * means the editor adds placeholders and additional cursors so that the user can complete\n\t\t * or accept the snippet.\n\t\t *\n\t\t * @param snippet The snippet to insert in this edit.\n\t\t * @param location Position or range at which to insert the snippet, defaults to the current editor selection or selections.\n\t\t * @param options The undo/redo behavior around this edit. By default, undo stops will be created before and after this edit.\n\t\t * @return A promise that resolves with a value indicating if the snippet could be inserted. Note that the promise does not signal\n\t\t * that the snippet is completely filled-in or accepted.\n\t\t */\n\t\tinsertSnippet(snippet: SnippetString, location?: Position | Range | readonly Position[] | readonly Range[], options?: { readonly undoStopBefore: boolean; readonly undoStopAfter: boolean }): Thenable<boolean>;",
                    "name": "insertSnippet",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "snippet",
                        "type": {
                          "ref": "SnippetString",
                          "targs": [],
                          "isNullable": false,
                          "_": 1226,
                          "source": " SnippetString"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "location",
                        "type": {
                          "union": [
                            {
                              "ref": "Position",
                              "targs": [],
                              "isNullable": false,
                              "_": 1226,
                              "source": " Position"
                            },
                            {
                              "ref": "Range",
                              "targs": [],
                              "isNullable": false,
                              "_": 1226,
                              "source": " Range"
                            },
                            {
                              "operator": 146,
                              "type": {
                                "core": "array",
                                "targs": [
                                  {
                                    "ref": "Position",
                                    "targs": [],
                                    "isNullable": false,
                                    "_": 1226,
                                    "source": " Position"
                                  }
                                ],
                                "isNullable": false,
                                "_": 1226,
                                "source": " Position[]"
                              },
                              "isNullable": false,
                              "_": 1226,
                              "source": " readonly Position[]"
                            },
                            {
                              "operator": 146,
                              "type": {
                                "core": "array",
                                "targs": [
                                  {
                                    "ref": "Range",
                                    "targs": [],
                                    "isNullable": false,
                                    "_": 1226,
                                    "source": " Range"
                                  }
                                ],
                                "isNullable": false,
                                "_": 1226,
                                "source": " Range[]"
                              },
                              "isNullable": false,
                              "_": 1226,
                              "source": " readonly Range[]"
                            }
                          ],
                          "isNullable": false,
                          "_": 1226,
                          "source": " Position | Range | readonly Position[] | readonly Range[]"
                        },
                        "varargs": false,
                        "isNullable": true
                      },
                      {
                        "name": "options",
                        "type": {
                          "ref": "IInline4",
                          "targs": [],
                          "isNullable": false,
                          "_": 1226,
                          "source": " { readonly undoStopBefore: boolean; readonly undoStopAfter: boolean }"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "Thenable",
                      "targs": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 1226,
                          "source": "boolean"
                        }
                      ],
                      "isNullable": false,
                      "_": 1226,
                      "source": " Thenable<boolean>"
                    }
                  },
                  {
                    "doc": "Adds a set of decorations to the text editor. If a set of decorations already exists with\n the given {@link TextEditorDecorationType decoration type}, they will be replaced. If\n `rangesOrOptions` is empty, the existing decorations with the given {@link TextEditorDecorationType decoration type}\n will be removed.\n\n @see {@link window.createTextEditorDecorationType createTextEditorDecorationType}.\n\n @param decorationType A decoration type.\n @param rangesOrOptions Either {@link Range ranges} or more detailed {@link DecorationOptions options}.",
                    "isMethod": true,
                    "_": 1239,
                    "source": "\n\n\t\t/**\n\t\t * Adds a set of decorations to the text editor. If a set of decorations already exists with\n\t\t * the given {@link TextEditorDecorationType decoration type}, they will be replaced. If\n\t\t * `rangesOrOptions` is empty, the existing decorations with the given {@link TextEditorDecorationType decoration type}\n\t\t * will be removed.\n\t\t *\n\t\t * @see {@link window.createTextEditorDecorationType createTextEditorDecorationType}.\n\t\t *\n\t\t * @param decorationType A decoration type.\n\t\t * @param rangesOrOptions Either {@link Range ranges} or more detailed {@link DecorationOptions options}.\n\t\t */\n\t\tsetDecorations(decorationType: TextEditorDecorationType, rangesOrOptions: readonly Range[] | readonly DecorationOptions[]): void;",
                    "name": "setDecorations",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "decorationType",
                        "type": {
                          "ref": "TextEditorDecorationType",
                          "targs": [],
                          "isNullable": false,
                          "_": 1239,
                          "source": " TextEditorDecorationType"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "rangesOrOptions",
                        "type": {
                          "union": [
                            {
                              "operator": 146,
                              "type": {
                                "core": "array",
                                "targs": [
                                  {
                                    "ref": "Range",
                                    "targs": [],
                                    "isNullable": false,
                                    "_": 1239,
                                    "source": " Range"
                                  }
                                ],
                                "isNullable": false,
                                "_": 1239,
                                "source": " Range[]"
                              },
                              "isNullable": false,
                              "_": 1239,
                              "source": " readonly Range[]"
                            },
                            {
                              "operator": 146,
                              "type": {
                                "core": "array",
                                "targs": [
                                  {
                                    "ref": "DecorationOptions",
                                    "targs": [],
                                    "isNullable": false,
                                    "_": 1239,
                                    "source": " DecorationOptions"
                                  }
                                ],
                                "isNullable": false,
                                "_": 1239,
                                "source": " DecorationOptions[]"
                              },
                              "isNullable": false,
                              "_": 1239,
                              "source": " readonly DecorationOptions[]"
                            }
                          ],
                          "isNullable": false,
                          "_": 1239,
                          "source": " readonly Range[] | readonly DecorationOptions[]"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 1239,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Scroll as indicated by `revealType` in order to reveal the given range.\n\n @param range A range.\n @param revealType The scrolling strategy for revealing `range`.",
                    "isMethod": true,
                    "_": 1247,
                    "source": "\n\n\t\t/**\n\t\t * Scroll as indicated by `revealType` in order to reveal the given range.\n\t\t *\n\t\t * @param range A range.\n\t\t * @param revealType The scrolling strategy for revealing `range`.\n\t\t */\n\t\trevealRange(range: Range, revealType?: TextEditorRevealType): void;",
                    "name": "revealRange",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "range",
                        "type": {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 1247,
                          "source": " Range"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "revealType",
                        "type": {
                          "ref": "TextEditorRevealType",
                          "targs": [],
                          "isNullable": false,
                          "_": 1247,
                          "source": " TextEditorRevealType"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 1247,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Show the text editor.\n\n @deprecated Use {@link window.showTextDocument} instead.\n\n @param column The {@link ViewColumn column} in which to show this editor.\n This method shows unexpected behavior and will be removed in the next major update.",
                    "isMethod": true,
                    "_": 1257,
                    "source": "\n\n\t\t/**\n\t\t * Show the text editor.\n\t\t *\n\t\t * @deprecated Use {@link window.showTextDocument} instead.\n\t\t *\n\t\t * @param column The {@link ViewColumn column} in which to show this editor.\n\t\t * This method shows unexpected behavior and will be removed in the next major update.\n\t\t */\n\t\tshow(column?: ViewColumn): void;",
                    "name": "show",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "column",
                        "type": {
                          "ref": "ViewColumn",
                          "targs": [],
                          "isNullable": false,
                          "_": 1257,
                          "source": " ViewColumn"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 1257,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Hide the text editor.\n\n @deprecated Use the command `workbench.action.closeActiveEditor` instead.\n This method shows unexpected behavior and will be removed in the next major update.",
                    "isMethod": true,
                    "_": 1265,
                    "source": "\n\n\t\t/**\n\t\t * Hide the text editor.\n\t\t *\n\t\t * @deprecated Use the command `workbench.action.closeActiveEditor` instead.\n\t\t * This method shows unexpected behavior and will be removed in the next major update.\n\t\t */\n\t\thide(): void;",
                    "name": "hide",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 1265,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 1287,
                "name": "TextEditorEdit",
                "generics": [],
                "doc": "A complex edit that will be applied in one transaction on a TextEditor.\nThis holds a description of the edits and if the edits are valid (i.e. no overlapping regions, document was not changed in the meantime, etc.)\nthey can be applied on a {@link TextDocumentdocument} associated with a {@link TextEditortext editor}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Replace a certain text region with a new value.\n You can use \\r\\n or \\n in `value` and they will be normalized to the current {@link TextDocument document}.\n\n @param location The range this operation should remove.\n @param value The new text this operation should insert after removing `location`.",
                    "isMethod": true,
                    "_": 1295,
                    "source": "\n\t\t/**\n\t\t * Replace a certain text region with a new value.\n\t\t * You can use \\r\\n or \\n in `value` and they will be normalized to the current {@link TextDocument document}.\n\t\t *\n\t\t * @param location The range this operation should remove.\n\t\t * @param value The new text this operation should insert after removing `location`.\n\t\t */\n\t\treplace(location: Position | Range | Selection, value: string): void;",
                    "name": "replace",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "location",
                        "type": {
                          "union": [
                            {
                              "ref": "Position",
                              "targs": [],
                              "isNullable": false,
                              "_": 1295,
                              "source": " Position"
                            },
                            {
                              "ref": "Range",
                              "targs": [],
                              "isNullable": false,
                              "_": 1295,
                              "source": " Range"
                            },
                            {
                              "ref": "Selection",
                              "targs": [],
                              "isNullable": false,
                              "_": 1295,
                              "source": " Selection"
                            }
                          ],
                          "isNullable": false,
                          "_": 1295,
                          "source": " Position | Range | Selection"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "value",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 1295,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 1295,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Insert text at a location.\n You can use \\r\\n or \\n in `value` and they will be normalized to the current {@link TextDocument document}.\n Although the equivalent text edit can be made with {@link TextEditorEdit.replace replace}, `insert` will produce a different resulting selection (it will get moved).\n\n @param location The position where the new text should be inserted.\n @param value The new text this operation should insert.",
                    "isMethod": true,
                    "_": 1305,
                    "source": "\n\n\t\t/**\n\t\t * Insert text at a location.\n\t\t * You can use \\r\\n or \\n in `value` and they will be normalized to the current {@link TextDocument document}.\n\t\t * Although the equivalent text edit can be made with {@link TextEditorEdit.replace replace}, `insert` will produce a different resulting selection (it will get moved).\n\t\t *\n\t\t * @param location The position where the new text should be inserted.\n\t\t * @param value The new text this operation should insert.\n\t\t */\n\t\tinsert(location: Position, value: string): void;",
                    "name": "insert",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "location",
                        "type": {
                          "ref": "Position",
                          "targs": [],
                          "isNullable": false,
                          "_": 1305,
                          "source": " Position"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "value",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 1305,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 1305,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Delete a certain text region.\n\n @param location The range this operation should remove.",
                    "isMethod": true,
                    "_": 1312,
                    "source": "\n\n\t\t/**\n\t\t * Delete a certain text region.\n\t\t *\n\t\t * @param location The range this operation should remove.\n\t\t */\n\t\tdelete(location: Range | Selection): void;",
                    "name": "delete",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "location",
                        "type": {
                          "union": [
                            {
                              "ref": "Range",
                              "targs": [],
                              "isNullable": false,
                              "_": 1312,
                              "source": " Range"
                            },
                            {
                              "ref": "Selection",
                              "targs": [],
                              "isNullable": false,
                              "_": 1312,
                              "source": " Selection"
                            }
                          ],
                          "isNullable": false,
                          "_": 1312,
                          "source": " Range | Selection"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 1312,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Set the end of line sequence.\n\n @param endOfLine The new end of line for the {@link TextDocument document}.",
                    "isMethod": true,
                    "_": 1319,
                    "source": "\n\n\t\t/**\n\t\t * Set the end of line sequence.\n\t\t *\n\t\t * @param endOfLine The new end of line for the {@link TextDocument document}.\n\t\t */\n\t\tsetEndOfLine(endOfLine: EndOfLine): void;",
                    "name": "setEndOfLine",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "endOfLine",
                        "type": {
                          "ref": "EndOfLine",
                          "targs": [],
                          "isNullable": false,
                          "_": 1319,
                          "source": " EndOfLine"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 1319,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline5",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "Uri",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 1397,
                    "source": " readonly scheme: string;",
                    "name": "scheme",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1397,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 1397,
                    "source": " readonly authority?: string;",
                    "name": "authority",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1397,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 1397,
                    "source": " readonly path?: string;",
                    "name": "path",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1397,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 1397,
                    "source": " readonly query?: string;",
                    "name": "query",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1397,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 1397,
                    "source": " readonly fragment?: string",
                    "name": "fragment",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1397,
                      "source": " string"
                    }
                  }
                ],
                "calls": []
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline6",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "Uri",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 1467,
                    "source": " scheme?: string;",
                    "name": "scheme",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1467,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 1467,
                    "source": " authority?: string;",
                    "name": "authority",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1467,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 1467,
                    "source": " path?: string;",
                    "name": "path",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1467,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 1467,
                    "source": " query?: string;",
                    "name": "query",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1467,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 1467,
                    "source": " fragment?: string",
                    "name": "fragment",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1467,
                      "source": " string"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 1326,
                "name": "Uri",
                "generics": [],
                "doc": "A universal resource identifier representing either a file on disk\nor another resource, like untitled resources.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 1402,
                    "source": "\n\n\t\t/**\n\t\t * Use the `file` and `parse` factory functions to create new `Uri` objects.\n\t\t */\n\t\tprivate constructor(scheme: string, authority: string, path: string, query: string, fragment: string);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": true,
                    "params": [
                      {
                        "name": "scheme",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 1402,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "authority",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 1402,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "path",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 1402,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "query",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 1402,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "fragment",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 1402,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "Create an URI from a string, e.g. `http://www.example.com/some/path`,\n`file:///usr/home`, or `scheme:with/path`.\n\n*Note* that for a while uris without a `scheme` were accepted. That is not correct\nas all uris should have a scheme. To avoid breakage of existing code the optional\n`strict`-argument has been added. We *strongly* advise to use it, e.g. `Uri.parse('my:uri', true)`",
                    "isMethod": true,
                    "_": 1341,
                    "source": "\n\n\t\t/**\n\t\t * Create an URI from a string, e.g. `http://www.example.com/some/path`,\n\t\t * `file:///usr/home`, or `scheme:with/path`.\n\t\t *\n\t\t * *Note* that for a while uris without a `scheme` were accepted. That is not correct\n\t\t * as all uris should have a scheme. To avoid breakage of existing code the optional\n\t\t * `strict`-argument has been added. We *strongly* advise to use it, e.g. `Uri.parse('my:uri', true)`\n\t\t *\n\t\t * @see {@link Uri.toString}\n\t\t * @param value The string value of an Uri.\n\t\t * @param strict Throw an error when `value` is empty or when no `scheme` can be parsed.\n\t\t * @return A new Uri instance.\n\t\t */\n\t\tstatic parse(value: string, strict?: boolean): Uri;",
                    "name": "parse",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "value",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 1341,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "strict",
                        "type": {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 1341,
                          "source": " boolean"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 1341,
                      "source": " Uri"
                    }
                  },
                  {
                    "doc": "Create an URI from a file system path. The {@link Uri.schemescheme}\nwill be `file`.\n\nThe *difference* between {@link Uri.parse} and {@link Uri.file} is that the latter treats the argument\nas path, not as stringified-uri. E.g. `Uri.file(path)` is *not* the same as\n`Uri.parse('file://' + path)` because the path might contain characters that are\ninterpreted (# and ?). See the following sample:\n```ts\nconst good = URI.file('/coding/c#/project1');\ngood.scheme === 'file';\ngood.path === '/coding/c#/project1';\ngood.fragment === '';\n\nconst bad = URI.parse('file://' + '/coding/c#/project1');\nbad.scheme === 'file';\nbad.path === '/coding/c'; // path is now broken\nbad.fragment === '/project1';\n```",
                    "isMethod": true,
                    "_": 1366,
                    "source": "\n\n\t\t/**\n\t\t * Create an URI from a file system path. The {@link Uri.scheme scheme}\n\t\t * will be `file`.\n\t\t *\n\t\t * The *difference* between {@link Uri.parse} and {@link Uri.file} is that the latter treats the argument\n\t\t * as path, not as stringified-uri. E.g. `Uri.file(path)` is *not* the same as\n\t\t * `Uri.parse('file://' + path)` because the path might contain characters that are\n\t\t * interpreted (# and ?). See the following sample:\n\t\t * ```ts\n\t\t * const good = URI.file('/coding/c#/project1');\n\t\t * good.scheme === 'file';\n\t\t * good.path === '/coding/c#/project1';\n\t\t * good.fragment === '';\n\t\t *\n\t\t * const bad = URI.parse('file://' + '/coding/c#/project1');\n\t\t * bad.scheme === 'file';\n\t\t * bad.path === '/coding/c'; // path is now broken\n\t\t * bad.fragment === '/project1';\n\t\t * ```\n\t\t *\n\t\t * @param path A file system or UNC path.\n\t\t * @return A new Uri instance.\n\t\t */\n\t\tstatic file(path: string): Uri;",
                    "name": "file",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "path",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 1366,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 1366,
                      "source": " Uri"
                    }
                  },
                  {
                    "doc": "Create a new uri which path is the result of joining\nthe path of the base uri with the provided path segments.\n\n- Note 1: `joinPath` only affects the path component\nand all other components (scheme, authority, query, and fragment) are\nleft as they are.\n- Note 2: The base uri must have a path; an error is thrown otherwise.\n\nThe path segments are normalized in the following ways:\n- sequences of path separators (`/` or `\\`) are replaced with a single separator\n- for `file`-uris on windows, the backslash-character (`\\`) is considered a path-separator\n- the `..`-segment denotes the parent segment, the `.` denotes the current segment\n- paths have a root which always remains, for instance on windows drive-letters are roots\nso that is true: `joinPath(Uri.file('file:///c:/root'), '../../other').fsPath === 'c:/other'`",
                    "isMethod": true,
                    "_": 1388,
                    "source": "\n\n\t\t/**\n\t\t * Create a new uri which path is the result of joining\n\t\t * the path of the base uri with the provided path segments.\n\t\t *\n\t\t * - Note 1: `joinPath` only affects the path component\n\t\t * and all other components (scheme, authority, query, and fragment) are\n\t\t * left as they are.\n\t\t * - Note 2: The base uri must have a path; an error is thrown otherwise.\n\t\t *\n\t\t * The path segments are normalized in the following ways:\n\t\t * - sequences of path separators (`/` or `\\`) are replaced with a single separator\n\t\t * - for `file`-uris on windows, the backslash-character (`\\`) is considered a path-separator\n\t\t * - the `..`-segment denotes the parent segment, the `.` denotes the current segment\n\t\t * - paths have a root which always remains, for instance on windows drive-letters are roots\n\t\t * so that is true: `joinPath(Uri.file('file:///c:/root'), '../../other').fsPath === 'c:/other'`\n\t\t *\n\t\t * @param base An uri. Must have a path.\n\t\t * @param pathSegments One more more path fragments\n\t\t * @returns A new uri which path is joined with the given fragments\n\t\t */\n\t\tstatic joinPath(base: Uri, ...pathSegments: string[]): Uri;",
                    "name": "joinPath",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "base",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 1388,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "pathSegments",
                        "type": {
                          "core": "array",
                          "targs": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 1388,
                              "source": " string"
                            }
                          ],
                          "isNullable": false,
                          "_": 1388,
                          "source": " string[]"
                        },
                        "varargs": true,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 1388,
                      "source": " Uri"
                    }
                  },
                  {
                    "doc": "Create an URI from its component parts",
                    "isMethod": true,
                    "_": 1397,
                    "source": "\n\n\t\t/**\n\t\t * Create an URI from its component parts\n\t\t *\n\t\t * @see {@link Uri.toString}\n\t\t * @param components The component parts of an Uri.\n\t\t * @return A new Uri instance.\n\t\t */\n\t\tstatic from(components: { readonly scheme: string; readonly authority?: string; readonly path?: string; readonly query?: string; readonly fragment?: string }): Uri;",
                    "name": "from",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "components",
                        "type": {
                          "ref": "IInline5",
                          "targs": [],
                          "isNullable": false,
                          "_": 1397,
                          "source": " { readonly scheme: string; readonly authority?: string; readonly path?: string; readonly query?: string; readonly fragment?: string }"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 1397,
                      "source": " Uri"
                    }
                  },
                  {
                    "doc": "Scheme is the `http` part of `http://www.example.com/some/path?query#fragment`.\nThe part before the first colon.",
                    "isMethod": false,
                    "_": 1408,
                    "source": "\n\n\t\t/**\n\t\t * Scheme is the `http` part of `http://www.example.com/some/path?query#fragment`.\n\t\t * The part before the first colon.\n\t\t */\n\t\treadonly scheme: string;",
                    "name": "scheme",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1408,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Authority is the `www.example.com` part of `http://www.example.com/some/path?query#fragment`.\nThe part between the first double slashes and the next slash.",
                    "isMethod": false,
                    "_": 1414,
                    "source": "\n\n\t\t/**\n\t\t * Authority is the `www.example.com` part of `http://www.example.com/some/path?query#fragment`.\n\t\t * The part between the first double slashes and the next slash.\n\t\t */\n\t\treadonly authority: string;",
                    "name": "authority",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1414,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Path is the `/some/path` part of `http://www.example.com/some/path?query#fragment`.",
                    "isMethod": false,
                    "_": 1419,
                    "source": "\n\n\t\t/**\n\t\t * Path is the `/some/path` part of `http://www.example.com/some/path?query#fragment`.\n\t\t */\n\t\treadonly path: string;",
                    "name": "path",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1419,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Query is the `query` part of `http://www.example.com/some/path?query#fragment`.",
                    "isMethod": false,
                    "_": 1424,
                    "source": "\n\n\t\t/**\n\t\t * Query is the `query` part of `http://www.example.com/some/path?query#fragment`.\n\t\t */\n\t\treadonly query: string;",
                    "name": "query",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1424,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Fragment is the `fragment` part of `http://www.example.com/some/path?query#fragment`.",
                    "isMethod": false,
                    "_": 1429,
                    "source": "\n\n\t\t/**\n\t\t * Fragment is the `fragment` part of `http://www.example.com/some/path?query#fragment`.\n\t\t */\n\t\treadonly fragment: string;",
                    "name": "fragment",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1429,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The string representing the corresponding file system path of this Uri.\n\nWill handle UNC paths and normalize windows drive letters to lower-case. Also\nuses the platform specific path separator.\n\n* Will *not* validate the path for invalid characters and semantics.\n* Will *not* look at the scheme of this Uri.\n* The resulting string shall *not* be used for display purposes but\nfor disk operations, like `readFile` et al.\n\nThe *difference* to the {@linkcode Uri.pathpath}-property is the use of the platform specific\npath separator and the handling of UNC paths. The sample below outlines the difference:\n```ts\nconst u = URI.parse('file://server/c$/folder/file.txt')\nu.authority === 'server'\nu.path === '/shares/c$/file.txt'\nu.fsPath === '\\\\server\\c$\\folder\\file.txt'\n```",
                    "isMethod": false,
                    "_": 1451,
                    "source": "\n\n\t\t/**\n\t\t * The string representing the corresponding file system path of this Uri.\n\t\t *\n\t\t * Will handle UNC paths and normalize windows drive letters to lower-case. Also\n\t\t * uses the platform specific path separator.\n\t\t *\n\t\t * * Will *not* validate the path for invalid characters and semantics.\n\t\t * * Will *not* look at the scheme of this Uri.\n\t\t * * The resulting string shall *not* be used for display purposes but\n\t\t * for disk operations, like `readFile` et al.\n\t\t *\n\t\t * The *difference* to the {@linkcode Uri.path path}-property is the use of the platform specific\n\t\t * path separator and the handling of UNC paths. The sample below outlines the difference:\n\t\t * ```ts\n\t\t * const u = URI.parse('file://server/c$/folder/file.txt')\n\t\t * u.authority === 'server'\n\t\t * u.path === '/shares/c$/file.txt'\n\t\t * u.fsPath === '\\\\server\\c$\\folder\\file.txt'\n\t\t * ```\n\t\t */\n\t\treadonly fsPath: string;",
                    "name": "fsPath",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1451,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Derive a new Uri from this Uri.\n\n ```ts\n let file = Uri.parse('before:some/file/path');\n let other = file.with({ scheme: 'after' });\n assert.ok(other.toString() === 'after:some/file/path');\n ```\n\n @param change An object that describes a change to this Uri. To unset components use `null` or\n  the empty string.\n @return A new Uri that reflects the given change. Will return `this` Uri if the change\n  is not changing anything.",
                    "isMethod": true,
                    "_": 1467,
                    "source": "\n\n\t\t/**\n\t\t * Derive a new Uri from this Uri.\n\t\t *\n\t\t * ```ts\n\t\t * let file = Uri.parse('before:some/file/path');\n\t\t * let other = file.with({ scheme: 'after' });\n\t\t * assert.ok(other.toString() === 'after:some/file/path');\n\t\t * ```\n\t\t *\n\t\t * @param change An object that describes a change to this Uri. To unset components use `null` or\n\t\t *  the empty string.\n\t\t * @return A new Uri that reflects the given change. Will return `this` Uri if the change\n\t\t *  is not changing anything.\n\t\t */\n\t\twith(change: { scheme?: string; authority?: string; path?: string; query?: string; fragment?: string }): Uri;",
                    "name": "with",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "change",
                        "type": {
                          "ref": "IInline6",
                          "targs": [],
                          "isNullable": false,
                          "_": 1467,
                          "source": " { scheme?: string; authority?: string; path?: string; query?: string; fragment?: string }"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 1467,
                      "source": " Uri"
                    }
                  },
                  {
                    "doc": "Returns a string representation of this Uri. The representation and normalization\n of a URI depends on the scheme.\n\n * The resulting string can be safely used with {@link Uri.parse}.\n * The resulting string shall *not* be used for display purposes.\n\n *Note* that the implementation will encode _aggressive_ which often leads to unexpected,\n but not incorrect, results. For instance, colons are encoded to `%3A` which might be unexpected\n in file-uri. Also `&` and `=` will be encoded which might be unexpected for http-uris. For stability\n reasons this cannot be changed anymore. If you suffer from too aggressive encoding you should use\n the `skipEncoding`-argument: `uri.toString(true)`.\n\n @param skipEncoding Do not percentage-encode the result, defaults to `false`. Note that\n\tthe `#` and `?` characters occurring in the path will always be encoded.\n @returns A string representation of this Uri.",
                    "isMethod": true,
                    "_": 1486,
                    "source": "\n\n\t\t/**\n\t\t * Returns a string representation of this Uri. The representation and normalization\n\t\t * of a URI depends on the scheme.\n\t\t *\n\t\t * * The resulting string can be safely used with {@link Uri.parse}.\n\t\t * * The resulting string shall *not* be used for display purposes.\n\t\t *\n\t\t * *Note* that the implementation will encode _aggressive_ which often leads to unexpected,\n\t\t * but not incorrect, results. For instance, colons are encoded to `%3A` which might be unexpected\n\t\t * in file-uri. Also `&` and `=` will be encoded which might be unexpected for http-uris. For stability\n\t\t * reasons this cannot be changed anymore. If you suffer from too aggressive encoding you should use\n\t\t * the `skipEncoding`-argument: `uri.toString(true)`.\n\t\t *\n\t\t * @param skipEncoding Do not percentage-encode the result, defaults to `false`. Note that\n\t\t *\tthe `#` and `?` characters occurring in the path will always be encoded.\n\t\t * @returns A string representation of this Uri.\n\t\t */\n\t\ttoString(skipEncoding?: boolean): string;",
                    "name": "toString",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "skipEncoding",
                        "type": {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 1486,
                          "source": " boolean"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1486,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Returns a JSON representation of this Uri.\n\n @return An object.",
                    "isMethod": true,
                    "_": 1493,
                    "source": "\n\n\t\t/**\n\t\t * Returns a JSON representation of this Uri.\n\t\t *\n\t\t * @return An object.\n\t\t */\n\t\ttoJSON(): any;",
                    "name": "toJSON",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "any",
                      "isNullable": false,
                      "_": 1493,
                      "source": " any"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 1504,
                "name": "CancellationToken",
                "generics": [],
                "doc": "A cancellation token is passed to an asynchronous or long running\noperation to request cancellation, like cancelling a request\nfor completion items because the user continued to type.\n\nTo get an instance of a `CancellationToken` use a\n{@link CancellationTokenSource}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Is `true` when the token has been cancelled, `false` otherwise.",
                    "isMethod": false,
                    "_": 1509,
                    "source": "\n\n\t\t/**\n\t\t * Is `true` when the token has been cancelled, `false` otherwise.\n\t\t */\n\t\tisCancellationRequested: boolean;",
                    "name": "isCancellationRequested",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 1509,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "An {@link Event} which fires upon cancellation.",
                    "isMethod": false,
                    "_": 1514,
                    "source": "\n\n\t\t/**\n\t\t * An {@link Event} which fires upon cancellation.\n\t\t */\n\t\tonCancellationRequested: Event<any>;",
                    "name": "onCancellationRequested",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "core": "any",
                          "isNullable": false,
                          "_": 1514,
                          "source": "any"
                        }
                      ],
                      "isNullable": false,
                      "_": 1514,
                      "source": " Event<any>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 1520,
                "name": "CancellationTokenSource",
                "generics": [],
                "doc": "A cancellation source creates and controls a {@link CancellationTokencancellation token}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The cancellation token of this source.",
                    "isMethod": false,
                    "_": 1525,
                    "source": "\n\n\t\t/**\n\t\t * The cancellation token of this source.\n\t\t */\n\t\ttoken: CancellationToken;",
                    "name": "token",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "CancellationToken",
                      "targs": [],
                      "isNullable": false,
                      "_": 1525,
                      "source": " CancellationToken"
                    }
                  },
                  {
                    "doc": "Signal cancellation on the token.",
                    "isMethod": true,
                    "_": 1530,
                    "source": "\n\n\t\t/**\n\t\t * Signal cancellation on the token.\n\t\t */\n\t\tcancel(): void;",
                    "name": "cancel",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 1530,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Dispose object and free resources.",
                    "isMethod": true,
                    "_": 1535,
                    "source": "\n\n\t\t/**\n\t\t * Dispose object and free resources.\n\t\t */\n\t\tdispose(): void;",
                    "name": "dispose",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 1535,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 1545,
                "name": "CancellationError",
                "generics": [],
                "doc": "An error type that should be used to signal cancellation of an operation.\n\nThis type can be used in response to a {@link CancellationTokencancellation token}\nbeing cancelled or when an operation is being cancelled by the\nexecutor of that operation.",
                "heritage": [
                  [
                    {
                      "ref": "Error",
                      "targs": [],
                      "isNullable": false,
                      "_": 1545,
                      "source": " Error"
                    }
                  ]
                ],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 1550,
                    "source": "\n\n\t\t/**\n\t\t * Creates a new cancellation error.\n\t\t */\n\t\tconstructor();",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": []
                  }
                ],
                "members": [],
                "calls": [],
                "isClass": true
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline7",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "Disposable",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 1568,
                    "source": " dispose: () => any",
                    "name": "dispose",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ctor": false,
                      "generics": [],
                      "returns": {
                        "core": "any",
                        "isNullable": false,
                        "_": 1568,
                        "source": " any"
                      },
                      "params": [],
                      "isNullable": false,
                      "_": 1568,
                      "source": " () => any"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 1557,
                "name": "Disposable",
                "generics": [],
                "doc": "Represents a type which can release resources, such\nas event listening or a timer.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 1578,
                    "source": "\n\n\t\t/**\n\t\t * Creates a new disposable that calls the provided function\n\t\t * on dispose.\n\t\t *\n\t\t * *Note* that an asynchronous function is not awaited.\n\t\t *\n\t\t * @param callOnDispose Function that disposes something.\n\t\t */\n\t\tconstructor(callOnDispose: () => any);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "callOnDispose",
                        "type": {
                          "ctor": false,
                          "generics": [],
                          "returns": {
                            "core": "any",
                            "isNullable": false,
                            "_": 1578,
                            "source": " any"
                          },
                          "params": [],
                          "isNullable": false,
                          "_": 1578,
                          "source": " () => any"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "Combine many disposable-likes into one. You can use this method when having objects with\na dispose function which aren't instances of `Disposable`.",
                    "isMethod": true,
                    "_": 1568,
                    "source": "\n\n\t\t/**\n\t\t * Combine many disposable-likes into one. You can use this method when having objects with\n\t\t * a dispose function which aren't instances of `Disposable`.\n\t\t *\n\t\t * @param disposableLikes Objects that have at least a `dispose`-function member. Note that asynchronous\n\t\t * dispose-functions aren't awaited.\n\t\t * @return Returns a new disposable which, upon dispose, will\n\t\t * dispose all provided disposables.\n\t\t */\n\t\tstatic from(...disposableLikes: { dispose: () => any }[]): Disposable;",
                    "name": "from",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "disposableLikes",
                        "type": {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "IInline7",
                              "targs": [],
                              "isNullable": false,
                              "_": 1568,
                              "source": " { dispose: () => any }"
                            }
                          ],
                          "isNullable": false,
                          "_": 1568,
                          "source": " { dispose: () => any }[]"
                        },
                        "varargs": true,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Disposable",
                      "targs": [],
                      "isNullable": false,
                      "_": 1568,
                      "source": " Disposable"
                    }
                  },
                  {
                    "doc": "Dispose this object.",
                    "isMethod": true,
                    "_": 1583,
                    "source": "\n\n\t\t/**\n\t\t * Dispose this object.\n\t\t */\n\t\tdispose(): any;",
                    "name": "dispose",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "any",
                      "isNullable": false,
                      "_": 1583,
                      "source": " any"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 1595,
                "name": "Event",
                "generics": [
                  {
                    "name": "T",
                    "_": 1595,
                    "source": "T"
                  }
                ],
                "doc": "Represents a typed event.\n\nA function that represents an event to which you subscribe by calling it with\na listener function as argument.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [],
                "calls": [
                  {
                    "params": [
                      {
                        "name": "listener",
                        "type": {
                          "ctor": false,
                          "generics": [],
                          "returns": {
                            "core": "any",
                            "isNullable": false,
                            "_": 1606,
                            "source": " any"
                          },
                          "params": [
                            {
                              "name": "e",
                              "type": {
                                "ref": "T",
                                "targs": [],
                                "isNullable": false,
                                "_": 1606,
                                "source": " T"
                              },
                              "varargs": false,
                              "isNullable": false
                            }
                          ],
                          "isNullable": false,
                          "_": 1606,
                          "source": " (e: T) => any"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "thisArgs",
                        "type": {
                          "core": "any",
                          "isNullable": false,
                          "_": 1606,
                          "source": " any"
                        },
                        "varargs": false,
                        "isNullable": true
                      },
                      {
                        "name": "disposables",
                        "type": {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "Disposable",
                              "targs": [],
                              "isNullable": false,
                              "_": 1606,
                              "source": " Disposable"
                            }
                          ],
                          "isNullable": false,
                          "_": 1606,
                          "source": " Disposable[]"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "Disposable",
                      "targs": [],
                      "isNullable": false,
                      "_": 1606,
                      "source": " Disposable"
                    },
                    "generics": [],
                    "doc": "",
                    "_": 1606,
                    "source": "\n\n\t\t/**\n\t\t * A function that represents an event to which you subscribe by calling it with\n\t\t * a listener function as argument.\n\t\t *\n\t\t * @param listener The listener function will be called when the event happens.\n\t\t * @param thisArgs The `this`-argument which will be used when calling the event listener.\n\t\t * @param disposables An array to which a {@link Disposable} will be added.\n\t\t * @return A disposable which unsubscribes the event listener.\n\t\t */\n\t\t(listener: (e: T) => any, thisArgs?: any, disposables?: Disposable[]): Disposable;"
                  }
                ],
                "isClass": false
              },
              {
                "_": 1617,
                "name": "EventEmitter",
                "generics": [
                  {
                    "name": "T",
                    "_": 1617,
                    "source": "T"
                  }
                ],
                "doc": "An event emitter can be used to create and manage an {@link Event} for others\nto subscribe to. One emitter always owns one event.\n\nUse this class if you want to provide event from within your extension, for instance\ninside a {@link TextDocumentContentProvider} or when providing\nAPI to other extensions.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The event listeners can subscribe to.",
                    "isMethod": false,
                    "_": 1622,
                    "source": "\n\n\t\t/**\n\t\t * The event listeners can subscribe to.\n\t\t */\n\t\tevent: Event<T>;",
                    "name": "event",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "ref": "T",
                          "targs": [],
                          "isNullable": false,
                          "_": 1622,
                          "source": "T"
                        }
                      ],
                      "isNullable": false,
                      "_": 1622,
                      "source": " Event<T>"
                    }
                  },
                  {
                    "doc": "Notify all subscribers of the {@link EventEmitter.event event}. Failure\n of one or more listener will not fail this function call.\n\n @param data The event object.",
                    "isMethod": true,
                    "_": 1630,
                    "source": "\n\n\t\t/**\n\t\t * Notify all subscribers of the {@link EventEmitter.event event}. Failure\n\t\t * of one or more listener will not fail this function call.\n\t\t *\n\t\t * @param data The event object.\n\t\t */\n\t\tfire(data: T): void;",
                    "name": "fire",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "data",
                        "type": {
                          "ref": "T",
                          "targs": [],
                          "isNullable": false,
                          "_": 1630,
                          "source": " T"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 1630,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Dispose this object and free resources.",
                    "isMethod": true,
                    "_": 1635,
                    "source": "\n\n\t\t/**\n\t\t * Dispose this object and free resources.\n\t\t */\n\t\tdispose(): void;",
                    "name": "dispose",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 1635,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 1645,
                "name": "FileSystemWatcher",
                "generics": [],
                "doc": "A file system watcher notifies about changes to files and folders\non disk or from other {@link FileSystemProviderFileSystemProviders}.\n\nTo get an instance of a `FileSystemWatcher` use\n{@link workspace.createFileSystemWatchercreateFileSystemWatcher}.",
                "heritage": [
                  [
                    {
                      "ref": "Disposable",
                      "targs": [],
                      "isNullable": false,
                      "_": 1645,
                      "source": " Disposable"
                    }
                  ]
                ],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "true if this file system watcher has been created such that\nit ignores creation file system events.",
                    "isMethod": false,
                    "_": 1651,
                    "source": "\n\n\t\t/**\n\t\t * true if this file system watcher has been created such that\n\t\t * it ignores creation file system events.\n\t\t */\n\t\treadonly ignoreCreateEvents: boolean;",
                    "name": "ignoreCreateEvents",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 1651,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "true if this file system watcher has been created such that\nit ignores change file system events.",
                    "isMethod": false,
                    "_": 1657,
                    "source": "\n\n\t\t/**\n\t\t * true if this file system watcher has been created such that\n\t\t * it ignores change file system events.\n\t\t */\n\t\treadonly ignoreChangeEvents: boolean;",
                    "name": "ignoreChangeEvents",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 1657,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "true if this file system watcher has been created such that\nit ignores delete file system events.",
                    "isMethod": false,
                    "_": 1663,
                    "source": "\n\n\t\t/**\n\t\t * true if this file system watcher has been created such that\n\t\t * it ignores delete file system events.\n\t\t */\n\t\treadonly ignoreDeleteEvents: boolean;",
                    "name": "ignoreDeleteEvents",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 1663,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "An event which fires on file/folder creation.",
                    "isMethod": false,
                    "_": 1668,
                    "source": "\n\n\t\t/**\n\t\t * An event which fires on file/folder creation.\n\t\t */\n\t\treadonly onDidCreate: Event<Uri>;",
                    "name": "onDidCreate",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 1668,
                          "source": "Uri"
                        }
                      ],
                      "isNullable": false,
                      "_": 1668,
                      "source": " Event<Uri>"
                    }
                  },
                  {
                    "doc": "An event which fires on file/folder change.",
                    "isMethod": false,
                    "_": 1673,
                    "source": "\n\n\t\t/**\n\t\t * An event which fires on file/folder change.\n\t\t */\n\t\treadonly onDidChange: Event<Uri>;",
                    "name": "onDidChange",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 1673,
                          "source": "Uri"
                        }
                      ],
                      "isNullable": false,
                      "_": 1673,
                      "source": " Event<Uri>"
                    }
                  },
                  {
                    "doc": "An event which fires on file/folder deletion.",
                    "isMethod": false,
                    "_": 1678,
                    "source": "\n\n\t\t/**\n\t\t * An event which fires on file/folder deletion.\n\t\t */\n\t\treadonly onDidDelete: Event<Uri>;",
                    "name": "onDidDelete",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 1678,
                          "source": "Uri"
                        }
                      ],
                      "isNullable": false,
                      "_": 1678,
                      "source": " Event<Uri>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 1690,
                "name": "TextDocumentContentProvider",
                "generics": [],
                "doc": "A text document content provider allows to add readonly documents\nto the editor, such as source from a dll or generated html from md.\n\nContent providers are {@link workspace.registerTextDocumentContentProviderregistered}\nfor a {@link Uri.schemeuri-scheme}. When a uri with that scheme is to\nbe {@link workspace.openTextDocumentloaded} the content provider is\nasked.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "An event to signal a resource has changed.",
                    "isMethod": false,
                    "_": 1695,
                    "source": "\n\n\t\t/**\n\t\t * An event to signal a resource has changed.\n\t\t */\n\t\tonDidChange?: Event<Uri>;",
                    "name": "onDidChange",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 1695,
                          "source": "Uri"
                        }
                      ],
                      "isNullable": false,
                      "_": 1695,
                      "source": " Event<Uri>"
                    }
                  },
                  {
                    "doc": "Provide textual content for a given uri.\n\n The editor will use the returned string-content to create a readonly\n {@link TextDocument document}. Resources allocated should be released when\n the corresponding document has been {@link workspace.onDidCloseTextDocument closed}.\n\n **Note**: The contents of the created {@link TextDocument document} might not be\n identical to the provided text due to end-of-line-sequence normalization.\n\n @param uri An uri which scheme matches the scheme this provider was {@link workspace.registerTextDocumentContentProvider registered} for.\n @param token A cancellation token.\n @return A string or a thenable that resolves to such.",
                    "isMethod": true,
                    "_": 1711,
                    "source": "\n\n\t\t/**\n\t\t * Provide textual content for a given uri.\n\t\t *\n\t\t * The editor will use the returned string-content to create a readonly\n\t\t * {@link TextDocument document}. Resources allocated should be released when\n\t\t * the corresponding document has been {@link workspace.onDidCloseTextDocument closed}.\n\t\t *\n\t\t * **Note**: The contents of the created {@link TextDocument document} might not be\n\t\t * identical to the provided text due to end-of-line-sequence normalization.\n\t\t *\n\t\t * @param uri An uri which scheme matches the scheme this provider was {@link workspace.registerTextDocumentContentProvider registered} for.\n\t\t * @param token A cancellation token.\n\t\t * @return A string or a thenable that resolves to such.\n\t\t */\n\t\tprovideTextDocumentContent(uri: Uri, token: CancellationToken): ProviderResult<string>;",
                    "name": "provideTextDocumentContent",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "uri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 1711,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 1711,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 1711,
                          "source": "string"
                        }
                      ],
                      "isNullable": false,
                      "_": 1711,
                      "source": " ProviderResult<string>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline8",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "QuickPickItem",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 1750,
                    "source": " light: Uri;",
                    "name": "light",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 1750,
                      "source": " Uri"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 1750,
                    "source": " dark: Uri",
                    "name": "dark",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 1750,
                      "source": " Uri"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 1733,
                "name": "QuickPickItem",
                "generics": [],
                "doc": "Represents an item that can be selected from\na list of items.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "A human-readable string which is rendered prominent. Supports rendering of {@link ThemeIcon theme icons} via\n the `$(<name>)`-syntax.",
                    "isMethod": false,
                    "_": 1739,
                    "source": "\n\n\t\t/**\n\t\t * A human-readable string which is rendered prominent. Supports rendering of {@link ThemeIcon theme icons} via\n\t\t * the `$(<name>)`-syntax.\n\t\t */\n\t\tlabel: string;",
                    "name": "label",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1739,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The kind of QuickPickItem that will determine how this item is rendered in the quick pick. When not specified,\n the default is {@link QuickPickItemKind.Default}.",
                    "isMethod": false,
                    "_": 1745,
                    "source": "\n\n\t\t/**\n\t\t * The kind of QuickPickItem that will determine how this item is rendered in the quick pick. When not specified,\n\t\t * the default is {@link QuickPickItemKind.Default}.\n\t\t */\n\t\tkind?: QuickPickItemKind;",
                    "name": "kind",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "QuickPickItemKind",
                      "targs": [],
                      "isNullable": false,
                      "_": 1745,
                      "source": " QuickPickItemKind"
                    }
                  },
                  {
                    "doc": "The icon path or {@link ThemeIcon} for the QuickPickItem.",
                    "isMethod": false,
                    "_": 1750,
                    "source": "\n\n\t\t/**\n\t\t * The icon path or {@link ThemeIcon} for the QuickPickItem.\n\t\t */\n\t\ticonPath?: Uri | { light: Uri; dark: Uri } | ThemeIcon;",
                    "name": "iconPath",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 1750,
                          "source": " Uri"
                        },
                        {
                          "ref": "IInline8",
                          "targs": [],
                          "isNullable": false,
                          "_": 1750,
                          "source": " { light: Uri; dark: Uri }"
                        },
                        {
                          "ref": "ThemeIcon",
                          "targs": [],
                          "isNullable": false,
                          "_": 1750,
                          "source": " ThemeIcon"
                        }
                      ],
                      "isNullable": false,
                      "_": 1750,
                      "source": " Uri | { light: Uri; dark: Uri } | ThemeIcon"
                    }
                  },
                  {
                    "doc": "A human-readable string which is rendered less prominent in the same line. Supports rendering of\n {@link ThemeIcon theme icons} via the `$(<name>)`-syntax.\n\n Note: this property is ignored when {@link QuickPickItem.kind kind} is set to {@link QuickPickItemKind.Separator}",
                    "isMethod": false,
                    "_": 1758,
                    "source": "\n\n\t\t/**\n\t\t * A human-readable string which is rendered less prominent in the same line. Supports rendering of\n\t\t * {@link ThemeIcon theme icons} via the `$(<name>)`-syntax.\n\t\t *\n\t\t * Note: this property is ignored when {@link QuickPickItem.kind kind} is set to {@link QuickPickItemKind.Separator}\n\t\t */\n\t\tdescription?: string;",
                    "name": "description",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1758,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "A human-readable string which is rendered less prominent in a separate line. Supports rendering of\n {@link ThemeIcon theme icons} via the `$(<name>)`-syntax.\n\n Note: this property is ignored when {@link QuickPickItem.kind kind} is set to {@link QuickPickItemKind.Separator}",
                    "isMethod": false,
                    "_": 1766,
                    "source": "\n\n\t\t/**\n\t\t * A human-readable string which is rendered less prominent in a separate line. Supports rendering of\n\t\t * {@link ThemeIcon theme icons} via the `$(<name>)`-syntax.\n\t\t *\n\t\t * Note: this property is ignored when {@link QuickPickItem.kind kind} is set to {@link QuickPickItemKind.Separator}\n\t\t */\n\t\tdetail?: string;",
                    "name": "detail",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1766,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Optional flag indicating if this item is picked initially. This is only honored when using\n the {@link window.showQuickPick showQuickPick()} API. To do the same thing with\n the {@link window.createQuickPick createQuickPick()} API, simply set the {@link QuickPick.selectedItems}\n to the items you want picked initially.\n (*Note:* This is only honored when the picker allows multiple selections.)\n\n @see {@link QuickPickOptions.canPickMany}\n\n Note: this property is ignored when {@link QuickPickItem.kind kind} is set to {@link QuickPickItemKind.Separator}",
                    "isMethod": false,
                    "_": 1779,
                    "source": "\n\n\t\t/**\n\t\t * Optional flag indicating if this item is picked initially. This is only honored when using\n\t\t * the {@link window.showQuickPick showQuickPick()} API. To do the same thing with\n\t\t * the {@link window.createQuickPick createQuickPick()} API, simply set the {@link QuickPick.selectedItems}\n\t\t * to the items you want picked initially.\n\t\t * (*Note:* This is only honored when the picker allows multiple selections.)\n\t\t *\n\t\t * @see {@link QuickPickOptions.canPickMany}\n\t\t *\n\t\t * Note: this property is ignored when {@link QuickPickItem.kind kind} is set to {@link QuickPickItemKind.Separator}\n\t\t */\n\t\tpicked?: boolean;",
                    "name": "picked",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 1779,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Always show this item.\n\n Note: this property is ignored when {@link QuickPickItem.kind kind} is set to {@link QuickPickItemKind.Separator}",
                    "isMethod": false,
                    "_": 1786,
                    "source": "\n\n\t\t/**\n\t\t * Always show this item.\n\t\t *\n\t\t * Note: this property is ignored when {@link QuickPickItem.kind kind} is set to {@link QuickPickItemKind.Separator}\n\t\t */\n\t\talwaysShow?: boolean;",
                    "name": "alwaysShow",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 1786,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Optional buttons that will be rendered on this particular item. These buttons will trigger\n an {@link QuickPickItemButtonEvent} when clicked. Buttons are only rendered when using a quickpick\n created by the {@link window.createQuickPick createQuickPick()} API. Buttons are not rendered when using\n the {@link window.showQuickPick showQuickPick()} API.\n\n Note: this property is ignored when {@link QuickPickItem.kind kind} is set to {@link QuickPickItemKind.Separator}",
                    "isMethod": false,
                    "_": 1796,
                    "source": "\n\n\t\t/**\n\t\t * Optional buttons that will be rendered on this particular item. These buttons will trigger\n\t\t * an {@link QuickPickItemButtonEvent} when clicked. Buttons are only rendered when using a quickpick\n\t\t * created by the {@link window.createQuickPick createQuickPick()} API. Buttons are not rendered when using\n\t\t * the {@link window.showQuickPick showQuickPick()} API.\n\t\t *\n\t\t * Note: this property is ignored when {@link QuickPickItem.kind kind} is set to {@link QuickPickItemKind.Separator}\n\t\t */\n\t\tbuttons?: readonly QuickInputButton[];",
                    "name": "buttons",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "QuickInputButton",
                            "targs": [],
                            "isNullable": false,
                            "_": 1796,
                            "source": " QuickInputButton"
                          }
                        ],
                        "isNullable": false,
                        "_": 1796,
                        "source": " QuickInputButton[]"
                      },
                      "isNullable": false,
                      "_": 1796,
                      "source": " readonly QuickInputButton[]"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 1802,
                "name": "QuickPickOptions",
                "generics": [],
                "doc": "Options to configure the behavior of the quick pick UI.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "An optional string that represents the title of the quick pick.",
                    "isMethod": false,
                    "_": 1807,
                    "source": "\n\n\t\t/**\n\t\t * An optional string that represents the title of the quick pick.\n\t\t */\n\t\ttitle?: string;",
                    "name": "title",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1807,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "An optional flag to include the description when filtering the picks.",
                    "isMethod": false,
                    "_": 1812,
                    "source": "\n\n\t\t/**\n\t\t * An optional flag to include the description when filtering the picks.\n\t\t */\n\t\tmatchOnDescription?: boolean;",
                    "name": "matchOnDescription",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 1812,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "An optional flag to include the detail when filtering the picks.",
                    "isMethod": false,
                    "_": 1817,
                    "source": "\n\n\t\t/**\n\t\t * An optional flag to include the detail when filtering the picks.\n\t\t */\n\t\tmatchOnDetail?: boolean;",
                    "name": "matchOnDetail",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 1817,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "An optional string to show as placeholder in the input box to guide the user what to pick on.",
                    "isMethod": false,
                    "_": 1822,
                    "source": "\n\n\t\t/**\n\t\t * An optional string to show as placeholder in the input box to guide the user what to pick on.\n\t\t */\n\t\tplaceHolder?: string;",
                    "name": "placeHolder",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1822,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Set to `true` to keep the picker open when focus moves to another part of the editor or to another window.\n This setting is ignored on iPad and is always false.",
                    "isMethod": false,
                    "_": 1828,
                    "source": "\n\n\t\t/**\n\t\t * Set to `true` to keep the picker open when focus moves to another part of the editor or to another window.\n\t\t * This setting is ignored on iPad and is always false.\n\t\t */\n\t\tignoreFocusOut?: boolean;",
                    "name": "ignoreFocusOut",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 1828,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "An optional flag to make the picker accept multiple selections, if true the result is an array of picks.",
                    "isMethod": false,
                    "_": 1833,
                    "source": "\n\n\t\t/**\n\t\t * An optional flag to make the picker accept multiple selections, if true the result is an array of picks.\n\t\t */\n\t\tcanPickMany?: boolean;",
                    "name": "canPickMany",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 1833,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "An optional function that is invoked whenever an item is selected.",
                    "isMethod": true,
                    "_": 1838,
                    "source": "\n\n\t\t/**\n\t\t * An optional function that is invoked whenever an item is selected.\n\t\t */\n\t\tonDidSelectItem?(item: QuickPickItem | string): any;",
                    "name": "onDidSelectItem",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "item",
                        "type": {
                          "union": [
                            {
                              "ref": "QuickPickItem",
                              "targs": [],
                              "isNullable": false,
                              "_": 1838,
                              "source": " QuickPickItem"
                            },
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 1838,
                              "source": " string"
                            }
                          ],
                          "isNullable": false,
                          "_": 1838,
                          "source": " QuickPickItem | string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "any",
                      "isNullable": false,
                      "_": 1838,
                      "source": " any"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 1844,
                "name": "WorkspaceFolderPickOptions",
                "generics": [],
                "doc": "Options to configure the behaviour of the {@link WorkspaceFolderworkspace folder} pick UI.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "An optional string to show as placeholder in the input box to guide the user what to pick on.",
                    "isMethod": false,
                    "_": 1849,
                    "source": "\n\n\t\t/**\n\t\t * An optional string to show as placeholder in the input box to guide the user what to pick on.\n\t\t */\n\t\tplaceHolder?: string;",
                    "name": "placeHolder",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1849,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Set to `true` to keep the picker open when focus moves to another part of the editor or to another window.\n This setting is ignored on iPad and is always false.",
                    "isMethod": false,
                    "_": 1855,
                    "source": "\n\n\t\t/**\n\t\t * Set to `true` to keep the picker open when focus moves to another part of the editor or to another window.\n\t\t * This setting is ignored on iPad and is always false.\n\t\t */\n\t\tignoreFocusOut?: boolean;",
                    "name": "ignoreFocusOut",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 1855,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline9",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "OpenDialogOptions",
                "source": "",
                "indexes": [
                  {
                    "key": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1902,
                      "source": " string"
                    },
                    "value": {
                      "core": "array",
                      "targs": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 1902,
                          "source": " string"
                        }
                      ],
                      "isNullable": false,
                      "_": 1902,
                      "source": " string[]"
                    },
                    "doc": "",
                    "_": 1902,
                    "source": " [name: string]: string[]",
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false
                  }
                ],
                "ctors": [],
                "members": [],
                "calls": []
              },
              {
                "_": 1866,
                "name": "OpenDialogOptions",
                "generics": [],
                "doc": "Options to configure the behaviour of a file open dialog.\n\n* Note 1: On Windows and Linux, a file dialog cannot be both a file selector and a folder selector, so if you\nset both `canSelectFiles` and `canSelectFolders` to `true` on these platforms, a folder selector will be shown.\n* Note 2: Explicitly setting `canSelectFiles` and `canSelectFolders` to `false` is futile\nand the editor then silently adjusts the options to select files.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The resource the dialog shows when opened.",
                    "isMethod": false,
                    "_": 1870,
                    "source": "\n\t\t/**\n\t\t * The resource the dialog shows when opened.\n\t\t */\n\t\tdefaultUri?: Uri;",
                    "name": "defaultUri",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 1870,
                      "source": " Uri"
                    }
                  },
                  {
                    "doc": "A human-readable string for the open button.",
                    "isMethod": false,
                    "_": 1875,
                    "source": "\n\n\t\t/**\n\t\t * A human-readable string for the open button.\n\t\t */\n\t\topenLabel?: string;",
                    "name": "openLabel",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1875,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Allow to select files, defaults to `true`.",
                    "isMethod": false,
                    "_": 1880,
                    "source": "\n\n\t\t/**\n\t\t * Allow to select files, defaults to `true`.\n\t\t */\n\t\tcanSelectFiles?: boolean;",
                    "name": "canSelectFiles",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 1880,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Allow to select folders, defaults to `false`.",
                    "isMethod": false,
                    "_": 1885,
                    "source": "\n\n\t\t/**\n\t\t * Allow to select folders, defaults to `false`.\n\t\t */\n\t\tcanSelectFolders?: boolean;",
                    "name": "canSelectFolders",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 1885,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Allow to select many files or folders.",
                    "isMethod": false,
                    "_": 1890,
                    "source": "\n\n\t\t/**\n\t\t * Allow to select many files or folders.\n\t\t */\n\t\tcanSelectMany?: boolean;",
                    "name": "canSelectMany",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 1890,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "A set of file filters that are used by the dialog. Each entry is a human-readable label,\n like \"TypeScript\", and an array of extensions, e.g.\n ```ts\n {\n \t'Images': ['png', 'jpg']\n \t'TypeScript': ['ts', 'tsx']\n }\n ```",
                    "isMethod": false,
                    "_": 1902,
                    "source": "\n\n\t\t/**\n\t\t * A set of file filters that are used by the dialog. Each entry is a human-readable label,\n\t\t * like \"TypeScript\", and an array of extensions, e.g.\n\t\t * ```ts\n\t\t * {\n\t\t * \t'Images': ['png', 'jpg']\n\t\t * \t'TypeScript': ['ts', 'tsx']\n\t\t * }\n\t\t * ```\n\t\t */\n\t\tfilters?: { [name: string]: string[] };",
                    "name": "filters",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "IInline9",
                      "targs": [],
                      "isNullable": false,
                      "_": 1902,
                      "source": " { [name: string]: string[] }"
                    }
                  },
                  {
                    "doc": "Dialog title.\n\n This parameter might be ignored, as not all operating systems display a title on open dialogs\n (for example, macOS).",
                    "isMethod": false,
                    "_": 1910,
                    "source": "\n\n\t\t/**\n\t\t * Dialog title.\n\t\t *\n\t\t * This parameter might be ignored, as not all operating systems display a title on open dialogs\n\t\t * (for example, macOS).\n\t\t */\n\t\ttitle?: string;",
                    "name": "title",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1910,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline10",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "SaveDialogOptions",
                "source": "",
                "indexes": [
                  {
                    "key": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1937,
                      "source": " string"
                    },
                    "value": {
                      "core": "array",
                      "targs": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 1937,
                          "source": " string"
                        }
                      ],
                      "isNullable": false,
                      "_": 1937,
                      "source": " string[]"
                    },
                    "doc": "",
                    "_": 1937,
                    "source": " [name: string]: string[]",
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false
                  }
                ],
                "ctors": [],
                "members": [],
                "calls": []
              },
              {
                "_": 1916,
                "name": "SaveDialogOptions",
                "generics": [],
                "doc": "Options to configure the behaviour of a file save dialog.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The resource the dialog shows when opened.",
                    "isMethod": false,
                    "_": 1920,
                    "source": "\n\t\t/**\n\t\t * The resource the dialog shows when opened.\n\t\t */\n\t\tdefaultUri?: Uri;",
                    "name": "defaultUri",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 1920,
                      "source": " Uri"
                    }
                  },
                  {
                    "doc": "A human-readable string for the save button.",
                    "isMethod": false,
                    "_": 1925,
                    "source": "\n\n\t\t/**\n\t\t * A human-readable string for the save button.\n\t\t */\n\t\tsaveLabel?: string;",
                    "name": "saveLabel",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1925,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "A set of file filters that are used by the dialog. Each entry is a human-readable label,\n like \"TypeScript\", and an array of extensions, e.g.\n ```ts\n {\n \t'Images': ['png', 'jpg']\n \t'TypeScript': ['ts', 'tsx']\n }\n ```",
                    "isMethod": false,
                    "_": 1937,
                    "source": "\n\n\t\t/**\n\t\t * A set of file filters that are used by the dialog. Each entry is a human-readable label,\n\t\t * like \"TypeScript\", and an array of extensions, e.g.\n\t\t * ```ts\n\t\t * {\n\t\t * \t'Images': ['png', 'jpg']\n\t\t * \t'TypeScript': ['ts', 'tsx']\n\t\t * }\n\t\t * ```\n\t\t */\n\t\tfilters?: { [name: string]: string[] };",
                    "name": "filters",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "IInline10",
                      "targs": [],
                      "isNullable": false,
                      "_": 1937,
                      "source": " { [name: string]: string[] }"
                    }
                  },
                  {
                    "doc": "Dialog title.\n\n This parameter might be ignored, as not all operating systems display a title on save dialogs\n (for example, macOS).",
                    "isMethod": false,
                    "_": 1945,
                    "source": "\n\n\t\t/**\n\t\t * Dialog title.\n\t\t *\n\t\t * This parameter might be ignored, as not all operating systems display a title on save dialogs\n\t\t * (for example, macOS).\n\t\t */\n\t\ttitle?: string;",
                    "name": "title",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1945,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 1956,
                "name": "MessageItem",
                "generics": [],
                "doc": "Represents an action that is shown with an information, warning, or\nerror message.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "A short title like 'Retry', 'Open Log' etc.",
                    "isMethod": false,
                    "_": 1961,
                    "source": "\n\n\t\t/**\n\t\t * A short title like 'Retry', 'Open Log' etc.\n\t\t */\n\t\ttitle: string;",
                    "name": "title",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1961,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "A hint for modal dialogs that the item should be triggered\n when the user cancels the dialog (e.g. by pressing the ESC\n key).\n\n Note: this option is ignored for non-modal messages.",
                    "isMethod": false,
                    "_": 1970,
                    "source": "\n\n\t\t/**\n\t\t * A hint for modal dialogs that the item should be triggered\n\t\t * when the user cancels the dialog (e.g. by pressing the ESC\n\t\t * key).\n\t\t *\n\t\t * Note: this option is ignored for non-modal messages.\n\t\t */\n\t\tisCloseAffordance?: boolean;",
                    "name": "isCloseAffordance",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 1970,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 1980,
                "name": "MessageOptions",
                "generics": [],
                "doc": "Options to configure the behavior of the message.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Indicates that this message should be modal.",
                    "isMethod": false,
                    "_": 1985,
                    "source": "\n\n\t\t/**\n\t\t * Indicates that this message should be modal.\n\t\t */\n\t\tmodal?: boolean;",
                    "name": "modal",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 1985,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Human-readable detail message that is rendered less prominent. _Note_ that detail\n is only shown for {@link MessageOptions.modal modal} messages.",
                    "isMethod": false,
                    "_": 1991,
                    "source": "\n\n\t\t/**\n\t\t * Human-readable detail message that is rendered less prominent. _Note_ that detail\n\t\t * is only shown for {@link MessageOptions.modal modal} messages.\n\t\t */\n\t\tdetail?: string;",
                    "name": "detail",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1991,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 2006,
                "name": "InputBoxValidationMessage",
                "generics": [],
                "doc": "Object to configure the behavior of the validation message.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The validation message to display.",
                    "isMethod": false,
                    "_": 2010,
                    "source": "\n\t\t/**\n\t\t * The validation message to display.\n\t\t */\n\t\treadonly message: string;",
                    "name": "message",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 2010,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The severity of the validation message.\nNOTE: When using `InputBoxValidationSeverity.Error`, the user will not be allowed to accept (hit ENTER) the input.\n`Info` and `Warning` will still allow the InputBox to accept the input.",
                    "isMethod": false,
                    "_": 2017,
                    "source": "\n\n\t\t/**\n\t\t * The severity of the validation message.\n\t\t * NOTE: When using `InputBoxValidationSeverity.Error`, the user will not be allowed to accept (hit ENTER) the input.\n\t\t * `Info` and `Warning` will still allow the InputBox to accept the input.\n\t\t */\n\t\treadonly severity: InputBoxValidationSeverity;",
                    "name": "severity",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "InputBoxValidationSeverity",
                      "targs": [],
                      "isNullable": false,
                      "_": 2017,
                      "source": " InputBoxValidationSeverity"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 2023,
                "name": "InputBoxOptions",
                "generics": [],
                "doc": "Options to configure the behavior of the input box UI.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "An optional string that represents the title of the input box.",
                    "isMethod": false,
                    "_": 2028,
                    "source": "\n\n\t\t/**\n\t\t * An optional string that represents the title of the input box.\n\t\t */\n\t\ttitle?: string;",
                    "name": "title",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 2028,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The value to pre-fill in the input box.",
                    "isMethod": false,
                    "_": 2033,
                    "source": "\n\n\t\t/**\n\t\t * The value to pre-fill in the input box.\n\t\t */\n\t\tvalue?: string;",
                    "name": "value",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 2033,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Selection of the pre-filled {@linkcode InputBoxOptions.value value}. Defined as tuple of two number where the\n first is the inclusive start index and the second the exclusive end index. When `undefined` the whole\n pre-filled value will be selected, when empty (start equals end) only the cursor will be set,\n otherwise the defined range will be selected.",
                    "isMethod": false,
                    "_": 2041,
                    "source": "\n\n\t\t/**\n\t\t * Selection of the pre-filled {@linkcode InputBoxOptions.value value}. Defined as tuple of two number where the\n\t\t * first is the inclusive start index and the second the exclusive end index. When `undefined` the whole\n\t\t * pre-filled value will be selected, when empty (start equals end) only the cursor will be set,\n\t\t * otherwise the defined range will be selected.\n\t\t */\n\t\tvalueSelection?: [number, number];",
                    "name": "valueSelection",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "tuple": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 2041,
                          "source": "number"
                        },
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 2041,
                          "source": " number"
                        }
                      ],
                      "isNullable": false,
                      "_": 2041,
                      "source": " [number, number]"
                    }
                  },
                  {
                    "doc": "The text to display underneath the input box.",
                    "isMethod": false,
                    "_": 2046,
                    "source": "\n\n\t\t/**\n\t\t * The text to display underneath the input box.\n\t\t */\n\t\tprompt?: string;",
                    "name": "prompt",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 2046,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "An optional string to show as placeholder in the input box to guide the user what to type.",
                    "isMethod": false,
                    "_": 2051,
                    "source": "\n\n\t\t/**\n\t\t * An optional string to show as placeholder in the input box to guide the user what to type.\n\t\t */\n\t\tplaceHolder?: string;",
                    "name": "placeHolder",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 2051,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Controls if a password input is shown. Password input hides the typed text.",
                    "isMethod": false,
                    "_": 2056,
                    "source": "\n\n\t\t/**\n\t\t * Controls if a password input is shown. Password input hides the typed text.\n\t\t */\n\t\tpassword?: boolean;",
                    "name": "password",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 2056,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Set to `true` to keep the input box open when focus moves to another part of the editor or to another window.\n This setting is ignored on iPad and is always false.",
                    "isMethod": false,
                    "_": 2062,
                    "source": "\n\n\t\t/**\n\t\t * Set to `true` to keep the input box open when focus moves to another part of the editor or to another window.\n\t\t * This setting is ignored on iPad and is always false.\n\t\t */\n\t\tignoreFocusOut?: boolean;",
                    "name": "ignoreFocusOut",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 2062,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "An optional function that will be called to validate input and to give a hint\n to the user.\n\n @param value The current value of the input box.\n @return Either a human-readable string which is presented as an error message or an {@link InputBoxValidationMessage}\n  which can provide a specific message severity. Return `undefined`, `null`, or the empty string when 'value' is valid.",
                    "isMethod": true,
                    "_": 2072,
                    "source": "\n\n\t\t/**\n\t\t * An optional function that will be called to validate input and to give a hint\n\t\t * to the user.\n\t\t *\n\t\t * @param value The current value of the input box.\n\t\t * @return Either a human-readable string which is presented as an error message or an {@link InputBoxValidationMessage}\n\t\t *  which can provide a specific message severity. Return `undefined`, `null`, or the empty string when 'value' is valid.\n\t\t */\n\t\tvalidateInput?(value: string): string | InputBoxValidationMessage | undefined | null |\n\t\t\tThenable<string | InputBoxValidationMessage | undefined | null>;",
                    "name": "validateInput",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "value",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 2072,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 2072,
                          "source": " string"
                        },
                        {
                          "ref": "InputBoxValidationMessage",
                          "targs": [],
                          "isNullable": false,
                          "_": 2072,
                          "source": " InputBoxValidationMessage"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 2072,
                          "source": " undefined"
                        },
                        {
                          "core": "null",
                          "isNullable": false,
                          "_": 2072,
                          "source": " null"
                        },
                        {
                          "ref": "Thenable",
                          "targs": [
                            {
                              "union": [
                                {
                                  "core": "string",
                                  "isNullable": false,
                                  "_": 2073,
                                  "source": "string"
                                },
                                {
                                  "ref": "InputBoxValidationMessage",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 2073,
                                  "source": " InputBoxValidationMessage"
                                },
                                {
                                  "core": "undefined",
                                  "isNullable": false,
                                  "_": 2073,
                                  "source": " undefined"
                                },
                                {
                                  "core": "null",
                                  "isNullable": false,
                                  "_": 2073,
                                  "source": " null"
                                }
                              ],
                              "isNullable": false,
                              "_": 2073,
                              "source": "string | InputBoxValidationMessage | undefined | null"
                            }
                          ],
                          "isNullable": false,
                          "_": 2073,
                          "source": "\n\t\t\tThenable<string | InputBoxValidationMessage | undefined | null>"
                        }
                      ],
                      "isNullable": false,
                      "_": 2072,
                      "source": " string | InputBoxValidationMessage | undefined | null |\n\t\t\tThenable<string | InputBoxValidationMessage | undefined | null>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 2082,
                "name": "RelativePattern",
                "generics": [],
                "doc": "A relative pattern is a helper to construct glob patterns that are matched\nrelatively to a base file path. The base path can either be an absolute file\npath as string or uri or a {@link WorkspaceFolderworkspace folder}, which is the\npreferred way of creating the relative pattern.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 2134,
                    "source": "\n\n\t\t/**\n\t\t * Creates a new relative pattern object with a base file path and pattern to match. This pattern\n\t\t * will be matched on file paths relative to the base.\n\t\t *\n\t\t * Example:\n\t\t * ```ts\n\t\t * const folder = vscode.workspace.workspaceFolders?.[0];\n\t\t * if (folder) {\n\t\t *\n\t\t *   // Match any TypeScript file in the root of this workspace folder\n\t\t *   const pattern1 = new vscode.RelativePattern(folder, '*.ts');\n\t\t *\n\t\t *   // Match any TypeScript file in `someFolder` inside this workspace folder\n\t\t *   const pattern2 = new vscode.RelativePattern(folder, 'someFolder/*.ts');\n\t\t * }\n\t\t * ```\n\t\t *\n\t\t * @param base A base to which this pattern will be matched against relatively. It is recommended\n\t\t * to pass in a {@link WorkspaceFolder workspace folder} if the pattern should match inside the workspace.\n\t\t * Otherwise, a uri or string should only be used if the pattern is for a file path outside the workspace.\n\t\t * @param pattern A file glob pattern like `*.{ts,js}` that will be matched on paths relative to the base.\n\t\t */\n\t\tconstructor(base: WorkspaceFolder | Uri | string, pattern: string);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "base",
                        "type": {
                          "union": [
                            {
                              "ref": "WorkspaceFolder",
                              "targs": [],
                              "isNullable": false,
                              "_": 2134,
                              "source": " WorkspaceFolder"
                            },
                            {
                              "ref": "Uri",
                              "targs": [],
                              "isNullable": false,
                              "_": 2134,
                              "source": " Uri"
                            },
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 2134,
                              "source": " string"
                            }
                          ],
                          "isNullable": false,
                          "_": 2134,
                          "source": " WorkspaceFolder | Uri | string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "pattern",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 2134,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "A base file path to which this pattern will be matched against relatively. The\n file path must be absolute, should not have any trailing path separators and\n not include any relative segments (`.` or `..`).",
                    "isMethod": false,
                    "_": 2089,
                    "source": "\n\n\t\t/**\n\t\t * A base file path to which this pattern will be matched against relatively. The\n\t\t * file path must be absolute, should not have any trailing path separators and\n\t\t * not include any relative segments (`.` or `..`).\n\t\t */\n\t\tbaseUri: Uri;",
                    "name": "baseUri",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 2089,
                      "source": " Uri"
                    }
                  },
                  {
                    "doc": "A base file path to which this pattern will be matched against relatively.\n\n This matches the `fsPath` value of {@link RelativePattern.baseUri}.\n\n *Note:* updating this value will update {@link RelativePattern.baseUri} to\n be a uri with `file` scheme.\n\n @deprecated This property is deprecated, please use {@link RelativePattern.baseUri} instead.",
                    "isMethod": false,
                    "_": 2101,
                    "source": "\n\n\t\t/**\n\t\t * A base file path to which this pattern will be matched against relatively.\n\t\t *\n\t\t * This matches the `fsPath` value of {@link RelativePattern.baseUri}.\n\t\t *\n\t\t * *Note:* updating this value will update {@link RelativePattern.baseUri} to\n\t\t * be a uri with `file` scheme.\n\t\t *\n\t\t * @deprecated This property is deprecated, please use {@link RelativePattern.baseUri} instead.\n\t\t */\n\t\tbase: string;",
                    "name": "base",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 2101,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "A file glob pattern like `*.{ts,js}` that will be matched on file paths\n relative to the base path.\n\n Example: Given a base of `/home/work/folder` and a file path of `/home/work/folder/index.js`,\n the file glob pattern will match on `index.js`.",
                    "isMethod": false,
                    "_": 2110,
                    "source": "\n\n\t\t/**\n\t\t * A file glob pattern like `*.{ts,js}` that will be matched on file paths\n\t\t * relative to the base path.\n\t\t *\n\t\t * Example: Given a base of `/home/work/folder` and a file path of `/home/work/folder/index.js`,\n\t\t * the file glob pattern will match on `index.js`.\n\t\t */\n\t\tpattern: string;",
                    "name": "pattern",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 2110,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 2167,
                "name": "DocumentFilter",
                "generics": [],
                "doc": "A document filter denotes a document by different properties like\nthe {@link TextDocument.languageIdlanguage}, the {@link Uri.schemescheme} of\nits resource, or a glob-pattern that is applied to the {@link TextDocument.fileNamepath}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "A language id, like `typescript`.",
                    "isMethod": false,
                    "_": 2172,
                    "source": "\n\n\t\t/**\n\t\t * A language id, like `typescript`.\n\t\t */\n\t\treadonly language?: string;",
                    "name": "language",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 2172,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The {@link NotebookDocument.notebookTypetype} of a notebook, like `jupyter-notebook`. This allows\nto narrow down on the type of a notebook that a {@link NotebookCell.documentcell document} belongs to.\n\n*Note* that setting the `notebookType`-property changes how `scheme` and `pattern` are interpreted. When set\nthey are evaluated against the {@link NotebookDocument.urinotebook uri}, not the document uri.",
                    "isMethod": false,
                    "_": 2184,
                    "source": "\n\n\t\t/**\n\t\t * The {@link NotebookDocument.notebookType type} of a notebook, like `jupyter-notebook`. This allows\n\t\t * to narrow down on the type of a notebook that a {@link NotebookCell.document cell document} belongs to.\n\t\t *\n\t\t * *Note* that setting the `notebookType`-property changes how `scheme` and `pattern` are interpreted. When set\n\t\t * they are evaluated against the {@link NotebookDocument.uri notebook uri}, not the document uri.\n\t\t *\n\t\t * @example <caption>Match python document inside jupyter notebook that aren't stored yet (`untitled`)</caption>\n\t\t * { language: 'python', notebookType: 'jupyter-notebook', scheme: 'untitled' }\n\t\t */\n\t\treadonly notebookType?: string;",
                    "name": "notebookType",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 2184,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "A Uri {@link Uri.schemescheme}, like `file` or `untitled`.",
                    "isMethod": false,
                    "_": 2189,
                    "source": "\n\n\t\t/**\n\t\t * A Uri {@link Uri.scheme scheme}, like `file` or `untitled`.\n\t\t */\n\t\treadonly scheme?: string;",
                    "name": "scheme",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 2189,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "A {@link GlobPatternglob pattern} that is matched on the absolute path of the document. Use a {@link RelativePatternrelative pattern}\nto filter documents to a {@link WorkspaceFolderworkspace folder}.",
                    "isMethod": false,
                    "_": 2195,
                    "source": "\n\n\t\t/**\n\t\t * A {@link GlobPattern glob pattern} that is matched on the absolute path of the document. Use a {@link RelativePattern relative pattern}\n\t\t * to filter documents to a {@link WorkspaceFolder workspace folder}.\n\t\t */\n\t\treadonly pattern?: GlobPattern;",
                    "name": "pattern",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "GlobPattern",
                      "targs": [],
                      "isNullable": false,
                      "_": 2195,
                      "source": " GlobPattern"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 2252,
                "name": "CodeActionKind",
                "generics": [],
                "doc": "Kind of a code action.\n\nKinds are a hierarchical list of identifiers separated by `.`, e.g. `\"refactor.extract.function\"`.\n\nCode action kinds are used by the editor for UI elements such as the refactoring context menu. Users\ncan also trigger code actions with a specific kind with the `editor.action.codeAction` command.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 2344,
                    "source": "\n\n\t\tprivate constructor(value: string);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": true,
                    "params": [
                      {
                        "name": "value",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 2344,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "Empty kind.",
                    "isMethod": false,
                    "_": 2256,
                    "source": "\n\t\t/**\n\t\t * Empty kind.\n\t\t */\n\t\tstatic readonly Empty: CodeActionKind;",
                    "name": "Empty",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "CodeActionKind",
                      "targs": [],
                      "isNullable": false,
                      "_": 2256,
                      "source": " CodeActionKind"
                    }
                  },
                  {
                    "doc": "Base kind for quickfix actions: `quickfix`.\n\nQuick fix actions address a problem in the code and are shown in the normal code action context menu.",
                    "isMethod": false,
                    "_": 2263,
                    "source": "\n\n\t\t/**\n\t\t * Base kind for quickfix actions: `quickfix`.\n\t\t *\n\t\t * Quick fix actions address a problem in the code and are shown in the normal code action context menu.\n\t\t */\n\t\tstatic readonly QuickFix: CodeActionKind;",
                    "name": "QuickFix",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "CodeActionKind",
                      "targs": [],
                      "isNullable": false,
                      "_": 2263,
                      "source": " CodeActionKind"
                    }
                  },
                  {
                    "doc": "Base kind for refactoring actions: `refactor`\n\nRefactoring actions are shown in the refactoring context menu.",
                    "isMethod": false,
                    "_": 2270,
                    "source": "\n\n\t\t/**\n\t\t * Base kind for refactoring actions: `refactor`\n\t\t *\n\t\t * Refactoring actions are shown in the refactoring context menu.\n\t\t */\n\t\tstatic readonly Refactor: CodeActionKind;",
                    "name": "Refactor",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "CodeActionKind",
                      "targs": [],
                      "isNullable": false,
                      "_": 2270,
                      "source": " CodeActionKind"
                    }
                  },
                  {
                    "doc": "Base kind for refactoring extraction actions: `refactor.extract`\n\nExample extract actions:\n\n- Extract method\n- Extract function\n- Extract variable\n- Extract interface from class\n- ...",
                    "isMethod": false,
                    "_": 2283,
                    "source": "\n\n\t\t/**\n\t\t * Base kind for refactoring extraction actions: `refactor.extract`\n\t\t *\n\t\t * Example extract actions:\n\t\t *\n\t\t * - Extract method\n\t\t * - Extract function\n\t\t * - Extract variable\n\t\t * - Extract interface from class\n\t\t * - ...\n\t\t */\n\t\tstatic readonly RefactorExtract: CodeActionKind;",
                    "name": "RefactorExtract",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "CodeActionKind",
                      "targs": [],
                      "isNullable": false,
                      "_": 2283,
                      "source": " CodeActionKind"
                    }
                  },
                  {
                    "doc": "Base kind for refactoring inline actions: `refactor.inline`\n\nExample inline actions:\n\n- Inline function\n- Inline variable\n- Inline constant\n- ...",
                    "isMethod": false,
                    "_": 2295,
                    "source": "\n\n\t\t/**\n\t\t * Base kind for refactoring inline actions: `refactor.inline`\n\t\t *\n\t\t * Example inline actions:\n\t\t *\n\t\t * - Inline function\n\t\t * - Inline variable\n\t\t * - Inline constant\n\t\t * - ...\n\t\t */\n\t\tstatic readonly RefactorInline: CodeActionKind;",
                    "name": "RefactorInline",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "CodeActionKind",
                      "targs": [],
                      "isNullable": false,
                      "_": 2295,
                      "source": " CodeActionKind"
                    }
                  },
                  {
                    "doc": "Base kind for refactoring move actions: `refactor.move`\n\nExample move actions:\n\n- Move a function to a new file\n- Move a property between classes\n- Move method to base class\n- ...",
                    "isMethod": false,
                    "_": 2307,
                    "source": "\n\n\t\t/**\n\t\t * Base kind for refactoring move actions: `refactor.move`\n\t\t *\n\t\t * Example move actions:\n\t\t *\n\t\t * - Move a function to a new file\n\t\t * - Move a property between classes\n\t\t * - Move method to base class\n\t\t * - ...\n\t\t */\n\t\tstatic readonly RefactorMove: CodeActionKind;",
                    "name": "RefactorMove",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "CodeActionKind",
                      "targs": [],
                      "isNullable": false,
                      "_": 2307,
                      "source": " CodeActionKind"
                    }
                  },
                  {
                    "doc": "Base kind for refactoring rewrite actions: `refactor.rewrite`\n\nExample rewrite actions:\n\n- Convert JavaScript function to class\n- Add or remove parameter\n- Encapsulate field\n- Make method static\n- ...",
                    "isMethod": false,
                    "_": 2320,
                    "source": "\n\n\t\t/**\n\t\t * Base kind for refactoring rewrite actions: `refactor.rewrite`\n\t\t *\n\t\t * Example rewrite actions:\n\t\t *\n\t\t * - Convert JavaScript function to class\n\t\t * - Add or remove parameter\n\t\t * - Encapsulate field\n\t\t * - Make method static\n\t\t * - ...\n\t\t */\n\t\tstatic readonly RefactorRewrite: CodeActionKind;",
                    "name": "RefactorRewrite",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "CodeActionKind",
                      "targs": [],
                      "isNullable": false,
                      "_": 2320,
                      "source": " CodeActionKind"
                    }
                  },
                  {
                    "doc": "Base kind for source actions: `source`\n\nSource code actions apply to the entire file. They must be explicitly requested and will not show in the\nnormal [lightbulb](https://code.visualstudio.com/docs/editor/editingevolved#_code-action) menu. Source actions\ncan be run on save using `editor.codeActionsOnSave` and are also shown in the `source` context menu.",
                    "isMethod": false,
                    "_": 2329,
                    "source": "\n\n\t\t/**\n\t\t * Base kind for source actions: `source`\n\t\t *\n\t\t * Source code actions apply to the entire file. They must be explicitly requested and will not show in the\n\t\t * normal [lightbulb](https://code.visualstudio.com/docs/editor/editingevolved#_code-action) menu. Source actions\n\t\t * can be run on save using `editor.codeActionsOnSave` and are also shown in the `source` context menu.\n\t\t */\n\t\tstatic readonly Source: CodeActionKind;",
                    "name": "Source",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "CodeActionKind",
                      "targs": [],
                      "isNullable": false,
                      "_": 2329,
                      "source": " CodeActionKind"
                    }
                  },
                  {
                    "doc": "Base kind for an organize imports source action: `source.organizeImports`.",
                    "isMethod": false,
                    "_": 2334,
                    "source": "\n\n\t\t/**\n\t\t * Base kind for an organize imports source action: `source.organizeImports`.\n\t\t */\n\t\tstatic readonly SourceOrganizeImports: CodeActionKind;",
                    "name": "SourceOrganizeImports",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "CodeActionKind",
                      "targs": [],
                      "isNullable": false,
                      "_": 2334,
                      "source": " CodeActionKind"
                    }
                  },
                  {
                    "doc": "Base kind for auto-fix source actions: `source.fixAll`.\n\nFix all actions automatically fix errors that have a clear fix that do not require user input.\nThey should not suppress errors or perform unsafe fixes such as generating new types or classes.",
                    "isMethod": false,
                    "_": 2342,
                    "source": "\n\n\t\t/**\n\t\t * Base kind for auto-fix source actions: `source.fixAll`.\n\t\t *\n\t\t * Fix all actions automatically fix errors that have a clear fix that do not require user input.\n\t\t * They should not suppress errors or perform unsafe fixes such as generating new types or classes.\n\t\t */\n\t\tstatic readonly SourceFixAll: CodeActionKind;",
                    "name": "SourceFixAll",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "CodeActionKind",
                      "targs": [],
                      "isNullable": false,
                      "_": 2342,
                      "source": " CodeActionKind"
                    }
                  },
                  {
                    "doc": "String value of the kind, e.g. `\"refactor.extract.function\"`.",
                    "isMethod": false,
                    "_": 2349,
                    "source": "\n\n\t\t/**\n\t\t * String value of the kind, e.g. `\"refactor.extract.function\"`.\n\t\t */\n\t\treadonly value: string;",
                    "name": "value",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 2349,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Create a new kind by appending a more specific selector to the current kind.\n\n Does not modify the current kind.",
                    "isMethod": true,
                    "_": 2356,
                    "source": "\n\n\t\t/**\n\t\t * Create a new kind by appending a more specific selector to the current kind.\n\t\t *\n\t\t * Does not modify the current kind.\n\t\t */\n\t\tappend(parts: string): CodeActionKind;",
                    "name": "append",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "parts",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 2356,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "CodeActionKind",
                      "targs": [],
                      "isNullable": false,
                      "_": 2356,
                      "source": " CodeActionKind"
                    }
                  },
                  {
                    "doc": "Checks if this code action kind intersects `other`.\n\n The kind `\"refactor.extract\"` for example intersects `refactor`, `\"refactor.extract\"` and ``\"refactor.extract.function\"`,\n but not `\"unicorn.refactor.extract\"`, or `\"refactor.extractAll\"`.\n\n @param other Kind to check.",
                    "isMethod": true,
                    "_": 2366,
                    "source": "\n\n\t\t/**\n\t\t * Checks if this code action kind intersects `other`.\n\t\t *\n\t\t * The kind `\"refactor.extract\"` for example intersects `refactor`, `\"refactor.extract\"` and ``\"refactor.extract.function\"`,\n\t\t * but not `\"unicorn.refactor.extract\"`, or `\"refactor.extractAll\"`.\n\t\t *\n\t\t * @param other Kind to check.\n\t\t */\n\t\tintersects(other: CodeActionKind): boolean;",
                    "name": "intersects",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "other",
                        "type": {
                          "ref": "CodeActionKind",
                          "targs": [],
                          "isNullable": false,
                          "_": 2366,
                          "source": " CodeActionKind"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 2366,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Checks if `other` is a sub-kind of this `CodeActionKind`.\n\n The kind `\"refactor.extract\"` for example contains `\"refactor.extract\"` and ``\"refactor.extract.function\"`,\n but not `\"unicorn.refactor.extract\"`, or `\"refactor.extractAll\"` or `refactor`.\n\n @param other Kind to check.",
                    "isMethod": true,
                    "_": 2376,
                    "source": "\n\n\t\t/**\n\t\t * Checks if `other` is a sub-kind of this `CodeActionKind`.\n\t\t *\n\t\t * The kind `\"refactor.extract\"` for example contains `\"refactor.extract\"` and ``\"refactor.extract.function\"`,\n\t\t * but not `\"unicorn.refactor.extract\"`, or `\"refactor.extractAll\"` or `refactor`.\n\t\t *\n\t\t * @param other Kind to check.\n\t\t */\n\t\tcontains(other: CodeActionKind): boolean;",
                    "name": "contains",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "other",
                        "type": {
                          "ref": "CodeActionKind",
                          "targs": [],
                          "isNullable": false,
                          "_": 2376,
                          "source": " CodeActionKind"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 2376,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 2401,
                "name": "CodeActionContext",
                "generics": [],
                "doc": "Contains additional diagnostic information about the context in which\na {@link CodeActionProvider.provideCodeActionscode action} is run.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The reason why code actions were requested.",
                    "isMethod": false,
                    "_": 2405,
                    "source": "\n\t\t/**\n\t\t * The reason why code actions were requested.\n\t\t */\n\t\treadonly triggerKind: CodeActionTriggerKind;",
                    "name": "triggerKind",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "CodeActionTriggerKind",
                      "targs": [],
                      "isNullable": false,
                      "_": 2405,
                      "source": " CodeActionTriggerKind"
                    }
                  },
                  {
                    "doc": "An array of diagnostics.",
                    "isMethod": false,
                    "_": 2410,
                    "source": "\n\n\t\t/**\n\t\t * An array of diagnostics.\n\t\t */\n\t\treadonly diagnostics: readonly Diagnostic[];",
                    "name": "diagnostics",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "Diagnostic",
                            "targs": [],
                            "isNullable": false,
                            "_": 2410,
                            "source": " Diagnostic"
                          }
                        ],
                        "isNullable": false,
                        "_": 2410,
                        "source": " Diagnostic[]"
                      },
                      "isNullable": false,
                      "_": 2410,
                      "source": " readonly Diagnostic[]"
                    }
                  },
                  {
                    "doc": "Requested kind of actions to return.\n\nActions not of this kind are filtered out before being shown by the [lightbulb](https://code.visualstudio.com/docs/editor/editingevolved#_code-action).",
                    "isMethod": false,
                    "_": 2417,
                    "source": "\n\n\t\t/**\n\t\t * Requested kind of actions to return.\n\t\t *\n\t\t * Actions not of this kind are filtered out before being shown by the [lightbulb](https://code.visualstudio.com/docs/editor/editingevolved#_code-action).\n\t\t */\n\t\treadonly only: CodeActionKind | undefined;",
                    "name": "only",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "CodeActionKind",
                          "targs": [],
                          "isNullable": false,
                          "_": 2417,
                          "source": " CodeActionKind"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 2417,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 2417,
                      "source": " CodeActionKind | undefined"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline11",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "CodeAction",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Human readable description of why the code action is currently disabled.\n\nThis is displayed in the code actions UI.",
                    "isMethod": false,
                    "_": 2486,
                    "source": "\n\t\t\t/**\n\t\t\t * Human readable description of why the code action is currently disabled.\n\t\t\t *\n\t\t\t * This is displayed in the code actions UI.\n\t\t\t */\n\t\t\treadonly reason: string;",
                    "name": "reason",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 2486,
                      "source": " string"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 2426,
                "name": "CodeAction",
                "generics": [],
                "doc": "A code action represents a change that can be performed in code, e.g. to fix a problem or\nto refactor code.\n\nA CodeAction must set either {@linkcode CodeAction.editedit} and/or a {@linkcode CodeAction.commandcommand}. If both are supplied, the `edit` is applied first, then the command is executed.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 2498,
                    "source": "\n\n\t\t/**\n\t\t * Creates a new code action.\n\t\t *\n\t\t * A code action must have at least a {@link CodeAction.title title} and {@link CodeAction.edit edits}\n\t\t * and/or a {@link CodeAction.command command}.\n\t\t *\n\t\t * @param title The title of the code action.\n\t\t * @param kind The kind of the code action.\n\t\t */\n\t\tconstructor(title: string, kind?: CodeActionKind);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "title",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 2498,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "kind",
                        "type": {
                          "ref": "CodeActionKind",
                          "targs": [],
                          "isNullable": false,
                          "_": 2498,
                          "source": " CodeActionKind"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "A short, human-readable, title for this code action.",
                    "isMethod": false,
                    "_": 2431,
                    "source": "\n\n\t\t/**\n\t\t * A short, human-readable, title for this code action.\n\t\t */\n\t\ttitle: string;",
                    "name": "title",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 2431,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "A {@link WorkspaceEdit workspace edit} this code action performs.",
                    "isMethod": false,
                    "_": 2436,
                    "source": "\n\n\t\t/**\n\t\t * A {@link WorkspaceEdit workspace edit} this code action performs.\n\t\t */\n\t\tedit?: WorkspaceEdit;",
                    "name": "edit",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "WorkspaceEdit",
                      "targs": [],
                      "isNullable": false,
                      "_": 2436,
                      "source": " WorkspaceEdit"
                    }
                  },
                  {
                    "doc": "{@link Diagnostic Diagnostics} that this code action resolves.",
                    "isMethod": false,
                    "_": 2441,
                    "source": "\n\n\t\t/**\n\t\t * {@link Diagnostic Diagnostics} that this code action resolves.\n\t\t */\n\t\tdiagnostics?: Diagnostic[];",
                    "name": "diagnostics",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "ref": "Diagnostic",
                          "targs": [],
                          "isNullable": false,
                          "_": 2441,
                          "source": " Diagnostic"
                        }
                      ],
                      "isNullable": false,
                      "_": 2441,
                      "source": " Diagnostic[]"
                    }
                  },
                  {
                    "doc": "A {@link Command} this code action executes.\n\n If this command throws an exception, the editor displays the exception message to users in the editor at the\n current cursor position.",
                    "isMethod": false,
                    "_": 2449,
                    "source": "\n\n\t\t/**\n\t\t * A {@link Command} this code action executes.\n\t\t *\n\t\t * If this command throws an exception, the editor displays the exception message to users in the editor at the\n\t\t * current cursor position.\n\t\t */\n\t\tcommand?: Command;",
                    "name": "command",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Command",
                      "targs": [],
                      "isNullable": false,
                      "_": 2449,
                      "source": " Command"
                    }
                  },
                  {
                    "doc": "{@link CodeActionKind Kind} of the code action.\n\n Used to filter code actions.",
                    "isMethod": false,
                    "_": 2456,
                    "source": "\n\n\t\t/**\n\t\t * {@link CodeActionKind Kind} of the code action.\n\t\t *\n\t\t * Used to filter code actions.\n\t\t */\n\t\tkind?: CodeActionKind;",
                    "name": "kind",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "CodeActionKind",
                      "targs": [],
                      "isNullable": false,
                      "_": 2456,
                      "source": " CodeActionKind"
                    }
                  },
                  {
                    "doc": "Marks this as a preferred action. Preferred actions are used by the `auto fix` command and can be targeted\n by keybindings.\n\n A quick fix should be marked preferred if it properly addresses the underlying error.\n A refactoring should be marked preferred if it is the most reasonable choice of actions to take.",
                    "isMethod": false,
                    "_": 2465,
                    "source": "\n\n\t\t/**\n\t\t * Marks this as a preferred action. Preferred actions are used by the `auto fix` command and can be targeted\n\t\t * by keybindings.\n\t\t *\n\t\t * A quick fix should be marked preferred if it properly addresses the underlying error.\n\t\t * A refactoring should be marked preferred if it is the most reasonable choice of actions to take.\n\t\t */\n\t\tisPreferred?: boolean;",
                    "name": "isPreferred",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 2465,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Marks that the code action cannot currently be applied.\n\n - Disabled code actions are not shown in automatic [lightbulb](https://code.visualstudio.com/docs/editor/editingevolved#_code-action)\n code action menu.\n\n - Disabled actions are shown as faded out in the code action menu when the user request a more specific type\n of code action, such as refactorings.\n\n - If the user has a [keybinding](https://code.visualstudio.com/docs/editor/refactoring#_keybindings-for-code-actions)\n that auto applies a code action and only a disabled code actions are returned, the editor will show the user an\n error message with `reason` in the editor.",
                    "isMethod": false,
                    "_": 2480,
                    "source": "\n\n\t\t/**\n\t\t * Marks that the code action cannot currently be applied.\n\t\t *\n\t\t * - Disabled code actions are not shown in automatic [lightbulb](https://code.visualstudio.com/docs/editor/editingevolved#_code-action)\n\t\t * code action menu.\n\t\t *\n\t\t * - Disabled actions are shown as faded out in the code action menu when the user request a more specific type\n\t\t * of code action, such as refactorings.\n\t\t *\n\t\t * - If the user has a [keybinding](https://code.visualstudio.com/docs/editor/refactoring#_keybindings-for-code-actions)\n\t\t * that auto applies a code action and only a disabled code actions are returned, the editor will show the user an\n\t\t * error message with `reason` in the editor.\n\t\t */\n\t\tdisabled?: {\n\t\t\t/**\n\t\t\t * Human readable description of why the code action is currently disabled.\n\t\t\t *\n\t\t\t * This is displayed in the code actions UI.\n\t\t\t */\n\t\t\treadonly reason: string;\n\t\t};",
                    "name": "disabled",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "IInline11",
                      "targs": [],
                      "isNullable": false,
                      "_": 2480,
                      "source": " {\n\t\t\t/**\n\t\t\t * Human readable description of why the code action is currently disabled.\n\t\t\t *\n\t\t\t * This is displayed in the code actions UI.\n\t\t\t */\n\t\t\treadonly reason: string;\n\t\t}"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 2514,
                "name": "CodeActionProvider",
                "generics": [
                  {
                    "name": "T",
                    "constraint": {
                      "ref": "CodeAction",
                      "targs": [],
                      "isNullable": false,
                      "_": 2514,
                      "source": " CodeAction"
                    },
                    "default": {
                      "ref": "CodeAction",
                      "targs": [],
                      "isNullable": false,
                      "_": 2514,
                      "source": " CodeAction"
                    },
                    "_": 2514,
                    "source": "T extends CodeAction = CodeAction"
                  }
                ],
                "doc": "Provides contextual actions for code. Code actions typically either fix problems or beautify/refactor code.\n\nCode actions are surfaced to users in a few different ways:\n\n- The [lightbulb](https://code.visualstudio.com/docs/editor/editingevolved#_code-action) feature, which shows\n  a list of code actions at the current cursor position. The lightbulb's list of actions includes both quick fixes\n  and refactorings.\n- As commands that users can run, such as `Refactor`. Users can run these from the command palette or with keybindings.\n- As source actions, such `Organize Imports`.\n- {@link CodeActionKind.QuickFixQuick fixes} are shown in the problems view.\n- Change applied on save by the `editor.codeActionsOnSave` setting.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Get code actions for a given range in a document.\n\n Only return code actions that are relevant to user for the requested range. Also keep in mind how the\n returned code actions will appear in the UI. The lightbulb widget and `Refactor` commands for instance show\n returned code actions as a list, so do not return a large number of code actions that will overwhelm the user.\n\n @param document The document in which the command was invoked.\n @param range The selector or range for which the command was invoked. This will always be a\n {@link Selection selection} if the actions are being requested in the currently active editor.\n @param context Provides additional information about what code actions are being requested. You can use this\n to see what specific type of code actions are being requested by the editor in order to return more relevant\n actions and avoid returning irrelevant code actions that the editor will discard.\n @param token A cancellation token.\n\n @return An array of code actions, such as quick fixes or refactorings. The lack of a result can be signaled\n by returning `undefined`, `null`, or an empty array.\n\n We also support returning `Command` for legacy reasons, however all new extensions should return\n `CodeAction` object instead.",
                    "isMethod": true,
                    "_": 2536,
                    "source": "\n\t\t/**\n\t\t * Get code actions for a given range in a document.\n\t\t *\n\t\t * Only return code actions that are relevant to user for the requested range. Also keep in mind how the\n\t\t * returned code actions will appear in the UI. The lightbulb widget and `Refactor` commands for instance show\n\t\t * returned code actions as a list, so do not return a large number of code actions that will overwhelm the user.\n\t\t *\n\t\t * @param document The document in which the command was invoked.\n\t\t * @param range The selector or range for which the command was invoked. This will always be a\n\t\t * {@link Selection selection} if the actions are being requested in the currently active editor.\n\t\t * @param context Provides additional information about what code actions are being requested. You can use this\n\t\t * to see what specific type of code actions are being requested by the editor in order to return more relevant\n\t\t * actions and avoid returning irrelevant code actions that the editor will discard.\n\t\t * @param token A cancellation token.\n\t\t *\n\t\t * @return An array of code actions, such as quick fixes or refactorings. The lack of a result can be signaled\n\t\t * by returning `undefined`, `null`, or an empty array.\n\t\t *\n\t\t * We also support returning `Command` for legacy reasons, however all new extensions should return\n\t\t * `CodeAction` object instead.\n\t\t */\n\t\tprovideCodeActions(document: TextDocument, range: Range | Selection, context: CodeActionContext, token: CancellationToken): ProviderResult<(Command | T)[]>;",
                    "name": "provideCodeActions",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "document",
                        "type": {
                          "ref": "TextDocument",
                          "targs": [],
                          "isNullable": false,
                          "_": 2536,
                          "source": " TextDocument"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "range",
                        "type": {
                          "union": [
                            {
                              "ref": "Range",
                              "targs": [],
                              "isNullable": false,
                              "_": 2536,
                              "source": " Range"
                            },
                            {
                              "ref": "Selection",
                              "targs": [],
                              "isNullable": false,
                              "_": 2536,
                              "source": " Selection"
                            }
                          ],
                          "isNullable": false,
                          "_": 2536,
                          "source": " Range | Selection"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "context",
                        "type": {
                          "ref": "CodeActionContext",
                          "targs": [],
                          "isNullable": false,
                          "_": 2536,
                          "source": " CodeActionContext"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 2536,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "core": "array",
                          "targs": [
                            {
                              "union": [
                                {
                                  "ref": "Command",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 2536,
                                  "source": "Command"
                                },
                                {
                                  "ref": "T",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 2536,
                                  "source": " T"
                                }
                              ],
                              "isNullable": false,
                              "_": 2536,
                              "source": "(Command | T)"
                            }
                          ],
                          "isNullable": false,
                          "_": 2536,
                          "source": "(Command | T)[]"
                        }
                      ],
                      "isNullable": false,
                      "_": 2536,
                      "source": " ProviderResult<(Command | T)[]>"
                    }
                  },
                  {
                    "doc": "Given a code action fill in its {@linkcode CodeAction.edit edit}-property. Changes to\n all other properties, like title, are ignored. A code action that has an edit\n will not be resolved.\n\n *Note* that a code action provider that returns commands, not code actions, cannot successfully\n implement this function. Returning commands is deprecated and instead code actions should be\n returned.\n\n @param codeAction A code action.\n @param token A cancellation token.\n @return The resolved code action or a thenable that resolves to such. It is OK to return the given\n `item`. When no result is returned, the given `item` will be used.",
                    "isMethod": true,
                    "_": 2552,
                    "source": "\n\n\t\t/**\n\t\t * Given a code action fill in its {@linkcode CodeAction.edit edit}-property. Changes to\n\t\t * all other properties, like title, are ignored. A code action that has an edit\n\t\t * will not be resolved.\n\t\t *\n\t\t * *Note* that a code action provider that returns commands, not code actions, cannot successfully\n\t\t * implement this function. Returning commands is deprecated and instead code actions should be\n\t\t * returned.\n\t\t *\n\t\t * @param codeAction A code action.\n\t\t * @param token A cancellation token.\n\t\t * @return The resolved code action or a thenable that resolves to such. It is OK to return the given\n\t\t * `item`. When no result is returned, the given `item` will be used.\n\t\t */\n\t\tresolveCodeAction?(codeAction: T, token: CancellationToken): ProviderResult<T>;",
                    "name": "resolveCodeAction",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "codeAction",
                        "type": {
                          "ref": "T",
                          "targs": [],
                          "isNullable": false,
                          "_": 2552,
                          "source": " T"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 2552,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "ref": "T",
                          "targs": [],
                          "isNullable": false,
                          "_": 2552,
                          "source": "T"
                        }
                      ],
                      "isNullable": false,
                      "_": 2552,
                      "source": " ProviderResult<T>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline12",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "CodeActionProviderMetadata",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The kind of the code action being documented.\n\nIf the kind is generic, such as `CodeActionKind.Refactor`, the documentation will be shown whenever any\nrefactorings are returned. If the kind if more specific, such as `CodeActionKind.RefactorExtract`, the\ndocumentation will only be shown when extract refactoring code actions are returned.",
                    "isMethod": false,
                    "_": 2591,
                    "source": "\n\t\t\t/**\n\t\t\t * The kind of the code action being documented.\n\t\t\t *\n\t\t\t * If the kind is generic, such as `CodeActionKind.Refactor`, the documentation will be shown whenever any\n\t\t\t * refactorings are returned. If the kind if more specific, such as `CodeActionKind.RefactorExtract`, the\n\t\t\t * documentation will only be shown when extract refactoring code actions are returned.\n\t\t\t */\n\t\t\treadonly kind: CodeActionKind;",
                    "name": "kind",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "CodeActionKind",
                      "targs": [],
                      "isNullable": false,
                      "_": 2591,
                      "source": " CodeActionKind"
                    }
                  },
                  {
                    "doc": "Command that displays the documentation to the user.\n\nThis can display the documentation directly in the editor or open a website using {@linkcode env.openExternal};\n\nThe title of this documentation code action is taken from {@linkcode Command.title}",
                    "isMethod": false,
                    "_": 2600,
                    "source": "\n\n\t\t\t/**\n\t\t\t * Command that displays the documentation to the user.\n\t\t\t *\n\t\t\t * This can display the documentation directly in the editor or open a website using {@linkcode env.openExternal};\n\t\t\t *\n\t\t\t * The title of this documentation code action is taken from {@linkcode Command.title}\n\t\t\t */\n\t\t\treadonly command: Command;",
                    "name": "command",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Command",
                      "targs": [],
                      "isNullable": false,
                      "_": 2600,
                      "source": " Command"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 2558,
                "name": "CodeActionProviderMetadata",
                "generics": [],
                "doc": "Metadata about the type of code actions that a {@link CodeActionProvider} provides.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "List of {@link CodeActionKindCodeActionKinds} that a {@link CodeActionProvider} may return.\n\nThis list is used to determine if a given `CodeActionProvider` should be invoked or not.\nTo avoid unnecessary computation, every `CodeActionProvider` should list use `providedCodeActionKinds`. The\nlist of kinds may either be generic, such as `[CodeActionKind.Refactor]`, or list out every kind provided,\nsuch as `[CodeActionKind.Refactor.Extract.append('function'), CodeActionKind.Refactor.Extract.append('constant'), ...]`.",
                    "isMethod": false,
                    "_": 2567,
                    "source": "\n\t\t/**\n\t\t * List of {@link CodeActionKind CodeActionKinds} that a {@link CodeActionProvider} may return.\n\t\t *\n\t\t * This list is used to determine if a given `CodeActionProvider` should be invoked or not.\n\t\t * To avoid unnecessary computation, every `CodeActionProvider` should list use `providedCodeActionKinds`. The\n\t\t * list of kinds may either be generic, such as `[CodeActionKind.Refactor]`, or list out every kind provided,\n\t\t * such as `[CodeActionKind.Refactor.Extract.append('function'), CodeActionKind.Refactor.Extract.append('constant'), ...]`.\n\t\t */\n\t\treadonly providedCodeActionKinds?: readonly CodeActionKind[];",
                    "name": "providedCodeActionKinds",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "CodeActionKind",
                            "targs": [],
                            "isNullable": false,
                            "_": 2567,
                            "source": " CodeActionKind"
                          }
                        ],
                        "isNullable": false,
                        "_": 2567,
                        "source": " CodeActionKind[]"
                      },
                      "isNullable": false,
                      "_": 2567,
                      "source": " readonly CodeActionKind[]"
                    }
                  },
                  {
                    "doc": "Static documentation for a class of code actions.\n\nDocumentation from the provider is shown in the code actions menu if either:\n\n- Code actions of `kind` are requested by the editor. In this case, the editor will show the documentation that\n  most closely matches the requested code action kind. For example, if a provider has documentation for\n  both `Refactor` and `RefactorExtract`, when the user requests code actions for `RefactorExtract`,\n  the editor will use the documentation for `RefactorExtract` instead of the documentation for `Refactor`.\n\n- Any code actions of `kind` are returned by the provider.\n\nAt most one documentation entry will be shown per provider.",
                    "isMethod": false,
                    "_": 2583,
                    "source": "\n\n\t\t/**\n\t\t * Static documentation for a class of code actions.\n\t\t *\n\t\t * Documentation from the provider is shown in the code actions menu if either:\n\t\t *\n\t\t * - Code actions of `kind` are requested by the editor. In this case, the editor will show the documentation that\n\t\t *   most closely matches the requested code action kind. For example, if a provider has documentation for\n\t\t *   both `Refactor` and `RefactorExtract`, when the user requests code actions for `RefactorExtract`,\n\t\t *   the editor will use the documentation for `RefactorExtract` instead of the documentation for `Refactor`.\n\t\t *\n\t\t * - Any code actions of `kind` are returned by the provider.\n\t\t *\n\t\t * At most one documentation entry will be shown per provider.\n\t\t */\n\t\treadonly documentation?: ReadonlyArray<{\n\t\t\t/**\n\t\t\t * The kind of the code action being documented.\n\t\t\t *\n\t\t\t * If the kind is generic, such as `CodeActionKind.Refactor`, the documentation will be shown whenever any\n\t\t\t * refactorings are returned. If the kind if more specific, such as `CodeActionKind.RefactorExtract`, the\n\t\t\t * documentation will only be shown when extract refactoring code actions are returned.\n\t\t\t */\n\t\t\treadonly kind: CodeActionKind;\n\n\t\t\t/**\n\t\t\t * Command that displays the documentation to the user.\n\t\t\t *\n\t\t\t * This can display the documentation directly in the editor or open a website using {@linkcode env.openExternal};\n\t\t\t *\n\t\t\t * The title of this documentation code action is taken from {@linkcode Command.title}\n\t\t\t */\n\t\t\treadonly command: Command;\n\t\t}>;",
                    "name": "documentation",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "ReadonlyArray",
                      "targs": [
                        {
                          "ref": "IInline12",
                          "targs": [],
                          "isNullable": false,
                          "_": 2583,
                          "source": "{\n\t\t\t/**\n\t\t\t * The kind of the code action being documented.\n\t\t\t *\n\t\t\t * If the kind is generic, such as `CodeActionKind.Refactor`, the documentation will be shown whenever any\n\t\t\t * refactorings are returned. If the kind if more specific, such as `CodeActionKind.RefactorExtract`, the\n\t\t\t * documentation will only be shown when extract refactoring code actions are returned.\n\t\t\t */\n\t\t\treadonly kind: CodeActionKind;\n\n\t\t\t/**\n\t\t\t * Command that displays the documentation to the user.\n\t\t\t *\n\t\t\t * This can display the documentation directly in the editor or open a website using {@linkcode env.openExternal};\n\t\t\t *\n\t\t\t * The title of this documentation code action is taken from {@linkcode Command.title}\n\t\t\t */\n\t\t\treadonly command: Command;\n\t\t}"
                        }
                      ],
                      "isNullable": false,
                      "_": 2583,
                      "source": " ReadonlyArray<{\n\t\t\t/**\n\t\t\t * The kind of the code action being documented.\n\t\t\t *\n\t\t\t * If the kind is generic, such as `CodeActionKind.Refactor`, the documentation will be shown whenever any\n\t\t\t * refactorings are returned. If the kind if more specific, such as `CodeActionKind.RefactorExtract`, the\n\t\t\t * documentation will only be shown when extract refactoring code actions are returned.\n\t\t\t */\n\t\t\treadonly kind: CodeActionKind;\n\n\t\t\t/**\n\t\t\t * Command that displays the documentation to the user.\n\t\t\t *\n\t\t\t * This can display the documentation directly in the editor or open a website using {@linkcode env.openExternal};\n\t\t\t *\n\t\t\t * The title of this documentation code action is taken from {@linkcode Command.title}\n\t\t\t */\n\t\t\treadonly command: Command;\n\t\t}>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 2614,
                "name": "CodeLens",
                "generics": [],
                "doc": "A code lens represents a {@link Command} that should be shown along with\nsource text, like the number of references, a way to run tests, etc.\n\nA code lens is _unresolved_ when no command is associated to it. For performance\nreasons the creation of a code lens and resolving should be done to two stages.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 2637,
                    "source": "\n\n\t\t/**\n\t\t * Creates a new code lens object.\n\t\t *\n\t\t * @param range The range to which this code lens applies.\n\t\t * @param command The command associated to this code lens.\n\t\t */\n\t\tconstructor(range: Range, command?: Command);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "range",
                        "type": {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 2637,
                          "source": " Range"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "command",
                        "type": {
                          "ref": "Command",
                          "targs": [],
                          "isNullable": false,
                          "_": 2637,
                          "source": " Command"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The range in which this code lens is valid. Should only span a single line.",
                    "isMethod": false,
                    "_": 2619,
                    "source": "\n\n\t\t/**\n\t\t * The range in which this code lens is valid. Should only span a single line.\n\t\t */\n\t\trange: Range;",
                    "name": "range",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Range",
                      "targs": [],
                      "isNullable": false,
                      "_": 2619,
                      "source": " Range"
                    }
                  },
                  {
                    "doc": "The command this code lens represents.",
                    "isMethod": false,
                    "_": 2624,
                    "source": "\n\n\t\t/**\n\t\t * The command this code lens represents.\n\t\t */\n\t\tcommand?: Command;",
                    "name": "command",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Command",
                      "targs": [],
                      "isNullable": false,
                      "_": 2624,
                      "source": " Command"
                    }
                  },
                  {
                    "doc": "`true` when there is a command associated.",
                    "isMethod": false,
                    "_": 2629,
                    "source": "\n\n\t\t/**\n\t\t * `true` when there is a command associated.\n\t\t */\n\t\treadonly isResolved: boolean;",
                    "name": "isResolved",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 2629,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 2644,
                "name": "CodeLensProvider",
                "generics": [
                  {
                    "name": "T",
                    "constraint": {
                      "ref": "CodeLens",
                      "targs": [],
                      "isNullable": false,
                      "_": 2644,
                      "source": " CodeLens"
                    },
                    "default": {
                      "ref": "CodeLens",
                      "targs": [],
                      "isNullable": false,
                      "_": 2644,
                      "source": " CodeLens"
                    },
                    "_": 2644,
                    "source": "T extends CodeLens = CodeLens"
                  }
                ],
                "doc": "A code lens provider adds {@link Commandcommands} to source text. The commands will be shown\nas dedicated horizontal lines in between the source text.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "An optional event to signal that the code lenses from this provider have changed.",
                    "isMethod": false,
                    "_": 2649,
                    "source": "\n\n\t\t/**\n\t\t * An optional event to signal that the code lenses from this provider have changed.\n\t\t */\n\t\tonDidChangeCodeLenses?: Event<void>;",
                    "name": "onDidChangeCodeLenses",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 2649,
                          "source": "void"
                        }
                      ],
                      "isNullable": false,
                      "_": 2649,
                      "source": " Event<void>"
                    }
                  },
                  {
                    "doc": "Compute a list of {@link CodeLens lenses}. This call should return as fast as possible and if\n computing the commands is expensive implementors should only return code lens objects with the\n range set and implement {@link CodeLensProvider.resolveCodeLens resolve}.\n\n @param document The document in which the command was invoked.\n @param token A cancellation token.\n @return An array of code lenses or a thenable that resolves to such. The lack of a result can be\n signaled by returning `undefined`, `null`, or an empty array.",
                    "isMethod": true,
                    "_": 2661,
                    "source": "\n\n\t\t/**\n\t\t * Compute a list of {@link CodeLens lenses}. This call should return as fast as possible and if\n\t\t * computing the commands is expensive implementors should only return code lens objects with the\n\t\t * range set and implement {@link CodeLensProvider.resolveCodeLens resolve}.\n\t\t *\n\t\t * @param document The document in which the command was invoked.\n\t\t * @param token A cancellation token.\n\t\t * @return An array of code lenses or a thenable that resolves to such. The lack of a result can be\n\t\t * signaled by returning `undefined`, `null`, or an empty array.\n\t\t */\n\t\tprovideCodeLenses(document: TextDocument, token: CancellationToken): ProviderResult<T[]>;",
                    "name": "provideCodeLenses",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "document",
                        "type": {
                          "ref": "TextDocument",
                          "targs": [],
                          "isNullable": false,
                          "_": 2661,
                          "source": " TextDocument"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 2661,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "T",
                              "targs": [],
                              "isNullable": false,
                              "_": 2661,
                              "source": "T"
                            }
                          ],
                          "isNullable": false,
                          "_": 2661,
                          "source": "T[]"
                        }
                      ],
                      "isNullable": false,
                      "_": 2661,
                      "source": " ProviderResult<T[]>"
                    }
                  },
                  {
                    "doc": "This function will be called for each visible code lens, usually when scrolling and after\n calls to {@link CodeLensProvider.provideCodeLenses compute}-lenses.\n\n @param codeLens Code lens that must be resolved.\n @param token A cancellation token.\n @return The given, resolved code lens or thenable that resolves to such.",
                    "isMethod": true,
                    "_": 2671,
                    "source": "\n\n\t\t/**\n\t\t * This function will be called for each visible code lens, usually when scrolling and after\n\t\t * calls to {@link CodeLensProvider.provideCodeLenses compute}-lenses.\n\t\t *\n\t\t * @param codeLens Code lens that must be resolved.\n\t\t * @param token A cancellation token.\n\t\t * @return The given, resolved code lens or thenable that resolves to such.\n\t\t */\n\t\tresolveCodeLens?(codeLens: T, token: CancellationToken): ProviderResult<T>;",
                    "name": "resolveCodeLens",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "codeLens",
                        "type": {
                          "ref": "T",
                          "targs": [],
                          "isNullable": false,
                          "_": 2671,
                          "source": " T"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 2671,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "ref": "T",
                          "targs": [],
                          "isNullable": false,
                          "_": 2671,
                          "source": "T"
                        }
                      ],
                      "isNullable": false,
                      "_": 2671,
                      "source": " ProviderResult<T>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 2694,
                "name": "DefinitionProvider",
                "generics": [],
                "doc": "The definition provider interface defines the contract between extensions and\nthe [go to definition](https://code.visualstudio.com/docs/editor/editingevolved#_go-to-definition)\nand peek definition features.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Provide the definition of the symbol at the given position and document.\n\n @param document The document in which the command was invoked.\n @param position The position at which the command was invoked.\n @param token A cancellation token.\n @return A definition or a thenable that resolves to such. The lack of a result can be\n signaled by returning `undefined` or `null`.",
                    "isMethod": true,
                    "_": 2705,
                    "source": "\n\n\t\t/**\n\t\t * Provide the definition of the symbol at the given position and document.\n\t\t *\n\t\t * @param document The document in which the command was invoked.\n\t\t * @param position The position at which the command was invoked.\n\t\t * @param token A cancellation token.\n\t\t * @return A definition or a thenable that resolves to such. The lack of a result can be\n\t\t * signaled by returning `undefined` or `null`.\n\t\t */\n\t\tprovideDefinition(document: TextDocument, position: Position, token: CancellationToken): ProviderResult<Definition | DefinitionLink[]>;",
                    "name": "provideDefinition",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "document",
                        "type": {
                          "ref": "TextDocument",
                          "targs": [],
                          "isNullable": false,
                          "_": 2705,
                          "source": " TextDocument"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "position",
                        "type": {
                          "ref": "Position",
                          "targs": [],
                          "isNullable": false,
                          "_": 2705,
                          "source": " Position"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 2705,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "union": [
                            {
                              "ref": "Definition",
                              "targs": [],
                              "isNullable": false,
                              "_": 2705,
                              "source": "Definition"
                            },
                            {
                              "core": "array",
                              "targs": [
                                {
                                  "ref": "DefinitionLink",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 2705,
                                  "source": " DefinitionLink"
                                }
                              ],
                              "isNullable": false,
                              "_": 2705,
                              "source": " DefinitionLink[]"
                            }
                          ],
                          "isNullable": false,
                          "_": 2705,
                          "source": "Definition | DefinitionLink[]"
                        }
                      ],
                      "isNullable": false,
                      "_": 2705,
                      "source": " ProviderResult<Definition | DefinitionLink[]>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 2712,
                "name": "ImplementationProvider",
                "generics": [],
                "doc": "The implementation provider interface defines the contract between extensions and\nthe go to implementation feature.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Provide the implementations of the symbol at the given position and document.\n\n @param document The document in which the command was invoked.\n @param position The position at which the command was invoked.\n @param token A cancellation token.\n @return A definition or a thenable that resolves to such. The lack of a result can be\n signaled by returning `undefined` or `null`.",
                    "isMethod": true,
                    "_": 2723,
                    "source": "\n\n\t\t/**\n\t\t * Provide the implementations of the symbol at the given position and document.\n\t\t *\n\t\t * @param document The document in which the command was invoked.\n\t\t * @param position The position at which the command was invoked.\n\t\t * @param token A cancellation token.\n\t\t * @return A definition or a thenable that resolves to such. The lack of a result can be\n\t\t * signaled by returning `undefined` or `null`.\n\t\t */\n\t\tprovideImplementation(document: TextDocument, position: Position, token: CancellationToken): ProviderResult<Definition | DefinitionLink[]>;",
                    "name": "provideImplementation",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "document",
                        "type": {
                          "ref": "TextDocument",
                          "targs": [],
                          "isNullable": false,
                          "_": 2723,
                          "source": " TextDocument"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "position",
                        "type": {
                          "ref": "Position",
                          "targs": [],
                          "isNullable": false,
                          "_": 2723,
                          "source": " Position"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 2723,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "union": [
                            {
                              "ref": "Definition",
                              "targs": [],
                              "isNullable": false,
                              "_": 2723,
                              "source": "Definition"
                            },
                            {
                              "core": "array",
                              "targs": [
                                {
                                  "ref": "DefinitionLink",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 2723,
                                  "source": " DefinitionLink"
                                }
                              ],
                              "isNullable": false,
                              "_": 2723,
                              "source": " DefinitionLink[]"
                            }
                          ],
                          "isNullable": false,
                          "_": 2723,
                          "source": "Definition | DefinitionLink[]"
                        }
                      ],
                      "isNullable": false,
                      "_": 2723,
                      "source": " ProviderResult<Definition | DefinitionLink[]>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 2730,
                "name": "TypeDefinitionProvider",
                "generics": [],
                "doc": "The type definition provider defines the contract between extensions and\nthe go to type definition feature.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Provide the type definition of the symbol at the given position and document.\n\n @param document The document in which the command was invoked.\n @param position The position at which the command was invoked.\n @param token A cancellation token.\n @return A definition or a thenable that resolves to such. The lack of a result can be\n signaled by returning `undefined` or `null`.",
                    "isMethod": true,
                    "_": 2741,
                    "source": "\n\n\t\t/**\n\t\t * Provide the type definition of the symbol at the given position and document.\n\t\t *\n\t\t * @param document The document in which the command was invoked.\n\t\t * @param position The position at which the command was invoked.\n\t\t * @param token A cancellation token.\n\t\t * @return A definition or a thenable that resolves to such. The lack of a result can be\n\t\t * signaled by returning `undefined` or `null`.\n\t\t */\n\t\tprovideTypeDefinition(document: TextDocument, position: Position, token: CancellationToken): ProviderResult<Definition | DefinitionLink[]>;",
                    "name": "provideTypeDefinition",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "document",
                        "type": {
                          "ref": "TextDocument",
                          "targs": [],
                          "isNullable": false,
                          "_": 2741,
                          "source": " TextDocument"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "position",
                        "type": {
                          "ref": "Position",
                          "targs": [],
                          "isNullable": false,
                          "_": 2741,
                          "source": " Position"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 2741,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "union": [
                            {
                              "ref": "Definition",
                              "targs": [],
                              "isNullable": false,
                              "_": 2741,
                              "source": "Definition"
                            },
                            {
                              "core": "array",
                              "targs": [
                                {
                                  "ref": "DefinitionLink",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 2741,
                                  "source": " DefinitionLink"
                                }
                              ],
                              "isNullable": false,
                              "_": 2741,
                              "source": " DefinitionLink[]"
                            }
                          ],
                          "isNullable": false,
                          "_": 2741,
                          "source": "Definition | DefinitionLink[]"
                        }
                      ],
                      "isNullable": false,
                      "_": 2741,
                      "source": " ProviderResult<Definition | DefinitionLink[]>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 2754,
                "name": "DeclarationProvider",
                "generics": [],
                "doc": "The declaration provider interface defines the contract between extensions and\nthe go to declaration feature.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Provide the declaration of the symbol at the given position and document.\n\n @param document The document in which the command was invoked.\n @param position The position at which the command was invoked.\n @param token A cancellation token.\n @return A declaration or a thenable that resolves to such. The lack of a result can be\n signaled by returning `undefined` or `null`.",
                    "isMethod": true,
                    "_": 2765,
                    "source": "\n\n\t\t/**\n\t\t * Provide the declaration of the symbol at the given position and document.\n\t\t *\n\t\t * @param document The document in which the command was invoked.\n\t\t * @param position The position at which the command was invoked.\n\t\t * @param token A cancellation token.\n\t\t * @return A declaration or a thenable that resolves to such. The lack of a result can be\n\t\t * signaled by returning `undefined` or `null`.\n\t\t */\n\t\tprovideDeclaration(document: TextDocument, position: Position, token: CancellationToken): ProviderResult<Declaration>;",
                    "name": "provideDeclaration",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "document",
                        "type": {
                          "ref": "TextDocument",
                          "targs": [],
                          "isNullable": false,
                          "_": 2765,
                          "source": " TextDocument"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "position",
                        "type": {
                          "ref": "Position",
                          "targs": [],
                          "isNullable": false,
                          "_": 2765,
                          "source": " Position"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 2765,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "ref": "Declaration",
                          "targs": [],
                          "isNullable": false,
                          "_": 2765,
                          "source": "Declaration"
                        }
                      ],
                      "isNullable": false,
                      "_": 2765,
                      "source": " ProviderResult<Declaration>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline13",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "MarkdownString",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 2791,
                    "source": " readonly enabledCommands: readonly string[]",
                    "name": "enabledCommands",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "core": "string",
                            "isNullable": false,
                            "_": 2791,
                            "source": " string"
                          }
                        ],
                        "isNullable": false,
                        "_": 2791,
                        "source": " string[]"
                      },
                      "isNullable": false,
                      "_": 2791,
                      "source": " readonly string[]"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 2776,
                "name": "MarkdownString",
                "generics": [],
                "doc": "Human-readable text that supports formatting via the [markdown syntax](https://commonmark.org).\n\nRendering of {@link ThemeIcontheme icons} via the `$(<name>)`-syntax is supported\nwhen the {@linkcode supportThemeIcons} is set to `true`.\n\nRendering of embedded html is supported when {@linkcode supportHtml} is set to `true`.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 2837,
                    "source": "\n\n\t\t/**\n\t\t * Creates a new markdown string with the given value.\n\t\t *\n\t\t * @param value Optional, initial value.\n\t\t * @param supportThemeIcons Optional, Specifies whether {@link ThemeIcon ThemeIcons} are supported within the {@linkcode MarkdownString}.\n\t\t */\n\t\tconstructor(value?: string, supportThemeIcons?: boolean);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "value",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 2837,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": true
                      },
                      {
                        "name": "supportThemeIcons",
                        "type": {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 2837,
                          "source": " boolean"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The markdown string.",
                    "isMethod": false,
                    "_": 2781,
                    "source": "\n\n\t\t/**\n\t\t * The markdown string.\n\t\t */\n\t\tvalue: string;",
                    "name": "value",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 2781,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Indicates that this markdown string is from a trusted source. Only *trusted*\n markdown supports links that execute commands, e.g. `[Run it](command:myCommandId)`.\n\n Defaults to `false` (commands are disabled).\n\n If this is an object, only the set of commands listed in `enabledCommands` are allowed.",
                    "isMethod": false,
                    "_": 2791,
                    "source": "\n\n\t\t/**\n\t\t * Indicates that this markdown string is from a trusted source. Only *trusted*\n\t\t * markdown supports links that execute commands, e.g. `[Run it](command:myCommandId)`.\n\t\t *\n\t\t * Defaults to `false` (commands are disabled).\n\t\t *\n\t\t * If this is an object, only the set of commands listed in `enabledCommands` are allowed.\n\t\t */\n\t\tisTrusted?: boolean | { readonly enabledCommands: readonly string[] };",
                    "name": "isTrusted",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 2791,
                          "source": " boolean"
                        },
                        {
                          "ref": "IInline13",
                          "targs": [],
                          "isNullable": false,
                          "_": 2791,
                          "source": " { readonly enabledCommands: readonly string[] }"
                        }
                      ],
                      "isNullable": false,
                      "_": 2791,
                      "source": " boolean | { readonly enabledCommands: readonly string[] }"
                    }
                  },
                  {
                    "doc": "Indicates that this markdown string can contain {@link ThemeIcon ThemeIcons}, e.g. `$(zap)`.",
                    "isMethod": false,
                    "_": 2796,
                    "source": "\n\n\t\t/**\n\t\t * Indicates that this markdown string can contain {@link ThemeIcon ThemeIcons}, e.g. `$(zap)`.\n\t\t */\n\t\tsupportThemeIcons?: boolean;",
                    "name": "supportThemeIcons",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 2796,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Indicates that this markdown string can contain raw html tags. Defaults to `false`.\n\n When `supportHtml` is false, the markdown renderer will strip out any raw html tags\n that appear in the markdown text. This means you can only use markdown syntax for rendering.\n\n When `supportHtml` is true, the markdown render will also allow a safe subset of html tags\n and attributes to be rendered. See https://github.com/microsoft/vscode/blob/6d2920473c6f13759c978dd89104c4270a83422d/src/vs/base/browser/markdownRenderer.ts#L296\n for a list of all supported tags and attributes.",
                    "isMethod": false,
                    "_": 2808,
                    "source": "\n\n\t\t/**\n\t\t * Indicates that this markdown string can contain raw html tags. Defaults to `false`.\n\t\t *\n\t\t * When `supportHtml` is false, the markdown renderer will strip out any raw html tags\n\t\t * that appear in the markdown text. This means you can only use markdown syntax for rendering.\n\t\t *\n\t\t * When `supportHtml` is true, the markdown render will also allow a safe subset of html tags\n\t\t * and attributes to be rendered. See https://github.com/microsoft/vscode/blob/6d2920473c6f13759c978dd89104c4270a83422d/src/vs/base/browser/markdownRenderer.ts#L296\n\t\t * for a list of all supported tags and attributes.\n\t\t */\n\t\tsupportHtml?: boolean;",
                    "name": "supportHtml",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 2808,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Uri that relative paths are resolved relative to.\n\n If the `baseUri` ends with `/`, it is considered a directory and relative paths in the markdown are resolved relative to that directory:\n\n ```ts\n const md = new vscode.MarkdownString(`[link](./file.js)`);\n md.baseUri = vscode.Uri.file('/path/to/dir/');\n // Here 'link' in the rendered markdown resolves to '/path/to/dir/file.js'\n ```\n\n If the `baseUri` is a file, relative paths in the markdown are resolved relative to the parent dir of that file:\n\n ```ts\n const md = new vscode.MarkdownString(`[link](./file.js)`);\n md.baseUri = vscode.Uri.file('/path/to/otherFile.js');\n // Here 'link' in the rendered markdown resolves to '/path/to/file.js'\n ```",
                    "isMethod": false,
                    "_": 2829,
                    "source": "\n\n\t\t/**\n\t\t * Uri that relative paths are resolved relative to.\n\t\t *\n\t\t * If the `baseUri` ends with `/`, it is considered a directory and relative paths in the markdown are resolved relative to that directory:\n\t\t *\n\t\t * ```ts\n\t\t * const md = new vscode.MarkdownString(`[link](./file.js)`);\n\t\t * md.baseUri = vscode.Uri.file('/path/to/dir/');\n\t\t * // Here 'link' in the rendered markdown resolves to '/path/to/dir/file.js'\n\t\t * ```\n\t\t *\n\t\t * If the `baseUri` is a file, relative paths in the markdown are resolved relative to the parent dir of that file:\n\t\t *\n\t\t * ```ts\n\t\t * const md = new vscode.MarkdownString(`[link](./file.js)`);\n\t\t * md.baseUri = vscode.Uri.file('/path/to/otherFile.js');\n\t\t * // Here 'link' in the rendered markdown resolves to '/path/to/file.js'\n\t\t * ```\n\t\t */\n\t\tbaseUri?: Uri;",
                    "name": "baseUri",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 2829,
                      "source": " Uri"
                    }
                  },
                  {
                    "doc": "Appends and escapes the given string to this markdown string.\n @param value Plain text.",
                    "isMethod": true,
                    "_": 2843,
                    "source": "\n\n\t\t/**\n\t\t * Appends and escapes the given string to this markdown string.\n\t\t * @param value Plain text.\n\t\t */\n\t\tappendText(value: string): MarkdownString;",
                    "name": "appendText",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "value",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 2843,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "MarkdownString",
                      "targs": [],
                      "isNullable": false,
                      "_": 2843,
                      "source": " MarkdownString"
                    }
                  },
                  {
                    "doc": "Appends the given string 'as is' to this markdown string. When {@linkcode MarkdownString.supportThemeIcons supportThemeIcons} is `true`, {@link ThemeIcon ThemeIcons} in the `value` will be iconified.\n @param value Markdown string.",
                    "isMethod": true,
                    "_": 2849,
                    "source": "\n\n\t\t/**\n\t\t * Appends the given string 'as is' to this markdown string. When {@linkcode MarkdownString.supportThemeIcons supportThemeIcons} is `true`, {@link ThemeIcon ThemeIcons} in the `value` will be iconified.\n\t\t * @param value Markdown string.\n\t\t */\n\t\tappendMarkdown(value: string): MarkdownString;",
                    "name": "appendMarkdown",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "value",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 2849,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "MarkdownString",
                      "targs": [],
                      "isNullable": false,
                      "_": 2849,
                      "source": " MarkdownString"
                    }
                  },
                  {
                    "doc": "Appends the given string as codeblock using the provided language.\n @param value A code snippet.\n @param language An optional {@link languages.getLanguages language identifier}.",
                    "isMethod": true,
                    "_": 2856,
                    "source": "\n\n\t\t/**\n\t\t * Appends the given string as codeblock using the provided language.\n\t\t * @param value A code snippet.\n\t\t * @param language An optional {@link languages.getLanguages language identifier}.\n\t\t */\n\t\tappendCodeblock(value: string, language?: string): MarkdownString;",
                    "name": "appendCodeblock",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "value",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 2856,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "language",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 2856,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "MarkdownString",
                      "targs": [],
                      "isNullable": false,
                      "_": 2856,
                      "source": " MarkdownString"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline14",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "MarkedString",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 2866,
                    "source": " language: string;",
                    "name": "language",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 2866,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 2866,
                    "source": " value: string",
                    "name": "value",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 2866,
                      "source": " string"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 2872,
                "name": "Hover",
                "generics": [],
                "doc": "A hover represents additional information for a symbol or word. Hovers are\nrendered in a tooltip-like widget.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 2892,
                    "source": "\n\n\t\t/**\n\t\t * Creates a new hover object.\n\t\t *\n\t\t * @param contents The contents of the hover.\n\t\t * @param range The range to which the hover applies.\n\t\t */\n\t\tconstructor(contents: MarkdownString | MarkedString | Array<MarkdownString | MarkedString>, range?: Range);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "contents",
                        "type": {
                          "union": [
                            {
                              "ref": "MarkdownString",
                              "targs": [],
                              "isNullable": false,
                              "_": 2892,
                              "source": " MarkdownString"
                            },
                            {
                              "ref": "MarkedString",
                              "targs": [],
                              "isNullable": false,
                              "_": 2892,
                              "source": " MarkedString"
                            },
                            {
                              "ref": "Array",
                              "targs": [
                                {
                                  "union": [
                                    {
                                      "ref": "MarkdownString",
                                      "targs": [],
                                      "isNullable": false,
                                      "_": 2892,
                                      "source": "MarkdownString"
                                    },
                                    {
                                      "ref": "MarkedString",
                                      "targs": [],
                                      "isNullable": false,
                                      "_": 2892,
                                      "source": " MarkedString"
                                    }
                                  ],
                                  "isNullable": false,
                                  "_": 2892,
                                  "source": "MarkdownString | MarkedString"
                                }
                              ],
                              "isNullable": false,
                              "_": 2892,
                              "source": " Array<MarkdownString | MarkedString>"
                            }
                          ],
                          "isNullable": false,
                          "_": 2892,
                          "source": " MarkdownString | MarkedString | Array<MarkdownString | MarkedString>"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "range",
                        "type": {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 2892,
                          "source": " Range"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The contents of this hover.",
                    "isMethod": false,
                    "_": 2877,
                    "source": "\n\n\t\t/**\n\t\t * The contents of this hover.\n\t\t */\n\t\tcontents: Array<MarkdownString | MarkedString>;",
                    "name": "contents",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Array",
                      "targs": [
                        {
                          "union": [
                            {
                              "ref": "MarkdownString",
                              "targs": [],
                              "isNullable": false,
                              "_": 2877,
                              "source": "MarkdownString"
                            },
                            {
                              "ref": "MarkedString",
                              "targs": [],
                              "isNullable": false,
                              "_": 2877,
                              "source": " MarkedString"
                            }
                          ],
                          "isNullable": false,
                          "_": 2877,
                          "source": "MarkdownString | MarkedString"
                        }
                      ],
                      "isNullable": false,
                      "_": 2877,
                      "source": " Array<MarkdownString | MarkedString>"
                    }
                  },
                  {
                    "doc": "The range to which this hover applies. When missing, the\n editor will use the range at the current position or the\n current position itself.",
                    "isMethod": false,
                    "_": 2884,
                    "source": "\n\n\t\t/**\n\t\t * The range to which this hover applies. When missing, the\n\t\t * editor will use the range at the current position or the\n\t\t * current position itself.\n\t\t */\n\t\trange?: Range;",
                    "name": "range",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Range",
                      "targs": [],
                      "isNullable": false,
                      "_": 2884,
                      "source": " Range"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 2899,
                "name": "HoverProvider",
                "generics": [],
                "doc": "The hover provider interface defines the contract between extensions and\nthe [hover](https://code.visualstudio.com/docs/editor/intellisense)-feature.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Provide a hover for the given position and document. Multiple hovers at the same\n position will be merged by the editor. A hover can have a range which defaults\n to the word range at the position when omitted.\n\n @param document The document in which the command was invoked.\n @param position The position at which the command was invoked.\n @param token A cancellation token.\n @return A hover or a thenable that resolves to such. The lack of a result can be\n signaled by returning `undefined` or `null`.",
                    "isMethod": true,
                    "_": 2912,
                    "source": "\n\n\t\t/**\n\t\t * Provide a hover for the given position and document. Multiple hovers at the same\n\t\t * position will be merged by the editor. A hover can have a range which defaults\n\t\t * to the word range at the position when omitted.\n\t\t *\n\t\t * @param document The document in which the command was invoked.\n\t\t * @param position The position at which the command was invoked.\n\t\t * @param token A cancellation token.\n\t\t * @return A hover or a thenable that resolves to such. The lack of a result can be\n\t\t * signaled by returning `undefined` or `null`.\n\t\t */\n\t\tprovideHover(document: TextDocument, position: Position, token: CancellationToken): ProviderResult<Hover>;",
                    "name": "provideHover",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "document",
                        "type": {
                          "ref": "TextDocument",
                          "targs": [],
                          "isNullable": false,
                          "_": 2912,
                          "source": " TextDocument"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "position",
                        "type": {
                          "ref": "Position",
                          "targs": [],
                          "isNullable": false,
                          "_": 2912,
                          "source": " Position"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 2912,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "ref": "Hover",
                          "targs": [],
                          "isNullable": false,
                          "_": 2912,
                          "source": "Hover"
                        }
                      ],
                      "isNullable": false,
                      "_": 2912,
                      "source": " ProviderResult<Hover>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 2922,
                "name": "EvaluatableExpression",
                "generics": [],
                "doc": "An EvaluatableExpression represents an expression in a document that can be evaluated by an active debugger or runtime.\nThe result of this evaluation is shown in a tooltip-like widget.\nIf only a range is specified, the expression will be extracted from the underlying document.\nAn optional expression can be used to override the extracted expression.\nIn this case the range is still used to highlight the range in the document.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 2940,
                    "source": "\n\n\t\t/**\n\t\t * Creates a new evaluatable expression object.\n\t\t *\n\t\t * @param range The range in the underlying document from which the evaluatable expression is extracted.\n\t\t * @param expression If specified overrides the extracted expression.\n\t\t */\n\t\tconstructor(range: Range, expression?: string);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "range",
                        "type": {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 2940,
                          "source": " Range"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "expression",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 2940,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 2927,
                    "source": "\n\n\t\t/*\n\t\t * The range is used to extract the evaluatable expression from the underlying document and to highlight it.\n\t\t */\n\t\treadonly range: Range;",
                    "name": "range",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Range",
                      "targs": [],
                      "isNullable": false,
                      "_": 2927,
                      "source": " Range"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 2932,
                    "source": "\n\n\t\t/*\n\t\t * If specified the expression overrides the extracted expression.\n\t\t */\n\t\treadonly expression?: string | undefined;",
                    "name": "expression",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 2932,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 2932,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 2932,
                      "source": " string | undefined"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 2948,
                "name": "EvaluatableExpressionProvider",
                "generics": [],
                "doc": "The evaluatable expression provider interface defines the contract between extensions and\nthe debug hover. In this contract the provider returns an evaluatable expression for a given position\nin a document and the editor evaluates this expression in the active debug session and shows the result in a debug hover.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Provide an evaluatable expression for the given document and position.\n The editor will evaluate this expression in the active debug session and will show the result in the debug hover.\n The expression can be implicitly specified by the range in the underlying document or by explicitly returning an expression.\n\n @param document The document for which the debug hover is about to appear.\n @param position The line and character position in the document where the debug hover is about to appear.\n @param token A cancellation token.\n @return An EvaluatableExpression or a thenable that resolves to such. The lack of a result can be\n signaled by returning `undefined` or `null`.",
                    "isMethod": true,
                    "_": 2961,
                    "source": "\n\n\t\t/**\n\t\t * Provide an evaluatable expression for the given document and position.\n\t\t * The editor will evaluate this expression in the active debug session and will show the result in the debug hover.\n\t\t * The expression can be implicitly specified by the range in the underlying document or by explicitly returning an expression.\n\t\t *\n\t\t * @param document The document for which the debug hover is about to appear.\n\t\t * @param position The line and character position in the document where the debug hover is about to appear.\n\t\t * @param token A cancellation token.\n\t\t * @return An EvaluatableExpression or a thenable that resolves to such. The lack of a result can be\n\t\t * signaled by returning `undefined` or `null`.\n\t\t */\n\t\tprovideEvaluatableExpression(document: TextDocument, position: Position, token: CancellationToken): ProviderResult<EvaluatableExpression>;",
                    "name": "provideEvaluatableExpression",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "document",
                        "type": {
                          "ref": "TextDocument",
                          "targs": [],
                          "isNullable": false,
                          "_": 2961,
                          "source": " TextDocument"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "position",
                        "type": {
                          "ref": "Position",
                          "targs": [],
                          "isNullable": false,
                          "_": 2961,
                          "source": " Position"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 2961,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "ref": "EvaluatableExpression",
                          "targs": [],
                          "isNullable": false,
                          "_": 2961,
                          "source": "EvaluatableExpression"
                        }
                      ],
                      "isNullable": false,
                      "_": 2961,
                      "source": " ProviderResult<EvaluatableExpression>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 2967,
                "name": "InlineValueText",
                "generics": [],
                "doc": "Provide inline value as text.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 2982,
                    "source": "\n\t\t/**\n\t\t * Creates a new InlineValueText object.\n\t\t *\n\t\t * @param range The document line where to show the inline value.\n\t\t * @param text The value to be shown for the line.\n\t\t */\n\t\tconstructor(range: Range, text: string);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "range",
                        "type": {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 2982,
                          "source": " Range"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "text",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 2982,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The document range for which the inline value applies.",
                    "isMethod": false,
                    "_": 2971,
                    "source": "\n\t\t/**\n\t\t * The document range for which the inline value applies.\n\t\t */\n\t\treadonly range: Range;",
                    "name": "range",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Range",
                      "targs": [],
                      "isNullable": false,
                      "_": 2971,
                      "source": " Range"
                    }
                  },
                  {
                    "doc": "The text of the inline value.",
                    "isMethod": false,
                    "_": 2975,
                    "source": "\n\t\t/**\n\t\t * The text of the inline value.\n\t\t */\n\t\treadonly text: string;",
                    "name": "text",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 2975,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 2990,
                "name": "InlineValueVariableLookup",
                "generics": [],
                "doc": "Provide inline value through a variable lookup.\nIf only a range is specified, the variable name will be extracted from the underlying document.\nAn optional variable name can be used to override the extracted name.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 3011,
                    "source": "\n\t\t/**\n\t\t * Creates a new InlineValueVariableLookup object.\n\t\t *\n\t\t * @param range The document line where to show the inline value.\n\t\t * @param variableName The name of the variable to look up.\n\t\t * @param caseSensitiveLookup How to perform the lookup. If missing lookup is case sensitive.\n\t\t */\n\t\tconstructor(range: Range, variableName?: string, caseSensitiveLookup?: boolean);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "range",
                        "type": {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 3011,
                          "source": " Range"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "variableName",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 3011,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": true
                      },
                      {
                        "name": "caseSensitiveLookup",
                        "type": {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 3011,
                          "source": " boolean"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The document range for which the inline value applies.\nThe range is used to extract the variable name from the underlying document.",
                    "isMethod": false,
                    "_": 2995,
                    "source": "\n\t\t/**\n\t\t * The document range for which the inline value applies.\n\t\t * The range is used to extract the variable name from the underlying document.\n\t\t */\n\t\treadonly range: Range;",
                    "name": "range",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Range",
                      "targs": [],
                      "isNullable": false,
                      "_": 2995,
                      "source": " Range"
                    }
                  },
                  {
                    "doc": "If specified the name of the variable to look up.",
                    "isMethod": false,
                    "_": 2999,
                    "source": "\n\t\t/**\n\t\t * If specified the name of the variable to look up.\n\t\t */\n\t\treadonly variableName?: string | undefined;",
                    "name": "variableName",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 2999,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 2999,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 2999,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "How to perform the lookup.",
                    "isMethod": false,
                    "_": 3003,
                    "source": "\n\t\t/**\n\t\t * How to perform the lookup.\n\t\t */\n\t\treadonly caseSensitiveLookup: boolean;",
                    "name": "caseSensitiveLookup",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 3003,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 3019,
                "name": "InlineValueEvaluatableExpression",
                "generics": [],
                "doc": "Provide an inline value through an expression evaluation.\nIf only a range is specified, the expression will be extracted from the underlying document.\nAn optional expression can be used to override the extracted expression.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 3035,
                    "source": "\n\t\t/**\n\t\t * Creates a new InlineValueEvaluatableExpression object.\n\t\t *\n\t\t * @param range The range in the underlying document from which the evaluatable expression is extracted.\n\t\t * @param expression If specified overrides the extracted expression.\n\t\t */\n\t\tconstructor(range: Range, expression?: string);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "range",
                        "type": {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 3035,
                          "source": " Range"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "expression",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 3035,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The document range for which the inline value applies.\nThe range is used to extract the evaluatable expression from the underlying document.",
                    "isMethod": false,
                    "_": 3024,
                    "source": "\n\t\t/**\n\t\t * The document range for which the inline value applies.\n\t\t * The range is used to extract the evaluatable expression from the underlying document.\n\t\t */\n\t\treadonly range: Range;",
                    "name": "range",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Range",
                      "targs": [],
                      "isNullable": false,
                      "_": 3024,
                      "source": " Range"
                    }
                  },
                  {
                    "doc": "If specified the expression overrides the extracted expression.",
                    "isMethod": false,
                    "_": 3028,
                    "source": "\n\t\t/**\n\t\t * If specified the expression overrides the extracted expression.\n\t\t */\n\t\treadonly expression?: string | undefined;",
                    "name": "expression",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 3028,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 3028,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 3028,
                      "source": " string | undefined"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 3050,
                "name": "InlineValueContext",
                "generics": [],
                "doc": "A value-object that contains contextual information when requesting inline values from a InlineValuesProvider.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The stack frame (as a DAP Id) where the execution has stopped.",
                    "isMethod": false,
                    "_": 3055,
                    "source": "\n\n\t\t/**\n\t\t * The stack frame (as a DAP Id) where the execution has stopped.\n\t\t */\n\t\treadonly frameId: number;",
                    "name": "frameId",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 3055,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "The document range where execution has stopped.\nTypically the end position of the range denotes the line where the inline values are shown.",
                    "isMethod": false,
                    "_": 3061,
                    "source": "\n\n\t\t/**\n\t\t * The document range where execution has stopped.\n\t\t * Typically the end position of the range denotes the line where the inline values are shown.\n\t\t */\n\t\treadonly stoppedLocation: Range;",
                    "name": "stoppedLocation",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Range",
                      "targs": [],
                      "isNullable": false,
                      "_": 3061,
                      "source": " Range"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 3069,
                "name": "InlineValuesProvider",
                "generics": [],
                "doc": "The inline values provider interface defines the contract between extensions and the editor's debugger inline values feature.\nIn this contract the provider returns inline value information for a given document range\nand the editor shows this information in the editor at the end of lines.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "An optional event to signal that inline values have changed.\n @see {@link EventEmitter}",
                    "isMethod": false,
                    "_": 3075,
                    "source": "\n\n\t\t/**\n\t\t * An optional event to signal that inline values have changed.\n\t\t * @see {@link EventEmitter}\n\t\t */\n\t\tonDidChangeInlineValues?: Event<void> | undefined;",
                    "name": "onDidChangeInlineValues",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "Event",
                          "targs": [
                            {
                              "core": "void",
                              "isNullable": false,
                              "_": 3075,
                              "source": "void"
                            }
                          ],
                          "isNullable": false,
                          "_": 3075,
                          "source": " Event<void>"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 3075,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 3075,
                      "source": " Event<void> | undefined"
                    }
                  },
                  {
                    "doc": "Provide \"inline value\" information for a given document and range.\n The editor calls this method whenever debugging stops in the given document.\n The returned inline values information is rendered in the editor at the end of lines.\n\n @param document The document for which the inline values information is needed.\n @param viewPort The visible document range for which inline values should be computed.\n @param context A bag containing contextual information like the current location.\n @param token A cancellation token.\n @return An array of InlineValueDescriptors or a thenable that resolves to such. The lack of a result can be\n signaled by returning `undefined` or `null`.",
                    "isMethod": true,
                    "_": 3089,
                    "source": "\n\n\t\t/**\n\t\t * Provide \"inline value\" information for a given document and range.\n\t\t * The editor calls this method whenever debugging stops in the given document.\n\t\t * The returned inline values information is rendered in the editor at the end of lines.\n\t\t *\n\t\t * @param document The document for which the inline values information is needed.\n\t\t * @param viewPort The visible document range for which inline values should be computed.\n\t\t * @param context A bag containing contextual information like the current location.\n\t\t * @param token A cancellation token.\n\t\t * @return An array of InlineValueDescriptors or a thenable that resolves to such. The lack of a result can be\n\t\t * signaled by returning `undefined` or `null`.\n\t\t */\n\t\tprovideInlineValues(document: TextDocument, viewPort: Range, context: InlineValueContext, token: CancellationToken): ProviderResult<InlineValue[]>;",
                    "name": "provideInlineValues",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "document",
                        "type": {
                          "ref": "TextDocument",
                          "targs": [],
                          "isNullable": false,
                          "_": 3089,
                          "source": " TextDocument"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "viewPort",
                        "type": {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 3089,
                          "source": " Range"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "context",
                        "type": {
                          "ref": "InlineValueContext",
                          "targs": [],
                          "isNullable": false,
                          "_": 3089,
                          "source": " InlineValueContext"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 3089,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "InlineValue",
                              "targs": [],
                              "isNullable": false,
                              "_": 3089,
                              "source": "InlineValue"
                            }
                          ],
                          "isNullable": false,
                          "_": 3089,
                          "source": "InlineValue[]"
                        }
                      ],
                      "isNullable": false,
                      "_": 3089,
                      "source": " ProviderResult<InlineValue[]>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 3118,
                "name": "DocumentHighlight",
                "generics": [],
                "doc": "A document highlight is a range inside a text document which deserves\nspecial attention. Usually a document highlight is visualized by changing\nthe background color of its range.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 3136,
                    "source": "\n\n\t\t/**\n\t\t * Creates a new document highlight object.\n\t\t *\n\t\t * @param range The range the highlight applies to.\n\t\t * @param kind The highlight kind, default is {@link DocumentHighlightKind.Text text}.\n\t\t */\n\t\tconstructor(range: Range, kind?: DocumentHighlightKind);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "range",
                        "type": {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 3136,
                          "source": " Range"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "kind",
                        "type": {
                          "ref": "DocumentHighlightKind",
                          "targs": [],
                          "isNullable": false,
                          "_": 3136,
                          "source": " DocumentHighlightKind"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The range this highlight applies to.",
                    "isMethod": false,
                    "_": 3123,
                    "source": "\n\n\t\t/**\n\t\t * The range this highlight applies to.\n\t\t */\n\t\trange: Range;",
                    "name": "range",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Range",
                      "targs": [],
                      "isNullable": false,
                      "_": 3123,
                      "source": " Range"
                    }
                  },
                  {
                    "doc": "The highlight kind, default is {@link DocumentHighlightKind.Text text}.",
                    "isMethod": false,
                    "_": 3128,
                    "source": "\n\n\t\t/**\n\t\t * The highlight kind, default is {@link DocumentHighlightKind.Text text}.\n\t\t */\n\t\tkind?: DocumentHighlightKind;",
                    "name": "kind",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "DocumentHighlightKind",
                      "targs": [],
                      "isNullable": false,
                      "_": 3128,
                      "source": " DocumentHighlightKind"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 3143,
                "name": "DocumentHighlightProvider",
                "generics": [],
                "doc": "The document highlight provider interface defines the contract between extensions and\nthe word-highlight-feature.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Provide a set of document highlights, like all occurrences of a variable or\n all exit-points of a function.\n\n @param document The document in which the command was invoked.\n @param position The position at which the command was invoked.\n @param token A cancellation token.\n @return An array of document highlights or a thenable that resolves to such. The lack of a result can be\n signaled by returning `undefined`, `null`, or an empty array.",
                    "isMethod": true,
                    "_": 3155,
                    "source": "\n\n\t\t/**\n\t\t * Provide a set of document highlights, like all occurrences of a variable or\n\t\t * all exit-points of a function.\n\t\t *\n\t\t * @param document The document in which the command was invoked.\n\t\t * @param position The position at which the command was invoked.\n\t\t * @param token A cancellation token.\n\t\t * @return An array of document highlights or a thenable that resolves to such. The lack of a result can be\n\t\t * signaled by returning `undefined`, `null`, or an empty array.\n\t\t */\n\t\tprovideDocumentHighlights(document: TextDocument, position: Position, token: CancellationToken): ProviderResult<DocumentHighlight[]>;",
                    "name": "provideDocumentHighlights",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "document",
                        "type": {
                          "ref": "TextDocument",
                          "targs": [],
                          "isNullable": false,
                          "_": 3155,
                          "source": " TextDocument"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "position",
                        "type": {
                          "ref": "Position",
                          "targs": [],
                          "isNullable": false,
                          "_": 3155,
                          "source": " Position"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 3155,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "DocumentHighlight",
                              "targs": [],
                              "isNullable": false,
                              "_": 3155,
                              "source": "DocumentHighlight"
                            }
                          ],
                          "isNullable": false,
                          "_": 3155,
                          "source": "DocumentHighlight[]"
                        }
                      ],
                      "isNullable": false,
                      "_": 3155,
                      "source": " ProviderResult<DocumentHighlight[]>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 3205,
                "name": "SymbolInformation",
                "generics": [],
                "doc": "Represents information about programming constructs like variables, classes,\ninterfaces etc.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 3240,
                    "source": "\n\n\t\t/**\n\t\t * Creates a new symbol information object.\n\t\t *\n\t\t * @param name The name of the symbol.\n\t\t * @param kind The kind of the symbol.\n\t\t * @param containerName The name of the symbol containing the symbol.\n\t\t * @param location The location of the symbol.\n\t\t */\n\t\tconstructor(name: string, kind: SymbolKind, containerName: string, location: Location);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "name",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 3240,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "kind",
                        "type": {
                          "ref": "SymbolKind",
                          "targs": [],
                          "isNullable": false,
                          "_": 3240,
                          "source": " SymbolKind"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "containerName",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 3240,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "location",
                        "type": {
                          "ref": "Location",
                          "targs": [],
                          "isNullable": false,
                          "_": 3240,
                          "source": " Location"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  },
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 3253,
                    "source": "\n\n\t\t/**\n\t\t * Creates a new symbol information object.\n\t\t *\n\t\t * @deprecated Please use the constructor taking a {@link Location} object.\n\t\t *\n\t\t * @param name The name of the symbol.\n\t\t * @param kind The kind of the symbol.\n\t\t * @param range The range of the location of the symbol.\n\t\t * @param uri The resource of the location of symbol, defaults to the current document.\n\t\t * @param containerName The name of the symbol containing the symbol.\n\t\t */\n\t\tconstructor(name: string, kind: SymbolKind, range: Range, uri?: Uri, containerName?: string);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "name",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 3253,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "kind",
                        "type": {
                          "ref": "SymbolKind",
                          "targs": [],
                          "isNullable": false,
                          "_": 3253,
                          "source": " SymbolKind"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "range",
                        "type": {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 3253,
                          "source": " Range"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "uri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 3253,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": true
                      },
                      {
                        "name": "containerName",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 3253,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The name of this symbol.",
                    "isMethod": false,
                    "_": 3210,
                    "source": "\n\n\t\t/**\n\t\t * The name of this symbol.\n\t\t */\n\t\tname: string;",
                    "name": "name",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 3210,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The name of the symbol containing this symbol.",
                    "isMethod": false,
                    "_": 3215,
                    "source": "\n\n\t\t/**\n\t\t * The name of the symbol containing this symbol.\n\t\t */\n\t\tcontainerName: string;",
                    "name": "containerName",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 3215,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The kind of this symbol.",
                    "isMethod": false,
                    "_": 3220,
                    "source": "\n\n\t\t/**\n\t\t * The kind of this symbol.\n\t\t */\n\t\tkind: SymbolKind;",
                    "name": "kind",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "SymbolKind",
                      "targs": [],
                      "isNullable": false,
                      "_": 3220,
                      "source": " SymbolKind"
                    }
                  },
                  {
                    "doc": "Tags for this symbol.",
                    "isMethod": false,
                    "_": 3225,
                    "source": "\n\n\t\t/**\n\t\t * Tags for this symbol.\n\t\t */\n\t\ttags?: readonly SymbolTag[];",
                    "name": "tags",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "SymbolTag",
                            "targs": [],
                            "isNullable": false,
                            "_": 3225,
                            "source": " SymbolTag"
                          }
                        ],
                        "isNullable": false,
                        "_": 3225,
                        "source": " SymbolTag[]"
                      },
                      "isNullable": false,
                      "_": 3225,
                      "source": " readonly SymbolTag[]"
                    }
                  },
                  {
                    "doc": "The location of this symbol.",
                    "isMethod": false,
                    "_": 3230,
                    "source": "\n\n\t\t/**\n\t\t * The location of this symbol.\n\t\t */\n\t\tlocation: Location;",
                    "name": "location",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Location",
                      "targs": [],
                      "isNullable": false,
                      "_": 3230,
                      "source": " Location"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 3261,
                "name": "DocumentSymbol",
                "generics": [],
                "doc": "Represents programming constructs like variables, classes, interfaces etc. that appear in a document. Document\nsymbols can be hierarchical and they have two ranges: one that encloses its definition and one that points to\nits most interesting range, e.g. the range of an identifier.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 3308,
                    "source": "\n\n\t\t/**\n\t\t * Creates a new document symbol.\n\t\t *\n\t\t * @param name The name of the symbol.\n\t\t * @param detail Details for the symbol.\n\t\t * @param kind The kind of the symbol.\n\t\t * @param range The full range of the symbol.\n\t\t * @param selectionRange The range that should be reveal.\n\t\t */\n\t\tconstructor(name: string, detail: string, kind: SymbolKind, range: Range, selectionRange: Range);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "name",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 3308,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "detail",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 3308,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "kind",
                        "type": {
                          "ref": "SymbolKind",
                          "targs": [],
                          "isNullable": false,
                          "_": 3308,
                          "source": " SymbolKind"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "range",
                        "type": {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 3308,
                          "source": " Range"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "selectionRange",
                        "type": {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 3308,
                          "source": " Range"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The name of this symbol.",
                    "isMethod": false,
                    "_": 3266,
                    "source": "\n\n\t\t/**\n\t\t * The name of this symbol.\n\t\t */\n\t\tname: string;",
                    "name": "name",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 3266,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "More detail for this symbol, e.g. the signature of a function.",
                    "isMethod": false,
                    "_": 3271,
                    "source": "\n\n\t\t/**\n\t\t * More detail for this symbol, e.g. the signature of a function.\n\t\t */\n\t\tdetail: string;",
                    "name": "detail",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 3271,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The kind of this symbol.",
                    "isMethod": false,
                    "_": 3276,
                    "source": "\n\n\t\t/**\n\t\t * The kind of this symbol.\n\t\t */\n\t\tkind: SymbolKind;",
                    "name": "kind",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "SymbolKind",
                      "targs": [],
                      "isNullable": false,
                      "_": 3276,
                      "source": " SymbolKind"
                    }
                  },
                  {
                    "doc": "Tags for this symbol.",
                    "isMethod": false,
                    "_": 3281,
                    "source": "\n\n\t\t/**\n\t\t * Tags for this symbol.\n\t\t */\n\t\ttags?: readonly SymbolTag[];",
                    "name": "tags",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "SymbolTag",
                            "targs": [],
                            "isNullable": false,
                            "_": 3281,
                            "source": " SymbolTag"
                          }
                        ],
                        "isNullable": false,
                        "_": 3281,
                        "source": " SymbolTag[]"
                      },
                      "isNullable": false,
                      "_": 3281,
                      "source": " readonly SymbolTag[]"
                    }
                  },
                  {
                    "doc": "The range enclosing this symbol not including leading/trailing whitespace but everything else, e.g. comments and code.",
                    "isMethod": false,
                    "_": 3286,
                    "source": "\n\n\t\t/**\n\t\t * The range enclosing this symbol not including leading/trailing whitespace but everything else, e.g. comments and code.\n\t\t */\n\t\trange: Range;",
                    "name": "range",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Range",
                      "targs": [],
                      "isNullable": false,
                      "_": 3286,
                      "source": " Range"
                    }
                  },
                  {
                    "doc": "The range that should be selected and reveal when this symbol is being picked, e.g. the name of a function.\n Must be contained by the {@linkcode DocumentSymbol.range range}.",
                    "isMethod": false,
                    "_": 3292,
                    "source": "\n\n\t\t/**\n\t\t * The range that should be selected and reveal when this symbol is being picked, e.g. the name of a function.\n\t\t * Must be contained by the {@linkcode DocumentSymbol.range range}.\n\t\t */\n\t\tselectionRange: Range;",
                    "name": "selectionRange",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Range",
                      "targs": [],
                      "isNullable": false,
                      "_": 3292,
                      "source": " Range"
                    }
                  },
                  {
                    "doc": "Children of this symbol, e.g. properties of a class.",
                    "isMethod": false,
                    "_": 3297,
                    "source": "\n\n\t\t/**\n\t\t * Children of this symbol, e.g. properties of a class.\n\t\t */\n\t\tchildren: DocumentSymbol[];",
                    "name": "children",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "ref": "DocumentSymbol",
                          "targs": [],
                          "isNullable": false,
                          "_": 3297,
                          "source": " DocumentSymbol"
                        }
                      ],
                      "isNullable": false,
                      "_": 3297,
                      "source": " DocumentSymbol[]"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 3315,
                "name": "DocumentSymbolProvider",
                "generics": [],
                "doc": "The document symbol provider interface defines the contract between extensions and\nthe [go to symbol](https://code.visualstudio.com/docs/editor/editingevolved#_go-to-symbol)-feature.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Provide symbol information for the given document.\n\n @param document The document in which the command was invoked.\n @param token A cancellation token.\n @return An array of document highlights or a thenable that resolves to such. The lack of a result can be\n signaled by returning `undefined`, `null`, or an empty array.",
                    "isMethod": true,
                    "_": 3325,
                    "source": "\n\n\t\t/**\n\t\t * Provide symbol information for the given document.\n\t\t *\n\t\t * @param document The document in which the command was invoked.\n\t\t * @param token A cancellation token.\n\t\t * @return An array of document highlights or a thenable that resolves to such. The lack of a result can be\n\t\t * signaled by returning `undefined`, `null`, or an empty array.\n\t\t */\n\t\tprovideDocumentSymbols(document: TextDocument, token: CancellationToken): ProviderResult<SymbolInformation[] | DocumentSymbol[]>;",
                    "name": "provideDocumentSymbols",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "document",
                        "type": {
                          "ref": "TextDocument",
                          "targs": [],
                          "isNullable": false,
                          "_": 3325,
                          "source": " TextDocument"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 3325,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "union": [
                            {
                              "core": "array",
                              "targs": [
                                {
                                  "ref": "SymbolInformation",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 3325,
                                  "source": "SymbolInformation"
                                }
                              ],
                              "isNullable": false,
                              "_": 3325,
                              "source": "SymbolInformation[]"
                            },
                            {
                              "core": "array",
                              "targs": [
                                {
                                  "ref": "DocumentSymbol",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 3325,
                                  "source": " DocumentSymbol"
                                }
                              ],
                              "isNullable": false,
                              "_": 3325,
                              "source": " DocumentSymbol[]"
                            }
                          ],
                          "isNullable": false,
                          "_": 3325,
                          "source": "SymbolInformation[] | DocumentSymbol[]"
                        }
                      ],
                      "isNullable": false,
                      "_": 3325,
                      "source": " ProviderResult<SymbolInformation[] | DocumentSymbol[]>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 3331,
                "name": "DocumentSymbolProviderMetadata",
                "generics": [],
                "doc": "Metadata about a document symbol provider.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "A human-readable string that is shown when multiple outlines trees show for one document.",
                    "isMethod": false,
                    "_": 3335,
                    "source": "\n\t\t/**\n\t\t * A human-readable string that is shown when multiple outlines trees show for one document.\n\t\t */\n\t\tlabel?: string;",
                    "name": "label",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 3335,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 3342,
                "name": "WorkspaceSymbolProvider",
                "generics": [
                  {
                    "name": "T",
                    "constraint": {
                      "ref": "SymbolInformation",
                      "targs": [],
                      "isNullable": false,
                      "_": 3342,
                      "source": " SymbolInformation"
                    },
                    "default": {
                      "ref": "SymbolInformation",
                      "targs": [],
                      "isNullable": false,
                      "_": 3342,
                      "source": " SymbolInformation"
                    },
                    "_": 3342,
                    "source": "T extends SymbolInformation = SymbolInformation"
                  }
                ],
                "doc": "The workspace symbol provider interface defines the contract between extensions and\nthe [symbol search](https://code.visualstudio.com/docs/editor/editingevolved#_open-symbol-by-name)-feature.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Project-wide search for a symbol matching the given query string.\n\n The `query`-parameter should be interpreted in a *relaxed way* as the editor will apply its own highlighting\n and scoring on the results. A good rule of thumb is to match case-insensitive and to simply check that the\n characters of *query* appear in their order in a candidate symbol. Don't use prefix, substring, or similar\n strict matching.\n\n To improve performance implementors can implement `resolveWorkspaceSymbol` and then provide symbols with partial\n {@link SymbolInformation.location location}-objects, without a `range` defined. The editor will then call\n `resolveWorkspaceSymbol` for selected symbols only, e.g. when opening a workspace symbol.\n\n @param query A query string, can be the empty string in which case all symbols should be returned.\n @param token A cancellation token.\n @return An array of document highlights or a thenable that resolves to such. The lack of a result can be\n signaled by returning `undefined`, `null`, or an empty array.",
                    "isMethod": true,
                    "_": 3361,
                    "source": "\n\n\t\t/**\n\t\t * Project-wide search for a symbol matching the given query string.\n\t\t *\n\t\t * The `query`-parameter should be interpreted in a *relaxed way* as the editor will apply its own highlighting\n\t\t * and scoring on the results. A good rule of thumb is to match case-insensitive and to simply check that the\n\t\t * characters of *query* appear in their order in a candidate symbol. Don't use prefix, substring, or similar\n\t\t * strict matching.\n\t\t *\n\t\t * To improve performance implementors can implement `resolveWorkspaceSymbol` and then provide symbols with partial\n\t\t * {@link SymbolInformation.location location}-objects, without a `range` defined. The editor will then call\n\t\t * `resolveWorkspaceSymbol` for selected symbols only, e.g. when opening a workspace symbol.\n\t\t *\n\t\t * @param query A query string, can be the empty string in which case all symbols should be returned.\n\t\t * @param token A cancellation token.\n\t\t * @return An array of document highlights or a thenable that resolves to such. The lack of a result can be\n\t\t * signaled by returning `undefined`, `null`, or an empty array.\n\t\t */\n\t\tprovideWorkspaceSymbols(query: string, token: CancellationToken): ProviderResult<T[]>;",
                    "name": "provideWorkspaceSymbols",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "query",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 3361,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 3361,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "T",
                              "targs": [],
                              "isNullable": false,
                              "_": 3361,
                              "source": "T"
                            }
                          ],
                          "isNullable": false,
                          "_": 3361,
                          "source": "T[]"
                        }
                      ],
                      "isNullable": false,
                      "_": 3361,
                      "source": " ProviderResult<T[]>"
                    }
                  },
                  {
                    "doc": "Given a symbol fill in its {@link SymbolInformation.location location}. This method is called whenever a symbol\n is selected in the UI. Providers can implement this method and return incomplete symbols from\n {@linkcode WorkspaceSymbolProvider.provideWorkspaceSymbols provideWorkspaceSymbols} which often helps to improve\n performance.\n\n @param symbol The symbol that is to be resolved. Guaranteed to be an instance of an object returned from an\n earlier call to `provideWorkspaceSymbols`.\n @param token A cancellation token.\n @return The resolved symbol or a thenable that resolves to that. When no result is returned,\n the given `symbol` is used.",
                    "isMethod": true,
                    "_": 3375,
                    "source": "\n\n\t\t/**\n\t\t * Given a symbol fill in its {@link SymbolInformation.location location}. This method is called whenever a symbol\n\t\t * is selected in the UI. Providers can implement this method and return incomplete symbols from\n\t\t * {@linkcode WorkspaceSymbolProvider.provideWorkspaceSymbols provideWorkspaceSymbols} which often helps to improve\n\t\t * performance.\n\t\t *\n\t\t * @param symbol The symbol that is to be resolved. Guaranteed to be an instance of an object returned from an\n\t\t * earlier call to `provideWorkspaceSymbols`.\n\t\t * @param token A cancellation token.\n\t\t * @return The resolved symbol or a thenable that resolves to that. When no result is returned,\n\t\t * the given `symbol` is used.\n\t\t */\n\t\tresolveWorkspaceSymbol?(symbol: T, token: CancellationToken): ProviderResult<T>;",
                    "name": "resolveWorkspaceSymbol",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "symbol",
                        "type": {
                          "ref": "T",
                          "targs": [],
                          "isNullable": false,
                          "_": 3375,
                          "source": " T"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 3375,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "ref": "T",
                          "targs": [],
                          "isNullable": false,
                          "_": 3375,
                          "source": "T"
                        }
                      ],
                      "isNullable": false,
                      "_": 3375,
                      "source": " ProviderResult<T>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 3382,
                "name": "ReferenceContext",
                "generics": [],
                "doc": "Value-object that contains additional information when\nrequesting references.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Include the declaration of the current symbol.",
                    "isMethod": false,
                    "_": 3387,
                    "source": "\n\n\t\t/**\n\t\t * Include the declaration of the current symbol.\n\t\t */\n\t\treadonly includeDeclaration: boolean;",
                    "name": "includeDeclaration",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 3387,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 3394,
                "name": "ReferenceProvider",
                "generics": [],
                "doc": "The reference provider interface defines the contract between extensions and\nthe [find references](https://code.visualstudio.com/docs/editor/editingevolved#_peek)-feature.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Provide a set of project-wide references for the given position and document.\n\n @param document The document in which the command was invoked.\n @param position The position at which the command was invoked.\n @param token A cancellation token.\n\n @return An array of locations or a thenable that resolves to such. The lack of a result can be\n signaled by returning `undefined`, `null`, or an empty array.",
                    "isMethod": true,
                    "_": 3406,
                    "source": "\n\n\t\t/**\n\t\t * Provide a set of project-wide references for the given position and document.\n\t\t *\n\t\t * @param document The document in which the command was invoked.\n\t\t * @param position The position at which the command was invoked.\n\t\t * @param token A cancellation token.\n\t\t *\n\t\t * @return An array of locations or a thenable that resolves to such. The lack of a result can be\n\t\t * signaled by returning `undefined`, `null`, or an empty array.\n\t\t */\n\t\tprovideReferences(document: TextDocument, position: Position, context: ReferenceContext, token: CancellationToken): ProviderResult<Location[]>;",
                    "name": "provideReferences",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "document",
                        "type": {
                          "ref": "TextDocument",
                          "targs": [],
                          "isNullable": false,
                          "_": 3406,
                          "source": " TextDocument"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "position",
                        "type": {
                          "ref": "Position",
                          "targs": [],
                          "isNullable": false,
                          "_": 3406,
                          "source": " Position"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "context",
                        "type": {
                          "ref": "ReferenceContext",
                          "targs": [],
                          "isNullable": false,
                          "_": 3406,
                          "source": " ReferenceContext"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 3406,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "Location",
                              "targs": [],
                              "isNullable": false,
                              "_": 3406,
                              "source": "Location"
                            }
                          ],
                          "isNullable": false,
                          "_": 3406,
                          "source": "Location[]"
                        }
                      ],
                      "isNullable": false,
                      "_": 3406,
                      "source": " ProviderResult<Location[]>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 3413,
                "name": "TextEdit",
                "generics": [],
                "doc": "A text edit represents edits that should be applied\nto a document.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 3473,
                    "source": "\n\n\t\t/**\n\t\t * Create a new TextEdit.\n\t\t *\n\t\t * @param range A range.\n\t\t * @param newText A string.\n\t\t */\n\t\tconstructor(range: Range, newText: string);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "range",
                        "type": {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 3473,
                          "source": " Range"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "newText",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 3473,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "Utility to create a replace edit.",
                    "isMethod": true,
                    "_": 3422,
                    "source": "\n\n\t\t/**\n\t\t * Utility to create a replace edit.\n\t\t *\n\t\t * @param range A range.\n\t\t * @param newText A string.\n\t\t * @return A new text edit object.\n\t\t */\n\t\tstatic replace(range: Range, newText: string): TextEdit;",
                    "name": "replace",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "range",
                        "type": {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 3422,
                          "source": " Range"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "newText",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 3422,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "TextEdit",
                      "targs": [],
                      "isNullable": false,
                      "_": 3422,
                      "source": " TextEdit"
                    }
                  },
                  {
                    "doc": "Utility to create an insert edit.",
                    "isMethod": true,
                    "_": 3431,
                    "source": "\n\n\t\t/**\n\t\t * Utility to create an insert edit.\n\t\t *\n\t\t * @param position A position, will become an empty range.\n\t\t * @param newText A string.\n\t\t * @return A new text edit object.\n\t\t */\n\t\tstatic insert(position: Position, newText: string): TextEdit;",
                    "name": "insert",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "position",
                        "type": {
                          "ref": "Position",
                          "targs": [],
                          "isNullable": false,
                          "_": 3431,
                          "source": " Position"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "newText",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 3431,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "TextEdit",
                      "targs": [],
                      "isNullable": false,
                      "_": 3431,
                      "source": " TextEdit"
                    }
                  },
                  {
                    "doc": "Utility to create a delete edit.",
                    "isMethod": true,
                    "_": 3439,
                    "source": "\n\n\t\t/**\n\t\t * Utility to create a delete edit.\n\t\t *\n\t\t * @param range A range.\n\t\t * @return A new text edit object.\n\t\t */\n\t\tstatic delete(range: Range): TextEdit;",
                    "name": "delete",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "range",
                        "type": {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 3439,
                          "source": " Range"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "TextEdit",
                      "targs": [],
                      "isNullable": false,
                      "_": 3439,
                      "source": " TextEdit"
                    }
                  },
                  {
                    "doc": "Utility to create an eol-edit.",
                    "isMethod": true,
                    "_": 3447,
                    "source": "\n\n\t\t/**\n\t\t * Utility to create an eol-edit.\n\t\t *\n\t\t * @param eol An eol-sequence\n\t\t * @return A new text edit object.\n\t\t */\n\t\tstatic setEndOfLine(eol: EndOfLine): TextEdit;",
                    "name": "setEndOfLine",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "eol",
                        "type": {
                          "ref": "EndOfLine",
                          "targs": [],
                          "isNullable": false,
                          "_": 3447,
                          "source": " EndOfLine"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "TextEdit",
                      "targs": [],
                      "isNullable": false,
                      "_": 3447,
                      "source": " TextEdit"
                    }
                  },
                  {
                    "doc": "The range this edit applies to.",
                    "isMethod": false,
                    "_": 3452,
                    "source": "\n\n\t\t/**\n\t\t * The range this edit applies to.\n\t\t */\n\t\trange: Range;",
                    "name": "range",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Range",
                      "targs": [],
                      "isNullable": false,
                      "_": 3452,
                      "source": " Range"
                    }
                  },
                  {
                    "doc": "The string this edit will insert.",
                    "isMethod": false,
                    "_": 3457,
                    "source": "\n\n\t\t/**\n\t\t * The string this edit will insert.\n\t\t */\n\t\tnewText: string;",
                    "name": "newText",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 3457,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The eol-sequence used in the document.\n\n *Note* that the eol-sequence will be applied to the\n whole document.",
                    "isMethod": false,
                    "_": 3465,
                    "source": "\n\n\t\t/**\n\t\t * The eol-sequence used in the document.\n\t\t *\n\t\t * *Note* that the eol-sequence will be applied to the\n\t\t * whole document.\n\t\t */\n\t\tnewEol?: EndOfLine;",
                    "name": "newEol",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "EndOfLine",
                      "targs": [],
                      "isNullable": false,
                      "_": 3465,
                      "source": " EndOfLine"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 3485,
                "name": "SnippetTextEdit",
                "generics": [],
                "doc": "A snippet edit represents an interactive edit that is performed by\nthe editor.\n\n*Note* that a snippet edit can always be performed as a normal {@link TextEdittext edit}.\nThis will happen when no matching editor is open or when a {@link WorkspaceEditworkspace edit}\ncontains snippet edits for multiple files. In that case only those that match the active editor\nwill be performed as snippet edits and the others as normal text edits.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 3521,
                    "source": "\n\n\t\t/**\n\t\t * Create a new snippet edit.\n\t\t *\n\t\t * @param range A range.\n\t\t * @param snippet A snippet string.\n\t\t */\n\t\tconstructor(range: Range, snippet: SnippetString);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "range",
                        "type": {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 3521,
                          "source": " Range"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "snippet",
                        "type": {
                          "ref": "SnippetString",
                          "targs": [],
                          "isNullable": false,
                          "_": 3521,
                          "source": " SnippetString"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "Utility to create a replace snippet edit.",
                    "isMethod": true,
                    "_": 3494,
                    "source": "\n\n\t\t/**\n\t\t * Utility to create a replace snippet edit.\n\t\t *\n\t\t * @param range A range.\n\t\t * @param snippet A snippet string.\n\t\t * @return A new snippet edit object.\n\t\t */\n\t\tstatic replace(range: Range, snippet: SnippetString): SnippetTextEdit;",
                    "name": "replace",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "range",
                        "type": {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 3494,
                          "source": " Range"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "snippet",
                        "type": {
                          "ref": "SnippetString",
                          "targs": [],
                          "isNullable": false,
                          "_": 3494,
                          "source": " SnippetString"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "SnippetTextEdit",
                      "targs": [],
                      "isNullable": false,
                      "_": 3494,
                      "source": " SnippetTextEdit"
                    }
                  },
                  {
                    "doc": "Utility to create an insert snippet edit.",
                    "isMethod": true,
                    "_": 3503,
                    "source": "\n\n\t\t/**\n\t\t * Utility to create an insert snippet edit.\n\t\t *\n\t\t * @param position A position, will become an empty range.\n\t\t * @param snippet A snippet string.\n\t\t * @return A new snippet edit object.\n\t\t */\n\t\tstatic insert(position: Position, snippet: SnippetString): SnippetTextEdit;",
                    "name": "insert",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "position",
                        "type": {
                          "ref": "Position",
                          "targs": [],
                          "isNullable": false,
                          "_": 3503,
                          "source": " Position"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "snippet",
                        "type": {
                          "ref": "SnippetString",
                          "targs": [],
                          "isNullable": false,
                          "_": 3503,
                          "source": " SnippetString"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "SnippetTextEdit",
                      "targs": [],
                      "isNullable": false,
                      "_": 3503,
                      "source": " SnippetTextEdit"
                    }
                  },
                  {
                    "doc": "The range this edit applies to.",
                    "isMethod": false,
                    "_": 3508,
                    "source": "\n\n\t\t/**\n\t\t * The range this edit applies to.\n\t\t */\n\t\trange: Range;",
                    "name": "range",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Range",
                      "targs": [],
                      "isNullable": false,
                      "_": 3508,
                      "source": " Range"
                    }
                  },
                  {
                    "doc": "The {@link SnippetString snippet} this edit will perform.",
                    "isMethod": false,
                    "_": 3513,
                    "source": "\n\n\t\t/**\n\t\t * The {@link SnippetString snippet} this edit will perform.\n\t\t */\n\t\tsnippet: SnippetString;",
                    "name": "snippet",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "SnippetString",
                      "targs": [],
                      "isNullable": false,
                      "_": 3513,
                      "source": " SnippetString"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline15",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "NotebookEdit",
                "source": "",
                "indexes": [
                  {
                    "key": {
                      "core": "string",
                      "isNullable": false,
                      "_": 3558,
                      "source": " string"
                    },
                    "value": {
                      "core": "any",
                      "isNullable": false,
                      "_": 3558,
                      "source": " any"
                    },
                    "doc": "",
                    "_": 3558,
                    "source": " [key: string]: any",
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false
                  }
                ],
                "ctors": [],
                "members": [],
                "calls": []
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline16",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "NotebookEdit",
                "source": "",
                "indexes": [
                  {
                    "key": {
                      "core": "string",
                      "isNullable": false,
                      "_": 3565,
                      "source": " string"
                    },
                    "value": {
                      "core": "any",
                      "isNullable": false,
                      "_": 3565,
                      "source": " any"
                    },
                    "doc": "",
                    "_": 3565,
                    "source": " [key: string]: any",
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false
                  }
                ],
                "ctors": [],
                "members": [],
                "calls": []
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline17",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "NotebookEdit",
                "source": "",
                "indexes": [
                  {
                    "key": {
                      "core": "string",
                      "isNullable": false,
                      "_": 3580,
                      "source": " string"
                    },
                    "value": {
                      "core": "any",
                      "isNullable": false,
                      "_": 3580,
                      "source": " any"
                    },
                    "doc": "",
                    "_": 3580,
                    "source": " [key: string]: any",
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false
                  }
                ],
                "ctors": [],
                "members": [],
                "calls": []
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline18",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "NotebookEdit",
                "source": "",
                "indexes": [
                  {
                    "key": {
                      "core": "string",
                      "isNullable": false,
                      "_": 3585,
                      "source": " string"
                    },
                    "value": {
                      "core": "any",
                      "isNullable": false,
                      "_": 3585,
                      "source": " any"
                    },
                    "doc": "",
                    "_": 3585,
                    "source": " [key: string]: any",
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false
                  }
                ],
                "ctors": [],
                "members": [],
                "calls": []
              },
              {
                "_": 3527,
                "name": "NotebookEdit",
                "generics": [],
                "doc": "A notebook edit represents edits that should be applied to the contents of a notebook.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 3587,
                    "source": "\n\n\t\tconstructor(range: NotebookRange, newCells: NotebookCellData[]);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "range",
                        "type": {
                          "ref": "NotebookRange",
                          "targs": [],
                          "isNullable": false,
                          "_": 3587,
                          "source": " NotebookRange"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "newCells",
                        "type": {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "NotebookCellData",
                              "targs": [],
                              "isNullable": false,
                              "_": 3587,
                              "source": " NotebookCellData"
                            }
                          ],
                          "isNullable": false,
                          "_": 3587,
                          "source": " NotebookCellData[]"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "Utility to create a edit that replaces cells in a notebook.",
                    "isMethod": true,
                    "_": 3535,
                    "source": "\n\n\t\t/**\n\t\t * Utility to create a edit that replaces cells in a notebook.\n\t\t *\n\t\t * @param range The range of cells to replace\n\t\t * @param newCells The new notebook cells.\n\t\t */\n\t\tstatic replaceCells(range: NotebookRange, newCells: NotebookCellData[]): NotebookEdit;",
                    "name": "replaceCells",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "range",
                        "type": {
                          "ref": "NotebookRange",
                          "targs": [],
                          "isNullable": false,
                          "_": 3535,
                          "source": " NotebookRange"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "newCells",
                        "type": {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "NotebookCellData",
                              "targs": [],
                              "isNullable": false,
                              "_": 3535,
                              "source": " NotebookCellData"
                            }
                          ],
                          "isNullable": false,
                          "_": 3535,
                          "source": " NotebookCellData[]"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "NotebookEdit",
                      "targs": [],
                      "isNullable": false,
                      "_": 3535,
                      "source": " NotebookEdit"
                    }
                  },
                  {
                    "doc": "Utility to create an edit that replaces cells in a notebook.",
                    "isMethod": true,
                    "_": 3543,
                    "source": "\n\n\t\t/**\n\t\t * Utility to create an edit that replaces cells in a notebook.\n\t\t *\n\t\t * @param index The index to insert cells at.\n\t\t * @param newCells The new notebook cells.\n\t\t */\n\t\tstatic insertCells(index: number, newCells: NotebookCellData[]): NotebookEdit;",
                    "name": "insertCells",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "index",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 3543,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "newCells",
                        "type": {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "NotebookCellData",
                              "targs": [],
                              "isNullable": false,
                              "_": 3543,
                              "source": " NotebookCellData"
                            }
                          ],
                          "isNullable": false,
                          "_": 3543,
                          "source": " NotebookCellData[]"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "NotebookEdit",
                      "targs": [],
                      "isNullable": false,
                      "_": 3543,
                      "source": " NotebookEdit"
                    }
                  },
                  {
                    "doc": "Utility to create an edit that deletes cells in a notebook.",
                    "isMethod": true,
                    "_": 3550,
                    "source": "\n\n\t\t/**\n\t\t * Utility to create an edit that deletes cells in a notebook.\n\t\t *\n\t\t * @param range The range of cells to delete.\n\t\t */\n\t\tstatic deleteCells(range: NotebookRange): NotebookEdit;",
                    "name": "deleteCells",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "range",
                        "type": {
                          "ref": "NotebookRange",
                          "targs": [],
                          "isNullable": false,
                          "_": 3550,
                          "source": " NotebookRange"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "NotebookEdit",
                      "targs": [],
                      "isNullable": false,
                      "_": 3550,
                      "source": " NotebookEdit"
                    }
                  },
                  {
                    "doc": "Utility to create an edit that update a cell's metadata.",
                    "isMethod": true,
                    "_": 3558,
                    "source": "\n\n\t\t/**\n\t\t * Utility to create an edit that update a cell's metadata.\n\t\t *\n\t\t * @param index The index of the cell to update.\n\t\t * @param newCellMetadata The new metadata for the cell.\n\t\t */\n\t\tstatic updateCellMetadata(index: number, newCellMetadata: { [key: string]: any }): NotebookEdit;",
                    "name": "updateCellMetadata",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "index",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 3558,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "newCellMetadata",
                        "type": {
                          "ref": "IInline15",
                          "targs": [],
                          "isNullable": false,
                          "_": 3558,
                          "source": " { [key: string]: any }"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "NotebookEdit",
                      "targs": [],
                      "isNullable": false,
                      "_": 3558,
                      "source": " NotebookEdit"
                    }
                  },
                  {
                    "doc": "Utility to create an edit that updates the notebook's metadata.",
                    "isMethod": true,
                    "_": 3565,
                    "source": "\n\n\t\t/**\n\t\t * Utility to create an edit that updates the notebook's metadata.\n\t\t *\n\t\t * @param newNotebookMetadata The new metadata for the notebook.\n\t\t */\n\t\tstatic updateNotebookMetadata(newNotebookMetadata: { [key: string]: any }): NotebookEdit;",
                    "name": "updateNotebookMetadata",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "newNotebookMetadata",
                        "type": {
                          "ref": "IInline16",
                          "targs": [],
                          "isNullable": false,
                          "_": 3565,
                          "source": " { [key: string]: any }"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "NotebookEdit",
                      "targs": [],
                      "isNullable": false,
                      "_": 3565,
                      "source": " NotebookEdit"
                    }
                  },
                  {
                    "doc": "Range of the cells being edited. May be empty.",
                    "isMethod": false,
                    "_": 3570,
                    "source": "\n\n\t\t/**\n\t\t * Range of the cells being edited. May be empty.\n\t\t */\n\t\trange: NotebookRange;",
                    "name": "range",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "NotebookRange",
                      "targs": [],
                      "isNullable": false,
                      "_": 3570,
                      "source": " NotebookRange"
                    }
                  },
                  {
                    "doc": "New cells being inserted. May be empty.",
                    "isMethod": false,
                    "_": 3575,
                    "source": "\n\n\t\t/**\n\t\t * New cells being inserted. May be empty.\n\t\t */\n\t\tnewCells: NotebookCellData[];",
                    "name": "newCells",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "ref": "NotebookCellData",
                          "targs": [],
                          "isNullable": false,
                          "_": 3575,
                          "source": " NotebookCellData"
                        }
                      ],
                      "isNullable": false,
                      "_": 3575,
                      "source": " NotebookCellData[]"
                    }
                  },
                  {
                    "doc": "Optional new metadata for the cells.",
                    "isMethod": false,
                    "_": 3580,
                    "source": "\n\n\t\t/**\n\t\t * Optional new metadata for the cells.\n\t\t */\n\t\tnewCellMetadata?: { [key: string]: any };",
                    "name": "newCellMetadata",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "IInline17",
                      "targs": [],
                      "isNullable": false,
                      "_": 3580,
                      "source": " { [key: string]: any }"
                    }
                  },
                  {
                    "doc": "Optional new metadata for the notebook.",
                    "isMethod": false,
                    "_": 3585,
                    "source": "\n\n\t\t/**\n\t\t * Optional new metadata for the notebook.\n\t\t */\n\t\tnewNotebookMetadata?: { [key: string]: any };",
                    "name": "newNotebookMetadata",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "IInline18",
                      "targs": [],
                      "isNullable": false,
                      "_": 3585,
                      "source": " { [key: string]: any }"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline19",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "WorkspaceEditEntryMetadata",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 3615,
                    "source": " light: Uri;",
                    "name": "light",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 3615,
                      "source": " Uri"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 3615,
                    "source": " dark: Uri",
                    "name": "dark",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 3615,
                      "source": " Uri"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 3595,
                "name": "WorkspaceEditEntryMetadata",
                "generics": [],
                "doc": "Additional data for entries of a workspace edit. Supports to label entries and marks entries\nas needing confirmation by the user. The editor groups edits with equal labels into tree nodes,\nfor instance all edits labelled with \"Changes in Strings\" would be a tree node.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "A flag which indicates that user confirmation is needed.",
                    "isMethod": false,
                    "_": 3600,
                    "source": "\n\n\t\t/**\n\t\t * A flag which indicates that user confirmation is needed.\n\t\t */\n\t\tneedsConfirmation: boolean;",
                    "name": "needsConfirmation",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 3600,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "A human-readable string which is rendered prominent.",
                    "isMethod": false,
                    "_": 3605,
                    "source": "\n\n\t\t/**\n\t\t * A human-readable string which is rendered prominent.\n\t\t */\n\t\tlabel: string;",
                    "name": "label",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 3605,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "A human-readable string which is rendered less prominent on the same line.",
                    "isMethod": false,
                    "_": 3610,
                    "source": "\n\n\t\t/**\n\t\t * A human-readable string which is rendered less prominent on the same line.\n\t\t */\n\t\tdescription?: string;",
                    "name": "description",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 3610,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The icon path or {@link ThemeIcon} for the edit.",
                    "isMethod": false,
                    "_": 3615,
                    "source": "\n\n\t\t/**\n\t\t * The icon path or {@link ThemeIcon} for the edit.\n\t\t */\n\t\ticonPath?: Uri | { light: Uri; dark: Uri } | ThemeIcon;",
                    "name": "iconPath",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 3615,
                          "source": " Uri"
                        },
                        {
                          "ref": "IInline19",
                          "targs": [],
                          "isNullable": false,
                          "_": 3615,
                          "source": " { light: Uri; dark: Uri }"
                        },
                        {
                          "ref": "ThemeIcon",
                          "targs": [],
                          "isNullable": false,
                          "_": 3615,
                          "source": " ThemeIcon"
                        }
                      ],
                      "isNullable": false,
                      "_": 3615,
                      "source": " Uri | { light: Uri; dark: Uri } | ThemeIcon"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 3621,
                "name": "WorkspaceEditMetadata",
                "generics": [],
                "doc": "Additional data about a workspace edit.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Signal to the editor that this edit is a refactoring.",
                    "isMethod": false,
                    "_": 3625,
                    "source": "\n\t\t/**\n\t\t * Signal to the editor that this edit is a refactoring.\n\t\t */\n\t\tisRefactoring?: boolean;",
                    "name": "isRefactoring",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 3625,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline20",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "WorkspaceEdit",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 3730,
                    "source": "\n\t\t\treadonly overwrite?: boolean;",
                    "name": "overwrite",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 3730,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 3731,
                    "source": "\n\t\t\treadonly ignoreIfExists?: boolean;",
                    "name": "ignoreIfExists",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 3731,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "The initial contents of the new file.\n\nIf creating a file from a {@link DocumentDropEditProviderdrop operation}, you can\npass in a {@link DataTransferFile} to improve performance by avoiding extra data copying.",
                    "isMethod": false,
                    "_": 3739,
                    "source": "\n\n\t\t\t/**\n\t\t\t * The initial contents of the new file.\n\t\t\t *\n\t\t\t * If creating a file from a {@link DocumentDropEditProvider drop operation}, you can\n\t\t\t * pass in a {@link DataTransferFile} to improve performance by avoiding extra data copying.\n\t\t\t */\n\t\t\treadonly contents?: Uint8Array | DataTransferFile;",
                    "name": "contents",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "Uint8Array",
                          "targs": [],
                          "isNullable": false,
                          "_": 3739,
                          "source": " Uint8Array"
                        },
                        {
                          "ref": "DataTransferFile",
                          "targs": [],
                          "isNullable": false,
                          "_": 3739,
                          "source": " DataTransferFile"
                        }
                      ],
                      "isNullable": false,
                      "_": 3739,
                      "source": " Uint8Array | DataTransferFile"
                    }
                  }
                ],
                "calls": []
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline21",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "WorkspaceEdit",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 3748,
                    "source": " readonly recursive?: boolean;",
                    "name": "recursive",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 3748,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 3748,
                    "source": " readonly ignoreIfNotExists?: boolean",
                    "name": "ignoreIfNotExists",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 3748,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": []
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline22",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "WorkspaceEdit",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 3759,
                    "source": " readonly overwrite?: boolean;",
                    "name": "overwrite",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 3759,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 3759,
                    "source": " readonly ignoreIfExists?: boolean",
                    "name": "ignoreIfExists",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 3759,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 3634,
                "name": "WorkspaceEdit",
                "generics": [],
                "doc": "A workspace edit is a collection of textual and files changes for\nmultiple resources and documents.\n\nUse the {@link workspace.applyEditapplyEdit}-function to apply a workspace edit.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The number of affected resources of textual or resource changes.",
                    "isMethod": false,
                    "_": 3639,
                    "source": "\n\n\t\t/**\n\t\t * The number of affected resources of textual or resource changes.\n\t\t */\n\t\treadonly size: number;",
                    "name": "size",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 3639,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "Replace the given range with given text for the given resource.\n\n @param uri A resource identifier.\n @param range A range.\n @param newText A string.\n @param metadata Optional metadata for the entry.",
                    "isMethod": true,
                    "_": 3649,
                    "source": "\n\n\t\t/**\n\t\t * Replace the given range with given text for the given resource.\n\t\t *\n\t\t * @param uri A resource identifier.\n\t\t * @param range A range.\n\t\t * @param newText A string.\n\t\t * @param metadata Optional metadata for the entry.\n\t\t */\n\t\treplace(uri: Uri, range: Range, newText: string, metadata?: WorkspaceEditEntryMetadata): void;",
                    "name": "replace",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "uri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 3649,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "range",
                        "type": {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 3649,
                          "source": " Range"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "newText",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 3649,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "metadata",
                        "type": {
                          "ref": "WorkspaceEditEntryMetadata",
                          "targs": [],
                          "isNullable": false,
                          "_": 3649,
                          "source": " WorkspaceEditEntryMetadata"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 3649,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Insert the given text at the given position.\n\n @param uri A resource identifier.\n @param position A position.\n @param newText A string.\n @param metadata Optional metadata for the entry.",
                    "isMethod": true,
                    "_": 3659,
                    "source": "\n\n\t\t/**\n\t\t * Insert the given text at the given position.\n\t\t *\n\t\t * @param uri A resource identifier.\n\t\t * @param position A position.\n\t\t * @param newText A string.\n\t\t * @param metadata Optional metadata for the entry.\n\t\t */\n\t\tinsert(uri: Uri, position: Position, newText: string, metadata?: WorkspaceEditEntryMetadata): void;",
                    "name": "insert",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "uri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 3659,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "position",
                        "type": {
                          "ref": "Position",
                          "targs": [],
                          "isNullable": false,
                          "_": 3659,
                          "source": " Position"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "newText",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 3659,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "metadata",
                        "type": {
                          "ref": "WorkspaceEditEntryMetadata",
                          "targs": [],
                          "isNullable": false,
                          "_": 3659,
                          "source": " WorkspaceEditEntryMetadata"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 3659,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Delete the text at the given range.\n\n @param uri A resource identifier.\n @param range A range.\n @param metadata Optional metadata for the entry.",
                    "isMethod": true,
                    "_": 3668,
                    "source": "\n\n\t\t/**\n\t\t * Delete the text at the given range.\n\t\t *\n\t\t * @param uri A resource identifier.\n\t\t * @param range A range.\n\t\t * @param metadata Optional metadata for the entry.\n\t\t */\n\t\tdelete(uri: Uri, range: Range, metadata?: WorkspaceEditEntryMetadata): void;",
                    "name": "delete",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "uri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 3668,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "range",
                        "type": {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 3668,
                          "source": " Range"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "metadata",
                        "type": {
                          "ref": "WorkspaceEditEntryMetadata",
                          "targs": [],
                          "isNullable": false,
                          "_": 3668,
                          "source": " WorkspaceEditEntryMetadata"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 3668,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Check if a text edit for a resource exists.\n\n @param uri A resource identifier.\n @return `true` if the given resource will be touched by this edit.",
                    "isMethod": true,
                    "_": 3676,
                    "source": "\n\n\t\t/**\n\t\t * Check if a text edit for a resource exists.\n\t\t *\n\t\t * @param uri A resource identifier.\n\t\t * @return `true` if the given resource will be touched by this edit.\n\t\t */\n\t\thas(uri: Uri): boolean;",
                    "name": "has",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "uri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 3676,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 3676,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Set (and replace) text edits or snippet edits for a resource.\n\n @param uri A resource identifier.\n @param edits An array of edits.",
                    "isMethod": true,
                    "_": 3684,
                    "source": "\n\n\t\t/**\n\t\t * Set (and replace) text edits or snippet edits for a resource.\n\t\t *\n\t\t * @param uri A resource identifier.\n\t\t * @param edits An array of edits.\n\t\t */\n\t\tset(uri: Uri, edits: ReadonlyArray<TextEdit | SnippetTextEdit>): void;",
                    "name": "set",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "uri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 3684,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "edits",
                        "type": {
                          "ref": "ReadonlyArray",
                          "targs": [
                            {
                              "union": [
                                {
                                  "ref": "TextEdit",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 3684,
                                  "source": "TextEdit"
                                },
                                {
                                  "ref": "SnippetTextEdit",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 3684,
                                  "source": " SnippetTextEdit"
                                }
                              ],
                              "isNullable": false,
                              "_": 3684,
                              "source": "TextEdit | SnippetTextEdit"
                            }
                          ],
                          "isNullable": false,
                          "_": 3684,
                          "source": " ReadonlyArray<TextEdit | SnippetTextEdit>"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 3684,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Set (and replace) text edits or snippet edits with metadata for a resource.\n\n @param uri A resource identifier.\n @param edits An array of edits.",
                    "isMethod": true,
                    "_": 3692,
                    "source": "\n\n\t\t/**\n\t\t * Set (and replace) text edits or snippet edits with metadata for a resource.\n\t\t *\n\t\t * @param uri A resource identifier.\n\t\t * @param edits An array of edits.\n\t\t */\n\t\tset(uri: Uri, edits: ReadonlyArray<[TextEdit | SnippetTextEdit, WorkspaceEditEntryMetadata]>): void;",
                    "name": "set",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "uri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 3692,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "edits",
                        "type": {
                          "ref": "ReadonlyArray",
                          "targs": [
                            {
                              "tuple": [
                                {
                                  "union": [
                                    {
                                      "ref": "TextEdit",
                                      "targs": [],
                                      "isNullable": false,
                                      "_": 3692,
                                      "source": "TextEdit"
                                    },
                                    {
                                      "ref": "SnippetTextEdit",
                                      "targs": [],
                                      "isNullable": false,
                                      "_": 3692,
                                      "source": " SnippetTextEdit"
                                    }
                                  ],
                                  "isNullable": false,
                                  "_": 3692,
                                  "source": "TextEdit | SnippetTextEdit"
                                },
                                {
                                  "ref": "WorkspaceEditEntryMetadata",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 3692,
                                  "source": " WorkspaceEditEntryMetadata"
                                }
                              ],
                              "isNullable": false,
                              "_": 3692,
                              "source": "[TextEdit | SnippetTextEdit, WorkspaceEditEntryMetadata]"
                            }
                          ],
                          "isNullable": false,
                          "_": 3692,
                          "source": " ReadonlyArray<[TextEdit | SnippetTextEdit, WorkspaceEditEntryMetadata]>"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 3692,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Set (and replace) notebook edits for a resource.\n\n @param uri A resource identifier.\n @param edits An array of edits.",
                    "isMethod": true,
                    "_": 3700,
                    "source": "\n\n\t\t/**\n\t\t * Set (and replace) notebook edits for a resource.\n\t\t *\n\t\t * @param uri A resource identifier.\n\t\t * @param edits An array of edits.\n\t\t */\n\t\tset(uri: Uri, edits: readonly NotebookEdit[]): void;",
                    "name": "set",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "uri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 3700,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "edits",
                        "type": {
                          "operator": 146,
                          "type": {
                            "core": "array",
                            "targs": [
                              {
                                "ref": "NotebookEdit",
                                "targs": [],
                                "isNullable": false,
                                "_": 3700,
                                "source": " NotebookEdit"
                              }
                            ],
                            "isNullable": false,
                            "_": 3700,
                            "source": " NotebookEdit[]"
                          },
                          "isNullable": false,
                          "_": 3700,
                          "source": " readonly NotebookEdit[]"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 3700,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Set (and replace) notebook edits with metadata for a resource.\n\n @param uri A resource identifier.\n @param edits An array of edits.",
                    "isMethod": true,
                    "_": 3708,
                    "source": "\n\n\t\t/**\n\t\t * Set (and replace) notebook edits with metadata for a resource.\n\t\t *\n\t\t * @param uri A resource identifier.\n\t\t * @param edits An array of edits.\n\t\t */\n\t\tset(uri: Uri, edits: ReadonlyArray<[NotebookEdit, WorkspaceEditEntryMetadata]>): void;",
                    "name": "set",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "uri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 3708,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "edits",
                        "type": {
                          "ref": "ReadonlyArray",
                          "targs": [
                            {
                              "tuple": [
                                {
                                  "ref": "NotebookEdit",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 3708,
                                  "source": "NotebookEdit"
                                },
                                {
                                  "ref": "WorkspaceEditEntryMetadata",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 3708,
                                  "source": " WorkspaceEditEntryMetadata"
                                }
                              ],
                              "isNullable": false,
                              "_": 3708,
                              "source": "[NotebookEdit, WorkspaceEditEntryMetadata]"
                            }
                          ],
                          "isNullable": false,
                          "_": 3708,
                          "source": " ReadonlyArray<[NotebookEdit, WorkspaceEditEntryMetadata]>"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 3708,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Get the text edits for a resource.\n\n @param uri A resource identifier.\n @return An array of text edits.",
                    "isMethod": true,
                    "_": 3716,
                    "source": "\n\n\t\t/**\n\t\t * Get the text edits for a resource.\n\t\t *\n\t\t * @param uri A resource identifier.\n\t\t * @return An array of text edits.\n\t\t */\n\t\tget(uri: Uri): TextEdit[];",
                    "name": "get",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "uri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 3716,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "ref": "TextEdit",
                          "targs": [],
                          "isNullable": false,
                          "_": 3716,
                          "source": " TextEdit"
                        }
                      ],
                      "isNullable": false,
                      "_": 3716,
                      "source": " TextEdit[]"
                    }
                  },
                  {
                    "doc": "Create a regular file.\n\n @param uri Uri of the new file.\n @param options Defines if an existing file should be overwritten or be\n ignored. When `overwrite` and `ignoreIfExists` are both set `overwrite` wins.\n When both are unset and when the file already exists then the edit cannot\n be applied successfully. The `content`-property allows to set the initial contents\n the file is being created with.\n @param metadata Optional metadata for the entry.",
                    "isMethod": true,
                    "_": 3729,
                    "source": "\n\n\t\t/**\n\t\t * Create a regular file.\n\t\t *\n\t\t * @param uri Uri of the new file.\n\t\t * @param options Defines if an existing file should be overwritten or be\n\t\t * ignored. When `overwrite` and `ignoreIfExists` are both set `overwrite` wins.\n\t\t * When both are unset and when the file already exists then the edit cannot\n\t\t * be applied successfully. The `content`-property allows to set the initial contents\n\t\t * the file is being created with.\n\t\t * @param metadata Optional metadata for the entry.\n\t\t */\n\t\tcreateFile(uri: Uri, options?: {\n\t\t\treadonly overwrite?: boolean;\n\t\t\treadonly ignoreIfExists?: boolean;\n\n\t\t\t/**\n\t\t\t * The initial contents of the new file.\n\t\t\t *\n\t\t\t * If creating a file from a {@link DocumentDropEditProvider drop operation}, you can\n\t\t\t * pass in a {@link DataTransferFile} to improve performance by avoiding extra data copying.\n\t\t\t */\n\t\t\treadonly contents?: Uint8Array | DataTransferFile;\n\t\t}, metadata?: WorkspaceEditEntryMetadata): void;",
                    "name": "createFile",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "uri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 3729,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "options",
                        "type": {
                          "ref": "IInline20",
                          "targs": [],
                          "isNullable": false,
                          "_": 3729,
                          "source": " {\n\t\t\treadonly overwrite?: boolean;\n\t\t\treadonly ignoreIfExists?: boolean;\n\n\t\t\t/**\n\t\t\t * The initial contents of the new file.\n\t\t\t *\n\t\t\t * If creating a file from a {@link DocumentDropEditProvider drop operation}, you can\n\t\t\t * pass in a {@link DataTransferFile} to improve performance by avoiding extra data copying.\n\t\t\t */\n\t\t\treadonly contents?: Uint8Array | DataTransferFile;\n\t\t}"
                        },
                        "varargs": false,
                        "isNullable": true
                      },
                      {
                        "name": "metadata",
                        "type": {
                          "ref": "WorkspaceEditEntryMetadata",
                          "targs": [],
                          "isNullable": false,
                          "_": 3740,
                          "source": " WorkspaceEditEntryMetadata"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 3740,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Delete a file or folder.\n\n @param uri The uri of the file that is to be deleted.\n @param metadata Optional metadata for the entry.",
                    "isMethod": true,
                    "_": 3748,
                    "source": "\n\n\t\t/**\n\t\t * Delete a file or folder.\n\t\t *\n\t\t * @param uri The uri of the file that is to be deleted.\n\t\t * @param metadata Optional metadata for the entry.\n\t\t */\n\t\tdeleteFile(uri: Uri, options?: { readonly recursive?: boolean; readonly ignoreIfNotExists?: boolean }, metadata?: WorkspaceEditEntryMetadata): void;",
                    "name": "deleteFile",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "uri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 3748,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "options",
                        "type": {
                          "ref": "IInline21",
                          "targs": [],
                          "isNullable": false,
                          "_": 3748,
                          "source": " { readonly recursive?: boolean; readonly ignoreIfNotExists?: boolean }"
                        },
                        "varargs": false,
                        "isNullable": true
                      },
                      {
                        "name": "metadata",
                        "type": {
                          "ref": "WorkspaceEditEntryMetadata",
                          "targs": [],
                          "isNullable": false,
                          "_": 3748,
                          "source": " WorkspaceEditEntryMetadata"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 3748,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Rename a file or folder.\n\n @param oldUri The existing file.\n @param newUri The new location.\n @param options Defines if existing files should be overwritten or be\n ignored. When overwrite and ignoreIfExists are both set overwrite wins.\n @param metadata Optional metadata for the entry.",
                    "isMethod": true,
                    "_": 3759,
                    "source": "\n\n\t\t/**\n\t\t * Rename a file or folder.\n\t\t *\n\t\t * @param oldUri The existing file.\n\t\t * @param newUri The new location.\n\t\t * @param options Defines if existing files should be overwritten or be\n\t\t * ignored. When overwrite and ignoreIfExists are both set overwrite wins.\n\t\t * @param metadata Optional metadata for the entry.\n\t\t */\n\t\trenameFile(oldUri: Uri, newUri: Uri, options?: { readonly overwrite?: boolean; readonly ignoreIfExists?: boolean }, metadata?: WorkspaceEditEntryMetadata): void;",
                    "name": "renameFile",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "oldUri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 3759,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "newUri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 3759,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "options",
                        "type": {
                          "ref": "IInline22",
                          "targs": [],
                          "isNullable": false,
                          "_": 3759,
                          "source": " { readonly overwrite?: boolean; readonly ignoreIfExists?: boolean }"
                        },
                        "varargs": false,
                        "isNullable": true
                      },
                      {
                        "name": "metadata",
                        "type": {
                          "ref": "WorkspaceEditEntryMetadata",
                          "targs": [],
                          "isNullable": false,
                          "_": 3759,
                          "source": " WorkspaceEditEntryMetadata"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 3759,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Get all text edits grouped by resource.\n\n @return A shallow copy of `[Uri, TextEdit[]]`-tuples.",
                    "isMethod": true,
                    "_": 3766,
                    "source": "\n\n\t\t/**\n\t\t * Get all text edits grouped by resource.\n\t\t *\n\t\t * @return A shallow copy of `[Uri, TextEdit[]]`-tuples.\n\t\t */\n\t\tentries(): [Uri, TextEdit[]][];",
                    "name": "entries",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "tuple": [
                            {
                              "ref": "Uri",
                              "targs": [],
                              "isNullable": false,
                              "_": 3766,
                              "source": "Uri"
                            },
                            {
                              "core": "array",
                              "targs": [
                                {
                                  "ref": "TextEdit",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 3766,
                                  "source": " TextEdit"
                                }
                              ],
                              "isNullable": false,
                              "_": 3766,
                              "source": " TextEdit[]"
                            }
                          ],
                          "isNullable": false,
                          "_": 3766,
                          "source": " [Uri, TextEdit[]]"
                        }
                      ],
                      "isNullable": false,
                      "_": 3766,
                      "source": " [Uri, TextEdit[]][]"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 3779,
                "name": "SnippetString",
                "generics": [],
                "doc": "A snippet string is a template which allows to insert text\nand to control the editor cursor when insertion happens.\n\nA snippet can define tab stops and placeholders with `$1`, `$2`\nand `${3:foo}`. `$0` defines the final tab stop, it defaults to\nthe end of the snippet. Variables are defined with `$name` and\n`${name:default value}`. Also see\n[the full snippet syntax](https://code.visualstudio.com/docs/editor/userdefinedsnippets#_creating-your-own-snippets).",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 3786,
                    "source": "\n\n\t\tconstructor(value?: string);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "value",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 3786,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The snippet string.",
                    "isMethod": false,
                    "_": 3784,
                    "source": "\n\n\t\t/**\n\t\t * The snippet string.\n\t\t */\n\t\tvalue: string;",
                    "name": "value",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 3784,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Builder-function that appends the given string to\n the {@linkcode SnippetString.value value} of this snippet string.\n\n @param string A value to append 'as given'. The string will be escaped.\n @return This snippet string.",
                    "isMethod": true,
                    "_": 3795,
                    "source": "\n\n\t\t/**\n\t\t * Builder-function that appends the given string to\n\t\t * the {@linkcode SnippetString.value value} of this snippet string.\n\t\t *\n\t\t * @param string A value to append 'as given'. The string will be escaped.\n\t\t * @return This snippet string.\n\t\t */\n\t\tappendText(string: string): SnippetString;",
                    "name": "appendText",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "string",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 3795,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "SnippetString",
                      "targs": [],
                      "isNullable": false,
                      "_": 3795,
                      "source": " SnippetString"
                    }
                  },
                  {
                    "doc": "Builder-function that appends a tabstop (`$1`, `$2` etc) to\n the {@linkcode SnippetString.value value} of this snippet string.\n\n @param number The number of this tabstop, defaults to an auto-increment\n value starting at 1.\n @return This snippet string.",
                    "isMethod": true,
                    "_": 3805,
                    "source": "\n\n\t\t/**\n\t\t * Builder-function that appends a tabstop (`$1`, `$2` etc) to\n\t\t * the {@linkcode SnippetString.value value} of this snippet string.\n\t\t *\n\t\t * @param number The number of this tabstop, defaults to an auto-increment\n\t\t * value starting at 1.\n\t\t * @return This snippet string.\n\t\t */\n\t\tappendTabstop(number?: number): SnippetString;",
                    "name": "appendTabstop",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "number",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 3805,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "SnippetString",
                      "targs": [],
                      "isNullable": false,
                      "_": 3805,
                      "source": " SnippetString"
                    }
                  },
                  {
                    "doc": "Builder-function that appends a placeholder (`${1:value}`) to\n the {@linkcode SnippetString.value value} of this snippet string.\n\n @param value The value of this placeholder - either a string or a function\n with which a nested snippet can be created.\n @param number The number of this tabstop, defaults to an auto-increment\n value starting at 1.\n @return This snippet string.",
                    "isMethod": true,
                    "_": 3817,
                    "source": "\n\n\t\t/**\n\t\t * Builder-function that appends a placeholder (`${1:value}`) to\n\t\t * the {@linkcode SnippetString.value value} of this snippet string.\n\t\t *\n\t\t * @param value The value of this placeholder - either a string or a function\n\t\t * with which a nested snippet can be created.\n\t\t * @param number The number of this tabstop, defaults to an auto-increment\n\t\t * value starting at 1.\n\t\t * @return This snippet string.\n\t\t */\n\t\tappendPlaceholder(value: string | ((snippet: SnippetString) => any), number?: number): SnippetString;",
                    "name": "appendPlaceholder",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "value",
                        "type": {
                          "union": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 3817,
                              "source": " string"
                            },
                            {
                              "ctor": false,
                              "generics": [],
                              "returns": {
                                "core": "any",
                                "isNullable": false,
                                "_": 3817,
                                "source": " any"
                              },
                              "params": [
                                {
                                  "name": "snippet",
                                  "type": {
                                    "ref": "SnippetString",
                                    "targs": [],
                                    "isNullable": false,
                                    "_": 3817,
                                    "source": " SnippetString"
                                  },
                                  "varargs": false,
                                  "isNullable": false
                                }
                              ],
                              "isNullable": false,
                              "_": 3817,
                              "source": " ((snippet: SnippetString) => any)"
                            }
                          ],
                          "isNullable": false,
                          "_": 3817,
                          "source": " string | ((snippet: SnippetString) => any)"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "number",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 3817,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "SnippetString",
                      "targs": [],
                      "isNullable": false,
                      "_": 3817,
                      "source": " SnippetString"
                    }
                  },
                  {
                    "doc": "Builder-function that appends a choice (`${1|a,b,c|}`) to\n the {@linkcode SnippetString.value value} of this snippet string.\n\n @param values The values for choices - the array of strings\n @param number The number of this tabstop, defaults to an auto-increment\n value starting at 1.\n @return This snippet string.",
                    "isMethod": true,
                    "_": 3828,
                    "source": "\n\n\t\t/**\n\t\t * Builder-function that appends a choice (`${1|a,b,c|}`) to\n\t\t * the {@linkcode SnippetString.value value} of this snippet string.\n\t\t *\n\t\t * @param values The values for choices - the array of strings\n\t\t * @param number The number of this tabstop, defaults to an auto-increment\n\t\t * value starting at 1.\n\t\t * @return This snippet string.\n\t\t */\n\t\tappendChoice(values: readonly string[], number?: number): SnippetString;",
                    "name": "appendChoice",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "values",
                        "type": {
                          "operator": 146,
                          "type": {
                            "core": "array",
                            "targs": [
                              {
                                "core": "string",
                                "isNullable": false,
                                "_": 3828,
                                "source": " string"
                              }
                            ],
                            "isNullable": false,
                            "_": 3828,
                            "source": " string[]"
                          },
                          "isNullable": false,
                          "_": 3828,
                          "source": " readonly string[]"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "number",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 3828,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "SnippetString",
                      "targs": [],
                      "isNullable": false,
                      "_": 3828,
                      "source": " SnippetString"
                    }
                  },
                  {
                    "doc": "Builder-function that appends a variable (`${VAR}`) to\n the {@linkcode SnippetString.value value} of this snippet string.\n\n @param name The name of the variable - excluding the `$`.\n @param defaultValue The default value which is used when the variable name cannot\n be resolved - either a string or a function with which a nested snippet can be created.\n @return This snippet string.",
                    "isMethod": true,
                    "_": 3839,
                    "source": "\n\n\t\t/**\n\t\t * Builder-function that appends a variable (`${VAR}`) to\n\t\t * the {@linkcode SnippetString.value value} of this snippet string.\n\t\t *\n\t\t * @param name The name of the variable - excluding the `$`.\n\t\t * @param defaultValue The default value which is used when the variable name cannot\n\t\t * be resolved - either a string or a function with which a nested snippet can be created.\n\t\t * @return This snippet string.\n\t\t */\n\t\tappendVariable(name: string, defaultValue: string | ((snippet: SnippetString) => any)): SnippetString;",
                    "name": "appendVariable",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "name",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 3839,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "defaultValue",
                        "type": {
                          "union": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 3839,
                              "source": " string"
                            },
                            {
                              "ctor": false,
                              "generics": [],
                              "returns": {
                                "core": "any",
                                "isNullable": false,
                                "_": 3839,
                                "source": " any"
                              },
                              "params": [
                                {
                                  "name": "snippet",
                                  "type": {
                                    "ref": "SnippetString",
                                    "targs": [],
                                    "isNullable": false,
                                    "_": 3839,
                                    "source": " SnippetString"
                                  },
                                  "varargs": false,
                                  "isNullable": false
                                }
                              ],
                              "isNullable": false,
                              "_": 3839,
                              "source": " ((snippet: SnippetString) => any)"
                            }
                          ],
                          "isNullable": false,
                          "_": 3839,
                          "source": " string | ((snippet: SnippetString) => any)"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "SnippetString",
                      "targs": [],
                      "isNullable": false,
                      "_": 3839,
                      "source": " SnippetString"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline23",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "RenameProvider",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 3874,
                    "source": " range: Range;",
                    "name": "range",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Range",
                      "targs": [],
                      "isNullable": false,
                      "_": 3874,
                      "source": " Range"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 3874,
                    "source": " placeholder: string",
                    "name": "placeholder",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 3874,
                      "source": " string"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 3846,
                "name": "RenameProvider",
                "generics": [],
                "doc": "The rename provider interface defines the contract between extensions and\nthe [rename](https://code.visualstudio.com/docs/editor/editingevolved#_rename-symbol)-feature.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Provide an edit that describes changes that have to be made to one\n or many resources to rename a symbol to a different name.\n\n @param document The document in which the command was invoked.\n @param position The position at which the command was invoked.\n @param newName The new name of the symbol. If the given name is not valid, the provider must return a rejected promise.\n @param token A cancellation token.\n @return A workspace edit or a thenable that resolves to such. The lack of a result can be\n signaled by returning `undefined` or `null`.",
                    "isMethod": true,
                    "_": 3859,
                    "source": "\n\n\t\t/**\n\t\t * Provide an edit that describes changes that have to be made to one\n\t\t * or many resources to rename a symbol to a different name.\n\t\t *\n\t\t * @param document The document in which the command was invoked.\n\t\t * @param position The position at which the command was invoked.\n\t\t * @param newName The new name of the symbol. If the given name is not valid, the provider must return a rejected promise.\n\t\t * @param token A cancellation token.\n\t\t * @return A workspace edit or a thenable that resolves to such. The lack of a result can be\n\t\t * signaled by returning `undefined` or `null`.\n\t\t */\n\t\tprovideRenameEdits(document: TextDocument, position: Position, newName: string, token: CancellationToken): ProviderResult<WorkspaceEdit>;",
                    "name": "provideRenameEdits",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "document",
                        "type": {
                          "ref": "TextDocument",
                          "targs": [],
                          "isNullable": false,
                          "_": 3859,
                          "source": " TextDocument"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "position",
                        "type": {
                          "ref": "Position",
                          "targs": [],
                          "isNullable": false,
                          "_": 3859,
                          "source": " Position"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "newName",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 3859,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 3859,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "ref": "WorkspaceEdit",
                          "targs": [],
                          "isNullable": false,
                          "_": 3859,
                          "source": "WorkspaceEdit"
                        }
                      ],
                      "isNullable": false,
                      "_": 3859,
                      "source": " ProviderResult<WorkspaceEdit>"
                    }
                  },
                  {
                    "doc": "Optional function for resolving and validating a position *before* running rename. The result can\n be a range or a range and a placeholder text. The placeholder text should be the identifier of the symbol\n which is being renamed - when omitted the text in the returned range is used.\n\n *Note:* This function should throw an error or return a rejected thenable when the provided location\n doesn't allow for a rename.\n\n @param document The document in which rename will be invoked.\n @param position The position at which rename will be invoked.\n @param token A cancellation token.\n @return The range or range and placeholder text of the identifier that is to be renamed. The lack of a result can signaled by returning `undefined` or `null`.",
                    "isMethod": true,
                    "_": 3874,
                    "source": "\n\n\t\t/**\n\t\t * Optional function for resolving and validating a position *before* running rename. The result can\n\t\t * be a range or a range and a placeholder text. The placeholder text should be the identifier of the symbol\n\t\t * which is being renamed - when omitted the text in the returned range is used.\n\t\t *\n\t\t * *Note:* This function should throw an error or return a rejected thenable when the provided location\n\t\t * doesn't allow for a rename.\n\t\t *\n\t\t * @param document The document in which rename will be invoked.\n\t\t * @param position The position at which rename will be invoked.\n\t\t * @param token A cancellation token.\n\t\t * @return The range or range and placeholder text of the identifier that is to be renamed. The lack of a result can signaled by returning `undefined` or `null`.\n\t\t */\n\t\tprepareRename?(document: TextDocument, position: Position, token: CancellationToken): ProviderResult<Range | { range: Range; placeholder: string }>;",
                    "name": "prepareRename",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "document",
                        "type": {
                          "ref": "TextDocument",
                          "targs": [],
                          "isNullable": false,
                          "_": 3874,
                          "source": " TextDocument"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "position",
                        "type": {
                          "ref": "Position",
                          "targs": [],
                          "isNullable": false,
                          "_": 3874,
                          "source": " Position"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 3874,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "union": [
                            {
                              "ref": "Range",
                              "targs": [],
                              "isNullable": false,
                              "_": 3874,
                              "source": "Range"
                            },
                            {
                              "ref": "IInline23",
                              "targs": [],
                              "isNullable": false,
                              "_": 3874,
                              "source": " { range: Range; placeholder: string }"
                            }
                          ],
                          "isNullable": false,
                          "_": 3874,
                          "source": "Range | { range: Range; placeholder: string }"
                        }
                      ],
                      "isNullable": false,
                      "_": 3874,
                      "source": " ProviderResult<Range | { range: Range; placeholder: string }>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 3881,
                "name": "SemanticTokensLegend",
                "generics": [],
                "doc": "A semantic tokens legend contains the needed information to decipher\nthe integer encoded representation of semantic tokens.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 3891,
                    "source": "\n\n\t\tconstructor(tokenTypes: string[], tokenModifiers?: string[]);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "tokenTypes",
                        "type": {
                          "core": "array",
                          "targs": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 3891,
                              "source": " string"
                            }
                          ],
                          "isNullable": false,
                          "_": 3891,
                          "source": " string[]"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "tokenModifiers",
                        "type": {
                          "core": "array",
                          "targs": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 3891,
                              "source": " string"
                            }
                          ],
                          "isNullable": false,
                          "_": 3891,
                          "source": " string[]"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The possible token types.",
                    "isMethod": false,
                    "_": 3885,
                    "source": "\n\t\t/**\n\t\t * The possible token types.\n\t\t */\n\t\treadonly tokenTypes: string[];",
                    "name": "tokenTypes",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 3885,
                          "source": " string"
                        }
                      ],
                      "isNullable": false,
                      "_": 3885,
                      "source": " string[]"
                    }
                  },
                  {
                    "doc": "The possible token modifiers.",
                    "isMethod": false,
                    "_": 3889,
                    "source": "\n\t\t/**\n\t\t * The possible token modifiers.\n\t\t */\n\t\treadonly tokenModifiers: string[];",
                    "name": "tokenModifiers",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 3889,
                          "source": " string"
                        }
                      ],
                      "isNullable": false,
                      "_": 3889,
                      "source": " string[]"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 3898,
                "name": "SemanticTokensBuilder",
                "generics": [],
                "doc": "A semantic tokens builder can help with creating a `SemanticTokens` instance\nwhich contains delta encoded semantic tokens.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 3900,
                    "source": "\n\n\t\tconstructor(legend?: SemanticTokensLegend);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "legend",
                        "type": {
                          "ref": "SemanticTokensLegend",
                          "targs": [],
                          "isNullable": false,
                          "_": 3900,
                          "source": " SemanticTokensLegend"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "Add another token.\n\n @param line The token start line number (absolute value).\n @param char The token start character (absolute value).\n @param length The token length in characters.\n @param tokenType The encoded token type.\n @param tokenModifiers The encoded token modifiers.",
                    "isMethod": true,
                    "_": 3911,
                    "source": "\n\n\t\t/**\n\t\t * Add another token.\n\t\t *\n\t\t * @param line The token start line number (absolute value).\n\t\t * @param char The token start character (absolute value).\n\t\t * @param length The token length in characters.\n\t\t * @param tokenType The encoded token type.\n\t\t * @param tokenModifiers The encoded token modifiers.\n\t\t */\n\t\tpush(line: number, char: number, length: number, tokenType: number, tokenModifiers?: number): void;",
                    "name": "push",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "line",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 3911,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "char",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 3911,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "length",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 3911,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "tokenType",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 3911,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "tokenModifiers",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 3911,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 3911,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Add another token. Use only when providing a legend.\n\n @param range The range of the token. Must be single-line.\n @param tokenType The token type.\n @param tokenModifiers The token modifiers.",
                    "isMethod": true,
                    "_": 3920,
                    "source": "\n\n\t\t/**\n\t\t * Add another token. Use only when providing a legend.\n\t\t *\n\t\t * @param range The range of the token. Must be single-line.\n\t\t * @param tokenType The token type.\n\t\t * @param tokenModifiers The token modifiers.\n\t\t */\n\t\tpush(range: Range, tokenType: string, tokenModifiers?: readonly string[]): void;",
                    "name": "push",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "range",
                        "type": {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 3920,
                          "source": " Range"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "tokenType",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 3920,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "tokenModifiers",
                        "type": {
                          "operator": 146,
                          "type": {
                            "core": "array",
                            "targs": [
                              {
                                "core": "string",
                                "isNullable": false,
                                "_": 3920,
                                "source": " string"
                              }
                            ],
                            "isNullable": false,
                            "_": 3920,
                            "source": " string[]"
                          },
                          "isNullable": false,
                          "_": 3920,
                          "source": " readonly string[]"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 3920,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Finish and create a `SemanticTokens` instance.",
                    "isMethod": true,
                    "_": 3925,
                    "source": "\n\n\t\t/**\n\t\t * Finish and create a `SemanticTokens` instance.\n\t\t */\n\t\tbuild(resultId?: string): SemanticTokens;",
                    "name": "build",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "resultId",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 3925,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "SemanticTokens",
                      "targs": [],
                      "isNullable": false,
                      "_": 3925,
                      "source": " SemanticTokens"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 3933,
                "name": "SemanticTokens",
                "generics": [],
                "doc": "Represents semantic tokens, either in a range or in an entire document.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 3946,
                    "source": "\n\n\t\tconstructor(data: Uint32Array, resultId?: string);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "data",
                        "type": {
                          "ref": "Uint32Array",
                          "targs": [],
                          "isNullable": false,
                          "_": 3946,
                          "source": " Uint32Array"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "resultId",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 3946,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The result id of the tokens.\n\nThis is the id that will be passed to `DocumentSemanticTokensProvider.provideDocumentSemanticTokensEdits` (if implemented).",
                    "isMethod": false,
                    "_": 3939,
                    "source": "\n\t\t/**\n\t\t * The result id of the tokens.\n\t\t *\n\t\t * This is the id that will be passed to `DocumentSemanticTokensProvider.provideDocumentSemanticTokensEdits` (if implemented).\n\t\t */\n\t\treadonly resultId: string | undefined;",
                    "name": "resultId",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 3939,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 3939,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 3939,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "The actual tokens data.",
                    "isMethod": false,
                    "_": 3944,
                    "source": "\n\t\t/**\n\t\t * The actual tokens data.\n\t\t * @see {@link DocumentSemanticTokensProvider.provideDocumentSemanticTokens provideDocumentSemanticTokens} for an explanation of the format.\n\t\t */\n\t\treadonly data: Uint32Array;",
                    "name": "data",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uint32Array",
                      "targs": [],
                      "isNullable": false,
                      "_": 3944,
                      "source": " Uint32Array"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 3953,
                "name": "SemanticTokensEdits",
                "generics": [],
                "doc": "Represents edits to semantic tokens.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 3966,
                    "source": "\n\n\t\tconstructor(edits: SemanticTokensEdit[], resultId?: string);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "edits",
                        "type": {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "SemanticTokensEdit",
                              "targs": [],
                              "isNullable": false,
                              "_": 3966,
                              "source": " SemanticTokensEdit"
                            }
                          ],
                          "isNullable": false,
                          "_": 3966,
                          "source": " SemanticTokensEdit[]"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "resultId",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 3966,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The result id of the tokens.\n\nThis is the id that will be passed to `DocumentSemanticTokensProvider.provideDocumentSemanticTokensEdits` (if implemented).",
                    "isMethod": false,
                    "_": 3959,
                    "source": "\n\t\t/**\n\t\t * The result id of the tokens.\n\t\t *\n\t\t * This is the id that will be passed to `DocumentSemanticTokensProvider.provideDocumentSemanticTokensEdits` (if implemented).\n\t\t */\n\t\treadonly resultId: string | undefined;",
                    "name": "resultId",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 3959,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 3959,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 3959,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "The edits to the tokens data.\nAll edits refer to the initial data state.",
                    "isMethod": false,
                    "_": 3964,
                    "source": "\n\t\t/**\n\t\t * The edits to the tokens data.\n\t\t * All edits refer to the initial data state.\n\t\t */\n\t\treadonly edits: SemanticTokensEdit[];",
                    "name": "edits",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "ref": "SemanticTokensEdit",
                          "targs": [],
                          "isNullable": false,
                          "_": 3964,
                          "source": " SemanticTokensEdit"
                        }
                      ],
                      "isNullable": false,
                      "_": 3964,
                      "source": " SemanticTokensEdit[]"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 3973,
                "name": "SemanticTokensEdit",
                "generics": [],
                "doc": "Represents an edit to semantic tokens.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 3987,
                    "source": "\n\n\t\tconstructor(start: number, deleteCount: number, data?: Uint32Array);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "start",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 3987,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "deleteCount",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 3987,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "data",
                        "type": {
                          "ref": "Uint32Array",
                          "targs": [],
                          "isNullable": false,
                          "_": 3987,
                          "source": " Uint32Array"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The start offset of the edit.",
                    "isMethod": false,
                    "_": 3977,
                    "source": "\n\t\t/**\n\t\t * The start offset of the edit.\n\t\t */\n\t\treadonly start: number;",
                    "name": "start",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 3977,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "The count of elements to remove.",
                    "isMethod": false,
                    "_": 3981,
                    "source": "\n\t\t/**\n\t\t * The count of elements to remove.\n\t\t */\n\t\treadonly deleteCount: number;",
                    "name": "deleteCount",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 3981,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "The elements to insert.",
                    "isMethod": false,
                    "_": 3985,
                    "source": "\n\t\t/**\n\t\t * The elements to insert.\n\t\t */\n\t\treadonly data: Uint32Array | undefined;",
                    "name": "data",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "Uint32Array",
                          "targs": [],
                          "isNullable": false,
                          "_": 3985,
                          "source": " Uint32Array"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 3985,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 3985,
                      "source": " Uint32Array | undefined"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 3994,
                "name": "DocumentSemanticTokensProvider",
                "generics": [],
                "doc": "The document semantic tokens provider interface defines the contract between extensions and\nsemantic tokens.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "An optional event to signal that the semantic tokens from this provider have changed.",
                    "isMethod": false,
                    "_": 3998,
                    "source": "\n\t\t/**\n\t\t * An optional event to signal that the semantic tokens from this provider have changed.\n\t\t */\n\t\tonDidChangeSemanticTokens?: Event<void>;",
                    "name": "onDidChangeSemanticTokens",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 3998,
                          "source": "void"
                        }
                      ],
                      "isNullable": false,
                      "_": 3998,
                      "source": " Event<void>"
                    }
                  },
                  {
                    "doc": "Tokens in a file are represented as an array of integers. The position of each token is expressed relative to\n the token before it, because most tokens remain stable relative to each other when edits are made in a file.\n\n ---\n In short, each token takes 5 integers to represent, so a specific token `i` in the file consists of the following array indices:\n  - at index `5*i`   - `deltaLine`: token line number, relative to the previous token\n  - at index `5*i+1` - `deltaStart`: token start character, relative to the previous token (relative to 0 or the previous token's start if they are on the same line)\n  - at index `5*i+2` - `length`: the length of the token. A token cannot be multiline.\n  - at index `5*i+3` - `tokenType`: will be looked up in `SemanticTokensLegend.tokenTypes`. We currently ask that `tokenType` < 65536.\n  - at index `5*i+4` - `tokenModifiers`: each set bit will be looked up in `SemanticTokensLegend.tokenModifiers`\n\n ---\n ### How to encode tokens\n\n Here is an example for encoding a file with 3 tokens in a uint32 array:\n ```\n    { line: 2, startChar:  5, length: 3, tokenType: \"property\",  tokenModifiers: [\"private\", \"static\"] },\n    { line: 2, startChar: 10, length: 4, tokenType: \"type\",      tokenModifiers: [] },\n    { line: 5, startChar:  2, length: 7, tokenType: \"class\",     tokenModifiers: [] }\n ```\n\n 1. First of all, a legend must be devised. This legend must be provided up-front and capture all possible token types.\n For this example, we will choose the following legend which must be passed in when registering the provider:\n ```\n    tokenTypes: ['property', 'type', 'class'],\n    tokenModifiers: ['private', 'static']\n ```\n\n 2. The first transformation step is to encode `tokenType` and `tokenModifiers` as integers using the legend. Token types are looked\n up by index, so a `tokenType` value of `1` means `tokenTypes[1]`. Multiple token modifiers can be set by using bit flags,\n so a `tokenModifier` value of `3` is first viewed as binary `0b00000011`, which means `[tokenModifiers[0], tokenModifiers[1]]` because\n bits 0 and 1 are set. Using this legend, the tokens now are:\n ```\n    { line: 2, startChar:  5, length: 3, tokenType: 0, tokenModifiers: 3 },\n    { line: 2, startChar: 10, length: 4, tokenType: 1, tokenModifiers: 0 },\n    { line: 5, startChar:  2, length: 7, tokenType: 2, tokenModifiers: 0 }\n ```\n\n 3. The next step is to represent each token relative to the previous token in the file. In this case, the second token\n is on the same line as the first token, so the `startChar` of the second token is made relative to the `startChar`\n of the first token, so it will be `10 - 5`. The third token is on a different line than the second token, so the\n `startChar` of the third token will not be altered:\n ```\n    { deltaLine: 2, deltaStartChar: 5, length: 3, tokenType: 0, tokenModifiers: 3 },\n    { deltaLine: 0, deltaStartChar: 5, length: 4, tokenType: 1, tokenModifiers: 0 },\n    { deltaLine: 3, deltaStartChar: 2, length: 7, tokenType: 2, tokenModifiers: 0 }\n ```\n\n 4. Finally, the last step is to inline each of the 5 fields for a token in a single array, which is a memory friendly representation:\n ```\n    // 1st token,  2nd token,  3rd token\n    [  2,5,3,0,3,  0,5,4,1,0,  3,2,7,2,0 ]\n ```\n\n @see {@link SemanticTokensBuilder} for a helper to encode tokens as integers.\n *NOTE*: When doing edits, it is possible that multiple edits occur until the editor decides to invoke the semantic tokens provider.\n *NOTE*: If the provider cannot temporarily compute semantic tokens, it can indicate this by throwing an error with the message 'Busy'.",
                    "isMethod": true,
                    "_": 4059,
                    "source": "\n\n\t\t/**\n\t\t * Tokens in a file are represented as an array of integers. The position of each token is expressed relative to\n\t\t * the token before it, because most tokens remain stable relative to each other when edits are made in a file.\n\t\t *\n\t\t * ---\n\t\t * In short, each token takes 5 integers to represent, so a specific token `i` in the file consists of the following array indices:\n\t\t *  - at index `5*i`   - `deltaLine`: token line number, relative to the previous token\n\t\t *  - at index `5*i+1` - `deltaStart`: token start character, relative to the previous token (relative to 0 or the previous token's start if they are on the same line)\n\t\t *  - at index `5*i+2` - `length`: the length of the token. A token cannot be multiline.\n\t\t *  - at index `5*i+3` - `tokenType`: will be looked up in `SemanticTokensLegend.tokenTypes`. We currently ask that `tokenType` < 65536.\n\t\t *  - at index `5*i+4` - `tokenModifiers`: each set bit will be looked up in `SemanticTokensLegend.tokenModifiers`\n\t\t *\n\t\t * ---\n\t\t * ### How to encode tokens\n\t\t *\n\t\t * Here is an example for encoding a file with 3 tokens in a uint32 array:\n\t\t * ```\n\t\t *    { line: 2, startChar:  5, length: 3, tokenType: \"property\",  tokenModifiers: [\"private\", \"static\"] },\n\t\t *    { line: 2, startChar: 10, length: 4, tokenType: \"type\",      tokenModifiers: [] },\n\t\t *    { line: 5, startChar:  2, length: 7, tokenType: \"class\",     tokenModifiers: [] }\n\t\t * ```\n\t\t *\n\t\t * 1. First of all, a legend must be devised. This legend must be provided up-front and capture all possible token types.\n\t\t * For this example, we will choose the following legend which must be passed in when registering the provider:\n\t\t * ```\n\t\t *    tokenTypes: ['property', 'type', 'class'],\n\t\t *    tokenModifiers: ['private', 'static']\n\t\t * ```\n\t\t *\n\t\t * 2. The first transformation step is to encode `tokenType` and `tokenModifiers` as integers using the legend. Token types are looked\n\t\t * up by index, so a `tokenType` value of `1` means `tokenTypes[1]`. Multiple token modifiers can be set by using bit flags,\n\t\t * so a `tokenModifier` value of `3` is first viewed as binary `0b00000011`, which means `[tokenModifiers[0], tokenModifiers[1]]` because\n\t\t * bits 0 and 1 are set. Using this legend, the tokens now are:\n\t\t * ```\n\t\t *    { line: 2, startChar:  5, length: 3, tokenType: 0, tokenModifiers: 3 },\n\t\t *    { line: 2, startChar: 10, length: 4, tokenType: 1, tokenModifiers: 0 },\n\t\t *    { line: 5, startChar:  2, length: 7, tokenType: 2, tokenModifiers: 0 }\n\t\t * ```\n\t\t *\n\t\t * 3. The next step is to represent each token relative to the previous token in the file. In this case, the second token\n\t\t * is on the same line as the first token, so the `startChar` of the second token is made relative to the `startChar`\n\t\t * of the first token, so it will be `10 - 5`. The third token is on a different line than the second token, so the\n\t\t * `startChar` of the third token will not be altered:\n\t\t * ```\n\t\t *    { deltaLine: 2, deltaStartChar: 5, length: 3, tokenType: 0, tokenModifiers: 3 },\n\t\t *    { deltaLine: 0, deltaStartChar: 5, length: 4, tokenType: 1, tokenModifiers: 0 },\n\t\t *    { deltaLine: 3, deltaStartChar: 2, length: 7, tokenType: 2, tokenModifiers: 0 }\n\t\t * ```\n\t\t *\n\t\t * 4. Finally, the last step is to inline each of the 5 fields for a token in a single array, which is a memory friendly representation:\n\t\t * ```\n\t\t *    // 1st token,  2nd token,  3rd token\n\t\t *    [  2,5,3,0,3,  0,5,4,1,0,  3,2,7,2,0 ]\n\t\t * ```\n\t\t *\n\t\t * @see {@link SemanticTokensBuilder} for a helper to encode tokens as integers.\n\t\t * *NOTE*: When doing edits, it is possible that multiple edits occur until the editor decides to invoke the semantic tokens provider.\n\t\t * *NOTE*: If the provider cannot temporarily compute semantic tokens, it can indicate this by throwing an error with the message 'Busy'.\n\t\t */\n\t\tprovideDocumentSemanticTokens(document: TextDocument, token: CancellationToken): ProviderResult<SemanticTokens>;",
                    "name": "provideDocumentSemanticTokens",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "document",
                        "type": {
                          "ref": "TextDocument",
                          "targs": [],
                          "isNullable": false,
                          "_": 4059,
                          "source": " TextDocument"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 4059,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "ref": "SemanticTokens",
                          "targs": [],
                          "isNullable": false,
                          "_": 4059,
                          "source": "SemanticTokens"
                        }
                      ],
                      "isNullable": false,
                      "_": 4059,
                      "source": " ProviderResult<SemanticTokens>"
                    }
                  },
                  {
                    "doc": "Instead of always returning all the tokens in a file, it is possible for a `DocumentSemanticTokensProvider` to implement\n this method (`provideDocumentSemanticTokensEdits`) and then return incremental updates to the previously provided semantic tokens.\n\n ---\n ### How tokens change when the document changes\n\n Suppose that `provideDocumentSemanticTokens` has previously returned the following semantic tokens:\n ```\n    // 1st token,  2nd token,  3rd token\n    [  2,5,3,0,3,  0,5,4,1,0,  3,2,7,2,0 ]\n ```\n\n Also suppose that after some edits, the new semantic tokens in a file are:\n ```\n    // 1st token,  2nd token,  3rd token\n    [  3,5,3,0,3,  0,5,4,1,0,  3,2,7,2,0 ]\n ```\n It is possible to express these new tokens in terms of an edit applied to the previous tokens:\n ```\n    [  2,5,3,0,3,  0,5,4,1,0,  3,2,7,2,0 ] // old tokens\n    [  3,5,3,0,3,  0,5,4,1,0,  3,2,7,2,0 ] // new tokens\n\n    edit: { start:  0, deleteCount: 1, data: [3] } // replace integer at offset 0 with 3\n ```\n\n *NOTE*: If the provider cannot compute `SemanticTokensEdits`, it can \"give up\" and return all the tokens in the document again.\n *NOTE*: All edits in `SemanticTokensEdits` contain indices in the old integers array, so they all refer to the previous result state.",
                    "isMethod": true,
                    "_": 4090,
                    "source": "\n\n\t\t/**\n\t\t * Instead of always returning all the tokens in a file, it is possible for a `DocumentSemanticTokensProvider` to implement\n\t\t * this method (`provideDocumentSemanticTokensEdits`) and then return incremental updates to the previously provided semantic tokens.\n\t\t *\n\t\t * ---\n\t\t * ### How tokens change when the document changes\n\t\t *\n\t\t * Suppose that `provideDocumentSemanticTokens` has previously returned the following semantic tokens:\n\t\t * ```\n\t\t *    // 1st token,  2nd token,  3rd token\n\t\t *    [  2,5,3,0,3,  0,5,4,1,0,  3,2,7,2,0 ]\n\t\t * ```\n\t\t *\n\t\t * Also suppose that after some edits, the new semantic tokens in a file are:\n\t\t * ```\n\t\t *    // 1st token,  2nd token,  3rd token\n\t\t *    [  3,5,3,0,3,  0,5,4,1,0,  3,2,7,2,0 ]\n\t\t * ```\n\t\t * It is possible to express these new tokens in terms of an edit applied to the previous tokens:\n\t\t * ```\n\t\t *    [  2,5,3,0,3,  0,5,4,1,0,  3,2,7,2,0 ] // old tokens\n\t\t *    [  3,5,3,0,3,  0,5,4,1,0,  3,2,7,2,0 ] // new tokens\n\t\t *\n\t\t *    edit: { start:  0, deleteCount: 1, data: [3] } // replace integer at offset 0 with 3\n\t\t * ```\n\t\t *\n\t\t * *NOTE*: If the provider cannot compute `SemanticTokensEdits`, it can \"give up\" and return all the tokens in the document again.\n\t\t * *NOTE*: All edits in `SemanticTokensEdits` contain indices in the old integers array, so they all refer to the previous result state.\n\t\t */\n\t\tprovideDocumentSemanticTokensEdits?(document: TextDocument, previousResultId: string, token: CancellationToken): ProviderResult<SemanticTokens | SemanticTokensEdits>;",
                    "name": "provideDocumentSemanticTokensEdits",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "document",
                        "type": {
                          "ref": "TextDocument",
                          "targs": [],
                          "isNullable": false,
                          "_": 4090,
                          "source": " TextDocument"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "previousResultId",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 4090,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 4090,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "union": [
                            {
                              "ref": "SemanticTokens",
                              "targs": [],
                              "isNullable": false,
                              "_": 4090,
                              "source": "SemanticTokens"
                            },
                            {
                              "ref": "SemanticTokensEdits",
                              "targs": [],
                              "isNullable": false,
                              "_": 4090,
                              "source": " SemanticTokensEdits"
                            }
                          ],
                          "isNullable": false,
                          "_": 4090,
                          "source": "SemanticTokens | SemanticTokensEdits"
                        }
                      ],
                      "isNullable": false,
                      "_": 4090,
                      "source": " ProviderResult<SemanticTokens | SemanticTokensEdits>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 4097,
                "name": "DocumentRangeSemanticTokensProvider",
                "generics": [],
                "doc": "The document range semantic tokens provider interface defines the contract between extensions and\nsemantic tokens.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "@see {@link DocumentSemanticTokensProvider.provideDocumentSemanticTokens provideDocumentSemanticTokens}.",
                    "isMethod": true,
                    "_": 4101,
                    "source": "\n\t\t/**\n\t\t * @see {@link DocumentSemanticTokensProvider.provideDocumentSemanticTokens provideDocumentSemanticTokens}.\n\t\t */\n\t\tprovideDocumentRangeSemanticTokens(document: TextDocument, range: Range, token: CancellationToken): ProviderResult<SemanticTokens>;",
                    "name": "provideDocumentRangeSemanticTokens",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "document",
                        "type": {
                          "ref": "TextDocument",
                          "targs": [],
                          "isNullable": false,
                          "_": 4101,
                          "source": " TextDocument"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "range",
                        "type": {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 4101,
                          "source": " Range"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 4101,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "ref": "SemanticTokens",
                          "targs": [],
                          "isNullable": false,
                          "_": 4101,
                          "source": "SemanticTokens"
                        }
                      ],
                      "isNullable": false,
                      "_": 4101,
                      "source": " ProviderResult<SemanticTokens>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 4107,
                "name": "FormattingOptions",
                "generics": [],
                "doc": "Value-object describing what options formatting should use.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [
                  {
                    "key": {
                      "core": "string",
                      "isNullable": false,
                      "_": 4122,
                      "source": " string"
                    },
                    "value": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 4122,
                          "source": " boolean"
                        },
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 4122,
                          "source": " number"
                        },
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 4122,
                          "source": " string"
                        }
                      ],
                      "isNullable": false,
                      "_": 4122,
                      "source": " boolean | number | string"
                    },
                    "doc": "",
                    "_": 4122,
                    "source": "\n\n\t\t/**\n\t\t * Signature for further properties.\n\t\t */\n\t\t[key: string]: boolean | number | string;",
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false
                  }
                ],
                "ctors": [],
                "members": [
                  {
                    "doc": "Size of a tab in spaces.",
                    "isMethod": false,
                    "_": 4112,
                    "source": "\n\n\t\t/**\n\t\t * Size of a tab in spaces.\n\t\t */\n\t\ttabSize: number;",
                    "name": "tabSize",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 4112,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "Prefer spaces over tabs.",
                    "isMethod": false,
                    "_": 4117,
                    "source": "\n\n\t\t/**\n\t\t * Prefer spaces over tabs.\n\t\t */\n\t\tinsertSpaces: boolean;",
                    "name": "insertSpaces",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 4117,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 4129,
                "name": "DocumentFormattingEditProvider",
                "generics": [],
                "doc": "The document formatting provider interface defines the contract between extensions and\nthe formatting-feature.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Provide formatting edits for a whole document.\n\n @param document The document in which the command was invoked.\n @param options Options controlling formatting.\n @param token A cancellation token.\n @return A set of text edits or a thenable that resolves to such. The lack of a result can be\n signaled by returning `undefined`, `null`, or an empty array.",
                    "isMethod": true,
                    "_": 4140,
                    "source": "\n\n\t\t/**\n\t\t * Provide formatting edits for a whole document.\n\t\t *\n\t\t * @param document The document in which the command was invoked.\n\t\t * @param options Options controlling formatting.\n\t\t * @param token A cancellation token.\n\t\t * @return A set of text edits or a thenable that resolves to such. The lack of a result can be\n\t\t * signaled by returning `undefined`, `null`, or an empty array.\n\t\t */\n\t\tprovideDocumentFormattingEdits(document: TextDocument, options: FormattingOptions, token: CancellationToken): ProviderResult<TextEdit[]>;",
                    "name": "provideDocumentFormattingEdits",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "document",
                        "type": {
                          "ref": "TextDocument",
                          "targs": [],
                          "isNullable": false,
                          "_": 4140,
                          "source": " TextDocument"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "options",
                        "type": {
                          "ref": "FormattingOptions",
                          "targs": [],
                          "isNullable": false,
                          "_": 4140,
                          "source": " FormattingOptions"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 4140,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "TextEdit",
                              "targs": [],
                              "isNullable": false,
                              "_": 4140,
                              "source": "TextEdit"
                            }
                          ],
                          "isNullable": false,
                          "_": 4140,
                          "source": "TextEdit[]"
                        }
                      ],
                      "isNullable": false,
                      "_": 4140,
                      "source": " ProviderResult<TextEdit[]>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 4147,
                "name": "DocumentRangeFormattingEditProvider",
                "generics": [],
                "doc": "The document formatting provider interface defines the contract between extensions and\nthe formatting-feature.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Provide formatting edits for a range in a document.\n\n The given range is a hint and providers can decide to format a smaller\n or larger range. Often this is done by adjusting the start and end\n of the range to full syntax nodes.\n\n @param document The document in which the command was invoked.\n @param range The range which should be formatted.\n @param options Options controlling formatting.\n @param token A cancellation token.\n @return A set of text edits or a thenable that resolves to such. The lack of a result can be\n signaled by returning `undefined`, `null`, or an empty array.",
                    "isMethod": true,
                    "_": 4163,
                    "source": "\n\n\t\t/**\n\t\t * Provide formatting edits for a range in a document.\n\t\t *\n\t\t * The given range is a hint and providers can decide to format a smaller\n\t\t * or larger range. Often this is done by adjusting the start and end\n\t\t * of the range to full syntax nodes.\n\t\t *\n\t\t * @param document The document in which the command was invoked.\n\t\t * @param range The range which should be formatted.\n\t\t * @param options Options controlling formatting.\n\t\t * @param token A cancellation token.\n\t\t * @return A set of text edits or a thenable that resolves to such. The lack of a result can be\n\t\t * signaled by returning `undefined`, `null`, or an empty array.\n\t\t */\n\t\tprovideDocumentRangeFormattingEdits(document: TextDocument, range: Range, options: FormattingOptions, token: CancellationToken): ProviderResult<TextEdit[]>;",
                    "name": "provideDocumentRangeFormattingEdits",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "document",
                        "type": {
                          "ref": "TextDocument",
                          "targs": [],
                          "isNullable": false,
                          "_": 4163,
                          "source": " TextDocument"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "range",
                        "type": {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 4163,
                          "source": " Range"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "options",
                        "type": {
                          "ref": "FormattingOptions",
                          "targs": [],
                          "isNullable": false,
                          "_": 4163,
                          "source": " FormattingOptions"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 4163,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "TextEdit",
                              "targs": [],
                              "isNullable": false,
                              "_": 4163,
                              "source": "TextEdit"
                            }
                          ],
                          "isNullable": false,
                          "_": 4163,
                          "source": "TextEdit[]"
                        }
                      ],
                      "isNullable": false,
                      "_": 4163,
                      "source": " ProviderResult<TextEdit[]>"
                    }
                  },
                  {
                    "doc": "Provide formatting edits for multiple ranges in a document.\n\n This function is optional but allows a formatter to perform faster when formatting only modified ranges or when\n formatting a large number of selections.\n\n The given ranges are hints and providers can decide to format a smaller\n or larger range. Often this is done by adjusting the start and end\n of the range to full syntax nodes.\n\n @param document The document in which the command was invoked.\n @param ranges The ranges which should be formatted.\n @param options Options controlling formatting.\n @param token A cancellation token.\n @return A set of text edits or a thenable that resolves to such. The lack of a result can be\n signaled by returning `undefined`, `null`, or an empty array.",
                    "isMethod": true,
                    "_": 4183,
                    "source": "\n\n\n\t\t/**\n\t\t * Provide formatting edits for multiple ranges in a document.\n\t\t *\n\t\t * This function is optional but allows a formatter to perform faster when formatting only modified ranges or when\n\t\t * formatting a large number of selections.\n\t\t *\n\t\t * The given ranges are hints and providers can decide to format a smaller\n\t\t * or larger range. Often this is done by adjusting the start and end\n\t\t * of the range to full syntax nodes.\n\t\t *\n\t\t * @param document The document in which the command was invoked.\n\t\t * @param ranges The ranges which should be formatted.\n\t\t * @param options Options controlling formatting.\n\t\t * @param token A cancellation token.\n\t\t * @return A set of text edits or a thenable that resolves to such. The lack of a result can be\n\t\t * signaled by returning `undefined`, `null`, or an empty array.\n\t\t */\n\t\tprovideDocumentRangesFormattingEdits?(document: TextDocument, ranges: Range[], options: FormattingOptions, token: CancellationToken): ProviderResult<TextEdit[]>;",
                    "name": "provideDocumentRangesFormattingEdits",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "document",
                        "type": {
                          "ref": "TextDocument",
                          "targs": [],
                          "isNullable": false,
                          "_": 4183,
                          "source": " TextDocument"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "ranges",
                        "type": {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "Range",
                              "targs": [],
                              "isNullable": false,
                              "_": 4183,
                              "source": " Range"
                            }
                          ],
                          "isNullable": false,
                          "_": 4183,
                          "source": " Range[]"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "options",
                        "type": {
                          "ref": "FormattingOptions",
                          "targs": [],
                          "isNullable": false,
                          "_": 4183,
                          "source": " FormattingOptions"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 4183,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "TextEdit",
                              "targs": [],
                              "isNullable": false,
                              "_": 4183,
                              "source": "TextEdit"
                            }
                          ],
                          "isNullable": false,
                          "_": 4183,
                          "source": "TextEdit[]"
                        }
                      ],
                      "isNullable": false,
                      "_": 4183,
                      "source": " ProviderResult<TextEdit[]>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 4190,
                "name": "OnTypeFormattingEditProvider",
                "generics": [],
                "doc": "The document formatting provider interface defines the contract between extensions and\nthe formatting-feature.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Provide formatting edits after a character has been typed.\n\n The given position and character should hint to the provider\n what range the position to expand to, like find the matching `{`\n when `}` has been entered.\n\n @param document The document in which the command was invoked.\n @param position The position at which the command was invoked.\n @param ch The character that has been typed.\n @param options Options controlling formatting.\n @param token A cancellation token.\n @return A set of text edits or a thenable that resolves to such. The lack of a result can be\n signaled by returning `undefined`, `null`, or an empty array.",
                    "isMethod": true,
                    "_": 4207,
                    "source": "\n\n\t\t/**\n\t\t * Provide formatting edits after a character has been typed.\n\t\t *\n\t\t * The given position and character should hint to the provider\n\t\t * what range the position to expand to, like find the matching `{`\n\t\t * when `}` has been entered.\n\t\t *\n\t\t * @param document The document in which the command was invoked.\n\t\t * @param position The position at which the command was invoked.\n\t\t * @param ch The character that has been typed.\n\t\t * @param options Options controlling formatting.\n\t\t * @param token A cancellation token.\n\t\t * @return A set of text edits or a thenable that resolves to such. The lack of a result can be\n\t\t * signaled by returning `undefined`, `null`, or an empty array.\n\t\t */\n\t\tprovideOnTypeFormattingEdits(document: TextDocument, position: Position, ch: string, options: FormattingOptions, token: CancellationToken): ProviderResult<TextEdit[]>;",
                    "name": "provideOnTypeFormattingEdits",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "document",
                        "type": {
                          "ref": "TextDocument",
                          "targs": [],
                          "isNullable": false,
                          "_": 4207,
                          "source": " TextDocument"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "position",
                        "type": {
                          "ref": "Position",
                          "targs": [],
                          "isNullable": false,
                          "_": 4207,
                          "source": " Position"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "ch",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 4207,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "options",
                        "type": {
                          "ref": "FormattingOptions",
                          "targs": [],
                          "isNullable": false,
                          "_": 4207,
                          "source": " FormattingOptions"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 4207,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "TextEdit",
                              "targs": [],
                              "isNullable": false,
                              "_": 4207,
                              "source": "TextEdit"
                            }
                          ],
                          "isNullable": false,
                          "_": 4207,
                          "source": "TextEdit[]"
                        }
                      ],
                      "isNullable": false,
                      "_": 4207,
                      "source": " ProviderResult<TextEdit[]>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 4214,
                "name": "ParameterInformation",
                "generics": [],
                "doc": "Represents a parameter of a callable-signature. A parameter can\nhave a label and a doc-comment.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 4237,
                    "source": "\n\n\t\t/**\n\t\t * Creates a new parameter information object.\n\t\t *\n\t\t * @param label A label string or inclusive start and exclusive end offsets within its containing signature label.\n\t\t * @param documentation A doc string.\n\t\t */\n\t\tconstructor(label: string | [number, number], documentation?: string | MarkdownString);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "label",
                        "type": {
                          "union": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 4237,
                              "source": " string"
                            },
                            {
                              "tuple": [
                                {
                                  "core": "number",
                                  "isNullable": false,
                                  "_": 4237,
                                  "source": "number"
                                },
                                {
                                  "core": "number",
                                  "isNullable": false,
                                  "_": 4237,
                                  "source": " number"
                                }
                              ],
                              "isNullable": false,
                              "_": 4237,
                              "source": " [number, number]"
                            }
                          ],
                          "isNullable": false,
                          "_": 4237,
                          "source": " string | [number, number]"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "documentation",
                        "type": {
                          "union": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 4237,
                              "source": " string"
                            },
                            {
                              "ref": "MarkdownString",
                              "targs": [],
                              "isNullable": false,
                              "_": 4237,
                              "source": " MarkdownString"
                            }
                          ],
                          "isNullable": false,
                          "_": 4237,
                          "source": " string | MarkdownString"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The label of this signature.\n\n Either a string or inclusive start and exclusive end offsets within its containing\n {@link SignatureInformation.label signature label}. *Note*: A label of type string must be\n a substring of its containing signature information's {@link SignatureInformation.label label}.",
                    "isMethod": false,
                    "_": 4223,
                    "source": "\n\n\t\t/**\n\t\t * The label of this signature.\n\t\t *\n\t\t * Either a string or inclusive start and exclusive end offsets within its containing\n\t\t * {@link SignatureInformation.label signature label}. *Note*: A label of type string must be\n\t\t * a substring of its containing signature information's {@link SignatureInformation.label label}.\n\t\t */\n\t\tlabel: string | [number, number];",
                    "name": "label",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 4223,
                          "source": " string"
                        },
                        {
                          "tuple": [
                            {
                              "core": "number",
                              "isNullable": false,
                              "_": 4223,
                              "source": "number"
                            },
                            {
                              "core": "number",
                              "isNullable": false,
                              "_": 4223,
                              "source": " number"
                            }
                          ],
                          "isNullable": false,
                          "_": 4223,
                          "source": " [number, number]"
                        }
                      ],
                      "isNullable": false,
                      "_": 4223,
                      "source": " string | [number, number]"
                    }
                  },
                  {
                    "doc": "The human-readable doc-comment of this signature. Will be shown\n in the UI but can be omitted.",
                    "isMethod": false,
                    "_": 4229,
                    "source": "\n\n\t\t/**\n\t\t * The human-readable doc-comment of this signature. Will be shown\n\t\t * in the UI but can be omitted.\n\t\t */\n\t\tdocumentation?: string | MarkdownString;",
                    "name": "documentation",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 4229,
                          "source": " string"
                        },
                        {
                          "ref": "MarkdownString",
                          "targs": [],
                          "isNullable": false,
                          "_": 4229,
                          "source": " MarkdownString"
                        }
                      ],
                      "isNullable": false,
                      "_": 4229,
                      "source": " string | MarkdownString"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 4245,
                "name": "SignatureInformation",
                "generics": [],
                "doc": "Represents the signature of something callable. A signature\ncan have a label, like a function-name, a doc-comment, and\na set of parameters.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 4277,
                    "source": "\n\n\t\t/**\n\t\t * Creates a new signature information object.\n\t\t *\n\t\t * @param label A label string.\n\t\t * @param documentation A doc string.\n\t\t */\n\t\tconstructor(label: string, documentation?: string | MarkdownString);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "label",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 4277,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "documentation",
                        "type": {
                          "union": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 4277,
                              "source": " string"
                            },
                            {
                              "ref": "MarkdownString",
                              "targs": [],
                              "isNullable": false,
                              "_": 4277,
                              "source": " MarkdownString"
                            }
                          ],
                          "isNullable": false,
                          "_": 4277,
                          "source": " string | MarkdownString"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The label of this signature. Will be shown in\n the UI.",
                    "isMethod": false,
                    "_": 4251,
                    "source": "\n\n\t\t/**\n\t\t * The label of this signature. Will be shown in\n\t\t * the UI.\n\t\t */\n\t\tlabel: string;",
                    "name": "label",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 4251,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The human-readable doc-comment of this signature. Will be shown\n in the UI but can be omitted.",
                    "isMethod": false,
                    "_": 4257,
                    "source": "\n\n\t\t/**\n\t\t * The human-readable doc-comment of this signature. Will be shown\n\t\t * in the UI but can be omitted.\n\t\t */\n\t\tdocumentation?: string | MarkdownString;",
                    "name": "documentation",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 4257,
                          "source": " string"
                        },
                        {
                          "ref": "MarkdownString",
                          "targs": [],
                          "isNullable": false,
                          "_": 4257,
                          "source": " MarkdownString"
                        }
                      ],
                      "isNullable": false,
                      "_": 4257,
                      "source": " string | MarkdownString"
                    }
                  },
                  {
                    "doc": "The parameters of this signature.",
                    "isMethod": false,
                    "_": 4262,
                    "source": "\n\n\t\t/**\n\t\t * The parameters of this signature.\n\t\t */\n\t\tparameters: ParameterInformation[];",
                    "name": "parameters",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "ref": "ParameterInformation",
                          "targs": [],
                          "isNullable": false,
                          "_": 4262,
                          "source": " ParameterInformation"
                        }
                      ],
                      "isNullable": false,
                      "_": 4262,
                      "source": " ParameterInformation[]"
                    }
                  },
                  {
                    "doc": "The index of the active parameter.\n\n If provided, this is used in place of {@linkcode SignatureHelp.activeParameter}.",
                    "isMethod": false,
                    "_": 4269,
                    "source": "\n\n\t\t/**\n\t\t * The index of the active parameter.\n\t\t *\n\t\t * If provided, this is used in place of {@linkcode SignatureHelp.activeParameter}.\n\t\t */\n\t\tactiveParameter?: number;",
                    "name": "activeParameter",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 4269,
                      "source": " number"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 4285,
                "name": "SignatureHelp",
                "generics": [],
                "doc": "Signature help represents the signature of something\ncallable. There can be multiple signatures but only one\nactive and only one active parameter.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "One or more signatures.",
                    "isMethod": false,
                    "_": 4290,
                    "source": "\n\n\t\t/**\n\t\t * One or more signatures.\n\t\t */\n\t\tsignatures: SignatureInformation[];",
                    "name": "signatures",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "ref": "SignatureInformation",
                          "targs": [],
                          "isNullable": false,
                          "_": 4290,
                          "source": " SignatureInformation"
                        }
                      ],
                      "isNullable": false,
                      "_": 4290,
                      "source": " SignatureInformation[]"
                    }
                  },
                  {
                    "doc": "The active signature.",
                    "isMethod": false,
                    "_": 4295,
                    "source": "\n\n\t\t/**\n\t\t * The active signature.\n\t\t */\n\t\tactiveSignature: number;",
                    "name": "activeSignature",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 4295,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "The active parameter of the active signature.",
                    "isMethod": false,
                    "_": 4300,
                    "source": "\n\n\t\t/**\n\t\t * The active parameter of the active signature.\n\t\t */\n\t\tactiveParameter: number;",
                    "name": "activeParameter",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 4300,
                      "source": " number"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 4327,
                "name": "SignatureHelpContext",
                "generics": [],
                "doc": "Additional information about the context in which a\n{@linkcode SignatureHelpProvider.provideSignatureHelpSignatureHelpProvider} was triggered.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Action that caused signature help to be triggered.",
                    "isMethod": false,
                    "_": 4331,
                    "source": "\n\t\t/**\n\t\t * Action that caused signature help to be triggered.\n\t\t */\n\t\treadonly triggerKind: SignatureHelpTriggerKind;",
                    "name": "triggerKind",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "SignatureHelpTriggerKind",
                      "targs": [],
                      "isNullable": false,
                      "_": 4331,
                      "source": " SignatureHelpTriggerKind"
                    }
                  },
                  {
                    "doc": "Character that caused signature help to be triggered.\n\nThis is `undefined` when signature help is not triggered by typing, such as when manually invoking\nsignature help or when moving the cursor.",
                    "isMethod": false,
                    "_": 4339,
                    "source": "\n\n\t\t/**\n\t\t * Character that caused signature help to be triggered.\n\t\t *\n\t\t * This is `undefined` when signature help is not triggered by typing, such as when manually invoking\n\t\t * signature help or when moving the cursor.\n\t\t */\n\t\treadonly triggerCharacter: string | undefined;",
                    "name": "triggerCharacter",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 4339,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 4339,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 4339,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "`true` if signature help was already showing when it was triggered.\n\nRetriggers occur when the signature help is already active and can be caused by actions such as\ntyping a trigger character, a cursor move, or document content changes.",
                    "isMethod": false,
                    "_": 4347,
                    "source": "\n\n\t\t/**\n\t\t * `true` if signature help was already showing when it was triggered.\n\t\t *\n\t\t * Retriggers occur when the signature help is already active and can be caused by actions such as\n\t\t * typing a trigger character, a cursor move, or document content changes.\n\t\t */\n\t\treadonly isRetrigger: boolean;",
                    "name": "isRetrigger",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 4347,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "The currently active {@linkcode SignatureHelp}.\n\nThe `activeSignatureHelp` has its [`SignatureHelp.activeSignature`] field updated based on\nthe user arrowing through available signatures.",
                    "isMethod": false,
                    "_": 4355,
                    "source": "\n\n\t\t/**\n\t\t * The currently active {@linkcode SignatureHelp}.\n\t\t *\n\t\t * The `activeSignatureHelp` has its [`SignatureHelp.activeSignature`] field updated based on\n\t\t * the user arrowing through available signatures.\n\t\t */\n\t\treadonly activeSignatureHelp: SignatureHelp | undefined;",
                    "name": "activeSignatureHelp",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "SignatureHelp",
                          "targs": [],
                          "isNullable": false,
                          "_": 4355,
                          "source": " SignatureHelp"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 4355,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 4355,
                      "source": " SignatureHelp | undefined"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 4362,
                "name": "SignatureHelpProvider",
                "generics": [],
                "doc": "The signature help provider interface defines the contract between extensions and\nthe [parameter hints](https://code.visualstudio.com/docs/editor/intellisense)-feature.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Provide help for the signature at the given position and document.\n\n @param document The document in which the command was invoked.\n @param position The position at which the command was invoked.\n @param token A cancellation token.\n @param context Information about how signature help was triggered.\n\n @return Signature help or a thenable that resolves to such. The lack of a result can be\n signaled by returning `undefined` or `null`.",
                    "isMethod": true,
                    "_": 4375,
                    "source": "\n\n\t\t/**\n\t\t * Provide help for the signature at the given position and document.\n\t\t *\n\t\t * @param document The document in which the command was invoked.\n\t\t * @param position The position at which the command was invoked.\n\t\t * @param token A cancellation token.\n\t\t * @param context Information about how signature help was triggered.\n\t\t *\n\t\t * @return Signature help or a thenable that resolves to such. The lack of a result can be\n\t\t * signaled by returning `undefined` or `null`.\n\t\t */\n\t\tprovideSignatureHelp(document: TextDocument, position: Position, token: CancellationToken, context: SignatureHelpContext): ProviderResult<SignatureHelp>;",
                    "name": "provideSignatureHelp",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "document",
                        "type": {
                          "ref": "TextDocument",
                          "targs": [],
                          "isNullable": false,
                          "_": 4375,
                          "source": " TextDocument"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "position",
                        "type": {
                          "ref": "Position",
                          "targs": [],
                          "isNullable": false,
                          "_": 4375,
                          "source": " Position"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 4375,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "context",
                        "type": {
                          "ref": "SignatureHelpContext",
                          "targs": [],
                          "isNullable": false,
                          "_": 4375,
                          "source": " SignatureHelpContext"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "ref": "SignatureHelp",
                          "targs": [],
                          "isNullable": false,
                          "_": 4375,
                          "source": "SignatureHelp"
                        }
                      ],
                      "isNullable": false,
                      "_": 4375,
                      "source": " ProviderResult<SignatureHelp>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 4381,
                "name": "SignatureHelpProviderMetadata",
                "generics": [],
                "doc": "Metadata about a registered {@linkcode SignatureHelpProvider}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "List of characters that trigger signature help.",
                    "isMethod": false,
                    "_": 4385,
                    "source": "\n\t\t/**\n\t\t * List of characters that trigger signature help.\n\t\t */\n\t\treadonly triggerCharacters: readonly string[];",
                    "name": "triggerCharacters",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "core": "string",
                            "isNullable": false,
                            "_": 4385,
                            "source": " string"
                          }
                        ],
                        "isNullable": false,
                        "_": 4385,
                        "source": " string[]"
                      },
                      "isNullable": false,
                      "_": 4385,
                      "source": " readonly string[]"
                    }
                  },
                  {
                    "doc": "List of characters that re-trigger signature help.\n\nThese trigger characters are only active when signature help is already showing. All trigger characters\nare also counted as re-trigger characters.",
                    "isMethod": false,
                    "_": 4393,
                    "source": "\n\n\t\t/**\n\t\t * List of characters that re-trigger signature help.\n\t\t *\n\t\t * These trigger characters are only active when signature help is already showing. All trigger characters\n\t\t * are also counted as re-trigger characters.\n\t\t */\n\t\treadonly retriggerCharacters: readonly string[];",
                    "name": "retriggerCharacters",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "core": "string",
                            "isNullable": false,
                            "_": 4393,
                            "source": " string"
                          }
                        ],
                        "isNullable": false,
                        "_": 4393,
                        "source": " string[]"
                      },
                      "isNullable": false,
                      "_": 4393,
                      "source": " readonly string[]"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 4399,
                "name": "CompletionItemLabel",
                "generics": [],
                "doc": "A structured label for a {@link CompletionItemcompletion item}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The label of this completion item.\n\n By default this is also the text that is inserted when this completion is selected.",
                    "isMethod": false,
                    "_": 4406,
                    "source": "\n\n\t\t/**\n\t\t * The label of this completion item.\n\t\t *\n\t\t * By default this is also the text that is inserted when this completion is selected.\n\t\t */\n\t\tlabel: string;",
                    "name": "label",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 4406,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "An optional string which is rendered less prominently directly after {@link CompletionItemLabel.label label},\n without any spacing. Should be used for function signatures or type annotations.",
                    "isMethod": false,
                    "_": 4412,
                    "source": "\n\n\t\t/**\n\t\t * An optional string which is rendered less prominently directly after {@link CompletionItemLabel.label label},\n\t\t * without any spacing. Should be used for function signatures or type annotations.\n\t\t */\n\t\tdetail?: string;",
                    "name": "detail",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 4412,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "An optional string which is rendered less prominently after {@link CompletionItemLabel.detail}. Should be used\n for fully qualified names or file path.",
                    "isMethod": false,
                    "_": 4418,
                    "source": "\n\n\t\t/**\n\t\t * An optional string which is rendered less prominently after {@link CompletionItemLabel.detail}. Should be used\n\t\t * for fully qualified names or file path.\n\t\t */\n\t\tdescription?: string;",
                    "name": "description",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 4418,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline24",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "CompletionItem",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 4560,
                    "source": " inserting: Range;",
                    "name": "inserting",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Range",
                      "targs": [],
                      "isNullable": false,
                      "_": 4560,
                      "source": " Range"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 4560,
                    "source": " replacing: Range",
                    "name": "replacing",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Range",
                      "targs": [],
                      "isNullable": false,
                      "_": 4560,
                      "source": " Range"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 4480,
                "name": "CompletionItem",
                "generics": [],
                "doc": "A completion item represents a text snippet that is proposed to complete text that is being typed.\n\nIt is sufficient to create a completion item from just a {@link CompletionItem.labellabel}. In that\ncase the completion item will replace the {@link TextDocument.getWordRangeAtPositionword}\nuntil the cursor with the given label or {@link CompletionItem.insertTextinsertText}. Otherwise the\ngiven {@link CompletionItem.textEditedit} is used.\n\nWhen selecting a completion item in the editor its defined or synthesized text edit will be applied\nto *all* cursors/selections whereas {@link CompletionItem.additionalTextEditsadditionalTextEdits} will be\napplied as provided.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 4611,
                    "source": "\n\n\t\t/**\n\t\t * Creates a new completion item.\n\t\t *\n\t\t * Completion items must have at least a {@link CompletionItem.label label} which then\n\t\t * will be used as insert text as well as for sorting and filtering.\n\t\t *\n\t\t * @param label The label of the completion.\n\t\t * @param kind The {@link CompletionItemKind kind} of the completion.\n\t\t */\n\t\tconstructor(label: string | CompletionItemLabel, kind?: CompletionItemKind);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "label",
                        "type": {
                          "union": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 4611,
                              "source": " string"
                            },
                            {
                              "ref": "CompletionItemLabel",
                              "targs": [],
                              "isNullable": false,
                              "_": 4611,
                              "source": " CompletionItemLabel"
                            }
                          ],
                          "isNullable": false,
                          "_": 4611,
                          "source": " string | CompletionItemLabel"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "kind",
                        "type": {
                          "ref": "CompletionItemKind",
                          "targs": [],
                          "isNullable": false,
                          "_": 4611,
                          "source": " CompletionItemKind"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The label of this completion item. By default\n this is also the text that is inserted when selecting\n this completion.",
                    "isMethod": false,
                    "_": 4487,
                    "source": "\n\n\t\t/**\n\t\t * The label of this completion item. By default\n\t\t * this is also the text that is inserted when selecting\n\t\t * this completion.\n\t\t */\n\t\tlabel: string | CompletionItemLabel;",
                    "name": "label",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 4487,
                          "source": " string"
                        },
                        {
                          "ref": "CompletionItemLabel",
                          "targs": [],
                          "isNullable": false,
                          "_": 4487,
                          "source": " CompletionItemLabel"
                        }
                      ],
                      "isNullable": false,
                      "_": 4487,
                      "source": " string | CompletionItemLabel"
                    }
                  },
                  {
                    "doc": "The kind of this completion item. Based on the kind\n an icon is chosen by the editor.",
                    "isMethod": false,
                    "_": 4493,
                    "source": "\n\n\t\t/**\n\t\t * The kind of this completion item. Based on the kind\n\t\t * an icon is chosen by the editor.\n\t\t */\n\t\tkind?: CompletionItemKind;",
                    "name": "kind",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "CompletionItemKind",
                      "targs": [],
                      "isNullable": false,
                      "_": 4493,
                      "source": " CompletionItemKind"
                    }
                  },
                  {
                    "doc": "Tags for this completion item.",
                    "isMethod": false,
                    "_": 4498,
                    "source": "\n\n\t\t/**\n\t\t * Tags for this completion item.\n\t\t */\n\t\ttags?: readonly CompletionItemTag[];",
                    "name": "tags",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "CompletionItemTag",
                            "targs": [],
                            "isNullable": false,
                            "_": 4498,
                            "source": " CompletionItemTag"
                          }
                        ],
                        "isNullable": false,
                        "_": 4498,
                        "source": " CompletionItemTag[]"
                      },
                      "isNullable": false,
                      "_": 4498,
                      "source": " readonly CompletionItemTag[]"
                    }
                  },
                  {
                    "doc": "A human-readable string with additional information\n about this item, like type or symbol information.",
                    "isMethod": false,
                    "_": 4504,
                    "source": "\n\n\t\t/**\n\t\t * A human-readable string with additional information\n\t\t * about this item, like type or symbol information.\n\t\t */\n\t\tdetail?: string;",
                    "name": "detail",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 4504,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "A human-readable string that represents a doc-comment.",
                    "isMethod": false,
                    "_": 4509,
                    "source": "\n\n\t\t/**\n\t\t * A human-readable string that represents a doc-comment.\n\t\t */\n\t\tdocumentation?: string | MarkdownString;",
                    "name": "documentation",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 4509,
                          "source": " string"
                        },
                        {
                          "ref": "MarkdownString",
                          "targs": [],
                          "isNullable": false,
                          "_": 4509,
                          "source": " MarkdownString"
                        }
                      ],
                      "isNullable": false,
                      "_": 4509,
                      "source": " string | MarkdownString"
                    }
                  },
                  {
                    "doc": "A string that should be used when comparing this item\n with other items. When `falsy` the {@link CompletionItem.label label}\n is used.\n\n Note that `sortText` is only used for the initial ordering of completion\n items. When having a leading word (prefix) ordering is based on how\n well completions match that prefix and the initial ordering is only used\n when completions match equally well. The prefix is defined by the\n {@linkcode CompletionItem.range range}-property and can therefore be different\n for each completion.",
                    "isMethod": false,
                    "_": 4523,
                    "source": "\n\n\t\t/**\n\t\t * A string that should be used when comparing this item\n\t\t * with other items. When `falsy` the {@link CompletionItem.label label}\n\t\t * is used.\n\t\t *\n\t\t * Note that `sortText` is only used for the initial ordering of completion\n\t\t * items. When having a leading word (prefix) ordering is based on how\n\t\t * well completions match that prefix and the initial ordering is only used\n\t\t * when completions match equally well. The prefix is defined by the\n\t\t * {@linkcode CompletionItem.range range}-property and can therefore be different\n\t\t * for each completion.\n\t\t */\n\t\tsortText?: string;",
                    "name": "sortText",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 4523,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "A string that should be used when filtering a set of\n completion items. When `falsy` the {@link CompletionItem.label label}\n is used.\n\n Note that the filter text is matched against the leading word (prefix) which is defined\n by the {@linkcode CompletionItem.range range}-property.",
                    "isMethod": false,
                    "_": 4533,
                    "source": "\n\n\t\t/**\n\t\t * A string that should be used when filtering a set of\n\t\t * completion items. When `falsy` the {@link CompletionItem.label label}\n\t\t * is used.\n\t\t *\n\t\t * Note that the filter text is matched against the leading word (prefix) which is defined\n\t\t * by the {@linkcode CompletionItem.range range}-property.\n\t\t */\n\t\tfilterText?: string;",
                    "name": "filterText",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 4533,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Select this item when showing. *Note* that only one completion item can be selected and\n that the editor decides which item that is. The rule is that the *first* item of those\n that match best is selected.",
                    "isMethod": false,
                    "_": 4540,
                    "source": "\n\n\t\t/**\n\t\t * Select this item when showing. *Note* that only one completion item can be selected and\n\t\t * that the editor decides which item that is. The rule is that the *first* item of those\n\t\t * that match best is selected.\n\t\t */\n\t\tpreselect?: boolean;",
                    "name": "preselect",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 4540,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "A string or snippet that should be inserted in a document when selecting\n this completion. When `falsy` the {@link CompletionItem.label label}\n is used.",
                    "isMethod": false,
                    "_": 4547,
                    "source": "\n\n\t\t/**\n\t\t * A string or snippet that should be inserted in a document when selecting\n\t\t * this completion. When `falsy` the {@link CompletionItem.label label}\n\t\t * is used.\n\t\t */\n\t\tinsertText?: string | SnippetString;",
                    "name": "insertText",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 4547,
                          "source": " string"
                        },
                        {
                          "ref": "SnippetString",
                          "targs": [],
                          "isNullable": false,
                          "_": 4547,
                          "source": " SnippetString"
                        }
                      ],
                      "isNullable": false,
                      "_": 4547,
                      "source": " string | SnippetString"
                    }
                  },
                  {
                    "doc": "A range or a insert and replace range selecting the text that should be replaced by this completion item.\n\n When omitted, the range of the {@link TextDocument.getWordRangeAtPosition current word} is used as replace-range\n and as insert-range the start of the {@link TextDocument.getWordRangeAtPosition current word} to the\n current position is used.\n\n *Note 1:* A range must be a {@link Range.isSingleLine single line} and it must\n {@link Range.contains contain} the position at which completion has been {@link CompletionItemProvider.provideCompletionItems requested}.\n *Note 2:* A insert range must be a prefix of a replace range, that means it must be contained and starting at the same position.",
                    "isMethod": false,
                    "_": 4560,
                    "source": "\n\n\t\t/**\n\t\t * A range or a insert and replace range selecting the text that should be replaced by this completion item.\n\t\t *\n\t\t * When omitted, the range of the {@link TextDocument.getWordRangeAtPosition current word} is used as replace-range\n\t\t * and as insert-range the start of the {@link TextDocument.getWordRangeAtPosition current word} to the\n\t\t * current position is used.\n\t\t *\n\t\t * *Note 1:* A range must be a {@link Range.isSingleLine single line} and it must\n\t\t * {@link Range.contains contain} the position at which completion has been {@link CompletionItemProvider.provideCompletionItems requested}.\n\t\t * *Note 2:* A insert range must be a prefix of a replace range, that means it must be contained and starting at the same position.\n\t\t */\n\t\trange?: Range | { inserting: Range; replacing: Range };",
                    "name": "range",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 4560,
                          "source": " Range"
                        },
                        {
                          "ref": "IInline24",
                          "targs": [],
                          "isNullable": false,
                          "_": 4560,
                          "source": " { inserting: Range; replacing: Range }"
                        }
                      ],
                      "isNullable": false,
                      "_": 4560,
                      "source": " Range | { inserting: Range; replacing: Range }"
                    }
                  },
                  {
                    "doc": "An optional set of characters that when pressed while this completion is active will accept it first and\n then type that character. *Note* that all commit characters should have `length=1` and that superfluous\n characters will be ignored.",
                    "isMethod": false,
                    "_": 4567,
                    "source": "\n\n\t\t/**\n\t\t * An optional set of characters that when pressed while this completion is active will accept it first and\n\t\t * then type that character. *Note* that all commit characters should have `length=1` and that superfluous\n\t\t * characters will be ignored.\n\t\t */\n\t\tcommitCharacters?: string[];",
                    "name": "commitCharacters",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 4567,
                          "source": " string"
                        }
                      ],
                      "isNullable": false,
                      "_": 4567,
                      "source": " string[]"
                    }
                  },
                  {
                    "doc": "Keep whitespace of the {@link CompletionItem.insertText insertText} as is. By default, the editor adjusts leading\n whitespace of new lines so that they match the indentation of the line for which the item is accepted - setting\n this to `true` will prevent that.",
                    "isMethod": false,
                    "_": 4574,
                    "source": "\n\n\t\t/**\n\t\t * Keep whitespace of the {@link CompletionItem.insertText insertText} as is. By default, the editor adjusts leading\n\t\t * whitespace of new lines so that they match the indentation of the line for which the item is accepted - setting\n\t\t * this to `true` will prevent that.\n\t\t */\n\t\tkeepWhitespace?: boolean;",
                    "name": "keepWhitespace",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 4574,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "@deprecated Use `CompletionItem.insertText` and `CompletionItem.range` instead.\n\n An {@link TextEdit edit} which is applied to a document when selecting\n this completion. When an edit is provided the value of\n {@link CompletionItem.insertText insertText} is ignored.\n\n The {@link Range} of the edit must be single-line and on the same\n line completions were {@link CompletionItemProvider.provideCompletionItems requested} at.",
                    "isMethod": false,
                    "_": 4586,
                    "source": "\n\n\t\t/**\n\t\t * @deprecated Use `CompletionItem.insertText` and `CompletionItem.range` instead.\n\t\t *\n\t\t * An {@link TextEdit edit} which is applied to a document when selecting\n\t\t * this completion. When an edit is provided the value of\n\t\t * {@link CompletionItem.insertText insertText} is ignored.\n\t\t *\n\t\t * The {@link Range} of the edit must be single-line and on the same\n\t\t * line completions were {@link CompletionItemProvider.provideCompletionItems requested} at.\n\t\t */\n\t\ttextEdit?: TextEdit;",
                    "name": "textEdit",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "TextEdit",
                      "targs": [],
                      "isNullable": false,
                      "_": 4586,
                      "source": " TextEdit"
                    }
                  },
                  {
                    "doc": "An optional array of additional {@link TextEdit text edits} that are applied when\n selecting this completion. Edits must not overlap with the main {@link CompletionItem.textEdit edit}\n nor with themselves.",
                    "isMethod": false,
                    "_": 4593,
                    "source": "\n\n\t\t/**\n\t\t * An optional array of additional {@link TextEdit text edits} that are applied when\n\t\t * selecting this completion. Edits must not overlap with the main {@link CompletionItem.textEdit edit}\n\t\t * nor with themselves.\n\t\t */\n\t\tadditionalTextEdits?: TextEdit[];",
                    "name": "additionalTextEdits",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "ref": "TextEdit",
                          "targs": [],
                          "isNullable": false,
                          "_": 4593,
                          "source": " TextEdit"
                        }
                      ],
                      "isNullable": false,
                      "_": 4593,
                      "source": " TextEdit[]"
                    }
                  },
                  {
                    "doc": "An optional {@link Command} that is executed *after* inserting this completion. *Note* that\n additional modifications to the current document should be described with the\n {@link CompletionItem.additionalTextEdits additionalTextEdits}-property.",
                    "isMethod": false,
                    "_": 4600,
                    "source": "\n\n\t\t/**\n\t\t * An optional {@link Command} that is executed *after* inserting this completion. *Note* that\n\t\t * additional modifications to the current document should be described with the\n\t\t * {@link CompletionItem.additionalTextEdits additionalTextEdits}-property.\n\t\t */\n\t\tcommand?: Command;",
                    "name": "command",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Command",
                      "targs": [],
                      "isNullable": false,
                      "_": 4600,
                      "source": " Command"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 4618,
                "name": "CompletionList",
                "generics": [
                  {
                    "name": "T",
                    "constraint": {
                      "ref": "CompletionItem",
                      "targs": [],
                      "isNullable": false,
                      "_": 4618,
                      "source": " CompletionItem"
                    },
                    "default": {
                      "ref": "CompletionItem",
                      "targs": [],
                      "isNullable": false,
                      "_": 4618,
                      "source": " CompletionItem"
                    },
                    "_": 4618,
                    "source": "T extends CompletionItem = CompletionItem"
                  }
                ],
                "doc": "Represents a collection of {@link CompletionItemcompletion items} to be presented\nin the editor.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 4637,
                    "source": "\n\n\t\t/**\n\t\t * Creates a new completion list.\n\t\t *\n\t\t * @param items The completion items.\n\t\t * @param isIncomplete The list is not complete.\n\t\t */\n\t\tconstructor(items?: T[], isIncomplete?: boolean);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "items",
                        "type": {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "T",
                              "targs": [],
                              "isNullable": false,
                              "_": 4637,
                              "source": " T"
                            }
                          ],
                          "isNullable": false,
                          "_": 4637,
                          "source": " T[]"
                        },
                        "varargs": false,
                        "isNullable": true
                      },
                      {
                        "name": "isIncomplete",
                        "type": {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 4637,
                          "source": " boolean"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "This list is not complete. Further typing should result in recomputing\n this list.",
                    "isMethod": false,
                    "_": 4624,
                    "source": "\n\n\t\t/**\n\t\t * This list is not complete. Further typing should result in recomputing\n\t\t * this list.\n\t\t */\n\t\tisIncomplete?: boolean;",
                    "name": "isIncomplete",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 4624,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "The completion items.",
                    "isMethod": false,
                    "_": 4629,
                    "source": "\n\n\t\t/**\n\t\t * The completion items.\n\t\t */\n\t\titems: T[];",
                    "name": "items",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "ref": "T",
                          "targs": [],
                          "isNullable": false,
                          "_": 4629,
                          "source": " T"
                        }
                      ],
                      "isNullable": false,
                      "_": 4629,
                      "source": " T[]"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 4662,
                "name": "CompletionContext",
                "generics": [],
                "doc": "Contains additional information about the context in which\n{@link CompletionItemProvider.provideCompletionItemscompletion provider} is triggered.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "How the completion was triggered.",
                    "isMethod": false,
                    "_": 4666,
                    "source": "\n\t\t/**\n\t\t * How the completion was triggered.\n\t\t */\n\t\treadonly triggerKind: CompletionTriggerKind;",
                    "name": "triggerKind",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "CompletionTriggerKind",
                      "targs": [],
                      "isNullable": false,
                      "_": 4666,
                      "source": " CompletionTriggerKind"
                    }
                  },
                  {
                    "doc": "Character that triggered the completion item provider.\n\n`undefined` if the provider was not triggered by a character.\n\nThe trigger character is already in the document when the completion provider is triggered.",
                    "isMethod": false,
                    "_": 4675,
                    "source": "\n\n\t\t/**\n\t\t * Character that triggered the completion item provider.\n\t\t *\n\t\t * `undefined` if the provider was not triggered by a character.\n\t\t *\n\t\t * The trigger character is already in the document when the completion provider is triggered.\n\t\t */\n\t\treadonly triggerCharacter: string | undefined;",
                    "name": "triggerCharacter",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 4675,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 4675,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 4675,
                      "source": " string | undefined"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 4691,
                "name": "CompletionItemProvider",
                "generics": [
                  {
                    "name": "T",
                    "constraint": {
                      "ref": "CompletionItem",
                      "targs": [],
                      "isNullable": false,
                      "_": 4691,
                      "source": " CompletionItem"
                    },
                    "default": {
                      "ref": "CompletionItem",
                      "targs": [],
                      "isNullable": false,
                      "_": 4691,
                      "source": " CompletionItem"
                    },
                    "_": 4691,
                    "source": "T extends CompletionItem = CompletionItem"
                  }
                ],
                "doc": "The completion item provider interface defines the contract between extensions and\n[IntelliSense](https://code.visualstudio.com/docs/editor/intellisense).\n\nProviders can delay the computation of the {@linkcode CompletionItem.detaildetail}\nand {@linkcode CompletionItem.documentationdocumentation} properties by implementing the\n{@linkcode CompletionItemProvider.resolveCompletionItemresolveCompletionItem}-function. However, properties that\nare needed for the initial sorting and filtering, like `sortText`, `filterText`, `insertText`, and `range`, must\nnot be changed during resolve.\n\nProviders are asked for completions either explicitly by a user gesture or -depending on the configuration-\nimplicitly when typing words or trigger characters.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Provide completion items for the given position and document.\n\n @param document The document in which the command was invoked.\n @param position The position at which the command was invoked.\n @param token A cancellation token.\n @param context How the completion was triggered.\n\n @return An array of completions, a {@link CompletionList completion list}, or a thenable that resolves to either.\n The lack of a result can be signaled by returning `undefined`, `null`, or an empty array.",
                    "isMethod": true,
                    "_": 4704,
                    "source": "\n\n\t\t/**\n\t\t * Provide completion items for the given position and document.\n\t\t *\n\t\t * @param document The document in which the command was invoked.\n\t\t * @param position The position at which the command was invoked.\n\t\t * @param token A cancellation token.\n\t\t * @param context How the completion was triggered.\n\t\t *\n\t\t * @return An array of completions, a {@link CompletionList completion list}, or a thenable that resolves to either.\n\t\t * The lack of a result can be signaled by returning `undefined`, `null`, or an empty array.\n\t\t */\n\t\tprovideCompletionItems(document: TextDocument, position: Position, token: CancellationToken, context: CompletionContext): ProviderResult<T[] | CompletionList<T>>;",
                    "name": "provideCompletionItems",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "document",
                        "type": {
                          "ref": "TextDocument",
                          "targs": [],
                          "isNullable": false,
                          "_": 4704,
                          "source": " TextDocument"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "position",
                        "type": {
                          "ref": "Position",
                          "targs": [],
                          "isNullable": false,
                          "_": 4704,
                          "source": " Position"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 4704,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "context",
                        "type": {
                          "ref": "CompletionContext",
                          "targs": [],
                          "isNullable": false,
                          "_": 4704,
                          "source": " CompletionContext"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "union": [
                            {
                              "core": "array",
                              "targs": [
                                {
                                  "ref": "T",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 4704,
                                  "source": "T"
                                }
                              ],
                              "isNullable": false,
                              "_": 4704,
                              "source": "T[]"
                            },
                            {
                              "ref": "CompletionList",
                              "targs": [
                                {
                                  "ref": "T",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 4704,
                                  "source": "T"
                                }
                              ],
                              "isNullable": false,
                              "_": 4704,
                              "source": " CompletionList<T>"
                            }
                          ],
                          "isNullable": false,
                          "_": 4704,
                          "source": "T[] | CompletionList<T>"
                        }
                      ],
                      "isNullable": false,
                      "_": 4704,
                      "source": " ProviderResult<T[] | CompletionList<T>>"
                    }
                  },
                  {
                    "doc": "Given a completion item fill in more data, like {@link CompletionItem.documentation doc-comment}\n or {@link CompletionItem.detail details}.\n\n The editor will only resolve a completion item once.\n\n *Note* that this function is called when completion items are already showing in the UI or when an item has been\n selected for insertion. Because of that, no property that changes the presentation (label, sorting, filtering etc)\n or the (primary) insert behaviour ({@link CompletionItem.insertText insertText}) can be changed.\n\n This function may fill in {@link CompletionItem.additionalTextEdits additionalTextEdits}. However, that means an item might be\n inserted *before* resolving is done and in that case the editor will do a best effort to still apply those additional\n text edits.\n\n @param item A completion item currently active in the UI.\n @param token A cancellation token.\n @return The resolved completion item or a thenable that resolves to of such. It is OK to return the given\n `item`. When no result is returned, the given `item` will be used.",
                    "isMethod": true,
                    "_": 4725,
                    "source": "\n\n\t\t/**\n\t\t * Given a completion item fill in more data, like {@link CompletionItem.documentation doc-comment}\n\t\t * or {@link CompletionItem.detail details}.\n\t\t *\n\t\t * The editor will only resolve a completion item once.\n\t\t *\n\t\t * *Note* that this function is called when completion items are already showing in the UI or when an item has been\n\t\t * selected for insertion. Because of that, no property that changes the presentation (label, sorting, filtering etc)\n\t\t * or the (primary) insert behaviour ({@link CompletionItem.insertText insertText}) can be changed.\n\t\t *\n\t\t * This function may fill in {@link CompletionItem.additionalTextEdits additionalTextEdits}. However, that means an item might be\n\t\t * inserted *before* resolving is done and in that case the editor will do a best effort to still apply those additional\n\t\t * text edits.\n\t\t *\n\t\t * @param item A completion item currently active in the UI.\n\t\t * @param token A cancellation token.\n\t\t * @return The resolved completion item or a thenable that resolves to of such. It is OK to return the given\n\t\t * `item`. When no result is returned, the given `item` will be used.\n\t\t */\n\t\tresolveCompletionItem?(item: T, token: CancellationToken): ProviderResult<T>;",
                    "name": "resolveCompletionItem",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "item",
                        "type": {
                          "ref": "T",
                          "targs": [],
                          "isNullable": false,
                          "_": 4725,
                          "source": " T"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 4725,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "ref": "T",
                          "targs": [],
                          "isNullable": false,
                          "_": 4725,
                          "source": "T"
                        }
                      ],
                      "isNullable": false,
                      "_": 4725,
                      "source": " ProviderResult<T>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 4735,
                "name": "InlineCompletionItemProvider",
                "generics": [],
                "doc": "The inline completion item provider interface defines the contract between extensions and\nthe inline completion feature.\n\nProviders are asked for completions either explicitly by a user gesture or implicitly when typing.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Provides inline completion items for the given position and document.\n If inline completions are enabled, this method will be called whenever the user stopped typing.\n It will also be called when the user explicitly triggers inline completions or explicitly asks for the next or previous inline completion.\n In that case, all available inline completions should be returned.\n `context.triggerKind` can be used to distinguish between these scenarios.\n\n @param document The document inline completions are requested for.\n @param position The position inline completions are requested for.\n @param context A context object with additional information.\n @param token A cancellation token.\n @return An array of completion items or a thenable that resolves to an array of completion items.",
                    "isMethod": true,
                    "_": 4750,
                    "source": "\n\n\t\t/**\n\t\t * Provides inline completion items for the given position and document.\n\t\t * If inline completions are enabled, this method will be called whenever the user stopped typing.\n\t\t * It will also be called when the user explicitly triggers inline completions or explicitly asks for the next or previous inline completion.\n\t\t * In that case, all available inline completions should be returned.\n\t\t * `context.triggerKind` can be used to distinguish between these scenarios.\n\t\t *\n\t\t * @param document The document inline completions are requested for.\n\t\t * @param position The position inline completions are requested for.\n\t\t * @param context A context object with additional information.\n\t\t * @param token A cancellation token.\n\t\t * @return An array of completion items or a thenable that resolves to an array of completion items.\n\t\t */\n\t\tprovideInlineCompletionItems(document: TextDocument, position: Position, context: InlineCompletionContext, token: CancellationToken): ProviderResult<InlineCompletionItem[] | InlineCompletionList>;",
                    "name": "provideInlineCompletionItems",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "document",
                        "type": {
                          "ref": "TextDocument",
                          "targs": [],
                          "isNullable": false,
                          "_": 4750,
                          "source": " TextDocument"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "position",
                        "type": {
                          "ref": "Position",
                          "targs": [],
                          "isNullable": false,
                          "_": 4750,
                          "source": " Position"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "context",
                        "type": {
                          "ref": "InlineCompletionContext",
                          "targs": [],
                          "isNullable": false,
                          "_": 4750,
                          "source": " InlineCompletionContext"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 4750,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "union": [
                            {
                              "core": "array",
                              "targs": [
                                {
                                  "ref": "InlineCompletionItem",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 4750,
                                  "source": "InlineCompletionItem"
                                }
                              ],
                              "isNullable": false,
                              "_": 4750,
                              "source": "InlineCompletionItem[]"
                            },
                            {
                              "ref": "InlineCompletionList",
                              "targs": [],
                              "isNullable": false,
                              "_": 4750,
                              "source": " InlineCompletionList"
                            }
                          ],
                          "isNullable": false,
                          "_": 4750,
                          "source": "InlineCompletionItem[] | InlineCompletionList"
                        }
                      ],
                      "isNullable": false,
                      "_": 4750,
                      "source": " ProviderResult<InlineCompletionItem[] | InlineCompletionList>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 4757,
                "name": "InlineCompletionList",
                "generics": [],
                "doc": "Represents a collection of {@link InlineCompletionIteminline completion items} to be presented\nin the editor.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 4766,
                    "source": "\n\n\t\t/**\n\t\t * Creates a new list of inline completion items.\n\t\t*/\n\t\tconstructor(items: InlineCompletionItem[]);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "items",
                        "type": {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "InlineCompletionItem",
                              "targs": [],
                              "isNullable": false,
                              "_": 4766,
                              "source": " InlineCompletionItem"
                            }
                          ],
                          "isNullable": false,
                          "_": 4766,
                          "source": " InlineCompletionItem[]"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The inline completion items.",
                    "isMethod": false,
                    "_": 4761,
                    "source": "\n\t\t/**\n\t\t * The inline completion items.\n\t\t */\n\t\titems: InlineCompletionItem[];",
                    "name": "items",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "ref": "InlineCompletionItem",
                          "targs": [],
                          "isNullable": false,
                          "_": 4761,
                          "source": " InlineCompletionItem"
                        }
                      ],
                      "isNullable": false,
                      "_": 4761,
                      "source": " InlineCompletionItem[]"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 4772,
                "name": "InlineCompletionContext",
                "generics": [],
                "doc": "Provides information about the context in which an inline completion was requested.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Describes how the inline completion was triggered.",
                    "isMethod": false,
                    "_": 4776,
                    "source": "\n\t\t/**\n\t\t * Describes how the inline completion was triggered.\n\t\t */\n\t\treadonly triggerKind: InlineCompletionTriggerKind;",
                    "name": "triggerKind",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "InlineCompletionTriggerKind",
                      "targs": [],
                      "isNullable": false,
                      "_": 4776,
                      "source": " InlineCompletionTriggerKind"
                    }
                  },
                  {
                    "doc": "Provides information about the currently selected item in the autocomplete widget if it is visible.\n\nIf set, provided inline completions must extend the text of the selected item\nand use the same range, otherwise they are not shown as preview.\nAs an example, if the document text is `console.` and the selected item is `.log` replacing the `.` in the document,\nthe inline completion must also replace `.` and start with `.log`, for example `.log()`.\n\nInline completion providers are requested again whenever the selected item changes.",
                    "isMethod": false,
                    "_": 4788,
                    "source": "\n\n\t\t/**\n\t\t * Provides information about the currently selected item in the autocomplete widget if it is visible.\n\t\t *\n\t\t * If set, provided inline completions must extend the text of the selected item\n\t\t * and use the same range, otherwise they are not shown as preview.\n\t\t * As an example, if the document text is `console.` and the selected item is `.log` replacing the `.` in the document,\n\t\t * the inline completion must also replace `.` and start with `.log`, for example `.log()`.\n\t\t *\n\t\t * Inline completion providers are requested again whenever the selected item changes.\n\t\t */\n\t\treadonly selectedCompletionInfo: SelectedCompletionInfo | undefined;",
                    "name": "selectedCompletionInfo",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "SelectedCompletionInfo",
                          "targs": [],
                          "isNullable": false,
                          "_": 4788,
                          "source": " SelectedCompletionInfo"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 4788,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 4788,
                      "source": " SelectedCompletionInfo | undefined"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 4794,
                "name": "SelectedCompletionInfo",
                "generics": [],
                "doc": "Describes the currently selected completion item.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The range that will be replaced if this completion item is accepted.",
                    "isMethod": false,
                    "_": 4798,
                    "source": "\n\t\t/**\n\t\t * The range that will be replaced if this completion item is accepted.\n\t\t */\n\t\treadonly range: Range;",
                    "name": "range",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Range",
                      "targs": [],
                      "isNullable": false,
                      "_": 4798,
                      "source": " Range"
                    }
                  },
                  {
                    "doc": "The text the range will be replaced with if this completion is accepted.",
                    "isMethod": false,
                    "_": 4803,
                    "source": "\n\n\t\t/**\n\t\t * The text the range will be replaced with if this completion is accepted.\n\t\t */\n\t\treadonly text: string;",
                    "name": "text",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 4803,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 4828,
                "name": "InlineCompletionItem",
                "generics": [],
                "doc": "An inline completion item represents a text snippet that is proposed inline to complete text that is being typed.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 4863,
                    "source": "\n\n\t\t/**\n\t\t * Creates a new inline completion item.\n\t\t *\n\t\t * @param insertText The text to replace the range with.\n\t\t * @param range The range to replace. If not set, the word at the requested position will be used.\n\t\t * @param command An optional {@link Command} that is executed *after* inserting this completion.\n\t\t */\n\t\tconstructor(insertText: string | SnippetString, range?: Range, command?: Command);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "insertText",
                        "type": {
                          "union": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 4863,
                              "source": " string"
                            },
                            {
                              "ref": "SnippetString",
                              "targs": [],
                              "isNullable": false,
                              "_": 4863,
                              "source": " SnippetString"
                            }
                          ],
                          "isNullable": false,
                          "_": 4863,
                          "source": " string | SnippetString"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "range",
                        "type": {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 4863,
                          "source": " Range"
                        },
                        "varargs": false,
                        "isNullable": true
                      },
                      {
                        "name": "command",
                        "type": {
                          "ref": "Command",
                          "targs": [],
                          "isNullable": false,
                          "_": 4863,
                          "source": " Command"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The text to replace the range with. Must be set.\n Is used both for the preview and the accept operation.",
                    "isMethod": false,
                    "_": 4833,
                    "source": "\n\t\t/**\n\t\t * The text to replace the range with. Must be set.\n\t\t * Is used both for the preview and the accept operation.\n\t\t */\n\t\tinsertText: string | SnippetString;",
                    "name": "insertText",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 4833,
                          "source": " string"
                        },
                        {
                          "ref": "SnippetString",
                          "targs": [],
                          "isNullable": false,
                          "_": 4833,
                          "source": " SnippetString"
                        }
                      ],
                      "isNullable": false,
                      "_": 4833,
                      "source": " string | SnippetString"
                    }
                  },
                  {
                    "doc": "A text that is used to decide if this inline completion should be shown. When `falsy`\n the {@link InlineCompletionItem.insertText} is used.\n\n An inline completion is shown if the text to replace is a prefix of the filter text.",
                    "isMethod": false,
                    "_": 4841,
                    "source": "\n\n\t\t/**\n\t\t * A text that is used to decide if this inline completion should be shown. When `falsy`\n\t\t * the {@link InlineCompletionItem.insertText} is used.\n\t\t *\n\t\t * An inline completion is shown if the text to replace is a prefix of the filter text.\n\t\t */\n\t\tfilterText?: string;",
                    "name": "filterText",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 4841,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The range to replace.\n Must begin and end on the same line.\n\n Prefer replacements over insertions to provide a better experience when the user deletes typed text.",
                    "isMethod": false,
                    "_": 4849,
                    "source": "\n\n\t\t/**\n\t\t * The range to replace.\n\t\t * Must begin and end on the same line.\n\t\t *\n\t\t * Prefer replacements over insertions to provide a better experience when the user deletes typed text.\n\t\t */\n\t\trange?: Range;",
                    "name": "range",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Range",
                      "targs": [],
                      "isNullable": false,
                      "_": 4849,
                      "source": " Range"
                    }
                  },
                  {
                    "doc": "An optional {@link Command} that is executed *after* inserting this completion.",
                    "isMethod": false,
                    "_": 4854,
                    "source": "\n\n\t\t/**\n\t\t * An optional {@link Command} that is executed *after* inserting this completion.\n\t\t */\n\t\tcommand?: Command;",
                    "name": "command",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Command",
                      "targs": [],
                      "isNullable": false,
                      "_": 4854,
                      "source": " Command"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 4870,
                "name": "DocumentLink",
                "generics": [],
                "doc": "A document link is a range in a text document that links to an internal or external resource, like another\ntext document or a web site.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 4897,
                    "source": "\n\n\t\t/**\n\t\t * Creates a new document link.\n\t\t *\n\t\t * @param range The range the document link applies to. Must not be empty.\n\t\t * @param target The uri the document link points to.\n\t\t */\n\t\tconstructor(range: Range, target?: Uri);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "range",
                        "type": {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 4897,
                          "source": " Range"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "target",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 4897,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The range this link applies to.",
                    "isMethod": false,
                    "_": 4875,
                    "source": "\n\n\t\t/**\n\t\t * The range this link applies to.\n\t\t */\n\t\trange: Range;",
                    "name": "range",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Range",
                      "targs": [],
                      "isNullable": false,
                      "_": 4875,
                      "source": " Range"
                    }
                  },
                  {
                    "doc": "The uri this link points to.",
                    "isMethod": false,
                    "_": 4880,
                    "source": "\n\n\t\t/**\n\t\t * The uri this link points to.\n\t\t */\n\t\ttarget?: Uri;",
                    "name": "target",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 4880,
                      "source": " Uri"
                    }
                  },
                  {
                    "doc": "The tooltip text when you hover over this link.\n\n If a tooltip is provided, is will be displayed in a string that includes instructions on how to\n trigger the link, such as `{0} (ctrl + click)`. The specific instructions vary depending on OS,\n user settings, and localization.",
                    "isMethod": false,
                    "_": 4889,
                    "source": "\n\n\t\t/**\n\t\t * The tooltip text when you hover over this link.\n\t\t *\n\t\t * If a tooltip is provided, is will be displayed in a string that includes instructions on how to\n\t\t * trigger the link, such as `{0} (ctrl + click)`. The specific instructions vary depending on OS,\n\t\t * user settings, and localization.\n\t\t */\n\t\ttooltip?: string;",
                    "name": "tooltip",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 4889,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 4904,
                "name": "DocumentLinkProvider",
                "generics": [
                  {
                    "name": "T",
                    "constraint": {
                      "ref": "DocumentLink",
                      "targs": [],
                      "isNullable": false,
                      "_": 4904,
                      "source": " DocumentLink"
                    },
                    "default": {
                      "ref": "DocumentLink",
                      "targs": [],
                      "isNullable": false,
                      "_": 4904,
                      "source": " DocumentLink"
                    },
                    "_": 4904,
                    "source": "T extends DocumentLink = DocumentLink"
                  }
                ],
                "doc": "The document link provider defines the contract between extensions and feature of showing\nlinks in the editor.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Provide links for the given document. Note that the editor ships with a default provider that detects\n `http(s)` and `file` links.\n\n @param document The document in which the command was invoked.\n @param token A cancellation token.\n @return An array of {@link DocumentLink document links} or a thenable that resolves to such. The lack of a result\n can be signaled by returning `undefined`, `null`, or an empty array.",
                    "isMethod": true,
                    "_": 4915,
                    "source": "\n\n\t\t/**\n\t\t * Provide links for the given document. Note that the editor ships with a default provider that detects\n\t\t * `http(s)` and `file` links.\n\t\t *\n\t\t * @param document The document in which the command was invoked.\n\t\t * @param token A cancellation token.\n\t\t * @return An array of {@link DocumentLink document links} or a thenable that resolves to such. The lack of a result\n\t\t * can be signaled by returning `undefined`, `null`, or an empty array.\n\t\t */\n\t\tprovideDocumentLinks(document: TextDocument, token: CancellationToken): ProviderResult<T[]>;",
                    "name": "provideDocumentLinks",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "document",
                        "type": {
                          "ref": "TextDocument",
                          "targs": [],
                          "isNullable": false,
                          "_": 4915,
                          "source": " TextDocument"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 4915,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "T",
                              "targs": [],
                              "isNullable": false,
                              "_": 4915,
                              "source": "T"
                            }
                          ],
                          "isNullable": false,
                          "_": 4915,
                          "source": "T[]"
                        }
                      ],
                      "isNullable": false,
                      "_": 4915,
                      "source": " ProviderResult<T[]>"
                    }
                  },
                  {
                    "doc": "Given a link fill in its {@link DocumentLink.target target}. This method is called when an incomplete\n link is selected in the UI. Providers can implement this method and return incomplete links\n (without target) from the {@linkcode DocumentLinkProvider.provideDocumentLinks provideDocumentLinks} method which\n often helps to improve performance.\n\n @param link The link that is to be resolved.\n @param token A cancellation token.",
                    "isMethod": true,
                    "_": 4926,
                    "source": "\n\n\t\t/**\n\t\t * Given a link fill in its {@link DocumentLink.target target}. This method is called when an incomplete\n\t\t * link is selected in the UI. Providers can implement this method and return incomplete links\n\t\t * (without target) from the {@linkcode DocumentLinkProvider.provideDocumentLinks provideDocumentLinks} method which\n\t\t * often helps to improve performance.\n\t\t *\n\t\t * @param link The link that is to be resolved.\n\t\t * @param token A cancellation token.\n\t\t */\n\t\tresolveDocumentLink?(link: T, token: CancellationToken): ProviderResult<T>;",
                    "name": "resolveDocumentLink",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "link",
                        "type": {
                          "ref": "T",
                          "targs": [],
                          "isNullable": false,
                          "_": 4926,
                          "source": " T"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 4926,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "ref": "T",
                          "targs": [],
                          "isNullable": false,
                          "_": 4926,
                          "source": "T"
                        }
                      ],
                      "isNullable": false,
                      "_": 4926,
                      "source": " ProviderResult<T>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 4932,
                "name": "Color",
                "generics": [],
                "doc": "Represents a color in RGBA space.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 4962,
                    "source": "\n\n\t\t/**\n\t\t * Creates a new color instance.\n\t\t *\n\t\t * @param red The red component.\n\t\t * @param green The green component.\n\t\t * @param blue The blue component.\n\t\t * @param alpha The alpha component.\n\t\t */\n\t\tconstructor(red: number, green: number, blue: number, alpha: number);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "red",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 4962,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "green",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 4962,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "blue",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 4962,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "alpha",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 4962,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The red component of this color in the range [0-1].",
                    "isMethod": false,
                    "_": 4937,
                    "source": "\n\n\t\t/**\n\t\t * The red component of this color in the range [0-1].\n\t\t */\n\t\treadonly red: number;",
                    "name": "red",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 4937,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "The green component of this color in the range [0-1].",
                    "isMethod": false,
                    "_": 4942,
                    "source": "\n\n\t\t/**\n\t\t * The green component of this color in the range [0-1].\n\t\t */\n\t\treadonly green: number;",
                    "name": "green",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 4942,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "The blue component of this color in the range [0-1].",
                    "isMethod": false,
                    "_": 4947,
                    "source": "\n\n\t\t/**\n\t\t * The blue component of this color in the range [0-1].\n\t\t */\n\t\treadonly blue: number;",
                    "name": "blue",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 4947,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "The alpha component of this color in the range [0-1].",
                    "isMethod": false,
                    "_": 4952,
                    "source": "\n\n\t\t/**\n\t\t * The alpha component of this color in the range [0-1].\n\t\t */\n\t\treadonly alpha: number;",
                    "name": "alpha",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 4952,
                      "source": " number"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 4968,
                "name": "ColorInformation",
                "generics": [],
                "doc": "Represents a color range from a document.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 4986,
                    "source": "\n\n\t\t/**\n\t\t * Creates a new color range.\n\t\t *\n\t\t * @param range The range the color appears in. Must not be empty.\n\t\t * @param color The value of the color.\n\t\t */\n\t\tconstructor(range: Range, color: Color);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "range",
                        "type": {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 4986,
                          "source": " Range"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "color",
                        "type": {
                          "ref": "Color",
                          "targs": [],
                          "isNullable": false,
                          "_": 4986,
                          "source": " Color"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The range in the document where this color appears.",
                    "isMethod": false,
                    "_": 4973,
                    "source": "\n\n\t\t/**\n\t\t * The range in the document where this color appears.\n\t\t */\n\t\trange: Range;",
                    "name": "range",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Range",
                      "targs": [],
                      "isNullable": false,
                      "_": 4973,
                      "source": " Range"
                    }
                  },
                  {
                    "doc": "The actual color value for this color range.",
                    "isMethod": false,
                    "_": 4978,
                    "source": "\n\n\t\t/**\n\t\t * The actual color value for this color range.\n\t\t */\n\t\tcolor: Color;",
                    "name": "color",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Color",
                      "targs": [],
                      "isNullable": false,
                      "_": 4978,
                      "source": " Color"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 4997,
                "name": "ColorPresentation",
                "generics": [],
                "doc": "A color presentation object describes how a {@linkcode Color} should be represented as text and what\nedits are required to refer to it from source code.\n\nFor some languages one color can have multiple presentations, e.g. css can represent the color red with\nthe constant `Red`, the hex-value `#ff0000`, or in rgba and hsla forms. In csharp other representations\napply, e.g. `System.Drawing.Color.Red`.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 5024,
                    "source": "\n\n\t\t/**\n\t\t * Creates a new color presentation.\n\t\t *\n\t\t * @param label The label of this color presentation.\n\t\t */\n\t\tconstructor(label: string);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "label",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 5024,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The label of this color presentation. It will be shown on the color\n picker header. By default this is also the text that is inserted when selecting\n this color presentation.",
                    "isMethod": false,
                    "_": 5004,
                    "source": "\n\n\t\t/**\n\t\t * The label of this color presentation. It will be shown on the color\n\t\t * picker header. By default this is also the text that is inserted when selecting\n\t\t * this color presentation.\n\t\t */\n\t\tlabel: string;",
                    "name": "label",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 5004,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "An {@link TextEdit edit} which is applied to a document when selecting\n this presentation for the color.  When `falsy` the {@link ColorPresentation.label label}\n is used.",
                    "isMethod": false,
                    "_": 5011,
                    "source": "\n\n\t\t/**\n\t\t * An {@link TextEdit edit} which is applied to a document when selecting\n\t\t * this presentation for the color.  When `falsy` the {@link ColorPresentation.label label}\n\t\t * is used.\n\t\t */\n\t\ttextEdit?: TextEdit;",
                    "name": "textEdit",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "TextEdit",
                      "targs": [],
                      "isNullable": false,
                      "_": 5011,
                      "source": " TextEdit"
                    }
                  },
                  {
                    "doc": "An optional array of additional {@link TextEdit text edits} that are applied when\n selecting this color presentation. Edits must not overlap with the main {@link ColorPresentation.textEdit edit} nor with themselves.",
                    "isMethod": false,
                    "_": 5017,
                    "source": "\n\n\t\t/**\n\t\t * An optional array of additional {@link TextEdit text edits} that are applied when\n\t\t * selecting this color presentation. Edits must not overlap with the main {@link ColorPresentation.textEdit edit} nor with themselves.\n\t\t */\n\t\tadditionalTextEdits?: TextEdit[];",
                    "name": "additionalTextEdits",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "ref": "TextEdit",
                          "targs": [],
                          "isNullable": false,
                          "_": 5017,
                          "source": " TextEdit"
                        }
                      ],
                      "isNullable": false,
                      "_": 5017,
                      "source": " TextEdit[]"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline25",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "DocumentColorProvider",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 5052,
                    "source": " readonly document: TextDocument;",
                    "name": "document",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "TextDocument",
                      "targs": [],
                      "isNullable": false,
                      "_": 5052,
                      "source": " TextDocument"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 5052,
                    "source": " readonly range: Range",
                    "name": "range",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Range",
                      "targs": [],
                      "isNullable": false,
                      "_": 5052,
                      "source": " Range"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 5031,
                "name": "DocumentColorProvider",
                "generics": [],
                "doc": "The document color provider defines the contract between extensions and feature of\npicking and modifying colors in the editor.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Provide colors for the given document.\n\n @param document The document in which the command was invoked.\n @param token A cancellation token.\n @return An array of {@link ColorInformation color information} or a thenable that resolves to such. The lack of a result\n can be signaled by returning `undefined`, `null`, or an empty array.",
                    "isMethod": true,
                    "_": 5041,
                    "source": "\n\n\t\t/**\n\t\t * Provide colors for the given document.\n\t\t *\n\t\t * @param document The document in which the command was invoked.\n\t\t * @param token A cancellation token.\n\t\t * @return An array of {@link ColorInformation color information} or a thenable that resolves to such. The lack of a result\n\t\t * can be signaled by returning `undefined`, `null`, or an empty array.\n\t\t */\n\t\tprovideDocumentColors(document: TextDocument, token: CancellationToken): ProviderResult<ColorInformation[]>;",
                    "name": "provideDocumentColors",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "document",
                        "type": {
                          "ref": "TextDocument",
                          "targs": [],
                          "isNullable": false,
                          "_": 5041,
                          "source": " TextDocument"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 5041,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "ColorInformation",
                              "targs": [],
                              "isNullable": false,
                              "_": 5041,
                              "source": "ColorInformation"
                            }
                          ],
                          "isNullable": false,
                          "_": 5041,
                          "source": "ColorInformation[]"
                        }
                      ],
                      "isNullable": false,
                      "_": 5041,
                      "source": " ProviderResult<ColorInformation[]>"
                    }
                  },
                  {
                    "doc": "Provide {@link ColorPresentation representations} for a color.\n\n @param color The color to show and insert.\n @param context A context object with additional information\n @param token A cancellation token.\n @return An array of color presentations or a thenable that resolves to such. The lack of a result\n can be signaled by returning `undefined`, `null`, or an empty array.",
                    "isMethod": true,
                    "_": 5052,
                    "source": "\n\n\t\t/**\n\t\t * Provide {@link ColorPresentation representations} for a color.\n\t\t *\n\t\t * @param color The color to show and insert.\n\t\t * @param context A context object with additional information\n\t\t * @param token A cancellation token.\n\t\t * @return An array of color presentations or a thenable that resolves to such. The lack of a result\n\t\t * can be signaled by returning `undefined`, `null`, or an empty array.\n\t\t */\n\t\tprovideColorPresentations(color: Color, context: { readonly document: TextDocument; readonly range: Range }, token: CancellationToken): ProviderResult<ColorPresentation[]>;",
                    "name": "provideColorPresentations",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "color",
                        "type": {
                          "ref": "Color",
                          "targs": [],
                          "isNullable": false,
                          "_": 5052,
                          "source": " Color"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "context",
                        "type": {
                          "ref": "IInline25",
                          "targs": [],
                          "isNullable": false,
                          "_": 5052,
                          "source": " { readonly document: TextDocument; readonly range: Range }"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 5052,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "ColorPresentation",
                              "targs": [],
                              "isNullable": false,
                              "_": 5052,
                              "source": "ColorPresentation"
                            }
                          ],
                          "isNullable": false,
                          "_": 5052,
                          "source": "ColorPresentation[]"
                        }
                      ],
                      "isNullable": false,
                      "_": 5052,
                      "source": " ProviderResult<ColorPresentation[]>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 5075,
                "name": "InlayHintLabelPart",
                "generics": [],
                "doc": "An inlay hint label part allows for interactive and composite labels of inlay hints.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 5120,
                    "source": "\n\n\t\t/**\n\t\t * Creates a new inlay hint label part.\n\t\t *\n\t\t * @param value The value of the part.\n\t\t */\n\t\tconstructor(value: string);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "value",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 5120,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The value of this label part.",
                    "isMethod": false,
                    "_": 5080,
                    "source": "\n\n\t\t/**\n\t\t * The value of this label part.\n\t\t */\n\t\tvalue: string;",
                    "name": "value",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 5080,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The tooltip text when you hover over this label part.\n\n *Note* that this property can be set late during\n {@link InlayHintsProvider.resolveInlayHint resolving} of inlay hints.",
                    "isMethod": false,
                    "_": 5088,
                    "source": "\n\n\t\t/**\n\t\t * The tooltip text when you hover over this label part.\n\t\t *\n\t\t * *Note* that this property can be set late during\n\t\t * {@link InlayHintsProvider.resolveInlayHint resolving} of inlay hints.\n\t\t */\n\t\ttooltip?: string | MarkdownString | undefined;",
                    "name": "tooltip",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 5088,
                          "source": " string"
                        },
                        {
                          "ref": "MarkdownString",
                          "targs": [],
                          "isNullable": false,
                          "_": 5088,
                          "source": " MarkdownString"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 5088,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 5088,
                      "source": " string | MarkdownString | undefined"
                    }
                  },
                  {
                    "doc": "An optional {@link Location source code location} that represents this label\n part.\n\n The editor will use this location for the hover and for code navigation features: This\n part will become a clickable link that resolves to the definition of the symbol at the\n given location (not necessarily the location itself), it shows the hover that shows at\n the given location, and it shows a context menu with further code navigation commands.\n\n *Note* that this property can be set late during\n {@link InlayHintsProvider.resolveInlayHint resolving} of inlay hints.",
                    "isMethod": false,
                    "_": 5102,
                    "source": "\n\n\t\t/**\n\t\t * An optional {@link Location source code location} that represents this label\n\t\t * part.\n\t\t *\n\t\t * The editor will use this location for the hover and for code navigation features: This\n\t\t * part will become a clickable link that resolves to the definition of the symbol at the\n\t\t * given location (not necessarily the location itself), it shows the hover that shows at\n\t\t * the given location, and it shows a context menu with further code navigation commands.\n\t\t *\n\t\t * *Note* that this property can be set late during\n\t\t * {@link InlayHintsProvider.resolveInlayHint resolving} of inlay hints.\n\t\t */\n\t\tlocation?: Location | undefined;",
                    "name": "location",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "Location",
                          "targs": [],
                          "isNullable": false,
                          "_": 5102,
                          "source": " Location"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 5102,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 5102,
                      "source": " Location | undefined"
                    }
                  },
                  {
                    "doc": "An optional command for this label part.\n\n The editor renders parts with commands as clickable links. The command is added to the context menu\n when a label part defines {@link InlayHintLabelPart.location location} and {@link InlayHintLabelPart.command command} .\n\n *Note* that this property can be set late during\n {@link InlayHintsProvider.resolveInlayHint resolving} of inlay hints.",
                    "isMethod": false,
                    "_": 5113,
                    "source": "\n\n\t\t/**\n\t\t * An optional command for this label part.\n\t\t *\n\t\t * The editor renders parts with commands as clickable links. The command is added to the context menu\n\t\t * when a label part defines {@link InlayHintLabelPart.location location} and {@link InlayHintLabelPart.command command} .\n\t\t *\n\t\t * *Note* that this property can be set late during\n\t\t * {@link InlayHintsProvider.resolveInlayHint resolving} of inlay hints.\n\t\t */\n\t\tcommand?: Command | undefined;",
                    "name": "command",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "Command",
                          "targs": [],
                          "isNullable": false,
                          "_": 5113,
                          "source": " Command"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 5113,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 5113,
                      "source": " Command | undefined"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 5126,
                "name": "InlayHint",
                "generics": [],
                "doc": "Inlay hint information.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 5186,
                    "source": "\n\n\t\t/**\n\t\t * Creates a new inlay hint.\n\t\t *\n\t\t * @param position The position of the hint.\n\t\t * @param label The label of the hint.\n\t\t * @param kind The {@link InlayHintKind kind} of the hint.\n\t\t */\n\t\tconstructor(position: Position, label: string | InlayHintLabelPart[], kind?: InlayHintKind);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "position",
                        "type": {
                          "ref": "Position",
                          "targs": [],
                          "isNullable": false,
                          "_": 5186,
                          "source": " Position"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "label",
                        "type": {
                          "union": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 5186,
                              "source": " string"
                            },
                            {
                              "core": "array",
                              "targs": [
                                {
                                  "ref": "InlayHintLabelPart",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 5186,
                                  "source": " InlayHintLabelPart"
                                }
                              ],
                              "isNullable": false,
                              "_": 5186,
                              "source": " InlayHintLabelPart[]"
                            }
                          ],
                          "isNullable": false,
                          "_": 5186,
                          "source": " string | InlayHintLabelPart[]"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "kind",
                        "type": {
                          "ref": "InlayHintKind",
                          "targs": [],
                          "isNullable": false,
                          "_": 5186,
                          "source": " InlayHintKind"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The position of this hint.",
                    "isMethod": false,
                    "_": 5131,
                    "source": "\n\n\t\t/**\n\t\t * The position of this hint.\n\t\t */\n\t\tposition: Position;",
                    "name": "position",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Position",
                      "targs": [],
                      "isNullable": false,
                      "_": 5131,
                      "source": " Position"
                    }
                  },
                  {
                    "doc": "The label of this hint. A human readable string or an array of {@link InlayHintLabelPart label parts}.\n\n *Note* that neither the string nor the label part can be empty.",
                    "isMethod": false,
                    "_": 5138,
                    "source": "\n\n\t\t/**\n\t\t * The label of this hint. A human readable string or an array of {@link InlayHintLabelPart label parts}.\n\t\t *\n\t\t * *Note* that neither the string nor the label part can be empty.\n\t\t */\n\t\tlabel: string | InlayHintLabelPart[];",
                    "name": "label",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 5138,
                          "source": " string"
                        },
                        {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "InlayHintLabelPart",
                              "targs": [],
                              "isNullable": false,
                              "_": 5138,
                              "source": " InlayHintLabelPart"
                            }
                          ],
                          "isNullable": false,
                          "_": 5138,
                          "source": " InlayHintLabelPart[]"
                        }
                      ],
                      "isNullable": false,
                      "_": 5138,
                      "source": " string | InlayHintLabelPart[]"
                    }
                  },
                  {
                    "doc": "The tooltip text when you hover over this item.\n\n *Note* that this property can be set late during\n {@link InlayHintsProvider.resolveInlayHint resolving} of inlay hints.",
                    "isMethod": false,
                    "_": 5146,
                    "source": "\n\n\t\t/**\n\t\t * The tooltip text when you hover over this item.\n\t\t *\n\t\t * *Note* that this property can be set late during\n\t\t * {@link InlayHintsProvider.resolveInlayHint resolving} of inlay hints.\n\t\t */\n\t\ttooltip?: string | MarkdownString | undefined;",
                    "name": "tooltip",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 5146,
                          "source": " string"
                        },
                        {
                          "ref": "MarkdownString",
                          "targs": [],
                          "isNullable": false,
                          "_": 5146,
                          "source": " MarkdownString"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 5146,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 5146,
                      "source": " string | MarkdownString | undefined"
                    }
                  },
                  {
                    "doc": "The kind of this hint. The inlay hint kind defines the appearance of this inlay hint.",
                    "isMethod": false,
                    "_": 5151,
                    "source": "\n\n\t\t/**\n\t\t * The kind of this hint. The inlay hint kind defines the appearance of this inlay hint.\n\t\t */\n\t\tkind?: InlayHintKind;",
                    "name": "kind",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "InlayHintKind",
                      "targs": [],
                      "isNullable": false,
                      "_": 5151,
                      "source": " InlayHintKind"
                    }
                  },
                  {
                    "doc": "Optional {@link TextEdit text edits} that are performed when accepting this inlay hint. The default\n gesture for accepting an inlay hint is the double click.\n\n *Note* that edits are expected to change the document so that the inlay hint (or its nearest variant) is\n now part of the document and the inlay hint itself is now obsolete.\n\n *Note* that this property can be set late during\n {@link InlayHintsProvider.resolveInlayHint resolving} of inlay hints.",
                    "isMethod": false,
                    "_": 5163,
                    "source": "\n\n\t\t/**\n\t\t * Optional {@link TextEdit text edits} that are performed when accepting this inlay hint. The default\n\t\t * gesture for accepting an inlay hint is the double click.\n\t\t *\n\t\t * *Note* that edits are expected to change the document so that the inlay hint (or its nearest variant) is\n\t\t * now part of the document and the inlay hint itself is now obsolete.\n\t\t *\n\t\t * *Note* that this property can be set late during\n\t\t * {@link InlayHintsProvider.resolveInlayHint resolving} of inlay hints.\n\t\t */\n\t\ttextEdits?: TextEdit[];",
                    "name": "textEdits",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "ref": "TextEdit",
                          "targs": [],
                          "isNullable": false,
                          "_": 5163,
                          "source": " TextEdit"
                        }
                      ],
                      "isNullable": false,
                      "_": 5163,
                      "source": " TextEdit[]"
                    }
                  },
                  {
                    "doc": "Render padding before the hint. Padding will use the editor's background color,\n not the background color of the hint itself. That means padding can be used to visually\n align/separate an inlay hint.",
                    "isMethod": false,
                    "_": 5170,
                    "source": "\n\n\t\t/**\n\t\t * Render padding before the hint. Padding will use the editor's background color,\n\t\t * not the background color of the hint itself. That means padding can be used to visually\n\t\t * align/separate an inlay hint.\n\t\t */\n\t\tpaddingLeft?: boolean;",
                    "name": "paddingLeft",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 5170,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Render padding after the hint. Padding will use the editor's background color,\n not the background color of the hint itself. That means padding can be used to visually\n align/separate an inlay hint.",
                    "isMethod": false,
                    "_": 5177,
                    "source": "\n\n\t\t/**\n\t\t * Render padding after the hint. Padding will use the editor's background color,\n\t\t * not the background color of the hint itself. That means padding can be used to visually\n\t\t * align/separate an inlay hint.\n\t\t */\n\t\tpaddingRight?: boolean;",
                    "name": "paddingRight",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 5177,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 5193,
                "name": "InlayHintsProvider",
                "generics": [
                  {
                    "name": "T",
                    "constraint": {
                      "ref": "InlayHint",
                      "targs": [],
                      "isNullable": false,
                      "_": 5193,
                      "source": " InlayHint"
                    },
                    "default": {
                      "ref": "InlayHint",
                      "targs": [],
                      "isNullable": false,
                      "_": 5193,
                      "source": " InlayHint"
                    },
                    "_": 5193,
                    "source": "T extends InlayHint = InlayHint"
                  }
                ],
                "doc": "The inlay hints provider interface defines the contract between extensions and\nthe inlay hints feature.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "An optional event to signal that inlay hints from this provider have changed.",
                    "isMethod": false,
                    "_": 5198,
                    "source": "\n\n\t\t/**\n\t\t * An optional event to signal that inlay hints from this provider have changed.\n\t\t */\n\t\tonDidChangeInlayHints?: Event<void>;",
                    "name": "onDidChangeInlayHints",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 5198,
                          "source": "void"
                        }
                      ],
                      "isNullable": false,
                      "_": 5198,
                      "source": " Event<void>"
                    }
                  },
                  {
                    "doc": "Provide inlay hints for the given range and document.\n\n *Note* that inlay hints that are not {@link Range.contains contained} by the given range are ignored.\n\n @param document The document in which the command was invoked.\n @param range The range for which inlay hints should be computed.\n @param token A cancellation token.\n @return An array of inlay hints or a thenable that resolves to such.",
                    "isMethod": true,
                    "_": 5210,
                    "source": "\n\n\t\t/**\n\t\t * Provide inlay hints for the given range and document.\n\t\t *\n\t\t * *Note* that inlay hints that are not {@link Range.contains contained} by the given range are ignored.\n\t\t *\n\t\t * @param document The document in which the command was invoked.\n\t\t * @param range The range for which inlay hints should be computed.\n\t\t * @param token A cancellation token.\n\t\t * @return An array of inlay hints or a thenable that resolves to such.\n\t\t */\n\t\tprovideInlayHints(document: TextDocument, range: Range, token: CancellationToken): ProviderResult<T[]>;",
                    "name": "provideInlayHints",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "document",
                        "type": {
                          "ref": "TextDocument",
                          "targs": [],
                          "isNullable": false,
                          "_": 5210,
                          "source": " TextDocument"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "range",
                        "type": {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 5210,
                          "source": " Range"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 5210,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "T",
                              "targs": [],
                              "isNullable": false,
                              "_": 5210,
                              "source": "T"
                            }
                          ],
                          "isNullable": false,
                          "_": 5210,
                          "source": "T[]"
                        }
                      ],
                      "isNullable": false,
                      "_": 5210,
                      "source": " ProviderResult<T[]>"
                    }
                  },
                  {
                    "doc": "Given an inlay hint fill in {@link InlayHint.tooltip tooltip}, {@link InlayHint.textEdits text edits},\n or complete label {@link InlayHintLabelPart parts}.\n\n *Note* that the editor will resolve an inlay hint at most once.\n\n @param hint An inlay hint.\n @param token A cancellation token.\n @return The resolved inlay hint or a thenable that resolves to such. It is OK to return the given `item`. When no result is returned, the given `item` will be used.",
                    "isMethod": true,
                    "_": 5222,
                    "source": "\n\n\t\t/**\n\t\t * Given an inlay hint fill in {@link InlayHint.tooltip tooltip}, {@link InlayHint.textEdits text edits},\n\t\t * or complete label {@link InlayHintLabelPart parts}.\n\t\t *\n\t\t * *Note* that the editor will resolve an inlay hint at most once.\n\t\t *\n\t\t * @param hint An inlay hint.\n\t\t * @param token A cancellation token.\n\t\t * @return The resolved inlay hint or a thenable that resolves to such. It is OK to return the given `item`. When no result is returned, the given `item` will be used.\n\t\t */\n\t\tresolveInlayHint?(hint: T, token: CancellationToken): ProviderResult<T>;",
                    "name": "resolveInlayHint",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "hint",
                        "type": {
                          "ref": "T",
                          "targs": [],
                          "isNullable": false,
                          "_": 5222,
                          "source": " T"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 5222,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "ref": "T",
                          "targs": [],
                          "isNullable": false,
                          "_": 5222,
                          "source": "T"
                        }
                      ],
                      "isNullable": false,
                      "_": 5222,
                      "source": " ProviderResult<T>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 5229,
                "name": "FoldingRange",
                "generics": [],
                "doc": "A line based folding range. To be valid, start and end line must be bigger than zero and smaller than the number of lines in the document.\nInvalid ranges will be ignored.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 5259,
                    "source": "\n\n\t\t/**\n\t\t * Creates a new folding range.\n\t\t *\n\t\t * @param start The start line of the folded range.\n\t\t * @param end The end line of the folded range.\n\t\t * @param kind The kind of the folding range.\n\t\t */\n\t\tconstructor(start: number, end: number, kind?: FoldingRangeKind);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "start",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 5259,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "end",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 5259,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "kind",
                        "type": {
                          "ref": "FoldingRangeKind",
                          "targs": [],
                          "isNullable": false,
                          "_": 5259,
                          "source": " FoldingRangeKind"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The zero-based start line of the range to fold. The folded area starts after the line's last character.\n To be valid, the end must be zero or larger and smaller than the number of lines in the document.",
                    "isMethod": false,
                    "_": 5235,
                    "source": "\n\n\t\t/**\n\t\t * The zero-based start line of the range to fold. The folded area starts after the line's last character.\n\t\t * To be valid, the end must be zero or larger and smaller than the number of lines in the document.\n\t\t */\n\t\tstart: number;",
                    "name": "start",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 5235,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "The zero-based end line of the range to fold. The folded area ends with the line's last character.\n To be valid, the end must be zero or larger and smaller than the number of lines in the document.",
                    "isMethod": false,
                    "_": 5241,
                    "source": "\n\n\t\t/**\n\t\t * The zero-based end line of the range to fold. The folded area ends with the line's last character.\n\t\t * To be valid, the end must be zero or larger and smaller than the number of lines in the document.\n\t\t */\n\t\tend: number;",
                    "name": "end",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 5241,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "Describes the {@link FoldingRangeKind Kind} of the folding range such as {@link FoldingRangeKind.Comment Comment} or\n {@link FoldingRangeKind.Region Region}. The kind is used to categorize folding ranges and used by commands\n like 'Fold all comments'. See\n {@link FoldingRangeKind} for an enumeration of all kinds.\n If not set, the range is originated from a syntax element.",
                    "isMethod": false,
                    "_": 5250,
                    "source": "\n\n\t\t/**\n\t\t * Describes the {@link FoldingRangeKind Kind} of the folding range such as {@link FoldingRangeKind.Comment Comment} or\n\t\t * {@link FoldingRangeKind.Region Region}. The kind is used to categorize folding ranges and used by commands\n\t\t * like 'Fold all comments'. See\n\t\t * {@link FoldingRangeKind} for an enumeration of all kinds.\n\t\t * If not set, the range is originated from a syntax element.\n\t\t */\n\t\tkind?: FoldingRangeKind;",
                    "name": "kind",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "FoldingRangeKind",
                      "targs": [],
                      "isNullable": false,
                      "_": 5250,
                      "source": " FoldingRangeKind"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 5286,
                "name": "FoldingContext",
                "generics": [],
                "doc": "Folding context (for future use)",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [],
                "calls": [],
                "isClass": false
              },
              {
                "_": 5293,
                "name": "FoldingRangeProvider",
                "generics": [],
                "doc": "The folding range provider interface defines the contract between extensions and\n[Folding](https://code.visualstudio.com/docs/editor/codebasics#_folding) in the editor.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "An optional event to signal that the folding ranges from this provider have changed.",
                    "isMethod": false,
                    "_": 5298,
                    "source": "\n\n\t\t/**\n\t\t * An optional event to signal that the folding ranges from this provider have changed.\n\t\t */\n\t\tonDidChangeFoldingRanges?: Event<void>;",
                    "name": "onDidChangeFoldingRanges",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 5298,
                          "source": "void"
                        }
                      ],
                      "isNullable": false,
                      "_": 5298,
                      "source": " Event<void>"
                    }
                  },
                  {
                    "doc": "Returns a list of folding ranges or null and undefined if the provider\n does not want to participate or was cancelled.\n @param document The document in which the command was invoked.\n @param context Additional context information (for future use)\n @param token A cancellation token.",
                    "isMethod": true,
                    "_": 5307,
                    "source": "\n\n\t\t/**\n\t\t * Returns a list of folding ranges or null and undefined if the provider\n\t\t * does not want to participate or was cancelled.\n\t\t * @param document The document in which the command was invoked.\n\t\t * @param context Additional context information (for future use)\n\t\t * @param token A cancellation token.\n\t\t */\n\t\tprovideFoldingRanges(document: TextDocument, context: FoldingContext, token: CancellationToken): ProviderResult<FoldingRange[]>;",
                    "name": "provideFoldingRanges",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "document",
                        "type": {
                          "ref": "TextDocument",
                          "targs": [],
                          "isNullable": false,
                          "_": 5307,
                          "source": " TextDocument"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "context",
                        "type": {
                          "ref": "FoldingContext",
                          "targs": [],
                          "isNullable": false,
                          "_": 5307,
                          "source": " FoldingContext"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 5307,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "FoldingRange",
                              "targs": [],
                              "isNullable": false,
                              "_": 5307,
                              "source": "FoldingRange"
                            }
                          ],
                          "isNullable": false,
                          "_": 5307,
                          "source": "FoldingRange[]"
                        }
                      ],
                      "isNullable": false,
                      "_": 5307,
                      "source": " ProviderResult<FoldingRange[]>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 5314,
                "name": "SelectionRange",
                "generics": [],
                "doc": "A selection range represents a part of a selection hierarchy. A selection range\nmay have a parent selection range that contains it.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 5332,
                    "source": "\n\n\t\t/**\n\t\t * Creates a new selection range.\n\t\t *\n\t\t * @param range The range of the selection range.\n\t\t * @param parent The parent of the selection range.\n\t\t */\n\t\tconstructor(range: Range, parent?: SelectionRange);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "range",
                        "type": {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 5332,
                          "source": " Range"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "parent",
                        "type": {
                          "ref": "SelectionRange",
                          "targs": [],
                          "isNullable": false,
                          "_": 5332,
                          "source": " SelectionRange"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The {@link Range} of this selection range.",
                    "isMethod": false,
                    "_": 5319,
                    "source": "\n\n\t\t/**\n\t\t * The {@link Range} of this selection range.\n\t\t */\n\t\trange: Range;",
                    "name": "range",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Range",
                      "targs": [],
                      "isNullable": false,
                      "_": 5319,
                      "source": " Range"
                    }
                  },
                  {
                    "doc": "The parent selection range containing this range.",
                    "isMethod": false,
                    "_": 5324,
                    "source": "\n\n\t\t/**\n\t\t * The parent selection range containing this range.\n\t\t */\n\t\tparent?: SelectionRange;",
                    "name": "parent",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "SelectionRange",
                      "targs": [],
                      "isNullable": false,
                      "_": 5324,
                      "source": " SelectionRange"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 5335,
                "name": "SelectionRangeProvider",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Provide selection ranges for the given positions.\n\n Selection ranges should be computed individually and independent for each position. The editor will merge\n and deduplicate ranges but providers must return hierarchies of selection ranges so that a range\n is {@link Range.contains contained} by its parent.\n\n @param document The document in which the command was invoked.\n @param positions The positions at which the command was invoked.\n @param token A cancellation token.\n @return Selection ranges or a thenable that resolves to such. The lack of a result can be\n signaled by returning `undefined` or `null`.",
                    "isMethod": true,
                    "_": 5349,
                    "source": "\n\t\t/**\n\t\t * Provide selection ranges for the given positions.\n\t\t *\n\t\t * Selection ranges should be computed individually and independent for each position. The editor will merge\n\t\t * and deduplicate ranges but providers must return hierarchies of selection ranges so that a range\n\t\t * is {@link Range.contains contained} by its parent.\n\t\t *\n\t\t * @param document The document in which the command was invoked.\n\t\t * @param positions The positions at which the command was invoked.\n\t\t * @param token A cancellation token.\n\t\t * @return Selection ranges or a thenable that resolves to such. The lack of a result can be\n\t\t * signaled by returning `undefined` or `null`.\n\t\t */\n\t\tprovideSelectionRanges(document: TextDocument, positions: readonly Position[], token: CancellationToken): ProviderResult<SelectionRange[]>;",
                    "name": "provideSelectionRanges",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "document",
                        "type": {
                          "ref": "TextDocument",
                          "targs": [],
                          "isNullable": false,
                          "_": 5349,
                          "source": " TextDocument"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "positions",
                        "type": {
                          "operator": 146,
                          "type": {
                            "core": "array",
                            "targs": [
                              {
                                "ref": "Position",
                                "targs": [],
                                "isNullable": false,
                                "_": 5349,
                                "source": " Position"
                              }
                            ],
                            "isNullable": false,
                            "_": 5349,
                            "source": " Position[]"
                          },
                          "isNullable": false,
                          "_": 5349,
                          "source": " readonly Position[]"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 5349,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "SelectionRange",
                              "targs": [],
                              "isNullable": false,
                              "_": 5349,
                              "source": "SelectionRange"
                            }
                          ],
                          "isNullable": false,
                          "_": 5349,
                          "source": "SelectionRange[]"
                        }
                      ],
                      "isNullable": false,
                      "_": 5349,
                      "source": " ProviderResult<SelectionRange[]>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 5356,
                "name": "CallHierarchyItem",
                "generics": [],
                "doc": "Represents programming constructs like functions or constructors in the context\nof call hierarchy.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 5396,
                    "source": "\n\n\t\t/**\n\t\t * Creates a new call hierarchy item.\n\t\t */\n\t\tconstructor(kind: SymbolKind, name: string, detail: string, uri: Uri, range: Range, selectionRange: Range);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "kind",
                        "type": {
                          "ref": "SymbolKind",
                          "targs": [],
                          "isNullable": false,
                          "_": 5396,
                          "source": " SymbolKind"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "name",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 5396,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "detail",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 5396,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "uri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 5396,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "range",
                        "type": {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 5396,
                          "source": " Range"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "selectionRange",
                        "type": {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 5396,
                          "source": " Range"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The name of this item.",
                    "isMethod": false,
                    "_": 5360,
                    "source": "\n\t\t/**\n\t\t * The name of this item.\n\t\t */\n\t\tname: string;",
                    "name": "name",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 5360,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The kind of this item.",
                    "isMethod": false,
                    "_": 5365,
                    "source": "\n\n\t\t/**\n\t\t * The kind of this item.\n\t\t */\n\t\tkind: SymbolKind;",
                    "name": "kind",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "SymbolKind",
                      "targs": [],
                      "isNullable": false,
                      "_": 5365,
                      "source": " SymbolKind"
                    }
                  },
                  {
                    "doc": "Tags for this item.",
                    "isMethod": false,
                    "_": 5370,
                    "source": "\n\n\t\t/**\n\t\t * Tags for this item.\n\t\t */\n\t\ttags?: readonly SymbolTag[];",
                    "name": "tags",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "SymbolTag",
                            "targs": [],
                            "isNullable": false,
                            "_": 5370,
                            "source": " SymbolTag"
                          }
                        ],
                        "isNullable": false,
                        "_": 5370,
                        "source": " SymbolTag[]"
                      },
                      "isNullable": false,
                      "_": 5370,
                      "source": " readonly SymbolTag[]"
                    }
                  },
                  {
                    "doc": "More detail for this item, e.g. the signature of a function.",
                    "isMethod": false,
                    "_": 5375,
                    "source": "\n\n\t\t/**\n\t\t * More detail for this item, e.g. the signature of a function.\n\t\t */\n\t\tdetail?: string;",
                    "name": "detail",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 5375,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The resource identifier of this item.",
                    "isMethod": false,
                    "_": 5380,
                    "source": "\n\n\t\t/**\n\t\t * The resource identifier of this item.\n\t\t */\n\t\turi: Uri;",
                    "name": "uri",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 5380,
                      "source": " Uri"
                    }
                  },
                  {
                    "doc": "The range enclosing this symbol not including leading/trailing whitespace but everything else, e.g. comments and code.",
                    "isMethod": false,
                    "_": 5385,
                    "source": "\n\n\t\t/**\n\t\t * The range enclosing this symbol not including leading/trailing whitespace but everything else, e.g. comments and code.\n\t\t */\n\t\trange: Range;",
                    "name": "range",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Range",
                      "targs": [],
                      "isNullable": false,
                      "_": 5385,
                      "source": " Range"
                    }
                  },
                  {
                    "doc": "The range that should be selected and revealed when this symbol is being picked, e.g. the name of a function.\n Must be contained by the {@linkcode CallHierarchyItem.range range}.",
                    "isMethod": false,
                    "_": 5391,
                    "source": "\n\n\t\t/**\n\t\t * The range that should be selected and revealed when this symbol is being picked, e.g. the name of a function.\n\t\t * Must be contained by the {@linkcode CallHierarchyItem.range range}.\n\t\t */\n\t\tselectionRange: Range;",
                    "name": "selectionRange",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Range",
                      "targs": [],
                      "isNullable": false,
                      "_": 5391,
                      "source": " Range"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 5402,
                "name": "CallHierarchyIncomingCall",
                "generics": [],
                "doc": "Represents an incoming call, e.g. a caller of a method or constructor.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 5421,
                    "source": "\n\n\t\t/**\n\t\t * Create a new call object.\n\t\t *\n\t\t * @param item The item making the call.\n\t\t * @param fromRanges The ranges at which the calls appear.\n\t\t */\n\t\tconstructor(item: CallHierarchyItem, fromRanges: Range[]);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "item",
                        "type": {
                          "ref": "CallHierarchyItem",
                          "targs": [],
                          "isNullable": false,
                          "_": 5421,
                          "source": " CallHierarchyItem"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "fromRanges",
                        "type": {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "Range",
                              "targs": [],
                              "isNullable": false,
                              "_": 5421,
                              "source": " Range"
                            }
                          ],
                          "isNullable": false,
                          "_": 5421,
                          "source": " Range[]"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The item that makes the call.",
                    "isMethod": false,
                    "_": 5407,
                    "source": "\n\n\t\t/**\n\t\t * The item that makes the call.\n\t\t */\n\t\tfrom: CallHierarchyItem;",
                    "name": "from",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "CallHierarchyItem",
                      "targs": [],
                      "isNullable": false,
                      "_": 5407,
                      "source": " CallHierarchyItem"
                    }
                  },
                  {
                    "doc": "The range at which at which the calls appears. This is relative to the caller\n denoted by {@linkcode CallHierarchyIncomingCall.from this.from}.",
                    "isMethod": false,
                    "_": 5413,
                    "source": "\n\n\t\t/**\n\t\t * The range at which at which the calls appears. This is relative to the caller\n\t\t * denoted by {@linkcode CallHierarchyIncomingCall.from this.from}.\n\t\t */\n\t\tfromRanges: Range[];",
                    "name": "fromRanges",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 5413,
                          "source": " Range"
                        }
                      ],
                      "isNullable": false,
                      "_": 5413,
                      "source": " Range[]"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 5427,
                "name": "CallHierarchyOutgoingCall",
                "generics": [],
                "doc": "Represents an outgoing call, e.g. calling a getter from a method or a method from a constructor etc.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 5447,
                    "source": "\n\n\t\t/**\n\t\t * Create a new call object.\n\t\t *\n\t\t * @param item The item being called\n\t\t * @param fromRanges The ranges at which the calls appear.\n\t\t */\n\t\tconstructor(item: CallHierarchyItem, fromRanges: Range[]);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "item",
                        "type": {
                          "ref": "CallHierarchyItem",
                          "targs": [],
                          "isNullable": false,
                          "_": 5447,
                          "source": " CallHierarchyItem"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "fromRanges",
                        "type": {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "Range",
                              "targs": [],
                              "isNullable": false,
                              "_": 5447,
                              "source": " Range"
                            }
                          ],
                          "isNullable": false,
                          "_": 5447,
                          "source": " Range[]"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The item that is called.",
                    "isMethod": false,
                    "_": 5432,
                    "source": "\n\n\t\t/**\n\t\t * The item that is called.\n\t\t */\n\t\tto: CallHierarchyItem;",
                    "name": "to",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "CallHierarchyItem",
                      "targs": [],
                      "isNullable": false,
                      "_": 5432,
                      "source": " CallHierarchyItem"
                    }
                  },
                  {
                    "doc": "The range at which this item is called. This is the range relative to the caller, e.g the item\n passed to {@linkcode CallHierarchyProvider.provideCallHierarchyOutgoingCalls provideCallHierarchyOutgoingCalls}\n and not {@linkcode CallHierarchyOutgoingCall.to this.to}.",
                    "isMethod": false,
                    "_": 5439,
                    "source": "\n\n\t\t/**\n\t\t * The range at which this item is called. This is the range relative to the caller, e.g the item\n\t\t * passed to {@linkcode CallHierarchyProvider.provideCallHierarchyOutgoingCalls provideCallHierarchyOutgoingCalls}\n\t\t * and not {@linkcode CallHierarchyOutgoingCall.to this.to}.\n\t\t */\n\t\tfromRanges: Range[];",
                    "name": "fromRanges",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 5439,
                          "source": " Range"
                        }
                      ],
                      "isNullable": false,
                      "_": 5439,
                      "source": " Range[]"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 5455,
                "name": "CallHierarchyProvider",
                "generics": [],
                "doc": "The call hierarchy provider interface describes the contract between extensions\nand the call hierarchy feature which allows to browse calls and caller of function,\nmethods, constructor etc.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Bootstraps call hierarchy by returning the item that is denoted by the given document\n and position. This item will be used as entry into the call graph. Providers should\n return `undefined` or `null` when there is no item at the given location.\n\n @param document The document in which the command was invoked.\n @param position The position at which the command was invoked.\n @param token A cancellation token.\n @returns One or multiple call hierarchy items or a thenable that resolves to such. The lack of a result can be\n signaled by returning `undefined`, `null`, or an empty array.",
                    "isMethod": true,
                    "_": 5468,
                    "source": "\n\n\t\t/**\n\t\t * Bootstraps call hierarchy by returning the item that is denoted by the given document\n\t\t * and position. This item will be used as entry into the call graph. Providers should\n\t\t * return `undefined` or `null` when there is no item at the given location.\n\t\t *\n\t\t * @param document The document in which the command was invoked.\n\t\t * @param position The position at which the command was invoked.\n\t\t * @param token A cancellation token.\n\t\t * @returns One or multiple call hierarchy items or a thenable that resolves to such. The lack of a result can be\n\t\t * signaled by returning `undefined`, `null`, or an empty array.\n\t\t */\n\t\tprepareCallHierarchy(document: TextDocument, position: Position, token: CancellationToken): ProviderResult<CallHierarchyItem | CallHierarchyItem[]>;",
                    "name": "prepareCallHierarchy",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "document",
                        "type": {
                          "ref": "TextDocument",
                          "targs": [],
                          "isNullable": false,
                          "_": 5468,
                          "source": " TextDocument"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "position",
                        "type": {
                          "ref": "Position",
                          "targs": [],
                          "isNullable": false,
                          "_": 5468,
                          "source": " Position"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 5468,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "union": [
                            {
                              "ref": "CallHierarchyItem",
                              "targs": [],
                              "isNullable": false,
                              "_": 5468,
                              "source": "CallHierarchyItem"
                            },
                            {
                              "core": "array",
                              "targs": [
                                {
                                  "ref": "CallHierarchyItem",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 5468,
                                  "source": " CallHierarchyItem"
                                }
                              ],
                              "isNullable": false,
                              "_": 5468,
                              "source": " CallHierarchyItem[]"
                            }
                          ],
                          "isNullable": false,
                          "_": 5468,
                          "source": "CallHierarchyItem | CallHierarchyItem[]"
                        }
                      ],
                      "isNullable": false,
                      "_": 5468,
                      "source": " ProviderResult<CallHierarchyItem | CallHierarchyItem[]>"
                    }
                  },
                  {
                    "doc": "Provide all incoming calls for an item, e.g all callers for a method. In graph terms this describes directed\n and annotated edges inside the call graph, e.g the given item is the starting node and the result is the nodes\n that can be reached.\n\n @param item The hierarchy item for which incoming calls should be computed.\n @param token A cancellation token.\n @returns A set of incoming calls or a thenable that resolves to such. The lack of a result can be\n signaled by returning `undefined` or `null`.",
                    "isMethod": true,
                    "_": 5480,
                    "source": "\n\n\t\t/**\n\t\t * Provide all incoming calls for an item, e.g all callers for a method. In graph terms this describes directed\n\t\t * and annotated edges inside the call graph, e.g the given item is the starting node and the result is the nodes\n\t\t * that can be reached.\n\t\t *\n\t\t * @param item The hierarchy item for which incoming calls should be computed.\n\t\t * @param token A cancellation token.\n\t\t * @returns A set of incoming calls or a thenable that resolves to such. The lack of a result can be\n\t\t * signaled by returning `undefined` or `null`.\n\t\t */\n\t\tprovideCallHierarchyIncomingCalls(item: CallHierarchyItem, token: CancellationToken): ProviderResult<CallHierarchyIncomingCall[]>;",
                    "name": "provideCallHierarchyIncomingCalls",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "item",
                        "type": {
                          "ref": "CallHierarchyItem",
                          "targs": [],
                          "isNullable": false,
                          "_": 5480,
                          "source": " CallHierarchyItem"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 5480,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "CallHierarchyIncomingCall",
                              "targs": [],
                              "isNullable": false,
                              "_": 5480,
                              "source": "CallHierarchyIncomingCall"
                            }
                          ],
                          "isNullable": false,
                          "_": 5480,
                          "source": "CallHierarchyIncomingCall[]"
                        }
                      ],
                      "isNullable": false,
                      "_": 5480,
                      "source": " ProviderResult<CallHierarchyIncomingCall[]>"
                    }
                  },
                  {
                    "doc": "Provide all outgoing calls for an item, e.g call calls to functions, methods, or constructors from the given item. In\n graph terms this describes directed and annotated edges inside the call graph, e.g the given item is the starting\n node and the result is the nodes that can be reached.\n\n @param item The hierarchy item for which outgoing calls should be computed.\n @param token A cancellation token.\n @returns A set of outgoing calls or a thenable that resolves to such. The lack of a result can be\n signaled by returning `undefined` or `null`.",
                    "isMethod": true,
                    "_": 5492,
                    "source": "\n\n\t\t/**\n\t\t * Provide all outgoing calls for an item, e.g call calls to functions, methods, or constructors from the given item. In\n\t\t * graph terms this describes directed and annotated edges inside the call graph, e.g the given item is the starting\n\t\t * node and the result is the nodes that can be reached.\n\t\t *\n\t\t * @param item The hierarchy item for which outgoing calls should be computed.\n\t\t * @param token A cancellation token.\n\t\t * @returns A set of outgoing calls or a thenable that resolves to such. The lack of a result can be\n\t\t * signaled by returning `undefined` or `null`.\n\t\t */\n\t\tprovideCallHierarchyOutgoingCalls(item: CallHierarchyItem, token: CancellationToken): ProviderResult<CallHierarchyOutgoingCall[]>;",
                    "name": "provideCallHierarchyOutgoingCalls",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "item",
                        "type": {
                          "ref": "CallHierarchyItem",
                          "targs": [],
                          "isNullable": false,
                          "_": 5492,
                          "source": " CallHierarchyItem"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 5492,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "CallHierarchyOutgoingCall",
                              "targs": [],
                              "isNullable": false,
                              "_": 5492,
                              "source": "CallHierarchyOutgoingCall"
                            }
                          ],
                          "isNullable": false,
                          "_": 5492,
                          "source": "CallHierarchyOutgoingCall[]"
                        }
                      ],
                      "isNullable": false,
                      "_": 5492,
                      "source": " ProviderResult<CallHierarchyOutgoingCall[]>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 5498,
                "name": "TypeHierarchyItem",
                "generics": [],
                "doc": "Represents an item of a type hierarchy, like a class or an interface.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 5546,
                    "source": "\n\n\t\t/**\n\t\t * Creates a new type hierarchy item.\n\t\t *\n\t\t * @param kind The kind of the item.\n\t\t * @param name The name of the item.\n\t\t * @param detail The details of the item.\n\t\t * @param uri The Uri of the item.\n\t\t * @param range The whole range of the item.\n\t\t * @param selectionRange The selection range of the item.\n\t\t */\n\t\tconstructor(kind: SymbolKind, name: string, detail: string, uri: Uri, range: Range, selectionRange: Range);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "kind",
                        "type": {
                          "ref": "SymbolKind",
                          "targs": [],
                          "isNullable": false,
                          "_": 5546,
                          "source": " SymbolKind"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "name",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 5546,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "detail",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 5546,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "uri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 5546,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "range",
                        "type": {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 5546,
                          "source": " Range"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "selectionRange",
                        "type": {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 5546,
                          "source": " Range"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The name of this item.",
                    "isMethod": false,
                    "_": 5502,
                    "source": "\n\t\t/**\n\t\t * The name of this item.\n\t\t */\n\t\tname: string;",
                    "name": "name",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 5502,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The kind of this item.",
                    "isMethod": false,
                    "_": 5507,
                    "source": "\n\n\t\t/**\n\t\t * The kind of this item.\n\t\t */\n\t\tkind: SymbolKind;",
                    "name": "kind",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "SymbolKind",
                      "targs": [],
                      "isNullable": false,
                      "_": 5507,
                      "source": " SymbolKind"
                    }
                  },
                  {
                    "doc": "Tags for this item.",
                    "isMethod": false,
                    "_": 5512,
                    "source": "\n\n\t\t/**\n\t\t * Tags for this item.\n\t\t */\n\t\ttags?: ReadonlyArray<SymbolTag>;",
                    "name": "tags",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "ReadonlyArray",
                      "targs": [
                        {
                          "ref": "SymbolTag",
                          "targs": [],
                          "isNullable": false,
                          "_": 5512,
                          "source": "SymbolTag"
                        }
                      ],
                      "isNullable": false,
                      "_": 5512,
                      "source": " ReadonlyArray<SymbolTag>"
                    }
                  },
                  {
                    "doc": "More detail for this item, e.g. the signature of a function.",
                    "isMethod": false,
                    "_": 5517,
                    "source": "\n\n\t\t/**\n\t\t * More detail for this item, e.g. the signature of a function.\n\t\t */\n\t\tdetail?: string;",
                    "name": "detail",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 5517,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The resource identifier of this item.",
                    "isMethod": false,
                    "_": 5522,
                    "source": "\n\n\t\t/**\n\t\t * The resource identifier of this item.\n\t\t */\n\t\turi: Uri;",
                    "name": "uri",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 5522,
                      "source": " Uri"
                    }
                  },
                  {
                    "doc": "The range enclosing this symbol not including leading/trailing whitespace\n but everything else, e.g. comments and code.",
                    "isMethod": false,
                    "_": 5528,
                    "source": "\n\n\t\t/**\n\t\t * The range enclosing this symbol not including leading/trailing whitespace\n\t\t * but everything else, e.g. comments and code.\n\t\t */\n\t\trange: Range;",
                    "name": "range",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Range",
                      "targs": [],
                      "isNullable": false,
                      "_": 5528,
                      "source": " Range"
                    }
                  },
                  {
                    "doc": "The range that should be selected and revealed when this symbol is being\n picked, e.g. the name of a class. Must be contained by the {@link TypeHierarchyItem.range range}-property.",
                    "isMethod": false,
                    "_": 5534,
                    "source": "\n\n\t\t/**\n\t\t * The range that should be selected and revealed when this symbol is being\n\t\t * picked, e.g. the name of a class. Must be contained by the {@link TypeHierarchyItem.range range}-property.\n\t\t */\n\t\tselectionRange: Range;",
                    "name": "selectionRange",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Range",
                      "targs": [],
                      "isNullable": false,
                      "_": 5534,
                      "source": " Range"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 5553,
                "name": "TypeHierarchyProvider",
                "generics": [],
                "doc": "The type hierarchy provider interface describes the contract between extensions\nand the type hierarchy feature.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Bootstraps type hierarchy by returning the item that is denoted by the given document\n and position. This item will be used as entry into the type graph. Providers should\n return `undefined` or `null` when there is no item at the given location.\n\n @param document The document in which the command was invoked.\n @param position The position at which the command was invoked.\n @param token A cancellation token.\n @returns One or multiple type hierarchy items or a thenable that resolves to such. The lack of a result can be\n signaled by returning `undefined`, `null`, or an empty array.",
                    "isMethod": true,
                    "_": 5566,
                    "source": "\n\n\t\t/**\n\t\t * Bootstraps type hierarchy by returning the item that is denoted by the given document\n\t\t * and position. This item will be used as entry into the type graph. Providers should\n\t\t * return `undefined` or `null` when there is no item at the given location.\n\t\t *\n\t\t * @param document The document in which the command was invoked.\n\t\t * @param position The position at which the command was invoked.\n\t\t * @param token A cancellation token.\n\t\t * @returns One or multiple type hierarchy items or a thenable that resolves to such. The lack of a result can be\n\t\t * signaled by returning `undefined`, `null`, or an empty array.\n\t\t */\n\t\tprepareTypeHierarchy(document: TextDocument, position: Position, token: CancellationToken): ProviderResult<TypeHierarchyItem | TypeHierarchyItem[]>;",
                    "name": "prepareTypeHierarchy",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "document",
                        "type": {
                          "ref": "TextDocument",
                          "targs": [],
                          "isNullable": false,
                          "_": 5566,
                          "source": " TextDocument"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "position",
                        "type": {
                          "ref": "Position",
                          "targs": [],
                          "isNullable": false,
                          "_": 5566,
                          "source": " Position"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 5566,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "union": [
                            {
                              "ref": "TypeHierarchyItem",
                              "targs": [],
                              "isNullable": false,
                              "_": 5566,
                              "source": "TypeHierarchyItem"
                            },
                            {
                              "core": "array",
                              "targs": [
                                {
                                  "ref": "TypeHierarchyItem",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 5566,
                                  "source": " TypeHierarchyItem"
                                }
                              ],
                              "isNullable": false,
                              "_": 5566,
                              "source": " TypeHierarchyItem[]"
                            }
                          ],
                          "isNullable": false,
                          "_": 5566,
                          "source": "TypeHierarchyItem | TypeHierarchyItem[]"
                        }
                      ],
                      "isNullable": false,
                      "_": 5566,
                      "source": " ProviderResult<TypeHierarchyItem | TypeHierarchyItem[]>"
                    }
                  },
                  {
                    "doc": "Provide all supertypes for an item, e.g all types from which a type is derived/inherited. In graph terms this describes directed\n and annotated edges inside the type graph, e.g the given item is the starting node and the result is the nodes\n that can be reached.\n\n @param item The hierarchy item for which super types should be computed.\n @param token A cancellation token.\n @returns A set of direct supertypes or a thenable that resolves to such. The lack of a result can be\n signaled by returning `undefined` or `null`.",
                    "isMethod": true,
                    "_": 5578,
                    "source": "\n\n\t\t/**\n\t\t * Provide all supertypes for an item, e.g all types from which a type is derived/inherited. In graph terms this describes directed\n\t\t * and annotated edges inside the type graph, e.g the given item is the starting node and the result is the nodes\n\t\t * that can be reached.\n\t\t *\n\t\t * @param item The hierarchy item for which super types should be computed.\n\t\t * @param token A cancellation token.\n\t\t * @returns A set of direct supertypes or a thenable that resolves to such. The lack of a result can be\n\t\t * signaled by returning `undefined` or `null`.\n\t\t */\n\t\tprovideTypeHierarchySupertypes(item: TypeHierarchyItem, token: CancellationToken): ProviderResult<TypeHierarchyItem[]>;",
                    "name": "provideTypeHierarchySupertypes",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "item",
                        "type": {
                          "ref": "TypeHierarchyItem",
                          "targs": [],
                          "isNullable": false,
                          "_": 5578,
                          "source": " TypeHierarchyItem"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 5578,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "TypeHierarchyItem",
                              "targs": [],
                              "isNullable": false,
                              "_": 5578,
                              "source": "TypeHierarchyItem"
                            }
                          ],
                          "isNullable": false,
                          "_": 5578,
                          "source": "TypeHierarchyItem[]"
                        }
                      ],
                      "isNullable": false,
                      "_": 5578,
                      "source": " ProviderResult<TypeHierarchyItem[]>"
                    }
                  },
                  {
                    "doc": "Provide all subtypes for an item, e.g all types which are derived/inherited from the given item. In\n graph terms this describes directed and annotated edges inside the type graph, e.g the given item is the starting\n node and the result is the nodes that can be reached.\n\n @param item The hierarchy item for which subtypes should be computed.\n @param token A cancellation token.\n @returns A set of direct subtypes or a thenable that resolves to such. The lack of a result can be\n signaled by returning `undefined` or `null`.",
                    "isMethod": true,
                    "_": 5590,
                    "source": "\n\n\t\t/**\n\t\t * Provide all subtypes for an item, e.g all types which are derived/inherited from the given item. In\n\t\t * graph terms this describes directed and annotated edges inside the type graph, e.g the given item is the starting\n\t\t * node and the result is the nodes that can be reached.\n\t\t *\n\t\t * @param item The hierarchy item for which subtypes should be computed.\n\t\t * @param token A cancellation token.\n\t\t * @returns A set of direct subtypes or a thenable that resolves to such. The lack of a result can be\n\t\t * signaled by returning `undefined` or `null`.\n\t\t */\n\t\tprovideTypeHierarchySubtypes(item: TypeHierarchyItem, token: CancellationToken): ProviderResult<TypeHierarchyItem[]>;",
                    "name": "provideTypeHierarchySubtypes",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "item",
                        "type": {
                          "ref": "TypeHierarchyItem",
                          "targs": [],
                          "isNullable": false,
                          "_": 5590,
                          "source": " TypeHierarchyItem"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 5590,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "TypeHierarchyItem",
                              "targs": [],
                              "isNullable": false,
                              "_": 5590,
                              "source": "TypeHierarchyItem"
                            }
                          ],
                          "isNullable": false,
                          "_": 5590,
                          "source": "TypeHierarchyItem[]"
                        }
                      ],
                      "isNullable": false,
                      "_": 5590,
                      "source": " ProviderResult<TypeHierarchyItem[]>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 5596,
                "name": "LinkedEditingRanges",
                "generics": [],
                "doc": "Represents a list of ranges that can be edited together along with a word pattern to describe valid range contents.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 5603,
                    "source": "\n\t\t/**\n\t\t * Create a new linked editing ranges object.\n\t\t *\n\t\t * @param ranges A list of ranges that can be edited together\n\t\t * @param wordPattern An optional word pattern that describes valid contents for the given ranges\n\t\t */\n\t\tconstructor(ranges: Range[], wordPattern?: RegExp);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "ranges",
                        "type": {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "Range",
                              "targs": [],
                              "isNullable": false,
                              "_": 5603,
                              "source": " Range"
                            }
                          ],
                          "isNullable": false,
                          "_": 5603,
                          "source": " Range[]"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "wordPattern",
                        "type": {
                          "ref": "RegExp",
                          "targs": [],
                          "isNullable": false,
                          "_": 5603,
                          "source": " RegExp"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "A list of ranges that can be edited together. The ranges must have\nidentical length and text content. The ranges cannot overlap.",
                    "isMethod": false,
                    "_": 5609,
                    "source": "\n\n\t\t/**\n\t\t * A list of ranges that can be edited together. The ranges must have\n\t\t * identical length and text content. The ranges cannot overlap.\n\t\t */\n\t\treadonly ranges: Range[];",
                    "name": "ranges",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 5609,
                          "source": " Range"
                        }
                      ],
                      "isNullable": false,
                      "_": 5609,
                      "source": " Range[]"
                    }
                  },
                  {
                    "doc": "An optional word pattern that describes valid contents for the given ranges.\nIf no pattern is provided, the language configuration's word pattern will be used.",
                    "isMethod": false,
                    "_": 5615,
                    "source": "\n\n\t\t/**\n\t\t * An optional word pattern that describes valid contents for the given ranges.\n\t\t * If no pattern is provided, the language configuration's word pattern will be used.\n\t\t */\n\t\treadonly wordPattern: RegExp | undefined;",
                    "name": "wordPattern",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "RegExp",
                          "targs": [],
                          "isNullable": false,
                          "_": 5615,
                          "source": " RegExp"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 5615,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 5615,
                      "source": " RegExp | undefined"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 5622,
                "name": "LinkedEditingRangeProvider",
                "generics": [],
                "doc": "The linked editing range provider interface defines the contract between extensions and\nthe linked editing feature.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "For a given position in a document, returns the range of the symbol at the position and all ranges\n that have the same content. A change to one of the ranges can be applied to all other ranges if the new content\n is valid. An optional word pattern can be returned with the result to describe valid contents.\n If no result-specific word pattern is provided, the word pattern from the language configuration is used.\n\n @param document The document in which the provider was invoked.\n @param position The position at which the provider was invoked.\n @param token A cancellation token.\n @return A list of ranges that can be edited together",
                    "isMethod": true,
                    "_": 5634,
                    "source": "\n\t\t/**\n\t\t * For a given position in a document, returns the range of the symbol at the position and all ranges\n\t\t * that have the same content. A change to one of the ranges can be applied to all other ranges if the new content\n\t\t * is valid. An optional word pattern can be returned with the result to describe valid contents.\n\t\t * If no result-specific word pattern is provided, the word pattern from the language configuration is used.\n\t\t *\n\t\t * @param document The document in which the provider was invoked.\n\t\t * @param position The position at which the provider was invoked.\n\t\t * @param token A cancellation token.\n\t\t * @return A list of ranges that can be edited together\n\t\t */\n\t\tprovideLinkedEditingRanges(document: TextDocument, position: Position, token: CancellationToken): ProviderResult<LinkedEditingRanges>;",
                    "name": "provideLinkedEditingRanges",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "document",
                        "type": {
                          "ref": "TextDocument",
                          "targs": [],
                          "isNullable": false,
                          "_": 5634,
                          "source": " TextDocument"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "position",
                        "type": {
                          "ref": "Position",
                          "targs": [],
                          "isNullable": false,
                          "_": 5634,
                          "source": " Position"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 5634,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "ref": "LinkedEditingRanges",
                          "targs": [],
                          "isNullable": false,
                          "_": 5634,
                          "source": "LinkedEditingRanges"
                        }
                      ],
                      "isNullable": false,
                      "_": 5634,
                      "source": " ProviderResult<LinkedEditingRanges>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 5640,
                "name": "DocumentDropEdit",
                "generics": [],
                "doc": "An edit operation applied {@link DocumentDropEditProvideron drop}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 5654,
                    "source": "\n\n\t\t/**\n\t\t * @param insertText The text or snippet to insert at the drop location.\n\t\t */\n\t\tconstructor(insertText: string | SnippetString);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "insertText",
                        "type": {
                          "union": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 5654,
                              "source": " string"
                            },
                            {
                              "ref": "SnippetString",
                              "targs": [],
                              "isNullable": false,
                              "_": 5654,
                              "source": " SnippetString"
                            }
                          ],
                          "isNullable": false,
                          "_": 5654,
                          "source": " string | SnippetString"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The text or snippet to insert at the drop location.",
                    "isMethod": false,
                    "_": 5644,
                    "source": "\n\t\t/**\n\t\t * The text or snippet to insert at the drop location.\n\t\t */\n\t\tinsertText: string | SnippetString;",
                    "name": "insertText",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 5644,
                          "source": " string"
                        },
                        {
                          "ref": "SnippetString",
                          "targs": [],
                          "isNullable": false,
                          "_": 5644,
                          "source": " SnippetString"
                        }
                      ],
                      "isNullable": false,
                      "_": 5644,
                      "source": " string | SnippetString"
                    }
                  },
                  {
                    "doc": "An optional additional edit to apply on drop.",
                    "isMethod": false,
                    "_": 5649,
                    "source": "\n\n\t\t/**\n\t\t * An optional additional edit to apply on drop.\n\t\t */\n\t\tadditionalEdit?: WorkspaceEdit;",
                    "name": "additionalEdit",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "WorkspaceEdit",
                      "targs": [],
                      "isNullable": false,
                      "_": 5649,
                      "source": " WorkspaceEdit"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 5664,
                "name": "DocumentDropEditProvider",
                "generics": [],
                "doc": "Provider which handles dropping of resources into a text editor.\n\nThis allows users to drag and drop resources (including resources from external apps) into the editor. While dragging\nand dropping files, users can hold down `shift` to drop the file into the editor instead of opening it.\nRequires `editor.dropIntoEditor.enabled` to be on.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Provide edits which inserts the content being dragged and dropped into the document.\n\n @param document The document in which the drop occurred.\n @param position The position in the document where the drop occurred.\n @param dataTransfer A {@link DataTransfer} object that holds data about what is being dragged and dropped.\n @param token A cancellation token.\n\n @return A {@link DocumentDropEdit} or a thenable that resolves to such. The lack of a result can be\n signaled by returning `undefined` or `null`.",
                    "isMethod": true,
                    "_": 5676,
                    "source": "\n\t\t/**\n\t\t * Provide edits which inserts the content being dragged and dropped into the document.\n\t\t *\n\t\t * @param document The document in which the drop occurred.\n\t\t * @param position The position in the document where the drop occurred.\n\t\t * @param dataTransfer A {@link DataTransfer} object that holds data about what is being dragged and dropped.\n\t\t * @param token A cancellation token.\n\t\t *\n\t\t * @return A {@link DocumentDropEdit} or a thenable that resolves to such. The lack of a result can be\n\t\t * signaled by returning `undefined` or `null`.\n\t\t */\n\t\tprovideDocumentDropEdits(document: TextDocument, position: Position, dataTransfer: DataTransfer, token: CancellationToken): ProviderResult<DocumentDropEdit>;",
                    "name": "provideDocumentDropEdits",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "document",
                        "type": {
                          "ref": "TextDocument",
                          "targs": [],
                          "isNullable": false,
                          "_": 5676,
                          "source": " TextDocument"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "position",
                        "type": {
                          "ref": "Position",
                          "targs": [],
                          "isNullable": false,
                          "_": 5676,
                          "source": " Position"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "dataTransfer",
                        "type": {
                          "ref": "DataTransfer",
                          "targs": [],
                          "isNullable": false,
                          "_": 5676,
                          "source": " DataTransfer"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 5676,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "ref": "DocumentDropEdit",
                          "targs": [],
                          "isNullable": false,
                          "_": 5676,
                          "source": "DocumentDropEdit"
                        }
                      ],
                      "isNullable": false,
                      "_": 5676,
                      "source": " ProviderResult<DocumentDropEdit>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 5688,
                "name": "CommentRule",
                "generics": [],
                "doc": "Describes how comments for a language work.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The line comment token, like `// this is a comment`",
                    "isMethod": false,
                    "_": 5693,
                    "source": "\n\n\t\t/**\n\t\t * The line comment token, like `// this is a comment`\n\t\t */\n\t\tlineComment?: string;",
                    "name": "lineComment",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 5693,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The block comment character pair, like `/* block comment *&#47;`",
                    "isMethod": false,
                    "_": 5698,
                    "source": "\n\n\t\t/**\n\t\t * The block comment character pair, like `/* block comment *&#47;`\n\t\t */\n\t\tblockComment?: CharacterPair;",
                    "name": "blockComment",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "CharacterPair",
                      "targs": [],
                      "isNullable": false,
                      "_": 5698,
                      "source": " CharacterPair"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 5704,
                "name": "IndentationRule",
                "generics": [],
                "doc": "Describes indentation rules for a language.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "If a line matches this pattern, then all the lines after it should be unindented once (until another rule matches).",
                    "isMethod": false,
                    "_": 5708,
                    "source": "\n\t\t/**\n\t\t * If a line matches this pattern, then all the lines after it should be unindented once (until another rule matches).\n\t\t */\n\t\tdecreaseIndentPattern: RegExp;",
                    "name": "decreaseIndentPattern",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "RegExp",
                      "targs": [],
                      "isNullable": false,
                      "_": 5708,
                      "source": " RegExp"
                    }
                  },
                  {
                    "doc": "If a line matches this pattern, then all the lines after it should be indented once (until another rule matches).",
                    "isMethod": false,
                    "_": 5712,
                    "source": "\n\t\t/**\n\t\t * If a line matches this pattern, then all the lines after it should be indented once (until another rule matches).\n\t\t */\n\t\tincreaseIndentPattern: RegExp;",
                    "name": "increaseIndentPattern",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "RegExp",
                      "targs": [],
                      "isNullable": false,
                      "_": 5712,
                      "source": " RegExp"
                    }
                  },
                  {
                    "doc": "If a line matches this pattern, then **only the next line** after it should be indented once.",
                    "isMethod": false,
                    "_": 5716,
                    "source": "\n\t\t/**\n\t\t * If a line matches this pattern, then **only the next line** after it should be indented once.\n\t\t */\n\t\tindentNextLinePattern?: RegExp;",
                    "name": "indentNextLinePattern",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "RegExp",
                      "targs": [],
                      "isNullable": false,
                      "_": 5716,
                      "source": " RegExp"
                    }
                  },
                  {
                    "doc": "If a line matches this pattern, then its indentation should not be changed and it should not be evaluated against the other rules.",
                    "isMethod": false,
                    "_": 5720,
                    "source": "\n\t\t/**\n\t\t * If a line matches this pattern, then its indentation should not be changed and it should not be evaluated against the other rules.\n\t\t */\n\t\tunIndentedLinePattern?: RegExp;",
                    "name": "unIndentedLinePattern",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "RegExp",
                      "targs": [],
                      "isNullable": false,
                      "_": 5720,
                      "source": " RegExp"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 5750,
                "name": "EnterAction",
                "generics": [],
                "doc": "Describes what to do when pressing Enter.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Describe what to do with the indentation.",
                    "isMethod": false,
                    "_": 5754,
                    "source": "\n\t\t/**\n\t\t * Describe what to do with the indentation.\n\t\t */\n\t\tindentAction: IndentAction;",
                    "name": "indentAction",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "IndentAction",
                      "targs": [],
                      "isNullable": false,
                      "_": 5754,
                      "source": " IndentAction"
                    }
                  },
                  {
                    "doc": "Describes text to be appended after the new line and after the indentation.",
                    "isMethod": false,
                    "_": 5758,
                    "source": "\n\t\t/**\n\t\t * Describes text to be appended after the new line and after the indentation.\n\t\t */\n\t\tappendText?: string;",
                    "name": "appendText",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 5758,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Describes the number of characters to remove from the new line's indentation.",
                    "isMethod": false,
                    "_": 5762,
                    "source": "\n\t\t/**\n\t\t * Describes the number of characters to remove from the new line's indentation.\n\t\t */\n\t\tremoveText?: number;",
                    "name": "removeText",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 5762,
                      "source": " number"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 5768,
                "name": "OnEnterRule",
                "generics": [],
                "doc": "Describes a rule to be evaluated when pressing Enter.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "This rule will only execute if the text before the cursor matches this regular expression.",
                    "isMethod": false,
                    "_": 5772,
                    "source": "\n\t\t/**\n\t\t * This rule will only execute if the text before the cursor matches this regular expression.\n\t\t */\n\t\tbeforeText: RegExp;",
                    "name": "beforeText",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "RegExp",
                      "targs": [],
                      "isNullable": false,
                      "_": 5772,
                      "source": " RegExp"
                    }
                  },
                  {
                    "doc": "This rule will only execute if the text after the cursor matches this regular expression.",
                    "isMethod": false,
                    "_": 5776,
                    "source": "\n\t\t/**\n\t\t * This rule will only execute if the text after the cursor matches this regular expression.\n\t\t */\n\t\tafterText?: RegExp;",
                    "name": "afterText",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "RegExp",
                      "targs": [],
                      "isNullable": false,
                      "_": 5776,
                      "source": " RegExp"
                    }
                  },
                  {
                    "doc": "This rule will only execute if the text above the current line matches this regular expression.",
                    "isMethod": false,
                    "_": 5780,
                    "source": "\n\t\t/**\n\t\t * This rule will only execute if the text above the current line matches this regular expression.\n\t\t */\n\t\tpreviousLineText?: RegExp;",
                    "name": "previousLineText",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "RegExp",
                      "targs": [],
                      "isNullable": false,
                      "_": 5780,
                      "source": " RegExp"
                    }
                  },
                  {
                    "doc": "The action to execute.",
                    "isMethod": false,
                    "_": 5784,
                    "source": "\n\t\t/**\n\t\t * The action to execute.\n\t\t */\n\t\taction: EnterAction;",
                    "name": "action",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "EnterAction",
                      "targs": [],
                      "isNullable": false,
                      "_": 5784,
                      "source": " EnterAction"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline27",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "LanguageConfiguration",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 5837,
                    "source": "\n\t\t\t\tscope: string;",
                    "name": "scope",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 5837,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 5838,
                    "source": "\n\t\t\t\topen: string;",
                    "name": "open",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 5838,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 5839,
                    "source": "\n\t\t\t\tlineStart: string;",
                    "name": "lineStart",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 5839,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 5840,
                    "source": "\n\t\t\t\tclose?: string;",
                    "name": "close",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 5840,
                      "source": " string"
                    }
                  }
                ],
                "calls": []
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline26",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "LanguageConfiguration",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "This property is deprecated and will be **ignored** from\n the editor.\n @deprecated",
                    "isMethod": false,
                    "_": 5829,
                    "source": "\n\t\t\t/**\n\t\t\t * This property is deprecated and will be **ignored** from\n\t\t\t * the editor.\n\t\t\t * @deprecated\n\t\t\t */\n\t\t\tbrackets?: any;",
                    "name": "brackets",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "any",
                      "isNullable": false,
                      "_": 5829,
                      "source": " any"
                    }
                  },
                  {
                    "doc": "This property is deprecated and not fully supported anymore by\n the editor (scope and lineStart are ignored).\n Use the autoClosingPairs property in the language configuration file instead.\n @deprecated",
                    "isMethod": false,
                    "_": 5836,
                    "source": "\n\t\t\t/**\n\t\t\t * This property is deprecated and not fully supported anymore by\n\t\t\t * the editor (scope and lineStart are ignored).\n\t\t\t * Use the autoClosingPairs property in the language configuration file instead.\n\t\t\t * @deprecated\n\t\t\t */\n\t\t\tdocComment?: {\n\t\t\t\tscope: string;\n\t\t\t\topen: string;\n\t\t\t\tlineStart: string;\n\t\t\t\tclose?: string;\n\t\t\t};",
                    "name": "docComment",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "IInline27",
                      "targs": [],
                      "isNullable": false,
                      "_": 5836,
                      "source": " {\n\t\t\t\tscope: string;\n\t\t\t\topen: string;\n\t\t\t\tlineStart: string;\n\t\t\t\tclose?: string;\n\t\t\t}"
                    }
                  }
                ],
                "calls": []
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline29",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "LanguageConfiguration",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 5851,
                    "source": "\n\t\t\t\topen: string;",
                    "name": "open",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 5851,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 5852,
                    "source": "\n\t\t\t\tclose: string;",
                    "name": "close",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 5852,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 5853,
                    "source": "\n\t\t\t\tnotIn?: string[];",
                    "name": "notIn",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 5853,
                          "source": " string"
                        }
                      ],
                      "isNullable": false,
                      "_": 5853,
                      "source": " string[]"
                    }
                  }
                ],
                "calls": []
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline28",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "LanguageConfiguration",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 5850,
                    "source": "\n\t\t\tautoClosingPairs: {\n\t\t\t\topen: string;\n\t\t\t\tclose: string;\n\t\t\t\tnotIn?: string[];\n\t\t\t}[];",
                    "name": "autoClosingPairs",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "ref": "IInline29",
                          "targs": [],
                          "isNullable": false,
                          "_": 5850,
                          "source": " {\n\t\t\t\topen: string;\n\t\t\t\tclose: string;\n\t\t\t\tnotIn?: string[];\n\t\t\t}"
                        }
                      ],
                      "isNullable": false,
                      "_": 5850,
                      "source": " {\n\t\t\t\topen: string;\n\t\t\t\tclose: string;\n\t\t\t\tnotIn?: string[];\n\t\t\t}[]"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 5791,
                "name": "LanguageConfiguration",
                "generics": [],
                "doc": "The language configuration interfaces defines the contract between extensions\nand various editor features, like automatic bracket insertion, automatic indentation etc.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The language's comment settings.",
                    "isMethod": false,
                    "_": 5795,
                    "source": "\n\t\t/**\n\t\t * The language's comment settings.\n\t\t */\n\t\tcomments?: CommentRule;",
                    "name": "comments",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "CommentRule",
                      "targs": [],
                      "isNullable": false,
                      "_": 5795,
                      "source": " CommentRule"
                    }
                  },
                  {
                    "doc": "The language's brackets.\n This configuration implicitly affects pressing Enter around these brackets.",
                    "isMethod": false,
                    "_": 5800,
                    "source": "\n\t\t/**\n\t\t * The language's brackets.\n\t\t * This configuration implicitly affects pressing Enter around these brackets.\n\t\t */\n\t\tbrackets?: CharacterPair[];",
                    "name": "brackets",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "ref": "CharacterPair",
                          "targs": [],
                          "isNullable": false,
                          "_": 5800,
                          "source": " CharacterPair"
                        }
                      ],
                      "isNullable": false,
                      "_": 5800,
                      "source": " CharacterPair[]"
                    }
                  },
                  {
                    "doc": "The language's word definition.\n If the language supports Unicode identifiers (e.g. JavaScript), it is preferable\n to provide a word definition that uses exclusion of known separators.\n e.g.: A regex that matches anything except known separators (and dot is allowed to occur in a floating point number):\n   /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g",
                    "isMethod": false,
                    "_": 5808,
                    "source": "\n\t\t/**\n\t\t * The language's word definition.\n\t\t * If the language supports Unicode identifiers (e.g. JavaScript), it is preferable\n\t\t * to provide a word definition that uses exclusion of known separators.\n\t\t * e.g.: A regex that matches anything except known separators (and dot is allowed to occur in a floating point number):\n\t\t *   /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g\n\t\t */\n\t\twordPattern?: RegExp;",
                    "name": "wordPattern",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "RegExp",
                      "targs": [],
                      "isNullable": false,
                      "_": 5808,
                      "source": " RegExp"
                    }
                  },
                  {
                    "doc": "The language's indentation settings.",
                    "isMethod": false,
                    "_": 5812,
                    "source": "\n\t\t/**\n\t\t * The language's indentation settings.\n\t\t */\n\t\tindentationRules?: IndentationRule;",
                    "name": "indentationRules",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "IndentationRule",
                      "targs": [],
                      "isNullable": false,
                      "_": 5812,
                      "source": " IndentationRule"
                    }
                  },
                  {
                    "doc": "The language's rules to be evaluated when pressing Enter.",
                    "isMethod": false,
                    "_": 5816,
                    "source": "\n\t\t/**\n\t\t * The language's rules to be evaluated when pressing Enter.\n\t\t */\n\t\tonEnterRules?: OnEnterRule[];",
                    "name": "onEnterRules",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "ref": "OnEnterRule",
                          "targs": [],
                          "isNullable": false,
                          "_": 5816,
                          "source": " OnEnterRule"
                        }
                      ],
                      "isNullable": false,
                      "_": 5816,
                      "source": " OnEnterRule[]"
                    }
                  },
                  {
                    "doc": "**Deprecated** Do not use.\n\n @deprecated Will be replaced by a better API soon.",
                    "isMethod": false,
                    "_": 5823,
                    "source": "\n\n\t\t/**\n\t\t * **Deprecated** Do not use.\n\t\t *\n\t\t * @deprecated Will be replaced by a better API soon.\n\t\t */\n\t\t__electricCharacterSupport?: {\n\t\t\t/**\n\t\t\t * This property is deprecated and will be **ignored** from\n\t\t\t * the editor.\n\t\t\t * @deprecated\n\t\t\t */\n\t\t\tbrackets?: any;\n\t\t\t/**\n\t\t\t * This property is deprecated and not fully supported anymore by\n\t\t\t * the editor (scope and lineStart are ignored).\n\t\t\t * Use the autoClosingPairs property in the language configuration file instead.\n\t\t\t * @deprecated\n\t\t\t */\n\t\t\tdocComment?: {\n\t\t\t\tscope: string;\n\t\t\t\topen: string;\n\t\t\t\tlineStart: string;\n\t\t\t\tclose?: string;\n\t\t\t};\n\t\t};",
                    "name": "__electricCharacterSupport",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "IInline26",
                      "targs": [],
                      "isNullable": false,
                      "_": 5823,
                      "source": " {\n\t\t\t/**\n\t\t\t * This property is deprecated and will be **ignored** from\n\t\t\t * the editor.\n\t\t\t * @deprecated\n\t\t\t */\n\t\t\tbrackets?: any;\n\t\t\t/**\n\t\t\t * This property is deprecated and not fully supported anymore by\n\t\t\t * the editor (scope and lineStart are ignored).\n\t\t\t * Use the autoClosingPairs property in the language configuration file instead.\n\t\t\t * @deprecated\n\t\t\t */\n\t\t\tdocComment?: {\n\t\t\t\tscope: string;\n\t\t\t\topen: string;\n\t\t\t\tlineStart: string;\n\t\t\t\tclose?: string;\n\t\t\t};\n\t\t}"
                    }
                  },
                  {
                    "doc": "**Deprecated** Do not use.\n\n @deprecated * Use the autoClosingPairs property in the language configuration file instead.",
                    "isMethod": false,
                    "_": 5849,
                    "source": "\n\n\t\t/**\n\t\t * **Deprecated** Do not use.\n\t\t *\n\t\t * @deprecated * Use the autoClosingPairs property in the language configuration file instead.\n\t\t */\n\t\t__characterPairSupport?: {\n\t\t\tautoClosingPairs: {\n\t\t\t\topen: string;\n\t\t\t\tclose: string;\n\t\t\t\tnotIn?: string[];\n\t\t\t}[];\n\t\t};",
                    "name": "__characterPairSupport",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "IInline28",
                      "targs": [],
                      "isNullable": false,
                      "_": 5849,
                      "source": " {\n\t\t\tautoClosingPairs: {\n\t\t\t\topen: string;\n\t\t\t\tclose: string;\n\t\t\t\tnotIn?: string[];\n\t\t\t}[];\n\t\t}"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline30",
                "generics": [
                  {
                    "name": "T",
                    "_": 5982,
                    "source": "T"
                  }
                ],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "WorkspaceConfiguration",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 5983,
                    "source": "\n\t\t\tkey: string;",
                    "name": "key",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 5983,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 5985,
                    "source": "\n\n\t\t\tdefaultValue?: T;",
                    "name": "defaultValue",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "T",
                      "targs": [],
                      "isNullable": false,
                      "_": 5985,
                      "source": " T"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 5986,
                    "source": "\n\t\t\tglobalValue?: T;",
                    "name": "globalValue",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "T",
                      "targs": [],
                      "isNullable": false,
                      "_": 5986,
                      "source": " T"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 5987,
                    "source": "\n\t\t\tworkspaceValue?: T;",
                    "name": "workspaceValue",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "T",
                      "targs": [],
                      "isNullable": false,
                      "_": 5987,
                      "source": " T"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 5988,
                    "source": "\n\t\t\tworkspaceFolderValue?: T;",
                    "name": "workspaceFolderValue",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "T",
                      "targs": [],
                      "isNullable": false,
                      "_": 5988,
                      "source": " T"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 5990,
                    "source": "\n\n\t\t\tdefaultLanguageValue?: T;",
                    "name": "defaultLanguageValue",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "T",
                      "targs": [],
                      "isNullable": false,
                      "_": 5990,
                      "source": " T"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 5991,
                    "source": "\n\t\t\tglobalLanguageValue?: T;",
                    "name": "globalLanguageValue",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "T",
                      "targs": [],
                      "isNullable": false,
                      "_": 5991,
                      "source": " T"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 5992,
                    "source": "\n\t\t\tworkspaceLanguageValue?: T;",
                    "name": "workspaceLanguageValue",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "T",
                      "targs": [],
                      "isNullable": false,
                      "_": 5992,
                      "source": " T"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 5993,
                    "source": "\n\t\t\tworkspaceFolderLanguageValue?: T;",
                    "name": "workspaceFolderLanguageValue",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "T",
                      "targs": [],
                      "isNullable": false,
                      "_": 5993,
                      "source": " T"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 5995,
                    "source": "\n\n\t\t\tlanguageIds?: string[];",
                    "name": "languageIds",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 5995,
                          "source": " string"
                        }
                      ],
                      "isNullable": false,
                      "_": 5995,
                      "source": " string[]"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 5941,
                "name": "WorkspaceConfiguration",
                "generics": [],
                "doc": "Represents the configuration. It is a merged view of\n\n- *Default Settings*\n- *Global (User) Settings*\n- *Workspace settings*\n- *Workspace Folder settings* - From one of the {@link workspace.workspaceFoldersWorkspace Folders} under which requested resource belongs to.\n- *Language settings* - Settings defined under requested language.\n\nThe *effective* value (returned by {@linkcode WorkspaceConfiguration.getget}) is computed by overriding or merging the values in the following order:\n\n1. `defaultValue` (if defined in `package.json` otherwise derived from the value's type)\n1. `globalValue` (if defined)\n1. `workspaceValue` (if defined)\n1. `workspaceFolderValue` (if defined)\n1. `defaultLanguageValue` (if defined)\n1. `globalLanguageValue` (if defined)\n1. `workspaceLanguageValue` (if defined)\n1. `workspaceFolderLanguageValue` (if defined)\n\n**Note:** Only `object` value types are merged and all other value types are overridden.\n\nExample 1: Overriding\n\n```ts\ndefaultValue = 'on';\nglobalValue = 'relative'\nworkspaceFolderValue = 'off'\nvalue = 'off'\n```\n\nExample 2: Language Values\n\n```ts\ndefaultValue = 'on';\nglobalValue = 'relative'\nworkspaceFolderValue = 'off'\nglobalLanguageValue = 'on'\nvalue = 'on'\n```\n\nExample 3: Object Values\n\n```ts\ndefaultValue = { \"a\": 1, \"b\": 2 };\nglobalValue = { \"b\": 3, \"c\": 4 };\nvalue = { \"a\": 1, \"b\": 3, \"c\": 4 };\n```\n\n*Note:* Workspace and Workspace Folder configurations contains `launch` and `tasks` settings. Their basename will be\npart of the section identifier. The following snippets shows how to retrieve all configurations\nfrom `launch.json`:\n\n```ts\n// launch.json configuration\nconst config = workspace.getConfiguration('launch', vscode.workspace.workspaceFolders[0].uri);\n\n// retrieve values\nconst values = config.get('configurations');\n```\n\nRefer to [Settings](https://code.visualstudio.com/docs/getstarted/settings) for more information.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [
                  {
                    "key": {
                      "core": "string",
                      "isNullable": false,
                      "_": 6033,
                      "source": " string"
                    },
                    "value": {
                      "core": "any",
                      "isNullable": false,
                      "_": 6033,
                      "source": " any"
                    },
                    "doc": "",
                    "_": 6033,
                    "source": "\n\n\t\t/**\n\t\t * Readable dictionary that backs this configuration.\n\t\t */\n\t\treadonly [key: string]: any;",
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false
                  }
                ],
                "ctors": [],
                "members": [
                  {
                    "doc": "Return a value from this configuration.\n\n @param section Configuration name, supports _dotted_ names.\n @return The value `section` denotes or `undefined`.",
                    "isMethod": true,
                    "_": 5949,
                    "source": "\n\n\t\t/**\n\t\t * Return a value from this configuration.\n\t\t *\n\t\t * @param section Configuration name, supports _dotted_ names.\n\t\t * @return The value `section` denotes or `undefined`.\n\t\t */\n\t\tget<T>(section: string): T | undefined;",
                    "name": "get",
                    "generics": [
                      {
                        "name": "T",
                        "_": 5949,
                        "source": "T"
                      }
                    ],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "section",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 5949,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "union": [
                        {
                          "ref": "T",
                          "targs": [],
                          "isNullable": false,
                          "_": 5949,
                          "source": " T"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 5949,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 5949,
                      "source": " T | undefined"
                    }
                  },
                  {
                    "doc": "Return a value from this configuration.\n\n @param section Configuration name, supports _dotted_ names.\n @param defaultValue A value should be returned when no value could be found, is `undefined`.\n @return The value `section` denotes or the default.",
                    "isMethod": true,
                    "_": 5958,
                    "source": "\n\n\t\t/**\n\t\t * Return a value from this configuration.\n\t\t *\n\t\t * @param section Configuration name, supports _dotted_ names.\n\t\t * @param defaultValue A value should be returned when no value could be found, is `undefined`.\n\t\t * @return The value `section` denotes or the default.\n\t\t */\n\t\tget<T>(section: string, defaultValue: T): T;",
                    "name": "get",
                    "generics": [
                      {
                        "name": "T",
                        "_": 5958,
                        "source": "T"
                      }
                    ],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "section",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 5958,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "defaultValue",
                        "type": {
                          "ref": "T",
                          "targs": [],
                          "isNullable": false,
                          "_": 5958,
                          "source": " T"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "T",
                      "targs": [],
                      "isNullable": false,
                      "_": 5958,
                      "source": " T"
                    }
                  },
                  {
                    "doc": "Check if this configuration has a certain value.\n\n @param section Configuration name, supports _dotted_ names.\n @return `true` if the section doesn't resolve to `undefined`.",
                    "isMethod": true,
                    "_": 5966,
                    "source": "\n\n\t\t/**\n\t\t * Check if this configuration has a certain value.\n\t\t *\n\t\t * @param section Configuration name, supports _dotted_ names.\n\t\t * @return `true` if the section doesn't resolve to `undefined`.\n\t\t */\n\t\thas(section: string): boolean;",
                    "name": "has",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "section",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 5966,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 5966,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Retrieve all information about a configuration setting. A configuration value\n often consists of a *default* value, a global or installation-wide value,\n a workspace-specific value, folder-specific value\n and language-specific values (if {@link WorkspaceConfiguration} is scoped to a language).\n\n Also provides all language ids under which the given configuration setting is defined.\n\n *Note:* The configuration name must denote a leaf in the configuration tree\n (`editor.fontSize` vs `editor`) otherwise no result is returned.\n\n @param section Configuration name, supports _dotted_ names.\n @return Information about a configuration setting or `undefined`.",
                    "isMethod": true,
                    "_": 5982,
                    "source": "\n\n\t\t/**\n\t\t * Retrieve all information about a configuration setting. A configuration value\n\t\t * often consists of a *default* value, a global or installation-wide value,\n\t\t * a workspace-specific value, folder-specific value\n\t\t * and language-specific values (if {@link WorkspaceConfiguration} is scoped to a language).\n\t\t *\n\t\t * Also provides all language ids under which the given configuration setting is defined.\n\t\t *\n\t\t * *Note:* The configuration name must denote a leaf in the configuration tree\n\t\t * (`editor.fontSize` vs `editor`) otherwise no result is returned.\n\t\t *\n\t\t * @param section Configuration name, supports _dotted_ names.\n\t\t * @return Information about a configuration setting or `undefined`.\n\t\t */\n\t\tinspect<T>(section: string): {\n\t\t\tkey: string;\n\n\t\t\tdefaultValue?: T;\n\t\t\tglobalValue?: T;\n\t\t\tworkspaceValue?: T;\n\t\t\tworkspaceFolderValue?: T;\n\n\t\t\tdefaultLanguageValue?: T;\n\t\t\tglobalLanguageValue?: T;\n\t\t\tworkspaceLanguageValue?: T;\n\t\t\tworkspaceFolderLanguageValue?: T;\n\n\t\t\tlanguageIds?: string[];\n\n\t\t} | undefined;",
                    "name": "inspect",
                    "generics": [
                      {
                        "name": "T",
                        "_": 5982,
                        "source": "T"
                      }
                    ],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "section",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 5982,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "union": [
                        {
                          "ref": "IInline30",
                          "targs": [],
                          "isNullable": false,
                          "_": 5982,
                          "source": " {\n\t\t\tkey: string;\n\n\t\t\tdefaultValue?: T;\n\t\t\tglobalValue?: T;\n\t\t\tworkspaceValue?: T;\n\t\t\tworkspaceFolderValue?: T;\n\n\t\t\tdefaultLanguageValue?: T;\n\t\t\tglobalLanguageValue?: T;\n\t\t\tworkspaceLanguageValue?: T;\n\t\t\tworkspaceFolderLanguageValue?: T;\n\n\t\t\tlanguageIds?: string[];\n\n\t\t}"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 5997,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 5982,
                      "source": " {\n\t\t\tkey: string;\n\n\t\t\tdefaultValue?: T;\n\t\t\tglobalValue?: T;\n\t\t\tworkspaceValue?: T;\n\t\t\tworkspaceFolderValue?: T;\n\n\t\t\tdefaultLanguageValue?: T;\n\t\t\tglobalLanguageValue?: T;\n\t\t\tworkspaceLanguageValue?: T;\n\t\t\tworkspaceFolderLanguageValue?: T;\n\n\t\t\tlanguageIds?: string[];\n\n\t\t} | undefined"
                    }
                  },
                  {
                    "doc": "Update a configuration value. The updated configuration values are persisted.\n\n A value can be changed in\n\n - {@link ConfigurationTarget.Global Global settings}: Changes the value for all instances of the editor.\n - {@link ConfigurationTarget.Workspace Workspace settings}: Changes the value for current workspace, if available.\n - {@link ConfigurationTarget.WorkspaceFolder Workspace folder settings}: Changes the value for settings from one of the {@link workspace.workspaceFolders Workspace Folders} under which the requested resource belongs to.\n - Language settings: Changes the value for the requested languageId.\n\n *Note:* To remove a configuration value use `undefined`, like so: `config.update('somekey', undefined)`\n\n @param section Configuration name, supports _dotted_ names.\n @param value The new value.\n @param configurationTarget The {@link ConfigurationTarget configuration target} or a boolean value.\n\t- If `true` updates {@link ConfigurationTarget.Global Global settings}.\n\t- If `false` updates {@link ConfigurationTarget.Workspace Workspace settings}.\n\t- If `undefined` or `null` updates to {@link ConfigurationTarget.WorkspaceFolder Workspace folder settings} if configuration is resource specific,\n \totherwise to {@link ConfigurationTarget.Workspace Workspace settings}.\n @param overrideInLanguage Whether to update the value in the scope of requested languageId or not.\n\t- If `true` updates the value under the requested languageId.\n\t- If `undefined` updates the value under the requested languageId only if the configuration is defined for the language.\n @throws error while updating\n\t- configuration which is not registered.\n\t- window configuration to workspace folder\n\t- configuration to workspace or workspace folder when no workspace is opened.\n\t- configuration to workspace folder when there is no workspace folder settings.\n\t- configuration to workspace folder when {@link WorkspaceConfiguration} is not scoped to a resource.",
                    "isMethod": true,
                    "_": 6028,
                    "source": "\n\n\t\t/**\n\t\t * Update a configuration value. The updated configuration values are persisted.\n\t\t *\n\t\t * A value can be changed in\n\t\t *\n\t\t * - {@link ConfigurationTarget.Global Global settings}: Changes the value for all instances of the editor.\n\t\t * - {@link ConfigurationTarget.Workspace Workspace settings}: Changes the value for current workspace, if available.\n\t\t * - {@link ConfigurationTarget.WorkspaceFolder Workspace folder settings}: Changes the value for settings from one of the {@link workspace.workspaceFolders Workspace Folders} under which the requested resource belongs to.\n\t\t * - Language settings: Changes the value for the requested languageId.\n\t\t *\n\t\t * *Note:* To remove a configuration value use `undefined`, like so: `config.update('somekey', undefined)`\n\t\t *\n\t\t * @param section Configuration name, supports _dotted_ names.\n\t\t * @param value The new value.\n\t\t * @param configurationTarget The {@link ConfigurationTarget configuration target} or a boolean value.\n\t\t *\t- If `true` updates {@link ConfigurationTarget.Global Global settings}.\n\t\t *\t- If `false` updates {@link ConfigurationTarget.Workspace Workspace settings}.\n\t\t *\t- If `undefined` or `null` updates to {@link ConfigurationTarget.WorkspaceFolder Workspace folder settings} if configuration is resource specific,\n\t\t * \totherwise to {@link ConfigurationTarget.Workspace Workspace settings}.\n\t\t * @param overrideInLanguage Whether to update the value in the scope of requested languageId or not.\n\t\t *\t- If `true` updates the value under the requested languageId.\n\t\t *\t- If `undefined` updates the value under the requested languageId only if the configuration is defined for the language.\n\t\t * @throws error while updating\n\t\t *\t- configuration which is not registered.\n\t\t *\t- window configuration to workspace folder\n\t\t *\t- configuration to workspace or workspace folder when no workspace is opened.\n\t\t *\t- configuration to workspace folder when there is no workspace folder settings.\n\t\t *\t- configuration to workspace folder when {@link WorkspaceConfiguration} is not scoped to a resource.\n\t\t */\n\t\tupdate(section: string, value: any, configurationTarget?: ConfigurationTarget | boolean | null, overrideInLanguage?: boolean): Thenable<void>;",
                    "name": "update",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "section",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 6028,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "value",
                        "type": {
                          "core": "any",
                          "isNullable": false,
                          "_": 6028,
                          "source": " any"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "configurationTarget",
                        "type": {
                          "union": [
                            {
                              "ref": "ConfigurationTarget",
                              "targs": [],
                              "isNullable": false,
                              "_": 6028,
                              "source": " ConfigurationTarget"
                            },
                            {
                              "core": "boolean",
                              "isNullable": false,
                              "_": 6028,
                              "source": " boolean"
                            },
                            {
                              "core": "null",
                              "isNullable": false,
                              "_": 6028,
                              "source": " null"
                            }
                          ],
                          "isNullable": false,
                          "_": 6028,
                          "source": " ConfigurationTarget | boolean | null"
                        },
                        "varargs": false,
                        "isNullable": true
                      },
                      {
                        "name": "overrideInLanguage",
                        "type": {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 6028,
                          "source": " boolean"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "Thenable",
                      "targs": [
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 6028,
                          "source": "void"
                        }
                      ],
                      "isNullable": false,
                      "_": 6028,
                      "source": " Thenable<void>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 6040,
                "name": "Location",
                "generics": [],
                "doc": "Represents a location inside a resource, such as a line\ninside a text file.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 6058,
                    "source": "\n\n\t\t/**\n\t\t * Creates a new location object.\n\t\t *\n\t\t * @param uri The resource identifier.\n\t\t * @param rangeOrPosition The range or position. Positions will be converted to an empty range.\n\t\t */\n\t\tconstructor(uri: Uri, rangeOrPosition: Range | Position);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "uri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 6058,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "rangeOrPosition",
                        "type": {
                          "union": [
                            {
                              "ref": "Range",
                              "targs": [],
                              "isNullable": false,
                              "_": 6058,
                              "source": " Range"
                            },
                            {
                              "ref": "Position",
                              "targs": [],
                              "isNullable": false,
                              "_": 6058,
                              "source": " Position"
                            }
                          ],
                          "isNullable": false,
                          "_": 6058,
                          "source": " Range | Position"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The resource identifier of this location.",
                    "isMethod": false,
                    "_": 6045,
                    "source": "\n\n\t\t/**\n\t\t * The resource identifier of this location.\n\t\t */\n\t\turi: Uri;",
                    "name": "uri",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 6045,
                      "source": " Uri"
                    }
                  },
                  {
                    "doc": "The document range of this location.",
                    "isMethod": false,
                    "_": 6050,
                    "source": "\n\n\t\t/**\n\t\t * The document range of this location.\n\t\t */\n\t\trange: Range;",
                    "name": "range",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Range",
                      "targs": [],
                      "isNullable": false,
                      "_": 6050,
                      "source": " Range"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 6065,
                "name": "LocationLink",
                "generics": [],
                "doc": "Represents the connection of two locations. Provides additional metadata over normal {@link Locationlocations},\nincluding an origin range.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Span of the origin of this link.\n\n Used as the underlined span for mouse definition hover. Defaults to the word range at\n the definition position.",
                    "isMethod": false,
                    "_": 6072,
                    "source": "\n\t\t/**\n\t\t * Span of the origin of this link.\n\t\t *\n\t\t * Used as the underlined span for mouse definition hover. Defaults to the word range at\n\t\t * the definition position.\n\t\t */\n\t\toriginSelectionRange?: Range;",
                    "name": "originSelectionRange",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Range",
                      "targs": [],
                      "isNullable": false,
                      "_": 6072,
                      "source": " Range"
                    }
                  },
                  {
                    "doc": "The target resource identifier of this link.",
                    "isMethod": false,
                    "_": 6077,
                    "source": "\n\n\t\t/**\n\t\t * The target resource identifier of this link.\n\t\t */\n\t\ttargetUri: Uri;",
                    "name": "targetUri",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 6077,
                      "source": " Uri"
                    }
                  },
                  {
                    "doc": "The full target range of this link.",
                    "isMethod": false,
                    "_": 6082,
                    "source": "\n\n\t\t/**\n\t\t * The full target range of this link.\n\t\t */\n\t\ttargetRange: Range;",
                    "name": "targetRange",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Range",
                      "targs": [],
                      "isNullable": false,
                      "_": 6082,
                      "source": " Range"
                    }
                  },
                  {
                    "doc": "The span of this link.",
                    "isMethod": false,
                    "_": 6087,
                    "source": "\n\n\t\t/**\n\t\t * The span of this link.\n\t\t */\n\t\ttargetSelectionRange?: Range;",
                    "name": "targetSelectionRange",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Range",
                      "targs": [],
                      "isNullable": false,
                      "_": 6087,
                      "source": " Range"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 6093,
                "name": "DiagnosticChangeEvent",
                "generics": [],
                "doc": "The event that is fired when diagnostics change.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "An array of resources for which diagnostics have changed.",
                    "isMethod": false,
                    "_": 6098,
                    "source": "\n\n\t\t/**\n\t\t * An array of resources for which diagnostics have changed.\n\t\t */\n\t\treadonly uris: readonly Uri[];",
                    "name": "uris",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "Uri",
                            "targs": [],
                            "isNullable": false,
                            "_": 6098,
                            "source": " Uri"
                          }
                        ],
                        "isNullable": false,
                        "_": 6098,
                        "source": " Uri[]"
                      },
                      "isNullable": false,
                      "_": 6098,
                      "source": " readonly Uri[]"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 6133,
                "name": "DiagnosticRelatedInformation",
                "generics": [],
                "doc": "Represents a related message and source code location for a diagnostic. This should be\nused to point to code locations that cause or related to a diagnostics, e.g. when duplicating\na symbol in a scope.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 6151,
                    "source": "\n\n\t\t/**\n\t\t * Creates a new related diagnostic information object.\n\t\t *\n\t\t * @param location The location.\n\t\t * @param message The message.\n\t\t */\n\t\tconstructor(location: Location, message: string);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "location",
                        "type": {
                          "ref": "Location",
                          "targs": [],
                          "isNullable": false,
                          "_": 6151,
                          "source": " Location"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "message",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 6151,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The location of this related diagnostic information.",
                    "isMethod": false,
                    "_": 6138,
                    "source": "\n\n\t\t/**\n\t\t * The location of this related diagnostic information.\n\t\t */\n\t\tlocation: Location;",
                    "name": "location",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Location",
                      "targs": [],
                      "isNullable": false,
                      "_": 6138,
                      "source": " Location"
                    }
                  },
                  {
                    "doc": "The message of this related diagnostic information.",
                    "isMethod": false,
                    "_": 6143,
                    "source": "\n\n\t\t/**\n\t\t * The message of this related diagnostic information.\n\t\t */\n\t\tmessage: string;",
                    "name": "message",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 6143,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline31",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "Diagnostic",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "A code or identifier for this diagnostic.\n Should be used for later processing, e.g. when providing {@link CodeActionContext code actions}.",
                    "isMethod": false,
                    "_": 6214,
                    "source": "\n\t\t\t/**\n\t\t\t * A code or identifier for this diagnostic.\n\t\t\t * Should be used for later processing, e.g. when providing {@link CodeActionContext code actions}.\n\t\t\t */\n\t\t\tvalue: string | number;",
                    "name": "value",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 6214,
                          "source": " string"
                        },
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 6214,
                          "source": " number"
                        }
                      ],
                      "isNullable": false,
                      "_": 6214,
                      "source": " string | number"
                    }
                  },
                  {
                    "doc": "A target URI to open with more information about the diagnostic error.",
                    "isMethod": false,
                    "_": 6219,
                    "source": "\n\n\t\t\t/**\n\t\t\t * A target URI to open with more information about the diagnostic error.\n\t\t\t */\n\t\t\ttarget: Uri;",
                    "name": "target",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 6219,
                      "source": " Uri"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 6182,
                "name": "Diagnostic",
                "generics": [],
                "doc": "Represents a diagnostic, such as a compiler error or warning. Diagnostic objects\nare only valid in the scope of a file.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 6240,
                    "source": "\n\n\t\t/**\n\t\t * Creates a new diagnostic object.\n\t\t *\n\t\t * @param range The range to which this diagnostic applies.\n\t\t * @param message The human-readable message.\n\t\t * @param severity The severity, default is {@link DiagnosticSeverity.Error error}.\n\t\t */\n\t\tconstructor(range: Range, message: string, severity?: DiagnosticSeverity);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "range",
                        "type": {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 6240,
                          "source": " Range"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "message",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 6240,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "severity",
                        "type": {
                          "ref": "DiagnosticSeverity",
                          "targs": [],
                          "isNullable": false,
                          "_": 6240,
                          "source": " DiagnosticSeverity"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The range to which this diagnostic applies.",
                    "isMethod": false,
                    "_": 6187,
                    "source": "\n\n\t\t/**\n\t\t * The range to which this diagnostic applies.\n\t\t */\n\t\trange: Range;",
                    "name": "range",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Range",
                      "targs": [],
                      "isNullable": false,
                      "_": 6187,
                      "source": " Range"
                    }
                  },
                  {
                    "doc": "The human-readable message.",
                    "isMethod": false,
                    "_": 6192,
                    "source": "\n\n\t\t/**\n\t\t * The human-readable message.\n\t\t */\n\t\tmessage: string;",
                    "name": "message",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 6192,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The severity, default is {@link DiagnosticSeverity.Error error}.",
                    "isMethod": false,
                    "_": 6197,
                    "source": "\n\n\t\t/**\n\t\t * The severity, default is {@link DiagnosticSeverity.Error error}.\n\t\t */\n\t\tseverity: DiagnosticSeverity;",
                    "name": "severity",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "DiagnosticSeverity",
                      "targs": [],
                      "isNullable": false,
                      "_": 6197,
                      "source": " DiagnosticSeverity"
                    }
                  },
                  {
                    "doc": "A human-readable string describing the source of this\n diagnostic, e.g. 'typescript' or 'super lint'.",
                    "isMethod": false,
                    "_": 6203,
                    "source": "\n\n\t\t/**\n\t\t * A human-readable string describing the source of this\n\t\t * diagnostic, e.g. 'typescript' or 'super lint'.\n\t\t */\n\t\tsource?: string;",
                    "name": "source",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 6203,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "A code or identifier for this diagnostic.\n Should be used for later processing, e.g. when providing {@link CodeActionContext code actions}.",
                    "isMethod": false,
                    "_": 6209,
                    "source": "\n\n\t\t/**\n\t\t * A code or identifier for this diagnostic.\n\t\t * Should be used for later processing, e.g. when providing {@link CodeActionContext code actions}.\n\t\t */\n\t\tcode?: string | number | {\n\t\t\t/**\n\t\t\t * A code or identifier for this diagnostic.\n\t\t\t * Should be used for later processing, e.g. when providing {@link CodeActionContext code actions}.\n\t\t\t */\n\t\t\tvalue: string | number;\n\n\t\t\t/**\n\t\t\t * A target URI to open with more information about the diagnostic error.\n\t\t\t */\n\t\t\ttarget: Uri;\n\t\t};",
                    "name": "code",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 6209,
                          "source": " string"
                        },
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 6209,
                          "source": " number"
                        },
                        {
                          "ref": "IInline31",
                          "targs": [],
                          "isNullable": false,
                          "_": 6209,
                          "source": " {\n\t\t\t/**\n\t\t\t * A code or identifier for this diagnostic.\n\t\t\t * Should be used for later processing, e.g. when providing {@link CodeActionContext code actions}.\n\t\t\t */\n\t\t\tvalue: string | number;\n\n\t\t\t/**\n\t\t\t * A target URI to open with more information about the diagnostic error.\n\t\t\t */\n\t\t\ttarget: Uri;\n\t\t}"
                        }
                      ],
                      "isNullable": false,
                      "_": 6209,
                      "source": " string | number | {\n\t\t\t/**\n\t\t\t * A code or identifier for this diagnostic.\n\t\t\t * Should be used for later processing, e.g. when providing {@link CodeActionContext code actions}.\n\t\t\t */\n\t\t\tvalue: string | number;\n\n\t\t\t/**\n\t\t\t * A target URI to open with more information about the diagnostic error.\n\t\t\t */\n\t\t\ttarget: Uri;\n\t\t}"
                    }
                  },
                  {
                    "doc": "An array of related diagnostic information, e.g. when symbol-names within\n a scope collide all definitions can be marked via this property.",
                    "isMethod": false,
                    "_": 6226,
                    "source": "\n\n\t\t/**\n\t\t * An array of related diagnostic information, e.g. when symbol-names within\n\t\t * a scope collide all definitions can be marked via this property.\n\t\t */\n\t\trelatedInformation?: DiagnosticRelatedInformation[];",
                    "name": "relatedInformation",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "ref": "DiagnosticRelatedInformation",
                          "targs": [],
                          "isNullable": false,
                          "_": 6226,
                          "source": " DiagnosticRelatedInformation"
                        }
                      ],
                      "isNullable": false,
                      "_": 6226,
                      "source": " DiagnosticRelatedInformation[]"
                    }
                  },
                  {
                    "doc": "Additional metadata about the diagnostic.",
                    "isMethod": false,
                    "_": 6231,
                    "source": "\n\n\t\t/**\n\t\t * Additional metadata about the diagnostic.\n\t\t */\n\t\ttags?: DiagnosticTag[];",
                    "name": "tags",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "ref": "DiagnosticTag",
                          "targs": [],
                          "isNullable": false,
                          "_": 6231,
                          "source": " DiagnosticTag"
                        }
                      ],
                      "isNullable": false,
                      "_": 6231,
                      "source": " DiagnosticTag[]"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 6251,
                "name": "DiagnosticCollection",
                "generics": [],
                "doc": "A diagnostics collection is a container that manages a set of\n{@link Diagnosticdiagnostics}. Diagnostics are always scopes to a\ndiagnostics collection and a resource.\n\nTo get an instance of a `DiagnosticCollection` use\n{@link languages.createDiagnosticCollectioncreateDiagnosticCollection}.",
                "heritage": [
                  [
                    {
                      "ref": "Iterable",
                      "targs": [
                        {
                          "tuple": [
                            {
                              "ref": "Uri",
                              "targs": [],
                              "isNullable": false,
                              "_": 6251,
                              "source": "uri: Uri"
                            },
                            {
                              "operator": 146,
                              "type": {
                                "core": "array",
                                "targs": [
                                  {
                                    "ref": "Diagnostic",
                                    "targs": [],
                                    "isNullable": false,
                                    "_": 6251,
                                    "source": " Diagnostic"
                                  }
                                ],
                                "isNullable": false,
                                "_": 6251,
                                "source": " Diagnostic[]"
                              },
                              "isNullable": false,
                              "_": 6251,
                              "source": " diagnostics: readonly Diagnostic[]"
                            }
                          ],
                          "isNullable": false,
                          "_": 6251,
                          "source": "[uri: Uri, diagnostics: readonly Diagnostic[]]"
                        }
                      ],
                      "isNullable": false,
                      "_": 6251,
                      "source": " Iterable<[uri: Uri, diagnostics: readonly Diagnostic[]]>"
                    }
                  ]
                ],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The name of this diagnostic collection, for instance `typescript`. Every diagnostic\nfrom this collection will be associated with this name. Also, the task framework uses this\nname when defining [problem matchers](https://code.visualstudio.com/docs/editor/tasks#_defining-a-problem-matcher).",
                    "isMethod": false,
                    "_": 6258,
                    "source": "\n\n\t\t/**\n\t\t * The name of this diagnostic collection, for instance `typescript`. Every diagnostic\n\t\t * from this collection will be associated with this name. Also, the task framework uses this\n\t\t * name when defining [problem matchers](https://code.visualstudio.com/docs/editor/tasks#_defining-a-problem-matcher).\n\t\t */\n\t\treadonly name: string;",
                    "name": "name",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 6258,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Assign diagnostics for given resource. Will replace\n existing diagnostics for that resource.\n\n @param uri A resource identifier.\n @param diagnostics Array of diagnostics or `undefined`",
                    "isMethod": true,
                    "_": 6267,
                    "source": "\n\n\t\t/**\n\t\t * Assign diagnostics for given resource. Will replace\n\t\t * existing diagnostics for that resource.\n\t\t *\n\t\t * @param uri A resource identifier.\n\t\t * @param diagnostics Array of diagnostics or `undefined`\n\t\t */\n\t\tset(uri: Uri, diagnostics: readonly Diagnostic[] | undefined): void;",
                    "name": "set",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "uri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 6267,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "diagnostics",
                        "type": {
                          "union": [
                            {
                              "operator": 146,
                              "type": {
                                "core": "array",
                                "targs": [
                                  {
                                    "ref": "Diagnostic",
                                    "targs": [],
                                    "isNullable": false,
                                    "_": 6267,
                                    "source": " Diagnostic"
                                  }
                                ],
                                "isNullable": false,
                                "_": 6267,
                                "source": " Diagnostic[]"
                              },
                              "isNullable": false,
                              "_": 6267,
                              "source": " readonly Diagnostic[]"
                            },
                            {
                              "core": "undefined",
                              "isNullable": false,
                              "_": 6267,
                              "source": " undefined"
                            }
                          ],
                          "isNullable": false,
                          "_": 6267,
                          "source": " readonly Diagnostic[] | undefined"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 6267,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Replace diagnostics for multiple resources in this collection.\n\n  _Note_ that multiple tuples of the same uri will be merged, e.g\n `[[file1, [d1]], [file1, [d2]]]` is equivalent to `[[file1, [d1, d2]]]`.\n If a diagnostics item is `undefined` as in `[file1, undefined]`\n all previous but not subsequent diagnostics are removed.\n\n @param entries An array of tuples, like `[[file1, [d1, d2]], [file2, [d3, d4, d5]]]`, or `undefined`.",
                    "isMethod": true,
                    "_": 6279,
                    "source": "\n\n\t\t/**\n\t\t * Replace diagnostics for multiple resources in this collection.\n\t\t *\n\t\t *  _Note_ that multiple tuples of the same uri will be merged, e.g\n\t\t * `[[file1, [d1]], [file1, [d2]]]` is equivalent to `[[file1, [d1, d2]]]`.\n\t\t * If a diagnostics item is `undefined` as in `[file1, undefined]`\n\t\t * all previous but not subsequent diagnostics are removed.\n\t\t *\n\t\t * @param entries An array of tuples, like `[[file1, [d1, d2]], [file2, [d3, d4, d5]]]`, or `undefined`.\n\t\t */\n\t\tset(entries: ReadonlyArray<[Uri, readonly Diagnostic[] | undefined]>): void;",
                    "name": "set",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "entries",
                        "type": {
                          "ref": "ReadonlyArray",
                          "targs": [
                            {
                              "tuple": [
                                {
                                  "ref": "Uri",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 6279,
                                  "source": "Uri"
                                },
                                {
                                  "union": [
                                    {
                                      "operator": 146,
                                      "type": {
                                        "core": "array",
                                        "targs": [
                                          {
                                            "ref": "Diagnostic",
                                            "targs": [],
                                            "isNullable": false,
                                            "_": 6279,
                                            "source": " Diagnostic"
                                          }
                                        ],
                                        "isNullable": false,
                                        "_": 6279,
                                        "source": " Diagnostic[]"
                                      },
                                      "isNullable": false,
                                      "_": 6279,
                                      "source": " readonly Diagnostic[]"
                                    },
                                    {
                                      "core": "undefined",
                                      "isNullable": false,
                                      "_": 6279,
                                      "source": " undefined"
                                    }
                                  ],
                                  "isNullable": false,
                                  "_": 6279,
                                  "source": " readonly Diagnostic[] | undefined"
                                }
                              ],
                              "isNullable": false,
                              "_": 6279,
                              "source": "[Uri, readonly Diagnostic[] | undefined]"
                            }
                          ],
                          "isNullable": false,
                          "_": 6279,
                          "source": " ReadonlyArray<[Uri, readonly Diagnostic[] | undefined]>"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 6279,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Remove all diagnostics from this collection that belong\n to the provided `uri`. The same as `#set(uri, undefined)`.\n\n @param uri A resource identifier.",
                    "isMethod": true,
                    "_": 6287,
                    "source": "\n\n\t\t/**\n\t\t * Remove all diagnostics from this collection that belong\n\t\t * to the provided `uri`. The same as `#set(uri, undefined)`.\n\t\t *\n\t\t * @param uri A resource identifier.\n\t\t */\n\t\tdelete(uri: Uri): void;",
                    "name": "delete",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "uri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 6287,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 6287,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Remove all diagnostics from this collection. The same\n as calling `#set(undefined)`;",
                    "isMethod": true,
                    "_": 6293,
                    "source": "\n\n\t\t/**\n\t\t * Remove all diagnostics from this collection. The same\n\t\t * as calling `#set(undefined)`;\n\t\t */\n\t\tclear(): void;",
                    "name": "clear",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 6293,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Iterate over each entry in this collection.\n\n @param callback Function to execute for each entry.\n @param thisArg The `this` context used when invoking the handler function.",
                    "isMethod": true,
                    "_": 6301,
                    "source": "\n\n\t\t/**\n\t\t * Iterate over each entry in this collection.\n\t\t *\n\t\t * @param callback Function to execute for each entry.\n\t\t * @param thisArg The `this` context used when invoking the handler function.\n\t\t */\n\t\tforEach(callback: (uri: Uri, diagnostics: readonly Diagnostic[], collection: DiagnosticCollection) => any, thisArg?: any): void;",
                    "name": "forEach",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "callback",
                        "type": {
                          "ctor": false,
                          "generics": [],
                          "returns": {
                            "core": "any",
                            "isNullable": false,
                            "_": 6301,
                            "source": " any"
                          },
                          "params": [
                            {
                              "name": "uri",
                              "type": {
                                "ref": "Uri",
                                "targs": [],
                                "isNullable": false,
                                "_": 6301,
                                "source": " Uri"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "diagnostics",
                              "type": {
                                "operator": 146,
                                "type": {
                                  "core": "array",
                                  "targs": [
                                    {
                                      "ref": "Diagnostic",
                                      "targs": [],
                                      "isNullable": false,
                                      "_": 6301,
                                      "source": " Diagnostic"
                                    }
                                  ],
                                  "isNullable": false,
                                  "_": 6301,
                                  "source": " Diagnostic[]"
                                },
                                "isNullable": false,
                                "_": 6301,
                                "source": " readonly Diagnostic[]"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "collection",
                              "type": {
                                "ref": "DiagnosticCollection",
                                "targs": [],
                                "isNullable": false,
                                "_": 6301,
                                "source": " DiagnosticCollection"
                              },
                              "varargs": false,
                              "isNullable": false
                            }
                          ],
                          "isNullable": false,
                          "_": 6301,
                          "source": " (uri: Uri, diagnostics: readonly Diagnostic[], collection: DiagnosticCollection) => any"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "thisArg",
                        "type": {
                          "core": "any",
                          "isNullable": false,
                          "_": 6301,
                          "source": " any"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 6301,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Get the diagnostics for a given resource. *Note* that you cannot\n modify the diagnostics-array returned from this call.\n\n @param uri A resource identifier.\n @returns An immutable array of {@link Diagnostic diagnostics} or `undefined`.",
                    "isMethod": true,
                    "_": 6310,
                    "source": "\n\n\t\t/**\n\t\t * Get the diagnostics for a given resource. *Note* that you cannot\n\t\t * modify the diagnostics-array returned from this call.\n\t\t *\n\t\t * @param uri A resource identifier.\n\t\t * @returns An immutable array of {@link Diagnostic diagnostics} or `undefined`.\n\t\t */\n\t\tget(uri: Uri): readonly Diagnostic[] | undefined;",
                    "name": "get",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "uri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 6310,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "union": [
                        {
                          "operator": 146,
                          "type": {
                            "core": "array",
                            "targs": [
                              {
                                "ref": "Diagnostic",
                                "targs": [],
                                "isNullable": false,
                                "_": 6310,
                                "source": " Diagnostic"
                              }
                            ],
                            "isNullable": false,
                            "_": 6310,
                            "source": " Diagnostic[]"
                          },
                          "isNullable": false,
                          "_": 6310,
                          "source": " readonly Diagnostic[]"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 6310,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 6310,
                      "source": " readonly Diagnostic[] | undefined"
                    }
                  },
                  {
                    "doc": "Check if this collection contains diagnostics for a\n given resource.\n\n @param uri A resource identifier.\n @returns `true` if this collection has diagnostic for the given resource.",
                    "isMethod": true,
                    "_": 6319,
                    "source": "\n\n\t\t/**\n\t\t * Check if this collection contains diagnostics for a\n\t\t * given resource.\n\t\t *\n\t\t * @param uri A resource identifier.\n\t\t * @returns `true` if this collection has diagnostic for the given resource.\n\t\t */\n\t\thas(uri: Uri): boolean;",
                    "name": "has",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "uri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 6319,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 6319,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Dispose and free associated resources. Calls\n {@link DiagnosticCollection.clear clear}.",
                    "isMethod": true,
                    "_": 6325,
                    "source": "\n\n\t\t/**\n\t\t * Dispose and free associated resources. Calls\n\t\t * {@link DiagnosticCollection.clear clear}.\n\t\t */\n\t\tdispose(): void;",
                    "name": "dispose",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 6325,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 6341,
                "name": "LanguageStatusItem",
                "generics": [],
                "doc": "A language status item is the preferred way to present language status reports for the active text editors,\nsuch as selected linter or notifying about a configuration problem.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The identifier of this item.",
                    "isMethod": false,
                    "_": 6346,
                    "source": "\n\n\t\t/**\n\t\t * The identifier of this item.\n\t\t */\n\t\treadonly id: string;",
                    "name": "id",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 6346,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The short name of this item, like 'Java Language Status', etc.",
                    "isMethod": false,
                    "_": 6351,
                    "source": "\n\n\t\t/**\n\t\t * The short name of this item, like 'Java Language Status', etc.\n\t\t */\n\t\tname: string | undefined;",
                    "name": "name",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 6351,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 6351,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 6351,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "A {@link DocumentSelector selector} that defines for what editors\n this item shows.",
                    "isMethod": false,
                    "_": 6357,
                    "source": "\n\n\t\t/**\n\t\t * A {@link DocumentSelector selector} that defines for what editors\n\t\t * this item shows.\n\t\t */\n\t\tselector: DocumentSelector;",
                    "name": "selector",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "DocumentSelector",
                      "targs": [],
                      "isNullable": false,
                      "_": 6357,
                      "source": " DocumentSelector"
                    }
                  },
                  {
                    "doc": "The severity of this item.\n\n Defaults to {@link LanguageStatusSeverity.Information information}. You can use this property to\n signal to users that there is a problem that needs attention, like a missing executable or an\n invalid configuration.",
                    "isMethod": false,
                    "_": 6366,
                    "source": "\n\n\t\t/**\n\t\t * The severity of this item.\n\t\t *\n\t\t * Defaults to {@link LanguageStatusSeverity.Information information}. You can use this property to\n\t\t * signal to users that there is a problem that needs attention, like a missing executable or an\n\t\t * invalid configuration.\n\t\t */\n\t\tseverity: LanguageStatusSeverity;",
                    "name": "severity",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "LanguageStatusSeverity",
                      "targs": [],
                      "isNullable": false,
                      "_": 6366,
                      "source": " LanguageStatusSeverity"
                    }
                  },
                  {
                    "doc": "The text to show for the entry. You can embed icons in the text by leveraging the syntax:\n\n `My text $(icon-name) contains icons like $(icon-name) this one.`\n\n Where the icon-name is taken from the ThemeIcon [icon set](https://code.visualstudio.com/api/references/icons-in-labels#icon-listing), e.g.\n `light-bulb`, `thumbsup`, `zap` etc.",
                    "isMethod": false,
                    "_": 6376,
                    "source": "\n\n\t\t/**\n\t\t * The text to show for the entry. You can embed icons in the text by leveraging the syntax:\n\t\t *\n\t\t * `My text $(icon-name) contains icons like $(icon-name) this one.`\n\t\t *\n\t\t * Where the icon-name is taken from the ThemeIcon [icon set](https://code.visualstudio.com/api/references/icons-in-labels#icon-listing), e.g.\n\t\t * `light-bulb`, `thumbsup`, `zap` etc.\n\t\t */\n\t\ttext: string;",
                    "name": "text",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 6376,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Optional, human-readable details for this item.",
                    "isMethod": false,
                    "_": 6381,
                    "source": "\n\n\t\t/**\n\t\t * Optional, human-readable details for this item.\n\t\t */\n\t\tdetail?: string;",
                    "name": "detail",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 6381,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Controls whether the item is shown as \"busy\". Defaults to `false`.",
                    "isMethod": false,
                    "_": 6386,
                    "source": "\n\n\t\t/**\n\t\t * Controls whether the item is shown as \"busy\". Defaults to `false`.\n\t\t */\n\t\tbusy: boolean;",
                    "name": "busy",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 6386,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "A {@linkcode Command command} for this item.",
                    "isMethod": false,
                    "_": 6391,
                    "source": "\n\n\t\t/**\n\t\t * A {@linkcode Command command} for this item.\n\t\t */\n\t\tcommand: Command | undefined;",
                    "name": "command",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "Command",
                          "targs": [],
                          "isNullable": false,
                          "_": 6391,
                          "source": " Command"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 6391,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 6391,
                      "source": " Command | undefined"
                    }
                  },
                  {
                    "doc": "Accessibility information used when a screen reader interacts with this item",
                    "isMethod": false,
                    "_": 6396,
                    "source": "\n\n\t\t/**\n\t\t * Accessibility information used when a screen reader interacts with this item\n\t\t */\n\t\taccessibilityInformation?: AccessibilityInformation;",
                    "name": "accessibilityInformation",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "AccessibilityInformation",
                      "targs": [],
                      "isNullable": false,
                      "_": 6396,
                      "source": " AccessibilityInformation"
                    }
                  },
                  {
                    "doc": "Dispose and free associated resources.",
                    "isMethod": true,
                    "_": 6401,
                    "source": "\n\n\t\t/**\n\t\t * Dispose and free associated resources.\n\t\t */\n\t\tdispose(): void;",
                    "name": "dispose",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 6401,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 6466,
                "name": "OutputChannel",
                "generics": [],
                "doc": "An output channel is a container for readonly textual information.\n\nTo get an instance of an `OutputChannel` use\n{@link window.createOutputChannelcreateOutputChannel}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The human-readable name of this output channel.",
                    "isMethod": false,
                    "_": 6471,
                    "source": "\n\n\t\t/**\n\t\t * The human-readable name of this output channel.\n\t\t */\n\t\treadonly name: string;",
                    "name": "name",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 6471,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Append the given value to the channel.\n\n @param value A string, falsy values will not be printed.",
                    "isMethod": true,
                    "_": 6478,
                    "source": "\n\n\t\t/**\n\t\t * Append the given value to the channel.\n\t\t *\n\t\t * @param value A string, falsy values will not be printed.\n\t\t */\n\t\tappend(value: string): void;",
                    "name": "append",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "value",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 6478,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 6478,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Append the given value and a line feed character\n to the channel.\n\n @param value A string, falsy values will be printed.",
                    "isMethod": true,
                    "_": 6486,
                    "source": "\n\n\t\t/**\n\t\t * Append the given value and a line feed character\n\t\t * to the channel.\n\t\t *\n\t\t * @param value A string, falsy values will be printed.\n\t\t */\n\t\tappendLine(value: string): void;",
                    "name": "appendLine",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "value",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 6486,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 6486,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Replaces all output from the channel with the given value.\n\n @param value A string, falsy values will not be printed.",
                    "isMethod": true,
                    "_": 6493,
                    "source": "\n\n\t\t/**\n\t\t * Replaces all output from the channel with the given value.\n\t\t *\n\t\t * @param value A string, falsy values will not be printed.\n\t\t */\n\t\treplace(value: string): void;",
                    "name": "replace",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "value",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 6493,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 6493,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Removes all output from the channel.",
                    "isMethod": true,
                    "_": 6498,
                    "source": "\n\n\t\t/**\n\t\t * Removes all output from the channel.\n\t\t */\n\t\tclear(): void;",
                    "name": "clear",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 6498,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Reveal this channel in the UI.\n\n @param preserveFocus When `true` the channel will not take focus.",
                    "isMethod": true,
                    "_": 6505,
                    "source": "\n\n\t\t/**\n\t\t * Reveal this channel in the UI.\n\t\t *\n\t\t * @param preserveFocus When `true` the channel will not take focus.\n\t\t */\n\t\tshow(preserveFocus?: boolean): void;",
                    "name": "show",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "preserveFocus",
                        "type": {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 6505,
                          "source": " boolean"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 6505,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Reveal this channel in the UI.\n\n @deprecated Use the overload with just one parameter (`show(preserveFocus?: boolean): void`).\n\n @param column This argument is **deprecated** and will be ignored.\n @param preserveFocus When `true` the channel will not take focus.",
                    "isMethod": true,
                    "_": 6515,
                    "source": "\n\n\t\t/**\n\t\t * Reveal this channel in the UI.\n\t\t *\n\t\t * @deprecated Use the overload with just one parameter (`show(preserveFocus?: boolean): void`).\n\t\t *\n\t\t * @param column This argument is **deprecated** and will be ignored.\n\t\t * @param preserveFocus When `true` the channel will not take focus.\n\t\t */\n\t\tshow(column?: ViewColumn, preserveFocus?: boolean): void;",
                    "name": "show",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "column",
                        "type": {
                          "ref": "ViewColumn",
                          "targs": [],
                          "isNullable": false,
                          "_": 6515,
                          "source": " ViewColumn"
                        },
                        "varargs": false,
                        "isNullable": true
                      },
                      {
                        "name": "preserveFocus",
                        "type": {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 6515,
                          "source": " boolean"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 6515,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Hide this channel from the UI.",
                    "isMethod": true,
                    "_": 6520,
                    "source": "\n\n\t\t/**\n\t\t * Hide this channel from the UI.\n\t\t */\n\t\thide(): void;",
                    "name": "hide",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 6520,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Dispose and free associated resources.",
                    "isMethod": true,
                    "_": 6525,
                    "source": "\n\n\t\t/**\n\t\t * Dispose and free associated resources.\n\t\t */\n\t\tdispose(): void;",
                    "name": "dispose",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 6525,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 6534,
                "name": "LogOutputChannel",
                "generics": [],
                "doc": "A channel for containing log output.\n\nTo get an instance of a `LogOutputChannel` use\n{@link window.createOutputChannelcreateOutputChannel}.",
                "heritage": [
                  [
                    {
                      "ref": "OutputChannel",
                      "targs": [],
                      "isNullable": false,
                      "_": 6534,
                      "source": " OutputChannel"
                    }
                  ]
                ],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The current log level of the channel. Defaults to {@link env.logLeveleditor log level}.",
                    "isMethod": false,
                    "_": 6539,
                    "source": "\n\n\t\t/**\n\t\t * The current log level of the channel. Defaults to {@link env.logLevel editor log level}.\n\t\t */\n\t\treadonly logLevel: LogLevel;",
                    "name": "logLevel",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "LogLevel",
                      "targs": [],
                      "isNullable": false,
                      "_": 6539,
                      "source": " LogLevel"
                    }
                  },
                  {
                    "doc": "An {@link Event} which fires when the log level of the channel changes.",
                    "isMethod": false,
                    "_": 6544,
                    "source": "\n\n\t\t/**\n\t\t * An {@link Event} which fires when the log level of the channel changes.\n\t\t */\n\t\treadonly onDidChangeLogLevel: Event<LogLevel>;",
                    "name": "onDidChangeLogLevel",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "ref": "LogLevel",
                          "targs": [],
                          "isNullable": false,
                          "_": 6544,
                          "source": "LogLevel"
                        }
                      ],
                      "isNullable": false,
                      "_": 6544,
                      "source": " Event<LogLevel>"
                    }
                  },
                  {
                    "doc": "Outputs the given trace message to the channel. Use this method to log verbose information.\n\n The message is only logged if the channel is configured to display {@link LogLevel.Trace trace} log level.\n\n @param message trace message to log",
                    "isMethod": true,
                    "_": 6553,
                    "source": "\n\n\t\t/**\n\t\t * Outputs the given trace message to the channel. Use this method to log verbose information.\n\t\t *\n\t\t * The message is only logged if the channel is configured to display {@link LogLevel.Trace trace} log level.\n\t\t *\n\t\t * @param message trace message to log\n\t\t */\n\t\ttrace(message: string, ...args: any[]): void;",
                    "name": "trace",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "message",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 6553,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "args",
                        "type": {
                          "core": "array",
                          "targs": [
                            {
                              "core": "any",
                              "isNullable": false,
                              "_": 6553,
                              "source": " any"
                            }
                          ],
                          "isNullable": false,
                          "_": 6553,
                          "source": " any[]"
                        },
                        "varargs": true,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 6553,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Outputs the given debug message to the channel.\n\n The message is only logged if the channel is configured to display {@link LogLevel.Debug debug} log level or lower.\n\n @param message debug message to log",
                    "isMethod": true,
                    "_": 6562,
                    "source": "\n\n\t\t/**\n\t\t * Outputs the given debug message to the channel.\n\t\t *\n\t\t * The message is only logged if the channel is configured to display {@link LogLevel.Debug debug} log level or lower.\n\t\t *\n\t\t * @param message debug message to log\n\t\t */\n\t\tdebug(message: string, ...args: any[]): void;",
                    "name": "debug",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "message",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 6562,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "args",
                        "type": {
                          "core": "array",
                          "targs": [
                            {
                              "core": "any",
                              "isNullable": false,
                              "_": 6562,
                              "source": " any"
                            }
                          ],
                          "isNullable": false,
                          "_": 6562,
                          "source": " any[]"
                        },
                        "varargs": true,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 6562,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Outputs the given information message to the channel.\n\n The message is only logged if the channel is configured to display {@link LogLevel.Info info} log level or lower.\n\n @param message info message to log",
                    "isMethod": true,
                    "_": 6571,
                    "source": "\n\n\t\t/**\n\t\t * Outputs the given information message to the channel.\n\t\t *\n\t\t * The message is only logged if the channel is configured to display {@link LogLevel.Info info} log level or lower.\n\t\t *\n\t\t * @param message info message to log\n\t\t */\n\t\tinfo(message: string, ...args: any[]): void;",
                    "name": "info",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "message",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 6571,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "args",
                        "type": {
                          "core": "array",
                          "targs": [
                            {
                              "core": "any",
                              "isNullable": false,
                              "_": 6571,
                              "source": " any"
                            }
                          ],
                          "isNullable": false,
                          "_": 6571,
                          "source": " any[]"
                        },
                        "varargs": true,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 6571,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Outputs the given warning message to the channel.\n\n The message is only logged if the channel is configured to display {@link LogLevel.Warning warning} log level or lower.\n\n @param message warning message to log",
                    "isMethod": true,
                    "_": 6580,
                    "source": "\n\n\t\t/**\n\t\t * Outputs the given warning message to the channel.\n\t\t *\n\t\t * The message is only logged if the channel is configured to display {@link LogLevel.Warning warning} log level or lower.\n\t\t *\n\t\t * @param message warning message to log\n\t\t */\n\t\twarn(message: string, ...args: any[]): void;",
                    "name": "warn",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "message",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 6580,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "args",
                        "type": {
                          "core": "array",
                          "targs": [
                            {
                              "core": "any",
                              "isNullable": false,
                              "_": 6580,
                              "source": " any"
                            }
                          ],
                          "isNullable": false,
                          "_": 6580,
                          "source": " any[]"
                        },
                        "varargs": true,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 6580,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Outputs the given error or error message to the channel.\n\n The message is only logged if the channel is configured to display {@link LogLevel.Error error} log level or lower.\n\n @param error Error or error message to log",
                    "isMethod": true,
                    "_": 6589,
                    "source": "\n\n\t\t/**\n\t\t * Outputs the given error or error message to the channel.\n\t\t *\n\t\t * The message is only logged if the channel is configured to display {@link LogLevel.Error error} log level or lower.\n\t\t *\n\t\t * @param error Error or error message to log\n\t\t */\n\t\terror(error: string | Error, ...args: any[]): void;",
                    "name": "error",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "error",
                        "type": {
                          "union": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 6589,
                              "source": " string"
                            },
                            {
                              "ref": "Error",
                              "targs": [],
                              "isNullable": false,
                              "_": 6589,
                              "source": " Error"
                            }
                          ],
                          "isNullable": false,
                          "_": 6589,
                          "source": " string | Error"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "args",
                        "type": {
                          "core": "array",
                          "targs": [
                            {
                              "core": "any",
                              "isNullable": false,
                              "_": 6589,
                              "source": " any"
                            }
                          ],
                          "isNullable": false,
                          "_": 6589,
                          "source": " any[]"
                        },
                        "varargs": true,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 6589,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 6595,
                "name": "AccessibilityInformation",
                "generics": [],
                "doc": "Accessibility information which controls screen reader behavior.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Label to be read out by a screen reader once the item has focus.",
                    "isMethod": false,
                    "_": 6599,
                    "source": "\n\t\t/**\n\t\t * Label to be read out by a screen reader once the item has focus.\n\t\t */\n\t\treadonly label: string;",
                    "name": "label",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 6599,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Role of the widget which defines how a screen reader interacts with it.\nThe role should be set in special cases when for example a tree-like element behaves like a checkbox.\nIf role is not specified the editor will pick the appropriate role automatically.\nMore about aria roles can be found here https://w3c.github.io/aria/#widget_roles",
                    "isMethod": false,
                    "_": 6607,
                    "source": "\n\n\t\t/**\n\t\t * Role of the widget which defines how a screen reader interacts with it.\n\t\t * The role should be set in special cases when for example a tree-like element behaves like a checkbox.\n\t\t * If role is not specified the editor will pick the appropriate role automatically.\n\t\t * More about aria roles can be found here https://w3c.github.io/aria/#widget_roles\n\t\t */\n\t\treadonly role?: string;",
                    "name": "role",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 6607,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 6630,
                "name": "StatusBarItem",
                "generics": [],
                "doc": "A status bar item is a status bar contribution that can\nshow text and icons and run a command on click.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The identifier of this item.\n\n*Note*: if no identifier was provided by the {@linkcode window.createStatusBarItem}\nmethod, the identifier will match the {@link Extension.idextension identifier}.",
                    "isMethod": false,
                    "_": 6638,
                    "source": "\n\n\t\t/**\n\t\t * The identifier of this item.\n\t\t *\n\t\t * *Note*: if no identifier was provided by the {@linkcode window.createStatusBarItem}\n\t\t * method, the identifier will match the {@link Extension.id extension identifier}.\n\t\t */\n\t\treadonly id: string;",
                    "name": "id",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 6638,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The alignment of this item.",
                    "isMethod": false,
                    "_": 6643,
                    "source": "\n\n\t\t/**\n\t\t * The alignment of this item.\n\t\t */\n\t\treadonly alignment: StatusBarAlignment;",
                    "name": "alignment",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "StatusBarAlignment",
                      "targs": [],
                      "isNullable": false,
                      "_": 6643,
                      "source": " StatusBarAlignment"
                    }
                  },
                  {
                    "doc": "The priority of this item. Higher value means the item should\nbe shown more to the left.",
                    "isMethod": false,
                    "_": 6649,
                    "source": "\n\n\t\t/**\n\t\t * The priority of this item. Higher value means the item should\n\t\t * be shown more to the left.\n\t\t */\n\t\treadonly priority: number | undefined;",
                    "name": "priority",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 6649,
                          "source": " number"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 6649,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 6649,
                      "source": " number | undefined"
                    }
                  },
                  {
                    "doc": "The name of the entry, like 'Python Language Indicator', 'Git Status' etc.\n Try to keep the length of the name short, yet descriptive enough that\n users can understand what the status bar item is about.",
                    "isMethod": false,
                    "_": 6656,
                    "source": "\n\n\t\t/**\n\t\t * The name of the entry, like 'Python Language Indicator', 'Git Status' etc.\n\t\t * Try to keep the length of the name short, yet descriptive enough that\n\t\t * users can understand what the status bar item is about.\n\t\t */\n\t\tname: string | undefined;",
                    "name": "name",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 6656,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 6656,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 6656,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "The text to show for the entry. You can embed icons in the text by leveraging the syntax:\n\n `My text $(icon-name) contains icons like $(icon-name) this one.`\n\n Where the icon-name is taken from the ThemeIcon [icon set](https://code.visualstudio.com/api/references/icons-in-labels#icon-listing), e.g.\n `light-bulb`, `thumbsup`, `zap` etc.",
                    "isMethod": false,
                    "_": 6666,
                    "source": "\n\n\t\t/**\n\t\t * The text to show for the entry. You can embed icons in the text by leveraging the syntax:\n\t\t *\n\t\t * `My text $(icon-name) contains icons like $(icon-name) this one.`\n\t\t *\n\t\t * Where the icon-name is taken from the ThemeIcon [icon set](https://code.visualstudio.com/api/references/icons-in-labels#icon-listing), e.g.\n\t\t * `light-bulb`, `thumbsup`, `zap` etc.\n\t\t */\n\t\ttext: string;",
                    "name": "text",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 6666,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The tooltip text when you hover over this entry.",
                    "isMethod": false,
                    "_": 6671,
                    "source": "\n\n\t\t/**\n\t\t * The tooltip text when you hover over this entry.\n\t\t */\n\t\ttooltip: string | MarkdownString | undefined;",
                    "name": "tooltip",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 6671,
                          "source": " string"
                        },
                        {
                          "ref": "MarkdownString",
                          "targs": [],
                          "isNullable": false,
                          "_": 6671,
                          "source": " MarkdownString"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 6671,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 6671,
                      "source": " string | MarkdownString | undefined"
                    }
                  },
                  {
                    "doc": "The foreground color for this entry.",
                    "isMethod": false,
                    "_": 6676,
                    "source": "\n\n\t\t/**\n\t\t * The foreground color for this entry.\n\t\t */\n\t\tcolor: string | ThemeColor | undefined;",
                    "name": "color",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 6676,
                          "source": " string"
                        },
                        {
                          "ref": "ThemeColor",
                          "targs": [],
                          "isNullable": false,
                          "_": 6676,
                          "source": " ThemeColor"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 6676,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 6676,
                      "source": " string | ThemeColor | undefined"
                    }
                  },
                  {
                    "doc": "The background color for this entry.\n\n *Note*: only the following colors are supported:\n * `new ThemeColor('statusBarItem.errorBackground')`\n * `new ThemeColor('statusBarItem.warningBackground')`\n\n More background colors may be supported in the future.\n\n *Note*: when a background color is set, the statusbar may override\n the `color` choice to ensure the entry is readable in all themes.",
                    "isMethod": false,
                    "_": 6690,
                    "source": "\n\n\t\t/**\n\t\t * The background color for this entry.\n\t\t *\n\t\t * *Note*: only the following colors are supported:\n\t\t * * `new ThemeColor('statusBarItem.errorBackground')`\n\t\t * * `new ThemeColor('statusBarItem.warningBackground')`\n\t\t *\n\t\t * More background colors may be supported in the future.\n\t\t *\n\t\t * *Note*: when a background color is set, the statusbar may override\n\t\t * the `color` choice to ensure the entry is readable in all themes.\n\t\t */\n\t\tbackgroundColor: ThemeColor | undefined;",
                    "name": "backgroundColor",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "ThemeColor",
                          "targs": [],
                          "isNullable": false,
                          "_": 6690,
                          "source": " ThemeColor"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 6690,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 6690,
                      "source": " ThemeColor | undefined"
                    }
                  },
                  {
                    "doc": "{@linkcode Command} or identifier of a command to run on click.\n\n The command must be {@link commands.getCommands known}.\n\n Note that if this is a {@linkcode Command} object, only the {@linkcode Command.command command} and {@linkcode Command.arguments arguments}\n are used by the editor.",
                    "isMethod": false,
                    "_": 6700,
                    "source": "\n\n\t\t/**\n\t\t * {@linkcode Command} or identifier of a command to run on click.\n\t\t *\n\t\t * The command must be {@link commands.getCommands known}.\n\t\t *\n\t\t * Note that if this is a {@linkcode Command} object, only the {@linkcode Command.command command} and {@linkcode Command.arguments arguments}\n\t\t * are used by the editor.\n\t\t */\n\t\tcommand: string | Command | undefined;",
                    "name": "command",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 6700,
                          "source": " string"
                        },
                        {
                          "ref": "Command",
                          "targs": [],
                          "isNullable": false,
                          "_": 6700,
                          "source": " Command"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 6700,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 6700,
                      "source": " string | Command | undefined"
                    }
                  },
                  {
                    "doc": "Accessibility information used when a screen reader interacts with this StatusBar item",
                    "isMethod": false,
                    "_": 6705,
                    "source": "\n\n\t\t/**\n\t\t * Accessibility information used when a screen reader interacts with this StatusBar item\n\t\t */\n\t\taccessibilityInformation: AccessibilityInformation | undefined;",
                    "name": "accessibilityInformation",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "AccessibilityInformation",
                          "targs": [],
                          "isNullable": false,
                          "_": 6705,
                          "source": " AccessibilityInformation"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 6705,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 6705,
                      "source": " AccessibilityInformation | undefined"
                    }
                  },
                  {
                    "doc": "Shows the entry in the status bar.",
                    "isMethod": true,
                    "_": 6710,
                    "source": "\n\n\t\t/**\n\t\t * Shows the entry in the status bar.\n\t\t */\n\t\tshow(): void;",
                    "name": "show",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 6710,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Hide the entry in the status bar.",
                    "isMethod": true,
                    "_": 6715,
                    "source": "\n\n\t\t/**\n\t\t * Hide the entry in the status bar.\n\t\t */\n\t\thide(): void;",
                    "name": "hide",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 6715,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Dispose and free associated resources. Call\n {@link StatusBarItem.hide hide}.",
                    "isMethod": true,
                    "_": 6721,
                    "source": "\n\n\t\t/**\n\t\t * Dispose and free associated resources. Call\n\t\t * {@link StatusBarItem.hide hide}.\n\t\t */\n\t\tdispose(): void;",
                    "name": "dispose",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 6721,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 6727,
                "name": "Progress",
                "generics": [
                  {
                    "name": "T",
                    "_": 6727,
                    "source": "T"
                  }
                ],
                "doc": "Defines a generalized way of reporting progress updates.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Report a progress update.\n @param value A progress item, like a message and/or an\n report on how much work finished",
                    "isMethod": true,
                    "_": 6734,
                    "source": "\n\n\t\t/**\n\t\t * Report a progress update.\n\t\t * @param value A progress item, like a message and/or an\n\t\t * report on how much work finished\n\t\t */\n\t\treport(value: T): void;",
                    "name": "report",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "value",
                        "type": {
                          "ref": "T",
                          "targs": [],
                          "isNullable": false,
                          "_": 6734,
                          "source": " T"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 6734,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 6740,
                "name": "Terminal",
                "generics": [],
                "doc": "An individual terminal instance within the integrated terminal.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The name of the terminal.",
                    "isMethod": false,
                    "_": 6745,
                    "source": "\n\n\t\t/**\n\t\t * The name of the terminal.\n\t\t */\n\t\treadonly name: string;",
                    "name": "name",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 6745,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The process ID of the shell process.",
                    "isMethod": false,
                    "_": 6750,
                    "source": "\n\n\t\t/**\n\t\t * The process ID of the shell process.\n\t\t */\n\t\treadonly processId: Thenable<number | undefined>;",
                    "name": "processId",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Thenable",
                      "targs": [
                        {
                          "union": [
                            {
                              "core": "number",
                              "isNullable": false,
                              "_": 6750,
                              "source": "number"
                            },
                            {
                              "core": "undefined",
                              "isNullable": false,
                              "_": 6750,
                              "source": " undefined"
                            }
                          ],
                          "isNullable": false,
                          "_": 6750,
                          "source": "number | undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 6750,
                      "source": " Thenable<number | undefined>"
                    }
                  },
                  {
                    "doc": "The object used to initialize the terminal, this is useful for example to detecting the\nshell type of when the terminal was not launched by this extension or for detecting what\nfolder the shell was launched in.",
                    "isMethod": false,
                    "_": 6757,
                    "source": "\n\n\t\t/**\n\t\t * The object used to initialize the terminal, this is useful for example to detecting the\n\t\t * shell type of when the terminal was not launched by this extension or for detecting what\n\t\t * folder the shell was launched in.\n\t\t */\n\t\treadonly creationOptions: Readonly<TerminalOptions | ExtensionTerminalOptions>;",
                    "name": "creationOptions",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Readonly",
                      "targs": [
                        {
                          "union": [
                            {
                              "ref": "TerminalOptions",
                              "targs": [],
                              "isNullable": false,
                              "_": 6757,
                              "source": "TerminalOptions"
                            },
                            {
                              "ref": "ExtensionTerminalOptions",
                              "targs": [],
                              "isNullable": false,
                              "_": 6757,
                              "source": " ExtensionTerminalOptions"
                            }
                          ],
                          "isNullable": false,
                          "_": 6757,
                          "source": "TerminalOptions | ExtensionTerminalOptions"
                        }
                      ],
                      "isNullable": false,
                      "_": 6757,
                      "source": " Readonly<TerminalOptions | ExtensionTerminalOptions>"
                    }
                  },
                  {
                    "doc": "The exit status of the terminal, this will be undefined while the terminal is active.\n\n**Example:** Show a notification with the exit code when the terminal exits with a\nnon-zero exit code.\n```typescript\nwindow.onDidCloseTerminal(t => {\n  if (t.exitStatus && t.exitStatus.code) {\n  \tvscode.window.showInformationMessage(`Exit code: ${t.exitStatus.code}`);\n  }\n});\n```",
                    "isMethod": false,
                    "_": 6772,
                    "source": "\n\n\t\t/**\n\t\t * The exit status of the terminal, this will be undefined while the terminal is active.\n\t\t *\n\t\t * **Example:** Show a notification with the exit code when the terminal exits with a\n\t\t * non-zero exit code.\n\t\t * ```typescript\n\t\t * window.onDidCloseTerminal(t => {\n\t\t *   if (t.exitStatus && t.exitStatus.code) {\n\t\t *   \tvscode.window.showInformationMessage(`Exit code: ${t.exitStatus.code}`);\n\t\t *   }\n\t\t * });\n\t\t * ```\n\t\t */\n\t\treadonly exitStatus: TerminalExitStatus | undefined;",
                    "name": "exitStatus",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "TerminalExitStatus",
                          "targs": [],
                          "isNullable": false,
                          "_": 6772,
                          "source": " TerminalExitStatus"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 6772,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 6772,
                      "source": " TerminalExitStatus | undefined"
                    }
                  },
                  {
                    "doc": "The current state of the {@link Terminal}.",
                    "isMethod": false,
                    "_": 6777,
                    "source": "\n\n\t\t/**\n\t\t * The current state of the {@link Terminal}.\n\t\t */\n\t\treadonly state: TerminalState;",
                    "name": "state",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "TerminalState",
                      "targs": [],
                      "isNullable": false,
                      "_": 6777,
                      "source": " TerminalState"
                    }
                  },
                  {
                    "doc": "Send text to the terminal. The text is written to the stdin of the underlying pty process\n (shell) of the terminal.\n\n @param text The text to send.\n @param addNewLine Whether to add a new line to the text being sent, this is normally\n required to run a command in the terminal. The character(s) added are \\n or \\r\\n\n depending on the platform. This defaults to `true`.",
                    "isMethod": true,
                    "_": 6788,
                    "source": "\n\n\t\t/**\n\t\t * Send text to the terminal. The text is written to the stdin of the underlying pty process\n\t\t * (shell) of the terminal.\n\t\t *\n\t\t * @param text The text to send.\n\t\t * @param addNewLine Whether to add a new line to the text being sent, this is normally\n\t\t * required to run a command in the terminal. The character(s) added are \\n or \\r\\n\n\t\t * depending on the platform. This defaults to `true`.\n\t\t */\n\t\tsendText(text: string, addNewLine?: boolean): void;",
                    "name": "sendText",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "text",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 6788,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "addNewLine",
                        "type": {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 6788,
                          "source": " boolean"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 6788,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Show the terminal panel and reveal this terminal in the UI.\n\n @param preserveFocus When `true` the terminal will not take focus.",
                    "isMethod": true,
                    "_": 6795,
                    "source": "\n\n\t\t/**\n\t\t * Show the terminal panel and reveal this terminal in the UI.\n\t\t *\n\t\t * @param preserveFocus When `true` the terminal will not take focus.\n\t\t */\n\t\tshow(preserveFocus?: boolean): void;",
                    "name": "show",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "preserveFocus",
                        "type": {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 6795,
                          "source": " boolean"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 6795,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Hide the terminal panel if this terminal is currently showing.",
                    "isMethod": true,
                    "_": 6800,
                    "source": "\n\n\t\t/**\n\t\t * Hide the terminal panel if this terminal is currently showing.\n\t\t */\n\t\thide(): void;",
                    "name": "hide",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 6800,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Dispose and free associated resources.",
                    "isMethod": true,
                    "_": 6805,
                    "source": "\n\n\t\t/**\n\t\t * Dispose and free associated resources.\n\t\t */\n\t\tdispose(): void;",
                    "name": "dispose",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 6805,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 6826,
                "name": "TerminalEditorLocationOptions",
                "generics": [],
                "doc": "Assumes a {@link TerminalLocation} of editor and allows specifying a {@link ViewColumn} and\n{@link TerminalEditorLocationOptions.preserveFocuspreserveFocus } property",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "A view column in which the {@link Terminal terminal} should be shown in the editor area.\n The default is the {@link ViewColumn.Active active}. Columns that do not exist\n will be created as needed up to the maximum of {@linkcode ViewColumn.Nine}.\n Use {@linkcode ViewColumn.Beside} to open the editor to the side of the currently\n active one.",
                    "isMethod": false,
                    "_": 6834,
                    "source": "\n\t\t/**\n\t\t * A view column in which the {@link Terminal terminal} should be shown in the editor area.\n\t\t * The default is the {@link ViewColumn.Active active}. Columns that do not exist\n\t\t * will be created as needed up to the maximum of {@linkcode ViewColumn.Nine}.\n\t\t * Use {@linkcode ViewColumn.Beside} to open the editor to the side of the currently\n\t\t * active one.\n\t\t */\n\t\tviewColumn: ViewColumn;",
                    "name": "viewColumn",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "ViewColumn",
                      "targs": [],
                      "isNullable": false,
                      "_": 6834,
                      "source": " ViewColumn"
                    }
                  },
                  {
                    "doc": "An optional flag that when `true` will stop the {@link Terminal} from taking focus.",
                    "isMethod": false,
                    "_": 6838,
                    "source": "\n\t\t/**\n\t\t * An optional flag that when `true` will stop the {@link Terminal} from taking focus.\n\t\t */\n\t\tpreserveFocus?: boolean;",
                    "name": "preserveFocus",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 6838,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 6844,
                "name": "TerminalSplitLocationOptions",
                "generics": [],
                "doc": "Uses the parent {@link Terminal}'s location for the terminal",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The parent terminal to split this terminal beside. This works whether the parent terminal\n is in the panel or the editor area.",
                    "isMethod": false,
                    "_": 6849,
                    "source": "\n\t\t/**\n\t\t * The parent terminal to split this terminal beside. This works whether the parent terminal\n\t\t * is in the panel or the editor area.\n\t\t */\n\t\tparentTerminal: Terminal;",
                    "name": "parentTerminal",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Terminal",
                      "targs": [],
                      "isNullable": false,
                      "_": 6849,
                      "source": " Terminal"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 6855,
                "name": "TerminalState",
                "generics": [],
                "doc": "Represents the state of a {@link Terminal}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Whether the {@link Terminal} has been interacted with. Interaction means that the\nterminal has sent data to the process which depending on the terminal's _mode_. By\ndefault input is sent when a key is pressed or when a command or extension sends text,\nbut based on the terminal's mode it can also happen on:\n\n- a pointer click event\n- a pointer scroll event\n- a pointer move event\n- terminal focus in/out\n\nFor more information on events that can send data see \"DEC Private Mode Set (DECSET)\" on\nhttps://invisible-island.net/xterm/ctlseqs/ctlseqs.html",
                    "isMethod": false,
                    "_": 6870,
                    "source": "\n\t\t/**\n\t\t * Whether the {@link Terminal} has been interacted with. Interaction means that the\n\t\t * terminal has sent data to the process which depending on the terminal's _mode_. By\n\t\t * default input is sent when a key is pressed or when a command or extension sends text,\n\t\t * but based on the terminal's mode it can also happen on:\n\t\t *\n\t\t * - a pointer click event\n\t\t * - a pointer scroll event\n\t\t * - a pointer move event\n\t\t * - terminal focus in/out\n\t\t *\n\t\t * For more information on events that can send data see \"DEC Private Mode Set (DECSET)\" on\n\t\t * https://invisible-island.net/xterm/ctlseqs/ctlseqs.html\n\t\t */\n\t\treadonly isInteractedWith: boolean;",
                    "name": "isInteractedWith",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 6870,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 6876,
                "name": "TerminalLinkContext",
                "generics": [],
                "doc": "Provides information on a line in a terminal in order to provide links for it.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "This is the text from the unwrapped line in the terminal.",
                    "isMethod": false,
                    "_": 6880,
                    "source": "\n\t\t/**\n\t\t * This is the text from the unwrapped line in the terminal.\n\t\t */\n\t\tline: string;",
                    "name": "line",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 6880,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The terminal the link belongs to.",
                    "isMethod": false,
                    "_": 6885,
                    "source": "\n\n\t\t/**\n\t\t * The terminal the link belongs to.\n\t\t */\n\t\tterminal: Terminal;",
                    "name": "terminal",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Terminal",
                      "targs": [],
                      "isNullable": false,
                      "_": 6885,
                      "source": " Terminal"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 6891,
                "name": "TerminalLinkProvider",
                "generics": [
                  {
                    "name": "T",
                    "constraint": {
                      "ref": "TerminalLink",
                      "targs": [],
                      "isNullable": false,
                      "_": 6891,
                      "source": " TerminalLink"
                    },
                    "default": {
                      "ref": "TerminalLink",
                      "targs": [],
                      "isNullable": false,
                      "_": 6891,
                      "source": " TerminalLink"
                    },
                    "_": 6891,
                    "source": "T extends TerminalLink = TerminalLink"
                  }
                ],
                "doc": "A provider that enables detection and handling of links within terminals.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Provide terminal links for the given context. Note that this can be called multiple times\n even before previous calls resolve, make sure to not share global objects (eg. `RegExp`)\n that could have problems when asynchronous usage may overlap.\n @param context Information about what links are being provided for.\n @param token A cancellation token.\n @return A list of terminal links for the given line.",
                    "isMethod": true,
                    "_": 6900,
                    "source": "\n\t\t/**\n\t\t * Provide terminal links for the given context. Note that this can be called multiple times\n\t\t * even before previous calls resolve, make sure to not share global objects (eg. `RegExp`)\n\t\t * that could have problems when asynchronous usage may overlap.\n\t\t * @param context Information about what links are being provided for.\n\t\t * @param token A cancellation token.\n\t\t * @return A list of terminal links for the given line.\n\t\t */\n\t\tprovideTerminalLinks(context: TerminalLinkContext, token: CancellationToken): ProviderResult<T[]>;",
                    "name": "provideTerminalLinks",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "context",
                        "type": {
                          "ref": "TerminalLinkContext",
                          "targs": [],
                          "isNullable": false,
                          "_": 6900,
                          "source": " TerminalLinkContext"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 6900,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "T",
                              "targs": [],
                              "isNullable": false,
                              "_": 6900,
                              "source": "T"
                            }
                          ],
                          "isNullable": false,
                          "_": 6900,
                          "source": "T[]"
                        }
                      ],
                      "isNullable": false,
                      "_": 6900,
                      "source": " ProviderResult<T[]>"
                    }
                  },
                  {
                    "doc": "Handle an activated terminal link.\n @param link The link to handle.",
                    "isMethod": true,
                    "_": 6906,
                    "source": "\n\n\t\t/**\n\t\t * Handle an activated terminal link.\n\t\t * @param link The link to handle.\n\t\t */\n\t\thandleTerminalLink(link: T): ProviderResult<void>;",
                    "name": "handleTerminalLink",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "link",
                        "type": {
                          "ref": "T",
                          "targs": [],
                          "isNullable": false,
                          "_": 6906,
                          "source": " T"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 6906,
                          "source": "void"
                        }
                      ],
                      "isNullable": false,
                      "_": 6906,
                      "source": " ProviderResult<void>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 6912,
                "name": "TerminalLink",
                "generics": [],
                "doc": "A link on a terminal line.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 6942,
                    "source": "\n\n\t\t/**\n\t\t * Creates a new terminal link.\n\t\t * @param startIndex The start index of the link on {@link TerminalLinkContext.line}.\n\t\t * @param length The length of the link on {@link TerminalLinkContext.line}.\n\t\t * @param tooltip The tooltip text when you hover over this link.\n\t\t *\n\t\t * If a tooltip is provided, is will be displayed in a string that includes instructions on\n\t\t * how to trigger the link, such as `{0} (ctrl + click)`. The specific instructions vary\n\t\t * depending on OS, user settings, and localization.\n\t\t */\n\t\tconstructor(startIndex: number, length: number, tooltip?: string);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "startIndex",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 6942,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "length",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 6942,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "tooltip",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 6942,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The start index of the link on {@link TerminalLinkContext.line}.",
                    "isMethod": false,
                    "_": 6916,
                    "source": "\n\t\t/**\n\t\t * The start index of the link on {@link TerminalLinkContext.line}.\n\t\t */\n\t\tstartIndex: number;",
                    "name": "startIndex",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 6916,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "The length of the link on {@link TerminalLinkContext.line}.",
                    "isMethod": false,
                    "_": 6921,
                    "source": "\n\n\t\t/**\n\t\t * The length of the link on {@link TerminalLinkContext.line}.\n\t\t */\n\t\tlength: number;",
                    "name": "length",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 6921,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "The tooltip text when you hover over this link.\n\n If a tooltip is provided, is will be displayed in a string that includes instructions on\n how to trigger the link, such as `{0} (ctrl + click)`. The specific instructions vary\n depending on OS, user settings, and localization.",
                    "isMethod": false,
                    "_": 6930,
                    "source": "\n\n\t\t/**\n\t\t * The tooltip text when you hover over this link.\n\t\t *\n\t\t * If a tooltip is provided, is will be displayed in a string that includes instructions on\n\t\t * how to trigger the link, such as `{0} (ctrl + click)`. The specific instructions vary\n\t\t * depending on OS, user settings, and localization.\n\t\t */\n\t\ttooltip?: string;",
                    "name": "tooltip",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 6930,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 6949,
                "name": "TerminalProfileProvider",
                "generics": [],
                "doc": "Provides a terminal profile for the contributed terminal profile when launched via the UI or\ncommand.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Provide the terminal profile.\n @param token A cancellation token that indicates the result is no longer needed.\n @returns The terminal profile.",
                    "isMethod": true,
                    "_": 6955,
                    "source": "\n\t\t/**\n\t\t * Provide the terminal profile.\n\t\t * @param token A cancellation token that indicates the result is no longer needed.\n\t\t * @returns The terminal profile.\n\t\t */\n\t\tprovideTerminalProfile(token: CancellationToken): ProviderResult<TerminalProfile>;",
                    "name": "provideTerminalProfile",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 6955,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "ref": "TerminalProfile",
                          "targs": [],
                          "isNullable": false,
                          "_": 6955,
                          "source": "TerminalProfile"
                        }
                      ],
                      "isNullable": false,
                      "_": 6955,
                      "source": " ProviderResult<TerminalProfile>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 6961,
                "name": "TerminalProfile",
                "generics": [],
                "doc": "A terminal profile defines how a terminal will be launched.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 6971,
                    "source": "\n\n\t\t/**\n\t\t * Creates a new terminal profile.\n\t\t * @param options The options that the terminal will launch with.\n\t\t */\n\t\tconstructor(options: TerminalOptions | ExtensionTerminalOptions);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "options",
                        "type": {
                          "union": [
                            {
                              "ref": "TerminalOptions",
                              "targs": [],
                              "isNullable": false,
                              "_": 6971,
                              "source": " TerminalOptions"
                            },
                            {
                              "ref": "ExtensionTerminalOptions",
                              "targs": [],
                              "isNullable": false,
                              "_": 6971,
                              "source": " ExtensionTerminalOptions"
                            }
                          ],
                          "isNullable": false,
                          "_": 6971,
                          "source": " TerminalOptions | ExtensionTerminalOptions"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The options that the terminal will launch with.",
                    "isMethod": false,
                    "_": 6965,
                    "source": "\n\t\t/**\n\t\t * The options that the terminal will launch with.\n\t\t */\n\t\toptions: TerminalOptions | ExtensionTerminalOptions;",
                    "name": "options",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "TerminalOptions",
                          "targs": [],
                          "isNullable": false,
                          "_": 6965,
                          "source": " TerminalOptions"
                        },
                        {
                          "ref": "ExtensionTerminalOptions",
                          "targs": [],
                          "isNullable": false,
                          "_": 6965,
                          "source": " ExtensionTerminalOptions"
                        }
                      ],
                      "isNullable": false,
                      "_": 6965,
                      "source": " TerminalOptions | ExtensionTerminalOptions"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 6977,
                "name": "FileDecoration",
                "generics": [],
                "doc": "A file decoration represents metadata that can be rendered with a file.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 7007,
                    "source": "\n\n\t\t/**\n\t\t * Creates a new decoration.\n\t\t *\n\t\t * @param badge A letter that represents the decoration.\n\t\t * @param tooltip The tooltip of the decoration.\n\t\t * @param color The color of the decoration.\n\t\t */\n\t\tconstructor(badge?: string, tooltip?: string, color?: ThemeColor);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "badge",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 7007,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": true
                      },
                      {
                        "name": "tooltip",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 7007,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": true
                      },
                      {
                        "name": "color",
                        "type": {
                          "ref": "ThemeColor",
                          "targs": [],
                          "isNullable": false,
                          "_": 7007,
                          "source": " ThemeColor"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "A very short string that represents this decoration.",
                    "isMethod": false,
                    "_": 6982,
                    "source": "\n\n\t\t/**\n\t\t * A very short string that represents this decoration.\n\t\t */\n\t\tbadge?: string;",
                    "name": "badge",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 6982,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "A human-readable tooltip for this decoration.",
                    "isMethod": false,
                    "_": 6987,
                    "source": "\n\n\t\t/**\n\t\t * A human-readable tooltip for this decoration.\n\t\t */\n\t\ttooltip?: string;",
                    "name": "tooltip",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 6987,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The color of this decoration.",
                    "isMethod": false,
                    "_": 6992,
                    "source": "\n\n\t\t/**\n\t\t * The color of this decoration.\n\t\t */\n\t\tcolor?: ThemeColor;",
                    "name": "color",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "ThemeColor",
                      "targs": [],
                      "isNullable": false,
                      "_": 6992,
                      "source": " ThemeColor"
                    }
                  },
                  {
                    "doc": "A flag expressing that this decoration should be\n propagated to its parents.",
                    "isMethod": false,
                    "_": 6998,
                    "source": "\n\n\t\t/**\n\t\t * A flag expressing that this decoration should be\n\t\t * propagated to its parents.\n\t\t */\n\t\tpropagate?: boolean;",
                    "name": "propagate",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 6998,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 7014,
                "name": "FileDecorationProvider",
                "generics": [],
                "doc": "The decoration provider interfaces defines the contract between extensions and\nfile decorations.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "An optional event to signal that decorations for one or many files have changed.\n\n *Note* that this event should be used to propagate information about children.\n\n @see {@link EventEmitter}",
                    "isMethod": false,
                    "_": 7023,
                    "source": "\n\n\t\t/**\n\t\t * An optional event to signal that decorations for one or many files have changed.\n\t\t *\n\t\t * *Note* that this event should be used to propagate information about children.\n\t\t *\n\t\t * @see {@link EventEmitter}\n\t\t */\n\t\tonDidChangeFileDecorations?: Event<undefined | Uri | Uri[]>;",
                    "name": "onDidChangeFileDecorations",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "union": [
                            {
                              "core": "undefined",
                              "isNullable": false,
                              "_": 7023,
                              "source": "undefined"
                            },
                            {
                              "ref": "Uri",
                              "targs": [],
                              "isNullable": false,
                              "_": 7023,
                              "source": " Uri"
                            },
                            {
                              "core": "array",
                              "targs": [
                                {
                                  "ref": "Uri",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 7023,
                                  "source": " Uri"
                                }
                              ],
                              "isNullable": false,
                              "_": 7023,
                              "source": " Uri[]"
                            }
                          ],
                          "isNullable": false,
                          "_": 7023,
                          "source": "undefined | Uri | Uri[]"
                        }
                      ],
                      "isNullable": false,
                      "_": 7023,
                      "source": " Event<undefined | Uri | Uri[]>"
                    }
                  },
                  {
                    "doc": "Provide decorations for a given uri.\n\n *Note* that this function is only called when a file gets rendered in the UI.\n This means a decoration from a descendent that propagates upwards must be signaled\n to the editor via the {@link FileDecorationProvider.onDidChangeFileDecorations onDidChangeFileDecorations}-event.\n\n @param uri The uri of the file to provide a decoration for.\n @param token A cancellation token.\n @returns A decoration or a thenable that resolves to such.",
                    "isMethod": true,
                    "_": 7036,
                    "source": "\n\n\t\t/**\n\t\t * Provide decorations for a given uri.\n\t\t *\n\t\t * *Note* that this function is only called when a file gets rendered in the UI.\n\t\t * This means a decoration from a descendent that propagates upwards must be signaled\n\t\t * to the editor via the {@link FileDecorationProvider.onDidChangeFileDecorations onDidChangeFileDecorations}-event.\n\t\t *\n\t\t * @param uri The uri of the file to provide a decoration for.\n\t\t * @param token A cancellation token.\n\t\t * @returns A decoration or a thenable that resolves to such.\n\t\t */\n\t\tprovideFileDecoration(uri: Uri, token: CancellationToken): ProviderResult<FileDecoration>;",
                    "name": "provideFileDecoration",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "uri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 7036,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 7036,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "ref": "FileDecoration",
                          "targs": [],
                          "isNullable": false,
                          "_": 7036,
                          "source": "FileDecoration"
                        }
                      ],
                      "isNullable": false,
                      "_": 7036,
                      "source": " ProviderResult<FileDecoration>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 7062,
                "name": "Extension",
                "generics": [
                  {
                    "name": "T",
                    "_": 7062,
                    "source": "T"
                  }
                ],
                "doc": "Represents an extension.\n\nTo get an instance of an `Extension` use {@link extensions.getExtensiongetExtension}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The canonical extension identifier in the form of: `publisher.name`.",
                    "isMethod": false,
                    "_": 7067,
                    "source": "\n\n\t\t/**\n\t\t * The canonical extension identifier in the form of: `publisher.name`.\n\t\t */\n\t\treadonly id: string;",
                    "name": "id",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 7067,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The uri of the directory containing the extension.",
                    "isMethod": false,
                    "_": 7072,
                    "source": "\n\n\t\t/**\n\t\t * The uri of the directory containing the extension.\n\t\t */\n\t\treadonly extensionUri: Uri;",
                    "name": "extensionUri",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 7072,
                      "source": " Uri"
                    }
                  },
                  {
                    "doc": "The absolute file path of the directory containing this extension. Shorthand\nnotation for {@link Extension.extensionUriExtension.extensionUri.fsPath} (independent of the uri scheme).",
                    "isMethod": false,
                    "_": 7078,
                    "source": "\n\n\t\t/**\n\t\t * The absolute file path of the directory containing this extension. Shorthand\n\t\t * notation for {@link Extension.extensionUri Extension.extensionUri.fsPath} (independent of the uri scheme).\n\t\t */\n\t\treadonly extensionPath: string;",
                    "name": "extensionPath",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 7078,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "`true` if the extension has been activated.",
                    "isMethod": false,
                    "_": 7083,
                    "source": "\n\n\t\t/**\n\t\t * `true` if the extension has been activated.\n\t\t */\n\t\treadonly isActive: boolean;",
                    "name": "isActive",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 7083,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "The parsed contents of the extension's package.json.",
                    "isMethod": false,
                    "_": 7088,
                    "source": "\n\n\t\t/**\n\t\t * The parsed contents of the extension's package.json.\n\t\t */\n\t\treadonly packageJSON: any;",
                    "name": "packageJSON",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "any",
                      "isNullable": false,
                      "_": 7088,
                      "source": " any"
                    }
                  },
                  {
                    "doc": "The extension kind describes if an extension runs where the UI runs\n or if an extension runs where the remote extension host runs. The extension kind\n is defined in the `package.json`-file of extensions but can also be refined\n via the `remote.extensionKind`-setting. When no remote extension host exists,\n the value is {@linkcode ExtensionKind.UI}.",
                    "isMethod": false,
                    "_": 7097,
                    "source": "\n\n\t\t/**\n\t\t * The extension kind describes if an extension runs where the UI runs\n\t\t * or if an extension runs where the remote extension host runs. The extension kind\n\t\t * is defined in the `package.json`-file of extensions but can also be refined\n\t\t * via the `remote.extensionKind`-setting. When no remote extension host exists,\n\t\t * the value is {@linkcode ExtensionKind.UI}.\n\t\t */\n\t\textensionKind: ExtensionKind;",
                    "name": "extensionKind",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "ExtensionKind",
                      "targs": [],
                      "isNullable": false,
                      "_": 7097,
                      "source": " ExtensionKind"
                    }
                  },
                  {
                    "doc": "The public API exported by this extension (return value of `activate`).\nIt is an invalid action to access this field before this extension has been activated.",
                    "isMethod": false,
                    "_": 7103,
                    "source": "\n\n\t\t/**\n\t\t * The public API exported by this extension (return value of `activate`).\n\t\t * It is an invalid action to access this field before this extension has been activated.\n\t\t */\n\t\treadonly exports: T;",
                    "name": "exports",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "T",
                      "targs": [],
                      "isNullable": false,
                      "_": 7103,
                      "source": " T"
                    }
                  },
                  {
                    "doc": "Activates this extension and returns its public API.\n\n @return A promise that will resolve when this extension has been activated.",
                    "isMethod": true,
                    "_": 7110,
                    "source": "\n\n\t\t/**\n\t\t * Activates this extension and returns its public API.\n\t\t *\n\t\t * @return A promise that will resolve when this extension has been activated.\n\t\t */\n\t\tactivate(): Thenable<T>;",
                    "name": "activate",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "ref": "Thenable",
                      "targs": [
                        {
                          "ref": "T",
                          "targs": [],
                          "isNullable": false,
                          "_": 7110,
                          "source": "T"
                        }
                      ],
                      "isNullable": false,
                      "_": 7110,
                      "source": " Thenable<T>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline32",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "ExtensionContext",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 7152,
                    "source": " dispose(): any",
                    "name": "dispose",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "any",
                      "isNullable": false,
                      "_": 7152,
                      "source": " any"
                    }
                  }
                ],
                "calls": []
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline33",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "ExtensionContext",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Set the keys whose values should be synchronized across devices when synchronizing user-data\n like configuration, extensions, and mementos.\n\n Note that this function defines the whole set of keys whose values are synchronized:\n  - calling it with an empty array stops synchronization for this memento\n  - calling it with a non-empty array replaces all keys whose values are synchronized\n\n For any given set of keys this function needs to be called only once but there is no harm in\n repeatedly calling it.\n\n @param keys The set of keys whose values are synced.",
                    "isMethod": true,
                    "_": 7178,
                    "source": "\n\t\t\t/**\n\t\t\t * Set the keys whose values should be synchronized across devices when synchronizing user-data\n\t\t\t * like configuration, extensions, and mementos.\n\t\t\t *\n\t\t\t * Note that this function defines the whole set of keys whose values are synchronized:\n\t\t\t *  - calling it with an empty array stops synchronization for this memento\n\t\t\t *  - calling it with a non-empty array replaces all keys whose values are synchronized\n\t\t\t *\n\t\t\t * For any given set of keys this function needs to be called only once but there is no harm in\n\t\t\t * repeatedly calling it.\n\t\t\t *\n\t\t\t * @param keys The set of keys whose values are synced.\n\t\t\t */\n\t\t\tsetKeysForSync(keys: readonly string[]): void;",
                    "name": "setKeysForSync",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "keys",
                        "type": {
                          "operator": 146,
                          "type": {
                            "core": "array",
                            "targs": [
                              {
                                "core": "string",
                                "isNullable": false,
                                "_": 7178,
                                "source": " string"
                              }
                            ],
                            "isNullable": false,
                            "_": 7178,
                            "source": " string[]"
                          },
                          "isNullable": false,
                          "_": 7178,
                          "source": " readonly string[]"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 7178,
                      "source": " void"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 7144,
                "name": "ExtensionContext",
                "generics": [],
                "doc": "An extension context is a collection of utilities private to an\nextension.\n\nAn instance of an `ExtensionContext` is provided as the first\nparameter to the `activate`-call of an extension.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "An array to which disposables can be added. When this\nextension is deactivated the disposables will be disposed.\n\n*Note* that asynchronous dispose-functions aren't awaited.",
                    "isMethod": false,
                    "_": 7152,
                    "source": "\n\n\t\t/**\n\t\t * An array to which disposables can be added. When this\n\t\t * extension is deactivated the disposables will be disposed.\n\t\t *\n\t\t * *Note* that asynchronous dispose-functions aren't awaited.\n\t\t */\n\t\treadonly subscriptions: { dispose(): any }[];",
                    "name": "subscriptions",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "ref": "IInline32",
                          "targs": [],
                          "isNullable": false,
                          "_": 7152,
                          "source": " { dispose(): any }"
                        }
                      ],
                      "isNullable": false,
                      "_": 7152,
                      "source": " { dispose(): any }[]"
                    }
                  },
                  {
                    "doc": "A memento object that stores state in the context\nof the currently opened {@link workspace.workspaceFoldersworkspace}.",
                    "isMethod": false,
                    "_": 7158,
                    "source": "\n\n\t\t/**\n\t\t * A memento object that stores state in the context\n\t\t * of the currently opened {@link workspace.workspaceFolders workspace}.\n\t\t */\n\t\treadonly workspaceState: Memento;",
                    "name": "workspaceState",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Memento",
                      "targs": [],
                      "isNullable": false,
                      "_": 7158,
                      "source": " Memento"
                    }
                  },
                  {
                    "doc": "A memento object that stores state independent\nof the current opened {@link workspace.workspaceFoldersworkspace}.",
                    "isMethod": false,
                    "_": 7164,
                    "source": "\n\n\t\t/**\n\t\t * A memento object that stores state independent\n\t\t * of the current opened {@link workspace.workspaceFolders workspace}.\n\t\t */\n\t\treadonly globalState: Memento & {\n\t\t\t/**\n\t\t\t * Set the keys whose values should be synchronized across devices when synchronizing user-data\n\t\t\t * like configuration, extensions, and mementos.\n\t\t\t *\n\t\t\t * Note that this function defines the whole set of keys whose values are synchronized:\n\t\t\t *  - calling it with an empty array stops synchronization for this memento\n\t\t\t *  - calling it with a non-empty array replaces all keys whose values are synchronized\n\t\t\t *\n\t\t\t * For any given set of keys this function needs to be called only once but there is no harm in\n\t\t\t * repeatedly calling it.\n\t\t\t *\n\t\t\t * @param keys The set of keys whose values are synced.\n\t\t\t */\n\t\t\tsetKeysForSync(keys: readonly string[]): void;\n\t\t};",
                    "name": "globalState",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "intersect": [
                        {
                          "ref": "Memento",
                          "targs": [],
                          "isNullable": false,
                          "_": 7164,
                          "source": " Memento"
                        },
                        {
                          "ref": "IInline33",
                          "targs": [],
                          "isNullable": false,
                          "_": 7164,
                          "source": " {\n\t\t\t/**\n\t\t\t * Set the keys whose values should be synchronized across devices when synchronizing user-data\n\t\t\t * like configuration, extensions, and mementos.\n\t\t\t *\n\t\t\t * Note that this function defines the whole set of keys whose values are synchronized:\n\t\t\t *  - calling it with an empty array stops synchronization for this memento\n\t\t\t *  - calling it with a non-empty array replaces all keys whose values are synchronized\n\t\t\t *\n\t\t\t * For any given set of keys this function needs to be called only once but there is no harm in\n\t\t\t * repeatedly calling it.\n\t\t\t *\n\t\t\t * @param keys The set of keys whose values are synced.\n\t\t\t */\n\t\t\tsetKeysForSync(keys: readonly string[]): void;\n\t\t}"
                        }
                      ],
                      "isNullable": false,
                      "_": 7164,
                      "source": " Memento & {\n\t\t\t/**\n\t\t\t * Set the keys whose values should be synchronized across devices when synchronizing user-data\n\t\t\t * like configuration, extensions, and mementos.\n\t\t\t *\n\t\t\t * Note that this function defines the whole set of keys whose values are synchronized:\n\t\t\t *  - calling it with an empty array stops synchronization for this memento\n\t\t\t *  - calling it with a non-empty array replaces all keys whose values are synchronized\n\t\t\t *\n\t\t\t * For any given set of keys this function needs to be called only once but there is no harm in\n\t\t\t * repeatedly calling it.\n\t\t\t *\n\t\t\t * @param keys The set of keys whose values are synced.\n\t\t\t */\n\t\t\tsetKeysForSync(keys: readonly string[]): void;\n\t\t}"
                    }
                  },
                  {
                    "doc": "A storage utility for secrets. Secrets are persisted across reloads and are independent of the\ncurrent opened {@link workspace.workspaceFoldersworkspace}.",
                    "isMethod": false,
                    "_": 7185,
                    "source": "\n\n\t\t/**\n\t\t * A storage utility for secrets. Secrets are persisted across reloads and are independent of the\n\t\t * current opened {@link workspace.workspaceFolders workspace}.\n\t\t */\n\t\treadonly secrets: SecretStorage;",
                    "name": "secrets",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "SecretStorage",
                      "targs": [],
                      "isNullable": false,
                      "_": 7185,
                      "source": " SecretStorage"
                    }
                  },
                  {
                    "doc": "The uri of the directory containing the extension.",
                    "isMethod": false,
                    "_": 7190,
                    "source": "\n\n\t\t/**\n\t\t * The uri of the directory containing the extension.\n\t\t */\n\t\treadonly extensionUri: Uri;",
                    "name": "extensionUri",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 7190,
                      "source": " Uri"
                    }
                  },
                  {
                    "doc": "The absolute file path of the directory containing the extension. Shorthand\nnotation for {@link TextDocument.uriExtensionContext.extensionUri.fsPath} (independent of the uri scheme).",
                    "isMethod": false,
                    "_": 7196,
                    "source": "\n\n\t\t/**\n\t\t * The absolute file path of the directory containing the extension. Shorthand\n\t\t * notation for {@link TextDocument.uri ExtensionContext.extensionUri.fsPath} (independent of the uri scheme).\n\t\t */\n\t\treadonly extensionPath: string;",
                    "name": "extensionPath",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 7196,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Gets the extension's global environment variable collection for this workspace, enabling changes to be\napplied to terminal environment variables.",
                    "isMethod": false,
                    "_": 7202,
                    "source": "\n\n\t\t/**\n\t\t * Gets the extension's global environment variable collection for this workspace, enabling changes to be\n\t\t * applied to terminal environment variables.\n\t\t */\n\t\treadonly environmentVariableCollection: GlobalEnvironmentVariableCollection;",
                    "name": "environmentVariableCollection",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "GlobalEnvironmentVariableCollection",
                      "targs": [],
                      "isNullable": false,
                      "_": 7202,
                      "source": " GlobalEnvironmentVariableCollection"
                    }
                  },
                  {
                    "doc": "Get the absolute path of a resource contained in the extension.\n\n *Note* that an absolute uri can be constructed via {@linkcode Uri.joinPath} and\n {@linkcode ExtensionContext.extensionUri extensionUri}, e.g. `vscode.Uri.joinPath(context.extensionUri, relativePath);`\n\n @param relativePath A relative path to a resource contained in the extension.\n @return The absolute path of the resource.",
                    "isMethod": true,
                    "_": 7213,
                    "source": "\n\n\t\t/**\n\t\t * Get the absolute path of a resource contained in the extension.\n\t\t *\n\t\t * *Note* that an absolute uri can be constructed via {@linkcode Uri.joinPath} and\n\t\t * {@linkcode ExtensionContext.extensionUri extensionUri}, e.g. `vscode.Uri.joinPath(context.extensionUri, relativePath);`\n\t\t *\n\t\t * @param relativePath A relative path to a resource contained in the extension.\n\t\t * @return The absolute path of the resource.\n\t\t */\n\t\tasAbsolutePath(relativePath: string): string;",
                    "name": "asAbsolutePath",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "relativePath",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 7213,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 7213,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The uri of a workspace specific directory in which the extension\ncan store private state. The directory might not exist and creation is\nup to the extension. However, the parent directory is guaranteed to be existent.\nThe value is `undefined` when no workspace nor folder has been opened.\n\nUse {@linkcode ExtensionContext.workspaceStateworkspaceState} or\n{@linkcode ExtensionContext.globalStateglobalState} to store key value data.",
                    "isMethod": false,
                    "_": 7227,
                    "source": "\n\n\t\t/**\n\t\t * The uri of a workspace specific directory in which the extension\n\t\t * can store private state. The directory might not exist and creation is\n\t\t * up to the extension. However, the parent directory is guaranteed to be existent.\n\t\t * The value is `undefined` when no workspace nor folder has been opened.\n\t\t *\n\t\t * Use {@linkcode ExtensionContext.workspaceState workspaceState} or\n\t\t * {@linkcode ExtensionContext.globalState globalState} to store key value data.\n\t\t *\n\t\t * @see {@linkcode FileSystem workspace.fs} for how to read and write files and folders from\n\t\t *  an uri.\n\t\t */\n\t\treadonly storageUri: Uri | undefined;",
                    "name": "storageUri",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 7227,
                          "source": " Uri"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 7227,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 7227,
                      "source": " Uri | undefined"
                    }
                  },
                  {
                    "doc": "An absolute file path of a workspace specific directory in which the extension\ncan store private state. The directory might not exist on disk and creation is\nup to the extension. However, the parent directory is guaranteed to be existent.\n\nUse {@linkcode ExtensionContext.workspaceStateworkspaceState} or\n{@linkcode ExtensionContext.globalStateglobalState} to store key value data.",
                    "isMethod": false,
                    "_": 7239,
                    "source": "\n\n\t\t/**\n\t\t * An absolute file path of a workspace specific directory in which the extension\n\t\t * can store private state. The directory might not exist on disk and creation is\n\t\t * up to the extension. However, the parent directory is guaranteed to be existent.\n\t\t *\n\t\t * Use {@linkcode ExtensionContext.workspaceState workspaceState} or\n\t\t * {@linkcode ExtensionContext.globalState globalState} to store key value data.\n\t\t *\n\t\t * @deprecated Use {@link ExtensionContext.storageUri storageUri} instead.\n\t\t */\n\t\treadonly storagePath: string | undefined;",
                    "name": "storagePath",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 7239,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 7239,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 7239,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "The uri of a directory in which the extension can store global state.\nThe directory might not exist on disk and creation is\nup to the extension. However, the parent directory is guaranteed to be existent.\n\nUse {@linkcode ExtensionContext.globalStateglobalState} to store key value data.",
                    "isMethod": false,
                    "_": 7251,
                    "source": "\n\n\t\t/**\n\t\t * The uri of a directory in which the extension can store global state.\n\t\t * The directory might not exist on disk and creation is\n\t\t * up to the extension. However, the parent directory is guaranteed to be existent.\n\t\t *\n\t\t * Use {@linkcode ExtensionContext.globalState globalState} to store key value data.\n\t\t *\n\t\t * @see {@linkcode FileSystem workspace.fs} for how to read and write files and folders from\n\t\t *  an uri.\n\t\t */\n\t\treadonly globalStorageUri: Uri;",
                    "name": "globalStorageUri",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 7251,
                      "source": " Uri"
                    }
                  },
                  {
                    "doc": "An absolute file path in which the extension can store global state.\nThe directory might not exist on disk and creation is\nup to the extension. However, the parent directory is guaranteed to be existent.\n\nUse {@linkcode ExtensionContext.globalStateglobalState} to store key value data.",
                    "isMethod": false,
                    "_": 7262,
                    "source": "\n\n\t\t/**\n\t\t * An absolute file path in which the extension can store global state.\n\t\t * The directory might not exist on disk and creation is\n\t\t * up to the extension. However, the parent directory is guaranteed to be existent.\n\t\t *\n\t\t * Use {@linkcode ExtensionContext.globalState globalState} to store key value data.\n\t\t *\n\t\t * @deprecated Use {@link ExtensionContext.globalStorageUri globalStorageUri} instead.\n\t\t */\n\t\treadonly globalStoragePath: string;",
                    "name": "globalStoragePath",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 7262,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The uri of a directory in which the extension can create log files.\nThe directory might not exist on disk and creation is up to the extension. However,\nthe parent directory is guaranteed to be existent.",
                    "isMethod": false,
                    "_": 7272,
                    "source": "\n\n\t\t/**\n\t\t * The uri of a directory in which the extension can create log files.\n\t\t * The directory might not exist on disk and creation is up to the extension. However,\n\t\t * the parent directory is guaranteed to be existent.\n\t\t *\n\t\t * @see {@linkcode FileSystem workspace.fs} for how to read and write files and folders from\n\t\t *  an uri.\n\t\t */\n\t\treadonly logUri: Uri;",
                    "name": "logUri",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 7272,
                      "source": " Uri"
                    }
                  },
                  {
                    "doc": "An absolute file path of a directory in which the extension can create log files.\nThe directory might not exist on disk and creation is up to the extension. However,\nthe parent directory is guaranteed to be existent.",
                    "isMethod": false,
                    "_": 7281,
                    "source": "\n\n\t\t/**\n\t\t * An absolute file path of a directory in which the extension can create log files.\n\t\t * The directory might not exist on disk and creation is up to the extension. However,\n\t\t * the parent directory is guaranteed to be existent.\n\t\t *\n\t\t * @deprecated Use {@link ExtensionContext.logUri logUri} instead.\n\t\t */\n\t\treadonly logPath: string;",
                    "name": "logPath",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 7281,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The mode the extension is running in. This is specific to the current\nextension. One extension may be in `ExtensionMode.Development` while\nother extensions in the host run in `ExtensionMode.Release`.",
                    "isMethod": false,
                    "_": 7288,
                    "source": "\n\n\t\t/**\n\t\t * The mode the extension is running in. This is specific to the current\n\t\t * extension. One extension may be in `ExtensionMode.Development` while\n\t\t * other extensions in the host run in `ExtensionMode.Release`.\n\t\t */\n\t\treadonly extensionMode: ExtensionMode;",
                    "name": "extensionMode",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "ExtensionMode",
                      "targs": [],
                      "isNullable": false,
                      "_": 7288,
                      "source": " ExtensionMode"
                    }
                  },
                  {
                    "doc": "The current `Extension` instance.",
                    "isMethod": false,
                    "_": 7293,
                    "source": "\n\n\t\t/**\n\t\t * The current `Extension` instance.\n\t\t */\n\t\treadonly extension: Extension<any>;",
                    "name": "extension",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Extension",
                      "targs": [
                        {
                          "core": "any",
                          "isNullable": false,
                          "_": 7293,
                          "source": "any"
                        }
                      ],
                      "isNullable": false,
                      "_": 7293,
                      "source": " Extension<any>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 7300,
                "name": "Memento",
                "generics": [],
                "doc": "A memento represents a storage utility. It can store and retrieve\nvalues.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Returns the stored keys.\n\n @return The stored keys.",
                    "isMethod": true,
                    "_": 7307,
                    "source": "\n\n\t\t/**\n\t\t * Returns the stored keys.\n\t\t *\n\t\t * @return The stored keys.\n\t\t */\n\t\tkeys(): readonly string[];",
                    "name": "keys",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "core": "string",
                            "isNullable": false,
                            "_": 7307,
                            "source": " string"
                          }
                        ],
                        "isNullable": false,
                        "_": 7307,
                        "source": " string[]"
                      },
                      "isNullable": false,
                      "_": 7307,
                      "source": " readonly string[]"
                    }
                  },
                  {
                    "doc": "Return a value.\n\n @param key A string.\n @return The stored value or `undefined`.",
                    "isMethod": true,
                    "_": 7315,
                    "source": "\n\n\t\t/**\n\t\t * Return a value.\n\t\t *\n\t\t * @param key A string.\n\t\t * @return The stored value or `undefined`.\n\t\t */\n\t\tget<T>(key: string): T | undefined;",
                    "name": "get",
                    "generics": [
                      {
                        "name": "T",
                        "_": 7315,
                        "source": "T"
                      }
                    ],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "key",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 7315,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "union": [
                        {
                          "ref": "T",
                          "targs": [],
                          "isNullable": false,
                          "_": 7315,
                          "source": " T"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 7315,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 7315,
                      "source": " T | undefined"
                    }
                  },
                  {
                    "doc": "Return a value.\n\n @param key A string.\n @param defaultValue A value that should be returned when there is no\n value (`undefined`) with the given key.\n @return The stored value or the defaultValue.",
                    "isMethod": true,
                    "_": 7325,
                    "source": "\n\n\t\t/**\n\t\t * Return a value.\n\t\t *\n\t\t * @param key A string.\n\t\t * @param defaultValue A value that should be returned when there is no\n\t\t * value (`undefined`) with the given key.\n\t\t * @return The stored value or the defaultValue.\n\t\t */\n\t\tget<T>(key: string, defaultValue: T): T;",
                    "name": "get",
                    "generics": [
                      {
                        "name": "T",
                        "_": 7325,
                        "source": "T"
                      }
                    ],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "key",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 7325,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "defaultValue",
                        "type": {
                          "ref": "T",
                          "targs": [],
                          "isNullable": false,
                          "_": 7325,
                          "source": " T"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "T",
                      "targs": [],
                      "isNullable": false,
                      "_": 7325,
                      "source": " T"
                    }
                  },
                  {
                    "doc": "Store a value. The value must be JSON-stringifyable.\n\n *Note* that using `undefined` as value removes the key from the underlying\n storage.\n\n @param key A string.\n @param value A value. MUST not contain cyclic references.",
                    "isMethod": true,
                    "_": 7336,
                    "source": "\n\n\t\t/**\n\t\t * Store a value. The value must be JSON-stringifyable.\n\t\t *\n\t\t * *Note* that using `undefined` as value removes the key from the underlying\n\t\t * storage.\n\t\t *\n\t\t * @param key A string.\n\t\t * @param value A value. MUST not contain cyclic references.\n\t\t */\n\t\tupdate(key: string, value: any): Thenable<void>;",
                    "name": "update",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "key",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 7336,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "value",
                        "type": {
                          "core": "any",
                          "isNullable": false,
                          "_": 7336,
                          "source": " any"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Thenable",
                      "targs": [
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 7336,
                          "source": "void"
                        }
                      ],
                      "isNullable": false,
                      "_": 7336,
                      "source": " Thenable<void>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 7342,
                "name": "SecretStorageChangeEvent",
                "generics": [],
                "doc": "The event data that is fired when a secret is added or removed.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The key of the secret that has changed.",
                    "isMethod": false,
                    "_": 7346,
                    "source": "\n\t\t/**\n\t\t * The key of the secret that has changed.\n\t\t */\n\t\treadonly key: string;",
                    "name": "key",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 7346,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 7353,
                "name": "SecretStorage",
                "generics": [],
                "doc": "Represents a storage utility for secrets, information that is\nsensitive.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Retrieve a secret that was stored with key. Returns undefined if there\n is no password matching that key.\n @param key The key the secret was stored under.\n @returns The stored value or `undefined`.",
                    "isMethod": true,
                    "_": 7360,
                    "source": "\n\t\t/**\n\t\t * Retrieve a secret that was stored with key. Returns undefined if there\n\t\t * is no password matching that key.\n\t\t * @param key The key the secret was stored under.\n\t\t * @returns The stored value or `undefined`.\n\t\t */\n\t\tget(key: string): Thenable<string | undefined>;",
                    "name": "get",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "key",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 7360,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Thenable",
                      "targs": [
                        {
                          "union": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 7360,
                              "source": "string"
                            },
                            {
                              "core": "undefined",
                              "isNullable": false,
                              "_": 7360,
                              "source": " undefined"
                            }
                          ],
                          "isNullable": false,
                          "_": 7360,
                          "source": "string | undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 7360,
                      "source": " Thenable<string | undefined>"
                    }
                  },
                  {
                    "doc": "Store a secret under a given key.\n @param key The key to store the secret under.\n @param value The secret.",
                    "isMethod": true,
                    "_": 7367,
                    "source": "\n\n\t\t/**\n\t\t * Store a secret under a given key.\n\t\t * @param key The key to store the secret under.\n\t\t * @param value The secret.\n\t\t */\n\t\tstore(key: string, value: string): Thenable<void>;",
                    "name": "store",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "key",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 7367,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "value",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 7367,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Thenable",
                      "targs": [
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 7367,
                          "source": "void"
                        }
                      ],
                      "isNullable": false,
                      "_": 7367,
                      "source": " Thenable<void>"
                    }
                  },
                  {
                    "doc": "Remove a secret from storage.\n @param key The key the secret was stored under.",
                    "isMethod": true,
                    "_": 7373,
                    "source": "\n\n\t\t/**\n\t\t * Remove a secret from storage.\n\t\t * @param key The key the secret was stored under.\n\t\t */\n\t\tdelete(key: string): Thenable<void>;",
                    "name": "delete",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "key",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 7373,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Thenable",
                      "targs": [
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 7373,
                          "source": "void"
                        }
                      ],
                      "isNullable": false,
                      "_": 7373,
                      "source": " Thenable<void>"
                    }
                  },
                  {
                    "doc": "Fires when a secret is stored or deleted.",
                    "isMethod": false,
                    "_": 7378,
                    "source": "\n\n\t\t/**\n\t\t * Fires when a secret is stored or deleted.\n\t\t */\n\t\tonDidChange: Event<SecretStorageChangeEvent>;",
                    "name": "onDidChange",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "ref": "SecretStorageChangeEvent",
                          "targs": [],
                          "isNullable": false,
                          "_": 7378,
                          "source": "SecretStorageChangeEvent"
                        }
                      ],
                      "isNullable": false,
                      "_": 7378,
                      "source": " Event<SecretStorageChangeEvent>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 7394,
                "name": "ColorTheme",
                "generics": [],
                "doc": "Represents a color theme.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The kind of this color theme: light, dark, high contrast dark and high contrast light.",
                    "isMethod": false,
                    "_": 7399,
                    "source": "\n\n\t\t/**\n\t\t * The kind of this color theme: light, dark, high contrast dark and high contrast light.\n\t\t */\n\t\treadonly kind: ColorThemeKind;",
                    "name": "kind",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "ColorThemeKind",
                      "targs": [],
                      "isNullable": false,
                      "_": 7399,
                      "source": " ColorThemeKind"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 7448,
                "name": "TaskPresentationOptions",
                "generics": [],
                "doc": "Controls how the task is presented in the UI.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Controls whether the task output is reveal in the user interface.\n Defaults to `RevealKind.Always`.",
                    "isMethod": false,
                    "_": 7453,
                    "source": "\n\t\t/**\n\t\t * Controls whether the task output is reveal in the user interface.\n\t\t * Defaults to `RevealKind.Always`.\n\t\t */\n\t\treveal?: TaskRevealKind;",
                    "name": "reveal",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "TaskRevealKind",
                      "targs": [],
                      "isNullable": false,
                      "_": 7453,
                      "source": " TaskRevealKind"
                    }
                  },
                  {
                    "doc": "Controls whether the command associated with the task is echoed\n in the user interface.",
                    "isMethod": false,
                    "_": 7459,
                    "source": "\n\n\t\t/**\n\t\t * Controls whether the command associated with the task is echoed\n\t\t * in the user interface.\n\t\t */\n\t\techo?: boolean;",
                    "name": "echo",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 7459,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Controls whether the panel showing the task output is taking focus.",
                    "isMethod": false,
                    "_": 7464,
                    "source": "\n\n\t\t/**\n\t\t * Controls whether the panel showing the task output is taking focus.\n\t\t */\n\t\tfocus?: boolean;",
                    "name": "focus",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 7464,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Controls if the task panel is used for this task only (dedicated),\n shared between tasks (shared) or if a new panel is created on\n every task execution (new). Defaults to `TaskInstanceKind.Shared`",
                    "isMethod": false,
                    "_": 7471,
                    "source": "\n\n\t\t/**\n\t\t * Controls if the task panel is used for this task only (dedicated),\n\t\t * shared between tasks (shared) or if a new panel is created on\n\t\t * every task execution (new). Defaults to `TaskInstanceKind.Shared`\n\t\t */\n\t\tpanel?: TaskPanelKind;",
                    "name": "panel",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "TaskPanelKind",
                      "targs": [],
                      "isNullable": false,
                      "_": 7471,
                      "source": " TaskPanelKind"
                    }
                  },
                  {
                    "doc": "Controls whether to show the \"Terminal will be reused by tasks, press any key to close it\" message.",
                    "isMethod": false,
                    "_": 7476,
                    "source": "\n\n\t\t/**\n\t\t * Controls whether to show the \"Terminal will be reused by tasks, press any key to close it\" message.\n\t\t */\n\t\tshowReuseMessage?: boolean;",
                    "name": "showReuseMessage",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 7476,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Controls whether the terminal is cleared before executing the task.",
                    "isMethod": false,
                    "_": 7481,
                    "source": "\n\n\t\t/**\n\t\t * Controls whether the terminal is cleared before executing the task.\n\t\t */\n\t\tclear?: boolean;",
                    "name": "clear",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 7481,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Controls whether the terminal is closed after executing the task.",
                    "isMethod": false,
                    "_": 7486,
                    "source": "\n\n\t\t/**\n\t\t * Controls whether the terminal is closed after executing the task.\n\t\t */\n\t\tclose?: boolean;",
                    "name": "close",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 7486,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 7493,
                "name": "TaskGroup",
                "generics": [],
                "doc": "A grouping for tasks. The editor by default supports the\n'Clean', 'Build', 'RebuildAll' and 'Test' group.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 7526,
                    "source": "\n\n\t\tprivate constructor(id: string, label: string);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": true,
                    "params": [
                      {
                        "name": "id",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 7526,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "label",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 7526,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The clean task group;",
                    "isMethod": false,
                    "_": 7498,
                    "source": "\n\n\t\t/**\n\t\t * The clean task group;\n\t\t */\n\t\tstatic Clean: TaskGroup;",
                    "name": "Clean",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "TaskGroup",
                      "targs": [],
                      "isNullable": false,
                      "_": 7498,
                      "source": " TaskGroup"
                    }
                  },
                  {
                    "doc": "The build task group;",
                    "isMethod": false,
                    "_": 7503,
                    "source": "\n\n\t\t/**\n\t\t * The build task group;\n\t\t */\n\t\tstatic Build: TaskGroup;",
                    "name": "Build",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "TaskGroup",
                      "targs": [],
                      "isNullable": false,
                      "_": 7503,
                      "source": " TaskGroup"
                    }
                  },
                  {
                    "doc": "The rebuild all task group;",
                    "isMethod": false,
                    "_": 7508,
                    "source": "\n\n\t\t/**\n\t\t * The rebuild all task group;\n\t\t */\n\t\tstatic Rebuild: TaskGroup;",
                    "name": "Rebuild",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "TaskGroup",
                      "targs": [],
                      "isNullable": false,
                      "_": 7508,
                      "source": " TaskGroup"
                    }
                  },
                  {
                    "doc": "The test all task group;",
                    "isMethod": false,
                    "_": 7513,
                    "source": "\n\n\t\t/**\n\t\t * The test all task group;\n\t\t */\n\t\tstatic Test: TaskGroup;",
                    "name": "Test",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "TaskGroup",
                      "targs": [],
                      "isNullable": false,
                      "_": 7513,
                      "source": " TaskGroup"
                    }
                  },
                  {
                    "doc": "Whether the task that is part of this group is the default for the group.\nThis property cannot be set through API, and is controlled by a user's task configurations.",
                    "isMethod": false,
                    "_": 7519,
                    "source": "\n\n\t\t/**\n\t\t * Whether the task that is part of this group is the default for the group.\n\t\t * This property cannot be set through API, and is controlled by a user's task configurations.\n\t\t */\n\t\treadonly isDefault: boolean | undefined;",
                    "name": "isDefault",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 7519,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 7519,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 7519,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "The ID of the task group. Is one of TaskGroup.Clean.id, TaskGroup.Build.id, TaskGroup.Rebuild.id, or TaskGroup.Test.id.",
                    "isMethod": false,
                    "_": 7524,
                    "source": "\n\n\t\t/**\n\t\t * The ID of the task group. Is one of TaskGroup.Clean.id, TaskGroup.Build.id, TaskGroup.Rebuild.id, or TaskGroup.Test.id.\n\t\t */\n\t\treadonly id: string;",
                    "name": "id",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 7524,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 7533,
                "name": "TaskDefinition",
                "generics": [],
                "doc": "A structure that defines a task kind in the system.\nThe value must be JSON-stringifyable.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [
                  {
                    "key": {
                      "core": "string",
                      "isNullable": false,
                      "_": 7554,
                      "source": " string"
                    },
                    "value": {
                      "core": "any",
                      "isNullable": false,
                      "_": 7554,
                      "source": " any"
                    },
                    "doc": "",
                    "_": 7554,
                    "source": "\n\n\t\t/**\n\t\t * Additional attributes of a concrete task definition.\n\t\t */\n\t\t[name: string]: any;",
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false
                  }
                ],
                "ctors": [],
                "members": [
                  {
                    "doc": "The task definition describing the task provided by an extension.\nUsually a task provider defines more properties to identify\na task. They need to be defined in the package.json of the\nextension under the 'taskDefinitions' extension point. The npm\ntask definition for example looks like this\n```typescript\ninterface NpmTaskDefinition extends TaskDefinition {\n    script: string;\n}\n```\n\nNote that type identifier starting with a '$' are reserved for internal\nusages and shouldn't be used by extensions.",
                    "isMethod": false,
                    "_": 7549,
                    "source": "\n\t\t/**\n\t\t * The task definition describing the task provided by an extension.\n\t\t * Usually a task provider defines more properties to identify\n\t\t * a task. They need to be defined in the package.json of the\n\t\t * extension under the 'taskDefinitions' extension point. The npm\n\t\t * task definition for example looks like this\n\t\t * ```typescript\n\t\t * interface NpmTaskDefinition extends TaskDefinition {\n\t\t *     script: string;\n\t\t * }\n\t\t * ```\n\t\t *\n\t\t * Note that type identifier starting with a '$' are reserved for internal\n\t\t * usages and shouldn't be used by extensions.\n\t\t */\n\t\treadonly type: string;",
                    "name": "type",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 7549,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline34",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "ProcessExecutionOptions",
                "source": "",
                "indexes": [
                  {
                    "key": {
                      "core": "string",
                      "isNullable": false,
                      "_": 7572,
                      "source": " string"
                    },
                    "value": {
                      "core": "string",
                      "isNullable": false,
                      "_": 7572,
                      "source": " string"
                    },
                    "doc": "",
                    "_": 7572,
                    "source": " [key: string]: string",
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false
                  }
                ],
                "ctors": [],
                "members": [],
                "calls": []
              },
              {
                "_": 7560,
                "name": "ProcessExecutionOptions",
                "generics": [],
                "doc": "Options for a process execution",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The current working directory of the executed program or shell.\n If omitted the tools current workspace root is used.",
                    "isMethod": false,
                    "_": 7565,
                    "source": "\n\t\t/**\n\t\t * The current working directory of the executed program or shell.\n\t\t * If omitted the tools current workspace root is used.\n\t\t */\n\t\tcwd?: string;",
                    "name": "cwd",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 7565,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The additional environment of the executed program or shell. If omitted\n the parent process' environment is used. If provided it is merged with\n the parent process' environment.",
                    "isMethod": false,
                    "_": 7572,
                    "source": "\n\n\t\t/**\n\t\t * The additional environment of the executed program or shell. If omitted\n\t\t * the parent process' environment is used. If provided it is merged with\n\t\t * the parent process' environment.\n\t\t */\n\t\tenv?: { [key: string]: string };",
                    "name": "env",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "IInline34",
                      "targs": [],
                      "isNullable": false,
                      "_": 7572,
                      "source": " { [key: string]: string }"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 7579,
                "name": "ProcessExecution",
                "generics": [],
                "doc": "The execution of a task happens as an external process\nwithout shell interaction.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 7587,
                    "source": "\n\n\t\t/**\n\t\t * Creates a process execution.\n\t\t *\n\t\t * @param process The process to start.\n\t\t * @param options Optional options for the started process.\n\t\t */\n\t\tconstructor(process: string, options?: ProcessExecutionOptions);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "process",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 7587,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "options",
                        "type": {
                          "ref": "ProcessExecutionOptions",
                          "targs": [],
                          "isNullable": false,
                          "_": 7587,
                          "source": " ProcessExecutionOptions"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  },
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 7596,
                    "source": "\n\n\t\t/**\n\t\t * Creates a process execution.\n\t\t *\n\t\t * @param process The process to start.\n\t\t * @param args Arguments to be passed to the process.\n\t\t * @param options Optional options for the started process.\n\t\t */\n\t\tconstructor(process: string, args: string[], options?: ProcessExecutionOptions);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "process",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 7596,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "args",
                        "type": {
                          "core": "array",
                          "targs": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 7596,
                              "source": " string"
                            }
                          ],
                          "isNullable": false,
                          "_": 7596,
                          "source": " string[]"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "options",
                        "type": {
                          "ref": "ProcessExecutionOptions",
                          "targs": [],
                          "isNullable": false,
                          "_": 7596,
                          "source": " ProcessExecutionOptions"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The process to be executed.",
                    "isMethod": false,
                    "_": 7601,
                    "source": "\n\n\t\t/**\n\t\t * The process to be executed.\n\t\t */\n\t\tprocess: string;",
                    "name": "process",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 7601,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The arguments passed to the process. Defaults to an empty array.",
                    "isMethod": false,
                    "_": 7606,
                    "source": "\n\n\t\t/**\n\t\t * The arguments passed to the process. Defaults to an empty array.\n\t\t */\n\t\targs: string[];",
                    "name": "args",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 7606,
                          "source": " string"
                        }
                      ],
                      "isNullable": false,
                      "_": 7606,
                      "source": " string[]"
                    }
                  },
                  {
                    "doc": "The process options used when the process is executed.\n Defaults to undefined.",
                    "isMethod": false,
                    "_": 7612,
                    "source": "\n\n\t\t/**\n\t\t * The process options used when the process is executed.\n\t\t * Defaults to undefined.\n\t\t */\n\t\toptions?: ProcessExecutionOptions;",
                    "name": "options",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "ProcessExecutionOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 7612,
                      "source": " ProcessExecutionOptions"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline35",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "ShellQuotingOptions",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The escape character.",
                    "isMethod": false,
                    "_": 7629,
                    "source": "\n\t\t\t/**\n\t\t\t * The escape character.\n\t\t\t */\n\t\t\tescapeChar: string;",
                    "name": "escapeChar",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 7629,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The characters to escape.",
                    "isMethod": false,
                    "_": 7633,
                    "source": "\n\t\t\t/**\n\t\t\t * The characters to escape.\n\t\t\t */\n\t\t\tcharsToEscape: string;",
                    "name": "charsToEscape",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 7633,
                      "source": " string"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 7618,
                "name": "ShellQuotingOptions",
                "generics": [],
                "doc": "The shell quoting options.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The character used to do character escaping. If a string is provided only spaces\n are escaped. If a `{ escapeChar, charsToEscape }` literal is provide all characters\n in `charsToEscape` are escaped using the `escapeChar`.",
                    "isMethod": false,
                    "_": 7625,
                    "source": "\n\n\t\t/**\n\t\t * The character used to do character escaping. If a string is provided only spaces\n\t\t * are escaped. If a `{ escapeChar, charsToEscape }` literal is provide all characters\n\t\t * in `charsToEscape` are escaped using the `escapeChar`.\n\t\t */\n\t\tescape?: string | {\n\t\t\t/**\n\t\t\t * The escape character.\n\t\t\t */\n\t\t\tescapeChar: string;\n\t\t\t/**\n\t\t\t * The characters to escape.\n\t\t\t */\n\t\t\tcharsToEscape: string;\n\t\t};",
                    "name": "escape",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 7625,
                          "source": " string"
                        },
                        {
                          "ref": "IInline35",
                          "targs": [],
                          "isNullable": false,
                          "_": 7625,
                          "source": " {\n\t\t\t/**\n\t\t\t * The escape character.\n\t\t\t */\n\t\t\tescapeChar: string;\n\t\t\t/**\n\t\t\t * The characters to escape.\n\t\t\t */\n\t\t\tcharsToEscape: string;\n\t\t}"
                        }
                      ],
                      "isNullable": false,
                      "_": 7625,
                      "source": " string | {\n\t\t\t/**\n\t\t\t * The escape character.\n\t\t\t */\n\t\t\tescapeChar: string;\n\t\t\t/**\n\t\t\t * The characters to escape.\n\t\t\t */\n\t\t\tcharsToEscape: string;\n\t\t}"
                    }
                  },
                  {
                    "doc": "The character used for strong quoting. The string's length must be 1.",
                    "isMethod": false,
                    "_": 7639,
                    "source": "\n\n\t\t/**\n\t\t * The character used for strong quoting. The string's length must be 1.\n\t\t */\n\t\tstrong?: string;",
                    "name": "strong",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 7639,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The character used for weak quoting. The string's length must be 1.",
                    "isMethod": false,
                    "_": 7644,
                    "source": "\n\n\t\t/**\n\t\t * The character used for weak quoting. The string's length must be 1.\n\t\t */\n\t\tweak?: string;",
                    "name": "weak",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 7644,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline36",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "ShellExecutionOptions",
                "source": "",
                "indexes": [
                  {
                    "key": {
                      "core": "string",
                      "isNullable": false,
                      "_": 7680,
                      "source": " string"
                    },
                    "value": {
                      "core": "string",
                      "isNullable": false,
                      "_": 7680,
                      "source": " string"
                    },
                    "doc": "",
                    "_": 7680,
                    "source": " [key: string]: string",
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false
                  }
                ],
                "ctors": [],
                "members": [],
                "calls": []
              },
              {
                "_": 7650,
                "name": "ShellExecutionOptions",
                "generics": [],
                "doc": "Options for a shell execution",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The shell executable.",
                    "isMethod": false,
                    "_": 7654,
                    "source": "\n\t\t/**\n\t\t * The shell executable.\n\t\t */\n\t\texecutable?: string;",
                    "name": "executable",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 7654,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The arguments to be passed to the shell executable used to run the task. Most shells\n require special arguments to execute a command. For  example `bash` requires the `-c`\n argument to execute a command, `PowerShell` requires `-Command` and `cmd` requires both\n `/d` and `/c`.",
                    "isMethod": false,
                    "_": 7662,
                    "source": "\n\n\t\t/**\n\t\t * The arguments to be passed to the shell executable used to run the task. Most shells\n\t\t * require special arguments to execute a command. For  example `bash` requires the `-c`\n\t\t * argument to execute a command, `PowerShell` requires `-Command` and `cmd` requires both\n\t\t * `/d` and `/c`.\n\t\t */\n\t\tshellArgs?: string[];",
                    "name": "shellArgs",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 7662,
                          "source": " string"
                        }
                      ],
                      "isNullable": false,
                      "_": 7662,
                      "source": " string[]"
                    }
                  },
                  {
                    "doc": "The shell quotes supported by this shell.",
                    "isMethod": false,
                    "_": 7667,
                    "source": "\n\n\t\t/**\n\t\t * The shell quotes supported by this shell.\n\t\t */\n\t\tshellQuoting?: ShellQuotingOptions;",
                    "name": "shellQuoting",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "ShellQuotingOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 7667,
                      "source": " ShellQuotingOptions"
                    }
                  },
                  {
                    "doc": "The current working directory of the executed shell.\n If omitted the tools current workspace root is used.",
                    "isMethod": false,
                    "_": 7673,
                    "source": "\n\n\t\t/**\n\t\t * The current working directory of the executed shell.\n\t\t * If omitted the tools current workspace root is used.\n\t\t */\n\t\tcwd?: string;",
                    "name": "cwd",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 7673,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The additional environment of the executed shell. If omitted\n the parent process' environment is used. If provided it is merged with\n the parent process' environment.",
                    "isMethod": false,
                    "_": 7680,
                    "source": "\n\n\t\t/**\n\t\t * The additional environment of the executed shell. If omitted\n\t\t * the parent process' environment is used. If provided it is merged with\n\t\t * the parent process' environment.\n\t\t */\n\t\tenv?: { [key: string]: string };",
                    "name": "env",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "IInline36",
                      "targs": [],
                      "isNullable": false,
                      "_": 7680,
                      "source": " { [key: string]: string }"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 7717,
                "name": "ShellQuotedString",
                "generics": [],
                "doc": "A string that will be quoted depending on the used shell.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The actual string value.",
                    "isMethod": false,
                    "_": 7721,
                    "source": "\n\t\t/**\n\t\t * The actual string value.\n\t\t */\n\t\tvalue: string;",
                    "name": "value",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 7721,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The quoting style to use.",
                    "isMethod": false,
                    "_": 7726,
                    "source": "\n\n\t\t/**\n\t\t * The quoting style to use.\n\t\t */\n\t\tquoting: ShellQuoting;",
                    "name": "quoting",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "ShellQuoting",
                      "targs": [],
                      "isNullable": false,
                      "_": 7726,
                      "source": " ShellQuoting"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 7729,
                "name": "ShellExecution",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 7736,
                    "source": "\n\t\t/**\n\t\t * Creates a shell execution with a full command line.\n\t\t *\n\t\t * @param commandLine The command line to execute.\n\t\t * @param options Optional options for the started the shell.\n\t\t */\n\t\tconstructor(commandLine: string, options?: ShellExecutionOptions);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "commandLine",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 7736,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "options",
                        "type": {
                          "ref": "ShellExecutionOptions",
                          "targs": [],
                          "isNullable": false,
                          "_": 7736,
                          "source": " ShellExecutionOptions"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  },
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 7748,
                    "source": "\n\n\t\t/**\n\t\t * Creates a shell execution with a command and arguments. For the real execution the editor will\n\t\t * construct a command line from the command and the arguments. This is subject to interpretation\n\t\t * especially when it comes to quoting. If full control over the command line is needed please\n\t\t * use the constructor that creates a `ShellExecution` with the full command line.\n\t\t *\n\t\t * @param command The command to execute.\n\t\t * @param args The command arguments.\n\t\t * @param options Optional options for the started the shell.\n\t\t */\n\t\tconstructor(command: string | ShellQuotedString, args: (string | ShellQuotedString)[], options?: ShellExecutionOptions);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "command",
                        "type": {
                          "union": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 7748,
                              "source": " string"
                            },
                            {
                              "ref": "ShellQuotedString",
                              "targs": [],
                              "isNullable": false,
                              "_": 7748,
                              "source": " ShellQuotedString"
                            }
                          ],
                          "isNullable": false,
                          "_": 7748,
                          "source": " string | ShellQuotedString"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "args",
                        "type": {
                          "core": "array",
                          "targs": [
                            {
                              "union": [
                                {
                                  "core": "string",
                                  "isNullable": false,
                                  "_": 7748,
                                  "source": "string"
                                },
                                {
                                  "ref": "ShellQuotedString",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 7748,
                                  "source": " ShellQuotedString"
                                }
                              ],
                              "isNullable": false,
                              "_": 7748,
                              "source": " (string | ShellQuotedString)"
                            }
                          ],
                          "isNullable": false,
                          "_": 7748,
                          "source": " (string | ShellQuotedString)[]"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "options",
                        "type": {
                          "ref": "ShellExecutionOptions",
                          "targs": [],
                          "isNullable": false,
                          "_": 7748,
                          "source": " ShellExecutionOptions"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The shell command line. Is `undefined` if created with a command and arguments.",
                    "isMethod": false,
                    "_": 7753,
                    "source": "\n\n\t\t/**\n\t\t * The shell command line. Is `undefined` if created with a command and arguments.\n\t\t */\n\t\tcommandLine: string | undefined;",
                    "name": "commandLine",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 7753,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 7753,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 7753,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "The shell command. Is `undefined` if created with a full command line.",
                    "isMethod": false,
                    "_": 7758,
                    "source": "\n\n\t\t/**\n\t\t * The shell command. Is `undefined` if created with a full command line.\n\t\t */\n\t\tcommand: string | ShellQuotedString;",
                    "name": "command",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 7758,
                          "source": " string"
                        },
                        {
                          "ref": "ShellQuotedString",
                          "targs": [],
                          "isNullable": false,
                          "_": 7758,
                          "source": " ShellQuotedString"
                        }
                      ],
                      "isNullable": false,
                      "_": 7758,
                      "source": " string | ShellQuotedString"
                    }
                  },
                  {
                    "doc": "The shell args. Is `undefined` if created with a full command line.",
                    "isMethod": false,
                    "_": 7763,
                    "source": "\n\n\t\t/**\n\t\t * The shell args. Is `undefined` if created with a full command line.\n\t\t */\n\t\targs: (string | ShellQuotedString)[];",
                    "name": "args",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "union": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 7763,
                              "source": "string"
                            },
                            {
                              "ref": "ShellQuotedString",
                              "targs": [],
                              "isNullable": false,
                              "_": 7763,
                              "source": " ShellQuotedString"
                            }
                          ],
                          "isNullable": false,
                          "_": 7763,
                          "source": " (string | ShellQuotedString)"
                        }
                      ],
                      "isNullable": false,
                      "_": 7763,
                      "source": " (string | ShellQuotedString)[]"
                    }
                  },
                  {
                    "doc": "The shell options used when the command line is executed in a shell.\n Defaults to undefined.",
                    "isMethod": false,
                    "_": 7769,
                    "source": "\n\n\t\t/**\n\t\t * The shell options used when the command line is executed in a shell.\n\t\t * Defaults to undefined.\n\t\t */\n\t\toptions?: ShellExecutionOptions;",
                    "name": "options",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "ShellExecutionOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 7769,
                      "source": " ShellExecutionOptions"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 7775,
                "name": "CustomExecution",
                "generics": [],
                "doc": "Class used to execute an extension callback as a task.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 7785,
                    "source": "\n\t\t/**\n\t\t * Constructs a CustomExecution task object. The callback will be executed when the task is run, at which point the\n\t\t * extension should return the Pseudoterminal it will \"run in\". The task should wait to do further execution until\n\t\t * {@link Pseudoterminal.open} is called. Task cancellation should be handled using\n\t\t * {@link Pseudoterminal.close}. When the task is complete fire\n\t\t * {@link Pseudoterminal.onDidClose}.\n\t\t * @param callback The callback that will be called when the task is started by a user. Any ${} style variables that\n\t\t * were in the task definition will be resolved and passed into the callback as `resolvedDefinition`.\n\t\t */\n\t\tconstructor(callback: (resolvedDefinition: TaskDefinition) => Thenable<Pseudoterminal>);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "callback",
                        "type": {
                          "ctor": false,
                          "generics": [],
                          "returns": {
                            "ref": "Thenable",
                            "targs": [
                              {
                                "ref": "Pseudoterminal",
                                "targs": [],
                                "isNullable": false,
                                "_": 7785,
                                "source": "Pseudoterminal"
                              }
                            ],
                            "isNullable": false,
                            "_": 7785,
                            "source": " Thenable<Pseudoterminal>"
                          },
                          "params": [
                            {
                              "name": "resolvedDefinition",
                              "type": {
                                "ref": "TaskDefinition",
                                "targs": [],
                                "isNullable": false,
                                "_": 7785,
                                "source": " TaskDefinition"
                              },
                              "varargs": false,
                              "isNullable": false
                            }
                          ],
                          "isNullable": false,
                          "_": 7785,
                          "source": " (resolvedDefinition: TaskDefinition) => Thenable<Pseudoterminal>"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [],
                "calls": [],
                "isClass": true
              },
              {
                "_": 7806,
                "name": "RunOptions",
                "generics": [],
                "doc": "Run options for a task.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Controls whether task variables are re-evaluated on rerun.",
                    "isMethod": false,
                    "_": 7810,
                    "source": "\n\t\t/**\n\t\t * Controls whether task variables are re-evaluated on rerun.\n\t\t */\n\t\treevaluateOnRerun?: boolean;",
                    "name": "reevaluateOnRerun",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 7810,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 7816,
                "name": "Task",
                "generics": [],
                "doc": "A task to execute",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 7830,
                    "source": "\n\n\t\t/**\n\t\t * Creates a new task.\n\t\t *\n\t\t * @param taskDefinition The task definition as defined in the taskDefinitions extension point.\n\t\t * @param scope Specifies the task's scope. It is either a global or a workspace task or a task for a specific workspace folder. Global tasks are currently not supported.\n\t\t * @param name The task's name. Is presented in the user interface.\n\t\t * @param source The task's source (e.g. 'gulp', 'npm', ...). Is presented in the user interface.\n\t\t * @param execution The process or shell execution.\n\t\t * @param problemMatchers the names of problem matchers to use, like '$tsc'\n\t\t *  or '$eslint'. Problem matchers can be contributed by an extension using\n\t\t *  the `problemMatchers` extension point.\n\t\t */\n\t\tconstructor(taskDefinition: TaskDefinition, scope: WorkspaceFolder | TaskScope.Global | TaskScope.Workspace, name: string, source: string, execution?: ProcessExecution | ShellExecution | CustomExecution, problemMatchers?: string | string[]);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "taskDefinition",
                        "type": {
                          "ref": "TaskDefinition",
                          "targs": [],
                          "isNullable": false,
                          "_": 7830,
                          "source": " TaskDefinition"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "scope",
                        "type": {
                          "union": [
                            {
                              "ref": "WorkspaceFolder",
                              "targs": [],
                              "isNullable": false,
                              "_": 7830,
                              "source": " WorkspaceFolder"
                            },
                            {
                              "core": "any",
                              "isNullable": true,
                              "_": 7855,
                              "source": " TaskScope.Workspace"
                            },
                            {
                              "core": "any",
                              "isNullable": true,
                              "_": 7855,
                              "source": " TaskScope.Workspace"
                            }
                          ],
                          "isNullable": false,
                          "_": 7830,
                          "source": " WorkspaceFolder | TaskScope.Global | TaskScope.Workspace"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "name",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 7830,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "source",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 7830,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "execution",
                        "type": {
                          "union": [
                            {
                              "ref": "ProcessExecution",
                              "targs": [],
                              "isNullable": false,
                              "_": 7830,
                              "source": " ProcessExecution"
                            },
                            {
                              "ref": "ShellExecution",
                              "targs": [],
                              "isNullable": false,
                              "_": 7830,
                              "source": " ShellExecution"
                            },
                            {
                              "ref": "CustomExecution",
                              "targs": [],
                              "isNullable": false,
                              "_": 7830,
                              "source": " CustomExecution"
                            }
                          ],
                          "isNullable": false,
                          "_": 7830,
                          "source": " ProcessExecution | ShellExecution | CustomExecution"
                        },
                        "varargs": false,
                        "isNullable": true
                      },
                      {
                        "name": "problemMatchers",
                        "type": {
                          "union": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 7830,
                              "source": " string"
                            },
                            {
                              "core": "array",
                              "targs": [
                                {
                                  "core": "string",
                                  "isNullable": false,
                                  "_": 7830,
                                  "source": " string"
                                }
                              ],
                              "isNullable": false,
                              "_": 7830,
                              "source": " string[]"
                            }
                          ],
                          "isNullable": false,
                          "_": 7830,
                          "source": " string | string[]"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  },
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 7845,
                    "source": "\n\n\t\t/**\n\t\t * Creates a new task.\n\t\t *\n\t\t * @deprecated Use the new constructors that allow specifying a scope for the task.\n\t\t *\n\t\t * @param taskDefinition The task definition as defined in the taskDefinitions extension point.\n\t\t * @param name The task's name. Is presented in the user interface.\n\t\t * @param source The task's source (e.g. 'gulp', 'npm', ...). Is presented in the user interface.\n\t\t * @param execution The process or shell execution.\n\t\t * @param problemMatchers the names of problem matchers to use, like '$tsc'\n\t\t *  or '$eslint'. Problem matchers can be contributed by an extension using\n\t\t *  the `problemMatchers` extension point.\n\t\t */\n\t\tconstructor(taskDefinition: TaskDefinition, name: string, source: string, execution?: ProcessExecution | ShellExecution, problemMatchers?: string | string[]);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "taskDefinition",
                        "type": {
                          "ref": "TaskDefinition",
                          "targs": [],
                          "isNullable": false,
                          "_": 7845,
                          "source": " TaskDefinition"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "name",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 7845,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "source",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 7845,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "execution",
                        "type": {
                          "union": [
                            {
                              "ref": "ProcessExecution",
                              "targs": [],
                              "isNullable": false,
                              "_": 7845,
                              "source": " ProcessExecution"
                            },
                            {
                              "ref": "ShellExecution",
                              "targs": [],
                              "isNullable": false,
                              "_": 7845,
                              "source": " ShellExecution"
                            }
                          ],
                          "isNullable": false,
                          "_": 7845,
                          "source": " ProcessExecution | ShellExecution"
                        },
                        "varargs": false,
                        "isNullable": true
                      },
                      {
                        "name": "problemMatchers",
                        "type": {
                          "union": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 7845,
                              "source": " string"
                            },
                            {
                              "core": "array",
                              "targs": [
                                {
                                  "core": "string",
                                  "isNullable": false,
                                  "_": 7845,
                                  "source": " string"
                                }
                              ],
                              "isNullable": false,
                              "_": 7845,
                              "source": " string[]"
                            }
                          ],
                          "isNullable": false,
                          "_": 7845,
                          "source": " string | string[]"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The task's definition.",
                    "isMethod": false,
                    "_": 7850,
                    "source": "\n\n\t\t/**\n\t\t * The task's definition.\n\t\t */\n\t\tdefinition: TaskDefinition;",
                    "name": "definition",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "TaskDefinition",
                      "targs": [],
                      "isNullable": false,
                      "_": 7850,
                      "source": " TaskDefinition"
                    }
                  },
                  {
                    "doc": "The task's scope.",
                    "isMethod": false,
                    "_": 7855,
                    "source": "\n\n\t\t/**\n\t\t * The task's scope.\n\t\t */\n\t\treadonly scope: TaskScope.Global | TaskScope.Workspace | WorkspaceFolder | undefined;",
                    "name": "scope",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "any",
                          "isNullable": true,
                          "_": 7855,
                          "source": " TaskScope.Workspace"
                        },
                        {
                          "core": "any",
                          "isNullable": true,
                          "_": 7855,
                          "source": " TaskScope.Workspace"
                        },
                        {
                          "ref": "WorkspaceFolder",
                          "targs": [],
                          "isNullable": false,
                          "_": 7855,
                          "source": " WorkspaceFolder"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 7855,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 7855,
                      "source": " TaskScope.Global | TaskScope.Workspace | WorkspaceFolder | undefined"
                    }
                  },
                  {
                    "doc": "The task's name",
                    "isMethod": false,
                    "_": 7860,
                    "source": "\n\n\t\t/**\n\t\t * The task's name\n\t\t */\n\t\tname: string;",
                    "name": "name",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 7860,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "A human-readable string which is rendered less prominently on a separate line in places\n where the task's name is displayed. Supports rendering of {@link ThemeIcon theme icons}\n via the `$(<name>)`-syntax.",
                    "isMethod": false,
                    "_": 7867,
                    "source": "\n\n\t\t/**\n\t\t * A human-readable string which is rendered less prominently on a separate line in places\n\t\t * where the task's name is displayed. Supports rendering of {@link ThemeIcon theme icons}\n\t\t * via the `$(<name>)`-syntax.\n\t\t */\n\t\tdetail?: string;",
                    "name": "detail",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 7867,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The task's execution engine",
                    "isMethod": false,
                    "_": 7872,
                    "source": "\n\n\t\t/**\n\t\t * The task's execution engine\n\t\t */\n\t\texecution?: ProcessExecution | ShellExecution | CustomExecution;",
                    "name": "execution",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "ProcessExecution",
                          "targs": [],
                          "isNullable": false,
                          "_": 7872,
                          "source": " ProcessExecution"
                        },
                        {
                          "ref": "ShellExecution",
                          "targs": [],
                          "isNullable": false,
                          "_": 7872,
                          "source": " ShellExecution"
                        },
                        {
                          "ref": "CustomExecution",
                          "targs": [],
                          "isNullable": false,
                          "_": 7872,
                          "source": " CustomExecution"
                        }
                      ],
                      "isNullable": false,
                      "_": 7872,
                      "source": " ProcessExecution | ShellExecution | CustomExecution"
                    }
                  },
                  {
                    "doc": "Whether the task is a background task or not.",
                    "isMethod": false,
                    "_": 7877,
                    "source": "\n\n\t\t/**\n\t\t * Whether the task is a background task or not.\n\t\t */\n\t\tisBackground: boolean;",
                    "name": "isBackground",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 7877,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "A human-readable string describing the source of this shell task, e.g. 'gulp'\n or 'npm'. Supports rendering of {@link ThemeIcon theme icons} via the `$(<name>)`-syntax.",
                    "isMethod": false,
                    "_": 7883,
                    "source": "\n\n\t\t/**\n\t\t * A human-readable string describing the source of this shell task, e.g. 'gulp'\n\t\t * or 'npm'. Supports rendering of {@link ThemeIcon theme icons} via the `$(<name>)`-syntax.\n\t\t */\n\t\tsource: string;",
                    "name": "source",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 7883,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The task group this tasks belongs to. See TaskGroup\n for a predefined set of available groups.\n Defaults to undefined meaning that the task doesn't\n belong to any special group.",
                    "isMethod": false,
                    "_": 7891,
                    "source": "\n\n\t\t/**\n\t\t * The task group this tasks belongs to. See TaskGroup\n\t\t * for a predefined set of available groups.\n\t\t * Defaults to undefined meaning that the task doesn't\n\t\t * belong to any special group.\n\t\t */\n\t\tgroup?: TaskGroup;",
                    "name": "group",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "TaskGroup",
                      "targs": [],
                      "isNullable": false,
                      "_": 7891,
                      "source": " TaskGroup"
                    }
                  },
                  {
                    "doc": "The presentation options. Defaults to an empty literal.",
                    "isMethod": false,
                    "_": 7896,
                    "source": "\n\n\t\t/**\n\t\t * The presentation options. Defaults to an empty literal.\n\t\t */\n\t\tpresentationOptions: TaskPresentationOptions;",
                    "name": "presentationOptions",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "TaskPresentationOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 7896,
                      "source": " TaskPresentationOptions"
                    }
                  },
                  {
                    "doc": "The problem matchers attached to the task. Defaults to an empty\n array.",
                    "isMethod": false,
                    "_": 7902,
                    "source": "\n\n\t\t/**\n\t\t * The problem matchers attached to the task. Defaults to an empty\n\t\t * array.\n\t\t */\n\t\tproblemMatchers: string[];",
                    "name": "problemMatchers",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 7902,
                          "source": " string"
                        }
                      ],
                      "isNullable": false,
                      "_": 7902,
                      "source": " string[]"
                    }
                  },
                  {
                    "doc": "Run options for the task",
                    "isMethod": false,
                    "_": 7907,
                    "source": "\n\n\t\t/**\n\t\t * Run options for the task\n\t\t */\n\t\trunOptions: RunOptions;",
                    "name": "runOptions",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "RunOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 7907,
                      "source": " RunOptions"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 7914,
                "name": "TaskProvider",
                "generics": [
                  {
                    "name": "T",
                    "constraint": {
                      "ref": "Task",
                      "targs": [],
                      "isNullable": false,
                      "_": 7914,
                      "source": " Task"
                    },
                    "default": {
                      "ref": "Task",
                      "targs": [],
                      "isNullable": false,
                      "_": 7914,
                      "source": " Task"
                    },
                    "_": 7914,
                    "source": "T extends Task = Task"
                  }
                ],
                "doc": "A task provider allows to add tasks to the task service.\nA task provider is registered via {@link tasks.registerTaskProvider}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Provides tasks.\n @param token A cancellation token.\n @return an array of tasks",
                    "isMethod": true,
                    "_": 7920,
                    "source": "\n\t\t/**\n\t\t * Provides tasks.\n\t\t * @param token A cancellation token.\n\t\t * @return an array of tasks\n\t\t */\n\t\tprovideTasks(token: CancellationToken): ProviderResult<T[]>;",
                    "name": "provideTasks",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 7920,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "T",
                              "targs": [],
                              "isNullable": false,
                              "_": 7920,
                              "source": "T"
                            }
                          ],
                          "isNullable": false,
                          "_": 7920,
                          "source": "T[]"
                        }
                      ],
                      "isNullable": false,
                      "_": 7920,
                      "source": " ProviderResult<T[]>"
                    }
                  },
                  {
                    "doc": "Resolves a task that has no {@linkcode Task.execution execution} set. Tasks are\n often created from information found in the `tasks.json`-file. Such tasks miss\n the information on how to execute them and a task provider must fill in\n the missing information in the `resolveTask`-method. This method will not be\n called for tasks returned from the above `provideTasks` method since those\n tasks are always fully resolved. A valid default implementation for the\n `resolveTask` method is to return `undefined`.\n\n Note that when filling in the properties of `task`, you _must_ be sure to\n use the exact same `TaskDefinition` and not create a new one. Other properties\n may be changed.\n\n @param task The task to resolve.\n @param token A cancellation token.\n @return The resolved task",
                    "isMethod": true,
                    "_": 7939,
                    "source": "\n\n\t\t/**\n\t\t * Resolves a task that has no {@linkcode Task.execution execution} set. Tasks are\n\t\t * often created from information found in the `tasks.json`-file. Such tasks miss\n\t\t * the information on how to execute them and a task provider must fill in\n\t\t * the missing information in the `resolveTask`-method. This method will not be\n\t\t * called for tasks returned from the above `provideTasks` method since those\n\t\t * tasks are always fully resolved. A valid default implementation for the\n\t\t * `resolveTask` method is to return `undefined`.\n\t\t *\n\t\t * Note that when filling in the properties of `task`, you _must_ be sure to\n\t\t * use the exact same `TaskDefinition` and not create a new one. Other properties\n\t\t * may be changed.\n\t\t *\n\t\t * @param task The task to resolve.\n\t\t * @param token A cancellation token.\n\t\t * @return The resolved task\n\t\t */\n\t\tresolveTask(task: T, token: CancellationToken): ProviderResult<T>;",
                    "name": "resolveTask",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "task",
                        "type": {
                          "ref": "T",
                          "targs": [],
                          "isNullable": false,
                          "_": 7939,
                          "source": " T"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 7939,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "ref": "T",
                          "targs": [],
                          "isNullable": false,
                          "_": 7939,
                          "source": "T"
                        }
                      ],
                      "isNullable": false,
                      "_": 7939,
                      "source": " ProviderResult<T>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 7948,
                "name": "TaskExecution",
                "generics": [],
                "doc": "An object representing an executed Task. It can be used\nto terminate a task.\n\nThis interface is not intended to be implemented.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The task that got started.",
                    "isMethod": false,
                    "_": 7952,
                    "source": "\n\t\t/**\n\t\t * The task that got started.\n\t\t */\n\t\ttask: Task;",
                    "name": "task",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Task",
                      "targs": [],
                      "isNullable": false,
                      "_": 7952,
                      "source": " Task"
                    }
                  },
                  {
                    "doc": "Terminates the task execution.",
                    "isMethod": true,
                    "_": 7957,
                    "source": "\n\n\t\t/**\n\t\t * Terminates the task execution.\n\t\t */\n\t\tterminate(): void;",
                    "name": "terminate",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 7957,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 7965,
                "name": "TaskStartEvent",
                "generics": [],
                "doc": "An event signaling the start of a task execution.\n\nThis interface is not intended to be implemented.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The task item representing the task that got started.",
                    "isMethod": false,
                    "_": 7969,
                    "source": "\n\t\t/**\n\t\t * The task item representing the task that got started.\n\t\t */\n\t\treadonly execution: TaskExecution;",
                    "name": "execution",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "TaskExecution",
                      "targs": [],
                      "isNullable": false,
                      "_": 7969,
                      "source": " TaskExecution"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 7977,
                "name": "TaskEndEvent",
                "generics": [],
                "doc": "An event signaling the end of an executed task.\n\nThis interface is not intended to be implemented.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The task item representing the task that finished.",
                    "isMethod": false,
                    "_": 7981,
                    "source": "\n\t\t/**\n\t\t * The task item representing the task that finished.\n\t\t */\n\t\treadonly execution: TaskExecution;",
                    "name": "execution",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "TaskExecution",
                      "targs": [],
                      "isNullable": false,
                      "_": 7981,
                      "source": " TaskExecution"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 7988,
                "name": "TaskProcessStartEvent",
                "generics": [],
                "doc": "An event signaling the start of a process execution\ntriggered through a task",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The task execution for which the process got started.",
                    "isMethod": false,
                    "_": 7993,
                    "source": "\n\n\t\t/**\n\t\t * The task execution for which the process got started.\n\t\t */\n\t\treadonly execution: TaskExecution;",
                    "name": "execution",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "TaskExecution",
                      "targs": [],
                      "isNullable": false,
                      "_": 7993,
                      "source": " TaskExecution"
                    }
                  },
                  {
                    "doc": "The underlying process id.",
                    "isMethod": false,
                    "_": 7998,
                    "source": "\n\n\t\t/**\n\t\t * The underlying process id.\n\t\t */\n\t\treadonly processId: number;",
                    "name": "processId",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 7998,
                      "source": " number"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 8005,
                "name": "TaskProcessEndEvent",
                "generics": [],
                "doc": "An event signaling the end of a process execution\ntriggered through a task",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The task execution for which the process got started.",
                    "isMethod": false,
                    "_": 8010,
                    "source": "\n\n\t\t/**\n\t\t * The task execution for which the process got started.\n\t\t */\n\t\treadonly execution: TaskExecution;",
                    "name": "execution",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "TaskExecution",
                      "targs": [],
                      "isNullable": false,
                      "_": 8010,
                      "source": " TaskExecution"
                    }
                  },
                  {
                    "doc": "The process's exit code. Will be `undefined` when the task is terminated.",
                    "isMethod": false,
                    "_": 8015,
                    "source": "\n\n\t\t/**\n\t\t * The process's exit code. Will be `undefined` when the task is terminated.\n\t\t */\n\t\treadonly exitCode: number | undefined;",
                    "name": "exitCode",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 8015,
                          "source": " number"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 8015,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 8015,
                      "source": " number | undefined"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 8018,
                "name": "TaskFilter",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The task version as used in the tasks.json file.\n The string support the package.json semver notation.",
                    "isMethod": false,
                    "_": 8023,
                    "source": "\n\t\t/**\n\t\t * The task version as used in the tasks.json file.\n\t\t * The string support the package.json semver notation.\n\t\t */\n\t\tversion?: string;",
                    "name": "version",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 8023,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The task type to return;",
                    "isMethod": false,
                    "_": 8028,
                    "source": "\n\n\t\t/**\n\t\t * The task type to return;\n\t\t */\n\t\ttype?: string;",
                    "name": "type",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 8028,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 8135,
                "name": "FileStat",
                "generics": [],
                "doc": "The `FileStat`-type represents metadata about a file",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The type of the file, e.g. is a regular file, a directory, or symbolic link\n to a file.\n\n *Note:* This value might be a bitmask, e.g. `FileType.File | FileType.SymbolicLink`.",
                    "isMethod": false,
                    "_": 8142,
                    "source": "\n\t\t/**\n\t\t * The type of the file, e.g. is a regular file, a directory, or symbolic link\n\t\t * to a file.\n\t\t *\n\t\t * *Note:* This value might be a bitmask, e.g. `FileType.File | FileType.SymbolicLink`.\n\t\t */\n\t\ttype: FileType;",
                    "name": "type",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "FileType",
                      "targs": [],
                      "isNullable": false,
                      "_": 8142,
                      "source": " FileType"
                    }
                  },
                  {
                    "doc": "The creation timestamp in milliseconds elapsed since January 1, 1970 00:00:00 UTC.",
                    "isMethod": false,
                    "_": 8146,
                    "source": "\n\t\t/**\n\t\t * The creation timestamp in milliseconds elapsed since January 1, 1970 00:00:00 UTC.\n\t\t */\n\t\tctime: number;",
                    "name": "ctime",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 8146,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "The modification timestamp in milliseconds elapsed since January 1, 1970 00:00:00 UTC.\n\n *Note:* If the file changed, it is important to provide an updated `mtime` that advanced\n from the previous value. Otherwise there may be optimizations in place that will not show\n the updated file contents in an editor for example.",
                    "isMethod": false,
                    "_": 8154,
                    "source": "\n\t\t/**\n\t\t * The modification timestamp in milliseconds elapsed since January 1, 1970 00:00:00 UTC.\n\t\t *\n\t\t * *Note:* If the file changed, it is important to provide an updated `mtime` that advanced\n\t\t * from the previous value. Otherwise there may be optimizations in place that will not show\n\t\t * the updated file contents in an editor for example.\n\t\t */\n\t\tmtime: number;",
                    "name": "mtime",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 8154,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "The size in bytes.\n\n *Note:* If the file changed, it is important to provide an updated `size`. Otherwise there\n may be optimizations in place that will not show the updated file contents in an editor for\n example.",
                    "isMethod": false,
                    "_": 8162,
                    "source": "\n\t\t/**\n\t\t * The size in bytes.\n\t\t *\n\t\t * *Note:* If the file changed, it is important to provide an updated `size`. Otherwise there\n\t\t * may be optimizations in place that will not show the updated file contents in an editor for\n\t\t * example.\n\t\t */\n\t\tsize: number;",
                    "name": "size",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 8162,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "The permissions of the file, e.g. whether the file is readonly.\n\n *Note:* This value might be a bitmask, e.g. `FilePermission.Readonly | FilePermission.Other`.",
                    "isMethod": false,
                    "_": 8168,
                    "source": "\n\t\t/**\n\t\t * The permissions of the file, e.g. whether the file is readonly.\n\t\t *\n\t\t * *Note:* This value might be a bitmask, e.g. `FilePermission.Readonly | FilePermission.Other`.\n\t\t */\n\t\tpermissions?: FilePermission;",
                    "name": "permissions",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "FilePermission",
                      "targs": [],
                      "isNullable": false,
                      "_": 8168,
                      "source": " FilePermission"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 8177,
                "name": "FileSystemError",
                "generics": [],
                "doc": "A type that filesystem providers should use to signal errors.\n\nThis class has factory methods for common error-cases, like `FileNotFound` when\na file or folder doesn't exist, use them like so: `throw vscode.FileSystemError.FileNotFound(someUri);`",
                "heritage": [
                  [
                    {
                      "ref": "Error",
                      "targs": [],
                      "isNullable": false,
                      "_": 8177,
                      "source": " Error"
                    }
                  ]
                ],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 8222,
                    "source": "\n\n\t\t/**\n\t\t * Creates a new filesystem error.\n\t\t *\n\t\t * @param messageOrUri Message or uri.\n\t\t */\n\t\tconstructor(messageOrUri?: string | Uri);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "messageOrUri",
                        "type": {
                          "union": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 8222,
                              "source": " string"
                            },
                            {
                              "ref": "Uri",
                              "targs": [],
                              "isNullable": false,
                              "_": 8222,
                              "source": " Uri"
                            }
                          ],
                          "isNullable": false,
                          "_": 8222,
                          "source": " string | Uri"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "Create an error to signal that a file or folder wasn't found.",
                    "isMethod": true,
                    "_": 8183,
                    "source": "\n\n\t\t/**\n\t\t * Create an error to signal that a file or folder wasn't found.\n\t\t * @param messageOrUri Message or uri.\n\t\t */\n\t\tstatic FileNotFound(messageOrUri?: string | Uri): FileSystemError;",
                    "name": "FileNotFound",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "messageOrUri",
                        "type": {
                          "union": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 8183,
                              "source": " string"
                            },
                            {
                              "ref": "Uri",
                              "targs": [],
                              "isNullable": false,
                              "_": 8183,
                              "source": " Uri"
                            }
                          ],
                          "isNullable": false,
                          "_": 8183,
                          "source": " string | Uri"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "FileSystemError",
                      "targs": [],
                      "isNullable": false,
                      "_": 8183,
                      "source": " FileSystemError"
                    }
                  },
                  {
                    "doc": "Create an error to signal that a file or folder already exists, e.g. when\ncreating but not overwriting a file.",
                    "isMethod": true,
                    "_": 8190,
                    "source": "\n\n\t\t/**\n\t\t * Create an error to signal that a file or folder already exists, e.g. when\n\t\t * creating but not overwriting a file.\n\t\t * @param messageOrUri Message or uri.\n\t\t */\n\t\tstatic FileExists(messageOrUri?: string | Uri): FileSystemError;",
                    "name": "FileExists",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "messageOrUri",
                        "type": {
                          "union": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 8190,
                              "source": " string"
                            },
                            {
                              "ref": "Uri",
                              "targs": [],
                              "isNullable": false,
                              "_": 8190,
                              "source": " Uri"
                            }
                          ],
                          "isNullable": false,
                          "_": 8190,
                          "source": " string | Uri"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "FileSystemError",
                      "targs": [],
                      "isNullable": false,
                      "_": 8190,
                      "source": " FileSystemError"
                    }
                  },
                  {
                    "doc": "Create an error to signal that a file is not a folder.",
                    "isMethod": true,
                    "_": 8196,
                    "source": "\n\n\t\t/**\n\t\t * Create an error to signal that a file is not a folder.\n\t\t * @param messageOrUri Message or uri.\n\t\t */\n\t\tstatic FileNotADirectory(messageOrUri?: string | Uri): FileSystemError;",
                    "name": "FileNotADirectory",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "messageOrUri",
                        "type": {
                          "union": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 8196,
                              "source": " string"
                            },
                            {
                              "ref": "Uri",
                              "targs": [],
                              "isNullable": false,
                              "_": 8196,
                              "source": " Uri"
                            }
                          ],
                          "isNullable": false,
                          "_": 8196,
                          "source": " string | Uri"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "FileSystemError",
                      "targs": [],
                      "isNullable": false,
                      "_": 8196,
                      "source": " FileSystemError"
                    }
                  },
                  {
                    "doc": "Create an error to signal that a file is a folder.",
                    "isMethod": true,
                    "_": 8202,
                    "source": "\n\n\t\t/**\n\t\t * Create an error to signal that a file is a folder.\n\t\t * @param messageOrUri Message or uri.\n\t\t */\n\t\tstatic FileIsADirectory(messageOrUri?: string | Uri): FileSystemError;",
                    "name": "FileIsADirectory",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "messageOrUri",
                        "type": {
                          "union": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 8202,
                              "source": " string"
                            },
                            {
                              "ref": "Uri",
                              "targs": [],
                              "isNullable": false,
                              "_": 8202,
                              "source": " Uri"
                            }
                          ],
                          "isNullable": false,
                          "_": 8202,
                          "source": " string | Uri"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "FileSystemError",
                      "targs": [],
                      "isNullable": false,
                      "_": 8202,
                      "source": " FileSystemError"
                    }
                  },
                  {
                    "doc": "Create an error to signal that an operation lacks required permissions.",
                    "isMethod": true,
                    "_": 8208,
                    "source": "\n\n\t\t/**\n\t\t * Create an error to signal that an operation lacks required permissions.\n\t\t * @param messageOrUri Message or uri.\n\t\t */\n\t\tstatic NoPermissions(messageOrUri?: string | Uri): FileSystemError;",
                    "name": "NoPermissions",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "messageOrUri",
                        "type": {
                          "union": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 8208,
                              "source": " string"
                            },
                            {
                              "ref": "Uri",
                              "targs": [],
                              "isNullable": false,
                              "_": 8208,
                              "source": " Uri"
                            }
                          ],
                          "isNullable": false,
                          "_": 8208,
                          "source": " string | Uri"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "FileSystemError",
                      "targs": [],
                      "isNullable": false,
                      "_": 8208,
                      "source": " FileSystemError"
                    }
                  },
                  {
                    "doc": "Create an error to signal that the file system is unavailable or too busy to\ncomplete a request.",
                    "isMethod": true,
                    "_": 8215,
                    "source": "\n\n\t\t/**\n\t\t * Create an error to signal that the file system is unavailable or too busy to\n\t\t * complete a request.\n\t\t * @param messageOrUri Message or uri.\n\t\t */\n\t\tstatic Unavailable(messageOrUri?: string | Uri): FileSystemError;",
                    "name": "Unavailable",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "messageOrUri",
                        "type": {
                          "union": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 8215,
                              "source": " string"
                            },
                            {
                              "ref": "Uri",
                              "targs": [],
                              "isNullable": false,
                              "_": 8215,
                              "source": " Uri"
                            }
                          ],
                          "isNullable": false,
                          "_": 8215,
                          "source": " string | Uri"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "FileSystemError",
                      "targs": [],
                      "isNullable": false,
                      "_": 8215,
                      "source": " FileSystemError"
                    }
                  },
                  {
                    "doc": "A code that identifies this error.\n\nPossible values are names of errors, like {@linkcode FileSystemError.FileNotFoundFileNotFound},\nor `Unknown` for unspecified errors.",
                    "isMethod": false,
                    "_": 8230,
                    "source": "\n\n\t\t/**\n\t\t * A code that identifies this error.\n\t\t *\n\t\t * Possible values are names of errors, like {@linkcode FileSystemError.FileNotFound FileNotFound},\n\t\t * or `Unknown` for unspecified errors.\n\t\t */\n\t\treadonly code: string;",
                    "name": "code",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 8230,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 8257,
                "name": "FileChangeEvent",
                "generics": [],
                "doc": "The event filesystem providers must use to signal a file change.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The type of change.",
                    "isMethod": false,
                    "_": 8262,
                    "source": "\n\n\t\t/**\n\t\t * The type of change.\n\t\t */\n\t\treadonly type: FileChangeType;",
                    "name": "type",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "FileChangeType",
                      "targs": [],
                      "isNullable": false,
                      "_": 8262,
                      "source": " FileChangeType"
                    }
                  },
                  {
                    "doc": "The uri of the file that has changed.",
                    "isMethod": false,
                    "_": 8267,
                    "source": "\n\n\t\t/**\n\t\t * The uri of the file that has changed.\n\t\t */\n\t\treadonly uri: Uri;",
                    "name": "uri",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 8267,
                      "source": " Uri"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline37",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "FileSystemProvider",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 8317,
                    "source": " readonly recursive: boolean;",
                    "name": "recursive",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 8317,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 8317,
                    "source": " readonly excludes: readonly string[]",
                    "name": "excludes",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "core": "string",
                            "isNullable": false,
                            "_": 8317,
                            "source": " string"
                          }
                        ],
                        "isNullable": false,
                        "_": 8317,
                        "source": " string[]"
                      },
                      "isNullable": false,
                      "_": 8317,
                      "source": " readonly string[]"
                    }
                  }
                ],
                "calls": []
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline38",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "FileSystemProvider",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 8371,
                    "source": " readonly create: boolean;",
                    "name": "create",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 8371,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 8371,
                    "source": " readonly overwrite: boolean",
                    "name": "overwrite",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 8371,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": []
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline39",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "FileSystemProvider",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 8381,
                    "source": " readonly recursive: boolean",
                    "name": "recursive",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 8381,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": []
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline40",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "FileSystemProvider",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 8394,
                    "source": " readonly overwrite: boolean",
                    "name": "overwrite",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 8394,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": []
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline41",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "FileSystemProvider",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 8408,
                    "source": " readonly overwrite: boolean",
                    "name": "overwrite",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 8408,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 8282,
                "name": "FileSystemProvider",
                "generics": [],
                "doc": "The filesystem provider defines what the editor needs to read, write, discover,\nand to manage files and folders. It allows extensions to serve files from remote places,\nlike ftp-servers, and to seamlessly integrate those into the editor.\n\n* *Note 1:* The filesystem provider API works with {@link Uriuris} and assumes hierarchical\npaths, e.g. `foo:/my/path` is a child of `foo:/my/` and a parent of `foo:/my/path/deeper`.\n* *Note 2:* There is an activation event `onFileSystem:<scheme>` that fires when a file\nor folder is being accessed.\n* *Note 3:* The word 'file' is often used to denote all {@link FileTypekinds} of files, e.g.\nfolders, symbolic links, and regular files.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "An event to signal that a resource has been created, changed, or deleted. This\nevent should fire for resources that are being {@link FileSystemProvider.watchwatched}\nby clients of this provider.\n\n*Note:* It is important that the metadata of the file that changed provides an\nupdated `mtime` that advanced from the previous value in the {@link FileStatstat} and a\ncorrect `size` value. Otherwise there may be optimizations in place that will not show\nthe change in an editor for example.",
                    "isMethod": false,
                    "_": 8294,
                    "source": "\n\n\t\t/**\n\t\t * An event to signal that a resource has been created, changed, or deleted. This\n\t\t * event should fire for resources that are being {@link FileSystemProvider.watch watched}\n\t\t * by clients of this provider.\n\t\t *\n\t\t * *Note:* It is important that the metadata of the file that changed provides an\n\t\t * updated `mtime` that advanced from the previous value in the {@link FileStat stat} and a\n\t\t * correct `size` value. Otherwise there may be optimizations in place that will not show\n\t\t * the change in an editor for example.\n\t\t */\n\t\treadonly onDidChangeFile: Event<FileChangeEvent[]>;",
                    "name": "onDidChangeFile",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "FileChangeEvent",
                              "targs": [],
                              "isNullable": false,
                              "_": 8294,
                              "source": "FileChangeEvent"
                            }
                          ],
                          "isNullable": false,
                          "_": 8294,
                          "source": "FileChangeEvent[]"
                        }
                      ],
                      "isNullable": false,
                      "_": 8294,
                      "source": " Event<FileChangeEvent[]>"
                    }
                  },
                  {
                    "doc": "Subscribes to file change events in the file or folder denoted by `uri`. For folders,\n the option `recursive` indicates whether subfolders, sub-subfolders, etc. should\n be watched for file changes as well. With `recursive: false`, only changes to the\n files that are direct children of the folder should trigger an event.\n\n The `excludes` array is used to indicate paths that should be excluded from file\n watching. It is typically derived from the `files.watcherExclude` setting that\n is configurable by the user. Each entry can be be:\n - the absolute path to exclude\n - a relative path to exclude (for example `build/output`)\n - a simple glob pattern (for example `**​/build`, `output/**`)\n\n It is the file system provider's job to call {@linkcode FileSystemProvider.onDidChangeFile onDidChangeFile}\n for every change given these rules. No event should be emitted for files that match any of the provided\n excludes.\n\n @param uri The uri of the file or folder to be watched.\n @param options Configures the watch.\n @returns A disposable that tells the provider to stop watching the `uri`.",
                    "isMethod": true,
                    "_": 8317,
                    "source": "\n\n\t\t/**\n\t\t * Subscribes to file change events in the file or folder denoted by `uri`. For folders,\n\t\t * the option `recursive` indicates whether subfolders, sub-subfolders, etc. should\n\t\t * be watched for file changes as well. With `recursive: false`, only changes to the\n\t\t * files that are direct children of the folder should trigger an event.\n\t\t *\n\t\t * The `excludes` array is used to indicate paths that should be excluded from file\n\t\t * watching. It is typically derived from the `files.watcherExclude` setting that\n\t\t * is configurable by the user. Each entry can be be:\n\t\t * - the absolute path to exclude\n\t\t * - a relative path to exclude (for example `build/output`)\n\t\t * - a simple glob pattern (for example `**​/build`, `output/**`)\n\t\t *\n\t\t * It is the file system provider's job to call {@linkcode FileSystemProvider.onDidChangeFile onDidChangeFile}\n\t\t * for every change given these rules. No event should be emitted for files that match any of the provided\n\t\t * excludes.\n\t\t *\n\t\t * @param uri The uri of the file or folder to be watched.\n\t\t * @param options Configures the watch.\n\t\t * @returns A disposable that tells the provider to stop watching the `uri`.\n\t\t */\n\t\twatch(uri: Uri, options: { readonly recursive: boolean; readonly excludes: readonly string[] }): Disposable;",
                    "name": "watch",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "uri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 8317,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "options",
                        "type": {
                          "ref": "IInline37",
                          "targs": [],
                          "isNullable": false,
                          "_": 8317,
                          "source": " { readonly recursive: boolean; readonly excludes: readonly string[] }"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Disposable",
                      "targs": [],
                      "isNullable": false,
                      "_": 8317,
                      "source": " Disposable"
                    }
                  },
                  {
                    "doc": "Retrieve metadata about a file.\n\n Note that the metadata for symbolic links should be the metadata of the file they refer to.\n Still, the {@link FileType.SymbolicLink SymbolicLink}-type must be used in addition to the actual type, e.g.\n `FileType.SymbolicLink | FileType.Directory`.\n\n @param uri The uri of the file to retrieve metadata about.\n @return The file metadata about the file.\n @throws {@linkcode FileSystemError.FileNotFound FileNotFound} when `uri` doesn't exist.",
                    "isMethod": true,
                    "_": 8330,
                    "source": "\n\n\t\t/**\n\t\t * Retrieve metadata about a file.\n\t\t *\n\t\t * Note that the metadata for symbolic links should be the metadata of the file they refer to.\n\t\t * Still, the {@link FileType.SymbolicLink SymbolicLink}-type must be used in addition to the actual type, e.g.\n\t\t * `FileType.SymbolicLink | FileType.Directory`.\n\t\t *\n\t\t * @param uri The uri of the file to retrieve metadata about.\n\t\t * @return The file metadata about the file.\n\t\t * @throws {@linkcode FileSystemError.FileNotFound FileNotFound} when `uri` doesn't exist.\n\t\t */\n\t\tstat(uri: Uri): FileStat | Thenable<FileStat>;",
                    "name": "stat",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "uri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 8330,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "union": [
                        {
                          "ref": "FileStat",
                          "targs": [],
                          "isNullable": false,
                          "_": 8330,
                          "source": " FileStat"
                        },
                        {
                          "ref": "Thenable",
                          "targs": [
                            {
                              "ref": "FileStat",
                              "targs": [],
                              "isNullable": false,
                              "_": 8330,
                              "source": "FileStat"
                            }
                          ],
                          "isNullable": false,
                          "_": 8330,
                          "source": " Thenable<FileStat>"
                        }
                      ],
                      "isNullable": false,
                      "_": 8330,
                      "source": " FileStat | Thenable<FileStat>"
                    }
                  },
                  {
                    "doc": "Retrieve all entries of a {@link FileType.Directory directory}.\n\n @param uri The uri of the folder.\n @return An array of name/type-tuples or a thenable that resolves to such.\n @throws {@linkcode FileSystemError.FileNotFound FileNotFound} when `uri` doesn't exist.",
                    "isMethod": true,
                    "_": 8339,
                    "source": "\n\n\t\t/**\n\t\t * Retrieve all entries of a {@link FileType.Directory directory}.\n\t\t *\n\t\t * @param uri The uri of the folder.\n\t\t * @return An array of name/type-tuples or a thenable that resolves to such.\n\t\t * @throws {@linkcode FileSystemError.FileNotFound FileNotFound} when `uri` doesn't exist.\n\t\t */\n\t\treadDirectory(uri: Uri): [string, FileType][] | Thenable<[string, FileType][]>;",
                    "name": "readDirectory",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "uri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 8339,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "union": [
                        {
                          "core": "array",
                          "targs": [
                            {
                              "tuple": [
                                {
                                  "core": "string",
                                  "isNullable": false,
                                  "_": 8339,
                                  "source": "string"
                                },
                                {
                                  "ref": "FileType",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 8339,
                                  "source": " FileType"
                                }
                              ],
                              "isNullable": false,
                              "_": 8339,
                              "source": " [string, FileType]"
                            }
                          ],
                          "isNullable": false,
                          "_": 8339,
                          "source": " [string, FileType][]"
                        },
                        {
                          "ref": "Thenable",
                          "targs": [
                            {
                              "core": "array",
                              "targs": [
                                {
                                  "tuple": [
                                    {
                                      "core": "string",
                                      "isNullable": false,
                                      "_": 8339,
                                      "source": "string"
                                    },
                                    {
                                      "ref": "FileType",
                                      "targs": [],
                                      "isNullable": false,
                                      "_": 8339,
                                      "source": " FileType"
                                    }
                                  ],
                                  "isNullable": false,
                                  "_": 8339,
                                  "source": "[string, FileType]"
                                }
                              ],
                              "isNullable": false,
                              "_": 8339,
                              "source": "[string, FileType][]"
                            }
                          ],
                          "isNullable": false,
                          "_": 8339,
                          "source": " Thenable<[string, FileType][]>"
                        }
                      ],
                      "isNullable": false,
                      "_": 8339,
                      "source": " [string, FileType][] | Thenable<[string, FileType][]>"
                    }
                  },
                  {
                    "doc": "Create a new directory (Note, that new files are created via `write`-calls).\n\n @param uri The uri of the new folder.\n @throws {@linkcode FileSystemError.FileNotFound FileNotFound} when the parent of `uri` doesn't exist, e.g. no mkdirp-logic required.\n @throws {@linkcode FileSystemError.FileExists FileExists} when `uri` already exists.\n @throws {@linkcode FileSystemError.NoPermissions NoPermissions} when permissions aren't sufficient.",
                    "isMethod": true,
                    "_": 8349,
                    "source": "\n\n\t\t/**\n\t\t * Create a new directory (Note, that new files are created via `write`-calls).\n\t\t *\n\t\t * @param uri The uri of the new folder.\n\t\t * @throws {@linkcode FileSystemError.FileNotFound FileNotFound} when the parent of `uri` doesn't exist, e.g. no mkdirp-logic required.\n\t\t * @throws {@linkcode FileSystemError.FileExists FileExists} when `uri` already exists.\n\t\t * @throws {@linkcode FileSystemError.NoPermissions NoPermissions} when permissions aren't sufficient.\n\t\t */\n\t\tcreateDirectory(uri: Uri): void | Thenable<void>;",
                    "name": "createDirectory",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "uri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 8349,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "union": [
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 8349,
                          "source": " void"
                        },
                        {
                          "ref": "Thenable",
                          "targs": [
                            {
                              "core": "void",
                              "isNullable": false,
                              "_": 8349,
                              "source": "void"
                            }
                          ],
                          "isNullable": false,
                          "_": 8349,
                          "source": " Thenable<void>"
                        }
                      ],
                      "isNullable": false,
                      "_": 8349,
                      "source": " void | Thenable<void>"
                    }
                  },
                  {
                    "doc": "Read the entire contents of a file.\n\n @param uri The uri of the file.\n @return An array of bytes or a thenable that resolves to such.\n @throws {@linkcode FileSystemError.FileNotFound FileNotFound} when `uri` doesn't exist.",
                    "isMethod": true,
                    "_": 8358,
                    "source": "\n\n\t\t/**\n\t\t * Read the entire contents of a file.\n\t\t *\n\t\t * @param uri The uri of the file.\n\t\t * @return An array of bytes or a thenable that resolves to such.\n\t\t * @throws {@linkcode FileSystemError.FileNotFound FileNotFound} when `uri` doesn't exist.\n\t\t */\n\t\treadFile(uri: Uri): Uint8Array | Thenable<Uint8Array>;",
                    "name": "readFile",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "uri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 8358,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "union": [
                        {
                          "ref": "Uint8Array",
                          "targs": [],
                          "isNullable": false,
                          "_": 8358,
                          "source": " Uint8Array"
                        },
                        {
                          "ref": "Thenable",
                          "targs": [
                            {
                              "ref": "Uint8Array",
                              "targs": [],
                              "isNullable": false,
                              "_": 8358,
                              "source": "Uint8Array"
                            }
                          ],
                          "isNullable": false,
                          "_": 8358,
                          "source": " Thenable<Uint8Array>"
                        }
                      ],
                      "isNullable": false,
                      "_": 8358,
                      "source": " Uint8Array | Thenable<Uint8Array>"
                    }
                  },
                  {
                    "doc": "Write data to a file, replacing its entire contents.\n\n @param uri The uri of the file.\n @param content The new content of the file.\n @param options Defines if missing files should or must be created.\n @throws {@linkcode FileSystemError.FileNotFound FileNotFound} when `uri` doesn't exist and `create` is not set.\n @throws {@linkcode FileSystemError.FileNotFound FileNotFound} when the parent of `uri` doesn't exist and `create` is set, e.g. no mkdirp-logic required.\n @throws {@linkcode FileSystemError.FileExists FileExists} when `uri` already exists, `create` is set but `overwrite` is not set.\n @throws {@linkcode FileSystemError.NoPermissions NoPermissions} when permissions aren't sufficient.",
                    "isMethod": true,
                    "_": 8371,
                    "source": "\n\n\t\t/**\n\t\t * Write data to a file, replacing its entire contents.\n\t\t *\n\t\t * @param uri The uri of the file.\n\t\t * @param content The new content of the file.\n\t\t * @param options Defines if missing files should or must be created.\n\t\t * @throws {@linkcode FileSystemError.FileNotFound FileNotFound} when `uri` doesn't exist and `create` is not set.\n\t\t * @throws {@linkcode FileSystemError.FileNotFound FileNotFound} when the parent of `uri` doesn't exist and `create` is set, e.g. no mkdirp-logic required.\n\t\t * @throws {@linkcode FileSystemError.FileExists FileExists} when `uri` already exists, `create` is set but `overwrite` is not set.\n\t\t * @throws {@linkcode FileSystemError.NoPermissions NoPermissions} when permissions aren't sufficient.\n\t\t */\n\t\twriteFile(uri: Uri, content: Uint8Array, options: { readonly create: boolean; readonly overwrite: boolean }): void | Thenable<void>;",
                    "name": "writeFile",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "uri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 8371,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "content",
                        "type": {
                          "ref": "Uint8Array",
                          "targs": [],
                          "isNullable": false,
                          "_": 8371,
                          "source": " Uint8Array"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "options",
                        "type": {
                          "ref": "IInline38",
                          "targs": [],
                          "isNullable": false,
                          "_": 8371,
                          "source": " { readonly create: boolean; readonly overwrite: boolean }"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "union": [
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 8371,
                          "source": " void"
                        },
                        {
                          "ref": "Thenable",
                          "targs": [
                            {
                              "core": "void",
                              "isNullable": false,
                              "_": 8371,
                              "source": "void"
                            }
                          ],
                          "isNullable": false,
                          "_": 8371,
                          "source": " Thenable<void>"
                        }
                      ],
                      "isNullable": false,
                      "_": 8371,
                      "source": " void | Thenable<void>"
                    }
                  },
                  {
                    "doc": "Delete a file.\n\n @param uri The resource that is to be deleted.\n @param options Defines if deletion of folders is recursive.\n @throws {@linkcode FileSystemError.FileNotFound FileNotFound} when `uri` doesn't exist.\n @throws {@linkcode FileSystemError.NoPermissions NoPermissions} when permissions aren't sufficient.",
                    "isMethod": true,
                    "_": 8381,
                    "source": "\n\n\t\t/**\n\t\t * Delete a file.\n\t\t *\n\t\t * @param uri The resource that is to be deleted.\n\t\t * @param options Defines if deletion of folders is recursive.\n\t\t * @throws {@linkcode FileSystemError.FileNotFound FileNotFound} when `uri` doesn't exist.\n\t\t * @throws {@linkcode FileSystemError.NoPermissions NoPermissions} when permissions aren't sufficient.\n\t\t */\n\t\tdelete(uri: Uri, options: { readonly recursive: boolean }): void | Thenable<void>;",
                    "name": "delete",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "uri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 8381,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "options",
                        "type": {
                          "ref": "IInline39",
                          "targs": [],
                          "isNullable": false,
                          "_": 8381,
                          "source": " { readonly recursive: boolean }"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "union": [
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 8381,
                          "source": " void"
                        },
                        {
                          "ref": "Thenable",
                          "targs": [
                            {
                              "core": "void",
                              "isNullable": false,
                              "_": 8381,
                              "source": "void"
                            }
                          ],
                          "isNullable": false,
                          "_": 8381,
                          "source": " Thenable<void>"
                        }
                      ],
                      "isNullable": false,
                      "_": 8381,
                      "source": " void | Thenable<void>"
                    }
                  },
                  {
                    "doc": "Rename a file or folder.\n\n @param oldUri The existing file.\n @param newUri The new location.\n @param options Defines if existing files should be overwritten.\n @throws {@linkcode FileSystemError.FileNotFound FileNotFound} when `oldUri` doesn't exist.\n @throws {@linkcode FileSystemError.FileNotFound FileNotFound} when parent of `newUri` doesn't exist, e.g. no mkdirp-logic required.\n @throws {@linkcode FileSystemError.FileExists FileExists} when `newUri` exists and when the `overwrite` option is not `true`.\n @throws {@linkcode FileSystemError.NoPermissions NoPermissions} when permissions aren't sufficient.",
                    "isMethod": true,
                    "_": 8394,
                    "source": "\n\n\t\t/**\n\t\t * Rename a file or folder.\n\t\t *\n\t\t * @param oldUri The existing file.\n\t\t * @param newUri The new location.\n\t\t * @param options Defines if existing files should be overwritten.\n\t\t * @throws {@linkcode FileSystemError.FileNotFound FileNotFound} when `oldUri` doesn't exist.\n\t\t * @throws {@linkcode FileSystemError.FileNotFound FileNotFound} when parent of `newUri` doesn't exist, e.g. no mkdirp-logic required.\n\t\t * @throws {@linkcode FileSystemError.FileExists FileExists} when `newUri` exists and when the `overwrite` option is not `true`.\n\t\t * @throws {@linkcode FileSystemError.NoPermissions NoPermissions} when permissions aren't sufficient.\n\t\t */\n\t\trename(oldUri: Uri, newUri: Uri, options: { readonly overwrite: boolean }): void | Thenable<void>;",
                    "name": "rename",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "oldUri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 8394,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "newUri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 8394,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "options",
                        "type": {
                          "ref": "IInline40",
                          "targs": [],
                          "isNullable": false,
                          "_": 8394,
                          "source": " { readonly overwrite: boolean }"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "union": [
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 8394,
                          "source": " void"
                        },
                        {
                          "ref": "Thenable",
                          "targs": [
                            {
                              "core": "void",
                              "isNullable": false,
                              "_": 8394,
                              "source": "void"
                            }
                          ],
                          "isNullable": false,
                          "_": 8394,
                          "source": " Thenable<void>"
                        }
                      ],
                      "isNullable": false,
                      "_": 8394,
                      "source": " void | Thenable<void>"
                    }
                  },
                  {
                    "doc": "Copy files or folders. Implementing this function is optional but it will speedup\n the copy operation.\n\n @param source The existing file.\n @param destination The destination location.\n @param options Defines if existing files should be overwritten.\n @throws {@linkcode FileSystemError.FileNotFound FileNotFound} when `source` doesn't exist.\n @throws {@linkcode FileSystemError.FileNotFound FileNotFound} when parent of `destination` doesn't exist, e.g. no mkdirp-logic required.\n @throws {@linkcode FileSystemError.FileExists FileExists} when `destination` exists and when the `overwrite` option is not `true`.\n @throws {@linkcode FileSystemError.NoPermissions NoPermissions} when permissions aren't sufficient.",
                    "isMethod": true,
                    "_": 8408,
                    "source": "\n\n\t\t/**\n\t\t * Copy files or folders. Implementing this function is optional but it will speedup\n\t\t * the copy operation.\n\t\t *\n\t\t * @param source The existing file.\n\t\t * @param destination The destination location.\n\t\t * @param options Defines if existing files should be overwritten.\n\t\t * @throws {@linkcode FileSystemError.FileNotFound FileNotFound} when `source` doesn't exist.\n\t\t * @throws {@linkcode FileSystemError.FileNotFound FileNotFound} when parent of `destination` doesn't exist, e.g. no mkdirp-logic required.\n\t\t * @throws {@linkcode FileSystemError.FileExists FileExists} when `destination` exists and when the `overwrite` option is not `true`.\n\t\t * @throws {@linkcode FileSystemError.NoPermissions NoPermissions} when permissions aren't sufficient.\n\t\t */\n\t\tcopy?(source: Uri, destination: Uri, options: { readonly overwrite: boolean }): void | Thenable<void>;",
                    "name": "copy",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "source",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 8408,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "destination",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 8408,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "options",
                        "type": {
                          "ref": "IInline41",
                          "targs": [],
                          "isNullable": false,
                          "_": 8408,
                          "source": " { readonly overwrite: boolean }"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "union": [
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 8408,
                          "source": " void"
                        },
                        {
                          "ref": "Thenable",
                          "targs": [
                            {
                              "core": "void",
                              "isNullable": false,
                              "_": 8408,
                              "source": "void"
                            }
                          ],
                          "isNullable": false,
                          "_": 8408,
                          "source": " Thenable<void>"
                        }
                      ],
                      "isNullable": false,
                      "_": 8408,
                      "source": " void | Thenable<void>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline42",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "FileSystem",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 8469,
                    "source": " recursive?: boolean;",
                    "name": "recursive",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 8469,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 8469,
                    "source": " useTrash?: boolean",
                    "name": "useTrash",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 8469,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": []
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline43",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "FileSystem",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 8478,
                    "source": " overwrite?: boolean",
                    "name": "overwrite",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 8478,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": []
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline44",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "FileSystem",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 8487,
                    "source": " overwrite?: boolean",
                    "name": "overwrite",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 8487,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 8419,
                "name": "FileSystem",
                "generics": [],
                "doc": "The file system interface exposes the editor's built-in and contributed\n{@link FileSystemProviderfile system providers}. It allows extensions to work\nwith files from the local disk as well as files from remote places, like the\nremote extension host or ftp-servers.\n\n*Note* that an instance of this interface is available as {@linkcode workspace.fs}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Retrieve metadata about a file.\n\n @param uri The uri of the file to retrieve metadata about.\n @return The file metadata about the file.",
                    "isMethod": true,
                    "_": 8427,
                    "source": "\n\n\t\t/**\n\t\t * Retrieve metadata about a file.\n\t\t *\n\t\t * @param uri The uri of the file to retrieve metadata about.\n\t\t * @return The file metadata about the file.\n\t\t */\n\t\tstat(uri: Uri): Thenable<FileStat>;",
                    "name": "stat",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "uri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 8427,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Thenable",
                      "targs": [
                        {
                          "ref": "FileStat",
                          "targs": [],
                          "isNullable": false,
                          "_": 8427,
                          "source": "FileStat"
                        }
                      ],
                      "isNullable": false,
                      "_": 8427,
                      "source": " Thenable<FileStat>"
                    }
                  },
                  {
                    "doc": "Retrieve all entries of a {@link FileType.Directory directory}.\n\n @param uri The uri of the folder.\n @return An array of name/type-tuples or a thenable that resolves to such.",
                    "isMethod": true,
                    "_": 8435,
                    "source": "\n\n\t\t/**\n\t\t * Retrieve all entries of a {@link FileType.Directory directory}.\n\t\t *\n\t\t * @param uri The uri of the folder.\n\t\t * @return An array of name/type-tuples or a thenable that resolves to such.\n\t\t */\n\t\treadDirectory(uri: Uri): Thenable<[string, FileType][]>;",
                    "name": "readDirectory",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "uri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 8435,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Thenable",
                      "targs": [
                        {
                          "core": "array",
                          "targs": [
                            {
                              "tuple": [
                                {
                                  "core": "string",
                                  "isNullable": false,
                                  "_": 8435,
                                  "source": "string"
                                },
                                {
                                  "ref": "FileType",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 8435,
                                  "source": " FileType"
                                }
                              ],
                              "isNullable": false,
                              "_": 8435,
                              "source": "[string, FileType]"
                            }
                          ],
                          "isNullable": false,
                          "_": 8435,
                          "source": "[string, FileType][]"
                        }
                      ],
                      "isNullable": false,
                      "_": 8435,
                      "source": " Thenable<[string, FileType][]>"
                    }
                  },
                  {
                    "doc": "Create a new directory (Note, that new files are created via `write`-calls).\n\n *Note* that missing directories are created automatically, e.g this call has\n `mkdirp` semantics.\n\n @param uri The uri of the new folder.",
                    "isMethod": true,
                    "_": 8445,
                    "source": "\n\n\t\t/**\n\t\t * Create a new directory (Note, that new files are created via `write`-calls).\n\t\t *\n\t\t * *Note* that missing directories are created automatically, e.g this call has\n\t\t * `mkdirp` semantics.\n\t\t *\n\t\t * @param uri The uri of the new folder.\n\t\t */\n\t\tcreateDirectory(uri: Uri): Thenable<void>;",
                    "name": "createDirectory",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "uri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 8445,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Thenable",
                      "targs": [
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 8445,
                          "source": "void"
                        }
                      ],
                      "isNullable": false,
                      "_": 8445,
                      "source": " Thenable<void>"
                    }
                  },
                  {
                    "doc": "Read the entire contents of a file.\n\n @param uri The uri of the file.\n @return An array of bytes or a thenable that resolves to such.",
                    "isMethod": true,
                    "_": 8453,
                    "source": "\n\n\t\t/**\n\t\t * Read the entire contents of a file.\n\t\t *\n\t\t * @param uri The uri of the file.\n\t\t * @return An array of bytes or a thenable that resolves to such.\n\t\t */\n\t\treadFile(uri: Uri): Thenable<Uint8Array>;",
                    "name": "readFile",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "uri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 8453,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Thenable",
                      "targs": [
                        {
                          "ref": "Uint8Array",
                          "targs": [],
                          "isNullable": false,
                          "_": 8453,
                          "source": "Uint8Array"
                        }
                      ],
                      "isNullable": false,
                      "_": 8453,
                      "source": " Thenable<Uint8Array>"
                    }
                  },
                  {
                    "doc": "Write data to a file, replacing its entire contents.\n\n @param uri The uri of the file.\n @param content The new content of the file.",
                    "isMethod": true,
                    "_": 8461,
                    "source": "\n\n\t\t/**\n\t\t * Write data to a file, replacing its entire contents.\n\t\t *\n\t\t * @param uri The uri of the file.\n\t\t * @param content The new content of the file.\n\t\t */\n\t\twriteFile(uri: Uri, content: Uint8Array): Thenable<void>;",
                    "name": "writeFile",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "uri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 8461,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "content",
                        "type": {
                          "ref": "Uint8Array",
                          "targs": [],
                          "isNullable": false,
                          "_": 8461,
                          "source": " Uint8Array"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Thenable",
                      "targs": [
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 8461,
                          "source": "void"
                        }
                      ],
                      "isNullable": false,
                      "_": 8461,
                      "source": " Thenable<void>"
                    }
                  },
                  {
                    "doc": "Delete a file.\n\n @param uri The resource that is to be deleted.\n @param options Defines if trash can should be used and if deletion of folders is recursive",
                    "isMethod": true,
                    "_": 8469,
                    "source": "\n\n\t\t/**\n\t\t * Delete a file.\n\t\t *\n\t\t * @param uri The resource that is to be deleted.\n\t\t * @param options Defines if trash can should be used and if deletion of folders is recursive\n\t\t */\n\t\tdelete(uri: Uri, options?: { recursive?: boolean; useTrash?: boolean }): Thenable<void>;",
                    "name": "delete",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "uri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 8469,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "options",
                        "type": {
                          "ref": "IInline42",
                          "targs": [],
                          "isNullable": false,
                          "_": 8469,
                          "source": " { recursive?: boolean; useTrash?: boolean }"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "Thenable",
                      "targs": [
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 8469,
                          "source": "void"
                        }
                      ],
                      "isNullable": false,
                      "_": 8469,
                      "source": " Thenable<void>"
                    }
                  },
                  {
                    "doc": "Rename a file or folder.\n\n @param source The existing file.\n @param target The new location.\n @param options Defines if existing files should be overwritten.",
                    "isMethod": true,
                    "_": 8478,
                    "source": "\n\n\t\t/**\n\t\t * Rename a file or folder.\n\t\t *\n\t\t * @param source The existing file.\n\t\t * @param target The new location.\n\t\t * @param options Defines if existing files should be overwritten.\n\t\t */\n\t\trename(source: Uri, target: Uri, options?: { overwrite?: boolean }): Thenable<void>;",
                    "name": "rename",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "source",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 8478,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "target",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 8478,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "options",
                        "type": {
                          "ref": "IInline43",
                          "targs": [],
                          "isNullable": false,
                          "_": 8478,
                          "source": " { overwrite?: boolean }"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "Thenable",
                      "targs": [
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 8478,
                          "source": "void"
                        }
                      ],
                      "isNullable": false,
                      "_": 8478,
                      "source": " Thenable<void>"
                    }
                  },
                  {
                    "doc": "Copy files or folders.\n\n @param source The existing file.\n @param target The destination location.\n @param options Defines if existing files should be overwritten.",
                    "isMethod": true,
                    "_": 8487,
                    "source": "\n\n\t\t/**\n\t\t * Copy files or folders.\n\t\t *\n\t\t * @param source The existing file.\n\t\t * @param target The destination location.\n\t\t * @param options Defines if existing files should be overwritten.\n\t\t */\n\t\tcopy(source: Uri, target: Uri, options?: { overwrite?: boolean }): Thenable<void>;",
                    "name": "copy",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "source",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 8487,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "target",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 8487,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "options",
                        "type": {
                          "ref": "IInline44",
                          "targs": [],
                          "isNullable": false,
                          "_": 8487,
                          "source": " { overwrite?: boolean }"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "Thenable",
                      "targs": [
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 8487,
                          "source": "void"
                        }
                      ],
                      "isNullable": false,
                      "_": 8487,
                      "source": " Thenable<void>"
                    }
                  },
                  {
                    "doc": "Check if a given file system supports writing files.\n\n Keep in mind that just because a file system supports writing, that does\n not mean that writes will always succeed. There may be permissions issues\n or other errors that prevent writing a file.\n\n @param scheme The scheme of the filesystem, for example `file` or `git`.\n\n @return `true` if the file system supports writing, `false` if it does not\n support writing (i.e. it is readonly), and `undefined` if the editor does not\n know about the filesystem.",
                    "isMethod": true,
                    "_": 8502,
                    "source": "\n\n\t\t/**\n\t\t * Check if a given file system supports writing files.\n\t\t *\n\t\t * Keep in mind that just because a file system supports writing, that does\n\t\t * not mean that writes will always succeed. There may be permissions issues\n\t\t * or other errors that prevent writing a file.\n\t\t *\n\t\t * @param scheme The scheme of the filesystem, for example `file` or `git`.\n\t\t *\n\t\t * @return `true` if the file system supports writing, `false` if it does not\n\t\t * support writing (i.e. it is readonly), and `undefined` if the editor does not\n\t\t * know about the filesystem.\n\t\t */\n\t\tisWritableFileSystem(scheme: string): boolean | undefined;",
                    "name": "isWritableFileSystem",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "scheme",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 8502,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 8502,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 8502,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 8502,
                      "source": " boolean | undefined"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 8508,
                "name": "WebviewPortMapping",
                "generics": [],
                "doc": "Defines a port mapping used for localhost inside the webview.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Localhost port to remap inside the webview.",
                    "isMethod": false,
                    "_": 8512,
                    "source": "\n\t\t/**\n\t\t * Localhost port to remap inside the webview.\n\t\t */\n\t\treadonly webviewPort: number;",
                    "name": "webviewPort",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 8512,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "Destination port. The `webviewPort` is resolved to this port.",
                    "isMethod": false,
                    "_": 8517,
                    "source": "\n\n\t\t/**\n\t\t * Destination port. The `webviewPort` is resolved to this port.\n\t\t */\n\t\treadonly extensionHostPort: number;",
                    "name": "extensionHostPort",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 8517,
                      "source": " number"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 8523,
                "name": "WebviewOptions",
                "generics": [],
                "doc": "Content settings for a webview.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Controls whether scripts are enabled in the webview content or not.\n\nDefaults to false (scripts-disabled).",
                    "isMethod": false,
                    "_": 8529,
                    "source": "\n\t\t/**\n\t\t * Controls whether scripts are enabled in the webview content or not.\n\t\t *\n\t\t * Defaults to false (scripts-disabled).\n\t\t */\n\t\treadonly enableScripts?: boolean;",
                    "name": "enableScripts",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 8529,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Controls whether forms are enabled in the webview content or not.\n\nDefaults to true if {@link WebviewOptions.enableScriptsscripts are enabled}. Otherwise defaults to false.\nExplicitly setting this property to either true or false overrides the default.",
                    "isMethod": false,
                    "_": 8537,
                    "source": "\n\n\t\t/**\n\t\t * Controls whether forms are enabled in the webview content or not.\n\t\t *\n\t\t * Defaults to true if {@link WebviewOptions.enableScripts scripts are enabled}. Otherwise defaults to false.\n\t\t * Explicitly setting this property to either true or false overrides the default.\n\t\t */\n\t\treadonly enableForms?: boolean;",
                    "name": "enableForms",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 8537,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Controls whether command uris are enabled in webview content or not.\n\nDefaults to `false` (command uris are disabled).\n\nIf you pass in an array, only the commands in the array are allowed.",
                    "isMethod": false,
                    "_": 8546,
                    "source": "\n\n\t\t/**\n\t\t * Controls whether command uris are enabled in webview content or not.\n\t\t *\n\t\t * Defaults to `false` (command uris are disabled).\n\t\t *\n\t\t * If you pass in an array, only the commands in the array are allowed.\n\t\t */\n\t\treadonly enableCommandUris?: boolean | readonly string[];",
                    "name": "enableCommandUris",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 8546,
                          "source": " boolean"
                        },
                        {
                          "operator": 146,
                          "type": {
                            "core": "array",
                            "targs": [
                              {
                                "core": "string",
                                "isNullable": false,
                                "_": 8546,
                                "source": " string"
                              }
                            ],
                            "isNullable": false,
                            "_": 8546,
                            "source": " string[]"
                          },
                          "isNullable": false,
                          "_": 8546,
                          "source": " readonly string[]"
                        }
                      ],
                      "isNullable": false,
                      "_": 8546,
                      "source": " boolean | readonly string[]"
                    }
                  },
                  {
                    "doc": "Root paths from which the webview can load local (filesystem) resources using uris from `asWebviewUri`\n\nDefault to the root folders of the current workspace plus the extension's install directory.\n\nPass in an empty array to disallow access to any local resources.",
                    "isMethod": false,
                    "_": 8555,
                    "source": "\n\n\t\t/**\n\t\t * Root paths from which the webview can load local (filesystem) resources using uris from `asWebviewUri`\n\t\t *\n\t\t * Default to the root folders of the current workspace plus the extension's install directory.\n\t\t *\n\t\t * Pass in an empty array to disallow access to any local resources.\n\t\t */\n\t\treadonly localResourceRoots?: readonly Uri[];",
                    "name": "localResourceRoots",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "Uri",
                            "targs": [],
                            "isNullable": false,
                            "_": 8555,
                            "source": " Uri"
                          }
                        ],
                        "isNullable": false,
                        "_": 8555,
                        "source": " Uri[]"
                      },
                      "isNullable": false,
                      "_": 8555,
                      "source": " readonly Uri[]"
                    }
                  },
                  {
                    "doc": "Mappings of localhost ports used inside the webview.\n\nPort mapping allow webviews to transparently define how localhost ports are resolved. This can be used\nto allow using a static localhost port inside the webview that is resolved to random port that a service is\nrunning on.\n\nIf a webview accesses localhost content, we recommend that you specify port mappings even if\nthe `webviewPort` and `extensionHostPort` ports are the same.\n\n*Note* that port mappings only work for `http` or `https` urls. Websocket urls (e.g. `ws://localhost:3000`)\ncannot be mapped to another port.",
                    "isMethod": false,
                    "_": 8570,
                    "source": "\n\n\t\t/**\n\t\t * Mappings of localhost ports used inside the webview.\n\t\t *\n\t\t * Port mapping allow webviews to transparently define how localhost ports are resolved. This can be used\n\t\t * to allow using a static localhost port inside the webview that is resolved to random port that a service is\n\t\t * running on.\n\t\t *\n\t\t * If a webview accesses localhost content, we recommend that you specify port mappings even if\n\t\t * the `webviewPort` and `extensionHostPort` ports are the same.\n\t\t *\n\t\t * *Note* that port mappings only work for `http` or `https` urls. Websocket urls (e.g. `ws://localhost:3000`)\n\t\t * cannot be mapped to another port.\n\t\t */\n\t\treadonly portMapping?: readonly WebviewPortMapping[];",
                    "name": "portMapping",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "WebviewPortMapping",
                            "targs": [],
                            "isNullable": false,
                            "_": 8570,
                            "source": " WebviewPortMapping"
                          }
                        ],
                        "isNullable": false,
                        "_": 8570,
                        "source": " WebviewPortMapping[]"
                      },
                      "isNullable": false,
                      "_": 8570,
                      "source": " readonly WebviewPortMapping[]"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 8576,
                "name": "Webview",
                "generics": [],
                "doc": "Displays html content, similarly to an iframe.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Content settings for the webview.",
                    "isMethod": false,
                    "_": 8580,
                    "source": "\n\t\t/**\n\t\t * Content settings for the webview.\n\t\t */\n\t\toptions: WebviewOptions;",
                    "name": "options",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "WebviewOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 8580,
                      "source": " WebviewOptions"
                    }
                  },
                  {
                    "doc": "HTML contents of the webview.\n\n This should be a complete, valid html document. Changing this property causes the webview to be reloaded.\n\n Webviews are sandboxed from normal extension process, so all communication with the webview must use\n message passing. To send a message from the extension to the webview, use {@linkcode Webview.postMessage postMessage}.\n To send message from the webview back to an extension, use the `acquireVsCodeApi` function inside the webview\n to get a handle to the editor's api and then call `.postMessage()`:\n\n ```html\n <script>\n     const vscode = acquireVsCodeApi(); // acquireVsCodeApi can only be invoked once\n     vscode.postMessage({ message: 'hello!' });\n </script>\n ```\n\n To load a resources from the workspace inside a webview, use the {@linkcode Webview.asWebviewUri asWebviewUri} method\n and ensure the resource's directory is listed in {@linkcode WebviewOptions.localResourceRoots}.\n\n Keep in mind that even though webviews are sandboxed, they still allow running scripts and loading arbitrary content,\n so extensions must follow all standard web security best practices when working with webviews. This includes\n properly sanitizing all untrusted input (including content from the workspace) and\n setting a [content security policy](https://aka.ms/vscode-api-webview-csp).",
                    "isMethod": false,
                    "_": 8607,
                    "source": "\n\n\t\t/**\n\t\t * HTML contents of the webview.\n\t\t *\n\t\t * This should be a complete, valid html document. Changing this property causes the webview to be reloaded.\n\t\t *\n\t\t * Webviews are sandboxed from normal extension process, so all communication with the webview must use\n\t\t * message passing. To send a message from the extension to the webview, use {@linkcode Webview.postMessage postMessage}.\n\t\t * To send message from the webview back to an extension, use the `acquireVsCodeApi` function inside the webview\n\t\t * to get a handle to the editor's api and then call `.postMessage()`:\n\t\t *\n\t\t * ```html\n\t\t * <script>\n\t\t *     const vscode = acquireVsCodeApi(); // acquireVsCodeApi can only be invoked once\n\t\t *     vscode.postMessage({ message: 'hello!' });\n\t\t * </script>\n\t\t * ```\n\t\t *\n\t\t * To load a resources from the workspace inside a webview, use the {@linkcode Webview.asWebviewUri asWebviewUri} method\n\t\t * and ensure the resource's directory is listed in {@linkcode WebviewOptions.localResourceRoots}.\n\t\t *\n\t\t * Keep in mind that even though webviews are sandboxed, they still allow running scripts and loading arbitrary content,\n\t\t * so extensions must follow all standard web security best practices when working with webviews. This includes\n\t\t * properly sanitizing all untrusted input (including content from the workspace) and\n\t\t * setting a [content security policy](https://aka.ms/vscode-api-webview-csp).\n\t\t */\n\t\thtml: string;",
                    "name": "html",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 8607,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Fired when the webview content posts a message.\n\nWebview content can post strings or json serializable objects back to an extension. They cannot\npost `Blob`, `File`, `ImageData` and other DOM specific objects since the extension that receives the\nmessage does not run in a browser environment.",
                    "isMethod": false,
                    "_": 8616,
                    "source": "\n\n\t\t/**\n\t\t * Fired when the webview content posts a message.\n\t\t *\n\t\t * Webview content can post strings or json serializable objects back to an extension. They cannot\n\t\t * post `Blob`, `File`, `ImageData` and other DOM specific objects since the extension that receives the\n\t\t * message does not run in a browser environment.\n\t\t */\n\t\treadonly onDidReceiveMessage: Event<any>;",
                    "name": "onDidReceiveMessage",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "core": "any",
                          "isNullable": false,
                          "_": 8616,
                          "source": "any"
                        }
                      ],
                      "isNullable": false,
                      "_": 8616,
                      "source": " Event<any>"
                    }
                  },
                  {
                    "doc": "Post a message to the webview content.\n\n Messages are only delivered if the webview is live (either visible or in the\n background with `retainContextWhenHidden`).\n\n @param message Body of the message. This must be a string or other json serializable object.\n\n   For older versions of vscode, if an `ArrayBuffer` is included in `message`,\n   it will not be serialized properly and will not be received by the webview.\n   Similarly any TypedArrays, such as a `Uint8Array`, will be very inefficiently\n   serialized and will also not be recreated as a typed array inside the webview.\n\n   However if your extension targets vscode 1.57+ in the `engines` field of its\n   `package.json`, any `ArrayBuffer` values that appear in `message` will be more\n   efficiently transferred to the webview and will also be correctly recreated inside\n   of the webview.\n\n @return A promise that resolves when the message is posted to a webview or when it is\n dropped because the message was not deliverable.\n\n   Returns `true` if the message was posted to the webview. Messages can only be posted to\n live webviews (i.e. either visible webviews or hidden webviews that set `retainContextWhenHidden`).\n\n   A response of `true` does not mean that the message was actually received by the webview.\n   For example, no message listeners may be have been hooked up inside the webview or the webview may\n   have been destroyed after the message was posted but before it was received.\n\n   If you want confirm that a message as actually received, you can try having your webview posting a\n   confirmation message back to your extension.",
                    "isMethod": true,
                    "_": 8649,
                    "source": "\n\n\t\t/**\n\t\t * Post a message to the webview content.\n\t\t *\n\t\t * Messages are only delivered if the webview is live (either visible or in the\n\t\t * background with `retainContextWhenHidden`).\n\t\t *\n\t\t * @param message Body of the message. This must be a string or other json serializable object.\n\t\t *\n\t\t *   For older versions of vscode, if an `ArrayBuffer` is included in `message`,\n\t\t *   it will not be serialized properly and will not be received by the webview.\n\t\t *   Similarly any TypedArrays, such as a `Uint8Array`, will be very inefficiently\n\t\t *   serialized and will also not be recreated as a typed array inside the webview.\n\t\t *\n\t\t *   However if your extension targets vscode 1.57+ in the `engines` field of its\n\t\t *   `package.json`, any `ArrayBuffer` values that appear in `message` will be more\n\t\t *   efficiently transferred to the webview and will also be correctly recreated inside\n\t\t *   of the webview.\n\t\t *\n\t\t * @return A promise that resolves when the message is posted to a webview or when it is\n\t\t * dropped because the message was not deliverable.\n\t\t *\n\t\t *   Returns `true` if the message was posted to the webview. Messages can only be posted to\n\t\t * live webviews (i.e. either visible webviews or hidden webviews that set `retainContextWhenHidden`).\n\t\t *\n\t\t *   A response of `true` does not mean that the message was actually received by the webview.\n\t\t *   For example, no message listeners may be have been hooked up inside the webview or the webview may\n\t\t *   have been destroyed after the message was posted but before it was received.\n\t\t *\n\t\t *   If you want confirm that a message as actually received, you can try having your webview posting a\n\t\t *   confirmation message back to your extension.\n\t\t */\n\t\tpostMessage(message: any): Thenable<boolean>;",
                    "name": "postMessage",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "message",
                        "type": {
                          "core": "any",
                          "isNullable": false,
                          "_": 8649,
                          "source": " any"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Thenable",
                      "targs": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 8649,
                          "source": "boolean"
                        }
                      ],
                      "isNullable": false,
                      "_": 8649,
                      "source": " Thenable<boolean>"
                    }
                  },
                  {
                    "doc": "Convert a uri for the local file system to one that can be used inside webviews.\n\n Webviews cannot directly load resources from the workspace or local file system using `file:` uris. The\n `asWebviewUri` function takes a local `file:` uri and converts it into a uri that can be used inside of\n a webview to load the same resource:\n\n ```ts\n webview.html = `<img src=\"${webview.asWebviewUri(vscode.Uri.file('/Users/codey/workspace/cat.gif'))}\">`\n ```",
                    "isMethod": true,
                    "_": 8662,
                    "source": "\n\n\t\t/**\n\t\t * Convert a uri for the local file system to one that can be used inside webviews.\n\t\t *\n\t\t * Webviews cannot directly load resources from the workspace or local file system using `file:` uris. The\n\t\t * `asWebviewUri` function takes a local `file:` uri and converts it into a uri that can be used inside of\n\t\t * a webview to load the same resource:\n\t\t *\n\t\t * ```ts\n\t\t * webview.html = `<img src=\"${webview.asWebviewUri(vscode.Uri.file('/Users/codey/workspace/cat.gif'))}\">`\n\t\t * ```\n\t\t */\n\t\tasWebviewUri(localResource: Uri): Uri;",
                    "name": "asWebviewUri",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "localResource",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 8662,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 8662,
                      "source": " Uri"
                    }
                  },
                  {
                    "doc": "Content security policy source for webview resources.\n\nThis is the origin that should be used in a content security policy rule:\n\n```ts\n`img-src https: ${webview.cspSource} ...;`\n```",
                    "isMethod": false,
                    "_": 8673,
                    "source": "\n\n\t\t/**\n\t\t * Content security policy source for webview resources.\n\t\t *\n\t\t * This is the origin that should be used in a content security policy rule:\n\t\t *\n\t\t * ```ts\n\t\t * `img-src https: ${webview.cspSource} ...;`\n\t\t * ```\n\t\t */\n\t\treadonly cspSource: string;",
                    "name": "cspSource",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 8673,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 8679,
                "name": "WebviewPanelOptions",
                "generics": [],
                "doc": "Content settings for a webview panel.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Controls if the find widget is enabled in the panel.\n\nDefaults to `false`.",
                    "isMethod": false,
                    "_": 8685,
                    "source": "\n\t\t/**\n\t\t * Controls if the find widget is enabled in the panel.\n\t\t *\n\t\t * Defaults to `false`.\n\t\t */\n\t\treadonly enableFindWidget?: boolean;",
                    "name": "enableFindWidget",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 8685,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Controls if the webview panel's content (iframe) is kept around even when the panel\nis no longer visible.\n\nNormally the webview panel's html context is created when the panel becomes visible\nand destroyed when it is hidden. Extensions that have complex state\nor UI can set the `retainContextWhenHidden` to make the editor keep the webview\ncontext around, even when the webview moves to a background tab. When a webview using\n`retainContextWhenHidden` becomes hidden, its scripts and other dynamic content are suspended.\nWhen the panel becomes visible again, the context is automatically restored\nin the exact same state it was in originally. You cannot send messages to a\nhidden webview, even with `retainContextWhenHidden` enabled.\n\n`retainContextWhenHidden` has a high memory overhead and should only be used if\nyour panel's context cannot be quickly saved and restored.",
                    "isMethod": false,
                    "_": 8703,
                    "source": "\n\n\t\t/**\n\t\t * Controls if the webview panel's content (iframe) is kept around even when the panel\n\t\t * is no longer visible.\n\t\t *\n\t\t * Normally the webview panel's html context is created when the panel becomes visible\n\t\t * and destroyed when it is hidden. Extensions that have complex state\n\t\t * or UI can set the `retainContextWhenHidden` to make the editor keep the webview\n\t\t * context around, even when the webview moves to a background tab. When a webview using\n\t\t * `retainContextWhenHidden` becomes hidden, its scripts and other dynamic content are suspended.\n\t\t * When the panel becomes visible again, the context is automatically restored\n\t\t * in the exact same state it was in originally. You cannot send messages to a\n\t\t * hidden webview, even with `retainContextWhenHidden` enabled.\n\t\t *\n\t\t * `retainContextWhenHidden` has a high memory overhead and should only be used if\n\t\t * your panel's context cannot be quickly saved and restored.\n\t\t */\n\t\treadonly retainContextWhenHidden?: boolean;",
                    "name": "retainContextWhenHidden",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 8703,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline45",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "WebviewPanel",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 8723,
                    "source": " readonly light: Uri;",
                    "name": "light",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 8723,
                      "source": " Uri"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 8723,
                    "source": " readonly dark: Uri",
                    "name": "dark",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 8723,
                      "source": " Uri"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 8709,
                "name": "WebviewPanel",
                "generics": [],
                "doc": "A panel that contains a webview.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Identifies the type of the webview panel, such as `'markdown.preview'`.",
                    "isMethod": false,
                    "_": 8713,
                    "source": "\n\t\t/**\n\t\t * Identifies the type of the webview panel, such as `'markdown.preview'`.\n\t\t */\n\t\treadonly viewType: string;",
                    "name": "viewType",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 8713,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Title of the panel shown in UI.",
                    "isMethod": false,
                    "_": 8718,
                    "source": "\n\n\t\t/**\n\t\t * Title of the panel shown in UI.\n\t\t */\n\t\ttitle: string;",
                    "name": "title",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 8718,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Icon for the panel shown in UI.",
                    "isMethod": false,
                    "_": 8723,
                    "source": "\n\n\t\t/**\n\t\t * Icon for the panel shown in UI.\n\t\t */\n\t\ticonPath?: Uri | { readonly light: Uri; readonly dark: Uri };",
                    "name": "iconPath",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 8723,
                          "source": " Uri"
                        },
                        {
                          "ref": "IInline45",
                          "targs": [],
                          "isNullable": false,
                          "_": 8723,
                          "source": " { readonly light: Uri; readonly dark: Uri }"
                        }
                      ],
                      "isNullable": false,
                      "_": 8723,
                      "source": " Uri | { readonly light: Uri; readonly dark: Uri }"
                    }
                  },
                  {
                    "doc": "{@linkcode Webview} belonging to the panel.",
                    "isMethod": false,
                    "_": 8728,
                    "source": "\n\n\t\t/**\n\t\t * {@linkcode Webview} belonging to the panel.\n\t\t */\n\t\treadonly webview: Webview;",
                    "name": "webview",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Webview",
                      "targs": [],
                      "isNullable": false,
                      "_": 8728,
                      "source": " Webview"
                    }
                  },
                  {
                    "doc": "Content settings for the webview panel.",
                    "isMethod": false,
                    "_": 8733,
                    "source": "\n\n\t\t/**\n\t\t * Content settings for the webview panel.\n\t\t */\n\t\treadonly options: WebviewPanelOptions;",
                    "name": "options",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "WebviewPanelOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 8733,
                      "source": " WebviewPanelOptions"
                    }
                  },
                  {
                    "doc": "Editor position of the panel. This property is only set if the webview is in\none of the editor view columns.",
                    "isMethod": false,
                    "_": 8739,
                    "source": "\n\n\t\t/**\n\t\t * Editor position of the panel. This property is only set if the webview is in\n\t\t * one of the editor view columns.\n\t\t */\n\t\treadonly viewColumn: ViewColumn | undefined;",
                    "name": "viewColumn",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "ViewColumn",
                          "targs": [],
                          "isNullable": false,
                          "_": 8739,
                          "source": " ViewColumn"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 8739,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 8739,
                      "source": " ViewColumn | undefined"
                    }
                  },
                  {
                    "doc": "Whether the panel is active (focused by the user).",
                    "isMethod": false,
                    "_": 8744,
                    "source": "\n\n\t\t/**\n\t\t * Whether the panel is active (focused by the user).\n\t\t */\n\t\treadonly active: boolean;",
                    "name": "active",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 8744,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Whether the panel is visible.",
                    "isMethod": false,
                    "_": 8749,
                    "source": "\n\n\t\t/**\n\t\t * Whether the panel is visible.\n\t\t */\n\t\treadonly visible: boolean;",
                    "name": "visible",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 8749,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Fired when the panel's view state changes.",
                    "isMethod": false,
                    "_": 8754,
                    "source": "\n\n\t\t/**\n\t\t * Fired when the panel's view state changes.\n\t\t */\n\t\treadonly onDidChangeViewState: Event<WebviewPanelOnDidChangeViewStateEvent>;",
                    "name": "onDidChangeViewState",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "ref": "WebviewPanelOnDidChangeViewStateEvent",
                          "targs": [],
                          "isNullable": false,
                          "_": 8754,
                          "source": "WebviewPanelOnDidChangeViewStateEvent"
                        }
                      ],
                      "isNullable": false,
                      "_": 8754,
                      "source": " Event<WebviewPanelOnDidChangeViewStateEvent>"
                    }
                  },
                  {
                    "doc": "Fired when the panel is disposed.\n\nThis may be because the user closed the panel or because `.dispose()` was\ncalled on it.\n\nTrying to use the panel after it has been disposed throws an exception.",
                    "isMethod": false,
                    "_": 8764,
                    "source": "\n\n\t\t/**\n\t\t * Fired when the panel is disposed.\n\t\t *\n\t\t * This may be because the user closed the panel or because `.dispose()` was\n\t\t * called on it.\n\t\t *\n\t\t * Trying to use the panel after it has been disposed throws an exception.\n\t\t */\n\t\treadonly onDidDispose: Event<void>;",
                    "name": "onDidDispose",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 8764,
                          "source": "void"
                        }
                      ],
                      "isNullable": false,
                      "_": 8764,
                      "source": " Event<void>"
                    }
                  },
                  {
                    "doc": "Show the webview panel in a given column.\n\n A webview panel may only show in a single column at a time. If it is already showing, this\n method moves it to a new column.\n\n @param viewColumn View column to show the panel in. Shows in the current `viewColumn` if undefined.\n @param preserveFocus When `true`, the webview will not take focus.",
                    "isMethod": true,
                    "_": 8775,
                    "source": "\n\n\t\t/**\n\t\t * Show the webview panel in a given column.\n\t\t *\n\t\t * A webview panel may only show in a single column at a time. If it is already showing, this\n\t\t * method moves it to a new column.\n\t\t *\n\t\t * @param viewColumn View column to show the panel in. Shows in the current `viewColumn` if undefined.\n\t\t * @param preserveFocus When `true`, the webview will not take focus.\n\t\t */\n\t\treveal(viewColumn?: ViewColumn, preserveFocus?: boolean): void;",
                    "name": "reveal",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "viewColumn",
                        "type": {
                          "ref": "ViewColumn",
                          "targs": [],
                          "isNullable": false,
                          "_": 8775,
                          "source": " ViewColumn"
                        },
                        "varargs": false,
                        "isNullable": true
                      },
                      {
                        "name": "preserveFocus",
                        "type": {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 8775,
                          "source": " boolean"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 8775,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Dispose of the webview panel.\n\n This closes the panel if it showing and disposes of the resources owned by the webview.\n Webview panels are also disposed when the user closes the webview panel. Both cases\n fire the `onDispose` event.",
                    "isMethod": true,
                    "_": 8784,
                    "source": "\n\n\t\t/**\n\t\t * Dispose of the webview panel.\n\t\t *\n\t\t * This closes the panel if it showing and disposes of the resources owned by the webview.\n\t\t * Webview panels are also disposed when the user closes the webview panel. Both cases\n\t\t * fire the `onDispose` event.\n\t\t */\n\t\tdispose(): any;",
                    "name": "dispose",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "any",
                      "isNullable": false,
                      "_": 8784,
                      "source": " any"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 8790,
                "name": "WebviewPanelOnDidChangeViewStateEvent",
                "generics": [],
                "doc": "Event fired when a webview panel's view state changes.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Webview panel whose view state changed.",
                    "isMethod": false,
                    "_": 8794,
                    "source": "\n\t\t/**\n\t\t * Webview panel whose view state changed.\n\t\t */\n\t\treadonly webviewPanel: WebviewPanel;",
                    "name": "webviewPanel",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "WebviewPanel",
                      "targs": [],
                      "isNullable": false,
                      "_": 8794,
                      "source": " WebviewPanel"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 8830,
                "name": "WebviewPanelSerializer",
                "generics": [
                  {
                    "name": "T",
                    "default": {
                      "core": "unknown",
                      "isNullable": false,
                      "_": 8830,
                      "source": " unknown"
                    },
                    "_": 8830,
                    "source": "T = unknown"
                  }
                ],
                "doc": "Restore webview panels that have been persisted when vscode shuts down.\n\nThere are two types of webview persistence:\n\n- Persistence within a session.\n- Persistence across sessions (across restarts of the editor).\n\nA `WebviewPanelSerializer` is only required for the second case: persisting a webview across sessions.\n\nPersistence within a session allows a webview to save its state when it becomes hidden\nand restore its content from this state when it becomes visible again. It is powered entirely\nby the webview content itself. To save off a persisted state, call `acquireVsCodeApi().setState()` with\nany json serializable object. To restore the state again, call `getState()`\n\n```js\n// Within the webview\nconst vscode = acquireVsCodeApi();\n\n// Get existing state\nconst oldState = vscode.getState() || { value: 0 };\n\n// Update state\nsetState({ value: oldState.value + 1 })\n```\n\nA `WebviewPanelSerializer` extends this persistence across restarts of the editor. When the editor is shutdown,\nit will save off the state from `setState` of all webviews that have a serializer. When the\nwebview first becomes visible after the restart, this state is passed to `deserializeWebviewPanel`.\nThe extension can then restore the old `WebviewPanel` from this state.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Restore a webview panel from its serialized `state`.\n\n Called when a serialized webview first becomes visible.\n\n @param webviewPanel Webview panel to restore. The serializer should take ownership of this panel. The\n serializer must restore the webview's `.html` and hook up all webview events.\n @param state Persisted state from the webview content.\n\n @return Thenable indicating that the webview has been fully restored.",
                    "isMethod": true,
                    "_": 8842,
                    "source": "\n\t\t/**\n\t\t * Restore a webview panel from its serialized `state`.\n\t\t *\n\t\t * Called when a serialized webview first becomes visible.\n\t\t *\n\t\t * @param webviewPanel Webview panel to restore. The serializer should take ownership of this panel. The\n\t\t * serializer must restore the webview's `.html` and hook up all webview events.\n\t\t * @param state Persisted state from the webview content.\n\t\t *\n\t\t * @return Thenable indicating that the webview has been fully restored.\n\t\t */\n\t\tdeserializeWebviewPanel(webviewPanel: WebviewPanel, state: T): Thenable<void>;",
                    "name": "deserializeWebviewPanel",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "webviewPanel",
                        "type": {
                          "ref": "WebviewPanel",
                          "targs": [],
                          "isNullable": false,
                          "_": 8842,
                          "source": " WebviewPanel"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "state",
                        "type": {
                          "ref": "T",
                          "targs": [],
                          "isNullable": false,
                          "_": 8842,
                          "source": " T"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Thenable",
                      "targs": [
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 8842,
                          "source": "void"
                        }
                      ],
                      "isNullable": false,
                      "_": 8842,
                      "source": " Thenable<void>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 8848,
                "name": "WebviewView",
                "generics": [],
                "doc": "A webview based view.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Identifies the type of the webview view, such as `'hexEditor.dataView'`.",
                    "isMethod": false,
                    "_": 8852,
                    "source": "\n\t\t/**\n\t\t * Identifies the type of the webview view, such as `'hexEditor.dataView'`.\n\t\t */\n\t\treadonly viewType: string;",
                    "name": "viewType",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 8852,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The underlying webview for the view.",
                    "isMethod": false,
                    "_": 8857,
                    "source": "\n\n\t\t/**\n\t\t * The underlying webview for the view.\n\t\t */\n\t\treadonly webview: Webview;",
                    "name": "webview",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Webview",
                      "targs": [],
                      "isNullable": false,
                      "_": 8857,
                      "source": " Webview"
                    }
                  },
                  {
                    "doc": "View title displayed in the UI.\n\n The view title is initially taken from the extension `package.json` contribution.",
                    "isMethod": false,
                    "_": 8864,
                    "source": "\n\n\t\t/**\n\t\t * View title displayed in the UI.\n\t\t *\n\t\t * The view title is initially taken from the extension `package.json` contribution.\n\t\t */\n\t\ttitle?: string;",
                    "name": "title",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 8864,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Human-readable string which is rendered less prominently in the title.",
                    "isMethod": false,
                    "_": 8869,
                    "source": "\n\n\t\t/**\n\t\t * Human-readable string which is rendered less prominently in the title.\n\t\t */\n\t\tdescription?: string;",
                    "name": "description",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 8869,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The badge to display for this webview view.\n To remove the badge, set to undefined.",
                    "isMethod": false,
                    "_": 8875,
                    "source": "\n\n\t\t/**\n\t\t * The badge to display for this webview view.\n\t\t * To remove the badge, set to undefined.\n\t\t */\n\t\tbadge?: ViewBadge | undefined;",
                    "name": "badge",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "ViewBadge",
                          "targs": [],
                          "isNullable": false,
                          "_": 8875,
                          "source": " ViewBadge"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 8875,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 8875,
                      "source": " ViewBadge | undefined"
                    }
                  },
                  {
                    "doc": "Event fired when the view is disposed.\n\nViews are disposed when they are explicitly hidden by a user (this happens when a user\nright clicks in a view and unchecks the webview view).\n\nTrying to use the view after it has been disposed throws an exception.",
                    "isMethod": false,
                    "_": 8885,
                    "source": "\n\n\t\t/**\n\t\t * Event fired when the view is disposed.\n\t\t *\n\t\t * Views are disposed when they are explicitly hidden by a user (this happens when a user\n\t\t * right clicks in a view and unchecks the webview view).\n\t\t *\n\t\t * Trying to use the view after it has been disposed throws an exception.\n\t\t */\n\t\treadonly onDidDispose: Event<void>;",
                    "name": "onDidDispose",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 8885,
                          "source": "void"
                        }
                      ],
                      "isNullable": false,
                      "_": 8885,
                      "source": " Event<void>"
                    }
                  },
                  {
                    "doc": "Tracks if the webview is currently visible.\n\nViews are visible when they are on the screen and expanded.",
                    "isMethod": false,
                    "_": 8892,
                    "source": "\n\n\t\t/**\n\t\t * Tracks if the webview is currently visible.\n\t\t *\n\t\t * Views are visible when they are on the screen and expanded.\n\t\t */\n\t\treadonly visible: boolean;",
                    "name": "visible",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 8892,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Event fired when the visibility of the view changes.\n\nActions that trigger a visibility change:\n\n- The view is collapsed or expanded.\n- The user switches to a different view group in the sidebar or panel.\n\nNote that hiding a view using the context menu instead disposes of the view and fires `onDidDispose`.",
                    "isMethod": false,
                    "_": 8904,
                    "source": "\n\n\t\t/**\n\t\t * Event fired when the visibility of the view changes.\n\t\t *\n\t\t * Actions that trigger a visibility change:\n\t\t *\n\t\t * - The view is collapsed or expanded.\n\t\t * - The user switches to a different view group in the sidebar or panel.\n\t\t *\n\t\t * Note that hiding a view using the context menu instead disposes of the view and fires `onDidDispose`.\n\t\t */\n\t\treadonly onDidChangeVisibility: Event<void>;",
                    "name": "onDidChangeVisibility",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 8904,
                          "source": "void"
                        }
                      ],
                      "isNullable": false,
                      "_": 8904,
                      "source": " Event<void>"
                    }
                  },
                  {
                    "doc": "Reveal the view in the UI.\n\n If the view is collapsed, this will expand it.\n\n @param preserveFocus When `true` the view will not take focus.",
                    "isMethod": true,
                    "_": 8913,
                    "source": "\n\n\t\t/**\n\t\t * Reveal the view in the UI.\n\t\t *\n\t\t * If the view is collapsed, this will expand it.\n\t\t *\n\t\t * @param preserveFocus When `true` the view will not take focus.\n\t\t */\n\t\tshow(preserveFocus?: boolean): void;",
                    "name": "show",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "preserveFocus",
                        "type": {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 8913,
                          "source": " boolean"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 8913,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 8921,
                "name": "WebviewViewResolveContext",
                "generics": [
                  {
                    "name": "T",
                    "default": {
                      "core": "unknown",
                      "isNullable": false,
                      "_": 8921,
                      "source": " unknown"
                    },
                    "_": 8921,
                    "source": "T = unknown"
                  }
                ],
                "doc": "Additional information the webview view being resolved.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Persisted state from the webview content.\n\nTo save resources, the editor normally deallocates webview documents (the iframe content) that are not visible.\nFor example, when the user collapse a view or switches to another top level activity in the sidebar, the\n`WebviewView` itself is kept alive but the webview's underlying document is deallocated. It is recreated when\nthe view becomes visible again.\n\nYou can prevent this behavior by setting `retainContextWhenHidden` in the `WebviewOptions`. However this\nincreases resource usage and should be avoided wherever possible. Instead, you can use persisted state to\nsave off a webview's state so that it can be quickly recreated as needed.\n\nTo save off a persisted state, inside the webview call `acquireVsCodeApi().setState()` with\nany json serializable object. To restore the state again, call `getState()`. For example:\n\n```js\n// Within the webview\nconst vscode = acquireVsCodeApi();\n\n// Get existing state\nconst oldState = vscode.getState() || { value: 0 };\n\n// Update state\nsetState({ value: oldState.value + 1 })\n```\n\nThe editor ensures that the persisted state is saved correctly when a webview is hidden and across\neditor restarts.",
                    "isMethod": false,
                    "_": 8951,
                    "source": "\n\t\t/**\n\t\t * Persisted state from the webview content.\n\t\t *\n\t\t * To save resources, the editor normally deallocates webview documents (the iframe content) that are not visible.\n\t\t * For example, when the user collapse a view or switches to another top level activity in the sidebar, the\n\t\t * `WebviewView` itself is kept alive but the webview's underlying document is deallocated. It is recreated when\n\t\t * the view becomes visible again.\n\t\t *\n\t\t * You can prevent this behavior by setting `retainContextWhenHidden` in the `WebviewOptions`. However this\n\t\t * increases resource usage and should be avoided wherever possible. Instead, you can use persisted state to\n\t\t * save off a webview's state so that it can be quickly recreated as needed.\n\t\t *\n\t\t * To save off a persisted state, inside the webview call `acquireVsCodeApi().setState()` with\n\t\t * any json serializable object. To restore the state again, call `getState()`. For example:\n\t\t *\n\t\t * ```js\n\t\t * // Within the webview\n\t\t * const vscode = acquireVsCodeApi();\n\t\t *\n\t\t * // Get existing state\n\t\t * const oldState = vscode.getState() || { value: 0 };\n\t\t *\n\t\t * // Update state\n\t\t * setState({ value: oldState.value + 1 })\n\t\t * ```\n\t\t *\n\t\t * The editor ensures that the persisted state is saved correctly when a webview is hidden and across\n\t\t * editor restarts.\n\t\t */\n\t\treadonly state: T | undefined;",
                    "name": "state",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "T",
                          "targs": [],
                          "isNullable": false,
                          "_": 8951,
                          "source": " T"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 8951,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 8951,
                      "source": " T | undefined"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 8957,
                "name": "WebviewViewProvider",
                "generics": [],
                "doc": "Provider for creating `WebviewView` elements.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Revolves a webview view.\n\n `resolveWebviewView` is called when a view first becomes visible. This may happen when the view is\n first loaded or when the user hides and then shows a view again.\n\n @param webviewView Webview view to restore. The provider should take ownership of this view. The\n    provider must set the webview's `.html` and hook up all webview events it is interested in.\n @param context Additional metadata about the view being resolved.\n @param token Cancellation token indicating that the view being provided is no longer needed.\n\n @return Optional thenable indicating that the view has been fully resolved.",
                    "isMethod": true,
                    "_": 8971,
                    "source": "\n\t\t/**\n\t\t * Revolves a webview view.\n\t\t *\n\t\t * `resolveWebviewView` is called when a view first becomes visible. This may happen when the view is\n\t\t * first loaded or when the user hides and then shows a view again.\n\t\t *\n\t\t * @param webviewView Webview view to restore. The provider should take ownership of this view. The\n\t\t *    provider must set the webview's `.html` and hook up all webview events it is interested in.\n\t\t * @param context Additional metadata about the view being resolved.\n\t\t * @param token Cancellation token indicating that the view being provided is no longer needed.\n\t\t *\n\t\t * @return Optional thenable indicating that the view has been fully resolved.\n\t\t */\n\t\tresolveWebviewView(webviewView: WebviewView, context: WebviewViewResolveContext, token: CancellationToken): Thenable<void> | void;",
                    "name": "resolveWebviewView",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "webviewView",
                        "type": {
                          "ref": "WebviewView",
                          "targs": [],
                          "isNullable": false,
                          "_": 8971,
                          "source": " WebviewView"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "context",
                        "type": {
                          "ref": "WebviewViewResolveContext",
                          "targs": [],
                          "isNullable": false,
                          "_": 8971,
                          "source": " WebviewViewResolveContext"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 8971,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "union": [
                        {
                          "ref": "Thenable",
                          "targs": [
                            {
                              "core": "void",
                              "isNullable": false,
                              "_": 8971,
                              "source": "void"
                            }
                          ],
                          "isNullable": false,
                          "_": 8971,
                          "source": " Thenable<void>"
                        },
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 8971,
                          "source": " void"
                        }
                      ],
                      "isNullable": false,
                      "_": 8971,
                      "source": " Thenable<void> | void"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 8981,
                "name": "CustomTextEditorProvider",
                "generics": [],
                "doc": "Provider for text based custom editors.\n\nText based custom editors use a {@linkcode TextDocument} as their data model. This considerably simplifies\nimplementing a custom editor as it allows the editor to handle many common operations such as\nundo and backup. The provider is responsible for synchronizing text changes between the webview and the `TextDocument`.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Resolve a custom editor for a given text resource.\n\n This is called when a user first opens a resource for a `CustomTextEditorProvider`, or if they reopen an\n existing editor using this `CustomTextEditorProvider`.\n\n\n @param document Document for the resource to resolve.\n\n @param webviewPanel The webview panel used to display the editor UI for this resource.\n\n During resolve, the provider must fill in the initial html for the content webview panel and hook up all\n the event listeners on it that it is interested in. The provider can also hold onto the `WebviewPanel` to\n use later for example in a command. See {@linkcode WebviewPanel} for additional details.\n\n @param token A cancellation token that indicates the result is no longer needed.\n\n @return Thenable indicating that the custom editor has been resolved.",
                    "isMethod": true,
                    "_": 9002,
                    "source": "\n\n\t\t/**\n\t\t * Resolve a custom editor for a given text resource.\n\t\t *\n\t\t * This is called when a user first opens a resource for a `CustomTextEditorProvider`, or if they reopen an\n\t\t * existing editor using this `CustomTextEditorProvider`.\n\t\t *\n\t\t *\n\t\t * @param document Document for the resource to resolve.\n\t\t *\n\t\t * @param webviewPanel The webview panel used to display the editor UI for this resource.\n\t\t *\n\t\t * During resolve, the provider must fill in the initial html for the content webview panel and hook up all\n\t\t * the event listeners on it that it is interested in. The provider can also hold onto the `WebviewPanel` to\n\t\t * use later for example in a command. See {@linkcode WebviewPanel} for additional details.\n\t\t *\n\t\t * @param token A cancellation token that indicates the result is no longer needed.\n\t\t *\n\t\t * @return Thenable indicating that the custom editor has been resolved.\n\t\t */\n\t\tresolveCustomTextEditor(document: TextDocument, webviewPanel: WebviewPanel, token: CancellationToken): Thenable<void> | void;",
                    "name": "resolveCustomTextEditor",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "document",
                        "type": {
                          "ref": "TextDocument",
                          "targs": [],
                          "isNullable": false,
                          "_": 9002,
                          "source": " TextDocument"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "webviewPanel",
                        "type": {
                          "ref": "WebviewPanel",
                          "targs": [],
                          "isNullable": false,
                          "_": 9002,
                          "source": " WebviewPanel"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 9002,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "union": [
                        {
                          "ref": "Thenable",
                          "targs": [
                            {
                              "core": "void",
                              "isNullable": false,
                              "_": 9002,
                              "source": "void"
                            }
                          ],
                          "isNullable": false,
                          "_": 9002,
                          "source": " Thenable<void>"
                        },
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 9002,
                          "source": " void"
                        }
                      ],
                      "isNullable": false,
                      "_": 9002,
                      "source": " Thenable<void> | void"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 9011,
                "name": "CustomDocument",
                "generics": [],
                "doc": "Represents a custom document used by a {@linkcode CustomEditorProvider}.\n\nCustom documents are only used within a given `CustomEditorProvider`. The lifecycle of a `CustomDocument` is\nmanaged by the editor. When no more references remain to a `CustomDocument`, it is disposed of.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The associated uri for this document.",
                    "isMethod": false,
                    "_": 9015,
                    "source": "\n\t\t/**\n\t\t * The associated uri for this document.\n\t\t */\n\t\treadonly uri: Uri;",
                    "name": "uri",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 9015,
                      "source": " Uri"
                    }
                  },
                  {
                    "doc": "Dispose of the custom document.\n\n This is invoked by the editor when there are no more references to a given `CustomDocument` (for example when\n all editors associated with the document have been closed.)",
                    "isMethod": true,
                    "_": 9023,
                    "source": "\n\n\t\t/**\n\t\t * Dispose of the custom document.\n\t\t *\n\t\t * This is invoked by the editor when there are no more references to a given `CustomDocument` (for example when\n\t\t * all editors associated with the document have been closed.)\n\t\t */\n\t\tdispose(): void;",
                    "name": "dispose",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 9023,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 9031,
                "name": "CustomDocumentEditEvent",
                "generics": [
                  {
                    "name": "T",
                    "constraint": {
                      "ref": "CustomDocument",
                      "targs": [],
                      "isNullable": false,
                      "_": 9031,
                      "source": " CustomDocument"
                    },
                    "default": {
                      "ref": "CustomDocument",
                      "targs": [],
                      "isNullable": false,
                      "_": 9031,
                      "source": " CustomDocument"
                    },
                    "_": 9031,
                    "source": "T extends CustomDocument = CustomDocument"
                  }
                ],
                "doc": "Event triggered by extensions to signal to the editor that an edit has occurred on an {@linkcode CustomDocument}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The document that the edit is for.",
                    "isMethod": false,
                    "_": 9036,
                    "source": "\n\n\t\t/**\n\t\t * The document that the edit is for.\n\t\t */\n\t\treadonly document: T;",
                    "name": "document",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "T",
                      "targs": [],
                      "isNullable": false,
                      "_": 9036,
                      "source": " T"
                    }
                  },
                  {
                    "doc": "Undo the edit operation.\n\n This is invoked by the editor when the user undoes this edit. To implement `undo`, your\n extension should restore the document and editor to the state they were in just before this\n edit was added to the editor's internal edit stack by `onDidChangeCustomDocument`.",
                    "isMethod": true,
                    "_": 9045,
                    "source": "\n\n\t\t/**\n\t\t * Undo the edit operation.\n\t\t *\n\t\t * This is invoked by the editor when the user undoes this edit. To implement `undo`, your\n\t\t * extension should restore the document and editor to the state they were in just before this\n\t\t * edit was added to the editor's internal edit stack by `onDidChangeCustomDocument`.\n\t\t */\n\t\tundo(): Thenable<void> | void;",
                    "name": "undo",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "union": [
                        {
                          "ref": "Thenable",
                          "targs": [
                            {
                              "core": "void",
                              "isNullable": false,
                              "_": 9045,
                              "source": "void"
                            }
                          ],
                          "isNullable": false,
                          "_": 9045,
                          "source": " Thenable<void>"
                        },
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 9045,
                          "source": " void"
                        }
                      ],
                      "isNullable": false,
                      "_": 9045,
                      "source": " Thenable<void> | void"
                    }
                  },
                  {
                    "doc": "Redo the edit operation.\n\n This is invoked by the editor when the user redoes this edit. To implement `redo`, your\n extension should restore the document and editor to the state they were in just after this\n edit was added to the editor's internal edit stack by `onDidChangeCustomDocument`.",
                    "isMethod": true,
                    "_": 9054,
                    "source": "\n\n\t\t/**\n\t\t * Redo the edit operation.\n\t\t *\n\t\t * This is invoked by the editor when the user redoes this edit. To implement `redo`, your\n\t\t * extension should restore the document and editor to the state they were in just after this\n\t\t * edit was added to the editor's internal edit stack by `onDidChangeCustomDocument`.\n\t\t */\n\t\tredo(): Thenable<void> | void;",
                    "name": "redo",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "union": [
                        {
                          "ref": "Thenable",
                          "targs": [
                            {
                              "core": "void",
                              "isNullable": false,
                              "_": 9054,
                              "source": "void"
                            }
                          ],
                          "isNullable": false,
                          "_": 9054,
                          "source": " Thenable<void>"
                        },
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 9054,
                          "source": " void"
                        }
                      ],
                      "isNullable": false,
                      "_": 9054,
                      "source": " Thenable<void> | void"
                    }
                  },
                  {
                    "doc": "Display name describing the edit.\n\nThis will be shown to users in the UI for undo/redo operations.",
                    "isMethod": false,
                    "_": 9061,
                    "source": "\n\n\t\t/**\n\t\t * Display name describing the edit.\n\t\t *\n\t\t * This will be shown to users in the UI for undo/redo operations.\n\t\t */\n\t\treadonly label?: string;",
                    "name": "label",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 9061,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 9070,
                "name": "CustomDocumentContentChangeEvent",
                "generics": [
                  {
                    "name": "T",
                    "constraint": {
                      "ref": "CustomDocument",
                      "targs": [],
                      "isNullable": false,
                      "_": 9070,
                      "source": " CustomDocument"
                    },
                    "default": {
                      "ref": "CustomDocument",
                      "targs": [],
                      "isNullable": false,
                      "_": 9070,
                      "source": " CustomDocument"
                    },
                    "_": 9070,
                    "source": "T extends CustomDocument = CustomDocument"
                  }
                ],
                "doc": "Event triggered by extensions to signal to the editor that the content of a {@linkcode CustomDocument}\nhas changed.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The document that the change is for.",
                    "isMethod": false,
                    "_": 9074,
                    "source": "\n\t\t/**\n\t\t * The document that the change is for.\n\t\t */\n\t\treadonly document: T;",
                    "name": "document",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "T",
                      "targs": [],
                      "isNullable": false,
                      "_": 9074,
                      "source": " T"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 9080,
                "name": "CustomDocumentBackup",
                "generics": [],
                "doc": "A backup for an {@linkcode CustomDocument}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Unique identifier for the backup.\n\nThis id is passed back to your extension in `openCustomDocument` when opening a custom editor from a backup.",
                    "isMethod": false,
                    "_": 9086,
                    "source": "\n\t\t/**\n\t\t * Unique identifier for the backup.\n\t\t *\n\t\t * This id is passed back to your extension in `openCustomDocument` when opening a custom editor from a backup.\n\t\t */\n\t\treadonly id: string;",
                    "name": "id",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 9086,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Delete the current backup.\n\n This is called by the editor when it is clear the current backup is no longer needed, such as when a new backup\n is made or when the file is saved.",
                    "isMethod": true,
                    "_": 9094,
                    "source": "\n\n\t\t/**\n\t\t * Delete the current backup.\n\t\t *\n\t\t * This is called by the editor when it is clear the current backup is no longer needed, such as when a new backup\n\t\t * is made or when the file is saved.\n\t\t */\n\t\tdelete(): void;",
                    "name": "delete",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 9094,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 9100,
                "name": "CustomDocumentBackupContext",
                "generics": [],
                "doc": "Additional information used to implement {@linkcode CustomDocumentBackup}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Suggested file location to write the new backup.\n\nNote that your extension is free to ignore this and use its own strategy for backup.\n\nIf the editor is for a resource from the current workspace, `destination` will point to a file inside\n`ExtensionContext.storagePath`. The parent folder of `destination` may not exist, so make sure to created it\nbefore writing the backup to this location.",
                    "isMethod": false,
                    "_": 9110,
                    "source": "\n\t\t/**\n\t\t * Suggested file location to write the new backup.\n\t\t *\n\t\t * Note that your extension is free to ignore this and use its own strategy for backup.\n\t\t *\n\t\t * If the editor is for a resource from the current workspace, `destination` will point to a file inside\n\t\t * `ExtensionContext.storagePath`. The parent folder of `destination` may not exist, so make sure to created it\n\t\t * before writing the backup to this location.\n\t\t */\n\t\treadonly destination: Uri;",
                    "name": "destination",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 9110,
                      "source": " Uri"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 9116,
                "name": "CustomDocumentOpenContext",
                "generics": [],
                "doc": "Additional information about the opening custom document.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The id of the backup to restore the document from or `undefined` if there is no backup.\n\nIf this is provided, your extension should restore the editor from the backup instead of reading the file\nfrom the user's workspace.",
                    "isMethod": false,
                    "_": 9123,
                    "source": "\n\t\t/**\n\t\t * The id of the backup to restore the document from or `undefined` if there is no backup.\n\t\t *\n\t\t * If this is provided, your extension should restore the editor from the backup instead of reading the file\n\t\t * from the user's workspace.\n\t\t */\n\t\treadonly backupId: string | undefined;",
                    "name": "backupId",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 9123,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 9123,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 9123,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "If the URI is an untitled file, this will be populated with the byte data of that file\n\nIf this is provided, your extension should utilize this byte data rather than executing fs APIs on the URI passed in",
                    "isMethod": false,
                    "_": 9130,
                    "source": "\n\n\t\t/**\n\t\t * If the URI is an untitled file, this will be populated with the byte data of that file\n\t\t *\n\t\t * If this is provided, your extension should utilize this byte data rather than executing fs APIs on the URI passed in\n\t\t */\n\t\treadonly untitledDocumentData: Uint8Array | undefined;",
                    "name": "untitledDocumentData",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "Uint8Array",
                          "targs": [],
                          "isNullable": false,
                          "_": 9130,
                          "source": " Uint8Array"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 9130,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 9130,
                      "source": " Uint8Array | undefined"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 9143,
                "name": "CustomReadonlyEditorProvider",
                "generics": [
                  {
                    "name": "T",
                    "constraint": {
                      "ref": "CustomDocument",
                      "targs": [],
                      "isNullable": false,
                      "_": 9143,
                      "source": " CustomDocument"
                    },
                    "default": {
                      "ref": "CustomDocument",
                      "targs": [],
                      "isNullable": false,
                      "_": 9143,
                      "source": " CustomDocument"
                    },
                    "_": 9143,
                    "source": "T extends CustomDocument = CustomDocument"
                  }
                ],
                "doc": "Provider for readonly custom editors that use a custom document model.\n\nCustom editors use {@linkcode CustomDocument} as their document model instead of a {@linkcode TextDocument}.\n\nYou should use this type of custom editor when dealing with binary files or more complex scenarios. For simple\ntext based documents, use {@linkcode CustomTextEditorProvider} instead.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Create a new document for a given resource.\n\n `openCustomDocument` is called when the first time an editor for a given resource is opened. The opened\n document is then passed to `resolveCustomEditor` so that the editor can be shown to the user.\n\n Already opened `CustomDocument` are re-used if the user opened additional editors. When all editors for a\n given resource are closed, the `CustomDocument` is disposed of. Opening an editor at this point will\n trigger another call to `openCustomDocument`.\n\n @param uri Uri of the document to open.\n @param openContext Additional information about the opening custom document.\n @param token A cancellation token that indicates the result is no longer needed.\n\n @return The custom document.",
                    "isMethod": true,
                    "_": 9161,
                    "source": "\n\n\t\t/**\n\t\t * Create a new document for a given resource.\n\t\t *\n\t\t * `openCustomDocument` is called when the first time an editor for a given resource is opened. The opened\n\t\t * document is then passed to `resolveCustomEditor` so that the editor can be shown to the user.\n\t\t *\n\t\t * Already opened `CustomDocument` are re-used if the user opened additional editors. When all editors for a\n\t\t * given resource are closed, the `CustomDocument` is disposed of. Opening an editor at this point will\n\t\t * trigger another call to `openCustomDocument`.\n\t\t *\n\t\t * @param uri Uri of the document to open.\n\t\t * @param openContext Additional information about the opening custom document.\n\t\t * @param token A cancellation token that indicates the result is no longer needed.\n\t\t *\n\t\t * @return The custom document.\n\t\t */\n\t\topenCustomDocument(uri: Uri, openContext: CustomDocumentOpenContext, token: CancellationToken): Thenable<T> | T;",
                    "name": "openCustomDocument",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "uri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 9161,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "openContext",
                        "type": {
                          "ref": "CustomDocumentOpenContext",
                          "targs": [],
                          "isNullable": false,
                          "_": 9161,
                          "source": " CustomDocumentOpenContext"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 9161,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "union": [
                        {
                          "ref": "Thenable",
                          "targs": [
                            {
                              "ref": "T",
                              "targs": [],
                              "isNullable": false,
                              "_": 9161,
                              "source": "T"
                            }
                          ],
                          "isNullable": false,
                          "_": 9161,
                          "source": " Thenable<T>"
                        },
                        {
                          "ref": "T",
                          "targs": [],
                          "isNullable": false,
                          "_": 9161,
                          "source": " T"
                        }
                      ],
                      "isNullable": false,
                      "_": 9161,
                      "source": " Thenable<T> | T"
                    }
                  },
                  {
                    "doc": "Resolve a custom editor for a given resource.\n\n This is called whenever the user opens a new editor for this `CustomEditorProvider`.\n\n @param document Document for the resource being resolved.\n\n @param webviewPanel The webview panel used to display the editor UI for this resource.\n\n During resolve, the provider must fill in the initial html for the content webview panel and hook up all\n the event listeners on it that it is interested in. The provider can also hold onto the `WebviewPanel` to\n use later for example in a command. See {@linkcode WebviewPanel} for additional details.\n\n @param token A cancellation token that indicates the result is no longer needed.\n\n @return Optional thenable indicating that the custom editor has been resolved.",
                    "isMethod": true,
                    "_": 9180,
                    "source": "\n\n\t\t/**\n\t\t * Resolve a custom editor for a given resource.\n\t\t *\n\t\t * This is called whenever the user opens a new editor for this `CustomEditorProvider`.\n\t\t *\n\t\t * @param document Document for the resource being resolved.\n\t\t *\n\t\t * @param webviewPanel The webview panel used to display the editor UI for this resource.\n\t\t *\n\t\t * During resolve, the provider must fill in the initial html for the content webview panel and hook up all\n\t\t * the event listeners on it that it is interested in. The provider can also hold onto the `WebviewPanel` to\n\t\t * use later for example in a command. See {@linkcode WebviewPanel} for additional details.\n\t\t *\n\t\t * @param token A cancellation token that indicates the result is no longer needed.\n\t\t *\n\t\t * @return Optional thenable indicating that the custom editor has been resolved.\n\t\t */\n\t\tresolveCustomEditor(document: T, webviewPanel: WebviewPanel, token: CancellationToken): Thenable<void> | void;",
                    "name": "resolveCustomEditor",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "document",
                        "type": {
                          "ref": "T",
                          "targs": [],
                          "isNullable": false,
                          "_": 9180,
                          "source": " T"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "webviewPanel",
                        "type": {
                          "ref": "WebviewPanel",
                          "targs": [],
                          "isNullable": false,
                          "_": 9180,
                          "source": " WebviewPanel"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 9180,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "union": [
                        {
                          "ref": "Thenable",
                          "targs": [
                            {
                              "core": "void",
                              "isNullable": false,
                              "_": 9180,
                              "source": "void"
                            }
                          ],
                          "isNullable": false,
                          "_": 9180,
                          "source": " Thenable<void>"
                        },
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 9180,
                          "source": " void"
                        }
                      ],
                      "isNullable": false,
                      "_": 9180,
                      "source": " Thenable<void> | void"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 9194,
                "name": "CustomEditorProvider",
                "generics": [
                  {
                    "name": "T",
                    "constraint": {
                      "ref": "CustomDocument",
                      "targs": [],
                      "isNullable": false,
                      "_": 9194,
                      "source": " CustomDocument"
                    },
                    "default": {
                      "ref": "CustomDocument",
                      "targs": [],
                      "isNullable": false,
                      "_": 9194,
                      "source": " CustomDocument"
                    },
                    "_": 9194,
                    "source": "T extends CustomDocument = CustomDocument"
                  }
                ],
                "doc": "Provider for editable custom editors that use a custom document model.\n\nCustom editors use {@linkcode CustomDocument} as their document model instead of a {@linkcode TextDocument}.\nThis gives extensions full control over actions such as edit, save, and backup.\n\nYou should use this type of custom editor when dealing with binary files or more complex scenarios. For simple\ntext based documents, use {@linkcode CustomTextEditorProvider} instead.",
                "heritage": [
                  [
                    {
                      "ref": "CustomReadonlyEditorProvider",
                      "targs": [
                        {
                          "ref": "T",
                          "targs": [],
                          "isNullable": false,
                          "_": 9194,
                          "source": "T"
                        }
                      ],
                      "isNullable": false,
                      "_": 9194,
                      "source": " CustomReadonlyEditorProvider<T>"
                    }
                  ]
                ],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Signal that an edit has occurred inside a custom editor.\n\nThis event must be fired by your extension whenever an edit happens in a custom editor. An edit can be\nanything from changing some text, to cropping an image, to reordering a list. Your extension is free to\ndefine what an edit is and what data is stored on each edit.\n\nFiring `onDidChange` causes the editors to be marked as being dirty. This is cleared when the user either\nsaves or reverts the file.\n\nEditors that support undo/redo must fire a `CustomDocumentEditEvent` whenever an edit happens. This allows\nusers to undo and redo the edit using the editor's standard keyboard shortcuts. The editor will also mark\nthe editor as no longer being dirty if the user undoes all edits to the last saved state.\n\nEditors that support editing but cannot use the editor's standard undo/redo mechanism must fire a `CustomDocumentContentChangeEvent`.\nThe only way for a user to clear the dirty state of an editor that does not support undo/redo is to either\n`save` or `revert` the file.\n\nAn editor should only ever fire `CustomDocumentEditEvent` events, or only ever fire `CustomDocumentContentChangeEvent` events.",
                    "isMethod": false,
                    "_": 9215,
                    "source": "\n\t\t/**\n\t\t * Signal that an edit has occurred inside a custom editor.\n\t\t *\n\t\t * This event must be fired by your extension whenever an edit happens in a custom editor. An edit can be\n\t\t * anything from changing some text, to cropping an image, to reordering a list. Your extension is free to\n\t\t * define what an edit is and what data is stored on each edit.\n\t\t *\n\t\t * Firing `onDidChange` causes the editors to be marked as being dirty. This is cleared when the user either\n\t\t * saves or reverts the file.\n\t\t *\n\t\t * Editors that support undo/redo must fire a `CustomDocumentEditEvent` whenever an edit happens. This allows\n\t\t * users to undo and redo the edit using the editor's standard keyboard shortcuts. The editor will also mark\n\t\t * the editor as no longer being dirty if the user undoes all edits to the last saved state.\n\t\t *\n\t\t * Editors that support editing but cannot use the editor's standard undo/redo mechanism must fire a `CustomDocumentContentChangeEvent`.\n\t\t * The only way for a user to clear the dirty state of an editor that does not support undo/redo is to either\n\t\t * `save` or `revert` the file.\n\t\t *\n\t\t * An editor should only ever fire `CustomDocumentEditEvent` events, or only ever fire `CustomDocumentContentChangeEvent` events.\n\t\t */\n\t\treadonly onDidChangeCustomDocument: Event<CustomDocumentEditEvent<T>> | Event<CustomDocumentContentChangeEvent<T>>;",
                    "name": "onDidChangeCustomDocument",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "Event",
                          "targs": [
                            {
                              "ref": "CustomDocumentEditEvent",
                              "targs": [
                                {
                                  "ref": "T",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 9215,
                                  "source": "T"
                                }
                              ],
                              "isNullable": false,
                              "_": 9215,
                              "source": "CustomDocumentEditEvent<T>"
                            }
                          ],
                          "isNullable": false,
                          "_": 9215,
                          "source": " Event<CustomDocumentEditEvent<T>>"
                        },
                        {
                          "ref": "Event",
                          "targs": [
                            {
                              "ref": "CustomDocumentContentChangeEvent",
                              "targs": [
                                {
                                  "ref": "T",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 9215,
                                  "source": "T"
                                }
                              ],
                              "isNullable": false,
                              "_": 9215,
                              "source": "CustomDocumentContentChangeEvent<T>"
                            }
                          ],
                          "isNullable": false,
                          "_": 9215,
                          "source": " Event<CustomDocumentContentChangeEvent<T>>"
                        }
                      ],
                      "isNullable": false,
                      "_": 9215,
                      "source": " Event<CustomDocumentEditEvent<T>> | Event<CustomDocumentContentChangeEvent<T>>"
                    }
                  },
                  {
                    "doc": "Save a custom document.\n\n This method is invoked by the editor when the user saves a custom editor. This can happen when the user\n triggers save while the custom editor is active, by commands such as `save all`, or by auto save if enabled.\n\n To implement `save`, the implementer must persist the custom editor. This usually means writing the\n file data for the custom document to disk. After `save` completes, any associated editor instances will\n no longer be marked as dirty.\n\n @param document Document to save.\n @param cancellation Token that signals the save is no longer required (for example, if another save was triggered).\n\n @return Thenable signaling that saving has completed.",
                    "isMethod": true,
                    "_": 9232,
                    "source": "\n\n\t\t/**\n\t\t * Save a custom document.\n\t\t *\n\t\t * This method is invoked by the editor when the user saves a custom editor. This can happen when the user\n\t\t * triggers save while the custom editor is active, by commands such as `save all`, or by auto save if enabled.\n\t\t *\n\t\t * To implement `save`, the implementer must persist the custom editor. This usually means writing the\n\t\t * file data for the custom document to disk. After `save` completes, any associated editor instances will\n\t\t * no longer be marked as dirty.\n\t\t *\n\t\t * @param document Document to save.\n\t\t * @param cancellation Token that signals the save is no longer required (for example, if another save was triggered).\n\t\t *\n\t\t * @return Thenable signaling that saving has completed.\n\t\t */\n\t\tsaveCustomDocument(document: T, cancellation: CancellationToken): Thenable<void>;",
                    "name": "saveCustomDocument",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "document",
                        "type": {
                          "ref": "T",
                          "targs": [],
                          "isNullable": false,
                          "_": 9232,
                          "source": " T"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "cancellation",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 9232,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Thenable",
                      "targs": [
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 9232,
                          "source": "void"
                        }
                      ],
                      "isNullable": false,
                      "_": 9232,
                      "source": " Thenable<void>"
                    }
                  },
                  {
                    "doc": "Save a custom document to a different location.\n\n This method is invoked by the editor when the user triggers 'save as' on a custom editor. The implementer must\n persist the custom editor to `destination`.\n\n When the user accepts save as, the current editor is be replaced by an non-dirty editor for the newly saved file.\n\n @param document Document to save.\n @param destination Location to save to.\n @param cancellation Token that signals the save is no longer required.\n\n @return Thenable signaling that saving has completed.",
                    "isMethod": true,
                    "_": 9248,
                    "source": "\n\n\t\t/**\n\t\t * Save a custom document to a different location.\n\t\t *\n\t\t * This method is invoked by the editor when the user triggers 'save as' on a custom editor. The implementer must\n\t\t * persist the custom editor to `destination`.\n\t\t *\n\t\t * When the user accepts save as, the current editor is be replaced by an non-dirty editor for the newly saved file.\n\t\t *\n\t\t * @param document Document to save.\n\t\t * @param destination Location to save to.\n\t\t * @param cancellation Token that signals the save is no longer required.\n\t\t *\n\t\t * @return Thenable signaling that saving has completed.\n\t\t */\n\t\tsaveCustomDocumentAs(document: T, destination: Uri, cancellation: CancellationToken): Thenable<void>;",
                    "name": "saveCustomDocumentAs",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "document",
                        "type": {
                          "ref": "T",
                          "targs": [],
                          "isNullable": false,
                          "_": 9248,
                          "source": " T"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "destination",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 9248,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "cancellation",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 9248,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Thenable",
                      "targs": [
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 9248,
                          "source": "void"
                        }
                      ],
                      "isNullable": false,
                      "_": 9248,
                      "source": " Thenable<void>"
                    }
                  },
                  {
                    "doc": "Revert a custom document to its last saved state.\n\n This method is invoked by the editor when the user triggers `File: Revert File` in a custom editor. (Note that\n this is only used using the editor's `File: Revert File` command and not on a `git revert` of the file).\n\n To implement `revert`, the implementer must make sure all editor instances (webviews) for `document`\n are displaying the document in the same state is saved in. This usually means reloading the file from the\n workspace.\n\n @param document Document to revert.\n @param cancellation Token that signals the revert is no longer required.\n\n @return Thenable signaling that the change has completed.",
                    "isMethod": true,
                    "_": 9265,
                    "source": "\n\n\t\t/**\n\t\t * Revert a custom document to its last saved state.\n\t\t *\n\t\t * This method is invoked by the editor when the user triggers `File: Revert File` in a custom editor. (Note that\n\t\t * this is only used using the editor's `File: Revert File` command and not on a `git revert` of the file).\n\t\t *\n\t\t * To implement `revert`, the implementer must make sure all editor instances (webviews) for `document`\n\t\t * are displaying the document in the same state is saved in. This usually means reloading the file from the\n\t\t * workspace.\n\t\t *\n\t\t * @param document Document to revert.\n\t\t * @param cancellation Token that signals the revert is no longer required.\n\t\t *\n\t\t * @return Thenable signaling that the change has completed.\n\t\t */\n\t\trevertCustomDocument(document: T, cancellation: CancellationToken): Thenable<void>;",
                    "name": "revertCustomDocument",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "document",
                        "type": {
                          "ref": "T",
                          "targs": [],
                          "isNullable": false,
                          "_": 9265,
                          "source": " T"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "cancellation",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 9265,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Thenable",
                      "targs": [
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 9265,
                          "source": "void"
                        }
                      ],
                      "isNullable": false,
                      "_": 9265,
                      "source": " Thenable<void>"
                    }
                  },
                  {
                    "doc": "Back up a dirty custom document.\n\n Backups are used for hot exit and to prevent data loss. Your `backup` method should persist the resource in\n its current state, i.e. with the edits applied. Most commonly this means saving the resource to disk in\n the `ExtensionContext.storagePath`. When the editor reloads and your custom editor is opened for a resource,\n your extension should first check to see if any backups exist for the resource. If there is a backup, your\n extension should load the file contents from there instead of from the resource in the workspace.\n\n `backup` is triggered approximately one second after the user stops editing the document. If the user\n rapidly edits the document, `backup` will not be invoked until the editing stops.\n\n `backup` is not invoked when `auto save` is enabled (since auto save already persists the resource).\n\n @param document Document to backup.\n @param context Information that can be used to backup the document.\n @param cancellation Token that signals the current backup since a new backup is coming in. It is up to your\n extension to decided how to respond to cancellation. If for example your extension is backing up a large file\n in an operation that takes time to complete, your extension may decide to finish the ongoing backup rather\n than cancelling it to ensure that the editor has some valid backup.",
                    "isMethod": true,
                    "_": 9288,
                    "source": "\n\n\t\t/**\n\t\t * Back up a dirty custom document.\n\t\t *\n\t\t * Backups are used for hot exit and to prevent data loss. Your `backup` method should persist the resource in\n\t\t * its current state, i.e. with the edits applied. Most commonly this means saving the resource to disk in\n\t\t * the `ExtensionContext.storagePath`. When the editor reloads and your custom editor is opened for a resource,\n\t\t * your extension should first check to see if any backups exist for the resource. If there is a backup, your\n\t\t * extension should load the file contents from there instead of from the resource in the workspace.\n\t\t *\n\t\t * `backup` is triggered approximately one second after the user stops editing the document. If the user\n\t\t * rapidly edits the document, `backup` will not be invoked until the editing stops.\n\t\t *\n\t\t * `backup` is not invoked when `auto save` is enabled (since auto save already persists the resource).\n\t\t *\n\t\t * @param document Document to backup.\n\t\t * @param context Information that can be used to backup the document.\n\t\t * @param cancellation Token that signals the current backup since a new backup is coming in. It is up to your\n\t\t * extension to decided how to respond to cancellation. If for example your extension is backing up a large file\n\t\t * in an operation that takes time to complete, your extension may decide to finish the ongoing backup rather\n\t\t * than cancelling it to ensure that the editor has some valid backup.\n\t\t */\n\t\tbackupCustomDocument(document: T, context: CustomDocumentBackupContext, cancellation: CancellationToken): Thenable<CustomDocumentBackup>;",
                    "name": "backupCustomDocument",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "document",
                        "type": {
                          "ref": "T",
                          "targs": [],
                          "isNullable": false,
                          "_": 9288,
                          "source": " T"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "context",
                        "type": {
                          "ref": "CustomDocumentBackupContext",
                          "targs": [],
                          "isNullable": false,
                          "_": 9288,
                          "source": " CustomDocumentBackupContext"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "cancellation",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 9288,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Thenable",
                      "targs": [
                        {
                          "ref": "CustomDocumentBackup",
                          "targs": [],
                          "isNullable": false,
                          "_": 9288,
                          "source": "CustomDocumentBackup"
                        }
                      ],
                      "isNullable": false,
                      "_": 9288,
                      "source": " Thenable<CustomDocumentBackup>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 9294,
                "name": "Clipboard",
                "generics": [],
                "doc": "The clipboard provides read and write access to the system's clipboard.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Read the current clipboard contents as text.\n @returns A thenable that resolves to a string.",
                    "isMethod": true,
                    "_": 9300,
                    "source": "\n\n\t\t/**\n\t\t * Read the current clipboard contents as text.\n\t\t * @returns A thenable that resolves to a string.\n\t\t */\n\t\treadText(): Thenable<string>;",
                    "name": "readText",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "ref": "Thenable",
                      "targs": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 9300,
                          "source": "string"
                        }
                      ],
                      "isNullable": false,
                      "_": 9300,
                      "source": " Thenable<string>"
                    }
                  },
                  {
                    "doc": "Writes text into the clipboard.\n @returns A thenable that resolves when writing happened.",
                    "isMethod": true,
                    "_": 9306,
                    "source": "\n\n\t\t/**\n\t\t * Writes text into the clipboard.\n\t\t * @returns A thenable that resolves when writing happened.\n\t\t */\n\t\twriteText(value: string): Thenable<void>;",
                    "name": "writeText",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "value",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 9306,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Thenable",
                      "targs": [
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 9306,
                          "source": "void"
                        }
                      ],
                      "isNullable": false,
                      "_": 9306,
                      "source": " Thenable<void>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 9644,
                "name": "WindowState",
                "generics": [],
                "doc": "Represents the state of a window.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Whether the current window is focused.",
                    "isMethod": false,
                    "_": 9649,
                    "source": "\n\n\t\t/**\n\t\t * Whether the current window is focused.\n\t\t */\n\t\treadonly focused: boolean;",
                    "name": "focused",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 9649,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 9657,
                "name": "UriHandler",
                "generics": [],
                "doc": "A uri handler is responsible for handling system-wide {@link Uriuris}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Handle the provided system-wide {@link Uri}.\n\n @see {@link window.registerUriHandler}.",
                    "isMethod": true,
                    "_": 9664,
                    "source": "\n\n\t\t/**\n\t\t * Handle the provided system-wide {@link Uri}.\n\t\t *\n\t\t * @see {@link window.registerUriHandler}.\n\t\t */\n\t\thandleUri(uri: Uri): ProviderResult<void>;",
                    "name": "handleUri",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "uri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 9664,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 9664,
                          "source": "void"
                        }
                      ],
                      "isNullable": false,
                      "_": 9664,
                      "source": " ProviderResult<void>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 10408,
                "name": "TreeViewOptions",
                "generics": [
                  {
                    "name": "T",
                    "_": 10408,
                    "source": "T"
                  }
                ],
                "doc": "Options for creating a {@link TreeView}",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "A data provider that provides tree data.",
                    "isMethod": false,
                    "_": 10413,
                    "source": "\n\n\t\t/**\n\t\t * A data provider that provides tree data.\n\t\t */\n\t\ttreeDataProvider: TreeDataProvider<T>;",
                    "name": "treeDataProvider",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "TreeDataProvider",
                      "targs": [
                        {
                          "ref": "T",
                          "targs": [],
                          "isNullable": false,
                          "_": 10413,
                          "source": "T"
                        }
                      ],
                      "isNullable": false,
                      "_": 10413,
                      "source": " TreeDataProvider<T>"
                    }
                  },
                  {
                    "doc": "Whether to show collapse all action or not.",
                    "isMethod": false,
                    "_": 10418,
                    "source": "\n\n\t\t/**\n\t\t * Whether to show collapse all action or not.\n\t\t */\n\t\tshowCollapseAll?: boolean;",
                    "name": "showCollapseAll",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 10418,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Whether the tree supports multi-select. When the tree supports multi-select and a command is executed from the tree,\n the first argument to the command is the tree item that the command was executed on and the second argument is an\n array containing all selected tree items.",
                    "isMethod": false,
                    "_": 10425,
                    "source": "\n\n\t\t/**\n\t\t * Whether the tree supports multi-select. When the tree supports multi-select and a command is executed from the tree,\n\t\t * the first argument to the command is the tree item that the command was executed on and the second argument is an\n\t\t * array containing all selected tree items.\n\t\t */\n\t\tcanSelectMany?: boolean;",
                    "name": "canSelectMany",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 10425,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "An optional interface to implement drag and drop in the tree view.",
                    "isMethod": false,
                    "_": 10430,
                    "source": "\n\n\t\t/**\n\t\t* An optional interface to implement drag and drop in the tree view.\n\t\t*/\n\t\tdragAndDropController?: TreeDragAndDropController<T>;",
                    "name": "dragAndDropController",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "TreeDragAndDropController",
                      "targs": [
                        {
                          "ref": "T",
                          "targs": [],
                          "isNullable": false,
                          "_": 10430,
                          "source": "T"
                        }
                      ],
                      "isNullable": false,
                      "_": 10430,
                      "source": " TreeDragAndDropController<T>"
                    }
                  },
                  {
                    "doc": "By default, when the children of a tree item have already been fetched, child checkboxes are automatically managed based on the checked state of the parent tree item.\n If the tree item is collapsed by default (meaning that the children haven't yet been fetched) then child checkboxes will not be updated.\n To override this behavior and manage child and parent checkbox state in the extension, set this to `true`.\n\n Examples where {@link TreeViewOptions.manageCheckboxStateManually} is false, the default behavior:\n\n 1. A tree item is checked, then its children are fetched. The children will be checked.\n\n 2. A tree item's parent is checked. The tree item and all of it's siblings will be checked.\n   - [ ] Parent\n     - [ ] Child 1\n     - [ ] Child 2\n   When the user checks Parent, the tree will look like this:\n   - [x] Parent\n     - [x] Child 1\n     - [x] Child 2\n\n 3. A tree item and all of it's siblings are checked. The parent will be checked.\n   - [ ] Parent\n     - [ ] Child 1\n     - [ ] Child 2\n   When the user checks Child 1 and Child 2, the tree will look like this:\n   - [x] Parent\n     - [x] Child 1\n     - [x] Child 2\n\n 4. A tree item is unchecked. The parent will be unchecked.\n   - [x] Parent\n     - [x] Child 1\n     - [x] Child 2\n   When the user unchecks Child 1, the tree will look like this:\n   - [ ] Parent\n     - [ ] Child 1\n     - [x] Child 2",
                    "isMethod": false,
                    "_": 10468,
                    "source": "\n\n\t\t/**\n\t\t * By default, when the children of a tree item have already been fetched, child checkboxes are automatically managed based on the checked state of the parent tree item.\n\t\t * If the tree item is collapsed by default (meaning that the children haven't yet been fetched) then child checkboxes will not be updated.\n\t\t * To override this behavior and manage child and parent checkbox state in the extension, set this to `true`.\n\t\t *\n\t\t * Examples where {@link TreeViewOptions.manageCheckboxStateManually} is false, the default behavior:\n\t\t *\n\t\t * 1. A tree item is checked, then its children are fetched. The children will be checked.\n\t\t *\n\t\t * 2. A tree item's parent is checked. The tree item and all of it's siblings will be checked.\n\t\t *   - [ ] Parent\n\t\t *     - [ ] Child 1\n\t\t *     - [ ] Child 2\n\t\t *   When the user checks Parent, the tree will look like this:\n\t\t *   - [x] Parent\n\t\t *     - [x] Child 1\n\t\t *     - [x] Child 2\n\t\t *\n\t\t * 3. A tree item and all of it's siblings are checked. The parent will be checked.\n\t\t *   - [ ] Parent\n\t\t *     - [ ] Child 1\n\t\t *     - [ ] Child 2\n\t\t *   When the user checks Child 1 and Child 2, the tree will look like this:\n\t\t *   - [x] Parent\n\t\t *     - [x] Child 1\n\t\t *     - [x] Child 2\n\t\t *\n\t\t * 4. A tree item is unchecked. The parent will be unchecked.\n\t\t *   - [x] Parent\n\t\t *     - [x] Child 1\n\t\t *     - [x] Child 2\n\t\t *   When the user unchecks Child 1, the tree will look like this:\n\t\t *   - [ ] Parent\n\t\t *     - [ ] Child 1\n\t\t *     - [x] Child 2\n\t\t */\n\t\tmanageCheckboxStateManually?: boolean;",
                    "name": "manageCheckboxStateManually",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 10468,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 10474,
                "name": "TreeViewExpansionEvent",
                "generics": [
                  {
                    "name": "T",
                    "_": 10474,
                    "source": "T"
                  }
                ],
                "doc": "The event that is fired when an element in the {@link TreeView} is expanded or collapsed",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Element that is expanded or collapsed.",
                    "isMethod": false,
                    "_": 10479,
                    "source": "\n\n\t\t/**\n\t\t * Element that is expanded or collapsed.\n\t\t */\n\t\treadonly element: T;",
                    "name": "element",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "T",
                      "targs": [],
                      "isNullable": false,
                      "_": 10479,
                      "source": " T"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 10486,
                "name": "TreeViewSelectionChangeEvent",
                "generics": [
                  {
                    "name": "T",
                    "_": 10486,
                    "source": "T"
                  }
                ],
                "doc": "The event that is fired when there is a change in {@link TreeView.selectiontree view's selection}",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Selected elements.",
                    "isMethod": false,
                    "_": 10491,
                    "source": "\n\n\t\t/**\n\t\t * Selected elements.\n\t\t */\n\t\treadonly selection: readonly T[];",
                    "name": "selection",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "T",
                            "targs": [],
                            "isNullable": false,
                            "_": 10491,
                            "source": " T"
                          }
                        ],
                        "isNullable": false,
                        "_": 10491,
                        "source": " T[]"
                      },
                      "isNullable": false,
                      "_": 10491,
                      "source": " readonly T[]"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 10498,
                "name": "TreeViewVisibilityChangeEvent",
                "generics": [],
                "doc": "The event that is fired when there is a change in {@link TreeView.visibletree view's visibility}",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "`true` if the {@link TreeViewtree view} is visible otherwise `false`.",
                    "isMethod": false,
                    "_": 10503,
                    "source": "\n\n\t\t/**\n\t\t * `true` if the {@link TreeView tree view} is visible otherwise `false`.\n\t\t */\n\t\treadonly visible: boolean;",
                    "name": "visible",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 10503,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 10511,
                "name": "DataTransferFile",
                "generics": [],
                "doc": "A file associated with a {@linkcode DataTransferItem}.\n\nInstances of this type can only be created by the editor and not by extensions.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The name of the file.",
                    "isMethod": false,
                    "_": 10515,
                    "source": "\n\t\t/**\n\t\t * The name of the file.\n\t\t */\n\t\treadonly name: string;",
                    "name": "name",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 10515,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The full file path of the file.\n\nMay be `undefined` on web.",
                    "isMethod": false,
                    "_": 10522,
                    "source": "\n\n\t\t/**\n\t\t * The full file path of the file.\n\t\t *\n\t\t * May be `undefined` on web.\n\t\t */\n\t\treadonly uri?: Uri;",
                    "name": "uri",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 10522,
                      "source": " Uri"
                    }
                  },
                  {
                    "doc": "The full file contents of the file.",
                    "isMethod": true,
                    "_": 10527,
                    "source": "\n\n\t\t/**\n\t\t * The full file contents of the file.\n\t\t */\n\t\tdata(): Thenable<Uint8Array>;",
                    "name": "data",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "ref": "Thenable",
                      "targs": [
                        {
                          "ref": "Uint8Array",
                          "targs": [],
                          "isNullable": false,
                          "_": 10527,
                          "source": "Uint8Array"
                        }
                      ],
                      "isNullable": false,
                      "_": 10527,
                      "source": " Thenable<Uint8Array>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 10533,
                "name": "DataTransferItem",
                "generics": [],
                "doc": "Encapsulates data transferred during drag and drop operations.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 10562,
                    "source": "\n\n\t\t/**\n\t\t * @param value Custom data stored on this item. Can be retrieved using {@linkcode DataTransferItem.value}.\n\t\t */\n\t\tconstructor(value: any);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "value",
                        "type": {
                          "core": "any",
                          "isNullable": false,
                          "_": 10562,
                          "source": " any"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "Get a string representation of this item.\n\n If {@linkcode DataTransferItem.value} is an object, this returns the result of json stringifying {@linkcode DataTransferItem.value} value.",
                    "isMethod": true,
                    "_": 10539,
                    "source": "\n\t\t/**\n\t\t * Get a string representation of this item.\n\t\t *\n\t\t * If {@linkcode DataTransferItem.value} is an object, this returns the result of json stringifying {@linkcode DataTransferItem.value} value.\n\t\t */\n\t\tasString(): Thenable<string>;",
                    "name": "asString",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "ref": "Thenable",
                      "targs": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 10539,
                          "source": "string"
                        }
                      ],
                      "isNullable": false,
                      "_": 10539,
                      "source": " Thenable<string>"
                    }
                  },
                  {
                    "doc": "Try getting the {@link DataTransferFile file} associated with this data transfer item.\n\n Note that the file object is only valid for the scope of the drag and drop operation.\n\n @returns The file for the data transfer or `undefined` if the item is either not a file or the\n file data cannot be accessed.",
                    "isMethod": true,
                    "_": 10549,
                    "source": "\n\n\t\t/**\n\t\t * Try getting the {@link DataTransferFile file} associated with this data transfer item.\n\t\t *\n\t\t * Note that the file object is only valid for the scope of the drag and drop operation.\n\t\t *\n\t\t * @returns The file for the data transfer or `undefined` if the item is either not a file or the\n\t\t * file data cannot be accessed.\n\t\t */\n\t\tasFile(): DataTransferFile | undefined;",
                    "name": "asFile",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "union": [
                        {
                          "ref": "DataTransferFile",
                          "targs": [],
                          "isNullable": false,
                          "_": 10549,
                          "source": " DataTransferFile"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 10549,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 10549,
                      "source": " DataTransferFile | undefined"
                    }
                  },
                  {
                    "doc": "Custom data stored on this item.\n\nYou can use `value` to share data across operations. The original object can be retrieved so long as the extension that\ncreated the `DataTransferItem` runs in the same extension host.",
                    "isMethod": false,
                    "_": 10557,
                    "source": "\n\n\t\t/**\n\t\t * Custom data stored on this item.\n\t\t *\n\t\t * You can use `value` to share data across operations. The original object can be retrieved so long as the extension that\n\t\t * created the `DataTransferItem` runs in the same extension host.\n\t\t */\n\t\treadonly value: any;",
                    "name": "value",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "any",
                      "isNullable": false,
                      "_": 10557,
                      "source": " any"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 10572,
                "name": "DataTransfer",
                "generics": [],
                "doc": "A map containing a mapping of the mime type of the corresponding transferred data.\n\nDrag and drop controllers that implement {@link TreeDragAndDropController.handleDrag`handleDrag`} can add additional mime types to the\ndata transfer. These additional mime types will only be included in the `handleDrop` when the the drag was initiated from\nan element in the same drag and drop controller.",
                "heritage": [
                  [
                    {
                      "ref": "Iterable",
                      "targs": [
                        {
                          "tuple": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 10572,
                              "source": "mimeType: string"
                            },
                            {
                              "ref": "DataTransferItem",
                              "targs": [],
                              "isNullable": false,
                              "_": 10572,
                              "source": " item: DataTransferItem"
                            }
                          ],
                          "isNullable": false,
                          "_": 10572,
                          "source": "[mimeType: string, item: DataTransferItem]"
                        }
                      ],
                      "isNullable": false,
                      "_": 10572,
                      "source": " Iterable<[mimeType: string, item: DataTransferItem]>"
                    }
                  ]
                ],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Retrieves the data transfer item for a given mime type.\n\n @param mimeType The mime type to get the data transfer item for, such as `text/plain` or `image/png`.\n Mimes type look ups are case-insensitive.\n\n Special mime types:\n - `text/uri-list` — A string with `toString()`ed Uris separated by `\\r\\n`. To specify a cursor position in the file,\n set the Uri's fragment to `L3,5`, where 3 is the line number and 5 is the column number.",
                    "isMethod": true,
                    "_": 10583,
                    "source": "\n\t\t/**\n\t\t * Retrieves the data transfer item for a given mime type.\n\t\t *\n\t\t * @param mimeType The mime type to get the data transfer item for, such as `text/plain` or `image/png`.\n\t\t * Mimes type look ups are case-insensitive.\n\t\t *\n\t\t * Special mime types:\n\t\t * - `text/uri-list` — A string with `toString()`ed Uris separated by `\\r\\n`. To specify a cursor position in the file,\n\t\t * set the Uri's fragment to `L3,5`, where 3 is the line number and 5 is the column number.\n\t\t */\n\t\tget(mimeType: string): DataTransferItem | undefined;",
                    "name": "get",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "mimeType",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 10583,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "union": [
                        {
                          "ref": "DataTransferItem",
                          "targs": [],
                          "isNullable": false,
                          "_": 10583,
                          "source": " DataTransferItem"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 10583,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 10583,
                      "source": " DataTransferItem | undefined"
                    }
                  },
                  {
                    "doc": "Sets a mime type to data transfer item mapping.\n\n @param mimeType The mime type to set the data for. Mimes types stored in lower case, with case-insensitive looks up.\n @param value The data transfer item for the given mime type.",
                    "isMethod": true,
                    "_": 10591,
                    "source": "\n\n\t\t/**\n\t\t * Sets a mime type to data transfer item mapping.\n\t\t *\n\t\t * @param mimeType The mime type to set the data for. Mimes types stored in lower case, with case-insensitive looks up.\n\t\t * @param value The data transfer item for the given mime type.\n\t\t */\n\t\tset(mimeType: string, value: DataTransferItem): void;",
                    "name": "set",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "mimeType",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 10591,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "value",
                        "type": {
                          "ref": "DataTransferItem",
                          "targs": [],
                          "isNullable": false,
                          "_": 10591,
                          "source": " DataTransferItem"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 10591,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Allows iteration through the data transfer items.\n\n @param callbackfn Callback for iteration through the data transfer items.\n @param thisArg The `this` context used when invoking the handler function.",
                    "isMethod": true,
                    "_": 10599,
                    "source": "\n\n\t\t/**\n\t\t * Allows iteration through the data transfer items.\n\t\t *\n\t\t * @param callbackfn Callback for iteration through the data transfer items.\n\t\t * @param thisArg The `this` context used when invoking the handler function.\n\t\t */\n\t\tforEach(callbackfn: (item: DataTransferItem, mimeType: string, dataTransfer: DataTransfer) => void, thisArg?: any): void;",
                    "name": "forEach",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "callbackfn",
                        "type": {
                          "ctor": false,
                          "generics": [],
                          "returns": {
                            "core": "void",
                            "isNullable": false,
                            "_": 10599,
                            "source": " void"
                          },
                          "params": [
                            {
                              "name": "item",
                              "type": {
                                "ref": "DataTransferItem",
                                "targs": [],
                                "isNullable": false,
                                "_": 10599,
                                "source": " DataTransferItem"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "mimeType",
                              "type": {
                                "core": "string",
                                "isNullable": false,
                                "_": 10599,
                                "source": " string"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "dataTransfer",
                              "type": {
                                "ref": "DataTransfer",
                                "targs": [],
                                "isNullable": false,
                                "_": 10599,
                                "source": " DataTransfer"
                              },
                              "varargs": false,
                              "isNullable": false
                            }
                          ],
                          "isNullable": false,
                          "_": 10599,
                          "source": " (item: DataTransferItem, mimeType: string, dataTransfer: DataTransfer) => void"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "thisArg",
                        "type": {
                          "core": "any",
                          "isNullable": false,
                          "_": 10599,
                          "source": " any"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 10599,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Get a new iterator with the `[mime, item]` pairs for each element in this data transfer.",
                    "isMethod": true,
                    "_": 10604,
                    "source": "\n\n\t\t/**\n\t\t * Get a new iterator with the `[mime, item]` pairs for each element in this data transfer.\n\t\t */\n\t\t[Symbol.iterator](): IterableIterator<[mimeType: string, item: DataTransferItem]>;",
                    "name": "[Symbol.iterator]",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "ref": "IterableIterator",
                      "targs": [
                        {
                          "tuple": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 10604,
                              "source": "mimeType: string"
                            },
                            {
                              "ref": "DataTransferItem",
                              "targs": [],
                              "isNullable": false,
                              "_": 10604,
                              "source": " item: DataTransferItem"
                            }
                          ],
                          "isNullable": false,
                          "_": 10604,
                          "source": "[mimeType: string, item: DataTransferItem]"
                        }
                      ],
                      "isNullable": false,
                      "_": 10604,
                      "source": " IterableIterator<[mimeType: string, item: DataTransferItem]>"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 10610,
                "name": "TreeDragAndDropController",
                "generics": [
                  {
                    "name": "T",
                    "_": 10610,
                    "source": "T"
                  }
                ],
                "doc": "Provides support for drag and drop in `TreeView`.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The mime types that the {@link TreeDragAndDropController.handleDrop`handleDrop`} method of this `DragAndDropController` supports.\nThis could be well-defined, existing, mime types, and also mime types defined by the extension.\n\nTo support drops from trees, you will need to add the mime type of that tree.\nThis includes drops from within the same tree.\nThe mime type of a tree is recommended to be of the format `application/vnd.code.tree.<treeidlowercase>`.\n\nUse the special `files` mime type to support all types of dropped files {@link DataTransferFilefiles}, regardless of the file's actual mime type.\n\nTo learn the mime type of a dragged item:\n1. Set up your `DragAndDropController`\n2. Use the Developer: Set Log Level... command to set the level to \"Debug\"\n3. Open the developer tools and drag the item with unknown mime type over your tree. The mime types will be logged to the developer console\n\nNote that mime types that cannot be sent to the extension will be omitted.",
                    "isMethod": false,
                    "_": 10629,
                    "source": "\n\n\t\t/**\n\t\t * The mime types that the {@link TreeDragAndDropController.handleDrop `handleDrop`} method of this `DragAndDropController` supports.\n\t\t * This could be well-defined, existing, mime types, and also mime types defined by the extension.\n\t\t *\n\t\t * To support drops from trees, you will need to add the mime type of that tree.\n\t\t * This includes drops from within the same tree.\n\t\t * The mime type of a tree is recommended to be of the format `application/vnd.code.tree.<treeidlowercase>`.\n\t\t *\n\t\t * Use the special `files` mime type to support all types of dropped files {@link DataTransferFile files}, regardless of the file's actual mime type.\n\t\t *\n\t\t * To learn the mime type of a dragged item:\n\t\t * 1. Set up your `DragAndDropController`\n\t\t * 2. Use the Developer: Set Log Level... command to set the level to \"Debug\"\n\t\t * 3. Open the developer tools and drag the item with unknown mime type over your tree. The mime types will be logged to the developer console\n\t\t *\n\t\t * Note that mime types that cannot be sent to the extension will be omitted.\n\t\t */\n\t\treadonly dropMimeTypes: readonly string[];",
                    "name": "dropMimeTypes",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "core": "string",
                            "isNullable": false,
                            "_": 10629,
                            "source": " string"
                          }
                        ],
                        "isNullable": false,
                        "_": 10629,
                        "source": " string[]"
                      },
                      "isNullable": false,
                      "_": 10629,
                      "source": " readonly string[]"
                    }
                  },
                  {
                    "doc": "The mime types that the {@link TreeDragAndDropController.handleDrag`handleDrag`} method of this `TreeDragAndDropController` may add to the tree data transfer.\nThis could be well-defined, existing, mime types, and also mime types defined by the extension.\n\nThe recommended mime type of the tree (`application/vnd.code.tree.<treeidlowercase>`) will be automatically added.",
                    "isMethod": false,
                    "_": 10637,
                    "source": "\n\n\t\t/**\n\t\t * The mime types that the {@link TreeDragAndDropController.handleDrag `handleDrag`} method of this `TreeDragAndDropController` may add to the tree data transfer.\n\t\t * This could be well-defined, existing, mime types, and also mime types defined by the extension.\n\t\t *\n\t\t * The recommended mime type of the tree (`application/vnd.code.tree.<treeidlowercase>`) will be automatically added.\n\t\t */\n\t\treadonly dragMimeTypes: readonly string[];",
                    "name": "dragMimeTypes",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "core": "string",
                            "isNullable": false,
                            "_": 10637,
                            "source": " string"
                          }
                        ],
                        "isNullable": false,
                        "_": 10637,
                        "source": " string[]"
                      },
                      "isNullable": false,
                      "_": 10637,
                      "source": " readonly string[]"
                    }
                  },
                  {
                    "doc": "When the user starts dragging items from this `DragAndDropController`, `handleDrag` will be called.\n Extensions can use `handleDrag` to add their {@link DataTransferItem `DataTransferItem`} items to the drag and drop.\n\n When the items are dropped on **another tree item** in **the same tree**, your `DataTransferItem` objects\n will be preserved. Use the recommended mime type for the tree (`application/vnd.code.tree.<treeidlowercase>`) to add\n tree objects in a data transfer. See the documentation for `DataTransferItem` for how best to take advantage of this.\n\n To add a data transfer item that can be dragged into the editor, use the application specific mime type \"text/uri-list\".\n The data for \"text/uri-list\" should be a string with `toString()`ed Uris separated by newlines. To specify a cursor position in the file,\n set the Uri's fragment to `L3,5`, where 3 is the line number and 5 is the column number.\n\n @param source The source items for the drag and drop operation.\n @param dataTransfer The data transfer associated with this drag.\n @param token A cancellation token indicating that drag has been cancelled.",
                    "isMethod": true,
                    "_": 10655,
                    "source": "\n\n\t\t/**\n\t\t * When the user starts dragging items from this `DragAndDropController`, `handleDrag` will be called.\n\t\t * Extensions can use `handleDrag` to add their {@link DataTransferItem `DataTransferItem`} items to the drag and drop.\n\t\t *\n\t\t * When the items are dropped on **another tree item** in **the same tree**, your `DataTransferItem` objects\n\t\t * will be preserved. Use the recommended mime type for the tree (`application/vnd.code.tree.<treeidlowercase>`) to add\n\t\t * tree objects in a data transfer. See the documentation for `DataTransferItem` for how best to take advantage of this.\n\t\t *\n\t\t * To add a data transfer item that can be dragged into the editor, use the application specific mime type \"text/uri-list\".\n\t\t * The data for \"text/uri-list\" should be a string with `toString()`ed Uris separated by newlines. To specify a cursor position in the file,\n\t\t * set the Uri's fragment to `L3,5`, where 3 is the line number and 5 is the column number.\n\t\t *\n\t\t * @param source The source items for the drag and drop operation.\n\t\t * @param dataTransfer The data transfer associated with this drag.\n\t\t * @param token A cancellation token indicating that drag has been cancelled.\n\t\t */\n\t\thandleDrag?(source: readonly T[], dataTransfer: DataTransfer, token: CancellationToken): Thenable<void> | void;",
                    "name": "handleDrag",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "source",
                        "type": {
                          "operator": 146,
                          "type": {
                            "core": "array",
                            "targs": [
                              {
                                "ref": "T",
                                "targs": [],
                                "isNullable": false,
                                "_": 10655,
                                "source": " T"
                              }
                            ],
                            "isNullable": false,
                            "_": 10655,
                            "source": " T[]"
                          },
                          "isNullable": false,
                          "_": 10655,
                          "source": " readonly T[]"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "dataTransfer",
                        "type": {
                          "ref": "DataTransfer",
                          "targs": [],
                          "isNullable": false,
                          "_": 10655,
                          "source": " DataTransfer"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 10655,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "union": [
                        {
                          "ref": "Thenable",
                          "targs": [
                            {
                              "core": "void",
                              "isNullable": false,
                              "_": 10655,
                              "source": "void"
                            }
                          ],
                          "isNullable": false,
                          "_": 10655,
                          "source": " Thenable<void>"
                        },
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 10655,
                          "source": " void"
                        }
                      ],
                      "isNullable": false,
                      "_": 10655,
                      "source": " Thenable<void> | void"
                    }
                  },
                  {
                    "doc": "Called when a drag and drop action results in a drop on the tree that this `DragAndDropController` belongs to.\n\n Extensions should fire {@link TreeDataProvider.onDidChangeTreeData onDidChangeTreeData} for any elements that need to be refreshed.\n\n @param dataTransfer The data transfer items of the source of the drag.\n @param target The target tree element that the drop is occurring on. When undefined, the target is the root.\n @param token A cancellation token indicating that the drop has been cancelled.",
                    "isMethod": true,
                    "_": 10666,
                    "source": "\n\n\t\t/**\n\t\t * Called when a drag and drop action results in a drop on the tree that this `DragAndDropController` belongs to.\n\t\t *\n\t\t * Extensions should fire {@link TreeDataProvider.onDidChangeTreeData onDidChangeTreeData} for any elements that need to be refreshed.\n\t\t *\n\t\t * @param dataTransfer The data transfer items of the source of the drag.\n\t\t * @param target The target tree element that the drop is occurring on. When undefined, the target is the root.\n\t\t * @param token A cancellation token indicating that the drop has been cancelled.\n\t\t */\n\t\thandleDrop?(target: T | undefined, dataTransfer: DataTransfer, token: CancellationToken): Thenable<void> | void;",
                    "name": "handleDrop",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "target",
                        "type": {
                          "union": [
                            {
                              "ref": "T",
                              "targs": [],
                              "isNullable": false,
                              "_": 10666,
                              "source": " T"
                            },
                            {
                              "core": "undefined",
                              "isNullable": false,
                              "_": 10666,
                              "source": " undefined"
                            }
                          ],
                          "isNullable": false,
                          "_": 10666,
                          "source": " T | undefined"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "dataTransfer",
                        "type": {
                          "ref": "DataTransfer",
                          "targs": [],
                          "isNullable": false,
                          "_": 10666,
                          "source": " DataTransfer"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 10666,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "union": [
                        {
                          "ref": "Thenable",
                          "targs": [
                            {
                              "core": "void",
                              "isNullable": false,
                              "_": 10666,
                              "source": "void"
                            }
                          ],
                          "isNullable": false,
                          "_": 10666,
                          "source": " Thenable<void>"
                        },
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 10666,
                          "source": " void"
                        }
                      ],
                      "isNullable": false,
                      "_": 10666,
                      "source": " Thenable<void> | void"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 10672,
                "name": "ViewBadge",
                "generics": [],
                "doc": "A badge presenting a value for a view",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "A label to present in tooltip for the badge.",
                    "isMethod": false,
                    "_": 10677,
                    "source": "\n\n\t\t/**\n\t\t * A label to present in tooltip for the badge.\n\t\t */\n\t\treadonly tooltip: string;",
                    "name": "tooltip",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 10677,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The value to present in the badge.",
                    "isMethod": false,
                    "_": 10682,
                    "source": "\n\n\t\t/**\n\t\t * The value to present in the badge.\n\t\t */\n\t\treadonly value: number;",
                    "name": "value",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 10682,
                      "source": " number"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 10688,
                "name": "TreeCheckboxChangeEvent",
                "generics": [
                  {
                    "name": "T",
                    "_": 10688,
                    "source": "T"
                  }
                ],
                "doc": "An event describing the change in a tree item's checkbox state.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The items that were checked or unchecked.",
                    "isMethod": false,
                    "_": 10692,
                    "source": "\n\t\t/**\n\t\t* The items that were checked or unchecked.\n\t\t*/\n\t\treadonly items: ReadonlyArray<[T, TreeItemCheckboxState]>;",
                    "name": "items",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "ReadonlyArray",
                      "targs": [
                        {
                          "tuple": [
                            {
                              "ref": "T",
                              "targs": [],
                              "isNullable": false,
                              "_": 10692,
                              "source": "T"
                            },
                            {
                              "ref": "TreeItemCheckboxState",
                              "targs": [],
                              "isNullable": false,
                              "_": 10692,
                              "source": " TreeItemCheckboxState"
                            }
                          ],
                          "isNullable": false,
                          "_": 10692,
                          "source": "[T, TreeItemCheckboxState]"
                        }
                      ],
                      "isNullable": false,
                      "_": 10692,
                      "source": " ReadonlyArray<[T, TreeItemCheckboxState]>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline54",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "TreeView",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 10771,
                    "source": " select?: boolean;",
                    "name": "select",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 10771,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 10771,
                    "source": " focus?: boolean;",
                    "name": "focus",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 10771,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 10771,
                    "source": " expand?: boolean | number",
                    "name": "expand",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 10771,
                          "source": " boolean"
                        },
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 10771,
                          "source": " number"
                        }
                      ],
                      "isNullable": false,
                      "_": 10771,
                      "source": " boolean | number"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 10698,
                "name": "TreeView",
                "generics": [
                  {
                    "name": "T",
                    "_": 10698,
                    "source": "T"
                  }
                ],
                "doc": "Represents a Tree view",
                "heritage": [
                  [
                    {
                      "ref": "Disposable",
                      "targs": [],
                      "isNullable": false,
                      "_": 10698,
                      "source": " Disposable"
                    }
                  ]
                ],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Event that is fired when an element is expanded",
                    "isMethod": false,
                    "_": 10703,
                    "source": "\n\n\t\t/**\n\t\t * Event that is fired when an element is expanded\n\t\t */\n\t\treadonly onDidExpandElement: Event<TreeViewExpansionEvent<T>>;",
                    "name": "onDidExpandElement",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "ref": "TreeViewExpansionEvent",
                          "targs": [
                            {
                              "ref": "T",
                              "targs": [],
                              "isNullable": false,
                              "_": 10703,
                              "source": "T"
                            }
                          ],
                          "isNullable": false,
                          "_": 10703,
                          "source": "TreeViewExpansionEvent<T>"
                        }
                      ],
                      "isNullable": false,
                      "_": 10703,
                      "source": " Event<TreeViewExpansionEvent<T>>"
                    }
                  },
                  {
                    "doc": "Event that is fired when an element is collapsed",
                    "isMethod": false,
                    "_": 10708,
                    "source": "\n\n\t\t/**\n\t\t * Event that is fired when an element is collapsed\n\t\t */\n\t\treadonly onDidCollapseElement: Event<TreeViewExpansionEvent<T>>;",
                    "name": "onDidCollapseElement",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "ref": "TreeViewExpansionEvent",
                          "targs": [
                            {
                              "ref": "T",
                              "targs": [],
                              "isNullable": false,
                              "_": 10708,
                              "source": "T"
                            }
                          ],
                          "isNullable": false,
                          "_": 10708,
                          "source": "TreeViewExpansionEvent<T>"
                        }
                      ],
                      "isNullable": false,
                      "_": 10708,
                      "source": " Event<TreeViewExpansionEvent<T>>"
                    }
                  },
                  {
                    "doc": "Currently selected elements.",
                    "isMethod": false,
                    "_": 10713,
                    "source": "\n\n\t\t/**\n\t\t * Currently selected elements.\n\t\t */\n\t\treadonly selection: readonly T[];",
                    "name": "selection",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "T",
                            "targs": [],
                            "isNullable": false,
                            "_": 10713,
                            "source": " T"
                          }
                        ],
                        "isNullable": false,
                        "_": 10713,
                        "source": " T[]"
                      },
                      "isNullable": false,
                      "_": 10713,
                      "source": " readonly T[]"
                    }
                  },
                  {
                    "doc": "Event that is fired when the {@link TreeView.selectionselection} has changed",
                    "isMethod": false,
                    "_": 10718,
                    "source": "\n\n\t\t/**\n\t\t * Event that is fired when the {@link TreeView.selection selection} has changed\n\t\t */\n\t\treadonly onDidChangeSelection: Event<TreeViewSelectionChangeEvent<T>>;",
                    "name": "onDidChangeSelection",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "ref": "TreeViewSelectionChangeEvent",
                          "targs": [
                            {
                              "ref": "T",
                              "targs": [],
                              "isNullable": false,
                              "_": 10718,
                              "source": "T"
                            }
                          ],
                          "isNullable": false,
                          "_": 10718,
                          "source": "TreeViewSelectionChangeEvent<T>"
                        }
                      ],
                      "isNullable": false,
                      "_": 10718,
                      "source": " Event<TreeViewSelectionChangeEvent<T>>"
                    }
                  },
                  {
                    "doc": "`true` if the {@link TreeViewtree view} is visible otherwise `false`.",
                    "isMethod": false,
                    "_": 10723,
                    "source": "\n\n\t\t/**\n\t\t * `true` if the {@link TreeView tree view} is visible otherwise `false`.\n\t\t */\n\t\treadonly visible: boolean;",
                    "name": "visible",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 10723,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Event that is fired when {@link TreeView.visiblevisibility} has changed",
                    "isMethod": false,
                    "_": 10728,
                    "source": "\n\n\t\t/**\n\t\t * Event that is fired when {@link TreeView.visible visibility} has changed\n\t\t */\n\t\treadonly onDidChangeVisibility: Event<TreeViewVisibilityChangeEvent>;",
                    "name": "onDidChangeVisibility",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "ref": "TreeViewVisibilityChangeEvent",
                          "targs": [],
                          "isNullable": false,
                          "_": 10728,
                          "source": "TreeViewVisibilityChangeEvent"
                        }
                      ],
                      "isNullable": false,
                      "_": 10728,
                      "source": " Event<TreeViewVisibilityChangeEvent>"
                    }
                  },
                  {
                    "doc": "An event to signal that an element or root has either been checked or unchecked.",
                    "isMethod": false,
                    "_": 10733,
                    "source": "\n\n\t\t/**\n\t\t* An event to signal that an element or root has either been checked or unchecked.\n\t\t*/\n\t\treadonly onDidChangeCheckboxState: Event<TreeCheckboxChangeEvent<T>>;",
                    "name": "onDidChangeCheckboxState",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "ref": "TreeCheckboxChangeEvent",
                          "targs": [
                            {
                              "ref": "T",
                              "targs": [],
                              "isNullable": false,
                              "_": 10733,
                              "source": "T"
                            }
                          ],
                          "isNullable": false,
                          "_": 10733,
                          "source": "TreeCheckboxChangeEvent<T>"
                        }
                      ],
                      "isNullable": false,
                      "_": 10733,
                      "source": " Event<TreeCheckboxChangeEvent<T>>"
                    }
                  },
                  {
                    "doc": "An optional human-readable message that will be rendered in the view.\n Setting the message to null, undefined, or empty string will remove the message from the view.",
                    "isMethod": false,
                    "_": 10739,
                    "source": "\n\n\t\t/**\n\t\t * An optional human-readable message that will be rendered in the view.\n\t\t * Setting the message to null, undefined, or empty string will remove the message from the view.\n\t\t */\n\t\tmessage?: string;",
                    "name": "message",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 10739,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The tree view title is initially taken from the extension package.json\n Changes to the title property will be properly reflected in the UI in the title of the view.",
                    "isMethod": false,
                    "_": 10745,
                    "source": "\n\n\t\t/**\n\t\t * The tree view title is initially taken from the extension package.json\n\t\t * Changes to the title property will be properly reflected in the UI in the title of the view.\n\t\t */\n\t\ttitle?: string;",
                    "name": "title",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 10745,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "An optional human-readable description which is rendered less prominently in the title of the view.\n Setting the title description to null, undefined, or empty string will remove the description from the view.",
                    "isMethod": false,
                    "_": 10751,
                    "source": "\n\n\t\t/**\n\t\t * An optional human-readable description which is rendered less prominently in the title of the view.\n\t\t * Setting the title description to null, undefined, or empty string will remove the description from the view.\n\t\t */\n\t\tdescription?: string;",
                    "name": "description",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 10751,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The badge to display for this TreeView.\n To remove the badge, set to undefined.",
                    "isMethod": false,
                    "_": 10757,
                    "source": "\n\n\t\t/**\n\t\t * The badge to display for this TreeView.\n\t\t * To remove the badge, set to undefined.\n\t\t */\n\t\tbadge?: ViewBadge | undefined;",
                    "name": "badge",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "ViewBadge",
                          "targs": [],
                          "isNullable": false,
                          "_": 10757,
                          "source": " ViewBadge"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 10757,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 10757,
                      "source": " ViewBadge | undefined"
                    }
                  },
                  {
                    "doc": "Reveals the given element in the tree view.\n If the tree view is not visible then the tree view is shown and element is revealed.\n\n By default revealed element is selected.\n In order to not to select, set the option `select` to `false`.\n In order to focus, set the option `focus` to `true`.\n In order to expand the revealed element, set the option `expand` to `true`. To expand recursively set `expand` to the number of levels to expand.\n **NOTE:** You can expand only to 3 levels maximum.\n\n **NOTE:** The {@link TreeDataProvider} that the `TreeView` {@link window.createTreeView is registered with} with must implement {@link TreeDataProvider.getParent getParent} method to access this API.",
                    "isMethod": true,
                    "_": 10771,
                    "source": "\n\n\t\t/**\n\t\t * Reveals the given element in the tree view.\n\t\t * If the tree view is not visible then the tree view is shown and element is revealed.\n\t\t *\n\t\t * By default revealed element is selected.\n\t\t * In order to not to select, set the option `select` to `false`.\n\t\t * In order to focus, set the option `focus` to `true`.\n\t\t * In order to expand the revealed element, set the option `expand` to `true`. To expand recursively set `expand` to the number of levels to expand.\n\t\t * **NOTE:** You can expand only to 3 levels maximum.\n\t\t *\n\t\t * **NOTE:** The {@link TreeDataProvider} that the `TreeView` {@link window.createTreeView is registered with} with must implement {@link TreeDataProvider.getParent getParent} method to access this API.\n\t\t */\n\t\treveal(element: T, options?: { select?: boolean; focus?: boolean; expand?: boolean | number }): Thenable<void>;",
                    "name": "reveal",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "element",
                        "type": {
                          "ref": "T",
                          "targs": [],
                          "isNullable": false,
                          "_": 10771,
                          "source": " T"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "options",
                        "type": {
                          "ref": "IInline54",
                          "targs": [],
                          "isNullable": false,
                          "_": 10771,
                          "source": " { select?: boolean; focus?: boolean; expand?: boolean | number }"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "Thenable",
                      "targs": [
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 10771,
                          "source": "void"
                        }
                      ],
                      "isNullable": false,
                      "_": 10771,
                      "source": " Thenable<void>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 10777,
                "name": "TreeDataProvider",
                "generics": [
                  {
                    "name": "T",
                    "_": 10777,
                    "source": "T"
                  }
                ],
                "doc": "A data provider that provides tree data",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "An optional event to signal that an element or root has changed.\n This will trigger the view to update the changed element/root and its children recursively (if shown).\n To signal that root has changed, do not pass any argument or pass `undefined` or `null`.",
                    "isMethod": false,
                    "_": 10783,
                    "source": "\n\t\t/**\n\t\t * An optional event to signal that an element or root has changed.\n\t\t * This will trigger the view to update the changed element/root and its children recursively (if shown).\n\t\t * To signal that root has changed, do not pass any argument or pass `undefined` or `null`.\n\t\t */\n\t\tonDidChangeTreeData?: Event<T | T[] | undefined | null | void>;",
                    "name": "onDidChangeTreeData",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "union": [
                            {
                              "ref": "T",
                              "targs": [],
                              "isNullable": false,
                              "_": 10783,
                              "source": "T"
                            },
                            {
                              "core": "array",
                              "targs": [
                                {
                                  "ref": "T",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 10783,
                                  "source": " T"
                                }
                              ],
                              "isNullable": false,
                              "_": 10783,
                              "source": " T[]"
                            },
                            {
                              "core": "undefined",
                              "isNullable": false,
                              "_": 10783,
                              "source": " undefined"
                            },
                            {
                              "core": "null",
                              "isNullable": false,
                              "_": 10783,
                              "source": " null"
                            },
                            {
                              "core": "void",
                              "isNullable": false,
                              "_": 10783,
                              "source": " void"
                            }
                          ],
                          "isNullable": false,
                          "_": 10783,
                          "source": "T | T[] | undefined | null | void"
                        }
                      ],
                      "isNullable": false,
                      "_": 10783,
                      "source": " Event<T | T[] | undefined | null | void>"
                    }
                  },
                  {
                    "doc": "Get {@link TreeItem} representation of the `element`\n\n @param element The element for which {@link TreeItem} representation is asked for.\n @return TreeItem representation of the element.",
                    "isMethod": true,
                    "_": 10791,
                    "source": "\n\n\t\t/**\n\t\t * Get {@link TreeItem} representation of the `element`\n\t\t *\n\t\t * @param element The element for which {@link TreeItem} representation is asked for.\n\t\t * @return TreeItem representation of the element.\n\t\t */\n\t\tgetTreeItem(element: T): TreeItem | Thenable<TreeItem>;",
                    "name": "getTreeItem",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "element",
                        "type": {
                          "ref": "T",
                          "targs": [],
                          "isNullable": false,
                          "_": 10791,
                          "source": " T"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "union": [
                        {
                          "ref": "TreeItem",
                          "targs": [],
                          "isNullable": false,
                          "_": 10791,
                          "source": " TreeItem"
                        },
                        {
                          "ref": "Thenable",
                          "targs": [
                            {
                              "ref": "TreeItem",
                              "targs": [],
                              "isNullable": false,
                              "_": 10791,
                              "source": "TreeItem"
                            }
                          ],
                          "isNullable": false,
                          "_": 10791,
                          "source": " Thenable<TreeItem>"
                        }
                      ],
                      "isNullable": false,
                      "_": 10791,
                      "source": " TreeItem | Thenable<TreeItem>"
                    }
                  },
                  {
                    "doc": "Get the children of `element` or root if no element is passed.\n\n @param element The element from which the provider gets children. Can be `undefined`.\n @return Children of `element` or root if no element is passed.",
                    "isMethod": true,
                    "_": 10799,
                    "source": "\n\n\t\t/**\n\t\t * Get the children of `element` or root if no element is passed.\n\t\t *\n\t\t * @param element The element from which the provider gets children. Can be `undefined`.\n\t\t * @return Children of `element` or root if no element is passed.\n\t\t */\n\t\tgetChildren(element?: T): ProviderResult<T[]>;",
                    "name": "getChildren",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "element",
                        "type": {
                          "ref": "T",
                          "targs": [],
                          "isNullable": false,
                          "_": 10799,
                          "source": " T"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "T",
                              "targs": [],
                              "isNullable": false,
                              "_": 10799,
                              "source": "T"
                            }
                          ],
                          "isNullable": false,
                          "_": 10799,
                          "source": "T[]"
                        }
                      ],
                      "isNullable": false,
                      "_": 10799,
                      "source": " ProviderResult<T[]>"
                    }
                  },
                  {
                    "doc": "Optional method to return the parent of `element`.\n Return `null` or `undefined` if `element` is a child of root.\n\n **NOTE:** This method should be implemented in order to access {@link TreeView.reveal reveal} API.\n\n @param element The element for which the parent has to be returned.\n @return Parent of `element`.",
                    "isMethod": true,
                    "_": 10810,
                    "source": "\n\n\t\t/**\n\t\t * Optional method to return the parent of `element`.\n\t\t * Return `null` or `undefined` if `element` is a child of root.\n\t\t *\n\t\t * **NOTE:** This method should be implemented in order to access {@link TreeView.reveal reveal} API.\n\t\t *\n\t\t * @param element The element for which the parent has to be returned.\n\t\t * @return Parent of `element`.\n\t\t */\n\t\tgetParent?(element: T): ProviderResult<T>;",
                    "name": "getParent",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "element",
                        "type": {
                          "ref": "T",
                          "targs": [],
                          "isNullable": false,
                          "_": 10810,
                          "source": " T"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "ref": "T",
                          "targs": [],
                          "isNullable": false,
                          "_": 10810,
                          "source": "T"
                        }
                      ],
                      "isNullable": false,
                      "_": 10810,
                      "source": " ProviderResult<T>"
                    }
                  },
                  {
                    "doc": "Called on hover to resolve the {@link TreeItem.tooltip TreeItem} property if it is undefined.\n Called on tree item click/open to resolve the {@link TreeItem.command TreeItem} property if it is undefined.\n Only properties that were undefined can be resolved in `resolveTreeItem`.\n Functionality may be expanded later to include being called to resolve other missing\n properties on selection and/or on open.\n\n Will only ever be called once per TreeItem.\n\n onDidChangeTreeData should not be triggered from within resolveTreeItem.\n\n *Note* that this function is called when tree items are already showing in the UI.\n Because of that, no property that changes the presentation (label, description, etc.)\n can be changed.\n\n @param item Undefined properties of `item` should be set then `item` should be returned.\n @param element The object associated with the TreeItem.\n @param token A cancellation token.\n @return The resolved tree item or a thenable that resolves to such. It is OK to return the given\n `item`. When no result is returned, the given `item` will be used.",
                    "isMethod": true,
                    "_": 10833,
                    "source": "\n\n\t\t/**\n\t\t * Called on hover to resolve the {@link TreeItem.tooltip TreeItem} property if it is undefined.\n\t\t * Called on tree item click/open to resolve the {@link TreeItem.command TreeItem} property if it is undefined.\n\t\t * Only properties that were undefined can be resolved in `resolveTreeItem`.\n\t\t * Functionality may be expanded later to include being called to resolve other missing\n\t\t * properties on selection and/or on open.\n\t\t *\n\t\t * Will only ever be called once per TreeItem.\n\t\t *\n\t\t * onDidChangeTreeData should not be triggered from within resolveTreeItem.\n\t\t *\n\t\t * *Note* that this function is called when tree items are already showing in the UI.\n\t\t * Because of that, no property that changes the presentation (label, description, etc.)\n\t\t * can be changed.\n\t\t *\n\t\t * @param item Undefined properties of `item` should be set then `item` should be returned.\n\t\t * @param element The object associated with the TreeItem.\n\t\t * @param token A cancellation token.\n\t\t * @return The resolved tree item or a thenable that resolves to such. It is OK to return the given\n\t\t * `item`. When no result is returned, the given `item` will be used.\n\t\t */\n\t\tresolveTreeItem?(item: TreeItem, element: T, token: CancellationToken): ProviderResult<TreeItem>;",
                    "name": "resolveTreeItem",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "item",
                        "type": {
                          "ref": "TreeItem",
                          "targs": [],
                          "isNullable": false,
                          "_": 10833,
                          "source": " TreeItem"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "element",
                        "type": {
                          "ref": "T",
                          "targs": [],
                          "isNullable": false,
                          "_": 10833,
                          "source": " T"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 10833,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "ref": "TreeItem",
                          "targs": [],
                          "isNullable": false,
                          "_": 10833,
                          "source": "TreeItem"
                        }
                      ],
                      "isNullable": false,
                      "_": 10833,
                      "source": " ProviderResult<TreeItem>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline55",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "TreeItem",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 10854,
                    "source": " light: string | Uri;",
                    "name": "light",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 10854,
                          "source": " string"
                        },
                        {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 10854,
                          "source": " Uri"
                        }
                      ],
                      "isNullable": false,
                      "_": 10854,
                      "source": " string | Uri"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 10854,
                    "source": " dark: string | Uri",
                    "name": "dark",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 10854,
                          "source": " string"
                        },
                        {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 10854,
                          "source": " Uri"
                        }
                      ],
                      "isNullable": false,
                      "_": 10854,
                      "source": " string | Uri"
                    }
                  }
                ],
                "calls": []
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline56",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "TreeItem",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 10920,
                    "source": " readonly state: TreeItemCheckboxState;",
                    "name": "state",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "TreeItemCheckboxState",
                      "targs": [],
                      "isNullable": false,
                      "_": 10920,
                      "source": " TreeItemCheckboxState"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 10920,
                    "source": " readonly tooltip?: string;",
                    "name": "tooltip",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 10920,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 10920,
                    "source": " readonly accessibilityInformation?: AccessibilityInformation",
                    "name": "accessibilityInformation",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "AccessibilityInformation",
                      "targs": [],
                      "isNullable": false,
                      "_": 10920,
                      "source": " AccessibilityInformation"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 10836,
                "name": "TreeItem",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 10926,
                    "source": "\n\n\t\t/**\n\t\t * @param label A human-readable string describing this item\n\t\t * @param collapsibleState {@link TreeItemCollapsibleState} of the tree item. Default is {@link TreeItemCollapsibleState.None}\n\t\t */\n\t\tconstructor(label: string | TreeItemLabel, collapsibleState?: TreeItemCollapsibleState);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "label",
                        "type": {
                          "union": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 10926,
                              "source": " string"
                            },
                            {
                              "ref": "TreeItemLabel",
                              "targs": [],
                              "isNullable": false,
                              "_": 10926,
                              "source": " TreeItemLabel"
                            }
                          ],
                          "isNullable": false,
                          "_": 10926,
                          "source": " string | TreeItemLabel"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "collapsibleState",
                        "type": {
                          "ref": "TreeItemCollapsibleState",
                          "targs": [],
                          "isNullable": false,
                          "_": 10926,
                          "source": " TreeItemCollapsibleState"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  },
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 10932,
                    "source": "\n\n\t\t/**\n\t\t * @param resourceUri The {@link Uri} of the resource representing this item.\n\t\t * @param collapsibleState {@link TreeItemCollapsibleState} of the tree item. Default is {@link TreeItemCollapsibleState.None}\n\t\t */\n\t\tconstructor(resourceUri: Uri, collapsibleState?: TreeItemCollapsibleState);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "resourceUri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 10932,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "collapsibleState",
                        "type": {
                          "ref": "TreeItemCollapsibleState",
                          "targs": [],
                          "isNullable": false,
                          "_": 10932,
                          "source": " TreeItemCollapsibleState"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "A human-readable string describing this item. When `falsy`, it is derived from {@link TreeItem.resourceUri resourceUri}.",
                    "isMethod": false,
                    "_": 10840,
                    "source": "\n\t\t/**\n\t\t * A human-readable string describing this item. When `falsy`, it is derived from {@link TreeItem.resourceUri resourceUri}.\n\t\t */\n\t\tlabel?: string | TreeItemLabel;",
                    "name": "label",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 10840,
                          "source": " string"
                        },
                        {
                          "ref": "TreeItemLabel",
                          "targs": [],
                          "isNullable": false,
                          "_": 10840,
                          "source": " TreeItemLabel"
                        }
                      ],
                      "isNullable": false,
                      "_": 10840,
                      "source": " string | TreeItemLabel"
                    }
                  },
                  {
                    "doc": "Optional id for the tree item that has to be unique across tree. The id is used to preserve the selection and expansion state of the tree item.\n\n If not provided, an id is generated using the tree item's label. **Note** that when labels change, ids will change and that selection and expansion state cannot be kept stable anymore.",
                    "isMethod": false,
                    "_": 10847,
                    "source": "\n\n\t\t/**\n\t\t * Optional id for the tree item that has to be unique across tree. The id is used to preserve the selection and expansion state of the tree item.\n\t\t *\n\t\t * If not provided, an id is generated using the tree item's label. **Note** that when labels change, ids will change and that selection and expansion state cannot be kept stable anymore.\n\t\t */\n\t\tid?: string;",
                    "name": "id",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 10847,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The icon path or {@link ThemeIcon} for the tree item.\n When `falsy`, {@link ThemeIcon.Folder Folder Theme Icon} is assigned, if item is collapsible otherwise {@link ThemeIcon.File File Theme Icon}.\n When a file or folder {@link ThemeIcon} is specified, icon is derived from the current file icon theme for the specified theme icon using {@link TreeItem.resourceUri resourceUri} (if provided).",
                    "isMethod": false,
                    "_": 10854,
                    "source": "\n\n\t\t/**\n\t\t * The icon path or {@link ThemeIcon} for the tree item.\n\t\t * When `falsy`, {@link ThemeIcon.Folder Folder Theme Icon} is assigned, if item is collapsible otherwise {@link ThemeIcon.File File Theme Icon}.\n\t\t * When a file or folder {@link ThemeIcon} is specified, icon is derived from the current file icon theme for the specified theme icon using {@link TreeItem.resourceUri resourceUri} (if provided).\n\t\t */\n\t\ticonPath?: string | Uri | { light: string | Uri; dark: string | Uri } | ThemeIcon;",
                    "name": "iconPath",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 10854,
                          "source": " string"
                        },
                        {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 10854,
                          "source": " Uri"
                        },
                        {
                          "ref": "IInline55",
                          "targs": [],
                          "isNullable": false,
                          "_": 10854,
                          "source": " { light: string | Uri; dark: string | Uri }"
                        },
                        {
                          "ref": "ThemeIcon",
                          "targs": [],
                          "isNullable": false,
                          "_": 10854,
                          "source": " ThemeIcon"
                        }
                      ],
                      "isNullable": false,
                      "_": 10854,
                      "source": " string | Uri | { light: string | Uri; dark: string | Uri } | ThemeIcon"
                    }
                  },
                  {
                    "doc": "A human-readable string which is rendered less prominent.\n When `true`, it is derived from {@link TreeItem.resourceUri resourceUri} and when `falsy`, it is not shown.",
                    "isMethod": false,
                    "_": 10860,
                    "source": "\n\n\t\t/**\n\t\t * A human-readable string which is rendered less prominent.\n\t\t * When `true`, it is derived from {@link TreeItem.resourceUri resourceUri} and when `falsy`, it is not shown.\n\t\t */\n\t\tdescription?: string | boolean;",
                    "name": "description",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 10860,
                          "source": " string"
                        },
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 10860,
                          "source": " boolean"
                        }
                      ],
                      "isNullable": false,
                      "_": 10860,
                      "source": " string | boolean"
                    }
                  },
                  {
                    "doc": "The {@link Uri} of the resource representing this item.\n\n Will be used to derive the {@link TreeItem.label label}, when it is not provided.\n Will be used to derive the icon from current file icon theme, when {@link TreeItem.iconPath iconPath} has {@link ThemeIcon} value.",
                    "isMethod": false,
                    "_": 10868,
                    "source": "\n\n\t\t/**\n\t\t * The {@link Uri} of the resource representing this item.\n\t\t *\n\t\t * Will be used to derive the {@link TreeItem.label label}, when it is not provided.\n\t\t * Will be used to derive the icon from current file icon theme, when {@link TreeItem.iconPath iconPath} has {@link ThemeIcon} value.\n\t\t */\n\t\tresourceUri?: Uri;",
                    "name": "resourceUri",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 10868,
                      "source": " Uri"
                    }
                  },
                  {
                    "doc": "The tooltip text when you hover over this item.",
                    "isMethod": false,
                    "_": 10873,
                    "source": "\n\n\t\t/**\n\t\t * The tooltip text when you hover over this item.\n\t\t */\n\t\ttooltip?: string | MarkdownString | undefined;",
                    "name": "tooltip",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 10873,
                          "source": " string"
                        },
                        {
                          "ref": "MarkdownString",
                          "targs": [],
                          "isNullable": false,
                          "_": 10873,
                          "source": " MarkdownString"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 10873,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 10873,
                      "source": " string | MarkdownString | undefined"
                    }
                  },
                  {
                    "doc": "The {@link Command} that should be executed when the tree item is selected.\n\n Please use `vscode.open` or `vscode.diff` as command IDs when the tree item is opening\n something in the editor. Using these commands ensures that the resulting editor will\n appear consistent with how other built-in trees open editors.",
                    "isMethod": false,
                    "_": 10882,
                    "source": "\n\n\t\t/**\n\t\t * The {@link Command} that should be executed when the tree item is selected.\n\t\t *\n\t\t * Please use `vscode.open` or `vscode.diff` as command IDs when the tree item is opening\n\t\t * something in the editor. Using these commands ensures that the resulting editor will\n\t\t * appear consistent with how other built-in trees open editors.\n\t\t */\n\t\tcommand?: Command;",
                    "name": "command",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Command",
                      "targs": [],
                      "isNullable": false,
                      "_": 10882,
                      "source": " Command"
                    }
                  },
                  {
                    "doc": "{@link TreeItemCollapsibleState} of the tree item.",
                    "isMethod": false,
                    "_": 10887,
                    "source": "\n\n\t\t/**\n\t\t * {@link TreeItemCollapsibleState} of the tree item.\n\t\t */\n\t\tcollapsibleState?: TreeItemCollapsibleState;",
                    "name": "collapsibleState",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "TreeItemCollapsibleState",
                      "targs": [],
                      "isNullable": false,
                      "_": 10887,
                      "source": " TreeItemCollapsibleState"
                    }
                  },
                  {
                    "doc": "Context value of the tree item. This can be used to contribute item specific actions in the tree.\n For example, a tree item is given a context value as `folder`. When contributing actions to `view/item/context`\n using `menus` extension point, you can specify context value for key `viewItem` in `when` expression like `viewItem == folder`.\n ```json\n \"contributes\": {\n   \"menus\": {\n     \"view/item/context\": [\n       {\n         \"command\": \"extension.deleteFolder\",\n         \"when\": \"viewItem == folder\"\n       }\n     ]\n   }\n }\n ```\n This will show action `extension.deleteFolder` only for items with `contextValue` is `folder`.",
                    "isMethod": false,
                    "_": 10907,
                    "source": "\n\n\t\t/**\n\t\t * Context value of the tree item. This can be used to contribute item specific actions in the tree.\n\t\t * For example, a tree item is given a context value as `folder`. When contributing actions to `view/item/context`\n\t\t * using `menus` extension point, you can specify context value for key `viewItem` in `when` expression like `viewItem == folder`.\n\t\t * ```json\n\t\t * \"contributes\": {\n\t\t *   \"menus\": {\n\t\t *     \"view/item/context\": [\n\t\t *       {\n\t\t *         \"command\": \"extension.deleteFolder\",\n\t\t *         \"when\": \"viewItem == folder\"\n\t\t *       }\n\t\t *     ]\n\t\t *   }\n\t\t * }\n\t\t * ```\n\t\t * This will show action `extension.deleteFolder` only for items with `contextValue` is `folder`.\n\t\t */\n\t\tcontextValue?: string;",
                    "name": "contextValue",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 10907,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Accessibility information used when screen reader interacts with this tree item.\n Generally, a TreeItem has no need to set the `role` of the accessibilityInformation;\n however, there are cases where a TreeItem is not displayed in a tree-like way where setting the `role` may make sense.",
                    "isMethod": false,
                    "_": 10914,
                    "source": "\n\n\t\t/**\n\t\t * Accessibility information used when screen reader interacts with this tree item.\n\t\t * Generally, a TreeItem has no need to set the `role` of the accessibilityInformation;\n\t\t * however, there are cases where a TreeItem is not displayed in a tree-like way where setting the `role` may make sense.\n\t\t */\n\t\taccessibilityInformation?: AccessibilityInformation;",
                    "name": "accessibilityInformation",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "AccessibilityInformation",
                      "targs": [],
                      "isNullable": false,
                      "_": 10914,
                      "source": " AccessibilityInformation"
                    }
                  },
                  {
                    "doc": "{@link TreeItemCheckboxState TreeItemCheckboxState} of the tree item.\n {@link TreeDataProvider.onDidChangeTreeData onDidChangeTreeData} should be fired when {@link TreeItem.checkboxState checkboxState} changes.",
                    "isMethod": false,
                    "_": 10920,
                    "source": "\n\n\t\t/**\n\t\t * {@link TreeItemCheckboxState TreeItemCheckboxState} of the tree item.\n\t\t * {@link TreeDataProvider.onDidChangeTreeData onDidChangeTreeData} should be fired when {@link TreeItem.checkboxState checkboxState} changes.\n\t\t */\n\t\tcheckboxState?: TreeItemCheckboxState | { readonly state: TreeItemCheckboxState; readonly tooltip?: string; readonly accessibilityInformation?: AccessibilityInformation };",
                    "name": "checkboxState",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "TreeItemCheckboxState",
                          "targs": [],
                          "isNullable": false,
                          "_": 10920,
                          "source": " TreeItemCheckboxState"
                        },
                        {
                          "ref": "IInline56",
                          "targs": [],
                          "isNullable": false,
                          "_": 10920,
                          "source": " { readonly state: TreeItemCheckboxState; readonly tooltip?: string; readonly accessibilityInformation?: AccessibilityInformation }"
                        }
                      ],
                      "isNullable": false,
                      "_": 10920,
                      "source": " TreeItemCheckboxState | { readonly state: TreeItemCheckboxState; readonly tooltip?: string; readonly accessibilityInformation?: AccessibilityInformation }"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 10956,
                "name": "TreeItemLabel",
                "generics": [],
                "doc": "Label describing the {@link TreeItemTree item}",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "A human-readable string describing the {@link TreeItem Tree item}.",
                    "isMethod": false,
                    "_": 10961,
                    "source": "\n\n\t\t/**\n\t\t * A human-readable string describing the {@link TreeItem Tree item}.\n\t\t */\n\t\tlabel: string;",
                    "name": "label",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 10961,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Ranges in the label to highlight. A range is defined as a tuple of two number where the\n first is the inclusive start index and the second the exclusive end index",
                    "isMethod": false,
                    "_": 10967,
                    "source": "\n\n\t\t/**\n\t\t * Ranges in the label to highlight. A range is defined as a tuple of two number where the\n\t\t * first is the inclusive start index and the second the exclusive end index\n\t\t */\n\t\thighlights?: [number, number][];",
                    "name": "highlights",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "tuple": [
                            {
                              "core": "number",
                              "isNullable": false,
                              "_": 10967,
                              "source": "number"
                            },
                            {
                              "core": "number",
                              "isNullable": false,
                              "_": 10967,
                              "source": " number"
                            }
                          ],
                          "isNullable": false,
                          "_": 10967,
                          "source": " [number, number]"
                        }
                      ],
                      "isNullable": false,
                      "_": 10967,
                      "source": " [number, number][]"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline57",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "TerminalOptions",
                "source": "",
                "indexes": [
                  {
                    "key": {
                      "core": "string",
                      "isNullable": false,
                      "_": 11012,
                      "source": " string"
                    },
                    "value": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 11012,
                          "source": " string"
                        },
                        {
                          "core": "null",
                          "isNullable": false,
                          "_": 11012,
                          "source": " null"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 11012,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 11012,
                      "source": " string | null | undefined"
                    },
                    "doc": "",
                    "_": 11012,
                    "source": " [key: string]: string | null | undefined",
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false
                  }
                ],
                "ctors": [],
                "members": [],
                "calls": []
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline58",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "TerminalOptions",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 11042,
                    "source": " light: Uri;",
                    "name": "light",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 11042,
                      "source": " Uri"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 11042,
                    "source": " dark: Uri",
                    "name": "dark",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 11042,
                      "source": " Uri"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 10987,
                "name": "TerminalOptions",
                "generics": [],
                "doc": "Value-object describing what options a terminal should use.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "A human-readable string which will be used to represent the terminal in the UI.",
                    "isMethod": false,
                    "_": 10991,
                    "source": "\n\t\t/**\n\t\t * A human-readable string which will be used to represent the terminal in the UI.\n\t\t */\n\t\tname?: string;",
                    "name": "name",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 10991,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "A path to a custom shell executable to be used in the terminal.",
                    "isMethod": false,
                    "_": 10996,
                    "source": "\n\n\t\t/**\n\t\t * A path to a custom shell executable to be used in the terminal.\n\t\t */\n\t\tshellPath?: string;",
                    "name": "shellPath",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 10996,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Args for the custom shell executable. A string can be used on Windows only which allows\n specifying shell args in [command-line format](https://msdn.microsoft.com/en-au/08dfcab2-eb6e-49a4-80eb-87d4076c98c6).",
                    "isMethod": false,
                    "_": 11002,
                    "source": "\n\n\t\t/**\n\t\t * Args for the custom shell executable. A string can be used on Windows only which allows\n\t\t * specifying shell args in [command-line format](https://msdn.microsoft.com/en-au/08dfcab2-eb6e-49a4-80eb-87d4076c98c6).\n\t\t */\n\t\tshellArgs?: string[] | string;",
                    "name": "shellArgs",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "array",
                          "targs": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 11002,
                              "source": " string"
                            }
                          ],
                          "isNullable": false,
                          "_": 11002,
                          "source": " string[]"
                        },
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 11002,
                          "source": " string"
                        }
                      ],
                      "isNullable": false,
                      "_": 11002,
                      "source": " string[] | string"
                    }
                  },
                  {
                    "doc": "A path or Uri for the current working directory to be used for the terminal.",
                    "isMethod": false,
                    "_": 11007,
                    "source": "\n\n\t\t/**\n\t\t * A path or Uri for the current working directory to be used for the terminal.\n\t\t */\n\t\tcwd?: string | Uri;",
                    "name": "cwd",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 11007,
                          "source": " string"
                        },
                        {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 11007,
                          "source": " Uri"
                        }
                      ],
                      "isNullable": false,
                      "_": 11007,
                      "source": " string | Uri"
                    }
                  },
                  {
                    "doc": "Object with environment variables that will be added to the editor process.",
                    "isMethod": false,
                    "_": 11012,
                    "source": "\n\n\t\t/**\n\t\t * Object with environment variables that will be added to the editor process.\n\t\t */\n\t\tenv?: { [key: string]: string | null | undefined };",
                    "name": "env",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "IInline57",
                      "targs": [],
                      "isNullable": false,
                      "_": 11012,
                      "source": " { [key: string]: string | null | undefined }"
                    }
                  },
                  {
                    "doc": "Whether the terminal process environment should be exactly as provided in\n `TerminalOptions.env`. When this is false (default), the environment will be based on the\n window's environment and also apply configured platform settings like\n `terminal.integrated.env.windows` on top. When this is true, the complete environment\n must be provided as nothing will be inherited from the process or any configuration.",
                    "isMethod": false,
                    "_": 11021,
                    "source": "\n\n\t\t/**\n\t\t * Whether the terminal process environment should be exactly as provided in\n\t\t * `TerminalOptions.env`. When this is false (default), the environment will be based on the\n\t\t * window's environment and also apply configured platform settings like\n\t\t * `terminal.integrated.env.windows` on top. When this is true, the complete environment\n\t\t * must be provided as nothing will be inherited from the process or any configuration.\n\t\t */\n\t\tstrictEnv?: boolean;",
                    "name": "strictEnv",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 11021,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "When enabled the terminal will run the process as normal but not be surfaced to the user\n until `Terminal.show` is called. The typical usage for this is when you need to run\n something that may need interactivity but only want to tell the user about it when\n interaction is needed. Note that the terminals will still be exposed to all extensions\n as normal.",
                    "isMethod": false,
                    "_": 11030,
                    "source": "\n\n\t\t/**\n\t\t * When enabled the terminal will run the process as normal but not be surfaced to the user\n\t\t * until `Terminal.show` is called. The typical usage for this is when you need to run\n\t\t * something that may need interactivity but only want to tell the user about it when\n\t\t * interaction is needed. Note that the terminals will still be exposed to all extensions\n\t\t * as normal.\n\t\t */\n\t\thideFromUser?: boolean;",
                    "name": "hideFromUser",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 11030,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "A message to write to the terminal on first launch, note that this is not sent to the\n process but, rather written directly to the terminal. This supports escape sequences such\n a setting text style.",
                    "isMethod": false,
                    "_": 11037,
                    "source": "\n\n\t\t/**\n\t\t * A message to write to the terminal on first launch, note that this is not sent to the\n\t\t * process but, rather written directly to the terminal. This supports escape sequences such\n\t\t * a setting text style.\n\t\t */\n\t\tmessage?: string;",
                    "name": "message",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 11037,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The icon path or {@link ThemeIcon} for the terminal.",
                    "isMethod": false,
                    "_": 11042,
                    "source": "\n\n\t\t/**\n\t\t * The icon path or {@link ThemeIcon} for the terminal.\n\t\t */\n\t\ticonPath?: Uri | { light: Uri; dark: Uri } | ThemeIcon;",
                    "name": "iconPath",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 11042,
                          "source": " Uri"
                        },
                        {
                          "ref": "IInline58",
                          "targs": [],
                          "isNullable": false,
                          "_": 11042,
                          "source": " { light: Uri; dark: Uri }"
                        },
                        {
                          "ref": "ThemeIcon",
                          "targs": [],
                          "isNullable": false,
                          "_": 11042,
                          "source": " ThemeIcon"
                        }
                      ],
                      "isNullable": false,
                      "_": 11042,
                      "source": " Uri | { light: Uri; dark: Uri } | ThemeIcon"
                    }
                  },
                  {
                    "doc": "The icon {@link ThemeColor} for the terminal.\n The `terminal.ansi*` theme keys are\n recommended for the best contrast and consistency across themes.",
                    "isMethod": false,
                    "_": 11049,
                    "source": "\n\n\t\t/**\n\t\t * The icon {@link ThemeColor} for the terminal.\n\t\t * The `terminal.ansi*` theme keys are\n\t\t * recommended for the best contrast and consistency across themes.\n\t\t */\n\t\tcolor?: ThemeColor;",
                    "name": "color",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "ThemeColor",
                      "targs": [],
                      "isNullable": false,
                      "_": 11049,
                      "source": " ThemeColor"
                    }
                  },
                  {
                    "doc": "The {@link TerminalLocation} or {@link TerminalEditorLocationOptions} or {@link TerminalSplitLocationOptions} for the terminal.",
                    "isMethod": false,
                    "_": 11054,
                    "source": "\n\n\t\t/**\n\t\t* The {@link TerminalLocation} or {@link TerminalEditorLocationOptions} or {@link TerminalSplitLocationOptions} for the terminal.\n\t\t*/\n\t\tlocation?: TerminalLocation | TerminalEditorLocationOptions | TerminalSplitLocationOptions;",
                    "name": "location",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "TerminalLocation",
                          "targs": [],
                          "isNullable": false,
                          "_": 11054,
                          "source": " TerminalLocation"
                        },
                        {
                          "ref": "TerminalEditorLocationOptions",
                          "targs": [],
                          "isNullable": false,
                          "_": 11054,
                          "source": " TerminalEditorLocationOptions"
                        },
                        {
                          "ref": "TerminalSplitLocationOptions",
                          "targs": [],
                          "isNullable": false,
                          "_": 11054,
                          "source": " TerminalSplitLocationOptions"
                        }
                      ],
                      "isNullable": false,
                      "_": 11054,
                      "source": " TerminalLocation | TerminalEditorLocationOptions | TerminalSplitLocationOptions"
                    }
                  },
                  {
                    "doc": "Opt-out of the default terminal persistence on restart and reload.\n This will only take effect when `terminal.integrated.enablePersistentSessions` is enabled.",
                    "isMethod": false,
                    "_": 11060,
                    "source": "\n\n\t\t/**\n\t\t * Opt-out of the default terminal persistence on restart and reload.\n\t\t * This will only take effect when `terminal.integrated.enablePersistentSessions` is enabled.\n\t\t */\n\t\tisTransient?: boolean;",
                    "name": "isTransient",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 11060,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline59",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "ExtensionTerminalOptions",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 11081,
                    "source": " light: Uri;",
                    "name": "light",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 11081,
                      "source": " Uri"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 11081,
                    "source": " dark: Uri",
                    "name": "dark",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 11081,
                      "source": " Uri"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 11066,
                "name": "ExtensionTerminalOptions",
                "generics": [],
                "doc": "Value-object describing what options a virtual process terminal should use.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "A human-readable string which will be used to represent the terminal in the UI.",
                    "isMethod": false,
                    "_": 11070,
                    "source": "\n\t\t/**\n\t\t * A human-readable string which will be used to represent the terminal in the UI.\n\t\t */\n\t\tname: string;",
                    "name": "name",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 11070,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "An implementation of {@link Pseudoterminal} that allows an extension to\n control a terminal.",
                    "isMethod": false,
                    "_": 11076,
                    "source": "\n\n\t\t/**\n\t\t * An implementation of {@link Pseudoterminal} that allows an extension to\n\t\t * control a terminal.\n\t\t */\n\t\tpty: Pseudoterminal;",
                    "name": "pty",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Pseudoterminal",
                      "targs": [],
                      "isNullable": false,
                      "_": 11076,
                      "source": " Pseudoterminal"
                    }
                  },
                  {
                    "doc": "The icon path or {@link ThemeIcon} for the terminal.",
                    "isMethod": false,
                    "_": 11081,
                    "source": "\n\n\t\t/**\n\t\t * The icon path or {@link ThemeIcon} for the terminal.\n\t\t */\n\t\ticonPath?: Uri | { light: Uri; dark: Uri } | ThemeIcon;",
                    "name": "iconPath",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 11081,
                          "source": " Uri"
                        },
                        {
                          "ref": "IInline59",
                          "targs": [],
                          "isNullable": false,
                          "_": 11081,
                          "source": " { light: Uri; dark: Uri }"
                        },
                        {
                          "ref": "ThemeIcon",
                          "targs": [],
                          "isNullable": false,
                          "_": 11081,
                          "source": " ThemeIcon"
                        }
                      ],
                      "isNullable": false,
                      "_": 11081,
                      "source": " Uri | { light: Uri; dark: Uri } | ThemeIcon"
                    }
                  },
                  {
                    "doc": "The icon {@link ThemeColor} for the terminal.\n The standard `terminal.ansi*` theme keys are\n recommended for the best contrast and consistency across themes.",
                    "isMethod": false,
                    "_": 11088,
                    "source": "\n\n\t\t/**\n\t\t * The icon {@link ThemeColor} for the terminal.\n\t\t * The standard `terminal.ansi*` theme keys are\n\t\t * recommended for the best contrast and consistency across themes.\n\t\t */\n\t\tcolor?: ThemeColor;",
                    "name": "color",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "ThemeColor",
                      "targs": [],
                      "isNullable": false,
                      "_": 11088,
                      "source": " ThemeColor"
                    }
                  },
                  {
                    "doc": "The {@link TerminalLocation} or {@link TerminalEditorLocationOptions} or {@link TerminalSplitLocationOptions} for the terminal.",
                    "isMethod": false,
                    "_": 11093,
                    "source": "\n\n\t\t/**\n\t\t * The {@link TerminalLocation} or {@link TerminalEditorLocationOptions} or {@link TerminalSplitLocationOptions} for the terminal.\n\t\t */\n\t\tlocation?: TerminalLocation | TerminalEditorLocationOptions | TerminalSplitLocationOptions;",
                    "name": "location",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "TerminalLocation",
                          "targs": [],
                          "isNullable": false,
                          "_": 11093,
                          "source": " TerminalLocation"
                        },
                        {
                          "ref": "TerminalEditorLocationOptions",
                          "targs": [],
                          "isNullable": false,
                          "_": 11093,
                          "source": " TerminalEditorLocationOptions"
                        },
                        {
                          "ref": "TerminalSplitLocationOptions",
                          "targs": [],
                          "isNullable": false,
                          "_": 11093,
                          "source": " TerminalSplitLocationOptions"
                        }
                      ],
                      "isNullable": false,
                      "_": 11093,
                      "source": " TerminalLocation | TerminalEditorLocationOptions | TerminalSplitLocationOptions"
                    }
                  },
                  {
                    "doc": "Opt-out of the default terminal persistence on restart and reload.\n This will only take effect when `terminal.integrated.enablePersistentSessions` is enabled.",
                    "isMethod": false,
                    "_": 11099,
                    "source": "\n\n\t\t/**\n\t\t * Opt-out of the default terminal persistence on restart and reload.\n\t\t * This will only take effect when `terminal.integrated.enablePersistentSessions` is enabled.\n\t\t */\n\t\tisTransient?: boolean;",
                    "name": "isTransient",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 11099,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 11105,
                "name": "Pseudoterminal",
                "generics": [],
                "doc": "Defines the interface of a terminal pty, enabling extensions to control a terminal.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "An event that when fired will write data to the terminal. Unlike\n {@link Terminal.sendText} which sends text to the underlying child\n pseudo-device (the child), this will write the text to parent pseudo-device (the\n _terminal_ itself).\n\n Note writing `\\n` will just move the cursor down 1 row, you need to write `\\r` as well\n to move the cursor to the left-most cell.\n\n Events fired before {@link Pseudoterminal.open} is called will be be ignored.\n\n **Example:** Write red text to the terminal\n ```typescript\n const writeEmitter = new vscode.EventEmitter<string>();\n const pty: vscode.Pseudoterminal = {\n   onDidWrite: writeEmitter.event,\n   open: () => writeEmitter.fire('\\x1b[31mHello world\\x1b[0m'),\n   close: () => {}\n };\n vscode.window.createTerminal({ name: 'My terminal', pty });\n ```\n\n **Example:** Move the cursor to the 10th row and 20th column and write an asterisk\n ```typescript\n writeEmitter.fire('\\x1b[10;20H*');\n ```",
                    "isMethod": false,
                    "_": 11133,
                    "source": "\n\t\t/**\n\t\t * An event that when fired will write data to the terminal. Unlike\n\t\t * {@link Terminal.sendText} which sends text to the underlying child\n\t\t * pseudo-device (the child), this will write the text to parent pseudo-device (the\n\t\t * _terminal_ itself).\n\t\t *\n\t\t * Note writing `\\n` will just move the cursor down 1 row, you need to write `\\r` as well\n\t\t * to move the cursor to the left-most cell.\n\t\t *\n\t\t * Events fired before {@link Pseudoterminal.open} is called will be be ignored.\n\t\t *\n\t\t * **Example:** Write red text to the terminal\n\t\t * ```typescript\n\t\t * const writeEmitter = new vscode.EventEmitter<string>();\n\t\t * const pty: vscode.Pseudoterminal = {\n\t\t *   onDidWrite: writeEmitter.event,\n\t\t *   open: () => writeEmitter.fire('\\x1b[31mHello world\\x1b[0m'),\n\t\t *   close: () => {}\n\t\t * };\n\t\t * vscode.window.createTerminal({ name: 'My terminal', pty });\n\t\t * ```\n\t\t *\n\t\t * **Example:** Move the cursor to the 10th row and 20th column and write an asterisk\n\t\t * ```typescript\n\t\t * writeEmitter.fire('\\x1b[10;20H*');\n\t\t * ```\n\t\t */\n\t\tonDidWrite: Event<string>;",
                    "name": "onDidWrite",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 11133,
                          "source": "string"
                        }
                      ],
                      "isNullable": false,
                      "_": 11133,
                      "source": " Event<string>"
                    }
                  },
                  {
                    "doc": "An event that when fired allows overriding the {@link Pseudoterminal.setDimensions dimensions} of the\n terminal. Note that when set, the overridden dimensions will only take effect when they\n are lower than the actual dimensions of the terminal (ie. there will never be a scroll\n bar). Set to `undefined` for the terminal to go back to the regular dimensions (fit to\n the size of the panel).\n\n Events fired before {@link Pseudoterminal.open} is called will be be ignored.\n\n **Example:** Override the dimensions of a terminal to 20 columns and 10 rows\n ```typescript\n const dimensionsEmitter = new vscode.EventEmitter<vscode.TerminalDimensions>();\n const pty: vscode.Pseudoterminal = {\n   onDidWrite: writeEmitter.event,\n   onDidOverrideDimensions: dimensionsEmitter.event,\n   open: () => {\n     dimensionsEmitter.fire({\n       columns: 20,\n       rows: 10\n     });\n   },\n   close: () => {}\n };\n vscode.window.createTerminal({ name: 'My terminal', pty });\n ```",
                    "isMethod": false,
                    "_": 11161,
                    "source": "\n\n\t\t/**\n\t\t * An event that when fired allows overriding the {@link Pseudoterminal.setDimensions dimensions} of the\n\t\t * terminal. Note that when set, the overridden dimensions will only take effect when they\n\t\t * are lower than the actual dimensions of the terminal (ie. there will never be a scroll\n\t\t * bar). Set to `undefined` for the terminal to go back to the regular dimensions (fit to\n\t\t * the size of the panel).\n\t\t *\n\t\t * Events fired before {@link Pseudoterminal.open} is called will be be ignored.\n\t\t *\n\t\t * **Example:** Override the dimensions of a terminal to 20 columns and 10 rows\n\t\t * ```typescript\n\t\t * const dimensionsEmitter = new vscode.EventEmitter<vscode.TerminalDimensions>();\n\t\t * const pty: vscode.Pseudoterminal = {\n\t\t *   onDidWrite: writeEmitter.event,\n\t\t *   onDidOverrideDimensions: dimensionsEmitter.event,\n\t\t *   open: () => {\n\t\t *     dimensionsEmitter.fire({\n\t\t *       columns: 20,\n\t\t *       rows: 10\n\t\t *     });\n\t\t *   },\n\t\t *   close: () => {}\n\t\t * };\n\t\t * vscode.window.createTerminal({ name: 'My terminal', pty });\n\t\t * ```\n\t\t */\n\t\tonDidOverrideDimensions?: Event<TerminalDimensions | undefined>;",
                    "name": "onDidOverrideDimensions",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "union": [
                            {
                              "ref": "TerminalDimensions",
                              "targs": [],
                              "isNullable": false,
                              "_": 11161,
                              "source": "TerminalDimensions"
                            },
                            {
                              "core": "undefined",
                              "isNullable": false,
                              "_": 11161,
                              "source": " undefined"
                            }
                          ],
                          "isNullable": false,
                          "_": 11161,
                          "source": "TerminalDimensions | undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 11161,
                      "source": " Event<TerminalDimensions | undefined>"
                    }
                  },
                  {
                    "doc": "An event that when fired will signal that the pty is closed and dispose of the terminal.\n\n Events fired before {@link Pseudoterminal.open} is called will be be ignored.\n\n A number can be used to provide an exit code for the terminal. Exit codes must be\n positive and a non-zero exit codes signals failure which shows a notification for a\n regular terminal and allows dependent tasks to proceed when used with the\n `CustomExecution` API.\n\n **Example:** Exit the terminal when \"y\" is pressed, otherwise show a notification.\n ```typescript\n const writeEmitter = new vscode.EventEmitter<string>();\n const closeEmitter = new vscode.EventEmitter<void>();\n const pty: vscode.Pseudoterminal = {\n   onDidWrite: writeEmitter.event,\n   onDidClose: closeEmitter.event,\n   open: () => writeEmitter.fire('Press y to exit successfully'),\n   close: () => {},\n   handleInput: data => {\n     if (data !== 'y') {\n       vscode.window.showInformationMessage('Something went wrong');\n     }\n     closeEmitter.fire();\n   }\n };\n const terminal = vscode.window.createTerminal({ name: 'Exit example', pty });\n terminal.show(true);\n ```",
                    "isMethod": false,
                    "_": 11193,
                    "source": "\n\n\t\t/**\n\t\t * An event that when fired will signal that the pty is closed and dispose of the terminal.\n\t\t *\n\t\t * Events fired before {@link Pseudoterminal.open} is called will be be ignored.\n\t\t *\n\t\t * A number can be used to provide an exit code for the terminal. Exit codes must be\n\t\t * positive and a non-zero exit codes signals failure which shows a notification for a\n\t\t * regular terminal and allows dependent tasks to proceed when used with the\n\t\t * `CustomExecution` API.\n\t\t *\n\t\t * **Example:** Exit the terminal when \"y\" is pressed, otherwise show a notification.\n\t\t * ```typescript\n\t\t * const writeEmitter = new vscode.EventEmitter<string>();\n\t\t * const closeEmitter = new vscode.EventEmitter<void>();\n\t\t * const pty: vscode.Pseudoterminal = {\n\t\t *   onDidWrite: writeEmitter.event,\n\t\t *   onDidClose: closeEmitter.event,\n\t\t *   open: () => writeEmitter.fire('Press y to exit successfully'),\n\t\t *   close: () => {},\n\t\t *   handleInput: data => {\n\t\t *     if (data !== 'y') {\n\t\t *       vscode.window.showInformationMessage('Something went wrong');\n\t\t *     }\n\t\t *     closeEmitter.fire();\n\t\t *   }\n\t\t * };\n\t\t * const terminal = vscode.window.createTerminal({ name: 'Exit example', pty });\n\t\t * terminal.show(true);\n\t\t * ```\n\t\t */\n\t\tonDidClose?: Event<void | number>;",
                    "name": "onDidClose",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "union": [
                            {
                              "core": "void",
                              "isNullable": false,
                              "_": 11193,
                              "source": "void"
                            },
                            {
                              "core": "number",
                              "isNullable": false,
                              "_": 11193,
                              "source": " number"
                            }
                          ],
                          "isNullable": false,
                          "_": 11193,
                          "source": "void | number"
                        }
                      ],
                      "isNullable": false,
                      "_": 11193,
                      "source": " Event<void | number>"
                    }
                  },
                  {
                    "doc": "An event that when fired allows changing the name of the terminal.\n\n Events fired before {@link Pseudoterminal.open} is called will be be ignored.\n\n **Example:** Change the terminal name to \"My new terminal\".\n ```typescript\n const writeEmitter = new vscode.EventEmitter<string>();\n const changeNameEmitter = new vscode.EventEmitter<string>();\n const pty: vscode.Pseudoterminal = {\n   onDidWrite: writeEmitter.event,\n   onDidChangeName: changeNameEmitter.event,\n   open: () => changeNameEmitter.fire('My new terminal'),\n   close: () => {}\n };\n vscode.window.createTerminal({ name: 'My terminal', pty });\n ```",
                    "isMethod": false,
                    "_": 11213,
                    "source": "\n\n\t\t/**\n\t\t * An event that when fired allows changing the name of the terminal.\n\t\t *\n\t\t * Events fired before {@link Pseudoterminal.open} is called will be be ignored.\n\t\t *\n\t\t * **Example:** Change the terminal name to \"My new terminal\".\n\t\t * ```typescript\n\t\t * const writeEmitter = new vscode.EventEmitter<string>();\n\t\t * const changeNameEmitter = new vscode.EventEmitter<string>();\n\t\t * const pty: vscode.Pseudoterminal = {\n\t\t *   onDidWrite: writeEmitter.event,\n\t\t *   onDidChangeName: changeNameEmitter.event,\n\t\t *   open: () => changeNameEmitter.fire('My new terminal'),\n\t\t *   close: () => {}\n\t\t * };\n\t\t * vscode.window.createTerminal({ name: 'My terminal', pty });\n\t\t * ```\n\t\t */\n\t\tonDidChangeName?: Event<string>;",
                    "name": "onDidChangeName",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 11213,
                          "source": "string"
                        }
                      ],
                      "isNullable": false,
                      "_": 11213,
                      "source": " Event<string>"
                    }
                  },
                  {
                    "doc": "Implement to handle when the pty is open and ready to start firing events.\n\n @param initialDimensions The dimensions of the terminal, this will be undefined if the\n terminal panel has not been opened before this is called.",
                    "isMethod": true,
                    "_": 11221,
                    "source": "\n\n\t\t/**\n\t\t * Implement to handle when the pty is open and ready to start firing events.\n\t\t *\n\t\t * @param initialDimensions The dimensions of the terminal, this will be undefined if the\n\t\t * terminal panel has not been opened before this is called.\n\t\t */\n\t\topen(initialDimensions: TerminalDimensions | undefined): void;",
                    "name": "open",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "initialDimensions",
                        "type": {
                          "union": [
                            {
                              "ref": "TerminalDimensions",
                              "targs": [],
                              "isNullable": false,
                              "_": 11221,
                              "source": " TerminalDimensions"
                            },
                            {
                              "core": "undefined",
                              "isNullable": false,
                              "_": 11221,
                              "source": " undefined"
                            }
                          ],
                          "isNullable": false,
                          "_": 11221,
                          "source": " TerminalDimensions | undefined"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 11221,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Implement to handle when the terminal is closed by an act of the user.",
                    "isMethod": true,
                    "_": 11226,
                    "source": "\n\n\t\t/**\n\t\t * Implement to handle when the terminal is closed by an act of the user.\n\t\t */\n\t\tclose(): void;",
                    "name": "close",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 11226,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Implement to handle incoming keystrokes in the terminal or when an extension calls\n {@link Terminal.sendText}. `data` contains the keystrokes/text serialized into\n their corresponding VT sequence representation.\n\n @param data The incoming data.\n\n **Example:** Echo input in the terminal. The sequence for enter (`\\r`) is translated to\n CRLF to go to a new line and move the cursor to the start of the line.\n ```typescript\n const writeEmitter = new vscode.EventEmitter<string>();\n const pty: vscode.Pseudoterminal = {\n   onDidWrite: writeEmitter.event,\n   open: () => {},\n   close: () => {},\n   handleInput: data => writeEmitter.fire(data === '\\r' ? '\\r\\n' : data)\n };\n vscode.window.createTerminal({ name: 'Local echo', pty });\n ```",
                    "isMethod": true,
                    "_": 11248,
                    "source": "\n\n\t\t/**\n\t\t * Implement to handle incoming keystrokes in the terminal or when an extension calls\n\t\t * {@link Terminal.sendText}. `data` contains the keystrokes/text serialized into\n\t\t * their corresponding VT sequence representation.\n\t\t *\n\t\t * @param data The incoming data.\n\t\t *\n\t\t * **Example:** Echo input in the terminal. The sequence for enter (`\\r`) is translated to\n\t\t * CRLF to go to a new line and move the cursor to the start of the line.\n\t\t * ```typescript\n\t\t * const writeEmitter = new vscode.EventEmitter<string>();\n\t\t * const pty: vscode.Pseudoterminal = {\n\t\t *   onDidWrite: writeEmitter.event,\n\t\t *   open: () => {},\n\t\t *   close: () => {},\n\t\t *   handleInput: data => writeEmitter.fire(data === '\\r' ? '\\r\\n' : data)\n\t\t * };\n\t\t * vscode.window.createTerminal({ name: 'Local echo', pty });\n\t\t * ```\n\t\t */\n\t\thandleInput?(data: string): void;",
                    "name": "handleInput",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "data",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 11248,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 11248,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Implement to handle when the number of rows and columns that fit into the terminal panel\n changes, for example when font size changes or when the panel is resized. The initial\n state of a terminal's dimensions should be treated as `undefined` until this is triggered\n as the size of a terminal isn't known until it shows up in the user interface.\n\n When dimensions are overridden by\n {@link Pseudoterminal.onDidOverrideDimensions onDidOverrideDimensions}, `setDimensions` will\n continue to be called with the regular panel dimensions, allowing the extension continue\n to react dimension changes.\n\n @param dimensions The new dimensions.",
                    "isMethod": true,
                    "_": 11263,
                    "source": "\n\n\t\t/**\n\t\t * Implement to handle when the number of rows and columns that fit into the terminal panel\n\t\t * changes, for example when font size changes or when the panel is resized. The initial\n\t\t * state of a terminal's dimensions should be treated as `undefined` until this is triggered\n\t\t * as the size of a terminal isn't known until it shows up in the user interface.\n\t\t *\n\t\t * When dimensions are overridden by\n\t\t * {@link Pseudoterminal.onDidOverrideDimensions onDidOverrideDimensions}, `setDimensions` will\n\t\t * continue to be called with the regular panel dimensions, allowing the extension continue\n\t\t * to react dimension changes.\n\t\t *\n\t\t * @param dimensions The new dimensions.\n\t\t */\n\t\tsetDimensions?(dimensions: TerminalDimensions): void;",
                    "name": "setDimensions",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "dimensions",
                        "type": {
                          "ref": "TerminalDimensions",
                          "targs": [],
                          "isNullable": false,
                          "_": 11263,
                          "source": " TerminalDimensions"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 11263,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 11269,
                "name": "TerminalDimensions",
                "generics": [],
                "doc": "Represents the dimensions of a terminal.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The number of columns in the terminal.",
                    "isMethod": false,
                    "_": 11273,
                    "source": "\n\t\t/**\n\t\t * The number of columns in the terminal.\n\t\t */\n\t\treadonly columns: number;",
                    "name": "columns",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 11273,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "The number of rows in the terminal.",
                    "isMethod": false,
                    "_": 11278,
                    "source": "\n\n\t\t/**\n\t\t * The number of rows in the terminal.\n\t\t */\n\t\treadonly rows: number;",
                    "name": "rows",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 11278,
                      "source": " number"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 11284,
                "name": "TerminalExitStatus",
                "generics": [],
                "doc": "Represents how a terminal exited.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The exit code that a terminal exited with, it can have the following values:\n- Zero: the terminal process or custom execution succeeded.\n- Non-zero: the terminal process or custom execution failed.\n- `undefined`: the user forcibly closed the terminal or a custom execution exited\n  without providing an exit code.",
                    "isMethod": false,
                    "_": 11292,
                    "source": "\n\t\t/**\n\t\t * The exit code that a terminal exited with, it can have the following values:\n\t\t * - Zero: the terminal process or custom execution succeeded.\n\t\t * - Non-zero: the terminal process or custom execution failed.\n\t\t * - `undefined`: the user forcibly closed the terminal or a custom execution exited\n\t\t *   without providing an exit code.\n\t\t */\n\t\treadonly code: number | undefined;",
                    "name": "code",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 11292,
                          "source": " number"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 11292,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 11292,
                      "source": " number | undefined"
                    }
                  },
                  {
                    "doc": "The reason that triggered the exit of a terminal.",
                    "isMethod": false,
                    "_": 11297,
                    "source": "\n\n\t\t/**\n\t\t * The reason that triggered the exit of a terminal.\n\t\t */\n\t\treadonly reason: TerminalExitReason;",
                    "name": "reason",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "TerminalExitReason",
                      "targs": [],
                      "isNullable": false,
                      "_": 11297,
                      "source": " TerminalExitReason"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 11351,
                "name": "EnvironmentVariableMutatorOptions",
                "generics": [],
                "doc": "Options applied to the mutator.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Apply to the environment just before the process is created. Defaults to false.",
                    "isMethod": false,
                    "_": 11355,
                    "source": "\n\t\t/**\n\t\t * Apply to the environment just before the process is created. Defaults to false.\n\t\t */\n\t\tapplyAtProcessCreation?: boolean;",
                    "name": "applyAtProcessCreation",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 11355,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Apply to the environment in the shell integration script. Note that this _will not_ apply\n the mutator if shell integration is disabled or not working for some reason. Defaults to\n false.",
                    "isMethod": false,
                    "_": 11362,
                    "source": "\n\n\t\t/**\n\t\t * Apply to the environment in the shell integration script. Note that this _will not_ apply\n\t\t * the mutator if shell integration is disabled or not working for some reason. Defaults to\n\t\t * false.\n\t\t */\n\t\tapplyAtShellIntegration?: boolean;",
                    "name": "applyAtShellIntegration",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 11362,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 11368,
                "name": "EnvironmentVariableMutator",
                "generics": [],
                "doc": "A type of mutation and its value to be applied to an environment variable.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The type of mutation that will occur to the variable.",
                    "isMethod": false,
                    "_": 11372,
                    "source": "\n\t\t/**\n\t\t * The type of mutation that will occur to the variable.\n\t\t */\n\t\treadonly type: EnvironmentVariableMutatorType;",
                    "name": "type",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "EnvironmentVariableMutatorType",
                      "targs": [],
                      "isNullable": false,
                      "_": 11372,
                      "source": " EnvironmentVariableMutatorType"
                    }
                  },
                  {
                    "doc": "The value to use for the variable.",
                    "isMethod": false,
                    "_": 11377,
                    "source": "\n\n\t\t/**\n\t\t * The value to use for the variable.\n\t\t */\n\t\treadonly value: string;",
                    "name": "value",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 11377,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Options applied to the mutator.",
                    "isMethod": false,
                    "_": 11382,
                    "source": "\n\n\t\t/**\n\t\t * Options applied to the mutator.\n\t\t */\n\t\treadonly options: EnvironmentVariableMutatorOptions;",
                    "name": "options",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "EnvironmentVariableMutatorOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 11382,
                      "source": " EnvironmentVariableMutatorOptions"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 11388,
                "name": "EnvironmentVariableCollection",
                "generics": [],
                "doc": "A collection of mutations that an extension can apply to a process environment.",
                "heritage": [
                  [
                    {
                      "ref": "Iterable",
                      "targs": [
                        {
                          "tuple": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 11388,
                              "source": "variable: string"
                            },
                            {
                              "ref": "EnvironmentVariableMutator",
                              "targs": [],
                              "isNullable": false,
                              "_": 11388,
                              "source": " mutator: EnvironmentVariableMutator"
                            }
                          ],
                          "isNullable": false,
                          "_": 11388,
                          "source": "[variable: string, mutator: EnvironmentVariableMutator]"
                        }
                      ],
                      "isNullable": false,
                      "_": 11388,
                      "source": " Iterable<[variable: string, mutator: EnvironmentVariableMutator]>"
                    }
                  ]
                ],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Whether the collection should be cached for the workspace and applied to the terminal\n across window reloads. When true the collection will be active immediately such when the\n window reloads. Additionally, this API will return the cached version if it exists. The\n collection will be invalidated when the extension is uninstalled or when the collection\n is cleared. Defaults to true.",
                    "isMethod": false,
                    "_": 11396,
                    "source": "\n\t\t/**\n\t\t * Whether the collection should be cached for the workspace and applied to the terminal\n\t\t * across window reloads. When true the collection will be active immediately such when the\n\t\t * window reloads. Additionally, this API will return the cached version if it exists. The\n\t\t * collection will be invalidated when the extension is uninstalled or when the collection\n\t\t * is cleared. Defaults to true.\n\t\t */\n\t\tpersistent: boolean;",
                    "name": "persistent",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 11396,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "A description for the environment variable collection, this will be used to describe the\n changes in the UI.",
                    "isMethod": false,
                    "_": 11402,
                    "source": "\n\n\t\t/**\n\t\t * A description for the environment variable collection, this will be used to describe the\n\t\t * changes in the UI.\n\t\t */\n\t\tdescription: string | MarkdownString | undefined;",
                    "name": "description",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 11402,
                          "source": " string"
                        },
                        {
                          "ref": "MarkdownString",
                          "targs": [],
                          "isNullable": false,
                          "_": 11402,
                          "source": " MarkdownString"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 11402,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 11402,
                      "source": " string | MarkdownString | undefined"
                    }
                  },
                  {
                    "doc": "Replace an environment variable with a value.\n\n Note that an extension can only make a single change to any one variable, so this will\n overwrite any previous calls to replace, append or prepend.\n\n @param variable The variable to replace.\n @param value The value to replace the variable with.\n @param options Options applied to the mutator, when no options are provided this will\n default to `{ applyAtProcessCreation: true }`.",
                    "isMethod": true,
                    "_": 11415,
                    "source": "\n\n\t\t/**\n\t\t * Replace an environment variable with a value.\n\t\t *\n\t\t * Note that an extension can only make a single change to any one variable, so this will\n\t\t * overwrite any previous calls to replace, append or prepend.\n\t\t *\n\t\t * @param variable The variable to replace.\n\t\t * @param value The value to replace the variable with.\n\t\t * @param options Options applied to the mutator, when no options are provided this will\n\t\t * default to `{ applyAtProcessCreation: true }`.\n\t\t */\n\t\treplace(variable: string, value: string, options?: EnvironmentVariableMutatorOptions): void;",
                    "name": "replace",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "variable",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 11415,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "value",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 11415,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "options",
                        "type": {
                          "ref": "EnvironmentVariableMutatorOptions",
                          "targs": [],
                          "isNullable": false,
                          "_": 11415,
                          "source": " EnvironmentVariableMutatorOptions"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 11415,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Append a value to an environment variable.\n\n Note that an extension can only make a single change to any one variable, so this will\n overwrite any previous calls to replace, append or prepend.\n\n @param variable The variable to append to.\n @param value The value to append to the variable.\n @param options Options applied to the mutator, when no options are provided this will\n default to `{ applyAtProcessCreation: true }`.",
                    "isMethod": true,
                    "_": 11428,
                    "source": "\n\n\t\t/**\n\t\t * Append a value to an environment variable.\n\t\t *\n\t\t * Note that an extension can only make a single change to any one variable, so this will\n\t\t * overwrite any previous calls to replace, append or prepend.\n\t\t *\n\t\t * @param variable The variable to append to.\n\t\t * @param value The value to append to the variable.\n\t\t * @param options Options applied to the mutator, when no options are provided this will\n\t\t * default to `{ applyAtProcessCreation: true }`.\n\t\t */\n\t\tappend(variable: string, value: string, options?: EnvironmentVariableMutatorOptions): void;",
                    "name": "append",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "variable",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 11428,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "value",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 11428,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "options",
                        "type": {
                          "ref": "EnvironmentVariableMutatorOptions",
                          "targs": [],
                          "isNullable": false,
                          "_": 11428,
                          "source": " EnvironmentVariableMutatorOptions"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 11428,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Prepend a value to an environment variable.\n\n Note that an extension can only make a single change to any one variable, so this will\n overwrite any previous calls to replace, append or prepend.\n\n @param variable The variable to prepend.\n @param value The value to prepend to the variable.\n @param options Options applied to the mutator, when no options are provided this will\n default to `{ applyAtProcessCreation: true }`.",
                    "isMethod": true,
                    "_": 11441,
                    "source": "\n\n\t\t/**\n\t\t * Prepend a value to an environment variable.\n\t\t *\n\t\t * Note that an extension can only make a single change to any one variable, so this will\n\t\t * overwrite any previous calls to replace, append or prepend.\n\t\t *\n\t\t * @param variable The variable to prepend.\n\t\t * @param value The value to prepend to the variable.\n\t\t * @param options Options applied to the mutator, when no options are provided this will\n\t\t * default to `{ applyAtProcessCreation: true }`.\n\t\t */\n\t\tprepend(variable: string, value: string, options?: EnvironmentVariableMutatorOptions): void;",
                    "name": "prepend",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "variable",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 11441,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "value",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 11441,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "options",
                        "type": {
                          "ref": "EnvironmentVariableMutatorOptions",
                          "targs": [],
                          "isNullable": false,
                          "_": 11441,
                          "source": " EnvironmentVariableMutatorOptions"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 11441,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Gets the mutator that this collection applies to a variable, if any.\n\n @param variable The variable to get the mutator for.",
                    "isMethod": true,
                    "_": 11448,
                    "source": "\n\n\t\t/**\n\t\t * Gets the mutator that this collection applies to a variable, if any.\n\t\t *\n\t\t * @param variable The variable to get the mutator for.\n\t\t */\n\t\tget(variable: string): EnvironmentVariableMutator | undefined;",
                    "name": "get",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "variable",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 11448,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "union": [
                        {
                          "ref": "EnvironmentVariableMutator",
                          "targs": [],
                          "isNullable": false,
                          "_": 11448,
                          "source": " EnvironmentVariableMutator"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 11448,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 11448,
                      "source": " EnvironmentVariableMutator | undefined"
                    }
                  },
                  {
                    "doc": "Iterate over each mutator in this collection.\n\n @param callback Function to execute for each entry.\n @param thisArg The `this` context used when invoking the handler function.",
                    "isMethod": true,
                    "_": 11456,
                    "source": "\n\n\t\t/**\n\t\t * Iterate over each mutator in this collection.\n\t\t *\n\t\t * @param callback Function to execute for each entry.\n\t\t * @param thisArg The `this` context used when invoking the handler function.\n\t\t */\n\t\tforEach(callback: (variable: string, mutator: EnvironmentVariableMutator, collection: EnvironmentVariableCollection) => any, thisArg?: any): void;",
                    "name": "forEach",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "callback",
                        "type": {
                          "ctor": false,
                          "generics": [],
                          "returns": {
                            "core": "any",
                            "isNullable": false,
                            "_": 11456,
                            "source": " any"
                          },
                          "params": [
                            {
                              "name": "variable",
                              "type": {
                                "core": "string",
                                "isNullable": false,
                                "_": 11456,
                                "source": " string"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "mutator",
                              "type": {
                                "ref": "EnvironmentVariableMutator",
                                "targs": [],
                                "isNullable": false,
                                "_": 11456,
                                "source": " EnvironmentVariableMutator"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "collection",
                              "type": {
                                "ref": "EnvironmentVariableCollection",
                                "targs": [],
                                "isNullable": false,
                                "_": 11456,
                                "source": " EnvironmentVariableCollection"
                              },
                              "varargs": false,
                              "isNullable": false
                            }
                          ],
                          "isNullable": false,
                          "_": 11456,
                          "source": " (variable: string, mutator: EnvironmentVariableMutator, collection: EnvironmentVariableCollection) => any"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "thisArg",
                        "type": {
                          "core": "any",
                          "isNullable": false,
                          "_": 11456,
                          "source": " any"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 11456,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Deletes this collection's mutator for a variable.\n\n @param variable The variable to delete the mutator for.",
                    "isMethod": true,
                    "_": 11463,
                    "source": "\n\n\t\t/**\n\t\t * Deletes this collection's mutator for a variable.\n\t\t *\n\t\t * @param variable The variable to delete the mutator for.\n\t\t */\n\t\tdelete(variable: string): void;",
                    "name": "delete",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "variable",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 11463,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 11463,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Clears all mutators from this collection.",
                    "isMethod": true,
                    "_": 11468,
                    "source": "\n\n\t\t/**\n\t\t * Clears all mutators from this collection.\n\t\t */\n\t\tclear(): void;",
                    "name": "clear",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 11468,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 11474,
                "name": "GlobalEnvironmentVariableCollection",
                "generics": [],
                "doc": "A collection of mutations that an extension can apply to a process environment. Applies to all scopes.",
                "heritage": [
                  [
                    {
                      "ref": "EnvironmentVariableCollection",
                      "targs": [],
                      "isNullable": false,
                      "_": 11474,
                      "source": " EnvironmentVariableCollection"
                    }
                  ]
                ],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Gets scope-specific environment variable collection for the extension. This enables alterations to\n terminal environment variables solely within the designated scope, and is applied in addition to (and\n after) the global collection.\n\n Each object obtained through this method is isolated and does not impact objects for other scopes,\n including the global collection.\n\n @param scope The scope to which the environment variable collection applies to.\n\n If a scope parameter is omitted, collection applicable to all relevant scopes for that parameter is\n returned. For instance, if the 'workspaceFolder' parameter is not specified, the collection that applies\n across all workspace folders will be returned.\n\n @return Environment variable collection for the passed in scope.",
                    "isMethod": true,
                    "_": 11491,
                    "source": "\n\t\t/**\n\t\t * Gets scope-specific environment variable collection for the extension. This enables alterations to\n\t\t * terminal environment variables solely within the designated scope, and is applied in addition to (and\n\t\t * after) the global collection.\n\t\t *\n\t\t * Each object obtained through this method is isolated and does not impact objects for other scopes,\n\t\t * including the global collection.\n\t\t *\n\t\t * @param scope The scope to which the environment variable collection applies to.\n\t\t *\n\t\t * If a scope parameter is omitted, collection applicable to all relevant scopes for that parameter is\n\t\t * returned. For instance, if the 'workspaceFolder' parameter is not specified, the collection that applies\n\t\t * across all workspace folders will be returned.\n\t\t *\n\t\t * @return Environment variable collection for the passed in scope.\n\t\t */\n\t\tgetScoped(scope: EnvironmentVariableScope): EnvironmentVariableCollection;",
                    "name": "getScoped",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "scope",
                        "type": {
                          "ref": "EnvironmentVariableScope",
                          "targs": [],
                          "isNullable": false,
                          "_": 11491,
                          "source": " EnvironmentVariableScope"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "EnvironmentVariableCollection",
                      "targs": [],
                      "isNullable": false,
                      "_": 11491,
                      "source": " EnvironmentVariableCollection"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 11497,
                "name": "EnvironmentVariableScope",
                "generics": [],
                "doc": "The scope object to which the environment variable collection applies.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Any specific workspace folder to get collection for.",
                    "isMethod": false,
                    "_": 11501,
                    "source": "\n\t\t/**\n\t\t * Any specific workspace folder to get collection for.\n\t\t */\n\t\tworkspaceFolder?: WorkspaceFolder;",
                    "name": "workspaceFolder",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "WorkspaceFolder",
                      "targs": [],
                      "isNullable": false,
                      "_": 11501,
                      "source": " WorkspaceFolder"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline60",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "ProgressOptions",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 11538,
                    "source": " viewId: string",
                    "name": "viewId",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 11538,
                      "source": " string"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 11533,
                "name": "ProgressOptions",
                "generics": [],
                "doc": "Value-object describing where and how progress should show.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The location at which progress should show.",
                    "isMethod": false,
                    "_": 11538,
                    "source": "\n\n\t\t/**\n\t\t * The location at which progress should show.\n\t\t */\n\t\tlocation: ProgressLocation | { viewId: string };",
                    "name": "location",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "ProgressLocation",
                          "targs": [],
                          "isNullable": false,
                          "_": 11538,
                          "source": " ProgressLocation"
                        },
                        {
                          "ref": "IInline60",
                          "targs": [],
                          "isNullable": false,
                          "_": 11538,
                          "source": " { viewId: string }"
                        }
                      ],
                      "isNullable": false,
                      "_": 11538,
                      "source": " ProgressLocation | { viewId: string }"
                    }
                  },
                  {
                    "doc": "A human-readable string which will be used to describe the\n operation.",
                    "isMethod": false,
                    "_": 11544,
                    "source": "\n\n\t\t/**\n\t\t * A human-readable string which will be used to describe the\n\t\t * operation.\n\t\t */\n\t\ttitle?: string;",
                    "name": "title",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 11544,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Controls if a cancel button should show to allow the user to\n cancel the long running operation.  Note that currently only\n `ProgressLocation.Notification` is supporting to show a cancel\n button.",
                    "isMethod": false,
                    "_": 11552,
                    "source": "\n\n\t\t/**\n\t\t * Controls if a cancel button should show to allow the user to\n\t\t * cancel the long running operation.  Note that currently only\n\t\t * `ProgressLocation.Notification` is supporting to show a cancel\n\t\t * button.\n\t\t */\n\t\tcancellable?: boolean;",
                    "name": "cancellable",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 11552,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 11576,
                "name": "QuickInput",
                "generics": [],
                "doc": "A light-weight user input UI that is initially not visible. After\nconfiguring it through its properties the extension can make it\nvisible by calling {@link QuickInput.show}.\n\nThere are several reasons why this UI might have to be hidden and\nthe extension will be notified through {@link QuickInput.onDidHide}.\n(Examples include: an explicit call to {@link QuickInput.hide},\nthe user pressing Esc, some other input UI opening, etc.)\n\nA user pressing Enter or some other gesture implying acceptance\nof the current state does not automatically hide this UI component.\nIt is up to the extension to decide whether to accept the user's input\nand if the UI should indeed be hidden through a call to {@link QuickInput.hide}.\n\nWhen the extension no longer needs this input UI, it should\n{@link QuickInput.dispose} it to allow for freeing up\nany resources associated with it.\n\nSee {@link QuickPick} and {@link InputBox} for concrete UIs.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "An optional title.",
                    "isMethod": false,
                    "_": 11581,
                    "source": "\n\n\t\t/**\n\t\t * An optional title.\n\t\t */\n\t\ttitle: string | undefined;",
                    "name": "title",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 11581,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 11581,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 11581,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "An optional current step count.",
                    "isMethod": false,
                    "_": 11586,
                    "source": "\n\n\t\t/**\n\t\t * An optional current step count.\n\t\t */\n\t\tstep: number | undefined;",
                    "name": "step",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 11586,
                          "source": " number"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 11586,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 11586,
                      "source": " number | undefined"
                    }
                  },
                  {
                    "doc": "An optional total step count.",
                    "isMethod": false,
                    "_": 11591,
                    "source": "\n\n\t\t/**\n\t\t * An optional total step count.\n\t\t */\n\t\ttotalSteps: number | undefined;",
                    "name": "totalSteps",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 11591,
                          "source": " number"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 11591,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 11591,
                      "source": " number | undefined"
                    }
                  },
                  {
                    "doc": "If the UI should allow for user input. Defaults to true.\n\n Change this to false, e.g., while validating user input or\n loading data for the next step in user input.",
                    "isMethod": false,
                    "_": 11599,
                    "source": "\n\n\t\t/**\n\t\t * If the UI should allow for user input. Defaults to true.\n\t\t *\n\t\t * Change this to false, e.g., while validating user input or\n\t\t * loading data for the next step in user input.\n\t\t */\n\t\tenabled: boolean;",
                    "name": "enabled",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 11599,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "If the UI should show a progress indicator. Defaults to false.\n\n Change this to true, e.g., while loading more data or validating\n user input.",
                    "isMethod": false,
                    "_": 11607,
                    "source": "\n\n\t\t/**\n\t\t * If the UI should show a progress indicator. Defaults to false.\n\t\t *\n\t\t * Change this to true, e.g., while loading more data or validating\n\t\t * user input.\n\t\t */\n\t\tbusy: boolean;",
                    "name": "busy",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 11607,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "If the UI should stay open even when loosing UI focus. Defaults to false.\n This setting is ignored on iPad and is always false.",
                    "isMethod": false,
                    "_": 11613,
                    "source": "\n\n\t\t/**\n\t\t * If the UI should stay open even when loosing UI focus. Defaults to false.\n\t\t * This setting is ignored on iPad and is always false.\n\t\t */\n\t\tignoreFocusOut: boolean;",
                    "name": "ignoreFocusOut",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 11613,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Makes the input UI visible in its current configuration. Any other input\n UI will first fire an {@link QuickInput.onDidHide} event.",
                    "isMethod": true,
                    "_": 11619,
                    "source": "\n\n\t\t/**\n\t\t * Makes the input UI visible in its current configuration. Any other input\n\t\t * UI will first fire an {@link QuickInput.onDidHide} event.\n\t\t */\n\t\tshow(): void;",
                    "name": "show",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 11619,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Hides this input UI. This will also fire an {@link QuickInput.onDidHide}\n event.",
                    "isMethod": true,
                    "_": 11625,
                    "source": "\n\n\t\t/**\n\t\t * Hides this input UI. This will also fire an {@link QuickInput.onDidHide}\n\t\t * event.\n\t\t */\n\t\thide(): void;",
                    "name": "hide",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 11625,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "An event signaling when this input UI is hidden.\n\n There are several reasons why this UI might have to be hidden and\n the extension will be notified through {@link QuickInput.onDidHide}.\n (Examples include: an explicit call to {@link QuickInput.hide},\n the user pressing Esc, some other input UI opening, etc.)",
                    "isMethod": false,
                    "_": 11635,
                    "source": "\n\n\t\t/**\n\t\t * An event signaling when this input UI is hidden.\n\t\t *\n\t\t * There are several reasons why this UI might have to be hidden and\n\t\t * the extension will be notified through {@link QuickInput.onDidHide}.\n\t\t * (Examples include: an explicit call to {@link QuickInput.hide},\n\t\t * the user pressing Esc, some other input UI opening, etc.)\n\t\t */\n\t\tonDidHide: Event<void>;",
                    "name": "onDidHide",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 11635,
                          "source": "void"
                        }
                      ],
                      "isNullable": false,
                      "_": 11635,
                      "source": " Event<void>"
                    }
                  },
                  {
                    "doc": "Dispose of this input UI and any associated resources. If it is still\n visible, it is first hidden. After this call the input UI is no longer\n functional and no additional methods or properties on it should be\n accessed. Instead a new input UI should be created.",
                    "isMethod": true,
                    "_": 11643,
                    "source": "\n\n\t\t/**\n\t\t * Dispose of this input UI and any associated resources. If it is still\n\t\t * visible, it is first hidden. After this call the input UI is no longer\n\t\t * functional and no additional methods or properties on it should be\n\t\t * accessed. Instead a new input UI should be created.\n\t\t */\n\t\tdispose(): void;",
                    "name": "dispose",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 11643,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 11656,
                "name": "QuickPick",
                "generics": [
                  {
                    "name": "T",
                    "constraint": {
                      "ref": "QuickPickItem",
                      "targs": [],
                      "isNullable": false,
                      "_": 11656,
                      "source": " QuickPickItem"
                    },
                    "_": 11656,
                    "source": "T extends QuickPickItem"
                  }
                ],
                "doc": "A concrete {@link QuickInput} to let the user pick an item from a\nlist of items of type T. The items can be filtered through a filter text field and\nthere is an option {@link QuickPick.canSelectManycanSelectMany} to allow for\nselecting multiple items.\n\nNote that in many cases the more convenient {@link window.showQuickPick}\nis easier to use. {@link window.createQuickPick} should be used\nwhen {@link window.showQuickPick} does not offer the required flexibility.",
                "heritage": [
                  [
                    {
                      "ref": "QuickInput",
                      "targs": [],
                      "isNullable": false,
                      "_": 11656,
                      "source": " QuickInput"
                    }
                  ]
                ],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Current value of the filter text.",
                    "isMethod": false,
                    "_": 11661,
                    "source": "\n\n\t\t/**\n\t\t * Current value of the filter text.\n\t\t */\n\t\tvalue: string;",
                    "name": "value",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 11661,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Optional placeholder shown in the filter textbox when no filter has been entered.",
                    "isMethod": false,
                    "_": 11666,
                    "source": "\n\n\t\t/**\n\t\t * Optional placeholder shown in the filter textbox when no filter has been entered.\n\t\t */\n\t\tplaceholder: string | undefined;",
                    "name": "placeholder",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 11666,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 11666,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 11666,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "An event signaling when the value of the filter text has changed.",
                    "isMethod": false,
                    "_": 11671,
                    "source": "\n\n\t\t/**\n\t\t * An event signaling when the value of the filter text has changed.\n\t\t */\n\t\treadonly onDidChangeValue: Event<string>;",
                    "name": "onDidChangeValue",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 11671,
                          "source": "string"
                        }
                      ],
                      "isNullable": false,
                      "_": 11671,
                      "source": " Event<string>"
                    }
                  },
                  {
                    "doc": "An event signaling when the user indicated acceptance of the selected item(s).",
                    "isMethod": false,
                    "_": 11676,
                    "source": "\n\n\t\t/**\n\t\t * An event signaling when the user indicated acceptance of the selected item(s).\n\t\t */\n\t\treadonly onDidAccept: Event<void>;",
                    "name": "onDidAccept",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 11676,
                          "source": "void"
                        }
                      ],
                      "isNullable": false,
                      "_": 11676,
                      "source": " Event<void>"
                    }
                  },
                  {
                    "doc": "Buttons for actions in the UI.",
                    "isMethod": false,
                    "_": 11681,
                    "source": "\n\n\t\t/**\n\t\t * Buttons for actions in the UI.\n\t\t */\n\t\tbuttons: readonly QuickInputButton[];",
                    "name": "buttons",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "QuickInputButton",
                            "targs": [],
                            "isNullable": false,
                            "_": 11681,
                            "source": " QuickInputButton"
                          }
                        ],
                        "isNullable": false,
                        "_": 11681,
                        "source": " QuickInputButton[]"
                      },
                      "isNullable": false,
                      "_": 11681,
                      "source": " readonly QuickInputButton[]"
                    }
                  },
                  {
                    "doc": "An event signaling when a button in the title bar was triggered.\nThis event does not fire for buttons on a {@link QuickPickItem}.",
                    "isMethod": false,
                    "_": 11687,
                    "source": "\n\n\t\t/**\n\t\t * An event signaling when a button in the title bar was triggered.\n\t\t * This event does not fire for buttons on a {@link QuickPickItem}.\n\t\t */\n\t\treadonly onDidTriggerButton: Event<QuickInputButton>;",
                    "name": "onDidTriggerButton",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "ref": "QuickInputButton",
                          "targs": [],
                          "isNullable": false,
                          "_": 11687,
                          "source": "QuickInputButton"
                        }
                      ],
                      "isNullable": false,
                      "_": 11687,
                      "source": " Event<QuickInputButton>"
                    }
                  },
                  {
                    "doc": "An event signaling when a button in a particular {@link QuickPickItem} was triggered.\nThis event does not fire for buttons in the title bar.",
                    "isMethod": false,
                    "_": 11693,
                    "source": "\n\n\t\t/**\n\t\t * An event signaling when a button in a particular {@link QuickPickItem} was triggered.\n\t\t * This event does not fire for buttons in the title bar.\n\t\t */\n\t\treadonly onDidTriggerItemButton: Event<QuickPickItemButtonEvent<T>>;",
                    "name": "onDidTriggerItemButton",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "ref": "QuickPickItemButtonEvent",
                          "targs": [
                            {
                              "ref": "T",
                              "targs": [],
                              "isNullable": false,
                              "_": 11693,
                              "source": "T"
                            }
                          ],
                          "isNullable": false,
                          "_": 11693,
                          "source": "QuickPickItemButtonEvent<T>"
                        }
                      ],
                      "isNullable": false,
                      "_": 11693,
                      "source": " Event<QuickPickItemButtonEvent<T>>"
                    }
                  },
                  {
                    "doc": "Items to pick from. This can be read and updated by the extension.",
                    "isMethod": false,
                    "_": 11698,
                    "source": "\n\n\t\t/**\n\t\t * Items to pick from. This can be read and updated by the extension.\n\t\t */\n\t\titems: readonly T[];",
                    "name": "items",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "T",
                            "targs": [],
                            "isNullable": false,
                            "_": 11698,
                            "source": " T"
                          }
                        ],
                        "isNullable": false,
                        "_": 11698,
                        "source": " T[]"
                      },
                      "isNullable": false,
                      "_": 11698,
                      "source": " readonly T[]"
                    }
                  },
                  {
                    "doc": "If multiple items can be selected at the same time. Defaults to false.",
                    "isMethod": false,
                    "_": 11703,
                    "source": "\n\n\t\t/**\n\t\t * If multiple items can be selected at the same time. Defaults to false.\n\t\t */\n\t\tcanSelectMany: boolean;",
                    "name": "canSelectMany",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 11703,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "If the filter text should also be matched against the description of the items. Defaults to false.",
                    "isMethod": false,
                    "_": 11708,
                    "source": "\n\n\t\t/**\n\t\t * If the filter text should also be matched against the description of the items. Defaults to false.\n\t\t */\n\t\tmatchOnDescription: boolean;",
                    "name": "matchOnDescription",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 11708,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "If the filter text should also be matched against the detail of the items. Defaults to false.",
                    "isMethod": false,
                    "_": 11713,
                    "source": "\n\n\t\t/**\n\t\t * If the filter text should also be matched against the detail of the items. Defaults to false.\n\t\t */\n\t\tmatchOnDetail: boolean;",
                    "name": "matchOnDetail",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 11713,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 11718,
                    "source": "\n\n\t\t/*\n\t\t * An optional flag to maintain the scroll position of the quick pick when the quick pick items are updated. Defaults to false.\n\t\t */\n\t\tkeepScrollPosition?: boolean;",
                    "name": "keepScrollPosition",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 11718,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Active items. This can be read and updated by the extension.",
                    "isMethod": false,
                    "_": 11723,
                    "source": "\n\n\t\t/**\n\t\t * Active items. This can be read and updated by the extension.\n\t\t */\n\t\tactiveItems: readonly T[];",
                    "name": "activeItems",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "T",
                            "targs": [],
                            "isNullable": false,
                            "_": 11723,
                            "source": " T"
                          }
                        ],
                        "isNullable": false,
                        "_": 11723,
                        "source": " T[]"
                      },
                      "isNullable": false,
                      "_": 11723,
                      "source": " readonly T[]"
                    }
                  },
                  {
                    "doc": "An event signaling when the active items have changed.",
                    "isMethod": false,
                    "_": 11728,
                    "source": "\n\n\t\t/**\n\t\t * An event signaling when the active items have changed.\n\t\t */\n\t\treadonly onDidChangeActive: Event<readonly T[]>;",
                    "name": "onDidChangeActive",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "operator": 146,
                          "type": {
                            "core": "array",
                            "targs": [
                              {
                                "ref": "T",
                                "targs": [],
                                "isNullable": false,
                                "_": 11728,
                                "source": " T"
                              }
                            ],
                            "isNullable": false,
                            "_": 11728,
                            "source": " T[]"
                          },
                          "isNullable": false,
                          "_": 11728,
                          "source": "readonly T[]"
                        }
                      ],
                      "isNullable": false,
                      "_": 11728,
                      "source": " Event<readonly T[]>"
                    }
                  },
                  {
                    "doc": "Selected items. This can be read and updated by the extension.",
                    "isMethod": false,
                    "_": 11733,
                    "source": "\n\n\t\t/**\n\t\t * Selected items. This can be read and updated by the extension.\n\t\t */\n\t\tselectedItems: readonly T[];",
                    "name": "selectedItems",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "T",
                            "targs": [],
                            "isNullable": false,
                            "_": 11733,
                            "source": " T"
                          }
                        ],
                        "isNullable": false,
                        "_": 11733,
                        "source": " T[]"
                      },
                      "isNullable": false,
                      "_": 11733,
                      "source": " readonly T[]"
                    }
                  },
                  {
                    "doc": "An event signaling when the selected items have changed.",
                    "isMethod": false,
                    "_": 11738,
                    "source": "\n\n\t\t/**\n\t\t * An event signaling when the selected items have changed.\n\t\t */\n\t\treadonly onDidChangeSelection: Event<readonly T[]>;",
                    "name": "onDidChangeSelection",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "operator": 146,
                          "type": {
                            "core": "array",
                            "targs": [
                              {
                                "ref": "T",
                                "targs": [],
                                "isNullable": false,
                                "_": 11738,
                                "source": " T"
                              }
                            ],
                            "isNullable": false,
                            "_": 11738,
                            "source": " T[]"
                          },
                          "isNullable": false,
                          "_": 11738,
                          "source": "readonly T[]"
                        }
                      ],
                      "isNullable": false,
                      "_": 11738,
                      "source": " Event<readonly T[]>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 11748,
                "name": "InputBox",
                "generics": [],
                "doc": "A concrete {@link QuickInput} to let the user input a text value.\n\nNote that in many cases the more convenient {@link window.showInputBox}\nis easier to use. {@link window.createInputBox} should be used\nwhen {@link window.showInputBox} does not offer the required flexibility.",
                "heritage": [
                  [
                    {
                      "ref": "QuickInput",
                      "targs": [],
                      "isNullable": false,
                      "_": 11748,
                      "source": " QuickInput"
                    }
                  ]
                ],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Current input value.",
                    "isMethod": false,
                    "_": 11753,
                    "source": "\n\n\t\t/**\n\t\t * Current input value.\n\t\t */\n\t\tvalue: string;",
                    "name": "value",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 11753,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Selection range in the input value. Defined as tuple of two number where the\n first is the inclusive start index and the second the exclusive end index. When `undefined` the whole\n pre-filled value will be selected, when empty (start equals end) only the cursor will be set,\n otherwise the defined range will be selected.\n\n This property does not get updated when the user types or makes a selection,\n but it can be updated by the extension.",
                    "isMethod": false,
                    "_": 11764,
                    "source": "\n\n\t\t/**\n\t\t * Selection range in the input value. Defined as tuple of two number where the\n\t\t * first is the inclusive start index and the second the exclusive end index. When `undefined` the whole\n\t\t * pre-filled value will be selected, when empty (start equals end) only the cursor will be set,\n\t\t * otherwise the defined range will be selected.\n\t\t *\n\t\t * This property does not get updated when the user types or makes a selection,\n\t\t * but it can be updated by the extension.\n\t\t */\n\t\tvalueSelection: readonly [number, number] | undefined;",
                    "name": "valueSelection",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "operator": 146,
                          "type": {
                            "tuple": [
                              {
                                "core": "number",
                                "isNullable": false,
                                "_": 11764,
                                "source": "number"
                              },
                              {
                                "core": "number",
                                "isNullable": false,
                                "_": 11764,
                                "source": " number"
                              }
                            ],
                            "isNullable": false,
                            "_": 11764,
                            "source": " [number, number]"
                          },
                          "isNullable": false,
                          "_": 11764,
                          "source": " readonly [number, number]"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 11764,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 11764,
                      "source": " readonly [number, number] | undefined"
                    }
                  },
                  {
                    "doc": "Optional placeholder shown when no value has been input.",
                    "isMethod": false,
                    "_": 11769,
                    "source": "\n\n\t\t/**\n\t\t * Optional placeholder shown when no value has been input.\n\t\t */\n\t\tplaceholder: string | undefined;",
                    "name": "placeholder",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 11769,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 11769,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 11769,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "If the input value should be hidden. Defaults to false.",
                    "isMethod": false,
                    "_": 11774,
                    "source": "\n\n\t\t/**\n\t\t * If the input value should be hidden. Defaults to false.\n\t\t */\n\t\tpassword: boolean;",
                    "name": "password",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 11774,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "An event signaling when the value has changed.",
                    "isMethod": false,
                    "_": 11779,
                    "source": "\n\n\t\t/**\n\t\t * An event signaling when the value has changed.\n\t\t */\n\t\treadonly onDidChangeValue: Event<string>;",
                    "name": "onDidChangeValue",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 11779,
                          "source": "string"
                        }
                      ],
                      "isNullable": false,
                      "_": 11779,
                      "source": " Event<string>"
                    }
                  },
                  {
                    "doc": "An event signaling when the user indicated acceptance of the input value.",
                    "isMethod": false,
                    "_": 11784,
                    "source": "\n\n\t\t/**\n\t\t * An event signaling when the user indicated acceptance of the input value.\n\t\t */\n\t\treadonly onDidAccept: Event<void>;",
                    "name": "onDidAccept",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 11784,
                          "source": "void"
                        }
                      ],
                      "isNullable": false,
                      "_": 11784,
                      "source": " Event<void>"
                    }
                  },
                  {
                    "doc": "Buttons for actions in the UI.",
                    "isMethod": false,
                    "_": 11789,
                    "source": "\n\n\t\t/**\n\t\t * Buttons for actions in the UI.\n\t\t */\n\t\tbuttons: readonly QuickInputButton[];",
                    "name": "buttons",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "QuickInputButton",
                            "targs": [],
                            "isNullable": false,
                            "_": 11789,
                            "source": " QuickInputButton"
                          }
                        ],
                        "isNullable": false,
                        "_": 11789,
                        "source": " QuickInputButton[]"
                      },
                      "isNullable": false,
                      "_": 11789,
                      "source": " readonly QuickInputButton[]"
                    }
                  },
                  {
                    "doc": "An event signaling when a button was triggered.",
                    "isMethod": false,
                    "_": 11794,
                    "source": "\n\n\t\t/**\n\t\t * An event signaling when a button was triggered.\n\t\t */\n\t\treadonly onDidTriggerButton: Event<QuickInputButton>;",
                    "name": "onDidTriggerButton",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "ref": "QuickInputButton",
                          "targs": [],
                          "isNullable": false,
                          "_": 11794,
                          "source": "QuickInputButton"
                        }
                      ],
                      "isNullable": false,
                      "_": 11794,
                      "source": " Event<QuickInputButton>"
                    }
                  },
                  {
                    "doc": "An optional prompt text providing some ask or explanation to the user.",
                    "isMethod": false,
                    "_": 11799,
                    "source": "\n\n\t\t/**\n\t\t * An optional prompt text providing some ask or explanation to the user.\n\t\t */\n\t\tprompt: string | undefined;",
                    "name": "prompt",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 11799,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 11799,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 11799,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "An optional validation message indicating a problem with the current input value.\n By returning a string, the InputBox will use a default {@link InputBoxValidationSeverity} of Error.\n Returning undefined clears the validation message.",
                    "isMethod": false,
                    "_": 11806,
                    "source": "\n\n\t\t/**\n\t\t * An optional validation message indicating a problem with the current input value.\n\t\t * By returning a string, the InputBox will use a default {@link InputBoxValidationSeverity} of Error.\n\t\t * Returning undefined clears the validation message.\n\t\t */\n\t\tvalidationMessage: string | InputBoxValidationMessage | undefined;",
                    "name": "validationMessage",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 11806,
                          "source": " string"
                        },
                        {
                          "ref": "InputBoxValidationMessage",
                          "targs": [],
                          "isNullable": false,
                          "_": 11806,
                          "source": " InputBoxValidationMessage"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 11806,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 11806,
                      "source": " string | InputBoxValidationMessage | undefined"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline61",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "QuickInputButton",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 11817,
                    "source": " light: Uri;",
                    "name": "light",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 11817,
                      "source": " Uri"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 11817,
                    "source": " dark: Uri",
                    "name": "dark",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 11817,
                      "source": " Uri"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 11812,
                "name": "QuickInputButton",
                "generics": [],
                "doc": "Button for an action in a {@link QuickPick} or {@link InputBox}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Icon for the button.",
                    "isMethod": false,
                    "_": 11817,
                    "source": "\n\n\t\t/**\n\t\t * Icon for the button.\n\t\t */\n\t\treadonly iconPath: Uri | { light: Uri; dark: Uri } | ThemeIcon;",
                    "name": "iconPath",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 11817,
                          "source": " Uri"
                        },
                        {
                          "ref": "IInline61",
                          "targs": [],
                          "isNullable": false,
                          "_": 11817,
                          "source": " { light: Uri; dark: Uri }"
                        },
                        {
                          "ref": "ThemeIcon",
                          "targs": [],
                          "isNullable": false,
                          "_": 11817,
                          "source": " ThemeIcon"
                        }
                      ],
                      "isNullable": false,
                      "_": 11817,
                      "source": " Uri | { light: Uri; dark: Uri } | ThemeIcon"
                    }
                  },
                  {
                    "doc": "An optional tooltip.",
                    "isMethod": false,
                    "_": 11822,
                    "source": "\n\n\t\t/**\n\t\t * An optional tooltip.\n\t\t */\n\t\treadonly tooltip?: string | undefined;",
                    "name": "tooltip",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 11822,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 11822,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 11822,
                      "source": " string | undefined"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 11828,
                "name": "QuickInputButtons",
                "generics": [],
                "doc": "Predefined buttons for {@link QuickPick} and {@link InputBox}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 11841,
                    "source": "\n\n\t\t/**\n\t\t * @hidden\n\t\t */\n\t\tprivate constructor();",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": true,
                    "params": []
                  }
                ],
                "members": [
                  {
                    "doc": "A back button for {@link QuickPick} and {@link InputBox}.\n\nWhen a navigation 'back' button is needed this one should be used for consistency.\nIt comes with a predefined icon, tooltip and location.",
                    "isMethod": false,
                    "_": 11836,
                    "source": "\n\n\t\t/**\n\t\t * A back button for {@link QuickPick} and {@link InputBox}.\n\t\t *\n\t\t * When a navigation 'back' button is needed this one should be used for consistency.\n\t\t * It comes with a predefined icon, tooltip and location.\n\t\t */\n\t\tstatic readonly Back: QuickInputButton;",
                    "name": "Back",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "QuickInputButton",
                      "targs": [],
                      "isNullable": false,
                      "_": 11836,
                      "source": " QuickInputButton"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 11848,
                "name": "QuickPickItemButtonEvent",
                "generics": [
                  {
                    "name": "T",
                    "constraint": {
                      "ref": "QuickPickItem",
                      "targs": [],
                      "isNullable": false,
                      "_": 11848,
                      "source": " QuickPickItem"
                    },
                    "_": 11848,
                    "source": "T extends QuickPickItem"
                  }
                ],
                "doc": "An event signaling when a button in a particular {@link QuickPickItem} was triggered.\nThis event does not fire for buttons in the title bar.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The button that was clicked.",
                    "isMethod": false,
                    "_": 11852,
                    "source": "\n\t\t/**\n\t\t * The button that was clicked.\n\t\t */\n\t\treadonly button: QuickInputButton;",
                    "name": "button",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "QuickInputButton",
                      "targs": [],
                      "isNullable": false,
                      "_": 11852,
                      "source": " QuickInputButton"
                    }
                  },
                  {
                    "doc": "The item that the button belongs to.",
                    "isMethod": false,
                    "_": 11856,
                    "source": "\n\t\t/**\n\t\t * The item that the button belongs to.\n\t\t */\n\t\treadonly item: T;",
                    "name": "item",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "T",
                      "targs": [],
                      "isNullable": false,
                      "_": 11856,
                      "source": " T"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 11862,
                "name": "TextDocumentContentChangeEvent",
                "generics": [],
                "doc": "An event describing an individual change in the text of a {@link TextDocumentdocument}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The range that got replaced.",
                    "isMethod": false,
                    "_": 11866,
                    "source": "\n\t\t/**\n\t\t * The range that got replaced.\n\t\t */\n\t\treadonly range: Range;",
                    "name": "range",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Range",
                      "targs": [],
                      "isNullable": false,
                      "_": 11866,
                      "source": " Range"
                    }
                  },
                  {
                    "doc": "The offset of the range that got replaced.",
                    "isMethod": false,
                    "_": 11870,
                    "source": "\n\t\t/**\n\t\t * The offset of the range that got replaced.\n\t\t */\n\t\treadonly rangeOffset: number;",
                    "name": "rangeOffset",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 11870,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "The length of the range that got replaced.",
                    "isMethod": false,
                    "_": 11874,
                    "source": "\n\t\t/**\n\t\t * The length of the range that got replaced.\n\t\t */\n\t\treadonly rangeLength: number;",
                    "name": "rangeLength",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 11874,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "The new text for the range.",
                    "isMethod": false,
                    "_": 11878,
                    "source": "\n\t\t/**\n\t\t * The new text for the range.\n\t\t */\n\t\treadonly text: string;",
                    "name": "text",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 11878,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 11892,
                "name": "TextDocumentChangeEvent",
                "generics": [],
                "doc": "An event describing a transactional {@link TextDocumentdocument} change.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The affected document.",
                    "isMethod": false,
                    "_": 11897,
                    "source": "\n\n\t\t/**\n\t\t * The affected document.\n\t\t */\n\t\treadonly document: TextDocument;",
                    "name": "document",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "TextDocument",
                      "targs": [],
                      "isNullable": false,
                      "_": 11897,
                      "source": " TextDocument"
                    }
                  },
                  {
                    "doc": "An array of content changes.",
                    "isMethod": false,
                    "_": 11902,
                    "source": "\n\n\t\t/**\n\t\t * An array of content changes.\n\t\t */\n\t\treadonly contentChanges: readonly TextDocumentContentChangeEvent[];",
                    "name": "contentChanges",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "TextDocumentContentChangeEvent",
                            "targs": [],
                            "isNullable": false,
                            "_": 11902,
                            "source": " TextDocumentContentChangeEvent"
                          }
                        ],
                        "isNullable": false,
                        "_": 11902,
                        "source": " TextDocumentContentChangeEvent[]"
                      },
                      "isNullable": false,
                      "_": 11902,
                      "source": " readonly TextDocumentContentChangeEvent[]"
                    }
                  },
                  {
                    "doc": "The reason why the document was changed.\nIs `undefined` if the reason is not known.",
                    "isMethod": false,
                    "_": 11908,
                    "source": "\n\n\t\t/**\n\t\t * The reason why the document was changed.\n\t\t * Is `undefined` if the reason is not known.\n\t\t*/\n\t\treadonly reason: TextDocumentChangeReason | undefined;",
                    "name": "reason",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "TextDocumentChangeReason",
                          "targs": [],
                          "isNullable": false,
                          "_": 11908,
                          "source": " TextDocumentChangeReason"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 11908,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 11908,
                      "source": " TextDocumentChangeReason | undefined"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 11940,
                "name": "TextDocumentWillSaveEvent",
                "generics": [],
                "doc": "An event that is fired when a {@link TextDocumentdocument} will be saved.\n\nTo make modifications to the document before it is being saved, call the\n{@linkcode TextDocumentWillSaveEvent.waitUntilwaitUntil}-function with a thenable\nthat resolves to an array of {@link TextEdittext edits}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The document that will be saved.",
                    "isMethod": false,
                    "_": 11945,
                    "source": "\n\n\t\t/**\n\t\t * The document that will be saved.\n\t\t */\n\t\treadonly document: TextDocument;",
                    "name": "document",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "TextDocument",
                      "targs": [],
                      "isNullable": false,
                      "_": 11945,
                      "source": " TextDocument"
                    }
                  },
                  {
                    "doc": "The reason why save was triggered.",
                    "isMethod": false,
                    "_": 11950,
                    "source": "\n\n\t\t/**\n\t\t * The reason why save was triggered.\n\t\t */\n\t\treadonly reason: TextDocumentSaveReason;",
                    "name": "reason",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "TextDocumentSaveReason",
                      "targs": [],
                      "isNullable": false,
                      "_": 11950,
                      "source": " TextDocumentSaveReason"
                    }
                  },
                  {
                    "doc": "Allows to pause the event loop and to apply {@link TextEdit pre-save-edits}.\n Edits of subsequent calls to this function will be applied in order. The\n edits will be *ignored* if concurrent modifications of the document happened.\n\n *Note:* This function can only be called during event dispatch and not\n in an asynchronous manner:\n\n ```ts\n workspace.onWillSaveTextDocument(event => {\n \t// async, will *throw* an error\n \tsetTimeout(() => event.waitUntil(promise));\n\n \t// sync, OK\n \tevent.waitUntil(promise);\n })\n ```\n\n @param thenable A thenable that resolves to {@link TextEdit pre-save-edits}.",
                    "isMethod": true,
                    "_": 11972,
                    "source": "\n\n\t\t/**\n\t\t * Allows to pause the event loop and to apply {@link TextEdit pre-save-edits}.\n\t\t * Edits of subsequent calls to this function will be applied in order. The\n\t\t * edits will be *ignored* if concurrent modifications of the document happened.\n\t\t *\n\t\t * *Note:* This function can only be called during event dispatch and not\n\t\t * in an asynchronous manner:\n\t\t *\n\t\t * ```ts\n\t\t * workspace.onWillSaveTextDocument(event => {\n\t\t * \t// async, will *throw* an error\n\t\t * \tsetTimeout(() => event.waitUntil(promise));\n\t\t *\n\t\t * \t// sync, OK\n\t\t * \tevent.waitUntil(promise);\n\t\t * })\n\t\t * ```\n\t\t *\n\t\t * @param thenable A thenable that resolves to {@link TextEdit pre-save-edits}.\n\t\t */\n\t\twaitUntil(thenable: Thenable<readonly TextEdit[]>): void;",
                    "name": "waitUntil",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "thenable",
                        "type": {
                          "ref": "Thenable",
                          "targs": [
                            {
                              "operator": 146,
                              "type": {
                                "core": "array",
                                "targs": [
                                  {
                                    "ref": "TextEdit",
                                    "targs": [],
                                    "isNullable": false,
                                    "_": 11972,
                                    "source": " TextEdit"
                                  }
                                ],
                                "isNullable": false,
                                "_": 11972,
                                "source": " TextEdit[]"
                              },
                              "isNullable": false,
                              "_": 11972,
                              "source": "readonly TextEdit[]"
                            }
                          ],
                          "isNullable": false,
                          "_": 11972,
                          "source": " Thenable<readonly TextEdit[]>"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 11972,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Allows to pause the event loop until the provided thenable resolved.\n\n *Note:* This function can only be called during event dispatch.\n\n @param thenable A thenable that delays saving.",
                    "isMethod": true,
                    "_": 11981,
                    "source": "\n\n\t\t/**\n\t\t * Allows to pause the event loop until the provided thenable resolved.\n\t\t *\n\t\t * *Note:* This function can only be called during event dispatch.\n\t\t *\n\t\t * @param thenable A thenable that delays saving.\n\t\t */\n\t\twaitUntil(thenable: Thenable<any>): void;",
                    "name": "waitUntil",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "thenable",
                        "type": {
                          "ref": "Thenable",
                          "targs": [
                            {
                              "core": "any",
                              "isNullable": false,
                              "_": 11981,
                              "source": "any"
                            }
                          ],
                          "isNullable": false,
                          "_": 11981,
                          "source": " Thenable<any>"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 11981,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 11991,
                "name": "FileWillCreateEvent",
                "generics": [],
                "doc": "An event that is fired when files are going to be created.\n\nTo make modifications to the workspace before the files are created,\ncall the {@linkcode FileWillCreateEvent.waitUntilwaitUntil}-function with a\nthenable that resolves to a {@link WorkspaceEditworkspace edit}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "A cancellation token.",
                    "isMethod": false,
                    "_": 11996,
                    "source": "\n\n\t\t/**\n\t\t * A cancellation token.\n\t\t */\n\t\treadonly token: CancellationToken;",
                    "name": "token",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "CancellationToken",
                      "targs": [],
                      "isNullable": false,
                      "_": 11996,
                      "source": " CancellationToken"
                    }
                  },
                  {
                    "doc": "The files that are going to be created.",
                    "isMethod": false,
                    "_": 12001,
                    "source": "\n\n\t\t/**\n\t\t * The files that are going to be created.\n\t\t */\n\t\treadonly files: readonly Uri[];",
                    "name": "files",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "Uri",
                            "targs": [],
                            "isNullable": false,
                            "_": 12001,
                            "source": " Uri"
                          }
                        ],
                        "isNullable": false,
                        "_": 12001,
                        "source": " Uri[]"
                      },
                      "isNullable": false,
                      "_": 12001,
                      "source": " readonly Uri[]"
                    }
                  },
                  {
                    "doc": "Allows to pause the event and to apply a {@link WorkspaceEdit workspace edit}.\n\n *Note:* This function can only be called during event dispatch and not\n in an asynchronous manner:\n\n ```ts\n workspace.onWillCreateFiles(event => {\n \t// async, will *throw* an error\n \tsetTimeout(() => event.waitUntil(promise));\n\n \t// sync, OK\n \tevent.waitUntil(promise);\n })\n ```\n\n @param thenable A thenable that delays saving.",
                    "isMethod": true,
                    "_": 12021,
                    "source": "\n\n\t\t/**\n\t\t * Allows to pause the event and to apply a {@link WorkspaceEdit workspace edit}.\n\t\t *\n\t\t * *Note:* This function can only be called during event dispatch and not\n\t\t * in an asynchronous manner:\n\t\t *\n\t\t * ```ts\n\t\t * workspace.onWillCreateFiles(event => {\n\t\t * \t// async, will *throw* an error\n\t\t * \tsetTimeout(() => event.waitUntil(promise));\n\t\t *\n\t\t * \t// sync, OK\n\t\t * \tevent.waitUntil(promise);\n\t\t * })\n\t\t * ```\n\t\t *\n\t\t * @param thenable A thenable that delays saving.\n\t\t */\n\t\twaitUntil(thenable: Thenable<WorkspaceEdit>): void;",
                    "name": "waitUntil",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "thenable",
                        "type": {
                          "ref": "Thenable",
                          "targs": [
                            {
                              "ref": "WorkspaceEdit",
                              "targs": [],
                              "isNullable": false,
                              "_": 12021,
                              "source": "WorkspaceEdit"
                            }
                          ],
                          "isNullable": false,
                          "_": 12021,
                          "source": " Thenable<WorkspaceEdit>"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 12021,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Allows to pause the event until the provided thenable resolves.\n\n *Note:* This function can only be called during event dispatch.\n\n @param thenable A thenable that delays saving.",
                    "isMethod": true,
                    "_": 12030,
                    "source": "\n\n\t\t/**\n\t\t * Allows to pause the event until the provided thenable resolves.\n\t\t *\n\t\t * *Note:* This function can only be called during event dispatch.\n\t\t *\n\t\t * @param thenable A thenable that delays saving.\n\t\t */\n\t\twaitUntil(thenable: Thenable<any>): void;",
                    "name": "waitUntil",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "thenable",
                        "type": {
                          "ref": "Thenable",
                          "targs": [
                            {
                              "core": "any",
                              "isNullable": false,
                              "_": 12030,
                              "source": "any"
                            }
                          ],
                          "isNullable": false,
                          "_": 12030,
                          "source": " Thenable<any>"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 12030,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 12036,
                "name": "FileCreateEvent",
                "generics": [],
                "doc": "An event that is fired after files are created.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The files that got created.",
                    "isMethod": false,
                    "_": 12041,
                    "source": "\n\n\t\t/**\n\t\t * The files that got created.\n\t\t */\n\t\treadonly files: readonly Uri[];",
                    "name": "files",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "Uri",
                            "targs": [],
                            "isNullable": false,
                            "_": 12041,
                            "source": " Uri"
                          }
                        ],
                        "isNullable": false,
                        "_": 12041,
                        "source": " Uri[]"
                      },
                      "isNullable": false,
                      "_": 12041,
                      "source": " readonly Uri[]"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 12051,
                "name": "FileWillDeleteEvent",
                "generics": [],
                "doc": "An event that is fired when files are going to be deleted.\n\nTo make modifications to the workspace before the files are deleted,\ncall the {@link FileWillCreateEvent.waitUntil`waitUntil`}-function with a\nthenable that resolves to a {@link WorkspaceEditworkspace edit}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "A cancellation token.",
                    "isMethod": false,
                    "_": 12056,
                    "source": "\n\n\t\t/**\n\t\t * A cancellation token.\n\t\t */\n\t\treadonly token: CancellationToken;",
                    "name": "token",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "CancellationToken",
                      "targs": [],
                      "isNullable": false,
                      "_": 12056,
                      "source": " CancellationToken"
                    }
                  },
                  {
                    "doc": "The files that are going to be deleted.",
                    "isMethod": false,
                    "_": 12061,
                    "source": "\n\n\t\t/**\n\t\t * The files that are going to be deleted.\n\t\t */\n\t\treadonly files: readonly Uri[];",
                    "name": "files",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "Uri",
                            "targs": [],
                            "isNullable": false,
                            "_": 12061,
                            "source": " Uri"
                          }
                        ],
                        "isNullable": false,
                        "_": 12061,
                        "source": " Uri[]"
                      },
                      "isNullable": false,
                      "_": 12061,
                      "source": " readonly Uri[]"
                    }
                  },
                  {
                    "doc": "Allows to pause the event and to apply a {@link WorkspaceEdit workspace edit}.\n\n *Note:* This function can only be called during event dispatch and not\n in an asynchronous manner:\n\n ```ts\n workspace.onWillCreateFiles(event => {\n \t// async, will *throw* an error\n \tsetTimeout(() => event.waitUntil(promise));\n\n \t// sync, OK\n \tevent.waitUntil(promise);\n })\n ```\n\n @param thenable A thenable that delays saving.",
                    "isMethod": true,
                    "_": 12081,
                    "source": "\n\n\t\t/**\n\t\t * Allows to pause the event and to apply a {@link WorkspaceEdit workspace edit}.\n\t\t *\n\t\t * *Note:* This function can only be called during event dispatch and not\n\t\t * in an asynchronous manner:\n\t\t *\n\t\t * ```ts\n\t\t * workspace.onWillCreateFiles(event => {\n\t\t * \t// async, will *throw* an error\n\t\t * \tsetTimeout(() => event.waitUntil(promise));\n\t\t *\n\t\t * \t// sync, OK\n\t\t * \tevent.waitUntil(promise);\n\t\t * })\n\t\t * ```\n\t\t *\n\t\t * @param thenable A thenable that delays saving.\n\t\t */\n\t\twaitUntil(thenable: Thenable<WorkspaceEdit>): void;",
                    "name": "waitUntil",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "thenable",
                        "type": {
                          "ref": "Thenable",
                          "targs": [
                            {
                              "ref": "WorkspaceEdit",
                              "targs": [],
                              "isNullable": false,
                              "_": 12081,
                              "source": "WorkspaceEdit"
                            }
                          ],
                          "isNullable": false,
                          "_": 12081,
                          "source": " Thenable<WorkspaceEdit>"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 12081,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Allows to pause the event until the provided thenable resolves.\n\n *Note:* This function can only be called during event dispatch.\n\n @param thenable A thenable that delays saving.",
                    "isMethod": true,
                    "_": 12090,
                    "source": "\n\n\t\t/**\n\t\t * Allows to pause the event until the provided thenable resolves.\n\t\t *\n\t\t * *Note:* This function can only be called during event dispatch.\n\t\t *\n\t\t * @param thenable A thenable that delays saving.\n\t\t */\n\t\twaitUntil(thenable: Thenable<any>): void;",
                    "name": "waitUntil",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "thenable",
                        "type": {
                          "ref": "Thenable",
                          "targs": [
                            {
                              "core": "any",
                              "isNullable": false,
                              "_": 12090,
                              "source": "any"
                            }
                          ],
                          "isNullable": false,
                          "_": 12090,
                          "source": " Thenable<any>"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 12090,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 12096,
                "name": "FileDeleteEvent",
                "generics": [],
                "doc": "An event that is fired after files are deleted.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The files that got deleted.",
                    "isMethod": false,
                    "_": 12101,
                    "source": "\n\n\t\t/**\n\t\t * The files that got deleted.\n\t\t */\n\t\treadonly files: readonly Uri[];",
                    "name": "files",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "Uri",
                            "targs": [],
                            "isNullable": false,
                            "_": 12101,
                            "source": " Uri"
                          }
                        ],
                        "isNullable": false,
                        "_": 12101,
                        "source": " Uri[]"
                      },
                      "isNullable": false,
                      "_": 12101,
                      "source": " readonly Uri[]"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline62",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "FileWillRenameEvent",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 12121,
                    "source": " readonly oldUri: Uri;",
                    "name": "oldUri",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 12121,
                      "source": " Uri"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 12121,
                    "source": " readonly newUri: Uri",
                    "name": "newUri",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 12121,
                      "source": " Uri"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 12111,
                "name": "FileWillRenameEvent",
                "generics": [],
                "doc": "An event that is fired when files are going to be renamed.\n\nTo make modifications to the workspace before the files are renamed,\ncall the {@link FileWillCreateEvent.waitUntil`waitUntil`}-function with a\nthenable that resolves to a {@link WorkspaceEditworkspace edit}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "A cancellation token.",
                    "isMethod": false,
                    "_": 12116,
                    "source": "\n\n\t\t/**\n\t\t * A cancellation token.\n\t\t */\n\t\treadonly token: CancellationToken;",
                    "name": "token",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "CancellationToken",
                      "targs": [],
                      "isNullable": false,
                      "_": 12116,
                      "source": " CancellationToken"
                    }
                  },
                  {
                    "doc": "The files that are going to be renamed.",
                    "isMethod": false,
                    "_": 12121,
                    "source": "\n\n\t\t/**\n\t\t * The files that are going to be renamed.\n\t\t */\n\t\treadonly files: ReadonlyArray<{ readonly oldUri: Uri; readonly newUri: Uri }>;",
                    "name": "files",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "ReadonlyArray",
                      "targs": [
                        {
                          "ref": "IInline62",
                          "targs": [],
                          "isNullable": false,
                          "_": 12121,
                          "source": "{ readonly oldUri: Uri; readonly newUri: Uri }"
                        }
                      ],
                      "isNullable": false,
                      "_": 12121,
                      "source": " ReadonlyArray<{ readonly oldUri: Uri; readonly newUri: Uri }>"
                    }
                  },
                  {
                    "doc": "Allows to pause the event and to apply a {@link WorkspaceEdit workspace edit}.\n\n *Note:* This function can only be called during event dispatch and not\n in an asynchronous manner:\n\n ```ts\n workspace.onWillCreateFiles(event => {\n \t// async, will *throw* an error\n \tsetTimeout(() => event.waitUntil(promise));\n\n \t// sync, OK\n \tevent.waitUntil(promise);\n })\n ```\n\n @param thenable A thenable that delays saving.",
                    "isMethod": true,
                    "_": 12141,
                    "source": "\n\n\t\t/**\n\t\t * Allows to pause the event and to apply a {@link WorkspaceEdit workspace edit}.\n\t\t *\n\t\t * *Note:* This function can only be called during event dispatch and not\n\t\t * in an asynchronous manner:\n\t\t *\n\t\t * ```ts\n\t\t * workspace.onWillCreateFiles(event => {\n\t\t * \t// async, will *throw* an error\n\t\t * \tsetTimeout(() => event.waitUntil(promise));\n\t\t *\n\t\t * \t// sync, OK\n\t\t * \tevent.waitUntil(promise);\n\t\t * })\n\t\t * ```\n\t\t *\n\t\t * @param thenable A thenable that delays saving.\n\t\t */\n\t\twaitUntil(thenable: Thenable<WorkspaceEdit>): void;",
                    "name": "waitUntil",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "thenable",
                        "type": {
                          "ref": "Thenable",
                          "targs": [
                            {
                              "ref": "WorkspaceEdit",
                              "targs": [],
                              "isNullable": false,
                              "_": 12141,
                              "source": "WorkspaceEdit"
                            }
                          ],
                          "isNullable": false,
                          "_": 12141,
                          "source": " Thenable<WorkspaceEdit>"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 12141,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Allows to pause the event until the provided thenable resolves.\n\n *Note:* This function can only be called during event dispatch.\n\n @param thenable A thenable that delays saving.",
                    "isMethod": true,
                    "_": 12150,
                    "source": "\n\n\t\t/**\n\t\t * Allows to pause the event until the provided thenable resolves.\n\t\t *\n\t\t * *Note:* This function can only be called during event dispatch.\n\t\t *\n\t\t * @param thenable A thenable that delays saving.\n\t\t */\n\t\twaitUntil(thenable: Thenable<any>): void;",
                    "name": "waitUntil",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "thenable",
                        "type": {
                          "ref": "Thenable",
                          "targs": [
                            {
                              "core": "any",
                              "isNullable": false,
                              "_": 12150,
                              "source": "any"
                            }
                          ],
                          "isNullable": false,
                          "_": 12150,
                          "source": " Thenable<any>"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 12150,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline63",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "FileRenameEvent",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 12161,
                    "source": " readonly oldUri: Uri;",
                    "name": "oldUri",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 12161,
                      "source": " Uri"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 12161,
                    "source": " readonly newUri: Uri",
                    "name": "newUri",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 12161,
                      "source": " Uri"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 12156,
                "name": "FileRenameEvent",
                "generics": [],
                "doc": "An event that is fired after files are renamed.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The files that got renamed.",
                    "isMethod": false,
                    "_": 12161,
                    "source": "\n\n\t\t/**\n\t\t * The files that got renamed.\n\t\t */\n\t\treadonly files: ReadonlyArray<{ readonly oldUri: Uri; readonly newUri: Uri }>;",
                    "name": "files",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "ReadonlyArray",
                      "targs": [
                        {
                          "ref": "IInline63",
                          "targs": [],
                          "isNullable": false,
                          "_": 12161,
                          "source": "{ readonly oldUri: Uri; readonly newUri: Uri }"
                        }
                      ],
                      "isNullable": false,
                      "_": 12161,
                      "source": " ReadonlyArray<{ readonly oldUri: Uri; readonly newUri: Uri }>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 12167,
                "name": "WorkspaceFoldersChangeEvent",
                "generics": [],
                "doc": "An event describing a change to the set of {@link workspace.workspaceFoldersworkspace folders}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Added workspace folders.",
                    "isMethod": false,
                    "_": 12171,
                    "source": "\n\t\t/**\n\t\t * Added workspace folders.\n\t\t */\n\t\treadonly added: readonly WorkspaceFolder[];",
                    "name": "added",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "WorkspaceFolder",
                            "targs": [],
                            "isNullable": false,
                            "_": 12171,
                            "source": " WorkspaceFolder"
                          }
                        ],
                        "isNullable": false,
                        "_": 12171,
                        "source": " WorkspaceFolder[]"
                      },
                      "isNullable": false,
                      "_": 12171,
                      "source": " readonly WorkspaceFolder[]"
                    }
                  },
                  {
                    "doc": "Removed workspace folders.",
                    "isMethod": false,
                    "_": 12176,
                    "source": "\n\n\t\t/**\n\t\t * Removed workspace folders.\n\t\t */\n\t\treadonly removed: readonly WorkspaceFolder[];",
                    "name": "removed",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "WorkspaceFolder",
                            "targs": [],
                            "isNullable": false,
                            "_": 12176,
                            "source": " WorkspaceFolder"
                          }
                        ],
                        "isNullable": false,
                        "_": 12176,
                        "source": " WorkspaceFolder[]"
                      },
                      "isNullable": false,
                      "_": 12176,
                      "source": " readonly WorkspaceFolder[]"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 12183,
                "name": "WorkspaceFolder",
                "generics": [],
                "doc": "A workspace folder is one of potentially many roots opened by the editor. All workspace folders\nare equal which means there is no notion of an active or primary workspace folder.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The associated uri for this workspace folder.\n\n*Note:* The {@link Uri}-type was intentionally chosen such that future releases of the editor can support\nworkspace folders that are not stored on the local disk, e.g. `ftp://server/workspaces/foo`.",
                    "isMethod": false,
                    "_": 12191,
                    "source": "\n\n\t\t/**\n\t\t * The associated uri for this workspace folder.\n\t\t *\n\t\t * *Note:* The {@link Uri}-type was intentionally chosen such that future releases of the editor can support\n\t\t * workspace folders that are not stored on the local disk, e.g. `ftp://server/workspaces/foo`.\n\t\t */\n\t\treadonly uri: Uri;",
                    "name": "uri",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 12191,
                      "source": " Uri"
                    }
                  },
                  {
                    "doc": "The name of this workspace folder. Defaults to\nthe basename of its {@link Uri.pathuri-path}",
                    "isMethod": false,
                    "_": 12197,
                    "source": "\n\n\t\t/**\n\t\t * The name of this workspace folder. Defaults to\n\t\t * the basename of its {@link Uri.path uri-path}\n\t\t */\n\t\treadonly name: string;",
                    "name": "name",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 12197,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The ordinal number of this workspace folder.",
                    "isMethod": false,
                    "_": 12202,
                    "source": "\n\n\t\t/**\n\t\t * The ordinal number of this workspace folder.\n\t\t */\n\t\treadonly index: number;",
                    "name": "index",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 12202,
                      "source": " number"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline67",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "ConfigurationScope",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 12867,
                    "source": " uri?: Uri;",
                    "name": "uri",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 12867,
                      "source": " Uri"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 12867,
                    "source": " languageId: string",
                    "name": "languageId",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 12867,
                      "source": " string"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 12872,
                "name": "ConfigurationChangeEvent",
                "generics": [],
                "doc": "An event describing the change in Configuration",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Checks if the given section has changed.\n If scope is provided, checks if the section has changed for resources under the given scope.\n\n @param section Configuration name, supports _dotted_ names.\n @param scope A scope in which to check.\n @return `true` if the given section has changed.",
                    "isMethod": true,
                    "_": 12882,
                    "source": "\n\n\t\t/**\n\t\t * Checks if the given section has changed.\n\t\t * If scope is provided, checks if the section has changed for resources under the given scope.\n\t\t *\n\t\t * @param section Configuration name, supports _dotted_ names.\n\t\t * @param scope A scope in which to check.\n\t\t * @return `true` if the given section has changed.\n\t\t */\n\t\taffectsConfiguration(section: string, scope?: ConfigurationScope): boolean;",
                    "name": "affectsConfiguration",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "section",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 12882,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "scope",
                        "type": {
                          "ref": "ConfigurationScope",
                          "targs": [],
                          "isNullable": false,
                          "_": 12882,
                          "source": " ConfigurationScope"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 12882,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 13480,
                "name": "NotebookEditor",
                "generics": [],
                "doc": "Represents a notebook editor that is attached to a {@link NotebookDocumentnotebook}.\nAdditional properties of the NotebookEditor are available in the proposed\nAPI, which will be finalized later.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The {@link NotebookDocumentnotebook document} associated with this notebook editor.",
                    "isMethod": false,
                    "_": 13485,
                    "source": "\n\n\t\t/**\n\t\t * The {@link NotebookDocument notebook document} associated with this notebook editor.\n\t\t */\n\t\treadonly notebook: NotebookDocument;",
                    "name": "notebook",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "NotebookDocument",
                      "targs": [],
                      "isNullable": false,
                      "_": 13485,
                      "source": " NotebookDocument"
                    }
                  },
                  {
                    "doc": "The primary selection in this notebook editor.",
                    "isMethod": false,
                    "_": 13490,
                    "source": "\n\n\t\t/**\n\t\t * The primary selection in this notebook editor.\n\t\t */\n\t\tselection: NotebookRange;",
                    "name": "selection",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "NotebookRange",
                      "targs": [],
                      "isNullable": false,
                      "_": 13490,
                      "source": " NotebookRange"
                    }
                  },
                  {
                    "doc": "All selections in this notebook editor.\n\n The primary selection (or focused range) is `selections[0]`. When the document has no cells, the primary selection is empty `{ start: 0, end: 0 }`;",
                    "isMethod": false,
                    "_": 13497,
                    "source": "\n\n\t\t/**\n\t\t * All selections in this notebook editor.\n\t\t *\n\t\t * The primary selection (or focused range) is `selections[0]`. When the document has no cells, the primary selection is empty `{ start: 0, end: 0 }`;\n\t\t */\n\t\tselections: readonly NotebookRange[];",
                    "name": "selections",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "NotebookRange",
                            "targs": [],
                            "isNullable": false,
                            "_": 13497,
                            "source": " NotebookRange"
                          }
                        ],
                        "isNullable": false,
                        "_": 13497,
                        "source": " NotebookRange[]"
                      },
                      "isNullable": false,
                      "_": 13497,
                      "source": " readonly NotebookRange[]"
                    }
                  },
                  {
                    "doc": "The current visible ranges in the editor (vertically).",
                    "isMethod": false,
                    "_": 13502,
                    "source": "\n\n\t\t/**\n\t\t * The current visible ranges in the editor (vertically).\n\t\t */\n\t\treadonly visibleRanges: readonly NotebookRange[];",
                    "name": "visibleRanges",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "NotebookRange",
                            "targs": [],
                            "isNullable": false,
                            "_": 13502,
                            "source": " NotebookRange"
                          }
                        ],
                        "isNullable": false,
                        "_": 13502,
                        "source": " NotebookRange[]"
                      },
                      "isNullable": false,
                      "_": 13502,
                      "source": " readonly NotebookRange[]"
                    }
                  },
                  {
                    "doc": "The column in which this editor shows.",
                    "isMethod": false,
                    "_": 13507,
                    "source": "\n\n\t\t/**\n\t\t * The column in which this editor shows.\n\t\t */\n\t\treadonly viewColumn?: ViewColumn;",
                    "name": "viewColumn",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "ViewColumn",
                      "targs": [],
                      "isNullable": false,
                      "_": 13507,
                      "source": " ViewColumn"
                    }
                  },
                  {
                    "doc": "Scroll as indicated by `revealType` in order to reveal the given range.\n\n @param range A range.\n @param revealType The scrolling strategy for revealing `range`.",
                    "isMethod": true,
                    "_": 13515,
                    "source": "\n\n\t\t/**\n\t\t * Scroll as indicated by `revealType` in order to reveal the given range.\n\t\t *\n\t\t * @param range A range.\n\t\t * @param revealType The scrolling strategy for revealing `range`.\n\t\t */\n\t\trevealRange(range: NotebookRange, revealType?: NotebookEditorRevealType): void;",
                    "name": "revealRange",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "range",
                        "type": {
                          "ref": "NotebookRange",
                          "targs": [],
                          "isNullable": false,
                          "_": 13515,
                          "source": " NotebookRange"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "revealType",
                        "type": {
                          "ref": "NotebookEditorRevealType",
                          "targs": [],
                          "isNullable": false,
                          "_": 13515,
                          "source": " NotebookEditorRevealType"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 13515,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline68",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "NotebookRendererMessaging",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 13526,
                    "source": "\n\t\t\treadonly editor: NotebookEditor;",
                    "name": "editor",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "NotebookEditor",
                      "targs": [],
                      "isNullable": false,
                      "_": 13526,
                      "source": " NotebookEditor"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 13527,
                    "source": "\n\t\t\treadonly message: any;",
                    "name": "message",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "any",
                      "isNullable": false,
                      "_": 13527,
                      "source": " any"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 13521,
                "name": "NotebookRendererMessaging",
                "generics": [],
                "doc": "Renderer messaging is used to communicate with a single renderer. It's returned from {@link notebooks.createRendererMessaging}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "An event that fires when a message is received from a renderer.",
                    "isMethod": false,
                    "_": 13525,
                    "source": "\n\t\t/**\n\t\t * An event that fires when a message is received from a renderer.\n\t\t */\n\t\treadonly onDidReceiveMessage: Event<{\n\t\t\treadonly editor: NotebookEditor;\n\t\t\treadonly message: any;\n\t\t}>;",
                    "name": "onDidReceiveMessage",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "ref": "IInline68",
                          "targs": [],
                          "isNullable": false,
                          "_": 13525,
                          "source": "{\n\t\t\treadonly editor: NotebookEditor;\n\t\t\treadonly message: any;\n\t\t}"
                        }
                      ],
                      "isNullable": false,
                      "_": 13525,
                      "source": " Event<{\n\t\t\treadonly editor: NotebookEditor;\n\t\t\treadonly message: any;\n\t\t}>"
                    }
                  },
                  {
                    "doc": "Send a message to one or all renderer.\n\n @param message Message to send\n @param editor Editor to target with the message. If not provided, the\n message is sent to all renderers.\n @returns a boolean indicating whether the message was successfully\n delivered to any renderer.",
                    "isMethod": true,
                    "_": 13539,
                    "source": "\n\n\t\t/**\n\t\t * Send a message to one or all renderer.\n\t\t *\n\t\t * @param message Message to send\n\t\t * @param editor Editor to target with the message. If not provided, the\n\t\t * message is sent to all renderers.\n\t\t * @returns a boolean indicating whether the message was successfully\n\t\t * delivered to any renderer.\n\t\t */\n\t\tpostMessage(message: any, editor?: NotebookEditor): Thenable<boolean>;",
                    "name": "postMessage",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "message",
                        "type": {
                          "core": "any",
                          "isNullable": false,
                          "_": 13539,
                          "source": " any"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "editor",
                        "type": {
                          "ref": "NotebookEditor",
                          "targs": [],
                          "isNullable": false,
                          "_": 13539,
                          "source": " NotebookEditor"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "Thenable",
                      "targs": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 13539,
                          "source": "boolean"
                        }
                      ],
                      "isNullable": false,
                      "_": 13539,
                      "source": " Thenable<boolean>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline69",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "NotebookCell",
                "source": "",
                "indexes": [
                  {
                    "key": {
                      "core": "string",
                      "isNullable": false,
                      "_": 13592,
                      "source": " string"
                    },
                    "value": {
                      "core": "any",
                      "isNullable": false,
                      "_": 13592,
                      "source": " any"
                    },
                    "doc": "",
                    "_": 13592,
                    "source": " readonly [key: string]: any",
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false
                  }
                ],
                "ctors": [],
                "members": [],
                "calls": []
              },
              {
                "_": 13565,
                "name": "NotebookCell",
                "generics": [],
                "doc": "Represents a cell of a {@link NotebookDocumentnotebook}, either a {@link NotebookCellKind.Codecode}-cell\nor {@link NotebookCellKind.Markupmarkup}-cell.\n\nNotebookCell instances are immutable and are kept in sync for as long as they are part of their notebook.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The index of this cell in its {@link NotebookDocument.cellAtcontaining notebook}. The\nindex is updated when a cell is moved within its notebook. The index is `-1`\nwhen the cell has been removed from its notebook.",
                    "isMethod": false,
                    "_": 13572,
                    "source": "\n\n\t\t/**\n\t\t * The index of this cell in its {@link NotebookDocument.cellAt containing notebook}. The\n\t\t * index is updated when a cell is moved within its notebook. The index is `-1`\n\t\t * when the cell has been removed from its notebook.\n\t\t */\n\t\treadonly index: number;",
                    "name": "index",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 13572,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "The {@link NotebookDocumentnotebook} that contains this cell.",
                    "isMethod": false,
                    "_": 13577,
                    "source": "\n\n\t\t/**\n\t\t * The {@link NotebookDocument notebook} that contains this cell.\n\t\t */\n\t\treadonly notebook: NotebookDocument;",
                    "name": "notebook",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "NotebookDocument",
                      "targs": [],
                      "isNullable": false,
                      "_": 13577,
                      "source": " NotebookDocument"
                    }
                  },
                  {
                    "doc": "The kind of this cell.",
                    "isMethod": false,
                    "_": 13582,
                    "source": "\n\n\t\t/**\n\t\t * The kind of this cell.\n\t\t */\n\t\treadonly kind: NotebookCellKind;",
                    "name": "kind",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "NotebookCellKind",
                      "targs": [],
                      "isNullable": false,
                      "_": 13582,
                      "source": " NotebookCellKind"
                    }
                  },
                  {
                    "doc": "The {@link TextDocumenttext} of this cell, represented as text document.",
                    "isMethod": false,
                    "_": 13587,
                    "source": "\n\n\t\t/**\n\t\t * The {@link TextDocument text} of this cell, represented as text document.\n\t\t */\n\t\treadonly document: TextDocument;",
                    "name": "document",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "TextDocument",
                      "targs": [],
                      "isNullable": false,
                      "_": 13587,
                      "source": " TextDocument"
                    }
                  },
                  {
                    "doc": "The metadata of this cell. Can be anything but must be JSON-stringifyable.",
                    "isMethod": false,
                    "_": 13592,
                    "source": "\n\n\t\t/**\n\t\t * The metadata of this cell. Can be anything but must be JSON-stringifyable.\n\t\t */\n\t\treadonly metadata: { readonly [key: string]: any };",
                    "name": "metadata",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "IInline69",
                      "targs": [],
                      "isNullable": false,
                      "_": 13592,
                      "source": " { readonly [key: string]: any }"
                    }
                  },
                  {
                    "doc": "The outputs of this cell.",
                    "isMethod": false,
                    "_": 13597,
                    "source": "\n\n\t\t/**\n\t\t * The outputs of this cell.\n\t\t */\n\t\treadonly outputs: readonly NotebookCellOutput[];",
                    "name": "outputs",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "NotebookCellOutput",
                            "targs": [],
                            "isNullable": false,
                            "_": 13597,
                            "source": " NotebookCellOutput"
                          }
                        ],
                        "isNullable": false,
                        "_": 13597,
                        "source": " NotebookCellOutput[]"
                      },
                      "isNullable": false,
                      "_": 13597,
                      "source": " readonly NotebookCellOutput[]"
                    }
                  },
                  {
                    "doc": "The most recent {@link NotebookCellExecutionSummaryexecution summary} for this cell.",
                    "isMethod": false,
                    "_": 13602,
                    "source": "\n\n\t\t/**\n\t\t * The most recent {@link NotebookCellExecutionSummary execution summary} for this cell.\n\t\t */\n\t\treadonly executionSummary: NotebookCellExecutionSummary | undefined;",
                    "name": "executionSummary",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "NotebookCellExecutionSummary",
                          "targs": [],
                          "isNullable": false,
                          "_": 13602,
                          "source": " NotebookCellExecutionSummary"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 13602,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 13602,
                      "source": " NotebookCellExecutionSummary | undefined"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline70",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "NotebookDocument",
                "source": "",
                "indexes": [
                  {
                    "key": {
                      "core": "string",
                      "isNullable": false,
                      "_": 13651,
                      "source": " string"
                    },
                    "value": {
                      "core": "any",
                      "isNullable": false,
                      "_": 13651,
                      "source": " any"
                    },
                    "doc": "",
                    "_": 13651,
                    "source": " [key: string]: any",
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false
                  }
                ],
                "ctors": [],
                "members": [],
                "calls": []
              },
              {
                "_": 13609,
                "name": "NotebookDocument",
                "generics": [],
                "doc": "Represents a notebook which itself is a sequence of {@link NotebookCellcode or markup cells}. Notebook documents are\ncreated from {@link NotebookDatanotebook data}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The associated uri for this notebook.\n\n*Note* that most notebooks use the `file`-scheme, which means they are files on disk. However, **not** all notebooks are\nsaved on disk and therefore the `scheme` must be checked before trying to access the underlying file or siblings on disk.",
                    "isMethod": false,
                    "_": 13619,
                    "source": "\n\n\t\t/**\n\t\t * The associated uri for this notebook.\n\t\t *\n\t\t * *Note* that most notebooks use the `file`-scheme, which means they are files on disk. However, **not** all notebooks are\n\t\t * saved on disk and therefore the `scheme` must be checked before trying to access the underlying file or siblings on disk.\n\t\t *\n\t\t * @see {@link FileSystemProvider}\n\t\t */\n\t\treadonly uri: Uri;",
                    "name": "uri",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 13619,
                      "source": " Uri"
                    }
                  },
                  {
                    "doc": "The type of notebook.",
                    "isMethod": false,
                    "_": 13624,
                    "source": "\n\n\t\t/**\n\t\t * The type of notebook.\n\t\t */\n\t\treadonly notebookType: string;",
                    "name": "notebookType",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 13624,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The version number of this notebook (it will strictly increase after each\nchange, including undo/redo).",
                    "isMethod": false,
                    "_": 13630,
                    "source": "\n\n\t\t/**\n\t\t * The version number of this notebook (it will strictly increase after each\n\t\t * change, including undo/redo).\n\t\t */\n\t\treadonly version: number;",
                    "name": "version",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 13630,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "`true` if there are unpersisted changes.",
                    "isMethod": false,
                    "_": 13635,
                    "source": "\n\n\t\t/**\n\t\t * `true` if there are unpersisted changes.\n\t\t */\n\t\treadonly isDirty: boolean;",
                    "name": "isDirty",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 13635,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Is this notebook representing an untitled file which has not been saved yet.",
                    "isMethod": false,
                    "_": 13640,
                    "source": "\n\n\t\t/**\n\t\t * Is this notebook representing an untitled file which has not been saved yet.\n\t\t */\n\t\treadonly isUntitled: boolean;",
                    "name": "isUntitled",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 13640,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "`true` if the notebook has been closed. A closed notebook isn't synchronized anymore\nand won't be re-used when the same resource is opened again.",
                    "isMethod": false,
                    "_": 13646,
                    "source": "\n\n\t\t/**\n\t\t * `true` if the notebook has been closed. A closed notebook isn't synchronized anymore\n\t\t * and won't be re-used when the same resource is opened again.\n\t\t */\n\t\treadonly isClosed: boolean;",
                    "name": "isClosed",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 13646,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Arbitrary metadata for this notebook. Can be anything but must be JSON-stringifyable.",
                    "isMethod": false,
                    "_": 13651,
                    "source": "\n\n\t\t/**\n\t\t * Arbitrary metadata for this notebook. Can be anything but must be JSON-stringifyable.\n\t\t */\n\t\treadonly metadata: { [key: string]: any };",
                    "name": "metadata",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "IInline70",
                      "targs": [],
                      "isNullable": false,
                      "_": 13651,
                      "source": " { [key: string]: any }"
                    }
                  },
                  {
                    "doc": "The number of cells in the notebook.",
                    "isMethod": false,
                    "_": 13656,
                    "source": "\n\n\t\t/**\n\t\t * The number of cells in the notebook.\n\t\t */\n\t\treadonly cellCount: number;",
                    "name": "cellCount",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 13656,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "Return the cell at the specified index. The index will be adjusted to the notebook.\n\n @param index - The index of the cell to retrieve.\n @return A {@link NotebookCell cell}.",
                    "isMethod": true,
                    "_": 13664,
                    "source": "\n\n\t\t/**\n\t\t * Return the cell at the specified index. The index will be adjusted to the notebook.\n\t\t *\n\t\t * @param index - The index of the cell to retrieve.\n\t\t * @return A {@link NotebookCell cell}.\n\t\t */\n\t\tcellAt(index: number): NotebookCell;",
                    "name": "cellAt",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "index",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 13664,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "NotebookCell",
                      "targs": [],
                      "isNullable": false,
                      "_": 13664,
                      "source": " NotebookCell"
                    }
                  },
                  {
                    "doc": "Get the cells of this notebook. A subset can be retrieved by providing\n a range. The range will be adjusted to the notebook.\n\n @param range A notebook range.\n @returns The cells contained by the range or all cells.",
                    "isMethod": true,
                    "_": 13673,
                    "source": "\n\n\t\t/**\n\t\t * Get the cells of this notebook. A subset can be retrieved by providing\n\t\t * a range. The range will be adjusted to the notebook.\n\t\t *\n\t\t * @param range A notebook range.\n\t\t * @returns The cells contained by the range or all cells.\n\t\t */\n\t\tgetCells(range?: NotebookRange): NotebookCell[];",
                    "name": "getCells",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "range",
                        "type": {
                          "ref": "NotebookRange",
                          "targs": [],
                          "isNullable": false,
                          "_": 13673,
                          "source": " NotebookRange"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "ref": "NotebookCell",
                          "targs": [],
                          "isNullable": false,
                          "_": 13673,
                          "source": " NotebookCell"
                        }
                      ],
                      "isNullable": false,
                      "_": 13673,
                      "source": " NotebookCell[]"
                    }
                  },
                  {
                    "doc": "Save the document. The saving will be handled by the corresponding {@link NotebookSerializer serializer}.\n\n @return A promise that will resolve to true when the document\n has been saved. Will return false if the file was not dirty or when save failed.",
                    "isMethod": true,
                    "_": 13681,
                    "source": "\n\n\t\t/**\n\t\t * Save the document. The saving will be handled by the corresponding {@link NotebookSerializer serializer}.\n\t\t *\n\t\t * @return A promise that will resolve to true when the document\n\t\t * has been saved. Will return false if the file was not dirty or when save failed.\n\t\t */\n\t\tsave(): Thenable<boolean>;",
                    "name": "save",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "ref": "Thenable",
                      "targs": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 13681,
                          "source": "boolean"
                        }
                      ],
                      "isNullable": false,
                      "_": 13681,
                      "source": " Thenable<boolean>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline71",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "NotebookDocumentCellChange",
                "source": "",
                "indexes": [
                  {
                    "key": {
                      "core": "string",
                      "isNullable": false,
                      "_": 13707,
                      "source": " string"
                    },
                    "value": {
                      "core": "any",
                      "isNullable": false,
                      "_": 13707,
                      "source": " any"
                    },
                    "doc": "",
                    "_": 13707,
                    "source": " [key: string]: any",
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false
                  }
                ],
                "ctors": [],
                "members": [],
                "calls": []
              },
              {
                "_": 13689,
                "name": "NotebookDocumentCellChange",
                "generics": [],
                "doc": "Describes a change to a notebook cell.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The affected cell.",
                    "isMethod": false,
                    "_": 13694,
                    "source": "\n\n\t\t/**\n\t\t * The affected cell.\n\t\t */\n\t\treadonly cell: NotebookCell;",
                    "name": "cell",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "NotebookCell",
                      "targs": [],
                      "isNullable": false,
                      "_": 13694,
                      "source": " NotebookCell"
                    }
                  },
                  {
                    "doc": "The document of the cell or `undefined` when it did not change.\n\n*Note* that you should use the {@link workspace.onDidChangeTextDocumentonDidChangeTextDocument}-event\nfor detailed change information, like what edits have been performed.",
                    "isMethod": false,
                    "_": 13702,
                    "source": "\n\n\t\t/**\n\t\t * The document of the cell or `undefined` when it did not change.\n\t\t *\n\t\t * *Note* that you should use the {@link workspace.onDidChangeTextDocument onDidChangeTextDocument}-event\n\t\t * for detailed change information, like what edits have been performed.\n\t\t */\n\t\treadonly document: TextDocument | undefined;",
                    "name": "document",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "TextDocument",
                          "targs": [],
                          "isNullable": false,
                          "_": 13702,
                          "source": " TextDocument"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 13702,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 13702,
                      "source": " TextDocument | undefined"
                    }
                  },
                  {
                    "doc": "The new metadata of the cell or `undefined` when it did not change.",
                    "isMethod": false,
                    "_": 13707,
                    "source": "\n\n\t\t/**\n\t\t * The new metadata of the cell or `undefined` when it did not change.\n\t\t */\n\t\treadonly metadata: { [key: string]: any } | undefined;",
                    "name": "metadata",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "IInline71",
                          "targs": [],
                          "isNullable": false,
                          "_": 13707,
                          "source": " { [key: string]: any }"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 13707,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 13707,
                      "source": " { [key: string]: any } | undefined"
                    }
                  },
                  {
                    "doc": "The new outputs of the cell or `undefined` when they did not change.",
                    "isMethod": false,
                    "_": 13712,
                    "source": "\n\n\t\t/**\n\t\t * The new outputs of the cell or `undefined` when they did not change.\n\t\t */\n\t\treadonly outputs: readonly NotebookCellOutput[] | undefined;",
                    "name": "outputs",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "operator": 146,
                          "type": {
                            "core": "array",
                            "targs": [
                              {
                                "ref": "NotebookCellOutput",
                                "targs": [],
                                "isNullable": false,
                                "_": 13712,
                                "source": " NotebookCellOutput"
                              }
                            ],
                            "isNullable": false,
                            "_": 13712,
                            "source": " NotebookCellOutput[]"
                          },
                          "isNullable": false,
                          "_": 13712,
                          "source": " readonly NotebookCellOutput[]"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 13712,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 13712,
                      "source": " readonly NotebookCellOutput[] | undefined"
                    }
                  },
                  {
                    "doc": "The new execution summary of the cell or `undefined` when it did not change.",
                    "isMethod": false,
                    "_": 13717,
                    "source": "\n\n\t\t/**\n\t\t * The new execution summary of the cell or `undefined` when it did not change.\n\t\t */\n\t\treadonly executionSummary: NotebookCellExecutionSummary | undefined;",
                    "name": "executionSummary",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "NotebookCellExecutionSummary",
                          "targs": [],
                          "isNullable": false,
                          "_": 13717,
                          "source": " NotebookCellExecutionSummary"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 13717,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 13717,
                      "source": " NotebookCellExecutionSummary | undefined"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 13725,
                "name": "NotebookDocumentContentChange",
                "generics": [],
                "doc": "Describes a structural change to a notebook document, e.g newly added and removed cells.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The range at which cells have been either added or removed.\n\nNote that no cells have been {@link NotebookDocumentContentChange.removedCellsremoved}\nwhen this range is {@link NotebookRange.isEmptyempty}.",
                    "isMethod": false,
                    "_": 13733,
                    "source": "\n\n\t\t/**\n\t\t * The range at which cells have been either added or removed.\n\t\t *\n\t\t * Note that no cells have been {@link NotebookDocumentContentChange.removedCells removed}\n\t\t * when this range is {@link NotebookRange.isEmpty empty}.\n\t\t */\n\t\treadonly range: NotebookRange;",
                    "name": "range",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "NotebookRange",
                      "targs": [],
                      "isNullable": false,
                      "_": 13733,
                      "source": " NotebookRange"
                    }
                  },
                  {
                    "doc": "Cells that have been added to the document.",
                    "isMethod": false,
                    "_": 13738,
                    "source": "\n\n\t\t/**\n\t\t * Cells that have been added to the document.\n\t\t */\n\t\treadonly addedCells: readonly NotebookCell[];",
                    "name": "addedCells",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "NotebookCell",
                            "targs": [],
                            "isNullable": false,
                            "_": 13738,
                            "source": " NotebookCell"
                          }
                        ],
                        "isNullable": false,
                        "_": 13738,
                        "source": " NotebookCell[]"
                      },
                      "isNullable": false,
                      "_": 13738,
                      "source": " readonly NotebookCell[]"
                    }
                  },
                  {
                    "doc": "Cells that have been removed from the document.",
                    "isMethod": false,
                    "_": 13743,
                    "source": "\n\n\t\t/**\n\t\t * Cells that have been removed from the document.\n\t\t */\n\t\treadonly removedCells: readonly NotebookCell[];",
                    "name": "removedCells",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "NotebookCell",
                            "targs": [],
                            "isNullable": false,
                            "_": 13743,
                            "source": " NotebookCell"
                          }
                        ],
                        "isNullable": false,
                        "_": 13743,
                        "source": " NotebookCell[]"
                      },
                      "isNullable": false,
                      "_": 13743,
                      "source": " readonly NotebookCell[]"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline72",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "NotebookDocumentChangeEvent",
                "source": "",
                "indexes": [
                  {
                    "key": {
                      "core": "string",
                      "isNullable": false,
                      "_": 13759,
                      "source": " string"
                    },
                    "value": {
                      "core": "any",
                      "isNullable": false,
                      "_": 13759,
                      "source": " any"
                    },
                    "doc": "",
                    "_": 13759,
                    "source": " [key: string]: any",
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false
                  }
                ],
                "ctors": [],
                "members": [],
                "calls": []
              },
              {
                "_": 13749,
                "name": "NotebookDocumentChangeEvent",
                "generics": [],
                "doc": "An event describing a transactional {@link NotebookDocumentnotebook} change.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The affected notebook.",
                    "isMethod": false,
                    "_": 13754,
                    "source": "\n\n\t\t/**\n\t\t * The affected notebook.\n\t\t */\n\t\treadonly notebook: NotebookDocument;",
                    "name": "notebook",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "NotebookDocument",
                      "targs": [],
                      "isNullable": false,
                      "_": 13754,
                      "source": " NotebookDocument"
                    }
                  },
                  {
                    "doc": "The new metadata of the notebook or `undefined` when it did not change.",
                    "isMethod": false,
                    "_": 13759,
                    "source": "\n\n\t\t/**\n\t\t * The new metadata of the notebook or `undefined` when it did not change.\n\t\t */\n\t\treadonly metadata: { [key: string]: any } | undefined;",
                    "name": "metadata",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "IInline72",
                          "targs": [],
                          "isNullable": false,
                          "_": 13759,
                          "source": " { [key: string]: any }"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 13759,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 13759,
                      "source": " { [key: string]: any } | undefined"
                    }
                  },
                  {
                    "doc": "An array of content changes describing added or removed {@link NotebookCellcells}.",
                    "isMethod": false,
                    "_": 13764,
                    "source": "\n\n\t\t/**\n\t\t * An array of content changes describing added or removed {@link NotebookCell cells}.\n\t\t */\n\t\treadonly contentChanges: readonly NotebookDocumentContentChange[];",
                    "name": "contentChanges",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "NotebookDocumentContentChange",
                            "targs": [],
                            "isNullable": false,
                            "_": 13764,
                            "source": " NotebookDocumentContentChange"
                          }
                        ],
                        "isNullable": false,
                        "_": 13764,
                        "source": " NotebookDocumentContentChange[]"
                      },
                      "isNullable": false,
                      "_": 13764,
                      "source": " readonly NotebookDocumentContentChange[]"
                    }
                  },
                  {
                    "doc": "An array of {@link NotebookDocumentCellChangecell changes}.",
                    "isMethod": false,
                    "_": 13769,
                    "source": "\n\n\t\t/**\n\t\t * An array of {@link NotebookDocumentCellChange cell changes}.\n\t\t */\n\t\treadonly cellChanges: readonly NotebookDocumentCellChange[];",
                    "name": "cellChanges",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "NotebookDocumentCellChange",
                            "targs": [],
                            "isNullable": false,
                            "_": 13769,
                            "source": " NotebookDocumentCellChange"
                          }
                        ],
                        "isNullable": false,
                        "_": 13769,
                        "source": " NotebookDocumentCellChange[]"
                      },
                      "isNullable": false,
                      "_": 13769,
                      "source": " readonly NotebookDocumentCellChange[]"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 13779,
                "name": "NotebookDocumentWillSaveEvent",
                "generics": [],
                "doc": "An event that is fired when a {@link NotebookDocumentnotebook document} will be saved.\n\nTo make modifications to the document before it is being saved, call the\n{@linkcode NotebookDocumentWillSaveEvent.waitUntilwaitUntil}-function with a thenable\nthat resolves to a {@link WorkspaceEditworkspace edit}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "A cancellation token.",
                    "isMethod": false,
                    "_": 13783,
                    "source": "\n\t\t/**\n\t\t * A cancellation token.\n\t\t */\n\t\treadonly token: CancellationToken;",
                    "name": "token",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "CancellationToken",
                      "targs": [],
                      "isNullable": false,
                      "_": 13783,
                      "source": " CancellationToken"
                    }
                  },
                  {
                    "doc": "The {@link NotebookDocumentnotebook document} that will be saved.",
                    "isMethod": false,
                    "_": 13788,
                    "source": "\n\n\t\t/**\n\t\t * The {@link NotebookDocument notebook document} that will be saved.\n\t\t */\n\t\treadonly notebook: NotebookDocument;",
                    "name": "notebook",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "NotebookDocument",
                      "targs": [],
                      "isNullable": false,
                      "_": 13788,
                      "source": " NotebookDocument"
                    }
                  },
                  {
                    "doc": "The reason why save was triggered.",
                    "isMethod": false,
                    "_": 13793,
                    "source": "\n\n\t\t/**\n\t\t * The reason why save was triggered.\n\t\t */\n\t\treadonly reason: TextDocumentSaveReason;",
                    "name": "reason",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "TextDocumentSaveReason",
                      "targs": [],
                      "isNullable": false,
                      "_": 13793,
                      "source": " TextDocumentSaveReason"
                    }
                  },
                  {
                    "doc": "Allows to pause the event loop and to apply {@link WorkspaceEdit workspace edit}.\n Edits of subsequent calls to this function will be applied in order. The\n edits will be *ignored* if concurrent modifications of the notebook document happened.\n\n *Note:* This function can only be called during event dispatch and not\n in an asynchronous manner:\n\n ```ts\n workspace.onWillSaveNotebookDocument(event => {\n \t// async, will *throw* an error\n \tsetTimeout(() => event.waitUntil(promise));\n\n \t// sync, OK\n \tevent.waitUntil(promise);\n })\n ```\n\n @param thenable A thenable that resolves to {@link WorkspaceEdit workspace edit}.",
                    "isMethod": true,
                    "_": 13815,
                    "source": "\n\n\t\t/**\n\t\t * Allows to pause the event loop and to apply {@link WorkspaceEdit workspace edit}.\n\t\t * Edits of subsequent calls to this function will be applied in order. The\n\t\t * edits will be *ignored* if concurrent modifications of the notebook document happened.\n\t\t *\n\t\t * *Note:* This function can only be called during event dispatch and not\n\t\t * in an asynchronous manner:\n\t\t *\n\t\t * ```ts\n\t\t * workspace.onWillSaveNotebookDocument(event => {\n\t\t * \t// async, will *throw* an error\n\t\t * \tsetTimeout(() => event.waitUntil(promise));\n\t\t *\n\t\t * \t// sync, OK\n\t\t * \tevent.waitUntil(promise);\n\t\t * })\n\t\t * ```\n\t\t *\n\t\t * @param thenable A thenable that resolves to {@link WorkspaceEdit workspace edit}.\n\t\t */\n\t\twaitUntil(thenable: Thenable<WorkspaceEdit>): void;",
                    "name": "waitUntil",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "thenable",
                        "type": {
                          "ref": "Thenable",
                          "targs": [
                            {
                              "ref": "WorkspaceEdit",
                              "targs": [],
                              "isNullable": false,
                              "_": 13815,
                              "source": "WorkspaceEdit"
                            }
                          ],
                          "isNullable": false,
                          "_": 13815,
                          "source": " Thenable<WorkspaceEdit>"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 13815,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Allows to pause the event loop until the provided thenable resolved.\n\n *Note:* This function can only be called during event dispatch.\n\n @param thenable A thenable that delays saving.",
                    "isMethod": true,
                    "_": 13824,
                    "source": "\n\n\t\t/**\n\t\t * Allows to pause the event loop until the provided thenable resolved.\n\t\t *\n\t\t * *Note:* This function can only be called during event dispatch.\n\t\t *\n\t\t * @param thenable A thenable that delays saving.\n\t\t */\n\t\twaitUntil(thenable: Thenable<any>): void;",
                    "name": "waitUntil",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "thenable",
                        "type": {
                          "ref": "Thenable",
                          "targs": [
                            {
                              "core": "any",
                              "isNullable": false,
                              "_": 13824,
                              "source": "any"
                            }
                          ],
                          "isNullable": false,
                          "_": 13824,
                          "source": " Thenable<any>"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 13824,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline73",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "NotebookCellExecutionSummary",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 13845,
                    "source": " readonly startTime: number;",
                    "name": "startTime",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 13845,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 13845,
                    "source": " readonly endTime: number",
                    "name": "endTime",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 13845,
                      "source": " number"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 13830,
                "name": "NotebookCellExecutionSummary",
                "generics": [],
                "doc": "The summary of a notebook cell execution.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The order in which the execution happened.",
                    "isMethod": false,
                    "_": 13835,
                    "source": "\n\n\t\t/**\n\t\t * The order in which the execution happened.\n\t\t */\n\t\treadonly executionOrder?: number;",
                    "name": "executionOrder",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 13835,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "If the execution finished successfully.",
                    "isMethod": false,
                    "_": 13840,
                    "source": "\n\n\t\t/**\n\t\t * If the execution finished successfully.\n\t\t */\n\t\treadonly success?: boolean;",
                    "name": "success",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 13840,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "The times at which execution started and ended, as unix timestamps",
                    "isMethod": false,
                    "_": 13845,
                    "source": "\n\n\t\t/**\n\t\t * The times at which execution started and ended, as unix timestamps\n\t\t */\n\t\treadonly timing?: { readonly startTime: number; readonly endTime: number };",
                    "name": "timing",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "IInline73",
                      "targs": [],
                      "isNullable": false,
                      "_": 13845,
                      "source": " { readonly startTime: number; readonly endTime: number }"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline74",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "NotebookRange",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 13885,
                    "source": " start?: number;",
                    "name": "start",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 13885,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 13885,
                    "source": " end?: number",
                    "name": "end",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 13885,
                      "source": " number"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 13852,
                "name": "NotebookRange",
                "generics": [],
                "doc": "A notebook range represents an ordered pair of two cell indices.\nIt is guaranteed that start is less than or equal to end.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 13876,
                    "source": "\n\n\t\t/**\n\t\t * Create a new notebook range. If `start` is not\n\t\t * before or equal to `end`, the values will be swapped.\n\t\t *\n\t\t * @param start start index\n\t\t * @param end end index.\n\t\t */\n\t\tconstructor(start: number, end: number);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "start",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 13876,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "end",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 13876,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The zero-based start index of this range.",
                    "isMethod": false,
                    "_": 13857,
                    "source": "\n\n\t\t/**\n\t\t * The zero-based start index of this range.\n\t\t */\n\t\treadonly start: number;",
                    "name": "start",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 13857,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "The exclusive end index of this range (zero-based).",
                    "isMethod": false,
                    "_": 13862,
                    "source": "\n\n\t\t/**\n\t\t * The exclusive end index of this range (zero-based).\n\t\t */\n\t\treadonly end: number;",
                    "name": "end",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 13862,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "`true` if `start` and `end` are equal.",
                    "isMethod": false,
                    "_": 13867,
                    "source": "\n\n\t\t/**\n\t\t * `true` if `start` and `end` are equal.\n\t\t */\n\t\treadonly isEmpty: boolean;",
                    "name": "isEmpty",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 13867,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Derive a new range for this range.\n\n @param change An object that describes a change to this range.\n @return A range that reflects the given change. Will return `this` range if the change\n is not changing anything.",
                    "isMethod": true,
                    "_": 13885,
                    "source": "\n\n\t\t/**\n\t\t * Derive a new range for this range.\n\t\t *\n\t\t * @param change An object that describes a change to this range.\n\t\t * @return A range that reflects the given change. Will return `this` range if the change\n\t\t * is not changing anything.\n\t\t */\n\t\twith(change: { start?: number; end?: number }): NotebookRange;",
                    "name": "with",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "change",
                        "type": {
                          "ref": "IInline74",
                          "targs": [],
                          "isNullable": false,
                          "_": 13885,
                          "source": " { start?: number; end?: number }"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "NotebookRange",
                      "targs": [],
                      "isNullable": false,
                      "_": 13885,
                      "source": " NotebookRange"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 13891,
                "name": "NotebookCellOutputItem",
                "generics": [],
                "doc": "One representation of a {@link NotebookCellOutputnotebook output}, defined by MIME type and data.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 13965,
                    "source": "\n\n\t\t/**\n\t\t * Create a new notebook cell output item.\n\t\t *\n\t\t * @param data The value of the output item.\n\t\t * @param mime The mime type of the output item.\n\t\t */\n\t\tconstructor(data: Uint8Array, mime: string);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "data",
                        "type": {
                          "ref": "Uint8Array",
                          "targs": [],
                          "isNullable": false,
                          "_": 13965,
                          "source": " Uint8Array"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "mime",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 13965,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "Factory function to create a `NotebookCellOutputItem` from a string.\n\n*Note* that an UTF-8 encoder is used to create bytes for the string.",
                    "isMethod": true,
                    "_": 13902,
                    "source": "\n\n\t\t/**\n\t\t * Factory function to create a `NotebookCellOutputItem` from a string.\n\t\t *\n\t\t * *Note* that an UTF-8 encoder is used to create bytes for the string.\n\t\t *\n\t\t * @param value A string.\n\t\t * @param mime Optional MIME type, defaults to `text/plain`.\n\t\t * @returns A new output item object.\n\t\t */\n\t\tstatic text(value: string, mime?: string): NotebookCellOutputItem;",
                    "name": "text",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "value",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 13902,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "mime",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 13902,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "NotebookCellOutputItem",
                      "targs": [],
                      "isNullable": false,
                      "_": 13902,
                      "source": " NotebookCellOutputItem"
                    }
                  },
                  {
                    "doc": "Factory function to create a `NotebookCellOutputItem` from\na JSON object.\n\n*Note* that this function is not expecting \"stringified JSON\" but\nan object that can be stringified. This function will throw an error\nwhen the passed value cannot be JSON-stringified.",
                    "isMethod": true,
                    "_": 13916,
                    "source": "\n\n\t\t/**\n\t\t * Factory function to create a `NotebookCellOutputItem` from\n\t\t * a JSON object.\n\t\t *\n\t\t * *Note* that this function is not expecting \"stringified JSON\" but\n\t\t * an object that can be stringified. This function will throw an error\n\t\t * when the passed value cannot be JSON-stringified.\n\t\t *\n\t\t * @param value A JSON-stringifyable value.\n\t\t * @param mime Optional MIME type, defaults to `application/json`\n\t\t * @returns A new output item object.\n\t\t */\n\t\tstatic json(value: any, mime?: string): NotebookCellOutputItem;",
                    "name": "json",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "value",
                        "type": {
                          "core": "any",
                          "isNullable": false,
                          "_": 13916,
                          "source": " any"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "mime",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 13916,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "NotebookCellOutputItem",
                      "targs": [],
                      "isNullable": false,
                      "_": 13916,
                      "source": " NotebookCellOutputItem"
                    }
                  },
                  {
                    "doc": "Factory function to create a `NotebookCellOutputItem` that uses\nuses the `application/vnd.code.notebook.stdout` mime type.",
                    "isMethod": true,
                    "_": 13925,
                    "source": "\n\n\t\t/**\n\t\t * Factory function to create a `NotebookCellOutputItem` that uses\n\t\t * uses the `application/vnd.code.notebook.stdout` mime type.\n\t\t *\n\t\t * @param value A string.\n\t\t * @returns A new output item object.\n\t\t */\n\t\tstatic stdout(value: string): NotebookCellOutputItem;",
                    "name": "stdout",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "value",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 13925,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "NotebookCellOutputItem",
                      "targs": [],
                      "isNullable": false,
                      "_": 13925,
                      "source": " NotebookCellOutputItem"
                    }
                  },
                  {
                    "doc": "Factory function to create a `NotebookCellOutputItem` that uses\nuses the `application/vnd.code.notebook.stderr` mime type.",
                    "isMethod": true,
                    "_": 13934,
                    "source": "\n\n\t\t/**\n\t\t * Factory function to create a `NotebookCellOutputItem` that uses\n\t\t * uses the `application/vnd.code.notebook.stderr` mime type.\n\t\t *\n\t\t * @param value A string.\n\t\t * @returns A new output item object.\n\t\t */\n\t\tstatic stderr(value: string): NotebookCellOutputItem;",
                    "name": "stderr",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "value",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 13934,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "NotebookCellOutputItem",
                      "targs": [],
                      "isNullable": false,
                      "_": 13934,
                      "source": " NotebookCellOutputItem"
                    }
                  },
                  {
                    "doc": "Factory function to create a `NotebookCellOutputItem` that uses\nuses the `application/vnd.code.notebook.error` mime type.",
                    "isMethod": true,
                    "_": 13943,
                    "source": "\n\n\t\t/**\n\t\t * Factory function to create a `NotebookCellOutputItem` that uses\n\t\t * uses the `application/vnd.code.notebook.error` mime type.\n\t\t *\n\t\t * @param value An error object.\n\t\t * @returns A new output item object.\n\t\t */\n\t\tstatic error(value: Error): NotebookCellOutputItem;",
                    "name": "error",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "value",
                        "type": {
                          "ref": "Error",
                          "targs": [],
                          "isNullable": false,
                          "_": 13943,
                          "source": " Error"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "NotebookCellOutputItem",
                      "targs": [],
                      "isNullable": false,
                      "_": 13943,
                      "source": " NotebookCellOutputItem"
                    }
                  },
                  {
                    "doc": "The mime type which determines how the {@linkcode NotebookCellOutputItem.data data}-property\n is interpreted.\n\n Notebooks have built-in support for certain mime-types, extensions can add support for new\n types and override existing types.",
                    "isMethod": false,
                    "_": 13952,
                    "source": "\n\n\t\t/**\n\t\t * The mime type which determines how the {@linkcode NotebookCellOutputItem.data data}-property\n\t\t * is interpreted.\n\t\t *\n\t\t * Notebooks have built-in support for certain mime-types, extensions can add support for new\n\t\t * types and override existing types.\n\t\t */\n\t\tmime: string;",
                    "name": "mime",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 13952,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The data of this output item. Must always be an array of unsigned 8-bit integers.",
                    "isMethod": false,
                    "_": 13957,
                    "source": "\n\n\t\t/**\n\t\t * The data of this output item. Must always be an array of unsigned 8-bit integers.\n\t\t */\n\t\tdata: Uint8Array;",
                    "name": "data",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uint8Array",
                      "targs": [],
                      "isNullable": false,
                      "_": 13957,
                      "source": " Uint8Array"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline75",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "NotebookCellOutput",
                "source": "",
                "indexes": [
                  {
                    "key": {
                      "core": "string",
                      "isNullable": false,
                      "_": 13993,
                      "source": " string"
                    },
                    "value": {
                      "core": "any",
                      "isNullable": false,
                      "_": 13993,
                      "source": " any"
                    },
                    "doc": "",
                    "_": 13993,
                    "source": " [key: string]: any",
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false
                  }
                ],
                "ctors": [],
                "members": [],
                "calls": []
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline76",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "NotebookCellOutput",
                "source": "",
                "indexes": [
                  {
                    "key": {
                      "core": "string",
                      "isNullable": false,
                      "_": 14001,
                      "source": " string"
                    },
                    "value": {
                      "core": "any",
                      "isNullable": false,
                      "_": 14001,
                      "source": " any"
                    },
                    "doc": "",
                    "_": 14001,
                    "source": " [key: string]: any",
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false
                  }
                ],
                "ctors": [],
                "members": [],
                "calls": []
              },
              {
                "_": 13973,
                "name": "NotebookCellOutput",
                "generics": [],
                "doc": "Notebook cell output represents a result of executing a cell. It is a container type for multiple\n{@link NotebookCellOutputItemoutput items} where contained items represent the same result but\nuse different MIME types.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 14001,
                    "source": "\n\n\t\t/**\n\t\t * Create new notebook output.\n\t\t *\n\t\t * @param items Notebook output items.\n\t\t * @param metadata Optional metadata.\n\t\t */\n\t\tconstructor(items: NotebookCellOutputItem[], metadata?: { [key: string]: any });",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "items",
                        "type": {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "NotebookCellOutputItem",
                              "targs": [],
                              "isNullable": false,
                              "_": 14001,
                              "source": " NotebookCellOutputItem"
                            }
                          ],
                          "isNullable": false,
                          "_": 14001,
                          "source": " NotebookCellOutputItem[]"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "metadata",
                        "type": {
                          "ref": "IInline76",
                          "targs": [],
                          "isNullable": false,
                          "_": 14001,
                          "source": " { [key: string]: any }"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The output items of this output. Each item must represent the same result. _Note_ that repeated\n MIME types per output is invalid and that the editor will just pick one of them.\n\n ```ts\n new vscode.NotebookCellOutput([\n \tvscode.NotebookCellOutputItem.text('Hello', 'text/plain'),\n \tvscode.NotebookCellOutputItem.text('<i>Hello</i>', 'text/html'),\n \tvscode.NotebookCellOutputItem.text('_Hello_', 'text/markdown'),\n \tvscode.NotebookCellOutputItem.text('Hey', 'text/plain'), // INVALID: repeated type, editor will pick just one\n ])\n ```",
                    "isMethod": false,
                    "_": 13988,
                    "source": "\n\n\t\t/**\n\t\t * The output items of this output. Each item must represent the same result. _Note_ that repeated\n\t\t * MIME types per output is invalid and that the editor will just pick one of them.\n\t\t *\n\t\t * ```ts\n\t\t * new vscode.NotebookCellOutput([\n\t\t * \tvscode.NotebookCellOutputItem.text('Hello', 'text/plain'),\n\t\t * \tvscode.NotebookCellOutputItem.text('<i>Hello</i>', 'text/html'),\n\t\t * \tvscode.NotebookCellOutputItem.text('_Hello_', 'text/markdown'),\n\t\t * \tvscode.NotebookCellOutputItem.text('Hey', 'text/plain'), // INVALID: repeated type, editor will pick just one\n\t\t * ])\n\t\t * ```\n\t\t */\n\t\titems: NotebookCellOutputItem[];",
                    "name": "items",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "ref": "NotebookCellOutputItem",
                          "targs": [],
                          "isNullable": false,
                          "_": 13988,
                          "source": " NotebookCellOutputItem"
                        }
                      ],
                      "isNullable": false,
                      "_": 13988,
                      "source": " NotebookCellOutputItem[]"
                    }
                  },
                  {
                    "doc": "Arbitrary metadata for this cell output. Can be anything but must be JSON-stringifyable.",
                    "isMethod": false,
                    "_": 13993,
                    "source": "\n\n\t\t/**\n\t\t * Arbitrary metadata for this cell output. Can be anything but must be JSON-stringifyable.\n\t\t */\n\t\tmetadata?: { [key: string]: any };",
                    "name": "metadata",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "IInline75",
                      "targs": [],
                      "isNullable": false,
                      "_": 13993,
                      "source": " { [key: string]: any }"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline77",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "NotebookCellData",
                "source": "",
                "indexes": [
                  {
                    "key": {
                      "core": "string",
                      "isNullable": false,
                      "_": 14033,
                      "source": " string"
                    },
                    "value": {
                      "core": "any",
                      "isNullable": false,
                      "_": 14033,
                      "source": " any"
                    },
                    "doc": "",
                    "_": 14033,
                    "source": " [key: string]: any",
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false
                  }
                ],
                "ctors": [],
                "members": [],
                "calls": []
              },
              {
                "_": 14007,
                "name": "NotebookCellData",
                "generics": [],
                "doc": "NotebookCellData is the raw representation of notebook cells. Its is part of {@linkcode NotebookData}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 14048,
                    "source": "\n\n\t\t/**\n\t\t * Create new cell data. Minimal cell data specifies its kind, its source value, and the\n\t\t * language identifier of its source.\n\t\t *\n\t\t * @param kind The kind.\n\t\t * @param value The source value.\n\t\t * @param languageId The language identifier of the source value.\n\t\t */\n\t\tconstructor(kind: NotebookCellKind, value: string, languageId: string);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "kind",
                        "type": {
                          "ref": "NotebookCellKind",
                          "targs": [],
                          "isNullable": false,
                          "_": 14048,
                          "source": " NotebookCellKind"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "value",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 14048,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "languageId",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 14048,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The {@link NotebookCellKind kind} of this cell data.",
                    "isMethod": false,
                    "_": 14012,
                    "source": "\n\n\t\t/**\n\t\t * The {@link NotebookCellKind kind} of this cell data.\n\t\t */\n\t\tkind: NotebookCellKind;",
                    "name": "kind",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "NotebookCellKind",
                      "targs": [],
                      "isNullable": false,
                      "_": 14012,
                      "source": " NotebookCellKind"
                    }
                  },
                  {
                    "doc": "The source value of this cell data - either source code or formatted text.",
                    "isMethod": false,
                    "_": 14017,
                    "source": "\n\n\t\t/**\n\t\t * The source value of this cell data - either source code or formatted text.\n\t\t */\n\t\tvalue: string;",
                    "name": "value",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 14017,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The language identifier of the source value of this cell data. Any value from\n {@linkcode languages.getLanguages getLanguages} is possible.",
                    "isMethod": false,
                    "_": 14023,
                    "source": "\n\n\t\t/**\n\t\t * The language identifier of the source value of this cell data. Any value from\n\t\t * {@linkcode languages.getLanguages getLanguages} is possible.\n\t\t */\n\t\tlanguageId: string;",
                    "name": "languageId",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 14023,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The outputs of this cell data.",
                    "isMethod": false,
                    "_": 14028,
                    "source": "\n\n\t\t/**\n\t\t * The outputs of this cell data.\n\t\t */\n\t\toutputs?: NotebookCellOutput[];",
                    "name": "outputs",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "ref": "NotebookCellOutput",
                          "targs": [],
                          "isNullable": false,
                          "_": 14028,
                          "source": " NotebookCellOutput"
                        }
                      ],
                      "isNullable": false,
                      "_": 14028,
                      "source": " NotebookCellOutput[]"
                    }
                  },
                  {
                    "doc": "Arbitrary metadata of this cell data. Can be anything but must be JSON-stringifyable.",
                    "isMethod": false,
                    "_": 14033,
                    "source": "\n\n\t\t/**\n\t\t * Arbitrary metadata of this cell data. Can be anything but must be JSON-stringifyable.\n\t\t */\n\t\tmetadata?: { [key: string]: any };",
                    "name": "metadata",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "IInline77",
                      "targs": [],
                      "isNullable": false,
                      "_": 14033,
                      "source": " { [key: string]: any }"
                    }
                  },
                  {
                    "doc": "The execution summary of this cell data.",
                    "isMethod": false,
                    "_": 14038,
                    "source": "\n\n\t\t/**\n\t\t * The execution summary of this cell data.\n\t\t */\n\t\texecutionSummary?: NotebookCellExecutionSummary;",
                    "name": "executionSummary",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "NotebookCellExecutionSummary",
                      "targs": [],
                      "isNullable": false,
                      "_": 14038,
                      "source": " NotebookCellExecutionSummary"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline78",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "NotebookData",
                "source": "",
                "indexes": [
                  {
                    "key": {
                      "core": "string",
                      "isNullable": false,
                      "_": 14068,
                      "source": " string"
                    },
                    "value": {
                      "core": "any",
                      "isNullable": false,
                      "_": 14068,
                      "source": " any"
                    },
                    "doc": "",
                    "_": 14068,
                    "source": " [key: string]: any",
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false
                  }
                ],
                "ctors": [],
                "members": [],
                "calls": []
              },
              {
                "_": 14059,
                "name": "NotebookData",
                "generics": [],
                "doc": "Raw representation of a notebook.\n\nExtensions are responsible for creating {@linkcode NotebookData} so that the editor\ncan create a {@linkcode NotebookDocument}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 14075,
                    "source": "\n\n\t\t/**\n\t\t * Create new notebook data.\n\t\t *\n\t\t * @param cells An array of cell data.\n\t\t */\n\t\tconstructor(cells: NotebookCellData[]);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "cells",
                        "type": {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "NotebookCellData",
                              "targs": [],
                              "isNullable": false,
                              "_": 14075,
                              "source": " NotebookCellData"
                            }
                          ],
                          "isNullable": false,
                          "_": 14075,
                          "source": " NotebookCellData[]"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The cell data of this notebook data.",
                    "isMethod": false,
                    "_": 14063,
                    "source": "\n\t\t/**\n\t\t * The cell data of this notebook data.\n\t\t */\n\t\tcells: NotebookCellData[];",
                    "name": "cells",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "ref": "NotebookCellData",
                          "targs": [],
                          "isNullable": false,
                          "_": 14063,
                          "source": " NotebookCellData"
                        }
                      ],
                      "isNullable": false,
                      "_": 14063,
                      "source": " NotebookCellData[]"
                    }
                  },
                  {
                    "doc": "Arbitrary metadata of notebook data.",
                    "isMethod": false,
                    "_": 14068,
                    "source": "\n\n\t\t/**\n\t\t * Arbitrary metadata of notebook data.\n\t\t */\n\t\tmetadata?: { [key: string]: any };",
                    "name": "metadata",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "IInline78",
                      "targs": [],
                      "isNullable": false,
                      "_": 14068,
                      "source": " { [key: string]: any }"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 14086,
                "name": "NotebookSerializer",
                "generics": [],
                "doc": "The notebook serializer enables the editor to open notebook files.\n\nAt its core the editor only knows a {@link NotebookDatanotebook data structure} but not\nhow that data structure is written to a file, nor how it is read from a file. The\nnotebook serializer bridges this gap by deserializing bytes into notebook data and\nvice versa.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Deserialize contents of a notebook file into the notebook data structure.\n\n @param content Contents of a notebook file.\n @param token A cancellation token.\n @return Notebook data or a thenable that resolves to such.",
                    "isMethod": true,
                    "_": 14095,
                    "source": "\n\n\t\t/**\n\t\t * Deserialize contents of a notebook file into the notebook data structure.\n\t\t *\n\t\t * @param content Contents of a notebook file.\n\t\t * @param token A cancellation token.\n\t\t * @return Notebook data or a thenable that resolves to such.\n\t\t */\n\t\tdeserializeNotebook(content: Uint8Array, token: CancellationToken): NotebookData | Thenable<NotebookData>;",
                    "name": "deserializeNotebook",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "content",
                        "type": {
                          "ref": "Uint8Array",
                          "targs": [],
                          "isNullable": false,
                          "_": 14095,
                          "source": " Uint8Array"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 14095,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "union": [
                        {
                          "ref": "NotebookData",
                          "targs": [],
                          "isNullable": false,
                          "_": 14095,
                          "source": " NotebookData"
                        },
                        {
                          "ref": "Thenable",
                          "targs": [
                            {
                              "ref": "NotebookData",
                              "targs": [],
                              "isNullable": false,
                              "_": 14095,
                              "source": "NotebookData"
                            }
                          ],
                          "isNullable": false,
                          "_": 14095,
                          "source": " Thenable<NotebookData>"
                        }
                      ],
                      "isNullable": false,
                      "_": 14095,
                      "source": " NotebookData | Thenable<NotebookData>"
                    }
                  },
                  {
                    "doc": "Serialize notebook data into file contents.\n\n @param data A notebook data structure.\n @param token A cancellation token.\n @returns An array of bytes or a thenable that resolves to such.",
                    "isMethod": true,
                    "_": 14104,
                    "source": "\n\n\t\t/**\n\t\t * Serialize notebook data into file contents.\n\t\t *\n\t\t * @param data A notebook data structure.\n\t\t * @param token A cancellation token.\n\t\t * @returns An array of bytes or a thenable that resolves to such.\n\t\t */\n\t\tserializeNotebook(data: NotebookData, token: CancellationToken): Uint8Array | Thenable<Uint8Array>;",
                    "name": "serializeNotebook",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "data",
                        "type": {
                          "ref": "NotebookData",
                          "targs": [],
                          "isNullable": false,
                          "_": 14104,
                          "source": " NotebookData"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 14104,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "union": [
                        {
                          "ref": "Uint8Array",
                          "targs": [],
                          "isNullable": false,
                          "_": 14104,
                          "source": " Uint8Array"
                        },
                        {
                          "ref": "Thenable",
                          "targs": [
                            {
                              "ref": "Uint8Array",
                              "targs": [],
                              "isNullable": false,
                              "_": 14104,
                              "source": "Uint8Array"
                            }
                          ],
                          "isNullable": false,
                          "_": 14104,
                          "source": " Thenable<Uint8Array>"
                        }
                      ],
                      "isNullable": false,
                      "_": 14104,
                      "source": " Uint8Array | Thenable<Uint8Array>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline79",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "NotebookDocumentContentOptions",
                "source": "",
                "indexes": [
                  {
                    "key": {
                      "core": "string",
                      "isNullable": false,
                      "_": 14127,
                      "source": " string"
                    },
                    "value": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 14127,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 14127,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 14127,
                      "source": " boolean | undefined"
                    },
                    "doc": "",
                    "_": 14127,
                    "source": " [key: string]: boolean | undefined",
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false
                  }
                ],
                "ctors": [],
                "members": [],
                "calls": []
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline80",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "NotebookDocumentContentOptions",
                "source": "",
                "indexes": [
                  {
                    "key": {
                      "core": "string",
                      "isNullable": false,
                      "_": 14135,
                      "source": " string"
                    },
                    "value": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 14135,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 14135,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 14135,
                      "source": " boolean | undefined"
                    },
                    "doc": "",
                    "_": 14135,
                    "source": " [key: string]: boolean | undefined",
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false
                  }
                ],
                "ctors": [],
                "members": [],
                "calls": []
              },
              {
                "_": 14113,
                "name": "NotebookDocumentContentOptions",
                "generics": [],
                "doc": "Notebook content options define what parts of a notebook are persisted. Note\n\nFor instance, a notebook serializer can opt-out of saving outputs and in that case the editor doesn't mark a\nnotebooks as {@link NotebookDocument.isDirtydirty} when its output has changed.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Controls if output change events will trigger notebook document content change events and\n if it will be used in the diff editor, defaults to false. If the content provider doesn't\n persist the outputs in the file document, this should be set to true.",
                    "isMethod": false,
                    "_": 14119,
                    "source": "\n\t\t/**\n\t\t * Controls if output change events will trigger notebook document content change events and\n\t\t * if it will be used in the diff editor, defaults to false. If the content provider doesn't\n\t\t * persist the outputs in the file document, this should be set to true.\n\t\t */\n\t\ttransientOutputs?: boolean;",
                    "name": "transientOutputs",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 14119,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Controls if a cell metadata property change event will trigger notebook document content\n change events and if it will be used in the diff editor, defaults to false. If the\n content provider doesn't persist a metadata property in the file document, it should be\n set to true.",
                    "isMethod": false,
                    "_": 14127,
                    "source": "\n\n\t\t/**\n\t\t * Controls if a cell metadata property change event will trigger notebook document content\n\t\t * change events and if it will be used in the diff editor, defaults to false. If the\n\t\t * content provider doesn't persist a metadata property in the file document, it should be\n\t\t * set to true.\n\t\t */\n\t\ttransientCellMetadata?: { [key: string]: boolean | undefined };",
                    "name": "transientCellMetadata",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "IInline79",
                      "targs": [],
                      "isNullable": false,
                      "_": 14127,
                      "source": " { [key: string]: boolean | undefined }"
                    }
                  },
                  {
                    "doc": "Controls if a document metadata property change event will trigger notebook document\n content change event and if it will be used in the diff editor, defaults to false. If the\n content provider doesn't persist a metadata property in the file document, it should be\n set to true.",
                    "isMethod": false,
                    "_": 14135,
                    "source": "\n\n\t\t/**\n\t\t * Controls if a document metadata property change event will trigger notebook document\n\t\t * content change event and if it will be used in the diff editor, defaults to false. If the\n\t\t * content provider doesn't persist a metadata property in the file document, it should be\n\t\t * set to true.\n\t\t */\n\t\ttransientDocumentMetadata?: { [key: string]: boolean | undefined };",
                    "name": "transientDocumentMetadata",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "IInline80",
                      "targs": [],
                      "isNullable": false,
                      "_": 14135,
                      "source": " { [key: string]: boolean | undefined }"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline81",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "NotebookController",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 14265,
                    "source": " readonly notebook: NotebookDocument;",
                    "name": "notebook",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "NotebookDocument",
                      "targs": [],
                      "isNullable": false,
                      "_": 14265,
                      "source": " NotebookDocument"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 14265,
                    "source": " readonly selected: boolean",
                    "name": "selected",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 14265,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 14167,
                "name": "NotebookController",
                "generics": [],
                "doc": "A notebook controller represents an entity that can execute notebook cells. This is often referred to as a kernel.\n\nThere can be multiple controllers and the editor will let users choose which controller to use for a certain notebook. The\n{@linkcode NotebookController.notebookTypenotebookType}-property defines for what kind of notebooks a controller is for and\nthe {@linkcode NotebookController.updateNotebookAffinityupdateNotebookAffinity}-function allows controllers to set a preference\nfor specific notebook documents. When a controller has been selected its\n{@link NotebookController.onDidChangeSelectedNotebooksonDidChangeSelectedNotebooks}-event fires.\n\nWhen a cell is being run the editor will invoke the {@linkcode NotebookController.executeHandlerexecuteHandler} and a controller\nis expected to create and finalize a {@link NotebookCellExecutionnotebook cell execution}. However, controllers are also free\nto create executions by themselves.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The identifier of this notebook controller.\n\n_Note_ that controllers are remembered by their identifier and that extensions should use\nstable identifiers across sessions.",
                    "isMethod": false,
                    "_": 14175,
                    "source": "\n\n\t\t/**\n\t\t * The identifier of this notebook controller.\n\t\t *\n\t\t * _Note_ that controllers are remembered by their identifier and that extensions should use\n\t\t * stable identifiers across sessions.\n\t\t */\n\t\treadonly id: string;",
                    "name": "id",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 14175,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The notebook type this controller is for.",
                    "isMethod": false,
                    "_": 14180,
                    "source": "\n\n\t\t/**\n\t\t * The notebook type this controller is for.\n\t\t */\n\t\treadonly notebookType: string;",
                    "name": "notebookType",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 14180,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "An array of language identifiers that are supported by this\n controller. Any language identifier from {@linkcode languages.getLanguages getLanguages}\n is possible. When falsy all languages are supported.\n\n Samples:\n ```js\n // support JavaScript and TypeScript\n myController.supportedLanguages = ['javascript', 'typescript']\n\n // support all languages\n myController.supportedLanguages = undefined; // falsy\n myController.supportedLanguages = []; // falsy\n ```",
                    "isMethod": false,
                    "_": 14197,
                    "source": "\n\n\t\t/**\n\t\t * An array of language identifiers that are supported by this\n\t\t * controller. Any language identifier from {@linkcode languages.getLanguages getLanguages}\n\t\t * is possible. When falsy all languages are supported.\n\t\t *\n\t\t * Samples:\n\t\t * ```js\n\t\t * // support JavaScript and TypeScript\n\t\t * myController.supportedLanguages = ['javascript', 'typescript']\n\t\t *\n\t\t * // support all languages\n\t\t * myController.supportedLanguages = undefined; // falsy\n\t\t * myController.supportedLanguages = []; // falsy\n\t\t * ```\n\t\t */\n\t\tsupportedLanguages?: string[];",
                    "name": "supportedLanguages",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 14197,
                          "source": " string"
                        }
                      ],
                      "isNullable": false,
                      "_": 14197,
                      "source": " string[]"
                    }
                  },
                  {
                    "doc": "The human-readable label of this notebook controller.",
                    "isMethod": false,
                    "_": 14202,
                    "source": "\n\n\t\t/**\n\t\t * The human-readable label of this notebook controller.\n\t\t */\n\t\tlabel: string;",
                    "name": "label",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 14202,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The human-readable description which is rendered less prominent.",
                    "isMethod": false,
                    "_": 14207,
                    "source": "\n\n\t\t/**\n\t\t * The human-readable description which is rendered less prominent.\n\t\t */\n\t\tdescription?: string;",
                    "name": "description",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 14207,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The human-readable detail which is rendered less prominent.",
                    "isMethod": false,
                    "_": 14212,
                    "source": "\n\n\t\t/**\n\t\t * The human-readable detail which is rendered less prominent.\n\t\t */\n\t\tdetail?: string;",
                    "name": "detail",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 14212,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Whether this controller supports execution order so that the\n editor can render placeholders for them.",
                    "isMethod": false,
                    "_": 14218,
                    "source": "\n\n\t\t/**\n\t\t * Whether this controller supports execution order so that the\n\t\t * editor can render placeholders for them.\n\t\t */\n\t\tsupportsExecutionOrder?: boolean;",
                    "name": "supportsExecutionOrder",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 14218,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Create a cell execution task.\n\n _Note_ that there can only be one execution per cell at a time and that an error is thrown if\n a cell execution is created while another is still active.\n\n This should be used in response to the {@link NotebookController.executeHandler execution handler}\n being called or when cell execution has been started else, e.g when a cell was already\n executing or when cell execution was triggered from another source.\n\n @param cell The notebook cell for which to create the execution.\n @returns A notebook cell execution.",
                    "isMethod": true,
                    "_": 14233,
                    "source": "\n\n\t\t/**\n\t\t * Create a cell execution task.\n\t\t *\n\t\t * _Note_ that there can only be one execution per cell at a time and that an error is thrown if\n\t\t * a cell execution is created while another is still active.\n\t\t *\n\t\t * This should be used in response to the {@link NotebookController.executeHandler execution handler}\n\t\t * being called or when cell execution has been started else, e.g when a cell was already\n\t\t * executing or when cell execution was triggered from another source.\n\t\t *\n\t\t * @param cell The notebook cell for which to create the execution.\n\t\t * @returns A notebook cell execution.\n\t\t */\n\t\tcreateNotebookCellExecution(cell: NotebookCell): NotebookCellExecution;",
                    "name": "createNotebookCellExecution",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "cell",
                        "type": {
                          "ref": "NotebookCell",
                          "targs": [],
                          "isNullable": false,
                          "_": 14233,
                          "source": " NotebookCell"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "NotebookCellExecution",
                      "targs": [],
                      "isNullable": false,
                      "_": 14233,
                      "source": " NotebookCellExecution"
                    }
                  },
                  {
                    "doc": "The execute handler is invoked when the run gestures in the UI are selected, e.g Run Cell, Run All,\n Run Selection etc. The execute handler is responsible for creating and managing {@link NotebookCellExecution execution}-objects.",
                    "isMethod": false,
                    "_": 14239,
                    "source": "\n\n\t\t/**\n\t\t * The execute handler is invoked when the run gestures in the UI are selected, e.g Run Cell, Run All,\n\t\t * Run Selection etc. The execute handler is responsible for creating and managing {@link NotebookCellExecution execution}-objects.\n\t\t */\n\t\texecuteHandler: (cells: NotebookCell[], notebook: NotebookDocument, controller: NotebookController) => void | Thenable<void>;",
                    "name": "executeHandler",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ctor": false,
                      "generics": [],
                      "returns": {
                        "union": [
                          {
                            "core": "void",
                            "isNullable": false,
                            "_": 14239,
                            "source": " void"
                          },
                          {
                            "ref": "Thenable",
                            "targs": [
                              {
                                "core": "void",
                                "isNullable": false,
                                "_": 14239,
                                "source": "void"
                              }
                            ],
                            "isNullable": false,
                            "_": 14239,
                            "source": " Thenable<void>"
                          }
                        ],
                        "isNullable": false,
                        "_": 14239,
                        "source": " void | Thenable<void>"
                      },
                      "params": [
                        {
                          "name": "cells",
                          "type": {
                            "core": "array",
                            "targs": [
                              {
                                "ref": "NotebookCell",
                                "targs": [],
                                "isNullable": false,
                                "_": 14239,
                                "source": " NotebookCell"
                              }
                            ],
                            "isNullable": false,
                            "_": 14239,
                            "source": " NotebookCell[]"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "notebook",
                          "type": {
                            "ref": "NotebookDocument",
                            "targs": [],
                            "isNullable": false,
                            "_": 14239,
                            "source": " NotebookDocument"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "controller",
                          "type": {
                            "ref": "NotebookController",
                            "targs": [],
                            "isNullable": false,
                            "_": 14239,
                            "source": " NotebookController"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "isNullable": false,
                      "_": 14239,
                      "source": " (cells: NotebookCell[], notebook: NotebookDocument, controller: NotebookController) => void | Thenable<void>"
                    }
                  },
                  {
                    "doc": "Optional interrupt handler.\n\n By default cell execution is canceled via {@link NotebookCellExecution.token tokens}. Cancellation\n tokens require that a controller can keep track of its execution so that it can cancel a specific execution at a later\n point. Not all scenarios allow for that, eg. REPL-style controllers often work by interrupting whatever is currently\n running. For those cases the interrupt handler exists - it can be thought of as the equivalent of `SIGINT`\n or `Control+C` in terminals.\n\n _Note_ that supporting {@link NotebookCellExecution.token cancellation tokens} is preferred and that interrupt handlers should\n only be used when tokens cannot be supported.",
                    "isMethod": false,
                    "_": 14253,
                    "source": "\n\n\t\t/**\n\t\t * Optional interrupt handler.\n\t\t *\n\t\t * By default cell execution is canceled via {@link NotebookCellExecution.token tokens}. Cancellation\n\t\t * tokens require that a controller can keep track of its execution so that it can cancel a specific execution at a later\n\t\t * point. Not all scenarios allow for that, eg. REPL-style controllers often work by interrupting whatever is currently\n\t\t * running. For those cases the interrupt handler exists - it can be thought of as the equivalent of `SIGINT`\n\t\t * or `Control+C` in terminals.\n\t\t *\n\t\t * _Note_ that supporting {@link NotebookCellExecution.token cancellation tokens} is preferred and that interrupt handlers should\n\t\t * only be used when tokens cannot be supported.\n\t\t */\n\t\tinterruptHandler?: (notebook: NotebookDocument) => void | Thenable<void>;",
                    "name": "interruptHandler",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ctor": false,
                      "generics": [],
                      "returns": {
                        "union": [
                          {
                            "core": "void",
                            "isNullable": false,
                            "_": 14253,
                            "source": " void"
                          },
                          {
                            "ref": "Thenable",
                            "targs": [
                              {
                                "core": "void",
                                "isNullable": false,
                                "_": 14253,
                                "source": "void"
                              }
                            ],
                            "isNullable": false,
                            "_": 14253,
                            "source": " Thenable<void>"
                          }
                        ],
                        "isNullable": false,
                        "_": 14253,
                        "source": " void | Thenable<void>"
                      },
                      "params": [
                        {
                          "name": "notebook",
                          "type": {
                            "ref": "NotebookDocument",
                            "targs": [],
                            "isNullable": false,
                            "_": 14253,
                            "source": " NotebookDocument"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "isNullable": false,
                      "_": 14253,
                      "source": " (notebook: NotebookDocument) => void | Thenable<void>"
                    }
                  },
                  {
                    "doc": "An event that fires whenever a controller has been selected or un-selected for a notebook document.\n\nThere can be multiple controllers for a notebook and in that case a controllers needs to be _selected_. This is a user gesture\nand happens either explicitly or implicitly when interacting with a notebook for which a controller was _suggested_. When possible,\nthe editor _suggests_ a controller that is most likely to be _selected_.\n\n_Note_ that controller selection is persisted (by the controllers {@link NotebookController.idid}) and restored as soon as a\ncontroller is re-created or as a notebook is {@link workspace.onDidOpenNotebookDocumentopened}.",
                    "isMethod": false,
                    "_": 14265,
                    "source": "\n\n\t\t/**\n\t\t * An event that fires whenever a controller has been selected or un-selected for a notebook document.\n\t\t *\n\t\t * There can be multiple controllers for a notebook and in that case a controllers needs to be _selected_. This is a user gesture\n\t\t * and happens either explicitly or implicitly when interacting with a notebook for which a controller was _suggested_. When possible,\n\t\t * the editor _suggests_ a controller that is most likely to be _selected_.\n\t\t *\n\t\t * _Note_ that controller selection is persisted (by the controllers {@link NotebookController.id id}) and restored as soon as a\n\t\t * controller is re-created or as a notebook is {@link workspace.onDidOpenNotebookDocument opened}.\n\t\t */\n\t\treadonly onDidChangeSelectedNotebooks: Event<{ readonly notebook: NotebookDocument; readonly selected: boolean }>;",
                    "name": "onDidChangeSelectedNotebooks",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "ref": "IInline81",
                          "targs": [],
                          "isNullable": false,
                          "_": 14265,
                          "source": "{ readonly notebook: NotebookDocument; readonly selected: boolean }"
                        }
                      ],
                      "isNullable": false,
                      "_": 14265,
                      "source": " Event<{ readonly notebook: NotebookDocument; readonly selected: boolean }>"
                    }
                  },
                  {
                    "doc": "A controller can set affinities for specific notebook documents. This allows a controller\n to be presented more prominent for some notebooks.\n\n @param notebook The notebook for which a priority is set.\n @param affinity A controller affinity",
                    "isMethod": true,
                    "_": 14274,
                    "source": "\n\n\t\t/**\n\t\t * A controller can set affinities for specific notebook documents. This allows a controller\n\t\t * to be presented more prominent for some notebooks.\n\t\t *\n\t\t * @param notebook The notebook for which a priority is set.\n\t\t * @param affinity A controller affinity\n\t\t */\n\t\tupdateNotebookAffinity(notebook: NotebookDocument, affinity: NotebookControllerAffinity): void;",
                    "name": "updateNotebookAffinity",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "notebook",
                        "type": {
                          "ref": "NotebookDocument",
                          "targs": [],
                          "isNullable": false,
                          "_": 14274,
                          "source": " NotebookDocument"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "affinity",
                        "type": {
                          "ref": "NotebookControllerAffinity",
                          "targs": [],
                          "isNullable": false,
                          "_": 14274,
                          "source": " NotebookControllerAffinity"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 14274,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Dispose and free associated resources.",
                    "isMethod": true,
                    "_": 14279,
                    "source": "\n\n\t\t/**\n\t\t * Dispose and free associated resources.\n\t\t */\n\t\tdispose(): void;",
                    "name": "dispose",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 14279,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 14290,
                "name": "NotebookCellExecution",
                "generics": [],
                "doc": "A NotebookCellExecution is how {@link NotebookControllernotebook controller} modify a notebook cell as\nit is executing.\n\nWhen a cell execution object is created, the cell enters the {@linkcode NotebookCellExecutionState.Pending Pending} state.\nWhen {@linkcode NotebookCellExecution.startstart(...)} is called on the execution task, it enters the {@linkcode NotebookCellExecutionState.Executing Executing} state. When\n{@linkcode NotebookCellExecution.endend(...)} is called, it enters the {@linkcode NotebookCellExecutionState.Idle Idle} state.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The {@link NotebookCellcell} for which this execution has been created.",
                    "isMethod": false,
                    "_": 14295,
                    "source": "\n\n\t\t/**\n\t\t * The {@link NotebookCell cell} for which this execution has been created.\n\t\t */\n\t\treadonly cell: NotebookCell;",
                    "name": "cell",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "NotebookCell",
                      "targs": [],
                      "isNullable": false,
                      "_": 14295,
                      "source": " NotebookCell"
                    }
                  },
                  {
                    "doc": "A cancellation token which will be triggered when the cell execution is canceled\nfrom the UI.\n\n_Note_ that the cancellation token will not be triggered when the {@link NotebookControllercontroller}\nthat created this execution uses an {@link NotebookController.interruptHandlerinterrupt-handler}.",
                    "isMethod": false,
                    "_": 14304,
                    "source": "\n\n\t\t/**\n\t\t * A cancellation token which will be triggered when the cell execution is canceled\n\t\t * from the UI.\n\t\t *\n\t\t * _Note_ that the cancellation token will not be triggered when the {@link NotebookController controller}\n\t\t * that created this execution uses an {@link NotebookController.interruptHandler interrupt-handler}.\n\t\t */\n\t\treadonly token: CancellationToken;",
                    "name": "token",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "CancellationToken",
                      "targs": [],
                      "isNullable": false,
                      "_": 14304,
                      "source": " CancellationToken"
                    }
                  },
                  {
                    "doc": "Set and unset the order of this cell execution.",
                    "isMethod": false,
                    "_": 14309,
                    "source": "\n\n\t\t/**\n\t\t * Set and unset the order of this cell execution.\n\t\t */\n\t\texecutionOrder: number | undefined;",
                    "name": "executionOrder",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 14309,
                          "source": " number"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 14309,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 14309,
                      "source": " number | undefined"
                    }
                  },
                  {
                    "doc": "Signal that the execution has begun.\n\n @param startTime The time that execution began, in milliseconds in the Unix epoch. Used to drive the clock\n that shows for how long a cell has been running. If not given, the clock won't be shown.",
                    "isMethod": true,
                    "_": 14317,
                    "source": "\n\n\t\t/**\n\t\t * Signal that the execution has begun.\n\t\t *\n\t\t * @param startTime The time that execution began, in milliseconds in the Unix epoch. Used to drive the clock\n\t\t * that shows for how long a cell has been running. If not given, the clock won't be shown.\n\t\t */\n\t\tstart(startTime?: number): void;",
                    "name": "start",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "startTime",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 14317,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 14317,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Signal that execution has ended.\n\n @param success If true, a green check is shown on the cell status bar.\n If false, a red X is shown.\n If undefined, no check or X icon is shown.\n @param endTime The time that execution finished, in milliseconds in the Unix epoch.",
                    "isMethod": true,
                    "_": 14327,
                    "source": "\n\n\t\t/**\n\t\t * Signal that execution has ended.\n\t\t *\n\t\t * @param success If true, a green check is shown on the cell status bar.\n\t\t * If false, a red X is shown.\n\t\t * If undefined, no check or X icon is shown.\n\t\t * @param endTime The time that execution finished, in milliseconds in the Unix epoch.\n\t\t */\n\t\tend(success: boolean | undefined, endTime?: number): void;",
                    "name": "end",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "success",
                        "type": {
                          "union": [
                            {
                              "core": "boolean",
                              "isNullable": false,
                              "_": 14327,
                              "source": " boolean"
                            },
                            {
                              "core": "undefined",
                              "isNullable": false,
                              "_": 14327,
                              "source": " undefined"
                            }
                          ],
                          "isNullable": false,
                          "_": 14327,
                          "source": " boolean | undefined"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "endTime",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 14327,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 14327,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Clears the output of the cell that is executing or of another cell that is affected by this execution.\n\n @param cell Cell for which output is cleared. Defaults to the {@link NotebookCellExecution.cell cell} of\n this execution.\n @return A thenable that resolves when the operation finished.",
                    "isMethod": true,
                    "_": 14336,
                    "source": "\n\n\t\t/**\n\t\t * Clears the output of the cell that is executing or of another cell that is affected by this execution.\n\t\t *\n\t\t * @param cell Cell for which output is cleared. Defaults to the {@link NotebookCellExecution.cell cell} of\n\t\t * this execution.\n\t\t * @return A thenable that resolves when the operation finished.\n\t\t */\n\t\tclearOutput(cell?: NotebookCell): Thenable<void>;",
                    "name": "clearOutput",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "cell",
                        "type": {
                          "ref": "NotebookCell",
                          "targs": [],
                          "isNullable": false,
                          "_": 14336,
                          "source": " NotebookCell"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "Thenable",
                      "targs": [
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 14336,
                          "source": "void"
                        }
                      ],
                      "isNullable": false,
                      "_": 14336,
                      "source": " Thenable<void>"
                    }
                  },
                  {
                    "doc": "Replace the output of the cell that is executing or of another cell that is affected by this execution.\n\n @param out Output that replaces the current output.\n @param cell Cell for which output is cleared. Defaults to the {@link NotebookCellExecution.cell cell} of\n this execution.\n @return A thenable that resolves when the operation finished.",
                    "isMethod": true,
                    "_": 14346,
                    "source": "\n\n\t\t/**\n\t\t * Replace the output of the cell that is executing or of another cell that is affected by this execution.\n\t\t *\n\t\t * @param out Output that replaces the current output.\n\t\t * @param cell Cell for which output is cleared. Defaults to the {@link NotebookCellExecution.cell cell} of\n\t\t * this execution.\n\t\t * @return A thenable that resolves when the operation finished.\n\t\t */\n\t\treplaceOutput(out: NotebookCellOutput | readonly NotebookCellOutput[], cell?: NotebookCell): Thenable<void>;",
                    "name": "replaceOutput",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "out",
                        "type": {
                          "union": [
                            {
                              "ref": "NotebookCellOutput",
                              "targs": [],
                              "isNullable": false,
                              "_": 14346,
                              "source": " NotebookCellOutput"
                            },
                            {
                              "operator": 146,
                              "type": {
                                "core": "array",
                                "targs": [
                                  {
                                    "ref": "NotebookCellOutput",
                                    "targs": [],
                                    "isNullable": false,
                                    "_": 14346,
                                    "source": " NotebookCellOutput"
                                  }
                                ],
                                "isNullable": false,
                                "_": 14346,
                                "source": " NotebookCellOutput[]"
                              },
                              "isNullable": false,
                              "_": 14346,
                              "source": " readonly NotebookCellOutput[]"
                            }
                          ],
                          "isNullable": false,
                          "_": 14346,
                          "source": " NotebookCellOutput | readonly NotebookCellOutput[]"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "cell",
                        "type": {
                          "ref": "NotebookCell",
                          "targs": [],
                          "isNullable": false,
                          "_": 14346,
                          "source": " NotebookCell"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "Thenable",
                      "targs": [
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 14346,
                          "source": "void"
                        }
                      ],
                      "isNullable": false,
                      "_": 14346,
                      "source": " Thenable<void>"
                    }
                  },
                  {
                    "doc": "Append to the output of the cell that is executing or to another cell that is affected by this execution.\n\n @param out Output that is appended to the current output.\n @param cell Cell for which output is cleared. Defaults to the {@link NotebookCellExecution.cell cell} of\n this execution.\n @return A thenable that resolves when the operation finished.",
                    "isMethod": true,
                    "_": 14356,
                    "source": "\n\n\t\t/**\n\t\t * Append to the output of the cell that is executing or to another cell that is affected by this execution.\n\t\t *\n\t\t * @param out Output that is appended to the current output.\n\t\t * @param cell Cell for which output is cleared. Defaults to the {@link NotebookCellExecution.cell cell} of\n\t\t * this execution.\n\t\t * @return A thenable that resolves when the operation finished.\n\t\t */\n\t\tappendOutput(out: NotebookCellOutput | readonly NotebookCellOutput[], cell?: NotebookCell): Thenable<void>;",
                    "name": "appendOutput",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "out",
                        "type": {
                          "union": [
                            {
                              "ref": "NotebookCellOutput",
                              "targs": [],
                              "isNullable": false,
                              "_": 14356,
                              "source": " NotebookCellOutput"
                            },
                            {
                              "operator": 146,
                              "type": {
                                "core": "array",
                                "targs": [
                                  {
                                    "ref": "NotebookCellOutput",
                                    "targs": [],
                                    "isNullable": false,
                                    "_": 14356,
                                    "source": " NotebookCellOutput"
                                  }
                                ],
                                "isNullable": false,
                                "_": 14356,
                                "source": " NotebookCellOutput[]"
                              },
                              "isNullable": false,
                              "_": 14356,
                              "source": " readonly NotebookCellOutput[]"
                            }
                          ],
                          "isNullable": false,
                          "_": 14356,
                          "source": " NotebookCellOutput | readonly NotebookCellOutput[]"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "cell",
                        "type": {
                          "ref": "NotebookCell",
                          "targs": [],
                          "isNullable": false,
                          "_": 14356,
                          "source": " NotebookCell"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "Thenable",
                      "targs": [
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 14356,
                          "source": "void"
                        }
                      ],
                      "isNullable": false,
                      "_": 14356,
                      "source": " Thenable<void>"
                    }
                  },
                  {
                    "doc": "Replace all output items of existing cell output.\n\n @param items Output items that replace the items of existing output.\n @param output Output object that already exists.\n @return A thenable that resolves when the operation finished.",
                    "isMethod": true,
                    "_": 14365,
                    "source": "\n\n\t\t/**\n\t\t * Replace all output items of existing cell output.\n\t\t *\n\t\t * @param items Output items that replace the items of existing output.\n\t\t * @param output Output object that already exists.\n\t\t * @return A thenable that resolves when the operation finished.\n\t\t */\n\t\treplaceOutputItems(items: NotebookCellOutputItem | readonly NotebookCellOutputItem[], output: NotebookCellOutput): Thenable<void>;",
                    "name": "replaceOutputItems",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "items",
                        "type": {
                          "union": [
                            {
                              "ref": "NotebookCellOutputItem",
                              "targs": [],
                              "isNullable": false,
                              "_": 14365,
                              "source": " NotebookCellOutputItem"
                            },
                            {
                              "operator": 146,
                              "type": {
                                "core": "array",
                                "targs": [
                                  {
                                    "ref": "NotebookCellOutputItem",
                                    "targs": [],
                                    "isNullable": false,
                                    "_": 14365,
                                    "source": " NotebookCellOutputItem"
                                  }
                                ],
                                "isNullable": false,
                                "_": 14365,
                                "source": " NotebookCellOutputItem[]"
                              },
                              "isNullable": false,
                              "_": 14365,
                              "source": " readonly NotebookCellOutputItem[]"
                            }
                          ],
                          "isNullable": false,
                          "_": 14365,
                          "source": " NotebookCellOutputItem | readonly NotebookCellOutputItem[]"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "output",
                        "type": {
                          "ref": "NotebookCellOutput",
                          "targs": [],
                          "isNullable": false,
                          "_": 14365,
                          "source": " NotebookCellOutput"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Thenable",
                      "targs": [
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 14365,
                          "source": "void"
                        }
                      ],
                      "isNullable": false,
                      "_": 14365,
                      "source": " Thenable<void>"
                    }
                  },
                  {
                    "doc": "Append output items to existing cell output.\n\n @param items Output items that are append to existing output.\n @param output Output object that already exists.\n @return A thenable that resolves when the operation finished.",
                    "isMethod": true,
                    "_": 14374,
                    "source": "\n\n\t\t/**\n\t\t * Append output items to existing cell output.\n\t\t *\n\t\t * @param items Output items that are append to existing output.\n\t\t * @param output Output object that already exists.\n\t\t * @return A thenable that resolves when the operation finished.\n\t\t */\n\t\tappendOutputItems(items: NotebookCellOutputItem | readonly NotebookCellOutputItem[], output: NotebookCellOutput): Thenable<void>;",
                    "name": "appendOutputItems",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "items",
                        "type": {
                          "union": [
                            {
                              "ref": "NotebookCellOutputItem",
                              "targs": [],
                              "isNullable": false,
                              "_": 14374,
                              "source": " NotebookCellOutputItem"
                            },
                            {
                              "operator": 146,
                              "type": {
                                "core": "array",
                                "targs": [
                                  {
                                    "ref": "NotebookCellOutputItem",
                                    "targs": [],
                                    "isNullable": false,
                                    "_": 14374,
                                    "source": " NotebookCellOutputItem"
                                  }
                                ],
                                "isNullable": false,
                                "_": 14374,
                                "source": " NotebookCellOutputItem[]"
                              },
                              "isNullable": false,
                              "_": 14374,
                              "source": " readonly NotebookCellOutputItem[]"
                            }
                          ],
                          "isNullable": false,
                          "_": 14374,
                          "source": " NotebookCellOutputItem | readonly NotebookCellOutputItem[]"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "output",
                        "type": {
                          "ref": "NotebookCellOutput",
                          "targs": [],
                          "isNullable": false,
                          "_": 14374,
                          "source": " NotebookCellOutput"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Thenable",
                      "targs": [
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 14374,
                          "source": "void"
                        }
                      ],
                      "isNullable": false,
                      "_": 14374,
                      "source": " Thenable<void>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 14396,
                "name": "NotebookCellStatusBarItem",
                "generics": [],
                "doc": "A contribution to a cell's status bar",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 14437,
                    "source": "\n\n\t\t/**\n\t\t * Creates a new NotebookCellStatusBarItem.\n\t\t * @param text The text to show for the item.\n\t\t * @param alignment Whether the item is aligned to the left or right.\n\t\t */\n\t\tconstructor(text: string, alignment: NotebookCellStatusBarAlignment);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "text",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 14437,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "alignment",
                        "type": {
                          "ref": "NotebookCellStatusBarAlignment",
                          "targs": [],
                          "isNullable": false,
                          "_": 14437,
                          "source": " NotebookCellStatusBarAlignment"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The text to show for the item.",
                    "isMethod": false,
                    "_": 14400,
                    "source": "\n\t\t/**\n\t\t * The text to show for the item.\n\t\t */\n\t\ttext: string;",
                    "name": "text",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 14400,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Whether the item is aligned to the left or right.",
                    "isMethod": false,
                    "_": 14405,
                    "source": "\n\n\t\t/**\n\t\t * Whether the item is aligned to the left or right.\n\t\t */\n\t\talignment: NotebookCellStatusBarAlignment;",
                    "name": "alignment",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "NotebookCellStatusBarAlignment",
                      "targs": [],
                      "isNullable": false,
                      "_": 14405,
                      "source": " NotebookCellStatusBarAlignment"
                    }
                  },
                  {
                    "doc": "An optional {@linkcode Command} or identifier of a command to run on click.\n\n The command must be {@link commands.getCommands known}.\n\n Note that if this is a {@linkcode Command} object, only the {@linkcode Command.command command} and {@linkcode Command.arguments arguments}\n are used by the editor.",
                    "isMethod": false,
                    "_": 14415,
                    "source": "\n\n\t\t/**\n\t\t * An optional {@linkcode Command} or identifier of a command to run on click.\n\t\t *\n\t\t * The command must be {@link commands.getCommands known}.\n\t\t *\n\t\t * Note that if this is a {@linkcode Command} object, only the {@linkcode Command.command command} and {@linkcode Command.arguments arguments}\n\t\t * are used by the editor.\n\t\t */\n\t\tcommand?: string | Command;",
                    "name": "command",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 14415,
                          "source": " string"
                        },
                        {
                          "ref": "Command",
                          "targs": [],
                          "isNullable": false,
                          "_": 14415,
                          "source": " Command"
                        }
                      ],
                      "isNullable": false,
                      "_": 14415,
                      "source": " string | Command"
                    }
                  },
                  {
                    "doc": "A tooltip to show when the item is hovered.",
                    "isMethod": false,
                    "_": 14420,
                    "source": "\n\n\t\t/**\n\t\t * A tooltip to show when the item is hovered.\n\t\t */\n\t\ttooltip?: string;",
                    "name": "tooltip",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 14420,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The priority of the item. A higher value item will be shown more to the left.",
                    "isMethod": false,
                    "_": 14425,
                    "source": "\n\n\t\t/**\n\t\t * The priority of the item. A higher value item will be shown more to the left.\n\t\t */\n\t\tpriority?: number;",
                    "name": "priority",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 14425,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "Accessibility information used when a screen reader interacts with this item.",
                    "isMethod": false,
                    "_": 14430,
                    "source": "\n\n\t\t/**\n\t\t * Accessibility information used when a screen reader interacts with this item.\n\t\t */\n\t\taccessibilityInformation?: AccessibilityInformation;",
                    "name": "accessibilityInformation",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "AccessibilityInformation",
                      "targs": [],
                      "isNullable": false,
                      "_": 14430,
                      "source": " AccessibilityInformation"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 14443,
                "name": "NotebookCellStatusBarItemProvider",
                "generics": [],
                "doc": "A provider that can contribute items to the status bar that appears below a cell's editor.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "An optional event to signal that statusbar items have changed. The provide method will be called again.",
                    "isMethod": false,
                    "_": 14447,
                    "source": "\n\t\t/**\n\t\t * An optional event to signal that statusbar items have changed. The provide method will be called again.\n\t\t */\n\t\tonDidChangeCellStatusBarItems?: Event<void>;",
                    "name": "onDidChangeCellStatusBarItems",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 14447,
                          "source": "void"
                        }
                      ],
                      "isNullable": false,
                      "_": 14447,
                      "source": " Event<void>"
                    }
                  },
                  {
                    "doc": "The provider will be called when the cell scrolls into view, when its content, outputs, language, or metadata change, and when it changes execution state.\n @param cell The cell for which to return items.\n @param token A token triggered if this request should be cancelled.\n @return One or more {@link NotebookCellStatusBarItem cell statusbar items}",
                    "isMethod": true,
                    "_": 14455,
                    "source": "\n\n\t\t/**\n\t\t * The provider will be called when the cell scrolls into view, when its content, outputs, language, or metadata change, and when it changes execution state.\n\t\t * @param cell The cell for which to return items.\n\t\t * @param token A token triggered if this request should be cancelled.\n\t\t * @return One or more {@link NotebookCellStatusBarItem cell statusbar items}\n\t\t */\n\t\tprovideCellStatusBarItems(cell: NotebookCell, token: CancellationToken): ProviderResult<NotebookCellStatusBarItem | NotebookCellStatusBarItem[]>;",
                    "name": "provideCellStatusBarItems",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "cell",
                        "type": {
                          "ref": "NotebookCell",
                          "targs": [],
                          "isNullable": false,
                          "_": 14455,
                          "source": " NotebookCell"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 14455,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "union": [
                            {
                              "ref": "NotebookCellStatusBarItem",
                              "targs": [],
                              "isNullable": false,
                              "_": 14455,
                              "source": "NotebookCellStatusBarItem"
                            },
                            {
                              "core": "array",
                              "targs": [
                                {
                                  "ref": "NotebookCellStatusBarItem",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 14455,
                                  "source": " NotebookCellStatusBarItem"
                                }
                              ],
                              "isNullable": false,
                              "_": 14455,
                              "source": " NotebookCellStatusBarItem[]"
                            }
                          ],
                          "isNullable": false,
                          "_": 14455,
                          "source": "NotebookCellStatusBarItem | NotebookCellStatusBarItem[]"
                        }
                      ],
                      "isNullable": false,
                      "_": 14455,
                      "source": " ProviderResult<NotebookCellStatusBarItem | NotebookCellStatusBarItem[]>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 14504,
                "name": "SourceControlInputBox",
                "generics": [],
                "doc": "Represents the input box in the Source Control viewlet.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Setter and getter for the contents of the input box.",
                    "isMethod": false,
                    "_": 14509,
                    "source": "\n\n\t\t/**\n\t\t * Setter and getter for the contents of the input box.\n\t\t */\n\t\tvalue: string;",
                    "name": "value",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 14509,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "A string to show as placeholder in the input box to guide the user.",
                    "isMethod": false,
                    "_": 14514,
                    "source": "\n\n\t\t/**\n\t\t * A string to show as placeholder in the input box to guide the user.\n\t\t */\n\t\tplaceholder: string;",
                    "name": "placeholder",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 14514,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Controls whether the input box is enabled (default is `true`).",
                    "isMethod": false,
                    "_": 14519,
                    "source": "\n\n\t\t/**\n\t\t * Controls whether the input box is enabled (default is `true`).\n\t\t */\n\t\tenabled: boolean;",
                    "name": "enabled",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 14519,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Controls whether the input box is visible (default is `true`).",
                    "isMethod": false,
                    "_": 14524,
                    "source": "\n\n\t\t/**\n\t\t * Controls whether the input box is visible (default is `true`).\n\t\t */\n\t\tvisible: boolean;",
                    "name": "visible",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 14524,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 14527,
                "name": "QuickDiffProvider",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Provide a {@link Uri} to the original resource of any given resource uri.\n\n @param uri The uri of the resource open in a text editor.\n @param token A cancellation token.\n @return A thenable that resolves to uri of the matching original resource.",
                    "isMethod": true,
                    "_": 14536,
                    "source": "\n\n\t\t/**\n\t\t * Provide a {@link Uri} to the original resource of any given resource uri.\n\t\t *\n\t\t * @param uri The uri of the resource open in a text editor.\n\t\t * @param token A cancellation token.\n\t\t * @return A thenable that resolves to uri of the matching original resource.\n\t\t */\n\t\tprovideOriginalResource?(uri: Uri, token: CancellationToken): ProviderResult<Uri>;",
                    "name": "provideOriginalResource",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "uri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 14536,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 14536,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 14536,
                          "source": "Uri"
                        }
                      ],
                      "isNullable": false,
                      "_": 14536,
                      "source": " ProviderResult<Uri>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 14543,
                "name": "SourceControlResourceThemableDecorations",
                "generics": [],
                "doc": "The theme-aware decorations for a\n{@link SourceControlResourceStatesource control resource state}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The icon path for a specific\n{@link SourceControlResourceStatesource control resource state}.",
                    "isMethod": false,
                    "_": 14549,
                    "source": "\n\n\t\t/**\n\t\t * The icon path for a specific\n\t\t * {@link SourceControlResourceState source control resource state}.\n\t\t */\n\t\treadonly iconPath?: string | Uri | ThemeIcon;",
                    "name": "iconPath",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 14549,
                          "source": " string"
                        },
                        {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 14549,
                          "source": " Uri"
                        },
                        {
                          "ref": "ThemeIcon",
                          "targs": [],
                          "isNullable": false,
                          "_": 14549,
                          "source": " ThemeIcon"
                        }
                      ],
                      "isNullable": false,
                      "_": 14549,
                      "source": " string | Uri | ThemeIcon"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 14556,
                "name": "SourceControlResourceDecorations",
                "generics": [],
                "doc": "The decorations for a {@link SourceControlResourceStatesource control resource state}.\nCan be independently specified for light and dark themes.",
                "heritage": [
                  [
                    {
                      "ref": "SourceControlResourceThemableDecorations",
                      "targs": [],
                      "isNullable": false,
                      "_": 14556,
                      "source": " SourceControlResourceThemableDecorations"
                    }
                  ]
                ],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Whether the {@link SourceControlResourceStatesource control resource state} should\nbe striked-through in the UI.",
                    "isMethod": false,
                    "_": 14562,
                    "source": "\n\n\t\t/**\n\t\t * Whether the {@link SourceControlResourceState source control resource state} should\n\t\t * be striked-through in the UI.\n\t\t */\n\t\treadonly strikeThrough?: boolean;",
                    "name": "strikeThrough",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 14562,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Whether the {@link SourceControlResourceStatesource control resource state} should\nbe faded in the UI.",
                    "isMethod": false,
                    "_": 14568,
                    "source": "\n\n\t\t/**\n\t\t * Whether the {@link SourceControlResourceState source control resource state} should\n\t\t * be faded in the UI.\n\t\t */\n\t\treadonly faded?: boolean;",
                    "name": "faded",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 14568,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "The title for a specific\n{@link SourceControlResourceStatesource control resource state}.",
                    "isMethod": false,
                    "_": 14574,
                    "source": "\n\n\t\t/**\n\t\t * The title for a specific\n\t\t * {@link SourceControlResourceState source control resource state}.\n\t\t */\n\t\treadonly tooltip?: string;",
                    "name": "tooltip",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 14574,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The light theme decorations.",
                    "isMethod": false,
                    "_": 14579,
                    "source": "\n\n\t\t/**\n\t\t * The light theme decorations.\n\t\t */\n\t\treadonly light?: SourceControlResourceThemableDecorations;",
                    "name": "light",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "SourceControlResourceThemableDecorations",
                      "targs": [],
                      "isNullable": false,
                      "_": 14579,
                      "source": " SourceControlResourceThemableDecorations"
                    }
                  },
                  {
                    "doc": "The dark theme decorations.",
                    "isMethod": false,
                    "_": 14584,
                    "source": "\n\n\t\t/**\n\t\t * The dark theme decorations.\n\t\t */\n\t\treadonly dark?: SourceControlResourceThemableDecorations;",
                    "name": "dark",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "SourceControlResourceThemableDecorations",
                      "targs": [],
                      "isNullable": false,
                      "_": 14584,
                      "source": " SourceControlResourceThemableDecorations"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 14591,
                "name": "SourceControlResourceState",
                "generics": [],
                "doc": "An source control resource state represents the state of an underlying workspace\nresource within a certain {@link SourceControlResourceGroupsource control group}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The {@link Uri} of the underlying resource inside the workspace.",
                    "isMethod": false,
                    "_": 14596,
                    "source": "\n\n\t\t/**\n\t\t * The {@link Uri} of the underlying resource inside the workspace.\n\t\t */\n\t\treadonly resourceUri: Uri;",
                    "name": "resourceUri",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 14596,
                      "source": " Uri"
                    }
                  },
                  {
                    "doc": "The {@link Command} which should be run when the resource\nstate is open in the Source Control viewlet.",
                    "isMethod": false,
                    "_": 14602,
                    "source": "\n\n\t\t/**\n\t\t * The {@link Command} which should be run when the resource\n\t\t * state is open in the Source Control viewlet.\n\t\t */\n\t\treadonly command?: Command;",
                    "name": "command",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Command",
                      "targs": [],
                      "isNullable": false,
                      "_": 14602,
                      "source": " Command"
                    }
                  },
                  {
                    "doc": "The {@link SourceControlResourceDecorationsdecorations} for this source control\nresource state.",
                    "isMethod": false,
                    "_": 14608,
                    "source": "\n\n\t\t/**\n\t\t * The {@link SourceControlResourceDecorations decorations} for this source control\n\t\t * resource state.\n\t\t */\n\t\treadonly decorations?: SourceControlResourceDecorations;",
                    "name": "decorations",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "SourceControlResourceDecorations",
                      "targs": [],
                      "isNullable": false,
                      "_": 14608,
                      "source": " SourceControlResourceDecorations"
                    }
                  },
                  {
                    "doc": "Context value of the resource state. This can be used to contribute resource specific actions.\nFor example, if a resource is given a context value as `diffable`. When contributing actions to `scm/resourceState/context`\nusing `menus` extension point, you can specify context value for key `scmResourceState` in `when` expressions, like `scmResourceState == diffable`.\n```json\n\"contributes\": {\n  \"menus\": {\n    \"scm/resourceState/context\": [\n      {\n        \"command\": \"extension.diff\",\n        \"when\": \"scmResourceState == diffable\"\n      }\n    ]\n  }\n}\n```\nThis will show action `extension.diff` only for resources with `contextValue` is `diffable`.",
                    "isMethod": false,
                    "_": 14628,
                    "source": "\n\n\t\t/**\n\t\t * Context value of the resource state. This can be used to contribute resource specific actions.\n\t\t * For example, if a resource is given a context value as `diffable`. When contributing actions to `scm/resourceState/context`\n\t\t * using `menus` extension point, you can specify context value for key `scmResourceState` in `when` expressions, like `scmResourceState == diffable`.\n\t\t * ```json\n\t\t * \"contributes\": {\n\t\t *   \"menus\": {\n\t\t *     \"scm/resourceState/context\": [\n\t\t *       {\n\t\t *         \"command\": \"extension.diff\",\n\t\t *         \"when\": \"scmResourceState == diffable\"\n\t\t *       }\n\t\t *     ]\n\t\t *   }\n\t\t * }\n\t\t * ```\n\t\t * This will show action `extension.diff` only for resources with `contextValue` is `diffable`.\n\t\t */\n\t\treadonly contextValue?: string;",
                    "name": "contextValue",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 14628,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 14635,
                "name": "SourceControlResourceGroup",
                "generics": [],
                "doc": "A source control resource group is a collection of\n{@link SourceControlResourceStatesource control resource states}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The id of this source control resource group.",
                    "isMethod": false,
                    "_": 14640,
                    "source": "\n\n\t\t/**\n\t\t * The id of this source control resource group.\n\t\t */\n\t\treadonly id: string;",
                    "name": "id",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 14640,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The label of this source control resource group.",
                    "isMethod": false,
                    "_": 14645,
                    "source": "\n\n\t\t/**\n\t\t * The label of this source control resource group.\n\t\t */\n\t\tlabel: string;",
                    "name": "label",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 14645,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Whether this source control resource group is hidden when it contains\n no {@link SourceControlResourceState source control resource states}.",
                    "isMethod": false,
                    "_": 14651,
                    "source": "\n\n\t\t/**\n\t\t * Whether this source control resource group is hidden when it contains\n\t\t * no {@link SourceControlResourceState source control resource states}.\n\t\t */\n\t\thideWhenEmpty?: boolean;",
                    "name": "hideWhenEmpty",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 14651,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "This group's collection of\n {@link SourceControlResourceState source control resource states}.",
                    "isMethod": false,
                    "_": 14657,
                    "source": "\n\n\t\t/**\n\t\t * This group's collection of\n\t\t * {@link SourceControlResourceState source control resource states}.\n\t\t */\n\t\tresourceStates: SourceControlResourceState[];",
                    "name": "resourceStates",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "ref": "SourceControlResourceState",
                          "targs": [],
                          "isNullable": false,
                          "_": 14657,
                          "source": " SourceControlResourceState"
                        }
                      ],
                      "isNullable": false,
                      "_": 14657,
                      "source": " SourceControlResourceState[]"
                    }
                  },
                  {
                    "doc": "Dispose this source control resource group.",
                    "isMethod": true,
                    "_": 14662,
                    "source": "\n\n\t\t/**\n\t\t * Dispose this source control resource group.\n\t\t */\n\t\tdispose(): void;",
                    "name": "dispose",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 14662,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 14669,
                "name": "SourceControl",
                "generics": [],
                "doc": "An source control is able to provide {@link SourceControlResourceStateresource states}\nto the editor and interact with the editor in several source control related ways.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The id of this source control.",
                    "isMethod": false,
                    "_": 14674,
                    "source": "\n\n\t\t/**\n\t\t * The id of this source control.\n\t\t */\n\t\treadonly id: string;",
                    "name": "id",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 14674,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The human-readable label of this source control.",
                    "isMethod": false,
                    "_": 14679,
                    "source": "\n\n\t\t/**\n\t\t * The human-readable label of this source control.\n\t\t */\n\t\treadonly label: string;",
                    "name": "label",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 14679,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The (optional) Uri of the root of this source control.",
                    "isMethod": false,
                    "_": 14684,
                    "source": "\n\n\t\t/**\n\t\t * The (optional) Uri of the root of this source control.\n\t\t */\n\t\treadonly rootUri: Uri | undefined;",
                    "name": "rootUri",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 14684,
                          "source": " Uri"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 14684,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 14684,
                      "source": " Uri | undefined"
                    }
                  },
                  {
                    "doc": "The {@link SourceControlInputBoxinput box} for this source control.",
                    "isMethod": false,
                    "_": 14689,
                    "source": "\n\n\t\t/**\n\t\t * The {@link SourceControlInputBox input box} for this source control.\n\t\t */\n\t\treadonly inputBox: SourceControlInputBox;",
                    "name": "inputBox",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "SourceControlInputBox",
                      "targs": [],
                      "isNullable": false,
                      "_": 14689,
                      "source": " SourceControlInputBox"
                    }
                  },
                  {
                    "doc": "The UI-visible count of {@link SourceControlResourceState resource states} of\n this source control.\n\n If undefined, this source control will\n - display its UI-visible count as zero, and\n - contribute the count of its {@link SourceControlResourceState resource states} to the UI-visible aggregated count for all source controls",
                    "isMethod": false,
                    "_": 14699,
                    "source": "\n\n\t\t/**\n\t\t * The UI-visible count of {@link SourceControlResourceState resource states} of\n\t\t * this source control.\n\t\t *\n\t\t * If undefined, this source control will\n\t\t * - display its UI-visible count as zero, and\n\t\t * - contribute the count of its {@link SourceControlResourceState resource states} to the UI-visible aggregated count for all source controls\n\t\t */\n\t\tcount?: number;",
                    "name": "count",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 14699,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "An optional {@link QuickDiffProvider quick diff provider}.",
                    "isMethod": false,
                    "_": 14704,
                    "source": "\n\n\t\t/**\n\t\t * An optional {@link QuickDiffProvider quick diff provider}.\n\t\t */\n\t\tquickDiffProvider?: QuickDiffProvider;",
                    "name": "quickDiffProvider",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "QuickDiffProvider",
                      "targs": [],
                      "isNullable": false,
                      "_": 14704,
                      "source": " QuickDiffProvider"
                    }
                  },
                  {
                    "doc": "Optional commit template string.\n\n The Source Control viewlet will populate the Source Control\n input with this value when appropriate.",
                    "isMethod": false,
                    "_": 14712,
                    "source": "\n\n\t\t/**\n\t\t * Optional commit template string.\n\t\t *\n\t\t * The Source Control viewlet will populate the Source Control\n\t\t * input with this value when appropriate.\n\t\t */\n\t\tcommitTemplate?: string;",
                    "name": "commitTemplate",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 14712,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Optional accept input command.\n\n This command will be invoked when the user accepts the value\n in the Source Control input.",
                    "isMethod": false,
                    "_": 14720,
                    "source": "\n\n\t\t/**\n\t\t * Optional accept input command.\n\t\t *\n\t\t * This command will be invoked when the user accepts the value\n\t\t * in the Source Control input.\n\t\t */\n\t\tacceptInputCommand?: Command;",
                    "name": "acceptInputCommand",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Command",
                      "targs": [],
                      "isNullable": false,
                      "_": 14720,
                      "source": " Command"
                    }
                  },
                  {
                    "doc": "Optional status bar commands.\n\n These commands will be displayed in the editor's status bar.",
                    "isMethod": false,
                    "_": 14727,
                    "source": "\n\n\t\t/**\n\t\t * Optional status bar commands.\n\t\t *\n\t\t * These commands will be displayed in the editor's status bar.\n\t\t */\n\t\tstatusBarCommands?: Command[];",
                    "name": "statusBarCommands",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "ref": "Command",
                          "targs": [],
                          "isNullable": false,
                          "_": 14727,
                          "source": " Command"
                        }
                      ],
                      "isNullable": false,
                      "_": 14727,
                      "source": " Command[]"
                    }
                  },
                  {
                    "doc": "Create a new {@link SourceControlResourceGroup resource group}.",
                    "isMethod": true,
                    "_": 14732,
                    "source": "\n\n\t\t/**\n\t\t * Create a new {@link SourceControlResourceGroup resource group}.\n\t\t */\n\t\tcreateResourceGroup(id: string, label: string): SourceControlResourceGroup;",
                    "name": "createResourceGroup",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "id",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 14732,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "label",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 14732,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "SourceControlResourceGroup",
                      "targs": [],
                      "isNullable": false,
                      "_": 14732,
                      "source": " SourceControlResourceGroup"
                    }
                  },
                  {
                    "doc": "Dispose this source control.",
                    "isMethod": true,
                    "_": 14737,
                    "source": "\n\n\t\t/**\n\t\t * Dispose this source control.\n\t\t */\n\t\tdispose(): void;",
                    "name": "dispose",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 14737,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 14764,
                "name": "DebugProtocolMessage",
                "generics": [],
                "doc": "A DebugProtocolMessage is an opaque stand-in type for the [ProtocolMessage](https://microsoft.github.io/debug-adapter-protocol/specification#Base_Protocol_ProtocolMessage) type defined in the Debug Adapter Protocol.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [],
                "calls": [],
                "isClass": false
              },
              {
                "_": 14771,
                "name": "DebugProtocolSource",
                "generics": [],
                "doc": "A DebugProtocolSource is an opaque stand-in type for the [Source](https://microsoft.github.io/debug-adapter-protocol/specification#Types_Source) type defined in the Debug Adapter Protocol.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [],
                "calls": [],
                "isClass": false
              },
              {
                "_": 14778,
                "name": "DebugProtocolBreakpoint",
                "generics": [],
                "doc": "A DebugProtocolBreakpoint is an opaque stand-in type for the [Breakpoint](https://microsoft.github.io/debug-adapter-protocol/specification#Types_Breakpoint) type defined in the Debug Adapter Protocol.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [],
                "calls": [],
                "isClass": false
              },
              {
                "_": 14785,
                "name": "DebugConfiguration",
                "generics": [],
                "doc": "Configuration for a debug session.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [
                  {
                    "key": {
                      "core": "string",
                      "isNullable": false,
                      "_": 14804,
                      "source": " string"
                    },
                    "value": {
                      "core": "any",
                      "isNullable": false,
                      "_": 14804,
                      "source": " any"
                    },
                    "doc": "",
                    "_": 14804,
                    "source": "\n\n\t\t/**\n\t\t * Additional debug type specific properties.\n\t\t */\n\t\t[key: string]: any;",
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false
                  }
                ],
                "ctors": [],
                "members": [
                  {
                    "doc": "The type of the debug session.",
                    "isMethod": false,
                    "_": 14789,
                    "source": "\n\t\t/**\n\t\t * The type of the debug session.\n\t\t */\n\t\ttype: string;",
                    "name": "type",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 14789,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The name of the debug session.",
                    "isMethod": false,
                    "_": 14794,
                    "source": "\n\n\t\t/**\n\t\t * The name of the debug session.\n\t\t */\n\t\tname: string;",
                    "name": "name",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 14794,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The request type of the debug session.",
                    "isMethod": false,
                    "_": 14799,
                    "source": "\n\n\t\t/**\n\t\t * The request type of the debug session.\n\t\t */\n\t\trequest: string;",
                    "name": "request",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 14799,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 14810,
                "name": "DebugSession",
                "generics": [],
                "doc": "A debug session.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The unique ID of this debug session.",
                    "isMethod": false,
                    "_": 14815,
                    "source": "\n\n\t\t/**\n\t\t * The unique ID of this debug session.\n\t\t */\n\t\treadonly id: string;",
                    "name": "id",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 14815,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The debug session's type from the {@link DebugConfigurationdebug configuration}.",
                    "isMethod": false,
                    "_": 14820,
                    "source": "\n\n\t\t/**\n\t\t * The debug session's type from the {@link DebugConfiguration debug configuration}.\n\t\t */\n\t\treadonly type: string;",
                    "name": "type",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 14820,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The parent session of this debug session, if it was created as a child.",
                    "isMethod": false,
                    "_": 14826,
                    "source": "\n\n\t\t/**\n\t\t * The parent session of this debug session, if it was created as a child.\n\t\t * @see DebugSessionOptions.parentSession\n\t\t */\n\t\treadonly parentSession?: DebugSession;",
                    "name": "parentSession",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "DebugSession",
                      "targs": [],
                      "isNullable": false,
                      "_": 14826,
                      "source": " DebugSession"
                    }
                  },
                  {
                    "doc": "The debug session's name is initially taken from the {@link DebugConfiguration debug configuration}.\n Any changes will be properly reflected in the UI.",
                    "isMethod": false,
                    "_": 14832,
                    "source": "\n\n\t\t/**\n\t\t * The debug session's name is initially taken from the {@link DebugConfiguration debug configuration}.\n\t\t * Any changes will be properly reflected in the UI.\n\t\t */\n\t\tname: string;",
                    "name": "name",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 14832,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The workspace folder of this session or `undefined` for a folderless setup.",
                    "isMethod": false,
                    "_": 14837,
                    "source": "\n\n\t\t/**\n\t\t * The workspace folder of this session or `undefined` for a folderless setup.\n\t\t */\n\t\treadonly workspaceFolder: WorkspaceFolder | undefined;",
                    "name": "workspaceFolder",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "WorkspaceFolder",
                          "targs": [],
                          "isNullable": false,
                          "_": 14837,
                          "source": " WorkspaceFolder"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 14837,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 14837,
                      "source": " WorkspaceFolder | undefined"
                    }
                  },
                  {
                    "doc": "The \"resolved\" {@link DebugConfigurationdebug configuration} of this session.\n\"Resolved\" means that\n- all variables have been substituted and\n- platform specific attribute sections have been \"flattened\" for the matching platform and removed for non-matching platforms.",
                    "isMethod": false,
                    "_": 14845,
                    "source": "\n\n\t\t/**\n\t\t * The \"resolved\" {@link DebugConfiguration debug configuration} of this session.\n\t\t * \"Resolved\" means that\n\t\t * - all variables have been substituted and\n\t\t * - platform specific attribute sections have been \"flattened\" for the matching platform and removed for non-matching platforms.\n\t\t */\n\t\treadonly configuration: DebugConfiguration;",
                    "name": "configuration",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "DebugConfiguration",
                      "targs": [],
                      "isNullable": false,
                      "_": 14845,
                      "source": " DebugConfiguration"
                    }
                  },
                  {
                    "doc": "Send a custom request to the debug adapter.",
                    "isMethod": true,
                    "_": 14850,
                    "source": "\n\n\t\t/**\n\t\t * Send a custom request to the debug adapter.\n\t\t */\n\t\tcustomRequest(command: string, args?: any): Thenable<any>;",
                    "name": "customRequest",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "command",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 14850,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "args",
                        "type": {
                          "core": "any",
                          "isNullable": false,
                          "_": 14850,
                          "source": " any"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "Thenable",
                      "targs": [
                        {
                          "core": "any",
                          "isNullable": false,
                          "_": 14850,
                          "source": "any"
                        }
                      ],
                      "isNullable": false,
                      "_": 14850,
                      "source": " Thenable<any>"
                    }
                  },
                  {
                    "doc": "Maps a breakpoint in the editor to the corresponding Debug Adapter Protocol (DAP) breakpoint that is managed by the debug adapter of the debug session.\n If no DAP breakpoint exists (either because the editor breakpoint was not yet registered or because the debug adapter is not interested in the breakpoint), the value `undefined` is returned.\n\n @param breakpoint A {@link Breakpoint} in the editor.\n @return A promise that resolves to the Debug Adapter Protocol breakpoint or `undefined`.",
                    "isMethod": true,
                    "_": 14859,
                    "source": "\n\n\t\t/**\n\t\t * Maps a breakpoint in the editor to the corresponding Debug Adapter Protocol (DAP) breakpoint that is managed by the debug adapter of the debug session.\n\t\t * If no DAP breakpoint exists (either because the editor breakpoint was not yet registered or because the debug adapter is not interested in the breakpoint), the value `undefined` is returned.\n\t\t *\n\t\t * @param breakpoint A {@link Breakpoint} in the editor.\n\t\t * @return A promise that resolves to the Debug Adapter Protocol breakpoint or `undefined`.\n\t\t */\n\t\tgetDebugProtocolBreakpoint(breakpoint: Breakpoint): Thenable<DebugProtocolBreakpoint | undefined>;",
                    "name": "getDebugProtocolBreakpoint",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "breakpoint",
                        "type": {
                          "ref": "Breakpoint",
                          "targs": [],
                          "isNullable": false,
                          "_": 14859,
                          "source": " Breakpoint"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Thenable",
                      "targs": [
                        {
                          "union": [
                            {
                              "ref": "DebugProtocolBreakpoint",
                              "targs": [],
                              "isNullable": false,
                              "_": 14859,
                              "source": "DebugProtocolBreakpoint"
                            },
                            {
                              "core": "undefined",
                              "isNullable": false,
                              "_": 14859,
                              "source": " undefined"
                            }
                          ],
                          "isNullable": false,
                          "_": 14859,
                          "source": "DebugProtocolBreakpoint | undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 14859,
                      "source": " Thenable<DebugProtocolBreakpoint | undefined>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 14865,
                "name": "DebugSessionCustomEvent",
                "generics": [],
                "doc": "A custom Debug Adapter Protocol event received from a {@link DebugSessiondebug session}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The {@link DebugSessiondebug session} for which the custom event was received.",
                    "isMethod": false,
                    "_": 14869,
                    "source": "\n\t\t/**\n\t\t * The {@link DebugSession debug session} for which the custom event was received.\n\t\t */\n\t\treadonly session: DebugSession;",
                    "name": "session",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "DebugSession",
                      "targs": [],
                      "isNullable": false,
                      "_": 14869,
                      "source": " DebugSession"
                    }
                  },
                  {
                    "doc": "Type of event.",
                    "isMethod": false,
                    "_": 14874,
                    "source": "\n\n\t\t/**\n\t\t * Type of event.\n\t\t */\n\t\treadonly event: string;",
                    "name": "event",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 14874,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Event specific information.",
                    "isMethod": false,
                    "_": 14879,
                    "source": "\n\n\t\t/**\n\t\t * Event specific information.\n\t\t */\n\t\treadonly body: any;",
                    "name": "body",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "any",
                      "isNullable": false,
                      "_": 14879,
                      "source": " any"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 14887,
                "name": "DebugConfigurationProvider",
                "generics": [],
                "doc": "A debug configuration provider allows to add debug configurations to the debug service\nand to resolve launch configurations before they are used to start a debug session.\nA debug configuration provider is registered via {@link debug.registerDebugConfigurationProvider}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Provides {@link DebugConfiguration debug configuration} to the debug service. If more than one debug configuration provider is\n registered for the same type, debug configurations are concatenated in arbitrary order.\n\n @param folder The workspace folder for which the configurations are used or `undefined` for a folderless setup.\n @param token A cancellation token.\n @return An array of {@link DebugConfiguration debug configurations}.",
                    "isMethod": true,
                    "_": 14896,
                    "source": "\n\t\t/**\n\t\t * Provides {@link DebugConfiguration debug configuration} to the debug service. If more than one debug configuration provider is\n\t\t * registered for the same type, debug configurations are concatenated in arbitrary order.\n\t\t *\n\t\t * @param folder The workspace folder for which the configurations are used or `undefined` for a folderless setup.\n\t\t * @param token A cancellation token.\n\t\t * @return An array of {@link DebugConfiguration debug configurations}.\n\t\t */\n\t\tprovideDebugConfigurations?(folder: WorkspaceFolder | undefined, token?: CancellationToken): ProviderResult<DebugConfiguration[]>;",
                    "name": "provideDebugConfigurations",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "folder",
                        "type": {
                          "union": [
                            {
                              "ref": "WorkspaceFolder",
                              "targs": [],
                              "isNullable": false,
                              "_": 14896,
                              "source": " WorkspaceFolder"
                            },
                            {
                              "core": "undefined",
                              "isNullable": false,
                              "_": 14896,
                              "source": " undefined"
                            }
                          ],
                          "isNullable": false,
                          "_": 14896,
                          "source": " WorkspaceFolder | undefined"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 14896,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "DebugConfiguration",
                              "targs": [],
                              "isNullable": false,
                              "_": 14896,
                              "source": "DebugConfiguration"
                            }
                          ],
                          "isNullable": false,
                          "_": 14896,
                          "source": "DebugConfiguration[]"
                        }
                      ],
                      "isNullable": false,
                      "_": 14896,
                      "source": " ProviderResult<DebugConfiguration[]>"
                    }
                  },
                  {
                    "doc": "Resolves a {@link DebugConfiguration debug configuration} by filling in missing values or by adding/changing/removing attributes.\n If more than one debug configuration provider is registered for the same type, the resolveDebugConfiguration calls are chained\n in arbitrary order and the initial debug configuration is piped through the chain.\n Returning the value 'undefined' prevents the debug session from starting.\n Returning the value 'null' prevents the debug session from starting and opens the underlying debug configuration instead.\n\n @param folder The workspace folder from which the configuration originates from or `undefined` for a folderless setup.\n @param debugConfiguration The {@link DebugConfiguration debug configuration} to resolve.\n @param token A cancellation token.\n @return The resolved debug configuration or undefined or null.",
                    "isMethod": true,
                    "_": 14910,
                    "source": "\n\n\t\t/**\n\t\t * Resolves a {@link DebugConfiguration debug configuration} by filling in missing values or by adding/changing/removing attributes.\n\t\t * If more than one debug configuration provider is registered for the same type, the resolveDebugConfiguration calls are chained\n\t\t * in arbitrary order and the initial debug configuration is piped through the chain.\n\t\t * Returning the value 'undefined' prevents the debug session from starting.\n\t\t * Returning the value 'null' prevents the debug session from starting and opens the underlying debug configuration instead.\n\t\t *\n\t\t * @param folder The workspace folder from which the configuration originates from or `undefined` for a folderless setup.\n\t\t * @param debugConfiguration The {@link DebugConfiguration debug configuration} to resolve.\n\t\t * @param token A cancellation token.\n\t\t * @return The resolved debug configuration or undefined or null.\n\t\t */\n\t\tresolveDebugConfiguration?(folder: WorkspaceFolder | undefined, debugConfiguration: DebugConfiguration, token?: CancellationToken): ProviderResult<DebugConfiguration>;",
                    "name": "resolveDebugConfiguration",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "folder",
                        "type": {
                          "union": [
                            {
                              "ref": "WorkspaceFolder",
                              "targs": [],
                              "isNullable": false,
                              "_": 14910,
                              "source": " WorkspaceFolder"
                            },
                            {
                              "core": "undefined",
                              "isNullable": false,
                              "_": 14910,
                              "source": " undefined"
                            }
                          ],
                          "isNullable": false,
                          "_": 14910,
                          "source": " WorkspaceFolder | undefined"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "debugConfiguration",
                        "type": {
                          "ref": "DebugConfiguration",
                          "targs": [],
                          "isNullable": false,
                          "_": 14910,
                          "source": " DebugConfiguration"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 14910,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "ref": "DebugConfiguration",
                          "targs": [],
                          "isNullable": false,
                          "_": 14910,
                          "source": "DebugConfiguration"
                        }
                      ],
                      "isNullable": false,
                      "_": 14910,
                      "source": " ProviderResult<DebugConfiguration>"
                    }
                  },
                  {
                    "doc": "This hook is directly called after 'resolveDebugConfiguration' but with all variables substituted.\n It can be used to resolve or verify a {@link DebugConfiguration debug configuration} by filling in missing values or by adding/changing/removing attributes.\n If more than one debug configuration provider is registered for the same type, the 'resolveDebugConfigurationWithSubstitutedVariables' calls are chained\n in arbitrary order and the initial debug configuration is piped through the chain.\n Returning the value 'undefined' prevents the debug session from starting.\n Returning the value 'null' prevents the debug session from starting and opens the underlying debug configuration instead.\n\n @param folder The workspace folder from which the configuration originates from or `undefined` for a folderless setup.\n @param debugConfiguration The {@link DebugConfiguration debug configuration} to resolve.\n @param token A cancellation token.\n @return The resolved debug configuration or undefined or null.",
                    "isMethod": true,
                    "_": 14925,
                    "source": "\n\n\t\t/**\n\t\t * This hook is directly called after 'resolveDebugConfiguration' but with all variables substituted.\n\t\t * It can be used to resolve or verify a {@link DebugConfiguration debug configuration} by filling in missing values or by adding/changing/removing attributes.\n\t\t * If more than one debug configuration provider is registered for the same type, the 'resolveDebugConfigurationWithSubstitutedVariables' calls are chained\n\t\t * in arbitrary order and the initial debug configuration is piped through the chain.\n\t\t * Returning the value 'undefined' prevents the debug session from starting.\n\t\t * Returning the value 'null' prevents the debug session from starting and opens the underlying debug configuration instead.\n\t\t *\n\t\t * @param folder The workspace folder from which the configuration originates from or `undefined` for a folderless setup.\n\t\t * @param debugConfiguration The {@link DebugConfiguration debug configuration} to resolve.\n\t\t * @param token A cancellation token.\n\t\t * @return The resolved debug configuration or undefined or null.\n\t\t */\n\t\tresolveDebugConfigurationWithSubstitutedVariables?(folder: WorkspaceFolder | undefined, debugConfiguration: DebugConfiguration, token?: CancellationToken): ProviderResult<DebugConfiguration>;",
                    "name": "resolveDebugConfigurationWithSubstitutedVariables",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "folder",
                        "type": {
                          "union": [
                            {
                              "ref": "WorkspaceFolder",
                              "targs": [],
                              "isNullable": false,
                              "_": 14925,
                              "source": " WorkspaceFolder"
                            },
                            {
                              "core": "undefined",
                              "isNullable": false,
                              "_": 14925,
                              "source": " undefined"
                            }
                          ],
                          "isNullable": false,
                          "_": 14925,
                          "source": " WorkspaceFolder | undefined"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "debugConfiguration",
                        "type": {
                          "ref": "DebugConfiguration",
                          "targs": [],
                          "isNullable": false,
                          "_": 14925,
                          "source": " DebugConfiguration"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 14925,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "ref": "DebugConfiguration",
                          "targs": [],
                          "isNullable": false,
                          "_": 14925,
                          "source": "DebugConfiguration"
                        }
                      ],
                      "isNullable": false,
                      "_": 14925,
                      "source": " ProviderResult<DebugConfiguration>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 14931,
                "name": "DebugAdapterExecutable",
                "generics": [],
                "doc": "Represents a debug adapter executable and optional arguments and runtime options passed to it.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 14940,
                    "source": "\n\n\t\t/**\n\t\t * Creates a description for a debug adapter based on an executable program.\n\t\t *\n\t\t * @param command The command or executable path that implements the debug adapter.\n\t\t * @param args Optional arguments to be passed to the command or executable.\n\t\t * @param options Optional options to be used when starting the command or executable.\n\t\t */\n\t\tconstructor(command: string, args?: string[], options?: DebugAdapterExecutableOptions);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "command",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 14940,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "args",
                        "type": {
                          "core": "array",
                          "targs": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 14940,
                              "source": " string"
                            }
                          ],
                          "isNullable": false,
                          "_": 14940,
                          "source": " string[]"
                        },
                        "varargs": false,
                        "isNullable": true
                      },
                      {
                        "name": "options",
                        "type": {
                          "ref": "DebugAdapterExecutableOptions",
                          "targs": [],
                          "isNullable": false,
                          "_": 14940,
                          "source": " DebugAdapterExecutableOptions"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The command or path of the debug adapter executable.\nA command must be either an absolute path of an executable or the name of an command to be looked up via the PATH environment variable.\nThe special value 'node' will be mapped to the editor's built-in Node.js runtime.",
                    "isMethod": false,
                    "_": 14947,
                    "source": "\n\n\t\t/**\n\t\t * The command or path of the debug adapter executable.\n\t\t * A command must be either an absolute path of an executable or the name of an command to be looked up via the PATH environment variable.\n\t\t * The special value 'node' will be mapped to the editor's built-in Node.js runtime.\n\t\t */\n\t\treadonly command: string;",
                    "name": "command",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 14947,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The arguments passed to the debug adapter executable. Defaults to an empty array.",
                    "isMethod": false,
                    "_": 14952,
                    "source": "\n\n\t\t/**\n\t\t * The arguments passed to the debug adapter executable. Defaults to an empty array.\n\t\t */\n\t\treadonly args: string[];",
                    "name": "args",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 14952,
                          "source": " string"
                        }
                      ],
                      "isNullable": false,
                      "_": 14952,
                      "source": " string[]"
                    }
                  },
                  {
                    "doc": "Optional options to be used when the debug adapter is started.\nDefaults to undefined.",
                    "isMethod": false,
                    "_": 14958,
                    "source": "\n\n\t\t/**\n\t\t * Optional options to be used when the debug adapter is started.\n\t\t * Defaults to undefined.\n\t\t */\n\t\treadonly options?: DebugAdapterExecutableOptions;",
                    "name": "options",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "DebugAdapterExecutableOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 14958,
                      "source": " DebugAdapterExecutableOptions"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline82",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "DebugAdapterExecutableOptions",
                "source": "",
                "indexes": [
                  {
                    "key": {
                      "core": "string",
                      "isNullable": false,
                      "_": 14971,
                      "source": " string"
                    },
                    "value": {
                      "core": "string",
                      "isNullable": false,
                      "_": 14971,
                      "source": " string"
                    },
                    "doc": "",
                    "_": 14971,
                    "source": " [key: string]: string",
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false
                  }
                ],
                "ctors": [],
                "members": [],
                "calls": []
              },
              {
                "_": 14964,
                "name": "DebugAdapterExecutableOptions",
                "generics": [],
                "doc": "Options for a debug adapter executable.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The additional environment of the executed program or shell. If omitted\n the parent process' environment is used. If provided it is merged with\n the parent process' environment.",
                    "isMethod": false,
                    "_": 14971,
                    "source": "\n\n\t\t/**\n\t\t * The additional environment of the executed program or shell. If omitted\n\t\t * the parent process' environment is used. If provided it is merged with\n\t\t * the parent process' environment.\n\t\t */\n\t\tenv?: { [key: string]: string };",
                    "name": "env",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "IInline82",
                      "targs": [],
                      "isNullable": false,
                      "_": 14971,
                      "source": " { [key: string]: string }"
                    }
                  },
                  {
                    "doc": "The current working directory for the executed debug adapter.",
                    "isMethod": false,
                    "_": 14976,
                    "source": "\n\n\t\t/**\n\t\t * The current working directory for the executed debug adapter.\n\t\t */\n\t\tcwd?: string;",
                    "name": "cwd",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 14976,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 14982,
                "name": "DebugAdapterServer",
                "generics": [],
                "doc": "Represents a debug adapter running as a socket based server.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 14997,
                    "source": "\n\n\t\t/**\n\t\t * Create a description for a debug adapter running as a socket based server.\n\t\t */\n\t\tconstructor(port: number, host?: string);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "port",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 14997,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "host",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 14997,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The port.",
                    "isMethod": false,
                    "_": 14987,
                    "source": "\n\n\t\t/**\n\t\t * The port.\n\t\t */\n\t\treadonly port: number;",
                    "name": "port",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 14987,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "The host.",
                    "isMethod": false,
                    "_": 14992,
                    "source": "\n\n\t\t/**\n\t\t * The host.\n\t\t */\n\t\treadonly host?: string | undefined;",
                    "name": "host",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 14992,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 14992,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 14992,
                      "source": " string | undefined"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 15003,
                "name": "DebugAdapterNamedPipeServer",
                "generics": [],
                "doc": "Represents a debug adapter running as a Named Pipe (on Windows)/UNIX Domain Socket (on non-Windows) based server.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 15012,
                    "source": "\n\n\t\t/**\n\t\t * Create a description for a debug adapter running as a Named Pipe (on Windows)/UNIX Domain Socket (on non-Windows) based server.\n\t\t */\n\t\tconstructor(path: string);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "path",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 15012,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The path to the NamedPipe/UNIX Domain Socket.",
                    "isMethod": false,
                    "_": 15007,
                    "source": "\n\t\t/**\n\t\t * The path to the NamedPipe/UNIX Domain Socket.\n\t\t */\n\t\treadonly path: string;",
                    "name": "path",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 15007,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 15018,
                "name": "DebugAdapter",
                "generics": [],
                "doc": "A debug adapter that implements the Debug Adapter Protocol can be registered with the editor if it implements the DebugAdapter interface.",
                "heritage": [
                  [
                    {
                      "ref": "Disposable",
                      "targs": [],
                      "isNullable": false,
                      "_": 15018,
                      "source": " Disposable"
                    }
                  ]
                ],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "An event which fires after the debug adapter has sent a Debug Adapter Protocol message to the editor.\nMessages can be requests, responses, or events.",
                    "isMethod": false,
                    "_": 15024,
                    "source": "\n\n\t\t/**\n\t\t * An event which fires after the debug adapter has sent a Debug Adapter Protocol message to the editor.\n\t\t * Messages can be requests, responses, or events.\n\t\t */\n\t\treadonly onDidSendMessage: Event<DebugProtocolMessage>;",
                    "name": "onDidSendMessage",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "ref": "DebugProtocolMessage",
                          "targs": [],
                          "isNullable": false,
                          "_": 15024,
                          "source": "DebugProtocolMessage"
                        }
                      ],
                      "isNullable": false,
                      "_": 15024,
                      "source": " Event<DebugProtocolMessage>"
                    }
                  },
                  {
                    "doc": "Handle a Debug Adapter Protocol message.\n Messages can be requests, responses, or events.\n Results or errors are returned via onSendMessage events.\n @param message A Debug Adapter Protocol message",
                    "isMethod": true,
                    "_": 15032,
                    "source": "\n\n\t\t/**\n\t\t * Handle a Debug Adapter Protocol message.\n\t\t * Messages can be requests, responses, or events.\n\t\t * Results or errors are returned via onSendMessage events.\n\t\t * @param message A Debug Adapter Protocol message\n\t\t */\n\t\thandleMessage(message: DebugProtocolMessage): void;",
                    "name": "handleMessage",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "message",
                        "type": {
                          "ref": "DebugProtocolMessage",
                          "targs": [],
                          "isNullable": false,
                          "_": 15032,
                          "source": " DebugProtocolMessage"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 15032,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 15038,
                "name": "DebugAdapterInlineImplementation",
                "generics": [],
                "doc": "A debug adapter descriptor for an inline implementation.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 15043,
                    "source": "\n\n\t\t/**\n\t\t * Create a descriptor for an inline implementation of a debug adapter.\n\t\t */\n\t\tconstructor(implementation: DebugAdapter);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "implementation",
                        "type": {
                          "ref": "DebugAdapter",
                          "targs": [],
                          "isNullable": false,
                          "_": 15043,
                          "source": " DebugAdapter"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [],
                "calls": [],
                "isClass": true
              },
              {
                "_": 15048,
                "name": "DebugAdapterDescriptorFactory",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "'createDebugAdapterDescriptor' is called at the start of a debug session to provide details about the debug adapter to use.\n These details must be returned as objects of type {@link DebugAdapterDescriptor}.\n Currently two types of debug adapters are supported:\n - a debug adapter executable is specified as a command path and arguments (see {@link DebugAdapterExecutable}),\n - a debug adapter server reachable via a communication port (see {@link DebugAdapterServer}).\n If the method is not implemented the default behavior is this:\n   createDebugAdapter(session: DebugSession, executable: DebugAdapterExecutable) {\n      if (typeof session.configuration.debugServer === 'number') {\n         return new DebugAdapterServer(session.configuration.debugServer);\n      }\n      return executable;\n   }\n @param session The {@link DebugSession debug session} for which the debug adapter will be used.\n @param executable The debug adapter's executable information as specified in the package.json (or undefined if no such information exists).\n @return a {@link DebugAdapterDescriptor debug adapter descriptor} or undefined.",
                    "isMethod": true,
                    "_": 15066,
                    "source": "\n\t\t/**\n\t\t * 'createDebugAdapterDescriptor' is called at the start of a debug session to provide details about the debug adapter to use.\n\t\t * These details must be returned as objects of type {@link DebugAdapterDescriptor}.\n\t\t * Currently two types of debug adapters are supported:\n\t\t * - a debug adapter executable is specified as a command path and arguments (see {@link DebugAdapterExecutable}),\n\t\t * - a debug adapter server reachable via a communication port (see {@link DebugAdapterServer}).\n\t\t * If the method is not implemented the default behavior is this:\n\t\t *   createDebugAdapter(session: DebugSession, executable: DebugAdapterExecutable) {\n\t\t *      if (typeof session.configuration.debugServer === 'number') {\n\t\t *         return new DebugAdapterServer(session.configuration.debugServer);\n\t\t *      }\n\t\t *      return executable;\n\t\t *   }\n\t\t * @param session The {@link DebugSession debug session} for which the debug adapter will be used.\n\t\t * @param executable The debug adapter's executable information as specified in the package.json (or undefined if no such information exists).\n\t\t * @return a {@link DebugAdapterDescriptor debug adapter descriptor} or undefined.\n\t\t */\n\t\tcreateDebugAdapterDescriptor(session: DebugSession, executable: DebugAdapterExecutable | undefined): ProviderResult<DebugAdapterDescriptor>;",
                    "name": "createDebugAdapterDescriptor",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "session",
                        "type": {
                          "ref": "DebugSession",
                          "targs": [],
                          "isNullable": false,
                          "_": 15066,
                          "source": " DebugSession"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "executable",
                        "type": {
                          "union": [
                            {
                              "ref": "DebugAdapterExecutable",
                              "targs": [],
                              "isNullable": false,
                              "_": 15066,
                              "source": " DebugAdapterExecutable"
                            },
                            {
                              "core": "undefined",
                              "isNullable": false,
                              "_": 15066,
                              "source": " undefined"
                            }
                          ],
                          "isNullable": false,
                          "_": 15066,
                          "source": " DebugAdapterExecutable | undefined"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "ref": "DebugAdapterDescriptor",
                          "targs": [],
                          "isNullable": false,
                          "_": 15066,
                          "source": "DebugAdapterDescriptor"
                        }
                      ],
                      "isNullable": false,
                      "_": 15066,
                      "source": " ProviderResult<DebugAdapterDescriptor>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 15072,
                "name": "DebugAdapterTracker",
                "generics": [],
                "doc": "A Debug Adapter Tracker is a means to track the communication between the editor and a Debug Adapter.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "A session with the debug adapter is about to be started.",
                    "isMethod": true,
                    "_": 15076,
                    "source": "\n\t\t/**\n\t\t * A session with the debug adapter is about to be started.\n\t\t */\n\t\tonWillStartSession?(): void;",
                    "name": "onWillStartSession",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 15076,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "The debug adapter is about to receive a Debug Adapter Protocol message from the editor.",
                    "isMethod": true,
                    "_": 15080,
                    "source": "\n\t\t/**\n\t\t * The debug adapter is about to receive a Debug Adapter Protocol message from the editor.\n\t\t */\n\t\tonWillReceiveMessage?(message: any): void;",
                    "name": "onWillReceiveMessage",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "message",
                        "type": {
                          "core": "any",
                          "isNullable": false,
                          "_": 15080,
                          "source": " any"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 15080,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "The debug adapter has sent a Debug Adapter Protocol message to the editor.",
                    "isMethod": true,
                    "_": 15084,
                    "source": "\n\t\t/**\n\t\t * The debug adapter has sent a Debug Adapter Protocol message to the editor.\n\t\t */\n\t\tonDidSendMessage?(message: any): void;",
                    "name": "onDidSendMessage",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "message",
                        "type": {
                          "core": "any",
                          "isNullable": false,
                          "_": 15084,
                          "source": " any"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 15084,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "The debug adapter session is about to be stopped.",
                    "isMethod": true,
                    "_": 15088,
                    "source": "\n\t\t/**\n\t\t * The debug adapter session is about to be stopped.\n\t\t */\n\t\tonWillStopSession?(): void;",
                    "name": "onWillStopSession",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 15088,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "An error with the debug adapter has occurred.",
                    "isMethod": true,
                    "_": 15092,
                    "source": "\n\t\t/**\n\t\t * An error with the debug adapter has occurred.\n\t\t */\n\t\tonError?(error: Error): void;",
                    "name": "onError",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "error",
                        "type": {
                          "ref": "Error",
                          "targs": [],
                          "isNullable": false,
                          "_": 15092,
                          "source": " Error"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 15092,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "The debug adapter has exited with the given exit code or signal.",
                    "isMethod": true,
                    "_": 15096,
                    "source": "\n\t\t/**\n\t\t * The debug adapter has exited with the given exit code or signal.\n\t\t */\n\t\tonExit?(code: number | undefined, signal: string | undefined): void;",
                    "name": "onExit",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "code",
                        "type": {
                          "union": [
                            {
                              "core": "number",
                              "isNullable": false,
                              "_": 15096,
                              "source": " number"
                            },
                            {
                              "core": "undefined",
                              "isNullable": false,
                              "_": 15096,
                              "source": " undefined"
                            }
                          ],
                          "isNullable": false,
                          "_": 15096,
                          "source": " number | undefined"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "signal",
                        "type": {
                          "union": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 15096,
                              "source": " string"
                            },
                            {
                              "core": "undefined",
                              "isNullable": false,
                              "_": 15096,
                              "source": " undefined"
                            }
                          ],
                          "isNullable": false,
                          "_": 15096,
                          "source": " string | undefined"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 15096,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 15099,
                "name": "DebugAdapterTrackerFactory",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The method 'createDebugAdapterTracker' is called at the start of a debug session in order\n to return a \"tracker\" object that provides read-access to the communication between the editor and a debug adapter.\n\n @param session The {@link DebugSession debug session} for which the debug adapter tracker will be used.\n @return A {@link DebugAdapterTracker debug adapter tracker} or undefined.",
                    "isMethod": true,
                    "_": 15107,
                    "source": "\n\t\t/**\n\t\t * The method 'createDebugAdapterTracker' is called at the start of a debug session in order\n\t\t * to return a \"tracker\" object that provides read-access to the communication between the editor and a debug adapter.\n\t\t *\n\t\t * @param session The {@link DebugSession debug session} for which the debug adapter tracker will be used.\n\t\t * @return A {@link DebugAdapterTracker debug adapter tracker} or undefined.\n\t\t */\n\t\tcreateDebugAdapterTracker(session: DebugSession): ProviderResult<DebugAdapterTracker>;",
                    "name": "createDebugAdapterTracker",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "session",
                        "type": {
                          "ref": "DebugSession",
                          "targs": [],
                          "isNullable": false,
                          "_": 15107,
                          "source": " DebugSession"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "ref": "DebugAdapterTracker",
                          "targs": [],
                          "isNullable": false,
                          "_": 15107,
                          "source": "DebugAdapterTracker"
                        }
                      ],
                      "isNullable": false,
                      "_": 15107,
                      "source": " ProviderResult<DebugAdapterTracker>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 15113,
                "name": "DebugConsole",
                "generics": [],
                "doc": "Represents the debug console.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Append the given value to the debug console.\n\n @param value A string, falsy values will not be printed.",
                    "isMethod": true,
                    "_": 15119,
                    "source": "\n\t\t/**\n\t\t * Append the given value to the debug console.\n\t\t *\n\t\t * @param value A string, falsy values will not be printed.\n\t\t */\n\t\tappend(value: string): void;",
                    "name": "append",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "value",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 15119,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 15119,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Append the given value and a line feed character\n to the debug console.\n\n @param value A string, falsy values will be printed.",
                    "isMethod": true,
                    "_": 15127,
                    "source": "\n\n\t\t/**\n\t\t * Append the given value and a line feed character\n\t\t * to the debug console.\n\t\t *\n\t\t * @param value A string, falsy values will be printed.\n\t\t */\n\t\tappendLine(value: string): void;",
                    "name": "appendLine",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "value",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 15127,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 15127,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 15133,
                "name": "BreakpointsChangeEvent",
                "generics": [],
                "doc": "An event describing the changes to the set of {@link Breakpointbreakpoints}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Added breakpoints.",
                    "isMethod": false,
                    "_": 15137,
                    "source": "\n\t\t/**\n\t\t * Added breakpoints.\n\t\t */\n\t\treadonly added: readonly Breakpoint[];",
                    "name": "added",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "Breakpoint",
                            "targs": [],
                            "isNullable": false,
                            "_": 15137,
                            "source": " Breakpoint"
                          }
                        ],
                        "isNullable": false,
                        "_": 15137,
                        "source": " Breakpoint[]"
                      },
                      "isNullable": false,
                      "_": 15137,
                      "source": " readonly Breakpoint[]"
                    }
                  },
                  {
                    "doc": "Removed breakpoints.",
                    "isMethod": false,
                    "_": 15142,
                    "source": "\n\n\t\t/**\n\t\t * Removed breakpoints.\n\t\t */\n\t\treadonly removed: readonly Breakpoint[];",
                    "name": "removed",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "Breakpoint",
                            "targs": [],
                            "isNullable": false,
                            "_": 15142,
                            "source": " Breakpoint"
                          }
                        ],
                        "isNullable": false,
                        "_": 15142,
                        "source": " Breakpoint[]"
                      },
                      "isNullable": false,
                      "_": 15142,
                      "source": " readonly Breakpoint[]"
                    }
                  },
                  {
                    "doc": "Changed breakpoints.",
                    "isMethod": false,
                    "_": 15147,
                    "source": "\n\n\t\t/**\n\t\t * Changed breakpoints.\n\t\t */\n\t\treadonly changed: readonly Breakpoint[];",
                    "name": "changed",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "Breakpoint",
                            "targs": [],
                            "isNullable": false,
                            "_": 15147,
                            "source": " Breakpoint"
                          }
                        ],
                        "isNullable": false,
                        "_": 15147,
                        "source": " Breakpoint[]"
                      },
                      "isNullable": false,
                      "_": 15147,
                      "source": " readonly Breakpoint[]"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 15153,
                "name": "Breakpoint",
                "generics": [],
                "doc": "The base class of all breakpoint types.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 15175,
                    "source": "\n\n\t\tprotected constructor(enabled?: boolean, condition?: string, hitCondition?: string, logMessage?: string);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "enabled",
                        "type": {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 15175,
                          "source": " boolean"
                        },
                        "varargs": false,
                        "isNullable": true
                      },
                      {
                        "name": "condition",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 15175,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": true
                      },
                      {
                        "name": "hitCondition",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 15175,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": true
                      },
                      {
                        "name": "logMessage",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 15175,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The unique ID of the breakpoint.",
                    "isMethod": false,
                    "_": 15157,
                    "source": "\n\t\t/**\n\t\t * The unique ID of the breakpoint.\n\t\t */\n\t\treadonly id: string;",
                    "name": "id",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 15157,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Is breakpoint enabled.",
                    "isMethod": false,
                    "_": 15161,
                    "source": "\n\t\t/**\n\t\t * Is breakpoint enabled.\n\t\t */\n\t\treadonly enabled: boolean;",
                    "name": "enabled",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 15161,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "An optional expression for conditional breakpoints.",
                    "isMethod": false,
                    "_": 15165,
                    "source": "\n\t\t/**\n\t\t * An optional expression for conditional breakpoints.\n\t\t */\n\t\treadonly condition?: string | undefined;",
                    "name": "condition",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 15165,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 15165,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 15165,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "An optional expression that controls how many hits of the breakpoint are ignored.",
                    "isMethod": false,
                    "_": 15169,
                    "source": "\n\t\t/**\n\t\t * An optional expression that controls how many hits of the breakpoint are ignored.\n\t\t */\n\t\treadonly hitCondition?: string | undefined;",
                    "name": "hitCondition",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 15169,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 15169,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 15169,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "An optional message that gets logged when this breakpoint is hit. Embedded expressions within {} are interpolated by the debug adapter.",
                    "isMethod": false,
                    "_": 15173,
                    "source": "\n\t\t/**\n\t\t * An optional message that gets logged when this breakpoint is hit. Embedded expressions within {} are interpolated by the debug adapter.\n\t\t */\n\t\treadonly logMessage?: string | undefined;",
                    "name": "logMessage",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 15173,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 15173,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 15173,
                      "source": " string | undefined"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 15181,
                "name": "SourceBreakpoint",
                "generics": [],
                "doc": "A breakpoint specified by a source location.",
                "heritage": [
                  [
                    {
                      "ref": "Breakpoint",
                      "targs": [],
                      "isNullable": false,
                      "_": 15181,
                      "source": " Breakpoint"
                    }
                  ]
                ],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 15190,
                    "source": "\n\n\t\t/**\n\t\t * Create a new breakpoint for a source location.\n\t\t */\n\t\tconstructor(location: Location, enabled?: boolean, condition?: string, hitCondition?: string, logMessage?: string);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "location",
                        "type": {
                          "ref": "Location",
                          "targs": [],
                          "isNullable": false,
                          "_": 15190,
                          "source": " Location"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "enabled",
                        "type": {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 15190,
                          "source": " boolean"
                        },
                        "varargs": false,
                        "isNullable": true
                      },
                      {
                        "name": "condition",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 15190,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": true
                      },
                      {
                        "name": "hitCondition",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 15190,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": true
                      },
                      {
                        "name": "logMessage",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 15190,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The source and line position of this breakpoint.",
                    "isMethod": false,
                    "_": 15185,
                    "source": "\n\t\t/**\n\t\t * The source and line position of this breakpoint.\n\t\t */\n\t\treadonly location: Location;",
                    "name": "location",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Location",
                      "targs": [],
                      "isNullable": false,
                      "_": 15185,
                      "source": " Location"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 15196,
                "name": "FunctionBreakpoint",
                "generics": [],
                "doc": "A breakpoint specified by a function name.",
                "heritage": [
                  [
                    {
                      "ref": "Breakpoint",
                      "targs": [],
                      "isNullable": false,
                      "_": 15196,
                      "source": " Breakpoint"
                    }
                  ]
                ],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 15205,
                    "source": "\n\n\t\t/**\n\t\t * Create a new function breakpoint.\n\t\t */\n\t\tconstructor(functionName: string, enabled?: boolean, condition?: string, hitCondition?: string, logMessage?: string);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "functionName",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 15205,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "enabled",
                        "type": {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 15205,
                          "source": " boolean"
                        },
                        "varargs": false,
                        "isNullable": true
                      },
                      {
                        "name": "condition",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 15205,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": true
                      },
                      {
                        "name": "hitCondition",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 15205,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": true
                      },
                      {
                        "name": "logMessage",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 15205,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The name of the function to which this breakpoint is attached.",
                    "isMethod": false,
                    "_": 15200,
                    "source": "\n\t\t/**\n\t\t * The name of the function to which this breakpoint is attached.\n\t\t */\n\t\treadonly functionName: string;",
                    "name": "functionName",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 15200,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 15227,
                "name": "DebugSessionOptions",
                "generics": [],
                "doc": "Options for {@link debug.startDebuggingstarting a debug session}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "When specified the newly created debug session is registered as a \"child\" session of this\n \"parent\" debug session.",
                    "isMethod": false,
                    "_": 15233,
                    "source": "\n\n\t\t/**\n\t\t * When specified the newly created debug session is registered as a \"child\" session of this\n\t\t * \"parent\" debug session.\n\t\t */\n\t\tparentSession?: DebugSession;",
                    "name": "parentSession",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "DebugSession",
                      "targs": [],
                      "isNullable": false,
                      "_": 15233,
                      "source": " DebugSession"
                    }
                  },
                  {
                    "doc": "Controls whether lifecycle requests like 'restart' are sent to the newly created session or its parent session.\n By default (if the property is false or missing), lifecycle requests are sent to the new session.\n This property is ignored if the session has no parent session.",
                    "isMethod": false,
                    "_": 15240,
                    "source": "\n\n\t\t/**\n\t\t * Controls whether lifecycle requests like 'restart' are sent to the newly created session or its parent session.\n\t\t * By default (if the property is false or missing), lifecycle requests are sent to the new session.\n\t\t * This property is ignored if the session has no parent session.\n\t\t */\n\t\tlifecycleManagedByParent?: boolean;",
                    "name": "lifecycleManagedByParent",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 15240,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Controls whether this session should have a separate debug console or share it\n with the parent session. Has no effect for sessions which do not have a parent session.\n Defaults to Separate.",
                    "isMethod": false,
                    "_": 15247,
                    "source": "\n\n\t\t/**\n\t\t * Controls whether this session should have a separate debug console or share it\n\t\t * with the parent session. Has no effect for sessions which do not have a parent session.\n\t\t * Defaults to Separate.\n\t\t */\n\t\tconsoleMode?: DebugConsoleMode;",
                    "name": "consoleMode",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "DebugConsoleMode",
                      "targs": [],
                      "isNullable": false,
                      "_": 15247,
                      "source": " DebugConsoleMode"
                    }
                  },
                  {
                    "doc": "Controls whether this session should run without debugging, thus ignoring breakpoints.\n When this property is not specified, the value from the parent session (if there is one) is used.",
                    "isMethod": false,
                    "_": 15253,
                    "source": "\n\n\t\t/**\n\t\t * Controls whether this session should run without debugging, thus ignoring breakpoints.\n\t\t * When this property is not specified, the value from the parent session (if there is one) is used.\n\t\t */\n\t\tnoDebug?: boolean;",
                    "name": "noDebug",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 15253,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Controls if the debug session's parent session is shown in the CALL STACK view even if it has only a single child.\n By default, the debug session will never hide its parent.\n If compact is true, debug sessions with a single child are hidden in the CALL STACK view to make the tree more compact.",
                    "isMethod": false,
                    "_": 15260,
                    "source": "\n\n\t\t/**\n\t\t * Controls if the debug session's parent session is shown in the CALL STACK view even if it has only a single child.\n\t\t * By default, the debug session will never hide its parent.\n\t\t * If compact is true, debug sessions with a single child are hidden in the CALL STACK view to make the tree more compact.\n\t\t */\n\t\tcompact?: boolean;",
                    "name": "compact",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 15260,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "When true, a save will not be triggered for open editors when starting a debug session, regardless of the value of the `debug.saveBeforeStart` setting.",
                    "isMethod": false,
                    "_": 15265,
                    "source": "\n\n\t\t/**\n\t\t * When true, a save will not be triggered for open editors when starting a debug session, regardless of the value of the `debug.saveBeforeStart` setting.\n\t\t */\n\t\tsuppressSaveBeforeStart?: boolean;",
                    "name": "suppressSaveBeforeStart",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 15265,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "When true, the debug toolbar will not be shown for this session.",
                    "isMethod": false,
                    "_": 15270,
                    "source": "\n\n\t\t/**\n\t\t * When true, the debug toolbar will not be shown for this session.\n\t\t */\n\t\tsuppressDebugToolbar?: boolean;",
                    "name": "suppressDebugToolbar",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 15270,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "When true, the window statusbar color will not be changed for this session.",
                    "isMethod": false,
                    "_": 15275,
                    "source": "\n\n\t\t/**\n\t\t * When true, the window statusbar color will not be changed for this session.\n\t\t */\n\t\tsuppressDebugStatusbar?: boolean;",
                    "name": "suppressDebugStatusbar",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 15275,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "When true, the debug viewlet will not be automatically revealed for this session.",
                    "isMethod": false,
                    "_": 15280,
                    "source": "\n\n\t\t/**\n\t\t * When true, the debug viewlet will not be automatically revealed for this session.\n\t\t */\n\t\tsuppressDebugView?: boolean;",
                    "name": "suppressDebugView",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 15280,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 15526,
                "name": "CommentThread",
                "generics": [],
                "doc": "A collection of {@link Commentcomments} representing a conversation at a particular range in a document.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The uri of the document the thread has been created on.",
                    "isMethod": false,
                    "_": 15530,
                    "source": "\n\t\t/**\n\t\t * The uri of the document the thread has been created on.\n\t\t */\n\t\treadonly uri: Uri;",
                    "name": "uri",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 15530,
                      "source": " Uri"
                    }
                  },
                  {
                    "doc": "The range the comment thread is located within the document. The thread icon will be shown\n at the last line of the range.",
                    "isMethod": false,
                    "_": 15536,
                    "source": "\n\n\t\t/**\n\t\t * The range the comment thread is located within the document. The thread icon will be shown\n\t\t * at the last line of the range.\n\t\t */\n\t\trange: Range;",
                    "name": "range",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Range",
                      "targs": [],
                      "isNullable": false,
                      "_": 15536,
                      "source": " Range"
                    }
                  },
                  {
                    "doc": "The ordered comments of the thread.",
                    "isMethod": false,
                    "_": 15541,
                    "source": "\n\n\t\t/**\n\t\t * The ordered comments of the thread.\n\t\t */\n\t\tcomments: readonly Comment[];",
                    "name": "comments",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "Comment",
                            "targs": [],
                            "isNullable": false,
                            "_": 15541,
                            "source": " Comment"
                          }
                        ],
                        "isNullable": false,
                        "_": 15541,
                        "source": " Comment[]"
                      },
                      "isNullable": false,
                      "_": 15541,
                      "source": " readonly Comment[]"
                    }
                  },
                  {
                    "doc": "Whether the thread should be collapsed or expanded when opening the document.\n Defaults to Collapsed.",
                    "isMethod": false,
                    "_": 15547,
                    "source": "\n\n\t\t/**\n\t\t * Whether the thread should be collapsed or expanded when opening the document.\n\t\t * Defaults to Collapsed.\n\t\t */\n\t\tcollapsibleState: CommentThreadCollapsibleState;",
                    "name": "collapsibleState",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "CommentThreadCollapsibleState",
                      "targs": [],
                      "isNullable": false,
                      "_": 15547,
                      "source": " CommentThreadCollapsibleState"
                    }
                  },
                  {
                    "doc": "Whether the thread supports reply.\n Defaults to true.",
                    "isMethod": false,
                    "_": 15553,
                    "source": "\n\n\t\t/**\n\t\t * Whether the thread supports reply.\n\t\t * Defaults to true.\n\t\t */\n\t\tcanReply: boolean;",
                    "name": "canReply",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 15553,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Context value of the comment thread. This can be used to contribute thread specific actions.\n For example, a comment thread is given a context value as `editable`. When contributing actions to `comments/commentThread/title`\n using `menus` extension point, you can specify context value for key `commentThread` in `when` expression like `commentThread == editable`.\n ```json\n \"contributes\": {\n   \"menus\": {\n     \"comments/commentThread/title\": [\n       {\n         \"command\": \"extension.deleteCommentThread\",\n         \"when\": \"commentThread == editable\"\n       }\n     ]\n   }\n }\n ```\n This will show action `extension.deleteCommentThread` only for comment threads with `contextValue` is `editable`.",
                    "isMethod": false,
                    "_": 15573,
                    "source": "\n\n\t\t/**\n\t\t * Context value of the comment thread. This can be used to contribute thread specific actions.\n\t\t * For example, a comment thread is given a context value as `editable`. When contributing actions to `comments/commentThread/title`\n\t\t * using `menus` extension point, you can specify context value for key `commentThread` in `when` expression like `commentThread == editable`.\n\t\t * ```json\n\t\t * \"contributes\": {\n\t\t *   \"menus\": {\n\t\t *     \"comments/commentThread/title\": [\n\t\t *       {\n\t\t *         \"command\": \"extension.deleteCommentThread\",\n\t\t *         \"when\": \"commentThread == editable\"\n\t\t *       }\n\t\t *     ]\n\t\t *   }\n\t\t * }\n\t\t * ```\n\t\t * This will show action `extension.deleteCommentThread` only for comment threads with `contextValue` is `editable`.\n\t\t */\n\t\tcontextValue?: string;",
                    "name": "contextValue",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 15573,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The optional human-readable label describing the {@link CommentThread Comment Thread}",
                    "isMethod": false,
                    "_": 15578,
                    "source": "\n\n\t\t/**\n\t\t * The optional human-readable label describing the {@link CommentThread Comment Thread}\n\t\t */\n\t\tlabel?: string;",
                    "name": "label",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 15578,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The optional state of a comment thread, which may affect how the comment is displayed.",
                    "isMethod": false,
                    "_": 15583,
                    "source": "\n\n\t\t/**\n\t\t * The optional state of a comment thread, which may affect how the comment is displayed.\n\t\t */\n\t\tstate?: CommentThreadState;",
                    "name": "state",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "CommentThreadState",
                      "targs": [],
                      "isNullable": false,
                      "_": 15583,
                      "source": " CommentThreadState"
                    }
                  },
                  {
                    "doc": "Dispose this comment thread.\n\n Once disposed, this comment thread will be removed from visible editors and Comment Panel when appropriate.",
                    "isMethod": true,
                    "_": 15590,
                    "source": "\n\n\t\t/**\n\t\t * Dispose this comment thread.\n\t\t *\n\t\t * Once disposed, this comment thread will be removed from visible editors and Comment Panel when appropriate.\n\t\t */\n\t\tdispose(): void;",
                    "name": "dispose",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 15590,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 15596,
                "name": "CommentAuthorInformation",
                "generics": [],
                "doc": "Author information of a {@link Comment}",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The display name of the author of the comment",
                    "isMethod": false,
                    "_": 15600,
                    "source": "\n\t\t/**\n\t\t * The display name of the author of the comment\n\t\t */\n\t\tname: string;",
                    "name": "name",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 15600,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The optional icon path for the author",
                    "isMethod": false,
                    "_": 15605,
                    "source": "\n\n\t\t/**\n\t\t * The optional icon path for the author\n\t\t */\n\t\ticonPath?: Uri;",
                    "name": "iconPath",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 15605,
                      "source": " Uri"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 15611,
                "name": "CommentReaction",
                "generics": [],
                "doc": "Reactions of a {@link Comment}",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The human-readable label for the reaction",
                    "isMethod": false,
                    "_": 15615,
                    "source": "\n\t\t/**\n\t\t * The human-readable label for the reaction\n\t\t */\n\t\treadonly label: string;",
                    "name": "label",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 15615,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Icon for the reaction shown in UI.",
                    "isMethod": false,
                    "_": 15620,
                    "source": "\n\n\t\t/**\n\t\t * Icon for the reaction shown in UI.\n\t\t */\n\t\treadonly iconPath: string | Uri;",
                    "name": "iconPath",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 15620,
                          "source": " string"
                        },
                        {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 15620,
                          "source": " Uri"
                        }
                      ],
                      "isNullable": false,
                      "_": 15620,
                      "source": " string | Uri"
                    }
                  },
                  {
                    "doc": "The number of users who have reacted to this reaction",
                    "isMethod": false,
                    "_": 15625,
                    "source": "\n\n\t\t/**\n\t\t * The number of users who have reacted to this reaction\n\t\t */\n\t\treadonly count: number;",
                    "name": "count",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 15625,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "Whether the {@link CommentAuthorInformationauthor} of the comment has reacted to this reaction",
                    "isMethod": false,
                    "_": 15630,
                    "source": "\n\n\t\t/**\n\t\t * Whether the {@link CommentAuthorInformation author} of the comment has reacted to this reaction\n\t\t */\n\t\treadonly authorHasReacted: boolean;",
                    "name": "authorHasReacted",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 15630,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 15636,
                "name": "Comment",
                "generics": [],
                "doc": "A comment is displayed within the editor or the Comments Panel, depending on how it is provided.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The human-readable comment body",
                    "isMethod": false,
                    "_": 15640,
                    "source": "\n\t\t/**\n\t\t * The human-readable comment body\n\t\t */\n\t\tbody: string | MarkdownString;",
                    "name": "body",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 15640,
                          "source": " string"
                        },
                        {
                          "ref": "MarkdownString",
                          "targs": [],
                          "isNullable": false,
                          "_": 15640,
                          "source": " MarkdownString"
                        }
                      ],
                      "isNullable": false,
                      "_": 15640,
                      "source": " string | MarkdownString"
                    }
                  },
                  {
                    "doc": "{@link CommentMode Comment mode} of the comment",
                    "isMethod": false,
                    "_": 15645,
                    "source": "\n\n\t\t/**\n\t\t * {@link CommentMode Comment mode} of the comment\n\t\t */\n\t\tmode: CommentMode;",
                    "name": "mode",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "CommentMode",
                      "targs": [],
                      "isNullable": false,
                      "_": 15645,
                      "source": " CommentMode"
                    }
                  },
                  {
                    "doc": "The {@link CommentAuthorInformation author information} of the comment",
                    "isMethod": false,
                    "_": 15650,
                    "source": "\n\n\t\t/**\n\t\t * The {@link CommentAuthorInformation author information} of the comment\n\t\t */\n\t\tauthor: CommentAuthorInformation;",
                    "name": "author",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "CommentAuthorInformation",
                      "targs": [],
                      "isNullable": false,
                      "_": 15650,
                      "source": " CommentAuthorInformation"
                    }
                  },
                  {
                    "doc": "Context value of the comment. This can be used to contribute comment specific actions.\n For example, a comment is given a context value as `editable`. When contributing actions to `comments/comment/title`\n using `menus` extension point, you can specify context value for key `comment` in `when` expression like `comment == editable`.\n ```json\n\t\"contributes\": {\n\t\t\"menus\": {\n\t\t\t\"comments/comment/title\": [\n\t\t\t\t{\n\t\t\t\t\t\"command\": \"extension.deleteComment\",\n\t\t\t\t\t\"when\": \"comment == editable\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t}\n ```\n This will show action `extension.deleteComment` only for comments with `contextValue` is `editable`.",
                    "isMethod": false,
                    "_": 15670,
                    "source": "\n\n\t\t/**\n\t\t * Context value of the comment. This can be used to contribute comment specific actions.\n\t\t * For example, a comment is given a context value as `editable`. When contributing actions to `comments/comment/title`\n\t\t * using `menus` extension point, you can specify context value for key `comment` in `when` expression like `comment == editable`.\n\t\t * ```json\n\t\t *\t\"contributes\": {\n\t\t *\t\t\"menus\": {\n\t\t *\t\t\t\"comments/comment/title\": [\n\t\t *\t\t\t\t{\n\t\t *\t\t\t\t\t\"command\": \"extension.deleteComment\",\n\t\t *\t\t\t\t\t\"when\": \"comment == editable\"\n\t\t *\t\t\t\t}\n\t\t *\t\t\t]\n\t\t *\t\t}\n\t\t *\t}\n\t\t * ```\n\t\t * This will show action `extension.deleteComment` only for comments with `contextValue` is `editable`.\n\t\t */\n\t\tcontextValue?: string;",
                    "name": "contextValue",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 15670,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Optional reactions of the {@link Comment}",
                    "isMethod": false,
                    "_": 15675,
                    "source": "\n\n\t\t/**\n\t\t * Optional reactions of the {@link Comment}\n\t\t */\n\t\treactions?: CommentReaction[];",
                    "name": "reactions",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "ref": "CommentReaction",
                          "targs": [],
                          "isNullable": false,
                          "_": 15675,
                          "source": " CommentReaction"
                        }
                      ],
                      "isNullable": false,
                      "_": 15675,
                      "source": " CommentReaction[]"
                    }
                  },
                  {
                    "doc": "Optional label describing the {@link Comment}\n Label will be rendered next to authorName if exists.",
                    "isMethod": false,
                    "_": 15681,
                    "source": "\n\n\t\t/**\n\t\t * Optional label describing the {@link Comment}\n\t\t * Label will be rendered next to authorName if exists.\n\t\t */\n\t\tlabel?: string;",
                    "name": "label",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 15681,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Optional timestamp that will be displayed in comments.\n The date will be formatted according to the user's locale and settings.",
                    "isMethod": false,
                    "_": 15687,
                    "source": "\n\n\t\t/**\n\t\t * Optional timestamp that will be displayed in comments.\n\t\t * The date will be formatted according to the user's locale and settings.\n\t\t */\n\t\ttimestamp?: Date;",
                    "name": "timestamp",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Date",
                      "targs": [],
                      "isNullable": false,
                      "_": 15687,
                      "source": " Date"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 15693,
                "name": "CommentReply",
                "generics": [],
                "doc": "Command argument for actions registered in `comments/commentThread/context`.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The active {@link CommentThread comment thread}",
                    "isMethod": false,
                    "_": 15697,
                    "source": "\n\t\t/**\n\t\t * The active {@link CommentThread comment thread}\n\t\t */\n\t\tthread: CommentThread;",
                    "name": "thread",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "CommentThread",
                      "targs": [],
                      "isNullable": false,
                      "_": 15697,
                      "source": " CommentThread"
                    }
                  },
                  {
                    "doc": "The value in the comment editor",
                    "isMethod": false,
                    "_": 15702,
                    "source": "\n\n\t\t/**\n\t\t * The value in the comment editor\n\t\t */\n\t\ttext: string;",
                    "name": "text",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 15702,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 15708,
                "name": "CommentingRangeProvider",
                "generics": [],
                "doc": "Commenting range provider for a {@link CommentControllercomment controller}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Provide a list of ranges which allow new comment threads creation or null for a given document",
                    "isMethod": true,
                    "_": 15712,
                    "source": "\n\t\t/**\n\t\t * Provide a list of ranges which allow new comment threads creation or null for a given document\n\t\t */\n\t\tprovideCommentingRanges(document: TextDocument, token: CancellationToken): ProviderResult<Range[]>;",
                    "name": "provideCommentingRanges",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "document",
                        "type": {
                          "ref": "TextDocument",
                          "targs": [],
                          "isNullable": false,
                          "_": 15712,
                          "source": " TextDocument"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "token",
                        "type": {
                          "ref": "CancellationToken",
                          "targs": [],
                          "isNullable": false,
                          "_": 15712,
                          "source": " CancellationToken"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "ProviderResult",
                      "targs": [
                        {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "Range",
                              "targs": [],
                              "isNullable": false,
                              "_": 15712,
                              "source": "Range"
                            }
                          ],
                          "isNullable": false,
                          "_": 15712,
                          "source": "Range[]"
                        }
                      ],
                      "isNullable": false,
                      "_": 15712,
                      "source": " ProviderResult<Range[]>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 15718,
                "name": "CommentOptions",
                "generics": [],
                "doc": "Represents a {@link CommentControllercomment controller}'s {@link CommentController.optionsoptions}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "An optional string to show on the comment input box when it's collapsed.",
                    "isMethod": false,
                    "_": 15722,
                    "source": "\n\t\t/**\n\t\t * An optional string to show on the comment input box when it's collapsed.\n\t\t */\n\t\tprompt?: string;",
                    "name": "prompt",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 15722,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "An optional string to show as placeholder in the comment input box when it's focused.",
                    "isMethod": false,
                    "_": 15727,
                    "source": "\n\n\t\t/**\n\t\t * An optional string to show as placeholder in the comment input box when it's focused.\n\t\t */\n\t\tplaceHolder?: string;",
                    "name": "placeHolder",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 15727,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 15734,
                "name": "CommentController",
                "generics": [],
                "doc": "A comment controller is able to provide {@link CommentThreadcomments} support to the editor and\nprovide users various ways to interact with comments.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The id of this comment controller.",
                    "isMethod": false,
                    "_": 15738,
                    "source": "\n\t\t/**\n\t\t * The id of this comment controller.\n\t\t */\n\t\treadonly id: string;",
                    "name": "id",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 15738,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The human-readable label of this comment controller.",
                    "isMethod": false,
                    "_": 15743,
                    "source": "\n\n\t\t/**\n\t\t * The human-readable label of this comment controller.\n\t\t */\n\t\treadonly label: string;",
                    "name": "label",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 15743,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Comment controller options",
                    "isMethod": false,
                    "_": 15748,
                    "source": "\n\n\t\t/**\n\t\t * Comment controller options\n\t\t */\n\t\toptions?: CommentOptions;",
                    "name": "options",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "CommentOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 15748,
                      "source": " CommentOptions"
                    }
                  },
                  {
                    "doc": "Optional commenting range provider. Provide a list {@link Range ranges} which support commenting to any given resource uri.\n\n If not provided, users cannot leave any comments.",
                    "isMethod": false,
                    "_": 15755,
                    "source": "\n\n\t\t/**\n\t\t * Optional commenting range provider. Provide a list {@link Range ranges} which support commenting to any given resource uri.\n\t\t *\n\t\t * If not provided, users cannot leave any comments.\n\t\t */\n\t\tcommentingRangeProvider?: CommentingRangeProvider;",
                    "name": "commentingRangeProvider",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "CommentingRangeProvider",
                      "targs": [],
                      "isNullable": false,
                      "_": 15755,
                      "source": " CommentingRangeProvider"
                    }
                  },
                  {
                    "doc": "Create a {@link CommentThread comment thread}. The comment thread will be displayed in visible text editors (if the resource matches)\n and Comments Panel once created.\n\n @param uri The uri of the document the thread has been created on.\n @param range The range the comment thread is located within the document.\n @param comments The ordered comments of the thread.",
                    "isMethod": true,
                    "_": 15765,
                    "source": "\n\n\t\t/**\n\t\t * Create a {@link CommentThread comment thread}. The comment thread will be displayed in visible text editors (if the resource matches)\n\t\t * and Comments Panel once created.\n\t\t *\n\t\t * @param uri The uri of the document the thread has been created on.\n\t\t * @param range The range the comment thread is located within the document.\n\t\t * @param comments The ordered comments of the thread.\n\t\t */\n\t\tcreateCommentThread(uri: Uri, range: Range, comments: readonly Comment[]): CommentThread;",
                    "name": "createCommentThread",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "uri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 15765,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "range",
                        "type": {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 15765,
                          "source": " Range"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "comments",
                        "type": {
                          "operator": 146,
                          "type": {
                            "core": "array",
                            "targs": [
                              {
                                "ref": "Comment",
                                "targs": [],
                                "isNullable": false,
                                "_": 15765,
                                "source": " Comment"
                              }
                            ],
                            "isNullable": false,
                            "_": 15765,
                            "source": " Comment[]"
                          },
                          "isNullable": false,
                          "_": 15765,
                          "source": " readonly Comment[]"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "CommentThread",
                      "targs": [],
                      "isNullable": false,
                      "_": 15765,
                      "source": " CommentThread"
                    }
                  },
                  {
                    "doc": "Optional reaction handler for creating and deleting reactions on a {@link Comment}.",
                    "isMethod": false,
                    "_": 15770,
                    "source": "\n\n\t\t/**\n\t\t * Optional reaction handler for creating and deleting reactions on a {@link Comment}.\n\t\t */\n\t\treactionHandler?: (comment: Comment, reaction: CommentReaction) => Thenable<void>;",
                    "name": "reactionHandler",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ctor": false,
                      "generics": [],
                      "returns": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "core": "void",
                            "isNullable": false,
                            "_": 15770,
                            "source": "void"
                          }
                        ],
                        "isNullable": false,
                        "_": 15770,
                        "source": " Thenable<void>"
                      },
                      "params": [
                        {
                          "name": "comment",
                          "type": {
                            "ref": "Comment",
                            "targs": [],
                            "isNullable": false,
                            "_": 15770,
                            "source": " Comment"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "reaction",
                          "type": {
                            "ref": "CommentReaction",
                            "targs": [],
                            "isNullable": false,
                            "_": 15770,
                            "source": " CommentReaction"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "isNullable": false,
                      "_": 15770,
                      "source": " (comment: Comment, reaction: CommentReaction) => Thenable<void>"
                    }
                  },
                  {
                    "doc": "Dispose this comment controller.\n\n Once disposed, all {@link CommentThread comment threads} created by this comment controller will also be removed from the editor\n and Comments Panel.",
                    "isMethod": true,
                    "_": 15778,
                    "source": "\n\n\t\t/**\n\t\t * Dispose this comment controller.\n\t\t *\n\t\t * Once disposed, all {@link CommentThread comment threads} created by this comment controller will also be removed from the editor\n\t\t * and Comments Panel.\n\t\t */\n\t\tdispose(): void;",
                    "name": "dispose",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 15778,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 15795,
                "name": "AuthenticationSession",
                "generics": [],
                "doc": "Represents a session of a currently logged in user.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The identifier of the authentication session.",
                    "isMethod": false,
                    "_": 15799,
                    "source": "\n\t\t/**\n\t\t * The identifier of the authentication session.\n\t\t */\n\t\treadonly id: string;",
                    "name": "id",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 15799,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The access token.",
                    "isMethod": false,
                    "_": 15804,
                    "source": "\n\n\t\t/**\n\t\t * The access token.\n\t\t */\n\t\treadonly accessToken: string;",
                    "name": "accessToken",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 15804,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The account associated with the session.",
                    "isMethod": false,
                    "_": 15809,
                    "source": "\n\n\t\t/**\n\t\t * The account associated with the session.\n\t\t */\n\t\treadonly account: AuthenticationSessionAccountInformation;",
                    "name": "account",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "AuthenticationSessionAccountInformation",
                      "targs": [],
                      "isNullable": false,
                      "_": 15809,
                      "source": " AuthenticationSessionAccountInformation"
                    }
                  },
                  {
                    "doc": "The permissions granted by the session's access token. Available scopes\nare defined by the {@link AuthenticationProvider}.",
                    "isMethod": false,
                    "_": 15815,
                    "source": "\n\n\t\t/**\n\t\t * The permissions granted by the session's access token. Available scopes\n\t\t * are defined by the {@link AuthenticationProvider}.\n\t\t */\n\t\treadonly scopes: readonly string[];",
                    "name": "scopes",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "core": "string",
                            "isNullable": false,
                            "_": 15815,
                            "source": " string"
                          }
                        ],
                        "isNullable": false,
                        "_": 15815,
                        "source": " string[]"
                      },
                      "isNullable": false,
                      "_": 15815,
                      "source": " readonly string[]"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 15821,
                "name": "AuthenticationSessionAccountInformation",
                "generics": [],
                "doc": "The information of an account associated with an {@link AuthenticationSession}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The unique identifier of the account.",
                    "isMethod": false,
                    "_": 15825,
                    "source": "\n\t\t/**\n\t\t * The unique identifier of the account.\n\t\t */\n\t\treadonly id: string;",
                    "name": "id",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 15825,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The human-readable name of the account.",
                    "isMethod": false,
                    "_": 15830,
                    "source": "\n\n\t\t/**\n\t\t * The human-readable name of the account.\n\t\t */\n\t\treadonly label: string;",
                    "name": "label",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 15830,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 15836,
                "name": "AuthenticationForceNewSessionOptions",
                "generics": [],
                "doc": "Optional options to be used when calling {@link authentication.getSession} with the flag `forceNewSession`.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "An optional message that will be displayed to the user when we ask to re-authenticate. Providing additional context\n as to why you are asking a user to re-authenticate can help increase the odds that they will accept.",
                    "isMethod": false,
                    "_": 15841,
                    "source": "\n\t\t/**\n\t\t * An optional message that will be displayed to the user when we ask to re-authenticate. Providing additional context\n\t\t * as to why you are asking a user to re-authenticate can help increase the odds that they will accept.\n\t\t */\n\t\tdetail?: string;",
                    "name": "detail",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 15841,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 15847,
                "name": "AuthenticationGetSessionOptions",
                "generics": [],
                "doc": "Options to be used when getting an {@link AuthenticationSession} from an {@link AuthenticationProvider}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Whether the existing session preference should be cleared.\n\n For authentication providers that support being signed into multiple accounts at once, the user will be\n prompted to select an account to use when {@link authentication.getSession getSession} is called. This preference\n is remembered until {@link authentication.getSession getSession} is called with this flag.\n\n Note:\n The preference is extension specific. So if one extension calls {@link authentication.getSession getSession}, it will not\n affect the session preference for another extension calling {@link authentication.getSession getSession}. Additionally,\n the preference is set for the current workspace and also globally. This means that new workspaces will use the \"global\"\n value at first and then when this flag is provided, a new value can be set for that workspace. This also means\n that pre-existing workspaces will not lose their preference if a new workspace sets this flag.\n\n Defaults to false.",
                    "isMethod": false,
                    "_": 15864,
                    "source": "\n\t\t/**\n\t\t * Whether the existing session preference should be cleared.\n\t\t *\n\t\t * For authentication providers that support being signed into multiple accounts at once, the user will be\n\t\t * prompted to select an account to use when {@link authentication.getSession getSession} is called. This preference\n\t\t * is remembered until {@link authentication.getSession getSession} is called with this flag.\n\t\t *\n\t\t * Note:\n\t\t * The preference is extension specific. So if one extension calls {@link authentication.getSession getSession}, it will not\n\t\t * affect the session preference for another extension calling {@link authentication.getSession getSession}. Additionally,\n\t\t * the preference is set for the current workspace and also globally. This means that new workspaces will use the \"global\"\n\t\t * value at first and then when this flag is provided, a new value can be set for that workspace. This also means\n\t\t * that pre-existing workspaces will not lose their preference if a new workspace sets this flag.\n\t\t *\n\t\t * Defaults to false.\n\t\t */\n\t\tclearSessionPreference?: boolean;",
                    "name": "clearSessionPreference",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 15864,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Whether login should be performed if there is no matching session.\n\n If true, a modal dialog will be shown asking the user to sign in. If false, a numbered badge will be shown\n on the accounts activity bar icon. An entry for the extension will be added under the menu to sign in. This\n allows quietly prompting the user to sign in.\n\n If there is a matching session but the extension has not been granted access to it, setting this to true\n will also result in an immediate modal dialog, and false will add a numbered badge to the accounts icon.\n\n Defaults to false.\n\n Note: you cannot use this option with {@link AuthenticationGetSessionOptions.silent silent}.",
                    "isMethod": false,
                    "_": 15880,
                    "source": "\n\n\t\t/**\n\t\t * Whether login should be performed if there is no matching session.\n\t\t *\n\t\t * If true, a modal dialog will be shown asking the user to sign in. If false, a numbered badge will be shown\n\t\t * on the accounts activity bar icon. An entry for the extension will be added under the menu to sign in. This\n\t\t * allows quietly prompting the user to sign in.\n\t\t *\n\t\t * If there is a matching session but the extension has not been granted access to it, setting this to true\n\t\t * will also result in an immediate modal dialog, and false will add a numbered badge to the accounts icon.\n\t\t *\n\t\t * Defaults to false.\n\t\t *\n\t\t * Note: you cannot use this option with {@link AuthenticationGetSessionOptions.silent silent}.\n\t\t */\n\t\tcreateIfNone?: boolean;",
                    "name": "createIfNone",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 15880,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Whether we should attempt to reauthenticate even if there is already a session available.\n\n If true, a modal dialog will be shown asking the user to sign in again. This is mostly used for scenarios\n where the token needs to be re minted because it has lost some authorization.\n\n If there are no existing sessions and forceNewSession is true, it will behave identically to\n {@link AuthenticationGetSessionOptions.createIfNone createIfNone}.\n\n This defaults to false.",
                    "isMethod": false,
                    "_": 15893,
                    "source": "\n\n\t\t/**\n\t\t * Whether we should attempt to reauthenticate even if there is already a session available.\n\t\t *\n\t\t * If true, a modal dialog will be shown asking the user to sign in again. This is mostly used for scenarios\n\t\t * where the token needs to be re minted because it has lost some authorization.\n\t\t *\n\t\t * If there are no existing sessions and forceNewSession is true, it will behave identically to\n\t\t * {@link AuthenticationGetSessionOptions.createIfNone createIfNone}.\n\t\t *\n\t\t * This defaults to false.\n\t\t */\n\t\tforceNewSession?: boolean | AuthenticationForceNewSessionOptions;",
                    "name": "forceNewSession",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 15893,
                          "source": " boolean"
                        },
                        {
                          "ref": "AuthenticationForceNewSessionOptions",
                          "targs": [],
                          "isNullable": false,
                          "_": 15893,
                          "source": " AuthenticationForceNewSessionOptions"
                        }
                      ],
                      "isNullable": false,
                      "_": 15893,
                      "source": " boolean | AuthenticationForceNewSessionOptions"
                    }
                  },
                  {
                    "doc": "Whether we should show the indication to sign in in the Accounts menu.\n\n If false, the user will be shown a badge on the Accounts menu with an option to sign in for the extension.\n If true, no indication will be shown.\n\n Defaults to false.\n\n Note: you cannot use this option with any other options that prompt the user like {@link AuthenticationGetSessionOptions.createIfNone createIfNone}.",
                    "isMethod": false,
                    "_": 15905,
                    "source": "\n\n\t\t/**\n\t\t * Whether we should show the indication to sign in in the Accounts menu.\n\t\t *\n\t\t * If false, the user will be shown a badge on the Accounts menu with an option to sign in for the extension.\n\t\t * If true, no indication will be shown.\n\t\t *\n\t\t * Defaults to false.\n\t\t *\n\t\t * Note: you cannot use this option with any other options that prompt the user like {@link AuthenticationGetSessionOptions.createIfNone createIfNone}.\n\t\t */\n\t\tsilent?: boolean;",
                    "name": "silent",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 15905,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 15911,
                "name": "AuthenticationProviderInformation",
                "generics": [],
                "doc": "Basic information about an {@link AuthenticationProvider}",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The unique identifier of the authentication provider.",
                    "isMethod": false,
                    "_": 15915,
                    "source": "\n\t\t/**\n\t\t * The unique identifier of the authentication provider.\n\t\t */\n\t\treadonly id: string;",
                    "name": "id",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 15915,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The human-readable name of the authentication provider.",
                    "isMethod": false,
                    "_": 15920,
                    "source": "\n\n\t\t/**\n\t\t * The human-readable name of the authentication provider.\n\t\t */\n\t\treadonly label: string;",
                    "name": "label",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 15920,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 15926,
                "name": "AuthenticationSessionsChangeEvent",
                "generics": [],
                "doc": "An {@link Event} which fires when an {@link AuthenticationSession} is added, removed, or changed.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The {@link AuthenticationProvider} that has had its sessions change.",
                    "isMethod": false,
                    "_": 15930,
                    "source": "\n\t\t/**\n\t\t * The {@link AuthenticationProvider} that has had its sessions change.\n\t\t */\n\t\treadonly provider: AuthenticationProviderInformation;",
                    "name": "provider",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "AuthenticationProviderInformation",
                      "targs": [],
                      "isNullable": false,
                      "_": 15930,
                      "source": " AuthenticationProviderInformation"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 15936,
                "name": "AuthenticationProviderOptions",
                "generics": [],
                "doc": "Options for creating an {@link AuthenticationProvider}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Whether it is possible to be signed into multiple accounts at once with this provider.\nIf not specified, will default to false.",
                    "isMethod": false,
                    "_": 15941,
                    "source": "\n\t\t/**\n\t\t * Whether it is possible to be signed into multiple accounts at once with this provider.\n\t\t * If not specified, will default to false.\n\t\t*/\n\t\treadonly supportsMultipleAccounts?: boolean;",
                    "name": "supportsMultipleAccounts",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 15941,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 15947,
                "name": "AuthenticationProviderAuthenticationSessionsChangeEvent",
                "generics": [],
                "doc": "An {@link Event} which fires when an {@link AuthenticationSession} is added, removed, or changed.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The {@link AuthenticationSessionAuthenticationSessions} of the {@link AuthenticationProvider} that have been added.",
                    "isMethod": false,
                    "_": 15951,
                    "source": "\n\t\t/**\n\t\t * The {@link AuthenticationSession AuthenticationSessions} of the {@link AuthenticationProvider} that have been added.\n\t\t*/\n\t\treadonly added: readonly AuthenticationSession[] | undefined;",
                    "name": "added",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "operator": 146,
                          "type": {
                            "core": "array",
                            "targs": [
                              {
                                "ref": "AuthenticationSession",
                                "targs": [],
                                "isNullable": false,
                                "_": 15951,
                                "source": " AuthenticationSession"
                              }
                            ],
                            "isNullable": false,
                            "_": 15951,
                            "source": " AuthenticationSession[]"
                          },
                          "isNullable": false,
                          "_": 15951,
                          "source": " readonly AuthenticationSession[]"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 15951,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 15951,
                      "source": " readonly AuthenticationSession[] | undefined"
                    }
                  },
                  {
                    "doc": "The {@link AuthenticationSessionAuthenticationSessions} of the {@link AuthenticationProvider} that have been removed.",
                    "isMethod": false,
                    "_": 15956,
                    "source": "\n\n\t\t/**\n\t\t * The {@link AuthenticationSession AuthenticationSessions} of the {@link AuthenticationProvider} that have been removed.\n\t\t */\n\t\treadonly removed: readonly AuthenticationSession[] | undefined;",
                    "name": "removed",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "operator": 146,
                          "type": {
                            "core": "array",
                            "targs": [
                              {
                                "ref": "AuthenticationSession",
                                "targs": [],
                                "isNullable": false,
                                "_": 15956,
                                "source": " AuthenticationSession"
                              }
                            ],
                            "isNullable": false,
                            "_": 15956,
                            "source": " AuthenticationSession[]"
                          },
                          "isNullable": false,
                          "_": 15956,
                          "source": " readonly AuthenticationSession[]"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 15956,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 15956,
                      "source": " readonly AuthenticationSession[] | undefined"
                    }
                  },
                  {
                    "doc": "The {@link AuthenticationSessionAuthenticationSessions} of the {@link AuthenticationProvider} that have been changed.\nA session changes when its data excluding the id are updated. An example of this is a session refresh that results in a new\naccess token being set for the session.",
                    "isMethod": false,
                    "_": 15963,
                    "source": "\n\n\t\t/**\n\t\t * The {@link AuthenticationSession AuthenticationSessions} of the {@link AuthenticationProvider} that have been changed.\n\t\t * A session changes when its data excluding the id are updated. An example of this is a session refresh that results in a new\n\t\t * access token being set for the session.\n\t\t */\n\t\treadonly changed: readonly AuthenticationSession[] | undefined;",
                    "name": "changed",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "operator": 146,
                          "type": {
                            "core": "array",
                            "targs": [
                              {
                                "ref": "AuthenticationSession",
                                "targs": [],
                                "isNullable": false,
                                "_": 15963,
                                "source": " AuthenticationSession"
                              }
                            ],
                            "isNullable": false,
                            "_": 15963,
                            "source": " AuthenticationSession[]"
                          },
                          "isNullable": false,
                          "_": 15963,
                          "source": " readonly AuthenticationSession[]"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 15963,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 15963,
                      "source": " readonly AuthenticationSession[] | undefined"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 15969,
                "name": "AuthenticationProvider",
                "generics": [],
                "doc": "A provider for performing authentication to a service.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "An {@link Event} which fires when the array of sessions has changed, or data\nwithin a session has changed.",
                    "isMethod": false,
                    "_": 15974,
                    "source": "\n\t\t/**\n\t\t * An {@link Event} which fires when the array of sessions has changed, or data\n\t\t * within a session has changed.\n\t\t */\n\t\treadonly onDidChangeSessions: Event<AuthenticationProviderAuthenticationSessionsChangeEvent>;",
                    "name": "onDidChangeSessions",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "ref": "AuthenticationProviderAuthenticationSessionsChangeEvent",
                          "targs": [],
                          "isNullable": false,
                          "_": 15974,
                          "source": "AuthenticationProviderAuthenticationSessionsChangeEvent"
                        }
                      ],
                      "isNullable": false,
                      "_": 15974,
                      "source": " Event<AuthenticationProviderAuthenticationSessionsChangeEvent>"
                    }
                  },
                  {
                    "doc": "Get a list of sessions.\n @param scopes An optional list of scopes. If provided, the sessions returned should match\n these permissions, otherwise all sessions should be returned.\n @returns A promise that resolves to an array of authentication sessions.",
                    "isMethod": true,
                    "_": 15982,
                    "source": "\n\n\t\t/**\n\t\t * Get a list of sessions.\n\t\t * @param scopes An optional list of scopes. If provided, the sessions returned should match\n\t\t * these permissions, otherwise all sessions should be returned.\n\t\t * @returns A promise that resolves to an array of authentication sessions.\n\t\t */\n\t\tgetSessions(scopes?: readonly string[]): Thenable<readonly AuthenticationSession[]>;",
                    "name": "getSessions",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "scopes",
                        "type": {
                          "operator": 146,
                          "type": {
                            "core": "array",
                            "targs": [
                              {
                                "core": "string",
                                "isNullable": false,
                                "_": 15982,
                                "source": " string"
                              }
                            ],
                            "isNullable": false,
                            "_": 15982,
                            "source": " string[]"
                          },
                          "isNullable": false,
                          "_": 15982,
                          "source": " readonly string[]"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "Thenable",
                      "targs": [
                        {
                          "operator": 146,
                          "type": {
                            "core": "array",
                            "targs": [
                              {
                                "ref": "AuthenticationSession",
                                "targs": [],
                                "isNullable": false,
                                "_": 15982,
                                "source": " AuthenticationSession"
                              }
                            ],
                            "isNullable": false,
                            "_": 15982,
                            "source": " AuthenticationSession[]"
                          },
                          "isNullable": false,
                          "_": 15982,
                          "source": "readonly AuthenticationSession[]"
                        }
                      ],
                      "isNullable": false,
                      "_": 15982,
                      "source": " Thenable<readonly AuthenticationSession[]>"
                    }
                  },
                  {
                    "doc": "Prompts a user to login.\n\n If login is successful, the onDidChangeSessions event should be fired.\n\n If login fails, a rejected promise should be returned.\n\n If the provider has specified that it does not support multiple accounts,\n then this should never be called if there is already an existing session matching these\n scopes.\n @param scopes A list of scopes, permissions, that the new session should be created with.\n @returns A promise that resolves to an authentication session.",
                    "isMethod": true,
                    "_": 15997,
                    "source": "\n\n\t\t/**\n\t\t * Prompts a user to login.\n\t\t *\n\t\t * If login is successful, the onDidChangeSessions event should be fired.\n\t\t *\n\t\t * If login fails, a rejected promise should be returned.\n\t\t *\n\t\t * If the provider has specified that it does not support multiple accounts,\n\t\t * then this should never be called if there is already an existing session matching these\n\t\t * scopes.\n\t\t * @param scopes A list of scopes, permissions, that the new session should be created with.\n\t\t * @returns A promise that resolves to an authentication session.\n\t\t */\n\t\tcreateSession(scopes: readonly string[]): Thenable<AuthenticationSession>;",
                    "name": "createSession",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "scopes",
                        "type": {
                          "operator": 146,
                          "type": {
                            "core": "array",
                            "targs": [
                              {
                                "core": "string",
                                "isNullable": false,
                                "_": 15997,
                                "source": " string"
                              }
                            ],
                            "isNullable": false,
                            "_": 15997,
                            "source": " string[]"
                          },
                          "isNullable": false,
                          "_": 15997,
                          "source": " readonly string[]"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Thenable",
                      "targs": [
                        {
                          "ref": "AuthenticationSession",
                          "targs": [],
                          "isNullable": false,
                          "_": 15997,
                          "source": "AuthenticationSession"
                        }
                      ],
                      "isNullable": false,
                      "_": 15997,
                      "source": " Thenable<AuthenticationSession>"
                    }
                  },
                  {
                    "doc": "Removes the session corresponding to session id.\n\n If the removal is successful, the onDidChangeSessions event should be fired.\n\n If a session cannot be removed, the provider should reject with an error message.\n @param sessionId The id of the session to remove.",
                    "isMethod": true,
                    "_": 16007,
                    "source": "\n\n\t\t/**\n\t\t * Removes the session corresponding to session id.\n\t\t *\n\t\t * If the removal is successful, the onDidChangeSessions event should be fired.\n\t\t *\n\t\t * If a session cannot be removed, the provider should reject with an error message.\n\t\t * @param sessionId The id of the session to remove.\n\t\t */\n\t\tremoveSession(sessionId: string): Thenable<void>;",
                    "name": "removeSession",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "sessionId",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 16007,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Thenable",
                      "targs": [
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 16007,
                          "source": "void"
                        }
                      ],
                      "isNullable": false,
                      "_": 16007,
                      "source": " Thenable<void>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 16195,
                "name": "TestTag",
                "generics": [],
                "doc": "Tags can be associated with {@link TestItemTestItems} and\n{@link TestRunProfileTestRunProfiles}. A profile with a tag can only\nexecute tests that include that tag in their {@link TestItem.tags} array.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 16206,
                    "source": "\n\n\t\t/**\n\t\t * Creates a new TestTag instance.\n\t\t * @param id ID of the test tag.\n\t\t */\n\t\tconstructor(id: string);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "id",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 16206,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "ID of the test tag. `TestTag` instances with the same ID are considered\nto be identical.",
                    "isMethod": false,
                    "_": 16200,
                    "source": "\n\t\t/**\n\t\t * ID of the test tag. `TestTag` instances with the same ID are considered\n\t\t * to be identical.\n\t\t */\n\t\treadonly id: string;",
                    "name": "id",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 16200,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 16212,
                "name": "TestRunProfile",
                "generics": [],
                "doc": "A TestRunProfile describes one way to execute tests in a {@link TestController}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Label shown to the user in the UI.\n\n Note that the label has some significance if the user requests that\n tests be re-run in a certain way. For example, if tests were run\n normally and the user requests to re-run them in debug mode, the editor\n will attempt use a configuration with the same label of the `Debug`\n kind. If there is no such configuration, the default will be used.",
                    "isMethod": false,
                    "_": 16222,
                    "source": "\n\t\t/**\n\t\t * Label shown to the user in the UI.\n\t\t *\n\t\t * Note that the label has some significance if the user requests that\n\t\t * tests be re-run in a certain way. For example, if tests were run\n\t\t * normally and the user requests to re-run them in debug mode, the editor\n\t\t * will attempt use a configuration with the same label of the `Debug`\n\t\t * kind. If there is no such configuration, the default will be used.\n\t\t */\n\t\tlabel: string;",
                    "name": "label",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 16222,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Configures what kind of execution this profile controls. If there\nare no profiles for a kind, it will not be available in the UI.",
                    "isMethod": false,
                    "_": 16228,
                    "source": "\n\n\t\t/**\n\t\t * Configures what kind of execution this profile controls. If there\n\t\t * are no profiles for a kind, it will not be available in the UI.\n\t\t */\n\t\treadonly kind: TestRunProfileKind;",
                    "name": "kind",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "TestRunProfileKind",
                      "targs": [],
                      "isNullable": false,
                      "_": 16228,
                      "source": " TestRunProfileKind"
                    }
                  },
                  {
                    "doc": "Controls whether this profile is the default action that will\n be taken when its kind is actioned. For example, if the user clicks\n the generic \"run all\" button, then the default profile for\n {@link TestRunProfileKind.Run} will be executed, although the\n user can configure this.",
                    "isMethod": false,
                    "_": 16237,
                    "source": "\n\n\t\t/**\n\t\t * Controls whether this profile is the default action that will\n\t\t * be taken when its kind is actioned. For example, if the user clicks\n\t\t * the generic \"run all\" button, then the default profile for\n\t\t * {@link TestRunProfileKind.Run} will be executed, although the\n\t\t * user can configure this.\n\t\t */\n\t\tisDefault: boolean;",
                    "name": "isDefault",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 16237,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Whether this profile supports continuous running of requests. If so,\n then {@link TestRunRequest.continuous} may be set to `true`. Defaults\n to false.",
                    "isMethod": false,
                    "_": 16244,
                    "source": "\n\n\t\t/**\n\t\t * Whether this profile supports continuous running of requests. If so,\n\t\t * then {@link TestRunRequest.continuous} may be set to `true`. Defaults\n\t\t * to false.\n\t\t */\n\t\tsupportsContinuousRun: boolean;",
                    "name": "supportsContinuousRun",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 16244,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Associated tag for the profile. If this is set, only {@link TestItem}\n instances with the same tag will be eligible to execute in this profile.",
                    "isMethod": false,
                    "_": 16250,
                    "source": "\n\n\t\t/**\n\t\t * Associated tag for the profile. If this is set, only {@link TestItem}\n\t\t * instances with the same tag will be eligible to execute in this profile.\n\t\t */\n\t\ttag: TestTag | undefined;",
                    "name": "tag",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "TestTag",
                          "targs": [],
                          "isNullable": false,
                          "_": 16250,
                          "source": " TestTag"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 16250,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 16250,
                      "source": " TestTag | undefined"
                    }
                  },
                  {
                    "doc": "If this method is present, a configuration gear will be present in the\n UI, and this method will be invoked when it's clicked. When called,\n you can take other editor actions, such as showing a quick pick or\n opening a configuration file.",
                    "isMethod": false,
                    "_": 16258,
                    "source": "\n\n\t\t/**\n\t\t * If this method is present, a configuration gear will be present in the\n\t\t * UI, and this method will be invoked when it's clicked. When called,\n\t\t * you can take other editor actions, such as showing a quick pick or\n\t\t * opening a configuration file.\n\t\t */\n\t\tconfigureHandler: (() => void) | undefined;",
                    "name": "configureHandler",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ctor": false,
                          "generics": [],
                          "returns": {
                            "core": "void",
                            "isNullable": false,
                            "_": 16258,
                            "source": " void"
                          },
                          "params": [],
                          "isNullable": false,
                          "_": 16258,
                          "source": " (() => void)"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 16258,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 16258,
                      "source": " (() => void) | undefined"
                    }
                  },
                  {
                    "doc": "Handler called to start a test run. When invoked, the function should call\n {@link TestController.createTestRun} at least once, and all test runs\n associated with the request should be created before the function returns\n or the returned promise is resolved.\n\n If {@link supportsContinuousRun} is set, then {@link TestRunRequest.continuous}\n may be `true`. In this case, the profile should observe changes to\n source code and create new test runs by calling {@link TestController.createTestRun},\n until the cancellation is requested on the `token`.\n\n @param request Request information for the test run.\n @param cancellationToken Token that signals the used asked to abort the\n test run. If cancellation is requested on this token, all {@link TestRun}\n instances associated with the request will be\n automatically cancelled as well.",
                    "isMethod": false,
                    "_": 16277,
                    "source": "\n\n\t\t/**\n\t\t * Handler called to start a test run. When invoked, the function should call\n\t\t * {@link TestController.createTestRun} at least once, and all test runs\n\t\t * associated with the request should be created before the function returns\n\t\t * or the returned promise is resolved.\n\t\t *\n\t\t * If {@link supportsContinuousRun} is set, then {@link TestRunRequest.continuous}\n\t\t * may be `true`. In this case, the profile should observe changes to\n\t\t * source code and create new test runs by calling {@link TestController.createTestRun},\n\t\t * until the cancellation is requested on the `token`.\n\t\t *\n\t\t * @param request Request information for the test run.\n\t\t * @param cancellationToken Token that signals the used asked to abort the\n\t\t * test run. If cancellation is requested on this token, all {@link TestRun}\n\t\t * instances associated with the request will be\n\t\t * automatically cancelled as well.\n\t\t */\n\t\trunHandler: (request: TestRunRequest, token: CancellationToken) => Thenable<void> | void;",
                    "name": "runHandler",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ctor": false,
                      "generics": [],
                      "returns": {
                        "union": [
                          {
                            "ref": "Thenable",
                            "targs": [
                              {
                                "core": "void",
                                "isNullable": false,
                                "_": 16277,
                                "source": "void"
                              }
                            ],
                            "isNullable": false,
                            "_": 16277,
                            "source": " Thenable<void>"
                          },
                          {
                            "core": "void",
                            "isNullable": false,
                            "_": 16277,
                            "source": " void"
                          }
                        ],
                        "isNullable": false,
                        "_": 16277,
                        "source": " Thenable<void> | void"
                      },
                      "params": [
                        {
                          "name": "request",
                          "type": {
                            "ref": "TestRunRequest",
                            "targs": [],
                            "isNullable": false,
                            "_": 16277,
                            "source": " TestRunRequest"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "token",
                          "type": {
                            "ref": "CancellationToken",
                            "targs": [],
                            "isNullable": false,
                            "_": 16277,
                            "source": " CancellationToken"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "isNullable": false,
                      "_": 16277,
                      "source": " (request: TestRunRequest, token: CancellationToken) => Thenable<void> | void"
                    }
                  },
                  {
                    "doc": "Deletes the run profile.",
                    "isMethod": true,
                    "_": 16282,
                    "source": "\n\n\t\t/**\n\t\t * Deletes the run profile.\n\t\t */\n\t\tdispose(): void;",
                    "name": "dispose",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 16282,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 16291,
                "name": "TestController",
                "generics": [],
                "doc": "Entry point to discover and execute tests. It contains {@link TestController.items} which\nare used to populate the editor UI, and is associated with\n{@link TestController.createRunProfilerun profiles} to allow\nfor tests to be executed.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The id of the controller passed in {@link tests.createTestController}.\nThis must be globally unique.",
                    "isMethod": false,
                    "_": 16296,
                    "source": "\n\t\t/**\n\t\t * The id of the controller passed in {@link tests.createTestController}.\n\t\t * This must be globally unique.\n\t\t */\n\t\treadonly id: string;",
                    "name": "id",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 16296,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Human-readable label for the test controller.",
                    "isMethod": false,
                    "_": 16301,
                    "source": "\n\n\t\t/**\n\t\t * Human-readable label for the test controller.\n\t\t */\n\t\tlabel: string;",
                    "name": "label",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 16301,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "A collection of \"top-level\" {@link TestItem} instances, which can in\nturn have their own {@link TestItem.childrenchildren} to form the\n\"test tree.\"\n\nThe extension controls when to add tests. For example, extensions should\nadd tests for a file when {@link workspace.onDidOpenTextDocument}\nfires in order for decorations for tests within a file to be visible.\n\nHowever, the editor may sometimes explicitly request children using the\n{@link resolveHandler} See the documentation on that method for more details.",
                    "isMethod": false,
                    "_": 16315,
                    "source": "\n\n\t\t/**\n\t\t * A collection of \"top-level\" {@link TestItem} instances, which can in\n\t\t * turn have their own {@link TestItem.children children} to form the\n\t\t * \"test tree.\"\n\t\t *\n\t\t * The extension controls when to add tests. For example, extensions should\n\t\t * add tests for a file when {@link workspace.onDidOpenTextDocument}\n\t\t * fires in order for decorations for tests within a file to be visible.\n\t\t *\n\t\t * However, the editor may sometimes explicitly request children using the\n\t\t * {@link resolveHandler} See the documentation on that method for more details.\n\t\t */\n\t\treadonly items: TestItemCollection;",
                    "name": "items",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "TestItemCollection",
                      "targs": [],
                      "isNullable": false,
                      "_": 16315,
                      "source": " TestItemCollection"
                    }
                  },
                  {
                    "doc": "Creates a profile used for running tests. Extensions must create\n at least one profile in order for tests to be run.\n @param label A human-readable label for this profile.\n @param kind Configures what kind of execution this profile manages.\n @param runHandler Function called to start a test run.\n @param isDefault Whether this is the default action for its kind.\n @param tag Profile test tag.\n @param supportsContinuousRun Whether the profile supports continuous running.\n @returns An instance of a {@link TestRunProfile}, which is automatically\n associated with this controller.",
                    "isMethod": true,
                    "_": 16329,
                    "source": "\n\n\t\t/**\n\t\t * Creates a profile used for running tests. Extensions must create\n\t\t * at least one profile in order for tests to be run.\n\t\t * @param label A human-readable label for this profile.\n\t\t * @param kind Configures what kind of execution this profile manages.\n\t\t * @param runHandler Function called to start a test run.\n\t\t * @param isDefault Whether this is the default action for its kind.\n\t\t * @param tag Profile test tag.\n\t\t * @param supportsContinuousRun Whether the profile supports continuous running.\n\t\t * @returns An instance of a {@link TestRunProfile}, which is automatically\n\t\t * associated with this controller.\n\t\t */\n\t\tcreateRunProfile(label: string, kind: TestRunProfileKind, runHandler: (request: TestRunRequest, token: CancellationToken) => Thenable<void> | void, isDefault?: boolean, tag?: TestTag, supportsContinuousRun?: boolean): TestRunProfile;",
                    "name": "createRunProfile",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "label",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 16329,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "kind",
                        "type": {
                          "ref": "TestRunProfileKind",
                          "targs": [],
                          "isNullable": false,
                          "_": 16329,
                          "source": " TestRunProfileKind"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "runHandler",
                        "type": {
                          "ctor": false,
                          "generics": [],
                          "returns": {
                            "union": [
                              {
                                "ref": "Thenable",
                                "targs": [
                                  {
                                    "core": "void",
                                    "isNullable": false,
                                    "_": 16329,
                                    "source": "void"
                                  }
                                ],
                                "isNullable": false,
                                "_": 16329,
                                "source": " Thenable<void>"
                              },
                              {
                                "core": "void",
                                "isNullable": false,
                                "_": 16329,
                                "source": " void"
                              }
                            ],
                            "isNullable": false,
                            "_": 16329,
                            "source": " Thenable<void> | void"
                          },
                          "params": [
                            {
                              "name": "request",
                              "type": {
                                "ref": "TestRunRequest",
                                "targs": [],
                                "isNullable": false,
                                "_": 16329,
                                "source": " TestRunRequest"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "token",
                              "type": {
                                "ref": "CancellationToken",
                                "targs": [],
                                "isNullable": false,
                                "_": 16329,
                                "source": " CancellationToken"
                              },
                              "varargs": false,
                              "isNullable": false
                            }
                          ],
                          "isNullable": false,
                          "_": 16329,
                          "source": " (request: TestRunRequest, token: CancellationToken) => Thenable<void> | void"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "isDefault",
                        "type": {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 16329,
                          "source": " boolean"
                        },
                        "varargs": false,
                        "isNullable": true
                      },
                      {
                        "name": "tag",
                        "type": {
                          "ref": "TestTag",
                          "targs": [],
                          "isNullable": false,
                          "_": 16329,
                          "source": " TestTag"
                        },
                        "varargs": false,
                        "isNullable": true
                      },
                      {
                        "name": "supportsContinuousRun",
                        "type": {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 16329,
                          "source": " boolean"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "TestRunProfile",
                      "targs": [],
                      "isNullable": false,
                      "_": 16329,
                      "source": " TestRunProfile"
                    }
                  },
                  {
                    "doc": "A function provided by the extension that the editor may call to request\n children of a test item, if the {@link TestItem.canResolveChildren} is\n `true`. When called, the item should discover children and call\n {@link TestController.createTestItem} as children are discovered.\n\n Generally the extension manages the lifecycle of test items, but under\n certain conditions the editor may request the children of a specific\n item to be loaded. For example, if the user requests to re-run tests\n after reloading the editor, the editor may need to call this method\n to resolve the previously-run tests.\n\n The item in the explorer will automatically be marked as \"busy\" until\n the function returns or the returned thenable resolves.\n\n @param item An unresolved test item for which children are being\n requested, or `undefined` to resolve the controller's initial {@link TestController.items items}.",
                    "isMethod": false,
                    "_": 16349,
                    "source": "\n\n\t\t/**\n\t\t * A function provided by the extension that the editor may call to request\n\t\t * children of a test item, if the {@link TestItem.canResolveChildren} is\n\t\t * `true`. When called, the item should discover children and call\n\t\t * {@link TestController.createTestItem} as children are discovered.\n\t\t *\n\t\t * Generally the extension manages the lifecycle of test items, but under\n\t\t * certain conditions the editor may request the children of a specific\n\t\t * item to be loaded. For example, if the user requests to re-run tests\n\t\t * after reloading the editor, the editor may need to call this method\n\t\t * to resolve the previously-run tests.\n\t\t *\n\t\t * The item in the explorer will automatically be marked as \"busy\" until\n\t\t * the function returns or the returned thenable resolves.\n\t\t *\n\t\t * @param item An unresolved test item for which children are being\n\t\t * requested, or `undefined` to resolve the controller's initial {@link TestController.items items}.\n\t\t */\n\t\tresolveHandler?: (item: TestItem | undefined) => Thenable<void> | void;",
                    "name": "resolveHandler",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ctor": false,
                      "generics": [],
                      "returns": {
                        "union": [
                          {
                            "ref": "Thenable",
                            "targs": [
                              {
                                "core": "void",
                                "isNullable": false,
                                "_": 16349,
                                "source": "void"
                              }
                            ],
                            "isNullable": false,
                            "_": 16349,
                            "source": " Thenable<void>"
                          },
                          {
                            "core": "void",
                            "isNullable": false,
                            "_": 16349,
                            "source": " void"
                          }
                        ],
                        "isNullable": false,
                        "_": 16349,
                        "source": " Thenable<void> | void"
                      },
                      "params": [
                        {
                          "name": "item",
                          "type": {
                            "union": [
                              {
                                "ref": "TestItem",
                                "targs": [],
                                "isNullable": false,
                                "_": 16349,
                                "source": " TestItem"
                              },
                              {
                                "core": "undefined",
                                "isNullable": false,
                                "_": 16349,
                                "source": " undefined"
                              }
                            ],
                            "isNullable": false,
                            "_": 16349,
                            "source": " TestItem | undefined"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "isNullable": false,
                      "_": 16349,
                      "source": " (item: TestItem | undefined) => Thenable<void> | void"
                    }
                  },
                  {
                    "doc": "If this method is present, a refresh button will be present in the\n UI, and this method will be invoked when it's clicked. When called,\n the extension should scan the workspace for any new, changed, or\n removed tests.\n\n It's recommended that extensions try to update tests in realtime, using\n a {@link FileSystemWatcher} for example, and use this method as a fallback.\n\n @returns A thenable that resolves when tests have been refreshed.",
                    "isMethod": false,
                    "_": 16362,
                    "source": "\n\n\t\t/**\n\t\t * If this method is present, a refresh button will be present in the\n\t\t * UI, and this method will be invoked when it's clicked. When called,\n\t\t * the extension should scan the workspace for any new, changed, or\n\t\t * removed tests.\n\t\t *\n\t\t * It's recommended that extensions try to update tests in realtime, using\n\t\t * a {@link FileSystemWatcher} for example, and use this method as a fallback.\n\t\t *\n\t\t * @returns A thenable that resolves when tests have been refreshed.\n\t\t */\n\t\trefreshHandler: ((token: CancellationToken) => Thenable<void> | void) | undefined;",
                    "name": "refreshHandler",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ctor": false,
                          "generics": [],
                          "returns": {
                            "union": [
                              {
                                "ref": "Thenable",
                                "targs": [
                                  {
                                    "core": "void",
                                    "isNullable": false,
                                    "_": 16362,
                                    "source": "void"
                                  }
                                ],
                                "isNullable": false,
                                "_": 16362,
                                "source": " Thenable<void>"
                              },
                              {
                                "core": "void",
                                "isNullable": false,
                                "_": 16362,
                                "source": " void"
                              }
                            ],
                            "isNullable": false,
                            "_": 16362,
                            "source": " Thenable<void> | void"
                          },
                          "params": [
                            {
                              "name": "token",
                              "type": {
                                "ref": "CancellationToken",
                                "targs": [],
                                "isNullable": false,
                                "_": 16362,
                                "source": " CancellationToken"
                              },
                              "varargs": false,
                              "isNullable": false
                            }
                          ],
                          "isNullable": false,
                          "_": 16362,
                          "source": " ((token: CancellationToken) => Thenable<void> | void)"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 16362,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 16362,
                      "source": " ((token: CancellationToken) => Thenable<void> | void) | undefined"
                    }
                  },
                  {
                    "doc": "Creates a {@link TestRun}. This should be called by the\n {@link TestRunProfile} when a request is made to execute tests, and may\n also be called if a test run is detected externally. Once created, tests\n that are included in the request will be moved into the queued state.\n\n All runs created using the same `request` instance will be grouped\n together. This is useful if, for example, a single suite of tests is\n run on multiple platforms.\n\n @param request Test run request. Only tests inside the `include` may be\n modified, and tests in its `exclude` are ignored.\n @param name The human-readable name of the run. This can be used to\n disambiguate multiple sets of results in a test run. It is useful if\n tests are run across multiple platforms, for example.\n @param persist Whether the results created by the run should be\n persisted in the editor. This may be false if the results are coming from\n a file already saved externally, such as a coverage information file.\n @returns An instance of the {@link TestRun}. It will be considered \"running\"\n from the moment this method is invoked until {@link TestRun.end} is called.",
                    "isMethod": true,
                    "_": 16385,
                    "source": "\n\n\t\t/**\n\t\t * Creates a {@link TestRun}. This should be called by the\n\t\t * {@link TestRunProfile} when a request is made to execute tests, and may\n\t\t * also be called if a test run is detected externally. Once created, tests\n\t\t * that are included in the request will be moved into the queued state.\n\t\t *\n\t\t * All runs created using the same `request` instance will be grouped\n\t\t * together. This is useful if, for example, a single suite of tests is\n\t\t * run on multiple platforms.\n\t\t *\n\t\t * @param request Test run request. Only tests inside the `include` may be\n\t\t * modified, and tests in its `exclude` are ignored.\n\t\t * @param name The human-readable name of the run. This can be used to\n\t\t * disambiguate multiple sets of results in a test run. It is useful if\n\t\t * tests are run across multiple platforms, for example.\n\t\t * @param persist Whether the results created by the run should be\n\t\t * persisted in the editor. This may be false if the results are coming from\n\t\t * a file already saved externally, such as a coverage information file.\n\t\t * @returns An instance of the {@link TestRun}. It will be considered \"running\"\n\t\t * from the moment this method is invoked until {@link TestRun.end} is called.\n\t\t */\n\t\tcreateTestRun(request: TestRunRequest, name?: string, persist?: boolean): TestRun;",
                    "name": "createTestRun",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "request",
                        "type": {
                          "ref": "TestRunRequest",
                          "targs": [],
                          "isNullable": false,
                          "_": 16385,
                          "source": " TestRunRequest"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "name",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 16385,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": true
                      },
                      {
                        "name": "persist",
                        "type": {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 16385,
                          "source": " boolean"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "TestRun",
                      "targs": [],
                      "isNullable": false,
                      "_": 16385,
                      "source": " TestRun"
                    }
                  },
                  {
                    "doc": "Creates a new managed {@link TestItem} instance. It can be added into\n the {@link TestItem.children} of an existing item, or into the\n {@link TestController.items}.\n\n @param id Identifier for the TestItem. The test item's ID must be unique\n in the {@link TestItemCollection} it's added to.\n @param label Human-readable label of the test item.\n @param uri URI this TestItem is associated with. May be a file or directory.",
                    "isMethod": true,
                    "_": 16397,
                    "source": "\n\n\t\t/**\n\t\t * Creates a new managed {@link TestItem} instance. It can be added into\n\t\t * the {@link TestItem.children} of an existing item, or into the\n\t\t * {@link TestController.items}.\n\t\t *\n\t\t * @param id Identifier for the TestItem. The test item's ID must be unique\n\t\t * in the {@link TestItemCollection} it's added to.\n\t\t * @param label Human-readable label of the test item.\n\t\t * @param uri URI this TestItem is associated with. May be a file or directory.\n\t\t */\n\t\tcreateTestItem(id: string, label: string, uri?: Uri): TestItem;",
                    "name": "createTestItem",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "id",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 16397,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "label",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 16397,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "uri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 16397,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "TestItem",
                      "targs": [],
                      "isNullable": false,
                      "_": 16397,
                      "source": " TestItem"
                    }
                  },
                  {
                    "doc": "Marks an item's results as being outdated. This is commonly called when\n code or configuration changes and previous results should no longer\n be considered relevant. The same logic used to mark results as outdated\n may be used to drive {@link TestRunRequest.continuous continuous test runs}.\n\n If an item is passed to this method, test results for the item and all of\n its children will be marked as outdated. If no item is passed, then all\n test owned by the TestController will be marked as outdated.\n\n Any test runs started before the moment this method is called, including\n runs which may still be ongoing, will be marked as outdated and deprioritized\n in the editor's UI.\n\n @param item Item to mark as outdated. If undefined, all the controller's items are marked outdated.",
                    "isMethod": true,
                    "_": 16415,
                    "source": "\n\n\t\t/**\n\t\t * Marks an item's results as being outdated. This is commonly called when\n\t\t * code or configuration changes and previous results should no longer\n\t\t * be considered relevant. The same logic used to mark results as outdated\n\t\t * may be used to drive {@link TestRunRequest.continuous continuous test runs}.\n\t\t *\n\t\t * If an item is passed to this method, test results for the item and all of\n\t\t * its children will be marked as outdated. If no item is passed, then all\n\t\t * test owned by the TestController will be marked as outdated.\n\t\t *\n\t\t * Any test runs started before the moment this method is called, including\n\t\t * runs which may still be ongoing, will be marked as outdated and deprioritized\n\t\t * in the editor's UI.\n\t\t *\n\t\t * @param item Item to mark as outdated. If undefined, all the controller's items are marked outdated.\n\t\t */\n\t\tinvalidateTestResults(items?: TestItem | readonly TestItem[]): void;",
                    "name": "invalidateTestResults",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "items",
                        "type": {
                          "union": [
                            {
                              "ref": "TestItem",
                              "targs": [],
                              "isNullable": false,
                              "_": 16415,
                              "source": " TestItem"
                            },
                            {
                              "operator": 146,
                              "type": {
                                "core": "array",
                                "targs": [
                                  {
                                    "ref": "TestItem",
                                    "targs": [],
                                    "isNullable": false,
                                    "_": 16415,
                                    "source": " TestItem"
                                  }
                                ],
                                "isNullable": false,
                                "_": 16415,
                                "source": " TestItem[]"
                              },
                              "isNullable": false,
                              "_": 16415,
                              "source": " readonly TestItem[]"
                            }
                          ],
                          "isNullable": false,
                          "_": 16415,
                          "source": " TestItem | readonly TestItem[]"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 16415,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Unregisters the test controller, disposing of its associated tests\n and unpersisted results.",
                    "isMethod": true,
                    "_": 16421,
                    "source": "\n\n\t\t/**\n\t\t * Unregisters the test controller, disposing of its associated tests\n\t\t * and unpersisted results.\n\t\t */\n\t\tdispose(): void;",
                    "name": "dispose",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 16421,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 16434,
                "name": "TestRunRequest",
                "generics": [],
                "doc": "A TestRunRequest is a precursor to a {@link TestRun}, which in turn is\ncreated by passing a request to {@link TestController.createTestRun}. The\nTestRunRequest contains information about which tests should be run, which\nshould not be run, and how they are run (via the {@link TestRunRequest.profileprofile}).\n\nIn general, TestRunRequests are created by the editor and pass to\n{@link TestRunProfile.runHandler}, however you can also create test\nrequests and runs outside of the `runHandler`.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 16474,
                    "source": "\n\n\t\t/**\n\t\t * @param include Array of specific tests to run, or undefined to run all tests\n\t\t * @param exclude An array of tests to exclude from the run.\n\t\t * @param profile The run profile used for this request.\n\t\t * @param continuous Whether to run tests continuously as source changes.\n\t\t */\n\t\tconstructor(include?: readonly TestItem[], exclude?: readonly TestItem[], profile?: TestRunProfile, continuous?: boolean);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "include",
                        "type": {
                          "operator": 146,
                          "type": {
                            "core": "array",
                            "targs": [
                              {
                                "ref": "TestItem",
                                "targs": [],
                                "isNullable": false,
                                "_": 16474,
                                "source": " TestItem"
                              }
                            ],
                            "isNullable": false,
                            "_": 16474,
                            "source": " TestItem[]"
                          },
                          "isNullable": false,
                          "_": 16474,
                          "source": " readonly TestItem[]"
                        },
                        "varargs": false,
                        "isNullable": true
                      },
                      {
                        "name": "exclude",
                        "type": {
                          "operator": 146,
                          "type": {
                            "core": "array",
                            "targs": [
                              {
                                "ref": "TestItem",
                                "targs": [],
                                "isNullable": false,
                                "_": 16474,
                                "source": " TestItem"
                              }
                            ],
                            "isNullable": false,
                            "_": 16474,
                            "source": " TestItem[]"
                          },
                          "isNullable": false,
                          "_": 16474,
                          "source": " readonly TestItem[]"
                        },
                        "varargs": false,
                        "isNullable": true
                      },
                      {
                        "name": "profile",
                        "type": {
                          "ref": "TestRunProfile",
                          "targs": [],
                          "isNullable": false,
                          "_": 16474,
                          "source": " TestRunProfile"
                        },
                        "varargs": false,
                        "isNullable": true
                      },
                      {
                        "name": "continuous",
                        "type": {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 16474,
                          "source": " boolean"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "A filter for specific tests to run. If given, the extension should run\nall of the included tests and all their children, excluding any tests\nthat appear in {@link TestRunRequest.exclude}. If this property is\nundefined, then the extension should simply run all tests.\n\nThe process of running tests should resolve the children of any test\nitems who have not yet been resolved.",
                    "isMethod": false,
                    "_": 16444,
                    "source": "\n\t\t/**\n\t\t * A filter for specific tests to run. If given, the extension should run\n\t\t * all of the included tests and all their children, excluding any tests\n\t\t * that appear in {@link TestRunRequest.exclude}. If this property is\n\t\t * undefined, then the extension should simply run all tests.\n\t\t *\n\t\t * The process of running tests should resolve the children of any test\n\t\t * items who have not yet been resolved.\n\t\t */\n\t\treadonly include: readonly TestItem[] | undefined;",
                    "name": "include",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "operator": 146,
                          "type": {
                            "core": "array",
                            "targs": [
                              {
                                "ref": "TestItem",
                                "targs": [],
                                "isNullable": false,
                                "_": 16444,
                                "source": " TestItem"
                              }
                            ],
                            "isNullable": false,
                            "_": 16444,
                            "source": " TestItem[]"
                          },
                          "isNullable": false,
                          "_": 16444,
                          "source": " readonly TestItem[]"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 16444,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 16444,
                      "source": " readonly TestItem[] | undefined"
                    }
                  },
                  {
                    "doc": "An array of tests the user has marked as excluded from the test included\nin this run; exclusions should apply after inclusions.\n\nMay be omitted if no exclusions were requested. Test controllers should\nnot run excluded tests or any children of excluded tests.",
                    "isMethod": false,
                    "_": 16453,
                    "source": "\n\n\t\t/**\n\t\t * An array of tests the user has marked as excluded from the test included\n\t\t * in this run; exclusions should apply after inclusions.\n\t\t *\n\t\t * May be omitted if no exclusions were requested. Test controllers should\n\t\t * not run excluded tests or any children of excluded tests.\n\t\t */\n\t\treadonly exclude: readonly TestItem[] | undefined;",
                    "name": "exclude",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "operator": 146,
                          "type": {
                            "core": "array",
                            "targs": [
                              {
                                "ref": "TestItem",
                                "targs": [],
                                "isNullable": false,
                                "_": 16453,
                                "source": " TestItem"
                              }
                            ],
                            "isNullable": false,
                            "_": 16453,
                            "source": " TestItem[]"
                          },
                          "isNullable": false,
                          "_": 16453,
                          "source": " readonly TestItem[]"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 16453,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 16453,
                      "source": " readonly TestItem[] | undefined"
                    }
                  },
                  {
                    "doc": "The profile used for this request. This will always be defined\nfor requests issued from the editor UI, though extensions may\nprogrammatically create requests not associated with any profile.",
                    "isMethod": false,
                    "_": 16460,
                    "source": "\n\n\t\t/**\n\t\t * The profile used for this request. This will always be defined\n\t\t * for requests issued from the editor UI, though extensions may\n\t\t * programmatically create requests not associated with any profile.\n\t\t */\n\t\treadonly profile: TestRunProfile | undefined;",
                    "name": "profile",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "TestRunProfile",
                          "targs": [],
                          "isNullable": false,
                          "_": 16460,
                          "source": " TestRunProfile"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 16460,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 16460,
                      "source": " TestRunProfile | undefined"
                    }
                  },
                  {
                    "doc": "Whether the profile should run continuously as source code changes. Only\nrelevant for profiles that set {@link TestRunProfile.supportsContinuousRun}.",
                    "isMethod": false,
                    "_": 16466,
                    "source": "\n\n\t\t/**\n\t\t * Whether the profile should run continuously as source code changes. Only\n\t\t * relevant for profiles that set {@link TestRunProfile.supportsContinuousRun}.\n\t\t */\n\t\treadonly continuous?: boolean;",
                    "name": "continuous",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 16466,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 16481,
                "name": "TestRun",
                "generics": [],
                "doc": "A TestRun represents an in-progress or completed test run and\nprovides methods to report the state of individual tests in the run.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The human-readable name of the run. This can be used to\ndisambiguate multiple sets of results in a test run. It is useful if\ntests are run across multiple platforms, for example.",
                    "isMethod": false,
                    "_": 16487,
                    "source": "\n\t\t/**\n\t\t * The human-readable name of the run. This can be used to\n\t\t * disambiguate multiple sets of results in a test run. It is useful if\n\t\t * tests are run across multiple platforms, for example.\n\t\t */\n\t\treadonly name: string | undefined;",
                    "name": "name",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 16487,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 16487,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 16487,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "A cancellation token which will be triggered when the test run is\ncanceled from the UI.",
                    "isMethod": false,
                    "_": 16493,
                    "source": "\n\n\t\t/**\n\t\t * A cancellation token which will be triggered when the test run is\n\t\t * canceled from the UI.\n\t\t */\n\t\treadonly token: CancellationToken;",
                    "name": "token",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "CancellationToken",
                      "targs": [],
                      "isNullable": false,
                      "_": 16493,
                      "source": " CancellationToken"
                    }
                  },
                  {
                    "doc": "Whether the test run will be persisted across reloads by the editor.",
                    "isMethod": false,
                    "_": 16498,
                    "source": "\n\n\t\t/**\n\t\t * Whether the test run will be persisted across reloads by the editor.\n\t\t */\n\t\treadonly isPersisted: boolean;",
                    "name": "isPersisted",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 16498,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Indicates a test is queued for later execution.\n @param test Test item to update.",
                    "isMethod": true,
                    "_": 16504,
                    "source": "\n\n\t\t/**\n\t\t * Indicates a test is queued for later execution.\n\t\t * @param test Test item to update.\n\t\t */\n\t\tenqueued(test: TestItem): void;",
                    "name": "enqueued",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "test",
                        "type": {
                          "ref": "TestItem",
                          "targs": [],
                          "isNullable": false,
                          "_": 16504,
                          "source": " TestItem"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 16504,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Indicates a test has started running.\n @param test Test item to update.",
                    "isMethod": true,
                    "_": 16510,
                    "source": "\n\n\t\t/**\n\t\t * Indicates a test has started running.\n\t\t * @param test Test item to update.\n\t\t */\n\t\tstarted(test: TestItem): void;",
                    "name": "started",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "test",
                        "type": {
                          "ref": "TestItem",
                          "targs": [],
                          "isNullable": false,
                          "_": 16510,
                          "source": " TestItem"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 16510,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Indicates a test has been skipped.\n @param test Test item to update.",
                    "isMethod": true,
                    "_": 16516,
                    "source": "\n\n\t\t/**\n\t\t * Indicates a test has been skipped.\n\t\t * @param test Test item to update.\n\t\t */\n\t\tskipped(test: TestItem): void;",
                    "name": "skipped",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "test",
                        "type": {
                          "ref": "TestItem",
                          "targs": [],
                          "isNullable": false,
                          "_": 16516,
                          "source": " TestItem"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 16516,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Indicates a test has failed. You should pass one or more\n {@link TestMessage TestMessages} to describe the failure.\n @param test Test item to update.\n @param message Messages associated with the test failure.\n @param duration How long the test took to execute, in milliseconds.",
                    "isMethod": true,
                    "_": 16525,
                    "source": "\n\n\t\t/**\n\t\t * Indicates a test has failed. You should pass one or more\n\t\t * {@link TestMessage TestMessages} to describe the failure.\n\t\t * @param test Test item to update.\n\t\t * @param message Messages associated with the test failure.\n\t\t * @param duration How long the test took to execute, in milliseconds.\n\t\t */\n\t\tfailed(test: TestItem, message: TestMessage | readonly TestMessage[], duration?: number): void;",
                    "name": "failed",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "test",
                        "type": {
                          "ref": "TestItem",
                          "targs": [],
                          "isNullable": false,
                          "_": 16525,
                          "source": " TestItem"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "message",
                        "type": {
                          "union": [
                            {
                              "ref": "TestMessage",
                              "targs": [],
                              "isNullable": false,
                              "_": 16525,
                              "source": " TestMessage"
                            },
                            {
                              "operator": 146,
                              "type": {
                                "core": "array",
                                "targs": [
                                  {
                                    "ref": "TestMessage",
                                    "targs": [],
                                    "isNullable": false,
                                    "_": 16525,
                                    "source": " TestMessage"
                                  }
                                ],
                                "isNullable": false,
                                "_": 16525,
                                "source": " TestMessage[]"
                              },
                              "isNullable": false,
                              "_": 16525,
                              "source": " readonly TestMessage[]"
                            }
                          ],
                          "isNullable": false,
                          "_": 16525,
                          "source": " TestMessage | readonly TestMessage[]"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "duration",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 16525,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 16525,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Indicates a test has errored. You should pass one or more\n {@link TestMessage TestMessages} to describe the failure. This differs\n from the \"failed\" state in that it indicates a test that couldn't be\n executed at all, from a compilation error for example.\n @param test Test item to update.\n @param message Messages associated with the test failure.\n @param duration How long the test took to execute, in milliseconds.",
                    "isMethod": true,
                    "_": 16536,
                    "source": "\n\n\t\t/**\n\t\t * Indicates a test has errored. You should pass one or more\n\t\t * {@link TestMessage TestMessages} to describe the failure. This differs\n\t\t * from the \"failed\" state in that it indicates a test that couldn't be\n\t\t * executed at all, from a compilation error for example.\n\t\t * @param test Test item to update.\n\t\t * @param message Messages associated with the test failure.\n\t\t * @param duration How long the test took to execute, in milliseconds.\n\t\t */\n\t\terrored(test: TestItem, message: TestMessage | readonly TestMessage[], duration?: number): void;",
                    "name": "errored",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "test",
                        "type": {
                          "ref": "TestItem",
                          "targs": [],
                          "isNullable": false,
                          "_": 16536,
                          "source": " TestItem"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "message",
                        "type": {
                          "union": [
                            {
                              "ref": "TestMessage",
                              "targs": [],
                              "isNullable": false,
                              "_": 16536,
                              "source": " TestMessage"
                            },
                            {
                              "operator": 146,
                              "type": {
                                "core": "array",
                                "targs": [
                                  {
                                    "ref": "TestMessage",
                                    "targs": [],
                                    "isNullable": false,
                                    "_": 16536,
                                    "source": " TestMessage"
                                  }
                                ],
                                "isNullable": false,
                                "_": 16536,
                                "source": " TestMessage[]"
                              },
                              "isNullable": false,
                              "_": 16536,
                              "source": " readonly TestMessage[]"
                            }
                          ],
                          "isNullable": false,
                          "_": 16536,
                          "source": " TestMessage | readonly TestMessage[]"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "duration",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 16536,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 16536,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Indicates a test has passed.\n @param test Test item to update.\n @param duration How long the test took to execute, in milliseconds.",
                    "isMethod": true,
                    "_": 16543,
                    "source": "\n\n\t\t/**\n\t\t * Indicates a test has passed.\n\t\t * @param test Test item to update.\n\t\t * @param duration How long the test took to execute, in milliseconds.\n\t\t */\n\t\tpassed(test: TestItem, duration?: number): void;",
                    "name": "passed",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "test",
                        "type": {
                          "ref": "TestItem",
                          "targs": [],
                          "isNullable": false,
                          "_": 16543,
                          "source": " TestItem"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "duration",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 16543,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 16543,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Appends raw output from the test runner. On the user's request, the\n output will be displayed in a terminal. ANSI escape sequences,\n such as colors and text styles, are supported. New lines must be given\n as CRLF (`\\r\\n`) rather than LF (`\\n`).\n\n @param output Output text to append.\n @param location Indicate that the output was logged at the given\n location.\n @param test Test item to associate the output with.",
                    "isMethod": true,
                    "_": 16556,
                    "source": "\n\n\t\t/**\n\t\t * Appends raw output from the test runner. On the user's request, the\n\t\t * output will be displayed in a terminal. ANSI escape sequences,\n\t\t * such as colors and text styles, are supported. New lines must be given\n\t\t * as CRLF (`\\r\\n`) rather than LF (`\\n`).\n\t\t *\n\t\t * @param output Output text to append.\n\t\t * @param location Indicate that the output was logged at the given\n\t\t * location.\n\t\t * @param test Test item to associate the output with.\n\t\t */\n\t\tappendOutput(output: string, location?: Location, test?: TestItem): void;",
                    "name": "appendOutput",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "output",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 16556,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "location",
                        "type": {
                          "ref": "Location",
                          "targs": [],
                          "isNullable": false,
                          "_": 16556,
                          "source": " Location"
                        },
                        "varargs": false,
                        "isNullable": true
                      },
                      {
                        "name": "test",
                        "type": {
                          "ref": "TestItem",
                          "targs": [],
                          "isNullable": false,
                          "_": 16556,
                          "source": " TestItem"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 16556,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Signals the end of the test run. Any tests included in the run whose\n states have not been updated will have their state reset.",
                    "isMethod": true,
                    "_": 16562,
                    "source": "\n\n\t\t/**\n\t\t * Signals the end of the test run. Any tests included in the run whose\n\t\t * states have not been updated will have their state reset.\n\t\t */\n\t\tend(): void;",
                    "name": "end",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 16562,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 16569,
                "name": "TestItemCollection",
                "generics": [],
                "doc": "Collection of test items, found in {@link TestItem.children} and\n{@link TestController.items}.",
                "heritage": [
                  [
                    {
                      "ref": "Iterable",
                      "targs": [
                        {
                          "tuple": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 16569,
                              "source": "id: string"
                            },
                            {
                              "ref": "TestItem",
                              "targs": [],
                              "isNullable": false,
                              "_": 16569,
                              "source": " testItem: TestItem"
                            }
                          ],
                          "isNullable": false,
                          "_": 16569,
                          "source": "[id: string, testItem: TestItem]"
                        }
                      ],
                      "isNullable": false,
                      "_": 16569,
                      "source": " Iterable<[id: string, testItem: TestItem]>"
                    }
                  ]
                ],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Gets the number of items in the collection.",
                    "isMethod": false,
                    "_": 16573,
                    "source": "\n\t\t/**\n\t\t * Gets the number of items in the collection.\n\t\t */\n\t\treadonly size: number;",
                    "name": "size",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 16573,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "Replaces the items stored by the collection.\n @param items Items to store.",
                    "isMethod": true,
                    "_": 16579,
                    "source": "\n\n\t\t/**\n\t\t * Replaces the items stored by the collection.\n\t\t * @param items Items to store.\n\t\t */\n\t\treplace(items: readonly TestItem[]): void;",
                    "name": "replace",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "items",
                        "type": {
                          "operator": 146,
                          "type": {
                            "core": "array",
                            "targs": [
                              {
                                "ref": "TestItem",
                                "targs": [],
                                "isNullable": false,
                                "_": 16579,
                                "source": " TestItem"
                              }
                            ],
                            "isNullable": false,
                            "_": 16579,
                            "source": " TestItem[]"
                          },
                          "isNullable": false,
                          "_": 16579,
                          "source": " readonly TestItem[]"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 16579,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Iterate over each entry in this collection.\n\n @param callback Function to execute for each entry.\n @param thisArg The `this` context used when invoking the handler function.",
                    "isMethod": true,
                    "_": 16587,
                    "source": "\n\n\t\t/**\n\t\t * Iterate over each entry in this collection.\n\t\t *\n\t\t * @param callback Function to execute for each entry.\n\t\t * @param thisArg The `this` context used when invoking the handler function.\n\t\t */\n\t\tforEach(callback: (item: TestItem, collection: TestItemCollection) => unknown, thisArg?: any): void;",
                    "name": "forEach",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "callback",
                        "type": {
                          "ctor": false,
                          "generics": [],
                          "returns": {
                            "core": "unknown",
                            "isNullable": false,
                            "_": 16587,
                            "source": " unknown"
                          },
                          "params": [
                            {
                              "name": "item",
                              "type": {
                                "ref": "TestItem",
                                "targs": [],
                                "isNullable": false,
                                "_": 16587,
                                "source": " TestItem"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "collection",
                              "type": {
                                "ref": "TestItemCollection",
                                "targs": [],
                                "isNullable": false,
                                "_": 16587,
                                "source": " TestItemCollection"
                              },
                              "varargs": false,
                              "isNullable": false
                            }
                          ],
                          "isNullable": false,
                          "_": 16587,
                          "source": " (item: TestItem, collection: TestItemCollection) => unknown"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "thisArg",
                        "type": {
                          "core": "any",
                          "isNullable": false,
                          "_": 16587,
                          "source": " any"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 16587,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Adds the test item to the children. If an item with the same ID already\n exists, it'll be replaced.\n @param item Item to add.",
                    "isMethod": true,
                    "_": 16594,
                    "source": "\n\n\t\t/**\n\t\t * Adds the test item to the children. If an item with the same ID already\n\t\t * exists, it'll be replaced.\n\t\t * @param item Item to add.\n\t\t */\n\t\tadd(item: TestItem): void;",
                    "name": "add",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "item",
                        "type": {
                          "ref": "TestItem",
                          "targs": [],
                          "isNullable": false,
                          "_": 16594,
                          "source": " TestItem"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 16594,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Removes a single test item from the collection.\n @param itemId Item ID to delete.",
                    "isMethod": true,
                    "_": 16600,
                    "source": "\n\n\t\t/**\n\t\t * Removes a single test item from the collection.\n\t\t * @param itemId Item ID to delete.\n\t\t */\n\t\tdelete(itemId: string): void;",
                    "name": "delete",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "itemId",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 16600,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 16600,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Efficiently gets a test item by ID, if it exists, in the children.\n @param itemId Item ID to get.\n @returns The found item or undefined if it does not exist.",
                    "isMethod": true,
                    "_": 16607,
                    "source": "\n\n\t\t/**\n\t\t * Efficiently gets a test item by ID, if it exists, in the children.\n\t\t * @param itemId Item ID to get.\n\t\t * @returns The found item or undefined if it does not exist.\n\t\t */\n\t\tget(itemId: string): TestItem | undefined;",
                    "name": "get",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "itemId",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 16607,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "union": [
                        {
                          "ref": "TestItem",
                          "targs": [],
                          "isNullable": false,
                          "_": 16607,
                          "source": " TestItem"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 16607,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 16607,
                      "source": " TestItem | undefined"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 16616,
                "name": "TestItem",
                "generics": [],
                "doc": "An item shown in the \"test explorer\" view.\n\nA `TestItem` can represent either a test suite or a test itself, since\nthey both have similar capabilities.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Identifier for the `TestItem`. This is used to correlate\ntest results and tests in the document with those in the workspace\n(test explorer). This cannot change for the lifetime of the `TestItem`,\nand must be unique among its parent's direct children.",
                    "isMethod": false,
                    "_": 16623,
                    "source": "\n\t\t/**\n\t\t * Identifier for the `TestItem`. This is used to correlate\n\t\t * test results and tests in the document with those in the workspace\n\t\t * (test explorer). This cannot change for the lifetime of the `TestItem`,\n\t\t * and must be unique among its parent's direct children.\n\t\t */\n\t\treadonly id: string;",
                    "name": "id",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 16623,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "URI this `TestItem` is associated with. May be a file or directory.",
                    "isMethod": false,
                    "_": 16628,
                    "source": "\n\n\t\t/**\n\t\t * URI this `TestItem` is associated with. May be a file or directory.\n\t\t */\n\t\treadonly uri: Uri | undefined;",
                    "name": "uri",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 16628,
                          "source": " Uri"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 16628,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 16628,
                      "source": " Uri | undefined"
                    }
                  },
                  {
                    "doc": "The children of this test item. For a test suite, this may contain the\nindividual test cases or nested suites.",
                    "isMethod": false,
                    "_": 16634,
                    "source": "\n\n\t\t/**\n\t\t * The children of this test item. For a test suite, this may contain the\n\t\t * individual test cases or nested suites.\n\t\t */\n\t\treadonly children: TestItemCollection;",
                    "name": "children",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "TestItemCollection",
                      "targs": [],
                      "isNullable": false,
                      "_": 16634,
                      "source": " TestItemCollection"
                    }
                  },
                  {
                    "doc": "The parent of this item. It's set automatically, and is undefined\ntop-level items in the {@link TestController.items} and for items that\naren't yet included in another item's {@link TestItem.childrenchildren}.",
                    "isMethod": false,
                    "_": 16641,
                    "source": "\n\n\t\t/**\n\t\t * The parent of this item. It's set automatically, and is undefined\n\t\t * top-level items in the {@link TestController.items} and for items that\n\t\t * aren't yet included in another item's {@link TestItem.children children}.\n\t\t */\n\t\treadonly parent: TestItem | undefined;",
                    "name": "parent",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "TestItem",
                          "targs": [],
                          "isNullable": false,
                          "_": 16641,
                          "source": " TestItem"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 16641,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 16641,
                      "source": " TestItem | undefined"
                    }
                  },
                  {
                    "doc": "Tags associated with this test item. May be used in combination with\n {@link TestRunProfile.tag tags}, or simply as an organizational feature.",
                    "isMethod": false,
                    "_": 16647,
                    "source": "\n\n\t\t/**\n\t\t * Tags associated with this test item. May be used in combination with\n\t\t * {@link TestRunProfile.tag tags}, or simply as an organizational feature.\n\t\t */\n\t\ttags: readonly TestTag[];",
                    "name": "tags",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "TestTag",
                            "targs": [],
                            "isNullable": false,
                            "_": 16647,
                            "source": " TestTag"
                          }
                        ],
                        "isNullable": false,
                        "_": 16647,
                        "source": " TestTag[]"
                      },
                      "isNullable": false,
                      "_": 16647,
                      "source": " readonly TestTag[]"
                    }
                  },
                  {
                    "doc": "Indicates whether this test item may have children discovered by resolving.\n\n If true, this item is shown as expandable in the Test Explorer view and\n expanding the item will cause {@link TestController.resolveHandler}\n to be invoked with the item.\n\n Default to `false`.",
                    "isMethod": false,
                    "_": 16658,
                    "source": "\n\n\t\t/**\n\t\t * Indicates whether this test item may have children discovered by resolving.\n\t\t *\n\t\t * If true, this item is shown as expandable in the Test Explorer view and\n\t\t * expanding the item will cause {@link TestController.resolveHandler}\n\t\t * to be invoked with the item.\n\t\t *\n\t\t * Default to `false`.\n\t\t */\n\t\tcanResolveChildren: boolean;",
                    "name": "canResolveChildren",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 16658,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Controls whether the item is shown as \"busy\" in the Test Explorer view.\n This is useful for showing status while discovering children.\n\n Defaults to `false`.",
                    "isMethod": false,
                    "_": 16666,
                    "source": "\n\n\t\t/**\n\t\t * Controls whether the item is shown as \"busy\" in the Test Explorer view.\n\t\t * This is useful for showing status while discovering children.\n\t\t *\n\t\t * Defaults to `false`.\n\t\t */\n\t\tbusy: boolean;",
                    "name": "busy",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 16666,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Display name describing the test case.",
                    "isMethod": false,
                    "_": 16671,
                    "source": "\n\n\t\t/**\n\t\t * Display name describing the test case.\n\t\t */\n\t\tlabel: string;",
                    "name": "label",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 16671,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Optional description that appears next to the label.",
                    "isMethod": false,
                    "_": 16676,
                    "source": "\n\n\t\t/**\n\t\t * Optional description that appears next to the label.\n\t\t */\n\t\tdescription?: string;",
                    "name": "description",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 16676,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "A string that should be used when comparing this item\n with other items. When `falsy` the {@link TestItem.label label}\n is used.",
                    "isMethod": false,
                    "_": 16683,
                    "source": "\n\n\t\t/**\n\t\t * A string that should be used when comparing this item\n\t\t * with other items. When `falsy` the {@link TestItem.label label}\n\t\t * is used.\n\t\t */\n\t\tsortText?: string | undefined;",
                    "name": "sortText",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 16683,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 16683,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 16683,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "Location of the test item in its {@link TestItem.uri uri}.\n\n This is only meaningful if the `uri` points to a file.",
                    "isMethod": false,
                    "_": 16690,
                    "source": "\n\n\t\t/**\n\t\t * Location of the test item in its {@link TestItem.uri uri}.\n\t\t *\n\t\t * This is only meaningful if the `uri` points to a file.\n\t\t */\n\t\trange: Range | undefined;",
                    "name": "range",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 16690,
                          "source": " Range"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 16690,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 16690,
                      "source": " Range | undefined"
                    }
                  },
                  {
                    "doc": "Optional error encountered while loading the test.\n\n Note that this is not a test result and should only be used to represent errors in\n test discovery, such as syntax errors.",
                    "isMethod": false,
                    "_": 16698,
                    "source": "\n\n\t\t/**\n\t\t * Optional error encountered while loading the test.\n\t\t *\n\t\t * Note that this is not a test result and should only be used to represent errors in\n\t\t * test discovery, such as syntax errors.\n\t\t */\n\t\terror: string | MarkdownString | undefined;",
                    "name": "error",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 16698,
                          "source": " string"
                        },
                        {
                          "ref": "MarkdownString",
                          "targs": [],
                          "isNullable": false,
                          "_": 16698,
                          "source": " MarkdownString"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 16698,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 16698,
                      "source": " string | MarkdownString | undefined"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 16705,
                "name": "TestMessage",
                "generics": [],
                "doc": "Message associated with the test state. Can be linked to a specific\nsource range -- useful for assertion failures, for example.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 16738,
                    "source": "\n\n\t\t/**\n\t\t * Creates a new TestMessage instance.\n\t\t * @param message The message to show to the user.\n\t\t */\n\t\tconstructor(message: string | MarkdownString);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "message",
                        "type": {
                          "union": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 16738,
                              "source": " string"
                            },
                            {
                              "ref": "MarkdownString",
                              "targs": [],
                              "isNullable": false,
                              "_": 16738,
                              "source": " MarkdownString"
                            }
                          ],
                          "isNullable": false,
                          "_": 16738,
                          "source": " string | MarkdownString"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "Human-readable message text to display.",
                    "isMethod": false,
                    "_": 16709,
                    "source": "\n\t\t/**\n\t\t * Human-readable message text to display.\n\t\t */\n\t\tmessage: string | MarkdownString;",
                    "name": "message",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 16709,
                          "source": " string"
                        },
                        {
                          "ref": "MarkdownString",
                          "targs": [],
                          "isNullable": false,
                          "_": 16709,
                          "source": " MarkdownString"
                        }
                      ],
                      "isNullable": false,
                      "_": 16709,
                      "source": " string | MarkdownString"
                    }
                  },
                  {
                    "doc": "Expected test output. If given with {@link TestMessage.actualOutput actualOutput }, a diff view will be shown.",
                    "isMethod": false,
                    "_": 16714,
                    "source": "\n\n\t\t/**\n\t\t * Expected test output. If given with {@link TestMessage.actualOutput actualOutput }, a diff view will be shown.\n\t\t */\n\t\texpectedOutput?: string;",
                    "name": "expectedOutput",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 16714,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Actual test output. If given with {@link TestMessage.expectedOutput expectedOutput }, a diff view will be shown.",
                    "isMethod": false,
                    "_": 16719,
                    "source": "\n\n\t\t/**\n\t\t * Actual test output. If given with {@link TestMessage.expectedOutput expectedOutput }, a diff view will be shown.\n\t\t */\n\t\tactualOutput?: string;",
                    "name": "actualOutput",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 16719,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Associated file location.",
                    "isMethod": false,
                    "_": 16724,
                    "source": "\n\n\t\t/**\n\t\t * Associated file location.\n\t\t */\n\t\tlocation?: Location;",
                    "name": "location",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Location",
                      "targs": [],
                      "isNullable": false,
                      "_": 16724,
                      "source": " Location"
                    }
                  },
                  {
                    "doc": "Creates a new TestMessage that will present as a diff in the editor.",
                    "isMethod": true,
                    "_": 16732,
                    "source": "\n\n\t\t/**\n\t\t * Creates a new TestMessage that will present as a diff in the editor.\n\t\t * @param message Message to display to the user.\n\t\t * @param expected Expected output.\n\t\t * @param actual Actual output.\n\t\t */\n\t\tstatic diff(message: string | MarkdownString, expected: string, actual: string): TestMessage;",
                    "name": "diff",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "message",
                        "type": {
                          "union": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 16732,
                              "source": " string"
                            },
                            {
                              "ref": "MarkdownString",
                              "targs": [],
                              "isNullable": false,
                              "_": 16732,
                              "source": " MarkdownString"
                            }
                          ],
                          "isNullable": false,
                          "_": 16732,
                          "source": " string | MarkdownString"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "expected",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 16732,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "actual",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 16732,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "TestMessage",
                      "targs": [],
                      "isNullable": false,
                      "_": 16732,
                      "source": " TestMessage"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 16744,
                "name": "TabInputText",
                "generics": [],
                "doc": "The tab represents a single text based resource.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 16753,
                    "source": "\n\t\t/**\n\t\t * Constructs a text tab input with the given URI.\n\t\t * @param uri The URI of the tab.\n\t\t */\n\t\tconstructor(uri: Uri);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "uri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 16753,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The uri represented by the tab.",
                    "isMethod": false,
                    "_": 16748,
                    "source": "\n\t\t/**\n\t\t * The uri represented by the tab.\n\t\t */\n\t\treadonly uri: Uri;",
                    "name": "uri",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 16748,
                      "source": " Uri"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 16760,
                "name": "TabInputTextDiff",
                "generics": [],
                "doc": "The tab represents two text based resources\nbeing rendered as a diff.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 16774,
                    "source": "\n\t\t/**\n\t\t * Constructs a new text diff tab input with the given URIs.\n\t\t * @param original The uri of the original text resource.\n\t\t * @param modified The uri of the modified text resource.\n\t\t */\n\t\tconstructor(original: Uri, modified: Uri);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "original",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 16774,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "modified",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 16774,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The uri of the original text resource.",
                    "isMethod": false,
                    "_": 16764,
                    "source": "\n\t\t/**\n\t\t * The uri of the original text resource.\n\t\t */\n\t\treadonly original: Uri;",
                    "name": "original",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 16764,
                      "source": " Uri"
                    }
                  },
                  {
                    "doc": "The uri of the modified text resource.",
                    "isMethod": false,
                    "_": 16768,
                    "source": "\n\t\t/**\n\t\t * The uri of the modified text resource.\n\t\t */\n\t\treadonly modified: Uri;",
                    "name": "modified",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 16768,
                      "source": " Uri"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 16780,
                "name": "TabInputCustom",
                "generics": [],
                "doc": "The tab represents a custom editor.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 16794,
                    "source": "\n\t\t/**\n\t\t * Constructs a custom editor tab input.\n\t\t * @param uri The uri of the tab.\n\t\t * @param viewType The viewtype of the custom editor.\n\t\t */\n\t\tconstructor(uri: Uri, viewType: string);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "uri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 16794,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "viewType",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 16794,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The uri that the tab is representing.",
                    "isMethod": false,
                    "_": 16784,
                    "source": "\n\t\t/**\n\t\t * The uri that the tab is representing.\n\t\t */\n\t\treadonly uri: Uri;",
                    "name": "uri",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 16784,
                      "source": " Uri"
                    }
                  },
                  {
                    "doc": "The type of custom editor.",
                    "isMethod": false,
                    "_": 16788,
                    "source": "\n\t\t/**\n\t\t * The type of custom editor.\n\t\t */\n\t\treadonly viewType: string;",
                    "name": "viewType",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 16788,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 16800,
                "name": "TabInputWebview",
                "generics": [],
                "doc": "The tab represents a webview.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 16809,
                    "source": "\n\t\t/**\n\t\t * Constructs a webview tab input with the given view type.\n\t\t * @param viewType The type of webview. Maps to {@linkcode WebviewPanel.viewType WebviewPanel's viewType}\n\t\t */\n\t\tconstructor(viewType: string);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "viewType",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 16809,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The type of webview. Maps to {@linkcode WebviewPanel.viewTypeWebviewPanel's viewType}",
                    "isMethod": false,
                    "_": 16804,
                    "source": "\n\t\t/**\n\t\t * The type of webview. Maps to {@linkcode WebviewPanel.viewType WebviewPanel's viewType}\n\t\t */\n\t\treadonly viewType: string;",
                    "name": "viewType",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 16804,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 16815,
                "name": "TabInputNotebook",
                "generics": [],
                "doc": "The tab represents a notebook.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 16829,
                    "source": "\n\t\t/**\n\t\t * Constructs a new tab input for a notebook.\n\t\t * @param uri The uri of the notebook.\n\t\t * @param notebookType The type of notebook. Maps to {@linkcode NotebookDocument.notebookType NotebookDocuments's notebookType}\n\t\t */\n\t\tconstructor(uri: Uri, notebookType: string);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "uri",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 16829,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "notebookType",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 16829,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The uri that the tab is representing.",
                    "isMethod": false,
                    "_": 16819,
                    "source": "\n\t\t/**\n\t\t * The uri that the tab is representing.\n\t\t */\n\t\treadonly uri: Uri;",
                    "name": "uri",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 16819,
                      "source": " Uri"
                    }
                  },
                  {
                    "doc": "The type of notebook. Maps to {@linkcode NotebookDocument.notebookTypeNotebookDocuments's notebookType}",
                    "isMethod": false,
                    "_": 16823,
                    "source": "\n\t\t/**\n\t\t * The type of notebook. Maps to {@linkcode NotebookDocument.notebookType NotebookDocuments's notebookType}\n\t\t */\n\t\treadonly notebookType: string;",
                    "name": "notebookType",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 16823,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 16835,
                "name": "TabInputNotebookDiff",
                "generics": [],
                "doc": "The tabs represents two notebooks in a diff configuration.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 16854,
                    "source": "\n\t\t/**\n\t\t * Constructs a notebook diff tab input.\n\t\t * @param original The uri of the original unmodified notebook.\n\t\t * @param modified The uri of the modified notebook.\n\t\t * @param notebookType The type of notebook. Maps to {@linkcode NotebookDocument.notebookType NotebookDocuments's notebookType}\n\t\t */\n\t\tconstructor(original: Uri, modified: Uri, notebookType: string);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "original",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 16854,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "modified",
                        "type": {
                          "ref": "Uri",
                          "targs": [],
                          "isNullable": false,
                          "_": 16854,
                          "source": " Uri"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "notebookType",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 16854,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The uri of the original notebook.",
                    "isMethod": false,
                    "_": 16839,
                    "source": "\n\t\t/**\n\t\t * The uri of the original notebook.\n\t\t */\n\t\treadonly original: Uri;",
                    "name": "original",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 16839,
                      "source": " Uri"
                    }
                  },
                  {
                    "doc": "The uri of the modified notebook.",
                    "isMethod": false,
                    "_": 16843,
                    "source": "\n\t\t/**\n\t\t * The uri of the modified notebook.\n\t\t */\n\t\treadonly modified: Uri;",
                    "name": "modified",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 16843,
                      "source": " Uri"
                    }
                  },
                  {
                    "doc": "The type of notebook. Maps to {@linkcode NotebookDocument.notebookTypeNotebookDocuments's notebookType}",
                    "isMethod": false,
                    "_": 16847,
                    "source": "\n\t\t/**\n\t\t * The type of notebook. Maps to {@linkcode NotebookDocument.notebookType NotebookDocuments's notebookType}\n\t\t */\n\t\treadonly notebookType: string;",
                    "name": "notebookType",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 16847,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 16860,
                "name": "TabInputTerminal",
                "generics": [],
                "doc": "The tab represents a terminal in the editor area.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 16864,
                    "source": "\n\t\t/**\n\t\t * Constructs a terminal tab input.\n\t\t */\n\t\tconstructor();",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": []
                  }
                ],
                "members": [],
                "calls": [],
                "isClass": true
              },
              {
                "_": 16872,
                "name": "Tab",
                "generics": [],
                "doc": "Represents a tab within a {@link TabGroupgroup of tabs}.\nTabs are merely the graphical representation within the editor area.\nA backing editor is not a guarantee.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The text displayed on the tab.",
                    "isMethod": false,
                    "_": 16877,
                    "source": "\n\n\t\t/**\n\t\t * The text displayed on the tab.\n\t\t */\n\t\treadonly label: string;",
                    "name": "label",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 16877,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The group which the tab belongs to.",
                    "isMethod": false,
                    "_": 16882,
                    "source": "\n\n\t\t/**\n\t\t * The group which the tab belongs to.\n\t\t */\n\t\treadonly group: TabGroup;",
                    "name": "group",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "TabGroup",
                      "targs": [],
                      "isNullable": false,
                      "_": 16882,
                      "source": " TabGroup"
                    }
                  },
                  {
                    "doc": "Defines the structure of the tab i.e. text, notebook, custom, etc.\nResource and other useful properties are defined on the tab kind.",
                    "isMethod": false,
                    "_": 16888,
                    "source": "\n\n\t\t/**\n\t\t * Defines the structure of the tab i.e. text, notebook, custom, etc.\n\t\t * Resource and other useful properties are defined on the tab kind.\n\t\t */\n\t\treadonly input: TabInputText | TabInputTextDiff | TabInputCustom | TabInputWebview | TabInputNotebook | TabInputNotebookDiff | TabInputTerminal | unknown;",
                    "name": "input",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "TabInputText",
                          "targs": [],
                          "isNullable": false,
                          "_": 16888,
                          "source": " TabInputText"
                        },
                        {
                          "ref": "TabInputTextDiff",
                          "targs": [],
                          "isNullable": false,
                          "_": 16888,
                          "source": " TabInputTextDiff"
                        },
                        {
                          "ref": "TabInputCustom",
                          "targs": [],
                          "isNullable": false,
                          "_": 16888,
                          "source": " TabInputCustom"
                        },
                        {
                          "ref": "TabInputWebview",
                          "targs": [],
                          "isNullable": false,
                          "_": 16888,
                          "source": " TabInputWebview"
                        },
                        {
                          "ref": "TabInputNotebook",
                          "targs": [],
                          "isNullable": false,
                          "_": 16888,
                          "source": " TabInputNotebook"
                        },
                        {
                          "ref": "TabInputNotebookDiff",
                          "targs": [],
                          "isNullable": false,
                          "_": 16888,
                          "source": " TabInputNotebookDiff"
                        },
                        {
                          "ref": "TabInputTerminal",
                          "targs": [],
                          "isNullable": false,
                          "_": 16888,
                          "source": " TabInputTerminal"
                        },
                        {
                          "core": "unknown",
                          "isNullable": false,
                          "_": 16888,
                          "source": " unknown"
                        }
                      ],
                      "isNullable": false,
                      "_": 16888,
                      "source": " TabInputText | TabInputTextDiff | TabInputCustom | TabInputWebview | TabInputNotebook | TabInputNotebookDiff | TabInputTerminal | unknown"
                    }
                  },
                  {
                    "doc": "Whether or not the tab is currently active.\nThis is dictated by being the selected tab in the group.",
                    "isMethod": false,
                    "_": 16894,
                    "source": "\n\n\t\t/**\n\t\t * Whether or not the tab is currently active.\n\t\t * This is dictated by being the selected tab in the group.\n\t\t */\n\t\treadonly isActive: boolean;",
                    "name": "isActive",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 16894,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Whether or not the dirty indicator is present on the tab.",
                    "isMethod": false,
                    "_": 16899,
                    "source": "\n\n\t\t/**\n\t\t * Whether or not the dirty indicator is present on the tab.\n\t\t */\n\t\treadonly isDirty: boolean;",
                    "name": "isDirty",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 16899,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Whether or not the tab is pinned (pin icon is present).",
                    "isMethod": false,
                    "_": 16904,
                    "source": "\n\n\t\t/**\n\t\t * Whether or not the tab is pinned (pin icon is present).\n\t\t */\n\t\treadonly isPinned: boolean;",
                    "name": "isPinned",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 16904,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Whether or not the tab is in preview mode.",
                    "isMethod": false,
                    "_": 16909,
                    "source": "\n\n\t\t/**\n\t\t * Whether or not the tab is in preview mode.\n\t\t */\n\t\treadonly isPreview: boolean;",
                    "name": "isPreview",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 16909,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 16915,
                "name": "TabChangeEvent",
                "generics": [],
                "doc": "An event describing change to tabs.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The tabs that have been opened.",
                    "isMethod": false,
                    "_": 16919,
                    "source": "\n\t\t/**\n\t\t * The tabs that have been opened.\n\t\t */\n\t\treadonly opened: readonly Tab[];",
                    "name": "opened",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "Tab",
                            "targs": [],
                            "isNullable": false,
                            "_": 16919,
                            "source": " Tab"
                          }
                        ],
                        "isNullable": false,
                        "_": 16919,
                        "source": " Tab[]"
                      },
                      "isNullable": false,
                      "_": 16919,
                      "source": " readonly Tab[]"
                    }
                  },
                  {
                    "doc": "The tabs that have been closed.",
                    "isMethod": false,
                    "_": 16923,
                    "source": "\n\t\t/**\n\t\t * The tabs that have been closed.\n\t\t */\n\t\treadonly closed: readonly Tab[];",
                    "name": "closed",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "Tab",
                            "targs": [],
                            "isNullable": false,
                            "_": 16923,
                            "source": " Tab"
                          }
                        ],
                        "isNullable": false,
                        "_": 16923,
                        "source": " Tab[]"
                      },
                      "isNullable": false,
                      "_": 16923,
                      "source": " readonly Tab[]"
                    }
                  },
                  {
                    "doc": "Tabs that have changed, e.g have changed\ntheir {@link Tab.isActiveactive} state.",
                    "isMethod": false,
                    "_": 16928,
                    "source": "\n\t\t/**\n\t\t * Tabs that have changed, e.g have changed\n\t\t * their {@link Tab.isActive active} state.\n\t\t */\n\t\treadonly changed: readonly Tab[];",
                    "name": "changed",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "Tab",
                            "targs": [],
                            "isNullable": false,
                            "_": 16928,
                            "source": " Tab"
                          }
                        ],
                        "isNullable": false,
                        "_": 16928,
                        "source": " Tab[]"
                      },
                      "isNullable": false,
                      "_": 16928,
                      "source": " readonly Tab[]"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 16934,
                "name": "TabGroupChangeEvent",
                "generics": [],
                "doc": "An event describing changes to tab groups.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Tab groups that have been opened.",
                    "isMethod": false,
                    "_": 16938,
                    "source": "\n\t\t/**\n\t\t * Tab groups that have been opened.\n\t\t */\n\t\treadonly opened: readonly TabGroup[];",
                    "name": "opened",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "TabGroup",
                            "targs": [],
                            "isNullable": false,
                            "_": 16938,
                            "source": " TabGroup"
                          }
                        ],
                        "isNullable": false,
                        "_": 16938,
                        "source": " TabGroup[]"
                      },
                      "isNullable": false,
                      "_": 16938,
                      "source": " readonly TabGroup[]"
                    }
                  },
                  {
                    "doc": "Tab groups that have been closed.",
                    "isMethod": false,
                    "_": 16942,
                    "source": "\n\t\t/**\n\t\t * Tab groups that have been closed.\n\t\t */\n\t\treadonly closed: readonly TabGroup[];",
                    "name": "closed",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "TabGroup",
                            "targs": [],
                            "isNullable": false,
                            "_": 16942,
                            "source": " TabGroup"
                          }
                        ],
                        "isNullable": false,
                        "_": 16942,
                        "source": " TabGroup[]"
                      },
                      "isNullable": false,
                      "_": 16942,
                      "source": " readonly TabGroup[]"
                    }
                  },
                  {
                    "doc": "Tab groups that have changed, e.g have changed\ntheir {@link TabGroup.isActiveactive} state.",
                    "isMethod": false,
                    "_": 16947,
                    "source": "\n\t\t/**\n\t\t * Tab groups that have changed, e.g have changed\n\t\t * their {@link TabGroup.isActive active} state.\n\t\t */\n\t\treadonly changed: readonly TabGroup[];",
                    "name": "changed",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "TabGroup",
                            "targs": [],
                            "isNullable": false,
                            "_": 16947,
                            "source": " TabGroup"
                          }
                        ],
                        "isNullable": false,
                        "_": 16947,
                        "source": " TabGroup[]"
                      },
                      "isNullable": false,
                      "_": 16947,
                      "source": " readonly TabGroup[]"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 16953,
                "name": "TabGroup",
                "generics": [],
                "doc": "Represents a group of tabs. A tab group itself consists of multiple tabs.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Whether or not the group is currently active.\n\n*Note* that only one tab group is active at a time, but that multiple tab\ngroups can have an {@link activeTabactive tab}.",
                    "isMethod": false,
                    "_": 16962,
                    "source": "\n\t\t/**\n\t\t * Whether or not the group is currently active.\n\t\t *\n\t\t * *Note* that only one tab group is active at a time, but that multiple tab\n\t\t * groups can have an {@link activeTab active tab}.\n\t\t *\n\t\t * @see {@link Tab.isActive}\n\t\t */\n\t\treadonly isActive: boolean;",
                    "name": "isActive",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 16962,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "The view column of the group.",
                    "isMethod": false,
                    "_": 16967,
                    "source": "\n\n\t\t/**\n\t\t * The view column of the group.\n\t\t */\n\t\treadonly viewColumn: ViewColumn;",
                    "name": "viewColumn",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "ViewColumn",
                      "targs": [],
                      "isNullable": false,
                      "_": 16967,
                      "source": " ViewColumn"
                    }
                  },
                  {
                    "doc": "The active {@link Tabtab} in the group. This is the tab whose contents are currently\nbeing rendered.\n\n*Note* that there can be one active tab per group but there can only be one {@link TabGroups.activeTabGroupactive group}.",
                    "isMethod": false,
                    "_": 16975,
                    "source": "\n\n\t\t/**\n\t\t * The active {@link Tab tab} in the group. This is the tab whose contents are currently\n\t\t * being rendered.\n\t\t *\n\t\t * *Note* that there can be one active tab per group but there can only be one {@link TabGroups.activeTabGroup active group}.\n\t\t */\n\t\treadonly activeTab: Tab | undefined;",
                    "name": "activeTab",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "Tab",
                          "targs": [],
                          "isNullable": false,
                          "_": 16975,
                          "source": " Tab"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 16975,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 16975,
                      "source": " Tab | undefined"
                    }
                  },
                  {
                    "doc": "The list of tabs contained within the group.\nThis can be empty if the group has no tabs open.",
                    "isMethod": false,
                    "_": 16981,
                    "source": "\n\n\t\t/**\n\t\t * The list of tabs contained within the group.\n\t\t * This can be empty if the group has no tabs open.\n\t\t */\n\t\treadonly tabs: readonly Tab[];",
                    "name": "tabs",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "Tab",
                            "targs": [],
                            "isNullable": false,
                            "_": 16981,
                            "source": " Tab"
                          }
                        ],
                        "isNullable": false,
                        "_": 16981,
                        "source": " Tab[]"
                      },
                      "isNullable": false,
                      "_": 16981,
                      "source": " readonly Tab[]"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 16987,
                "name": "TabGroups",
                "generics": [],
                "doc": "Represents the main editor area which consists of multiple groups which contain tabs.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "All the groups within the group container.",
                    "isMethod": false,
                    "_": 16991,
                    "source": "\n\t\t/**\n\t\t * All the groups within the group container.\n\t\t */\n\t\treadonly all: readonly TabGroup[];",
                    "name": "all",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "operator": 146,
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "TabGroup",
                            "targs": [],
                            "isNullable": false,
                            "_": 16991,
                            "source": " TabGroup"
                          }
                        ],
                        "isNullable": false,
                        "_": 16991,
                        "source": " TabGroup[]"
                      },
                      "isNullable": false,
                      "_": 16991,
                      "source": " readonly TabGroup[]"
                    }
                  },
                  {
                    "doc": "The currently active group.",
                    "isMethod": false,
                    "_": 16996,
                    "source": "\n\n\t\t/**\n\t\t * The currently active group.\n\t\t */\n\t\treadonly activeTabGroup: TabGroup;",
                    "name": "activeTabGroup",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "TabGroup",
                      "targs": [],
                      "isNullable": false,
                      "_": 16996,
                      "source": " TabGroup"
                    }
                  },
                  {
                    "doc": "An {@link Eventevent} which fires when {@link TabGrouptab groups} have changed.",
                    "isMethod": false,
                    "_": 17001,
                    "source": "\n\n\t\t/**\n\t\t * An {@link Event event} which fires when {@link TabGroup tab groups} have changed.\n\t\t */\n\t\treadonly onDidChangeTabGroups: Event<TabGroupChangeEvent>;",
                    "name": "onDidChangeTabGroups",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "ref": "TabGroupChangeEvent",
                          "targs": [],
                          "isNullable": false,
                          "_": 17001,
                          "source": "TabGroupChangeEvent"
                        }
                      ],
                      "isNullable": false,
                      "_": 17001,
                      "source": " Event<TabGroupChangeEvent>"
                    }
                  },
                  {
                    "doc": "An {@link Eventevent} which fires when {@link Tabtabs} have changed.",
                    "isMethod": false,
                    "_": 17006,
                    "source": "\n\n\t\t/**\n\t\t * An {@link Event event} which fires when {@link Tab tabs} have changed.\n\t\t */\n\t\treadonly onDidChangeTabs: Event<TabChangeEvent>;",
                    "name": "onDidChangeTabs",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "ref": "TabChangeEvent",
                          "targs": [],
                          "isNullable": false,
                          "_": 17006,
                          "source": "TabChangeEvent"
                        }
                      ],
                      "isNullable": false,
                      "_": 17006,
                      "source": " Event<TabChangeEvent>"
                    }
                  },
                  {
                    "doc": "Closes the tab. This makes the tab object invalid and the tab\n should no longer be used for further actions.\n Note: In the case of a dirty tab, a confirmation dialog will be shown which may be cancelled. If cancelled the tab is still valid\n\n @param tab The tab to close.\n @param preserveFocus When `true` focus will remain in its current position. If `false` it will jump to the next tab.\n @returns A promise that resolves to `true` when all tabs have been closed.",
                    "isMethod": true,
                    "_": 17017,
                    "source": "\n\n\t\t/**\n\t\t * Closes the tab. This makes the tab object invalid and the tab\n\t\t * should no longer be used for further actions.\n\t\t * Note: In the case of a dirty tab, a confirmation dialog will be shown which may be cancelled. If cancelled the tab is still valid\n\t\t *\n\t\t * @param tab The tab to close.\n\t\t * @param preserveFocus When `true` focus will remain in its current position. If `false` it will jump to the next tab.\n\t\t * @returns A promise that resolves to `true` when all tabs have been closed.\n\t\t */\n\t\tclose(tab: Tab | readonly Tab[], preserveFocus?: boolean): Thenable<boolean>;",
                    "name": "close",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "tab",
                        "type": {
                          "union": [
                            {
                              "ref": "Tab",
                              "targs": [],
                              "isNullable": false,
                              "_": 17017,
                              "source": " Tab"
                            },
                            {
                              "operator": 146,
                              "type": {
                                "core": "array",
                                "targs": [
                                  {
                                    "ref": "Tab",
                                    "targs": [],
                                    "isNullable": false,
                                    "_": 17017,
                                    "source": " Tab"
                                  }
                                ],
                                "isNullable": false,
                                "_": 17017,
                                "source": " Tab[]"
                              },
                              "isNullable": false,
                              "_": 17017,
                              "source": " readonly Tab[]"
                            }
                          ],
                          "isNullable": false,
                          "_": 17017,
                          "source": " Tab | readonly Tab[]"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "preserveFocus",
                        "type": {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 17017,
                          "source": " boolean"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "Thenable",
                      "targs": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 17017,
                          "source": "boolean"
                        }
                      ],
                      "isNullable": false,
                      "_": 17017,
                      "source": " Thenable<boolean>"
                    }
                  },
                  {
                    "doc": "Closes the tab group. This makes the tab group object invalid and the tab group\n should no longer be used for further actions.\n @param tabGroup The tab group to close.\n @param preserveFocus When `true` focus will remain in its current position.\n @returns A promise that resolves to `true` when all tab groups have been closed.",
                    "isMethod": true,
                    "_": 17026,
                    "source": "\n\n\t\t/**\n\t\t * Closes the tab group. This makes the tab group object invalid and the tab group\n\t\t * should no longer be used for further actions.\n\t\t * @param tabGroup The tab group to close.\n\t\t * @param preserveFocus When `true` focus will remain in its current position.\n\t\t * @returns A promise that resolves to `true` when all tab groups have been closed.\n\t\t */\n\t\tclose(tabGroup: TabGroup | readonly TabGroup[], preserveFocus?: boolean): Thenable<boolean>;",
                    "name": "close",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "tabGroup",
                        "type": {
                          "union": [
                            {
                              "ref": "TabGroup",
                              "targs": [],
                              "isNullable": false,
                              "_": 17026,
                              "source": " TabGroup"
                            },
                            {
                              "operator": 146,
                              "type": {
                                "core": "array",
                                "targs": [
                                  {
                                    "ref": "TabGroup",
                                    "targs": [],
                                    "isNullable": false,
                                    "_": 17026,
                                    "source": " TabGroup"
                                  }
                                ],
                                "isNullable": false,
                                "_": 17026,
                                "source": " TabGroup[]"
                              },
                              "isNullable": false,
                              "_": 17026,
                              "source": " readonly TabGroup[]"
                            }
                          ],
                          "isNullable": false,
                          "_": 17026,
                          "source": " TabGroup | readonly TabGroup[]"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "preserveFocus",
                        "type": {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 17026,
                          "source": " boolean"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "Thenable",
                      "targs": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 17026,
                          "source": "boolean"
                        }
                      ],
                      "isNullable": false,
                      "_": 17026,
                      "source": " Thenable<boolean>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 17033,
                "name": "TelemetryTrustedValue",
                "generics": [
                  {
                    "name": "T",
                    "default": {
                      "core": "any",
                      "isNullable": false,
                      "_": 17033,
                      "source": " any"
                    },
                    "_": 17033,
                    "source": "T = any"
                  }
                ],
                "doc": "A special value wrapper denoting a value that is safe to not clean.\nThis is to be used when you can guarantee no identifiable information is contained in the value and the cleaning is improperly redacting it.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 17036,
                    "source": "\n\n\t\tconstructor(value: T);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "value",
                        "type": {
                          "ref": "T",
                          "targs": [],
                          "isNullable": false,
                          "_": 17036,
                          "source": " T"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 17034,
                    "source": "\n\t\treadonly value: T;",
                    "name": "value",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "T",
                      "targs": [],
                      "isNullable": false,
                      "_": 17034,
                      "source": " T"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 17052,
                "name": "TelemetryLogger",
                "generics": [],
                "doc": "A telemetry logger which can be used by extensions to log usage and error telementry.\n\nA logger wraps around an {@link TelemetrySendersender} but it guarantees that\n- user settings to disable or tweak telemetry are respected, and that\n- potential sensitive data is removed\n\nIt also enables an \"echo UI\" that prints whatever data is send and it allows the editor\nto forward unhandled errors to the respective extensions.\n\nTo get an instance of a `TelemetryLogger`, use\n{@link env.createTelemetryLogger`createTelemetryLogger`}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "An {@link Event} which fires when the enablement state of usage or error telemetry changes.",
                    "isMethod": false,
                    "_": 17057,
                    "source": "\n\n\t\t/**\n\t\t * An {@link Event} which fires when the enablement state of usage or error telemetry changes.\n\t\t */\n\t\treadonly onDidChangeEnableStates: Event<TelemetryLogger>;",
                    "name": "onDidChangeEnableStates",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [
                        {
                          "ref": "TelemetryLogger",
                          "targs": [],
                          "isNullable": false,
                          "_": 17057,
                          "source": "TelemetryLogger"
                        }
                      ],
                      "isNullable": false,
                      "_": 17057,
                      "source": " Event<TelemetryLogger>"
                    }
                  },
                  {
                    "doc": "Whether or not usage telemetry is enabled for this logger.",
                    "isMethod": false,
                    "_": 17062,
                    "source": "\n\n\t\t/**\n\t\t * Whether or not usage telemetry is enabled for this logger.\n\t\t */\n\t\treadonly isUsageEnabled: boolean;",
                    "name": "isUsageEnabled",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 17062,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Whether or not error telemetry is enabled for this logger.",
                    "isMethod": false,
                    "_": 17067,
                    "source": "\n\n\t\t/**\n\t\t * Whether or not error telemetry is enabled for this logger.\n\t\t */\n\t\treadonly isErrorsEnabled: boolean;",
                    "name": "isErrorsEnabled",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 17067,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Log a usage event.\n\n After completing cleaning, telemetry setting checks, and data mix-in calls `TelemetrySender.sendEventData` to log the event.\n Automatically supports echoing to extension telemetry output channel.\n @param eventName The event name to log\n @param data The data to log",
                    "isMethod": true,
                    "_": 17077,
                    "source": "\n\n\t\t/**\n\t\t * Log a usage event.\n\t\t *\n\t\t * After completing cleaning, telemetry setting checks, and data mix-in calls `TelemetrySender.sendEventData` to log the event.\n\t\t * Automatically supports echoing to extension telemetry output channel.\n\t\t * @param eventName The event name to log\n\t\t * @param data The data to log\n\t\t */\n\t\tlogUsage(eventName: string, data?: Record<string, any | TelemetryTrustedValue>): void;",
                    "name": "logUsage",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "eventName",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 17077,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "data",
                        "type": {
                          "ref": "Record",
                          "targs": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 17077,
                              "source": "string"
                            },
                            {
                              "union": [
                                {
                                  "core": "any",
                                  "isNullable": false,
                                  "_": 17077,
                                  "source": " any"
                                },
                                {
                                  "ref": "TelemetryTrustedValue",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 17077,
                                  "source": " TelemetryTrustedValue"
                                }
                              ],
                              "isNullable": false,
                              "_": 17077,
                              "source": " any | TelemetryTrustedValue"
                            }
                          ],
                          "isNullable": false,
                          "_": 17077,
                          "source": " Record<string, any | TelemetryTrustedValue>"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 17077,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Log an error event.\n\n After completing cleaning, telemetry setting checks, and data mix-in calls `TelemetrySender.sendEventData` to log the event. Differs from `logUsage` in that it will log the event if the telemetry setting is Error+.\n Automatically supports echoing to extension telemetry output channel.\n @param eventName The event name to log\n @param data The data to log",
                    "isMethod": true,
                    "_": 17087,
                    "source": "\n\n\t\t/**\n\t\t * Log an error event.\n\t\t *\n\t\t * After completing cleaning, telemetry setting checks, and data mix-in calls `TelemetrySender.sendEventData` to log the event. Differs from `logUsage` in that it will log the event if the telemetry setting is Error+.\n\t\t * Automatically supports echoing to extension telemetry output channel.\n\t\t * @param eventName The event name to log\n\t\t * @param data The data to log\n\t\t */\n\t\tlogError(eventName: string, data?: Record<string, any | TelemetryTrustedValue>): void;",
                    "name": "logError",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "eventName",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 17087,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "data",
                        "type": {
                          "ref": "Record",
                          "targs": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 17087,
                              "source": "string"
                            },
                            {
                              "union": [
                                {
                                  "core": "any",
                                  "isNullable": false,
                                  "_": 17087,
                                  "source": " any"
                                },
                                {
                                  "ref": "TelemetryTrustedValue",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 17087,
                                  "source": " TelemetryTrustedValue"
                                }
                              ],
                              "isNullable": false,
                              "_": 17087,
                              "source": " any | TelemetryTrustedValue"
                            }
                          ],
                          "isNullable": false,
                          "_": 17087,
                          "source": " Record<string, any | TelemetryTrustedValue>"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 17087,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Log an error event.\n\n Calls `TelemetrySender.sendErrorData`. Does cleaning, telemetry checks, and data mix-in.\n Automatically supports echoing to extension telemetry output channel.\n Will also automatically log any exceptions thrown within the extension host process.\n @param error The error object which contains the stack trace cleaned of PII\n @param data Additional data to log alongside the stack trace",
                    "isMethod": true,
                    "_": 17098,
                    "source": "\n\n\t\t/**\n\t\t * Log an error event.\n\t\t *\n\t\t * Calls `TelemetrySender.sendErrorData`. Does cleaning, telemetry checks, and data mix-in.\n\t\t * Automatically supports echoing to extension telemetry output channel.\n\t\t * Will also automatically log any exceptions thrown within the extension host process.\n\t\t * @param error The error object which contains the stack trace cleaned of PII\n\t\t * @param data Additional data to log alongside the stack trace\n\t\t */\n\t\tlogError(error: Error, data?: Record<string, any | TelemetryTrustedValue>): void;",
                    "name": "logError",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "error",
                        "type": {
                          "ref": "Error",
                          "targs": [],
                          "isNullable": false,
                          "_": 17098,
                          "source": " Error"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "data",
                        "type": {
                          "ref": "Record",
                          "targs": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 17098,
                              "source": "string"
                            },
                            {
                              "union": [
                                {
                                  "core": "any",
                                  "isNullable": false,
                                  "_": 17098,
                                  "source": " any"
                                },
                                {
                                  "ref": "TelemetryTrustedValue",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 17098,
                                  "source": " TelemetryTrustedValue"
                                }
                              ],
                              "isNullable": false,
                              "_": 17098,
                              "source": " any | TelemetryTrustedValue"
                            }
                          ],
                          "isNullable": false,
                          "_": 17098,
                          "source": " Record<string, any | TelemetryTrustedValue>"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 17098,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Dispose this object and free resources.",
                    "isMethod": true,
                    "_": 17103,
                    "source": "\n\n\t\t/**\n\t\t * Dispose this object and free resources.\n\t\t */\n\t\tdispose(): void;",
                    "name": "dispose",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 17103,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 17121,
                "name": "TelemetrySender",
                "generics": [],
                "doc": "The telemetry sender is the contract between a telemetry logger and some telemetry service. **Note** that extensions must NOT\ncall the methods of their sender directly as the logger provides extra guards and cleaning.\n\n```js\nconst sender: vscode.TelemetrySender = {...};\nconst logger = vscode.env.createTelemetryLogger(sender);\n\n// GOOD - uses the logger\nlogger.logUsage('myEvent', { myData: 'myValue' });\n\n// BAD - uses the sender directly: no data cleansing, ignores user settings, no echoing to the telemetry output channel etc\nsender.logEvent('myEvent', { myData: 'myValue' });\n```",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Function to send event data without a stacktrace. Used within a {@link TelemetryLogger}\n\n @param eventName The name of the event which you are logging\n @param data A serializable key value pair that is being logged",
                    "isMethod": true,
                    "_": 17128,
                    "source": "\n\t\t/**\n\t\t * Function to send event data without a stacktrace. Used within a {@link TelemetryLogger}\n\t\t *\n\t\t * @param eventName The name of the event which you are logging\n\t\t * @param data A serializable key value pair that is being logged\n\t\t */\n\t\tsendEventData(eventName: string, data?: Record<string, any>): void;",
                    "name": "sendEventData",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "eventName",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 17128,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "data",
                        "type": {
                          "ref": "Record",
                          "targs": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 17128,
                              "source": "string"
                            },
                            {
                              "core": "any",
                              "isNullable": false,
                              "_": 17128,
                              "source": " any"
                            }
                          ],
                          "isNullable": false,
                          "_": 17128,
                          "source": " Record<string, any>"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 17128,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Function to send an error. Used within a {@link TelemetryLogger}\n\n @param error The error being logged\n @param data Any additional data to be collected with the exception",
                    "isMethod": true,
                    "_": 17136,
                    "source": "\n\n\t\t/**\n\t\t * Function to send an error. Used within a {@link TelemetryLogger}\n\t\t *\n\t\t * @param error The error being logged\n\t\t * @param data Any additional data to be collected with the exception\n\t\t */\n\t\tsendErrorData(error: Error, data?: Record<string, any>): void;",
                    "name": "sendErrorData",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "error",
                        "type": {
                          "ref": "Error",
                          "targs": [],
                          "isNullable": false,
                          "_": 17136,
                          "source": " Error"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "data",
                        "type": {
                          "ref": "Record",
                          "targs": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 17136,
                              "source": "string"
                            },
                            {
                              "core": "any",
                              "isNullable": false,
                              "_": 17136,
                              "source": " any"
                            }
                          ],
                          "isNullable": false,
                          "_": 17136,
                          "source": " Record<string, any>"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 17136,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Optional flush function which will give this sender a chance to send any remaining events\n as its {@link TelemetryLogger} is being disposed",
                    "isMethod": true,
                    "_": 17142,
                    "source": "\n\n\t\t/**\n\t\t * Optional flush function which will give this sender a chance to send any remaining events\n\t\t * as its {@link TelemetryLogger} is being disposed\n\t\t */\n\t\tflush?(): void | Thenable<void>;",
                    "name": "flush",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "union": [
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 17142,
                          "source": " void"
                        },
                        {
                          "ref": "Thenable",
                          "targs": [
                            {
                              "core": "void",
                              "isNullable": false,
                              "_": 17142,
                              "source": "void"
                            }
                          ],
                          "isNullable": false,
                          "_": 17142,
                          "source": " Thenable<void>"
                        }
                      ],
                      "isNullable": false,
                      "_": 17142,
                      "source": " void | Thenable<void>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 17148,
                "name": "TelemetryLoggerOptions",
                "generics": [],
                "doc": "Options for creating a {@link TelemetryLogger}",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Whether or not you want to avoid having the built-in common properties such as os, extension name, etc injected into the data object.\nDefaults to `false` if not defined.",
                    "isMethod": false,
                    "_": 17153,
                    "source": "\n\t\t/**\n\t\t * Whether or not you want to avoid having the built-in common properties such as os, extension name, etc injected into the data object.\n\t\t * Defaults to `false` if not defined.\n\t\t */\n\t\treadonly ignoreBuiltInCommonProperties?: boolean;",
                    "name": "ignoreBuiltInCommonProperties",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 17153,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Whether or not unhandled errors on the extension host caused by your extension should be logged to your sender.\nDefaults to `false` if not defined.",
                    "isMethod": false,
                    "_": 17159,
                    "source": "\n\n\t\t/**\n\t\t * Whether or not unhandled errors on the extension host caused by your extension should be logged to your sender.\n\t\t * Defaults to `false` if not defined.\n\t\t */\n\t\treadonly ignoreUnhandledErrors?: boolean;",
                    "name": "ignoreUnhandledErrors",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 17159,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Any additional common properties which should be injected into the data object.",
                    "isMethod": false,
                    "_": 17164,
                    "source": "\n\n\t\t/**\n\t\t * Any additional common properties which should be injected into the data object.\n\t\t */\n\t\treadonly additionalCommonProperties?: Record<string, any>;",
                    "name": "additionalCommonProperties",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Record",
                      "targs": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 17164,
                          "source": "string"
                        },
                        {
                          "core": "any",
                          "isNullable": false,
                          "_": 17164,
                          "source": " any"
                        }
                      ],
                      "isNullable": false,
                      "_": 17164,
                      "source": " Record<string, any>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              }
            ],
            "typedefs": [
              {
                "name": "GlobPattern",
                "generics": [],
                "type": {
                  "union": [
                    {
                      "core": "string",
                      "isNullable": false,
                      "_": 2154,
                      "source": " string"
                    },
                    {
                      "ref": "RelativePattern",
                      "targs": [],
                      "isNullable": false,
                      "_": 2154,
                      "source": " RelativePattern"
                    }
                  ],
                  "isNullable": false,
                  "_": 2154,
                  "source": " string | RelativePattern",
                  "parent": "GlobPattern"
                },
                "doc": "A file glob pattern to match file paths against. This can either be a glob pattern string\n(like `**​/*.{ts,js}` or `*.{ts,js}`) or a {@link RelativePatternrelative pattern}.\n\nGlob patterns can have the following syntax:\n* `*` to match zero or more characters in a path segment\n* `?` to match on one character in a path segment\n* `**` to match any number of path segments, including none\n* `{}` to group conditions (e.g. `**​/*.{ts,js}` matches all TypeScript and JavaScript files)\n* `[]` to declare a range of characters to match in a path segment (e.g., `example.[0-9]` to match on `example.0`, `example.1`, …)\n* `[!...]` to negate a range of characters to match in a path segment (e.g., `example.[!0-9]` to match on `example.a`, `example.b`, but not `example.0`)\n\nNote: a backslash (`\\`) is not valid within a glob pattern. If you have an existing file\npath to match against, consider to use the {@link RelativePatternrelative pattern} support\nthat takes care of converting any backslash into slash. Otherwise, make sure to convert\nany backslash to slash when creating the glob pattern.",
                "_": 2154,
                "source": "\n\n\t/**\n\t * A file glob pattern to match file paths against. This can either be a glob pattern string\n\t * (like `**​/*.{ts,js}` or `*.{ts,js}`) or a {@link RelativePattern relative pattern}.\n\t *\n\t * Glob patterns can have the following syntax:\n\t * * `*` to match zero or more characters in a path segment\n\t * * `?` to match on one character in a path segment\n\t * * `**` to match any number of path segments, including none\n\t * * `{}` to group conditions (e.g. `**​/*.{ts,js}` matches all TypeScript and JavaScript files)\n\t * * `[]` to declare a range of characters to match in a path segment (e.g., `example.[0-9]` to match on `example.0`, `example.1`, …)\n\t * * `[!...]` to negate a range of characters to match in a path segment (e.g., `example.[!0-9]` to match on `example.a`, `example.b`, but not `example.0`)\n\t *\n\t * Note: a backslash (`\\`) is not valid within a glob pattern. If you have an existing file\n\t * path to match against, consider to use the {@link RelativePattern relative pattern} support\n\t * that takes care of converting any backslash into slash. Otherwise, make sure to convert\n\t * any backslash to slash when creating the glob pattern.\n\t */\n\texport type GlobPattern = string | RelativePattern;"
              },
              {
                "name": "DocumentSelector",
                "generics": [],
                "type": {
                  "union": [
                    {
                      "ref": "DocumentFilter",
                      "targs": [],
                      "isNullable": false,
                      "_": 2210,
                      "source": " DocumentFilter"
                    },
                    {
                      "core": "string",
                      "isNullable": false,
                      "_": 2210,
                      "source": " string"
                    },
                    {
                      "ref": "ReadonlyArray",
                      "targs": [
                        {
                          "union": [
                            {
                              "ref": "DocumentFilter",
                              "targs": [],
                              "isNullable": false,
                              "_": 2210,
                              "source": "DocumentFilter"
                            },
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 2210,
                              "source": " string"
                            }
                          ],
                          "isNullable": false,
                          "_": 2210,
                          "source": "DocumentFilter | string"
                        }
                      ],
                      "isNullable": false,
                      "_": 2210,
                      "source": " ReadonlyArray<DocumentFilter | string>"
                    }
                  ],
                  "isNullable": false,
                  "_": 2210,
                  "source": " DocumentFilter | string | ReadonlyArray<DocumentFilter | string>",
                  "parent": "DocumentSelector"
                },
                "doc": "A language selector is the combination of one or many language identifiers\nand {@link DocumentFilterlanguage filters}.\n\n*Note* that a document selector that is just a language identifier selects *all*\ndocuments, even those that are not saved on disk. Only use such selectors when\na feature works without further context, e.g. without the need to resolve related\n'files'.",
                "_": 2210,
                "source": "\n\n\t/**\n\t * A language selector is the combination of one or many language identifiers\n\t * and {@link DocumentFilter language filters}.\n\t *\n\t * *Note* that a document selector that is just a language identifier selects *all*\n\t * documents, even those that are not saved on disk. Only use such selectors when\n\t * a feature works without further context, e.g. without the need to resolve related\n\t * 'files'.\n\t *\n\t * @example\n\t * let sel:DocumentSelector = { scheme: 'file', language: 'typescript' };\n\t */\n\texport type DocumentSelector = DocumentFilter | string | ReadonlyArray<DocumentFilter | string>;"
              },
              {
                "name": "ProviderResult",
                "generics": [
                  {
                    "name": "T",
                    "_": 2242,
                    "source": "T"
                  }
                ],
                "type": {
                  "union": [
                    {
                      "ref": "T",
                      "targs": [],
                      "isNullable": false,
                      "_": 2242,
                      "source": " T"
                    },
                    {
                      "core": "undefined",
                      "isNullable": false,
                      "_": 2242,
                      "source": " undefined"
                    },
                    {
                      "core": "null",
                      "isNullable": false,
                      "_": 2242,
                      "source": " null"
                    },
                    {
                      "ref": "Thenable",
                      "targs": [
                        {
                          "union": [
                            {
                              "ref": "T",
                              "targs": [],
                              "isNullable": false,
                              "_": 2242,
                              "source": "T"
                            },
                            {
                              "core": "undefined",
                              "isNullable": false,
                              "_": 2242,
                              "source": " undefined"
                            },
                            {
                              "core": "null",
                              "isNullable": false,
                              "_": 2242,
                              "source": " null"
                            }
                          ],
                          "isNullable": false,
                          "_": 2242,
                          "source": "T | undefined | null"
                        }
                      ],
                      "isNullable": false,
                      "_": 2242,
                      "source": " Thenable<T | undefined | null>"
                    }
                  ],
                  "isNullable": false,
                  "_": 2242,
                  "source": " T | undefined | null | Thenable<T | undefined | null>",
                  "parent": "ProviderResult"
                },
                "doc": "A provider result represents the values a provider, like the {@linkcode HoverProvider},\nmay return. For once this is the actual result type `T`, like `Hover`, or a thenable that resolves\nto that type `T`. In addition, `null` and `undefined` can be returned - either directly or from a\nthenable.\n\nThe snippets below are all valid implementations of the {@linkcode HoverProvider}:\n\n```ts\nlet a: HoverProvider = {\n\tprovideHover(doc, pos, token): ProviderResult<Hover> {\n\t\treturn new Hover('Hello World');\n\t}\n}\n\nlet b: HoverProvider = {\n\tprovideHover(doc, pos, token): ProviderResult<Hover> {\n\t\treturn new Promise(resolve => {\n\t\t\tresolve(new Hover('Hello World'));\n\t \t});\n\t}\n}\n\nlet c: HoverProvider = {\n\tprovideHover(doc, pos, token): ProviderResult<Hover> {\n\t\treturn; // undefined\n\t}\n}\n```",
                "_": 2242,
                "source": "\n\n\t/**\n\t * A provider result represents the values a provider, like the {@linkcode HoverProvider},\n\t * may return. For once this is the actual result type `T`, like `Hover`, or a thenable that resolves\n\t * to that type `T`. In addition, `null` and `undefined` can be returned - either directly or from a\n\t * thenable.\n\t *\n\t * The snippets below are all valid implementations of the {@linkcode HoverProvider}:\n\t *\n\t * ```ts\n\t * let a: HoverProvider = {\n\t * \tprovideHover(doc, pos, token): ProviderResult<Hover> {\n\t * \t\treturn new Hover('Hello World');\n\t * \t}\n\t * }\n\t *\n\t * let b: HoverProvider = {\n\t * \tprovideHover(doc, pos, token): ProviderResult<Hover> {\n\t * \t\treturn new Promise(resolve => {\n\t * \t\t\tresolve(new Hover('Hello World'));\n\t * \t \t});\n\t * \t}\n\t * }\n\t *\n\t * let c: HoverProvider = {\n\t * \tprovideHover(doc, pos, token): ProviderResult<Hover> {\n\t * \t\treturn; // undefined\n\t * \t}\n\t * }\n\t * ```\n\t */\n\texport type ProviderResult<T> = T | undefined | null | Thenable<T | undefined | null>;"
              },
              {
                "name": "DefinitionLink",
                "generics": [],
                "type": {
                  "ref": "LocationLink",
                  "targs": [],
                  "isNullable": false,
                  "_": 2680,
                  "source": " LocationLink",
                  "parent": "DefinitionLink"
                },
                "doc": "Information about where a symbol is defined.\n\nProvides additional metadata over normal {@link Location} definitions, including the range of\nthe defining symbol",
                "_": 2680,
                "source": "\n\n\t/**\n\t * Information about where a symbol is defined.\n\t *\n\t * Provides additional metadata over normal {@link Location} definitions, including the range of\n\t * the defining symbol\n\t */\n\texport type DefinitionLink = LocationLink;"
              },
              {
                "name": "Definition",
                "generics": [],
                "type": {
                  "union": [
                    {
                      "ref": "Location",
                      "targs": [],
                      "isNullable": false,
                      "_": 2687,
                      "source": " Location"
                    },
                    {
                      "core": "array",
                      "targs": [
                        {
                          "ref": "Location",
                          "targs": [],
                          "isNullable": false,
                          "_": 2687,
                          "source": " Location"
                        }
                      ],
                      "isNullable": false,
                      "_": 2687,
                      "source": " Location[]"
                    }
                  ],
                  "isNullable": false,
                  "_": 2687,
                  "source": " Location | Location[]",
                  "parent": "Definition"
                },
                "doc": "The definition of a symbol represented as one or many {@link Locationlocations}.\nFor most programming languages there is only one location at which a symbol is\ndefined.",
                "_": 2687,
                "source": "\n\n\t/**\n\t * The definition of a symbol represented as one or many {@link Location locations}.\n\t * For most programming languages there is only one location at which a symbol is\n\t * defined.\n\t */\n\texport type Definition = Location | Location[];"
              },
              {
                "name": "Declaration",
                "generics": [],
                "type": {
                  "union": [
                    {
                      "ref": "Location",
                      "targs": [],
                      "isNullable": false,
                      "_": 2748,
                      "source": " Location"
                    },
                    {
                      "core": "array",
                      "targs": [
                        {
                          "ref": "Location",
                          "targs": [],
                          "isNullable": false,
                          "_": 2748,
                          "source": " Location"
                        }
                      ],
                      "isNullable": false,
                      "_": 2748,
                      "source": " Location[]"
                    },
                    {
                      "core": "array",
                      "targs": [
                        {
                          "ref": "LocationLink",
                          "targs": [],
                          "isNullable": false,
                          "_": 2748,
                          "source": " LocationLink"
                        }
                      ],
                      "isNullable": false,
                      "_": 2748,
                      "source": " LocationLink[]"
                    }
                  ],
                  "isNullable": false,
                  "_": 2748,
                  "source": " Location | Location[] | LocationLink[]",
                  "parent": "Declaration"
                },
                "doc": "The declaration of a symbol representation as one or many {@link Locationlocations}\nor {@link LocationLinklocation links}.",
                "_": 2748,
                "source": "\n\n\t/**\n\t * The declaration of a symbol representation as one or many {@link Location locations}\n\t * or {@link LocationLink location links}.\n\t */\n\texport type Declaration = Location | Location[] | LocationLink[];"
              },
              {
                "name": "MarkedString",
                "generics": [],
                "type": {
                  "union": [
                    {
                      "core": "string",
                      "isNullable": false,
                      "_": 2866,
                      "source": " string"
                    },
                    {
                      "ref": "IInline14",
                      "targs": [],
                      "isNullable": false,
                      "_": 2866,
                      "source": " { language: string; value: string }"
                    }
                  ],
                  "isNullable": false,
                  "_": 2866,
                  "source": " string | { language: string; value: string }",
                  "parent": "MarkedString"
                },
                "doc": "MarkedString can be used to render human-readable text. It is either a markdown string\nor a code-block that provides a language and a code snippet. Note that\nmarkdown strings will be sanitized - that means html will be escaped.",
                "_": 2866,
                "source": "\n\n\t/**\n\t * MarkedString can be used to render human-readable text. It is either a markdown string\n\t * or a code-block that provides a language and a code snippet. Note that\n\t * markdown strings will be sanitized - that means html will be escaped.\n\t *\n\t * @deprecated This type is deprecated, please use {@linkcode MarkdownString} instead.\n\t */\n\texport type MarkedString = string | { language: string; value: string };"
              },
              {
                "name": "InlineValue",
                "generics": [],
                "type": {
                  "union": [
                    {
                      "ref": "InlineValueText",
                      "targs": [],
                      "isNullable": false,
                      "_": 3045,
                      "source": " InlineValueText"
                    },
                    {
                      "ref": "InlineValueVariableLookup",
                      "targs": [],
                      "isNullable": false,
                      "_": 3045,
                      "source": " InlineValueVariableLookup"
                    },
                    {
                      "ref": "InlineValueEvaluatableExpression",
                      "targs": [],
                      "isNullable": false,
                      "_": 3045,
                      "source": " InlineValueEvaluatableExpression"
                    }
                  ],
                  "isNullable": false,
                  "_": 3045,
                  "source": " InlineValueText | InlineValueVariableLookup | InlineValueEvaluatableExpression",
                  "parent": "InlineValue"
                },
                "doc": "Inline value information can be provided by different means:\n- directly as a text value (class InlineValueText).\n- as a name to use for a variable lookup (class InlineValueVariableLookup)\n- as an evaluatable expression (class InlineValueEvaluatableExpression)\nThe InlineValue types combines all inline value types into one type.",
                "_": 3045,
                "source": "\n\n\t/**\n\t * Inline value information can be provided by different means:\n\t * - directly as a text value (class InlineValueText).\n\t * - as a name to use for a variable lookup (class InlineValueVariableLookup)\n\t * - as an evaluatable expression (class InlineValueEvaluatableExpression)\n\t * The InlineValue types combines all inline value types into one type.\n\t */\n\texport type InlineValue = InlineValueText | InlineValueVariableLookup | InlineValueEvaluatableExpression;"
              },
              {
                "name": "CharacterPair",
                "generics": [],
                "type": {
                  "tuple": [
                    {
                      "core": "string",
                      "isNullable": false,
                      "_": 5683,
                      "source": "string"
                    },
                    {
                      "core": "string",
                      "isNullable": false,
                      "_": 5683,
                      "source": " string"
                    }
                  ],
                  "isNullable": false,
                  "_": 5683,
                  "source": " [string, string]",
                  "parent": "CharacterPair"
                },
                "doc": "A tuple of two characters, like a pair of\nopening and closing brackets.",
                "_": 5683,
                "source": "\n\n\t/**\n\t * A tuple of two characters, like a pair of\n\t * opening and closing brackets.\n\t */\n\texport type CharacterPair = [string, string];"
              },
              {
                "name": "ConfigurationScope",
                "generics": [],
                "type": {
                  "union": [
                    {
                      "ref": "Uri",
                      "targs": [],
                      "isNullable": false,
                      "_": 12867,
                      "source": " Uri"
                    },
                    {
                      "ref": "TextDocument",
                      "targs": [],
                      "isNullable": false,
                      "_": 12867,
                      "source": " TextDocument"
                    },
                    {
                      "ref": "WorkspaceFolder",
                      "targs": [],
                      "isNullable": false,
                      "_": 12867,
                      "source": " WorkspaceFolder"
                    },
                    {
                      "ref": "IInline67",
                      "targs": [],
                      "isNullable": false,
                      "_": 12867,
                      "source": " { uri?: Uri; languageId: string }"
                    }
                  ],
                  "isNullable": false,
                  "_": 12867,
                  "source": " Uri | TextDocument | WorkspaceFolder | { uri?: Uri; languageId: string }",
                  "parent": "ConfigurationScope"
                },
                "doc": "The configuration scope which can be a\na 'resource' or a languageId or both or\na '{@link TextDocument}' or\na '{@link WorkspaceFolder}'",
                "_": 12867,
                "source": "\n\n\t/**\n\t * The configuration scope which can be a\n\t * a 'resource' or a languageId or both or\n\t * a '{@link TextDocument}' or\n\t * a '{@link WorkspaceFolder}'\n\t */\n\texport type ConfigurationScope = Uri | TextDocument | WorkspaceFolder | { uri?: Uri; languageId: string };"
              },
              {
                "name": "DebugAdapterDescriptor",
                "generics": [],
                "type": {
                  "union": [
                    {
                      "ref": "DebugAdapterExecutable",
                      "targs": [],
                      "isNullable": false,
                      "_": 15046,
                      "source": " DebugAdapterExecutable"
                    },
                    {
                      "ref": "DebugAdapterServer",
                      "targs": [],
                      "isNullable": false,
                      "_": 15046,
                      "source": " DebugAdapterServer"
                    },
                    {
                      "ref": "DebugAdapterNamedPipeServer",
                      "targs": [],
                      "isNullable": false,
                      "_": 15046,
                      "source": " DebugAdapterNamedPipeServer"
                    },
                    {
                      "ref": "DebugAdapterInlineImplementation",
                      "targs": [],
                      "isNullable": false,
                      "_": 15046,
                      "source": " DebugAdapterInlineImplementation"
                    }
                  ],
                  "isNullable": false,
                  "_": 15046,
                  "source": " DebugAdapterExecutable | DebugAdapterServer | DebugAdapterNamedPipeServer | DebugAdapterInlineImplementation",
                  "parent": "DebugAdapterDescriptor"
                },
                "doc": "",
                "_": 15046,
                "source": "\n\n\texport type DebugAdapterDescriptor = DebugAdapterExecutable | DebugAdapterServer | DebugAdapterNamedPipeServer | DebugAdapterInlineImplementation;"
              }
            ],
            "modules": [
              {
                "_": 8034,
                "namespace": "tasks",
                "from": "submodule vscode",
                "items": {
                  "structs": [],
                  "typedefs": [],
                  "modules": [],
                  "funcs": [
                    {
                      "_": 8043,
                      "name": "registerTaskProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 8043,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Register a task provider.",
                      "params": [
                        {
                          "name": "type",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 8043,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "provider",
                          "type": {
                            "ref": "TaskProvider",
                            "targs": [],
                            "isNullable": false,
                            "_": 8043,
                            "source": " TaskProvider"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Register a task provider.\n\t\t *\n\t\t * @param type The task kind type this provider is registered for.\n\t\t * @param provider A task provider.\n\t\t * @return A {@link Disposable} that unregisters this provider when being disposed.\n\t\t */\n\t\texport function registerTaskProvider(type: string, provider: TaskProvider): Disposable;"
                    },
                    {
                      "_": 8052,
                      "name": "fetchTasks",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "core": "array",
                            "targs": [
                              {
                                "ref": "Task",
                                "targs": [],
                                "isNullable": false,
                                "_": 8052,
                                "source": "Task"
                              }
                            ],
                            "isNullable": false,
                            "_": 8052,
                            "source": "Task[]"
                          }
                        ],
                        "isNullable": false,
                        "_": 8052,
                        "source": " Thenable<Task[]>"
                      },
                      "generics": [],
                      "doc": "Fetches all tasks available in the systems. This includes tasks\nfrom `tasks.json` files as well as tasks from task providers\ncontributed through extensions.",
                      "params": [
                        {
                          "name": "filter",
                          "type": {
                            "ref": "TaskFilter",
                            "targs": [],
                            "isNullable": false,
                            "_": 8052,
                            "source": " TaskFilter"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Fetches all tasks available in the systems. This includes tasks\n\t\t * from `tasks.json` files as well as tasks from task providers\n\t\t * contributed through extensions.\n\t\t *\n\t\t * @param filter Optional filter to select tasks of a certain type or version.\n\t\t */\n\t\texport function fetchTasks(filter?: TaskFilter): Thenable<Task[]>;"
                    },
                    {
                      "_": 8064,
                      "name": "executeTask",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "ref": "TaskExecution",
                            "targs": [],
                            "isNullable": false,
                            "_": 8064,
                            "source": "TaskExecution"
                          }
                        ],
                        "isNullable": false,
                        "_": 8064,
                        "source": " Thenable<TaskExecution>"
                      },
                      "generics": [],
                      "doc": "Executes a task that is managed by the editor. The returned\ntask execution can be used to terminate the task.",
                      "params": [
                        {
                          "name": "task",
                          "type": {
                            "ref": "Task",
                            "targs": [],
                            "isNullable": false,
                            "_": 8064,
                            "source": " Task"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Executes a task that is managed by the editor. The returned\n\t\t * task execution can be used to terminate the task.\n\t\t *\n\t\t * @throws When running a ShellExecution or a ProcessExecution\n\t\t * task in an environment where a new process cannot be started.\n\t\t * In such an environment, only CustomExecution tasks can be run.\n\t\t *\n\t\t * @param task the task to execute\n\t\t */\n\t\texport function executeTask(task: Task): Thenable<TaskExecution>;"
                    }
                  ],
                  "vars": [
                    {
                      "_": 8069,
                      "name": "taskExecutions",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "The currently active task executions or an empty array.",
                      "type": {
                        "operator": 146,
                        "type": {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "TaskExecution",
                              "targs": [],
                              "isNullable": false,
                              "_": 8069,
                              "source": " TaskExecution"
                            }
                          ],
                          "isNullable": false,
                          "_": 8069,
                          "source": " TaskExecution[]"
                        },
                        "isNullable": false,
                        "_": 8069,
                        "source": " readonly TaskExecution[]"
                      },
                      "source": " taskExecutions: readonly TaskExecution[]"
                    },
                    {
                      "_": 8074,
                      "name": "onDidStartTask",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "Fires when a task starts.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "ref": "TaskStartEvent",
                            "targs": [],
                            "isNullable": false,
                            "_": 8074,
                            "source": "TaskStartEvent"
                          }
                        ],
                        "isNullable": false,
                        "_": 8074,
                        "source": " Event<TaskStartEvent>"
                      },
                      "source": " onDidStartTask: Event<TaskStartEvent>"
                    },
                    {
                      "_": 8079,
                      "name": "onDidEndTask",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "Fires when a task ends.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "ref": "TaskEndEvent",
                            "targs": [],
                            "isNullable": false,
                            "_": 8079,
                            "source": "TaskEndEvent"
                          }
                        ],
                        "isNullable": false,
                        "_": 8079,
                        "source": " Event<TaskEndEvent>"
                      },
                      "source": " onDidEndTask: Event<TaskEndEvent>"
                    },
                    {
                      "_": 8086,
                      "name": "onDidStartTaskProcess",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "Fires when the underlying process has been started.\nThis event will not fire for tasks that don't\nexecute an underlying process.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "ref": "TaskProcessStartEvent",
                            "targs": [],
                            "isNullable": false,
                            "_": 8086,
                            "source": "TaskProcessStartEvent"
                          }
                        ],
                        "isNullable": false,
                        "_": 8086,
                        "source": " Event<TaskProcessStartEvent>"
                      },
                      "source": " onDidStartTaskProcess: Event<TaskProcessStartEvent>"
                    },
                    {
                      "_": 8093,
                      "name": "onDidEndTaskProcess",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "Fires when the underlying process has ended.\nThis event will not fire for tasks that don't\nexecute an underlying process.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "ref": "TaskProcessEndEvent",
                            "targs": [],
                            "isNullable": false,
                            "_": 8093,
                            "source": "TaskProcessEndEvent"
                          }
                        ],
                        "isNullable": false,
                        "_": 8093,
                        "source": " Event<TaskProcessEndEvent>"
                      },
                      "source": " onDidEndTaskProcess: Event<TaskProcessEndEvent>"
                    }
                  ],
                  "enums": []
                }
              },
              {
                "_": 9364,
                "namespace": "env",
                "from": "submodule vscode",
                "items": {
                  "structs": [],
                  "typedefs": [],
                  "modules": [],
                  "funcs": [
                    {
                      "_": 9438,
                      "name": "createTelemetryLogger",
                      "type": {
                        "ref": "TelemetryLogger",
                        "targs": [],
                        "isNullable": false,
                        "_": 9438,
                        "source": " TelemetryLogger"
                      },
                      "generics": [],
                      "doc": "Creates a new {@link TelemetryLoggertelemetry logger}.",
                      "params": [
                        {
                          "name": "sender",
                          "type": {
                            "ref": "TelemetrySender",
                            "targs": [],
                            "isNullable": false,
                            "_": 9438,
                            "source": " TelemetrySender"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "options",
                          "type": {
                            "ref": "TelemetryLoggerOptions",
                            "targs": [],
                            "isNullable": false,
                            "_": 9438,
                            "source": " TelemetryLoggerOptions"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Creates a new {@link TelemetryLogger telemetry logger}.\n\t\t *\n\t\t * @param sender The telemetry sender that is used by the telemetry logger.\n\t\t * @param options Options for the telemetry logger.\n\t\t * @returns A new telemetry logger\n\t\t */\n\t\texport function createTelemetryLogger(sender: TelemetrySender, options?: TelemetryLoggerOptions): TelemetryLogger;"
                    },
                    {
                      "_": 9478,
                      "name": "openExternal",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "core": "boolean",
                            "isNullable": false,
                            "_": 9478,
                            "source": "boolean"
                          }
                        ],
                        "isNullable": false,
                        "_": 9478,
                        "source": " Thenable<boolean>"
                      },
                      "generics": [],
                      "doc": "Opens a link externally using the default application. Depending on the\nused scheme this can be:\n* a browser (`http:`, `https:`)\n* a mail client (`mailto:`)\n* VSCode itself (`vscode:` from `vscode.env.uriScheme`)\n\n*Note* that {@linkcode window.showTextDocumentshowTextDocument} is the right\nway to open a text document inside the editor, not this function.",
                      "params": [
                        {
                          "name": "target",
                          "type": {
                            "ref": "Uri",
                            "targs": [],
                            "isNullable": false,
                            "_": 9478,
                            "source": " Uri"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Opens a link externally using the default application. Depending on the\n\t\t * used scheme this can be:\n\t\t * * a browser (`http:`, `https:`)\n\t\t * * a mail client (`mailto:`)\n\t\t * * VSCode itself (`vscode:` from `vscode.env.uriScheme`)\n\t\t *\n\t\t * *Note* that {@linkcode window.showTextDocument showTextDocument} is the right\n\t\t * way to open a text document inside the editor, not this function.\n\t\t *\n\t\t * @param target The uri that should be opened.\n\t\t * @returns A promise indicating if open was successful.\n\t\t */\n\t\texport function openExternal(target: Uri): Thenable<boolean>;"
                    },
                    {
                      "_": 9533,
                      "name": "asExternalUri",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "ref": "Uri",
                            "targs": [],
                            "isNullable": false,
                            "_": 9533,
                            "source": "Uri"
                          }
                        ],
                        "isNullable": false,
                        "_": 9533,
                        "source": " Thenable<Uri>"
                      },
                      "generics": [],
                      "doc": "Resolves a uri to a form that is accessible externally.\n\n#### `http:` or `https:` scheme\n\nResolves an *external* uri, such as a `http:` or `https:` link, from where the extension is running to a\nuri to the same resource on the client machine.\n\nThis is a no-op if the extension is running on the client machine.\n\nIf the extension is running remotely, this function automatically establishes a port forwarding tunnel\nfrom the local machine to `target` on the remote and returns a local uri to the tunnel. The lifetime of\nthe port forwarding tunnel is managed by the editor and the tunnel can be closed by the user.\n\n*Note* that uris passed through `openExternal` are automatically resolved and you should not call `asExternalUri` on them.\n\n#### `vscode.env.uriScheme`\n\nCreates a uri that - if opened in a browser (e.g. via `openExternal`) - will result in a registered {@link UriHandler}\nto trigger.\n\nExtensions should not make any assumptions about the resulting uri and should not alter it in any way.\nRather, extensions can e.g. use this uri in an authentication flow, by adding the uri as callback query\nargument to the server to authenticate to.\n\n*Note* that if the server decides to add additional query parameters to the uri (e.g. a token or secret), it\nwill appear in the uri that is passed to the {@link UriHandler}.\n\n**Example** of an authentication flow:\n```typescript\nvscode.window.registerUriHandler({\n  handleUri(uri: vscode.Uri): vscode.ProviderResult<void> {\n    if (uri.path === '/did-authenticate') {\n      console.log(uri.toString());\n    }\n  }\n});\n\nconst callableUri = await vscode.env.asExternalUri(vscode.Uri.parse(vscode.env.uriScheme + '://my.extension/did-authenticate'));\nawait vscode.env.openExternal(callableUri);\n```\n\n*Note* that extensions should not cache the result of `asExternalUri` as the resolved uri may become invalid due to\na system or user action — for example, in remote cases, a user may close a port forwarding tunnel that was opened by\n`asExternalUri`.\n\n#### Any other scheme\n\nAny other scheme will be handled as if the provided URI is a workspace URI. In that case, the method will return\na URI which, when handled, will make the editor open the workspace.",
                      "params": [
                        {
                          "name": "target",
                          "type": {
                            "ref": "Uri",
                            "targs": [],
                            "isNullable": false,
                            "_": 9533,
                            "source": " Uri"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Resolves a uri to a form that is accessible externally.\n\t\t *\n\t\t * #### `http:` or `https:` scheme\n\t\t *\n\t\t * Resolves an *external* uri, such as a `http:` or `https:` link, from where the extension is running to a\n\t\t * uri to the same resource on the client machine.\n\t\t *\n\t\t * This is a no-op if the extension is running on the client machine.\n\t\t *\n\t\t * If the extension is running remotely, this function automatically establishes a port forwarding tunnel\n\t\t * from the local machine to `target` on the remote and returns a local uri to the tunnel. The lifetime of\n\t\t * the port forwarding tunnel is managed by the editor and the tunnel can be closed by the user.\n\t\t *\n\t\t * *Note* that uris passed through `openExternal` are automatically resolved and you should not call `asExternalUri` on them.\n\t\t *\n\t\t * #### `vscode.env.uriScheme`\n\t\t *\n\t\t * Creates a uri that - if opened in a browser (e.g. via `openExternal`) - will result in a registered {@link UriHandler}\n\t\t * to trigger.\n\t\t *\n\t\t * Extensions should not make any assumptions about the resulting uri and should not alter it in any way.\n\t\t * Rather, extensions can e.g. use this uri in an authentication flow, by adding the uri as callback query\n\t\t * argument to the server to authenticate to.\n\t\t *\n\t\t * *Note* that if the server decides to add additional query parameters to the uri (e.g. a token or secret), it\n\t\t * will appear in the uri that is passed to the {@link UriHandler}.\n\t\t *\n\t\t * **Example** of an authentication flow:\n\t\t * ```typescript\n\t\t * vscode.window.registerUriHandler({\n\t\t *   handleUri(uri: vscode.Uri): vscode.ProviderResult<void> {\n\t\t *     if (uri.path === '/did-authenticate') {\n\t\t *       console.log(uri.toString());\n\t\t *     }\n\t\t *   }\n\t\t * });\n\t\t *\n\t\t * const callableUri = await vscode.env.asExternalUri(vscode.Uri.parse(vscode.env.uriScheme + '://my.extension/did-authenticate'));\n\t\t * await vscode.env.openExternal(callableUri);\n\t\t * ```\n\t\t *\n\t\t * *Note* that extensions should not cache the result of `asExternalUri` as the resolved uri may become invalid due to\n\t\t * a system or user action — for example, in remote cases, a user may close a port forwarding tunnel that was opened by\n\t\t * `asExternalUri`.\n\t\t *\n\t\t * #### Any other scheme\n\t\t *\n\t\t * Any other scheme will be handled as if the provided URI is a workspace URI. In that case, the method will return\n\t\t * a URI which, when handled, will make the editor open the workspace.\n\t\t *\n\t\t * @return A uri that can be used on the client machine.\n\t\t */\n\t\texport function asExternalUri(target: Uri): Thenable<Uri>;"
                    }
                  ],
                  "vars": [
                    {
                      "_": 9369,
                      "name": "appName",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "The application name of the editor, like 'VS Code'.",
                      "type": {
                        "core": "string",
                        "isNullable": false,
                        "_": 9369,
                        "source": " string"
                      },
                      "source": " appName: string"
                    },
                    {
                      "_": 9377,
                      "name": "appRoot",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "The application root folder from which the editor is running.\n\n*Note* that the value is the empty string when running in an\nenvironment that has no representation of an application root folder.",
                      "type": {
                        "core": "string",
                        "isNullable": false,
                        "_": 9377,
                        "source": " string"
                      },
                      "source": " appRoot: string"
                    },
                    {
                      "_": 9385,
                      "name": "appHost",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "The hosted location of the application\nOn desktop this is 'desktop'\nIn the web this is the specified embedder i.e. 'github.dev', 'codespaces', or 'web' if the embedder\ndoes not provide that information",
                      "type": {
                        "core": "string",
                        "isNullable": false,
                        "_": 9385,
                        "source": " string"
                      },
                      "source": " appHost: string"
                    },
                    {
                      "_": 9390,
                      "name": "uriScheme",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "The custom uri scheme the editor registers to in the operating system.",
                      "type": {
                        "core": "string",
                        "isNullable": false,
                        "_": 9390,
                        "source": " string"
                      },
                      "source": " uriScheme: string"
                    },
                    {
                      "_": 9395,
                      "name": "language",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "Represents the preferred user-language, like `de-CH`, `fr`, or `en-US`.",
                      "type": {
                        "core": "string",
                        "isNullable": false,
                        "_": 9395,
                        "source": " string"
                      },
                      "source": " language: string"
                    },
                    {
                      "_": 9400,
                      "name": "clipboard",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "The system clipboard.",
                      "type": {
                        "ref": "Clipboard",
                        "targs": [],
                        "isNullable": false,
                        "_": 9400,
                        "source": " Clipboard"
                      },
                      "source": " clipboard: Clipboard"
                    },
                    {
                      "_": 9405,
                      "name": "machineId",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "A unique identifier for the computer.",
                      "type": {
                        "core": "string",
                        "isNullable": false,
                        "_": 9405,
                        "source": " string"
                      },
                      "source": " machineId: string"
                    },
                    {
                      "_": 9411,
                      "name": "sessionId",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "A unique identifier for the current session.\nChanges each time the editor is started.",
                      "type": {
                        "core": "string",
                        "isNullable": false,
                        "_": 9411,
                        "source": " string"
                      },
                      "source": " sessionId: string"
                    },
                    {
                      "_": 9417,
                      "name": "isNewAppInstall",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "Indicates that this is a fresh install of the application.\n`true` if within the first day of installation otherwise `false`.",
                      "type": {
                        "core": "boolean",
                        "isNullable": false,
                        "_": 9417,
                        "source": " boolean"
                      },
                      "source": " isNewAppInstall: boolean"
                    },
                    {
                      "_": 9423,
                      "name": "isTelemetryEnabled",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "Indicates whether the users has telemetry enabled.\nCan be observed to determine if the extension should send telemetry.",
                      "type": {
                        "core": "boolean",
                        "isNullable": false,
                        "_": 9423,
                        "source": " boolean"
                      },
                      "source": " isTelemetryEnabled: boolean"
                    },
                    {
                      "_": 9429,
                      "name": "onDidChangeTelemetryEnabled",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "An {@link Event} which fires when the user enabled or disables telemetry.\n`true` if the user has enabled telemetry or `false` if the user has disabled telemetry.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "core": "boolean",
                            "isNullable": false,
                            "_": 9429,
                            "source": "boolean"
                          }
                        ],
                        "isNullable": false,
                        "_": 9429,
                        "source": " Event<boolean>"
                      },
                      "source": " onDidChangeTelemetryEnabled: Event<boolean>"
                    },
                    {
                      "_": 9449,
                      "name": "remoteName",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "The name of a remote. Defined by extensions, popular samples are `wsl` for the Windows\nSubsystem for Linux or `ssh-remote` for remotes using a secure shell.\n\n*Note* that the value is `undefined` when there is no remote extension host but that the\nvalue is defined in all extension hosts (local and remote) in case a remote extension host\nexists. Use {@link Extension.extensionKind} to know if\na specific extension runs remote or not.",
                      "type": {
                        "union": [
                          {
                            "core": "string",
                            "isNullable": false,
                            "_": 9449,
                            "source": " string"
                          },
                          {
                            "core": "undefined",
                            "isNullable": false,
                            "_": 9449,
                            "source": " undefined"
                          }
                        ],
                        "isNullable": false,
                        "_": 9449,
                        "source": " string | undefined"
                      },
                      "source": " remoteName: string | undefined"
                    },
                    {
                      "_": 9456,
                      "name": "shell",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "The detected default shell for the extension host, this is overridden by the\n`terminal.integrated.defaultProfile` setting for the extension host's platform. Note that in\nenvironments that do not support a shell the value is the empty string.",
                      "type": {
                        "core": "string",
                        "isNullable": false,
                        "_": 9456,
                        "source": " string"
                      },
                      "source": " shell: string"
                    },
                    {
                      "_": 9463,
                      "name": "uiKind",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "The UI kind property indicates from which UI extensions\nare accessed from. For example, extensions could be accessed\nfrom a desktop application or a web browser.",
                      "type": {
                        "ref": "UIKind",
                        "targs": [],
                        "isNullable": false,
                        "_": 9463,
                        "source": " UIKind"
                      },
                      "source": " uiKind: UIKind"
                    },
                    {
                      "_": 9538,
                      "name": "logLevel",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "The current log level of the editor.",
                      "type": {
                        "ref": "LogLevel",
                        "targs": [],
                        "isNullable": false,
                        "_": 9538,
                        "source": " LogLevel"
                      },
                      "source": " logLevel: LogLevel"
                    },
                    {
                      "_": 9543,
                      "name": "onDidChangeLogLevel",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "An {@link Event} which fires when the log level of the editor changes.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "ref": "LogLevel",
                            "targs": [],
                            "isNullable": false,
                            "_": 9543,
                            "source": "LogLevel"
                          }
                        ],
                        "isNullable": false,
                        "_": 9543,
                        "source": " Event<LogLevel>"
                      },
                      "source": " onDidChangeLogLevel: Event<LogLevel>"
                    }
                  ],
                  "enums": []
                }
              },
              {
                "_": 9582,
                "namespace": "commands",
                "from": "submodule vscode",
                "items": {
                  "structs": [],
                  "typedefs": [],
                  "modules": [],
                  "funcs": [
                    {
                      "_": 9596,
                      "name": "registerCommand",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 9596,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Registers a command that can be invoked via a keyboard shortcut,\na menu item, an action, or directly.\n\nRegistering a command with an existing command identifier twice\nwill cause an error.",
                      "params": [
                        {
                          "name": "command",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 9596,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "callback",
                          "type": {
                            "ctor": false,
                            "generics": [],
                            "returns": {
                              "core": "any",
                              "isNullable": false,
                              "_": 9596,
                              "source": " any"
                            },
                            "params": [
                              {
                                "name": "args",
                                "type": {
                                  "core": "array",
                                  "targs": [
                                    {
                                      "core": "any",
                                      "isNullable": false,
                                      "_": 9596,
                                      "source": " any"
                                    }
                                  ],
                                  "isNullable": false,
                                  "_": 9596,
                                  "source": " any[]"
                                },
                                "varargs": true,
                                "isNullable": false
                              }
                            ],
                            "isNullable": false,
                            "_": 9596,
                            "source": " (...args: any[]) => any"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "thisArg",
                          "type": {
                            "core": "any",
                            "isNullable": false,
                            "_": 9596,
                            "source": " any"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Registers a command that can be invoked via a keyboard shortcut,\n\t\t * a menu item, an action, or directly.\n\t\t *\n\t\t * Registering a command with an existing command identifier twice\n\t\t * will cause an error.\n\t\t *\n\t\t * @param command A unique identifier for the command.\n\t\t * @param callback A command handler function.\n\t\t * @param thisArg The `this` context used when invoking the handler function.\n\t\t * @return Disposable which unregisters this command on disposal.\n\t\t */\n\t\texport function registerCommand(command: string, callback: (...args: any[]) => any, thisArg?: any): Disposable;"
                    },
                    {
                      "_": 9613,
                      "name": "registerTextEditorCommand",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 9613,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Registers a text editor command that can be invoked via a keyboard shortcut,\na menu item, an action, or directly.\n\nText editor commands are different from ordinary {@link commands.registerCommandcommands} as\nthey only execute when there is an active editor when the command is called. Also, the\ncommand handler of an editor command has access to the active editor and to an\n{@link TextEditorEditedit}-builder. Note that the edit-builder is only valid while the\ncallback executes.",
                      "params": [
                        {
                          "name": "command",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 9613,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "callback",
                          "type": {
                            "ctor": false,
                            "generics": [],
                            "returns": {
                              "core": "void",
                              "isNullable": false,
                              "_": 9613,
                              "source": " void"
                            },
                            "params": [
                              {
                                "name": "textEditor",
                                "type": {
                                  "ref": "TextEditor",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 9613,
                                  "source": " TextEditor"
                                },
                                "varargs": false,
                                "isNullable": false
                              },
                              {
                                "name": "edit",
                                "type": {
                                  "ref": "TextEditorEdit",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 9613,
                                  "source": " TextEditorEdit"
                                },
                                "varargs": false,
                                "isNullable": false
                              },
                              {
                                "name": "args",
                                "type": {
                                  "core": "array",
                                  "targs": [
                                    {
                                      "core": "any",
                                      "isNullable": false,
                                      "_": 9613,
                                      "source": " any"
                                    }
                                  ],
                                  "isNullable": false,
                                  "_": 9613,
                                  "source": " any[]"
                                },
                                "varargs": true,
                                "isNullable": false
                              }
                            ],
                            "isNullable": false,
                            "_": 9613,
                            "source": " (textEditor: TextEditor, edit: TextEditorEdit, ...args: any[]) => void"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "thisArg",
                          "type": {
                            "core": "any",
                            "isNullable": false,
                            "_": 9613,
                            "source": " any"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Registers a text editor command that can be invoked via a keyboard shortcut,\n\t\t * a menu item, an action, or directly.\n\t\t *\n\t\t * Text editor commands are different from ordinary {@link commands.registerCommand commands} as\n\t\t * they only execute when there is an active editor when the command is called. Also, the\n\t\t * command handler of an editor command has access to the active editor and to an\n\t\t * {@link TextEditorEdit edit}-builder. Note that the edit-builder is only valid while the\n\t\t * callback executes.\n\t\t *\n\t\t * @param command A unique identifier for the command.\n\t\t * @param callback A command handler function with access to an {@link TextEditor editor} and an {@link TextEditorEdit edit}.\n\t\t * @param thisArg The `this` context used when invoking the handler function.\n\t\t * @return Disposable which unregisters this command on disposal.\n\t\t */\n\t\texport function registerTextEditorCommand(command: string, callback: (textEditor: TextEditor, edit: TextEditorEdit, ...args: any[]) => void, thisArg?: any): Disposable;"
                    },
                    {
                      "_": 9629,
                      "name": "executeCommand",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "ref": "T",
                            "targs": [],
                            "isNullable": false,
                            "_": 9629,
                            "source": "T"
                          }
                        ],
                        "isNullable": false,
                        "_": 9629,
                        "source": " Thenable<T>"
                      },
                      "generics": [
                        {
                          "name": "T",
                          "default": {
                            "core": "unknown",
                            "isNullable": false,
                            "_": 9629,
                            "source": " unknown"
                          },
                          "_": 9629,
                          "source": "T = unknown"
                        }
                      ],
                      "doc": "Executes the command denoted by the given command identifier.\n\n* *Note 1:* When executing an editor command not all types are allowed to\nbe passed as arguments. Allowed are the primitive types `string`, `boolean`,\n`number`, `undefined`, and `null`, as well as {@linkcode Position}, {@linkcode Range}, {@linkcode Uri} and {@linkcode Location}.\n* *Note 2:* There are no restrictions when executing commands that have been contributed\nby extensions.",
                      "params": [
                        {
                          "name": "command",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 9629,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "rest",
                          "type": {
                            "core": "array",
                            "targs": [
                              {
                                "core": "any",
                                "isNullable": false,
                                "_": 9629,
                                "source": " any"
                              }
                            ],
                            "isNullable": false,
                            "_": 9629,
                            "source": " any[]"
                          },
                          "varargs": true,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Executes the command denoted by the given command identifier.\n\t\t *\n\t\t * * *Note 1:* When executing an editor command not all types are allowed to\n\t\t * be passed as arguments. Allowed are the primitive types `string`, `boolean`,\n\t\t * `number`, `undefined`, and `null`, as well as {@linkcode Position}, {@linkcode Range}, {@linkcode Uri} and {@linkcode Location}.\n\t\t * * *Note 2:* There are no restrictions when executing commands that have been contributed\n\t\t * by extensions.\n\t\t *\n\t\t * @param command Identifier of the command to execute.\n\t\t * @param rest Parameters passed to the command function.\n\t\t * @return A thenable that resolves to the returned value of the given command. Returns `undefined` when\n\t\t * the command handler function doesn't return anything.\n\t\t */\n\t\texport function executeCommand<T = unknown>(command: string, ...rest: any[]): Thenable<T>;"
                    },
                    {
                      "_": 9638,
                      "name": "getCommands",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "core": "array",
                            "targs": [
                              {
                                "core": "string",
                                "isNullable": false,
                                "_": 9638,
                                "source": "string"
                              }
                            ],
                            "isNullable": false,
                            "_": 9638,
                            "source": "string[]"
                          }
                        ],
                        "isNullable": false,
                        "_": 9638,
                        "source": " Thenable<string[]>"
                      },
                      "generics": [],
                      "doc": "Retrieve the list of all available commands. Commands starting with an underscore are\ntreated as internal commands.",
                      "params": [
                        {
                          "name": "filterInternal",
                          "type": {
                            "core": "boolean",
                            "isNullable": false,
                            "_": 9638,
                            "source": " boolean"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Retrieve the list of all available commands. Commands starting with an underscore are\n\t\t * treated as internal commands.\n\t\t *\n\t\t * @param filterInternal Set `true` to not see internal commands (starting with an underscore)\n\t\t * @return Thenable that resolves to a list of command ids.\n\t\t */\n\t\texport function getCommands(filterInternal?: boolean): Thenable<string[]>;"
                    }
                  ],
                  "vars": [],
                  "enums": []
                }
              },
              {
                "_": 9672,
                "namespace": "window",
                "from": "submodule vscode",
                "items": {
                  "structs": [
                    {
                      "isClass": false,
                      "_": -1,
                      "name": "IInline46",
                      "generics": [],
                      "doc": "",
                      "heritage": [],
                      "isInline": true,
                      "source": "",
                      "indexes": [],
                      "ctors": [],
                      "members": [
                        {
                          "doc": "",
                          "isMethod": false,
                          "_": 10002,
                          "source": " canPickMany: true",
                          "name": "canPickMany",
                          "generics": [],
                          "isGetter": false,
                          "isSetter": false,
                          "isNullable": false,
                          "isStatic": false,
                          "isReadonly": false,
                          "isPrivate": false,
                          "type": {
                            "core": "true",
                            "isNullable": false,
                            "_": 10002,
                            "source": " true"
                          }
                        }
                      ],
                      "calls": []
                    },
                    {
                      "isClass": false,
                      "_": -1,
                      "name": "IInline47",
                      "generics": [],
                      "doc": "",
                      "heritage": [],
                      "isInline": true,
                      "source": "",
                      "indexes": [],
                      "ctors": [],
                      "members": [
                        {
                          "doc": "",
                          "isMethod": false,
                          "_": 10022,
                          "source": " canPickMany: true",
                          "name": "canPickMany",
                          "generics": [],
                          "isGetter": false,
                          "isSetter": false,
                          "isNullable": false,
                          "isStatic": false,
                          "isReadonly": false,
                          "isPrivate": false,
                          "type": {
                            "core": "true",
                            "isNullable": false,
                            "_": 10022,
                            "source": " true"
                          }
                        }
                      ],
                      "calls": []
                    },
                    {
                      "isClass": false,
                      "_": -1,
                      "name": "IInline48",
                      "generics": [],
                      "doc": "",
                      "heritage": [],
                      "isInline": true,
                      "source": "",
                      "indexes": [],
                      "ctors": [],
                      "members": [
                        {
                          "doc": "",
                          "isMethod": false,
                          "_": 10115,
                          "source": " log: true",
                          "name": "log",
                          "generics": [],
                          "isGetter": false,
                          "isSetter": false,
                          "isNullable": false,
                          "isStatic": false,
                          "isReadonly": false,
                          "isPrivate": false,
                          "type": {
                            "core": "true",
                            "isNullable": false,
                            "_": 10115,
                            "source": " true"
                          }
                        }
                      ],
                      "calls": []
                    },
                    {
                      "isClass": false,
                      "_": -1,
                      "name": "IInline49",
                      "generics": [],
                      "doc": "",
                      "heritage": [],
                      "isInline": true,
                      "source": "",
                      "indexes": [],
                      "ctors": [],
                      "members": [
                        {
                          "doc": "",
                          "isMethod": false,
                          "_": 10127,
                          "source": " readonly viewColumn: ViewColumn;",
                          "name": "viewColumn",
                          "generics": [],
                          "isGetter": false,
                          "isSetter": false,
                          "isNullable": false,
                          "isStatic": false,
                          "isReadonly": true,
                          "isPrivate": false,
                          "type": {
                            "ref": "ViewColumn",
                            "targs": [],
                            "isNullable": false,
                            "_": 10127,
                            "source": " ViewColumn"
                          }
                        },
                        {
                          "doc": "",
                          "isMethod": false,
                          "_": 10127,
                          "source": " readonly preserveFocus?: boolean",
                          "name": "preserveFocus",
                          "generics": [],
                          "isGetter": false,
                          "isSetter": false,
                          "isNullable": true,
                          "isStatic": false,
                          "isReadonly": true,
                          "isPrivate": false,
                          "type": {
                            "core": "boolean",
                            "isNullable": false,
                            "_": 10127,
                            "source": " boolean"
                          }
                        }
                      ],
                      "calls": []
                    },
                    {
                      "isClass": false,
                      "_": -1,
                      "name": "IInline50",
                      "generics": [],
                      "doc": "",
                      "heritage": [],
                      "isInline": true,
                      "source": "",
                      "indexes": [],
                      "ctors": [],
                      "members": [
                        {
                          "doc": "",
                          "isMethod": false,
                          "_": 10192,
                          "source": " message?: string;",
                          "name": "message",
                          "generics": [],
                          "isGetter": false,
                          "isSetter": false,
                          "isNullable": true,
                          "isStatic": false,
                          "isReadonly": false,
                          "isPrivate": false,
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 10192,
                            "source": " string"
                          }
                        },
                        {
                          "doc": "",
                          "isMethod": false,
                          "_": 10192,
                          "source": " increment?: number",
                          "name": "increment",
                          "generics": [],
                          "isGetter": false,
                          "isSetter": false,
                          "isNullable": true,
                          "isStatic": false,
                          "isReadonly": false,
                          "isPrivate": false,
                          "type": {
                            "core": "number",
                            "isNullable": false,
                            "_": 10192,
                            "source": " number"
                          }
                        }
                      ],
                      "calls": []
                    },
                    {
                      "isClass": false,
                      "_": -1,
                      "name": "IInline52",
                      "generics": [],
                      "doc": "",
                      "heritage": [],
                      "isInline": true,
                      "parent": "IInline51",
                      "source": "",
                      "indexes": [],
                      "ctors": [],
                      "members": [
                        {
                          "doc": "Controls if the webview element itself (iframe) is kept around even when the view\nis no longer visible.\n\nNormally the webview's html context is created when the view becomes visible\nand destroyed when it is hidden. Extensions that have complex state\nor UI can set the `retainContextWhenHidden` to make the editor keep the webview\ncontext around, even when the webview moves to a background tab. When a webview using\n`retainContextWhenHidden` becomes hidden, its scripts and other dynamic content are suspended.\nWhen the view becomes visible again, the context is automatically restored\nin the exact same state it was in originally. You cannot send messages to a\nhidden webview, even with `retainContextWhenHidden` enabled.\n\n`retainContextWhenHidden` has a high memory overhead and should only be used if\nyour view's context cannot be quickly saved and restored.",
                          "isMethod": false,
                          "_": 10331,
                          "source": "\n\t\t\t\t/**\n\t\t\t\t * Controls if the webview element itself (iframe) is kept around even when the view\n\t\t\t\t * is no longer visible.\n\t\t\t\t *\n\t\t\t\t * Normally the webview's html context is created when the view becomes visible\n\t\t\t\t * and destroyed when it is hidden. Extensions that have complex state\n\t\t\t\t * or UI can set the `retainContextWhenHidden` to make the editor keep the webview\n\t\t\t\t * context around, even when the webview moves to a background tab. When a webview using\n\t\t\t\t * `retainContextWhenHidden` becomes hidden, its scripts and other dynamic content are suspended.\n\t\t\t\t * When the view becomes visible again, the context is automatically restored\n\t\t\t\t * in the exact same state it was in originally. You cannot send messages to a\n\t\t\t\t * hidden webview, even with `retainContextWhenHidden` enabled.\n\t\t\t\t *\n\t\t\t\t * `retainContextWhenHidden` has a high memory overhead and should only be used if\n\t\t\t\t * your view's context cannot be quickly saved and restored.\n\t\t\t\t */\n\t\t\t\treadonly retainContextWhenHidden?: boolean;",
                          "name": "retainContextWhenHidden",
                          "generics": [],
                          "isGetter": false,
                          "isSetter": false,
                          "isNullable": true,
                          "isStatic": false,
                          "isReadonly": true,
                          "isPrivate": false,
                          "type": {
                            "core": "boolean",
                            "isNullable": false,
                            "_": 10331,
                            "source": " boolean"
                          }
                        }
                      ],
                      "calls": []
                    },
                    {
                      "isClass": false,
                      "_": -1,
                      "name": "IInline51",
                      "generics": [],
                      "doc": "",
                      "heritage": [],
                      "isInline": true,
                      "source": "",
                      "indexes": [],
                      "ctors": [],
                      "members": [
                        {
                          "doc": "Content settings for the webview created for this view.",
                          "isMethod": false,
                          "_": 10314,
                          "source": "\n\t\t\t/**\n\t\t\t * Content settings for the webview created for this view.\n\t\t\t */\n\t\t\treadonly webviewOptions?: {\n\t\t\t\t/**\n\t\t\t\t * Controls if the webview element itself (iframe) is kept around even when the view\n\t\t\t\t * is no longer visible.\n\t\t\t\t *\n\t\t\t\t * Normally the webview's html context is created when the view becomes visible\n\t\t\t\t * and destroyed when it is hidden. Extensions that have complex state\n\t\t\t\t * or UI can set the `retainContextWhenHidden` to make the editor keep the webview\n\t\t\t\t * context around, even when the webview moves to a background tab. When a webview using\n\t\t\t\t * `retainContextWhenHidden` becomes hidden, its scripts and other dynamic content are suspended.\n\t\t\t\t * When the view becomes visible again, the context is automatically restored\n\t\t\t\t * in the exact same state it was in originally. You cannot send messages to a\n\t\t\t\t * hidden webview, even with `retainContextWhenHidden` enabled.\n\t\t\t\t *\n\t\t\t\t * `retainContextWhenHidden` has a high memory overhead and should only be used if\n\t\t\t\t * your view's context cannot be quickly saved and restored.\n\t\t\t\t */\n\t\t\t\treadonly retainContextWhenHidden?: boolean;\n\t\t\t};",
                          "name": "webviewOptions",
                          "generics": [],
                          "isGetter": false,
                          "isSetter": false,
                          "isNullable": true,
                          "isStatic": false,
                          "isReadonly": true,
                          "isPrivate": false,
                          "type": {
                            "ref": "IInline52",
                            "targs": [],
                            "isNullable": false,
                            "_": 10314,
                            "source": " {\n\t\t\t\t/**\n\t\t\t\t * Controls if the webview element itself (iframe) is kept around even when the view\n\t\t\t\t * is no longer visible.\n\t\t\t\t *\n\t\t\t\t * Normally the webview's html context is created when the view becomes visible\n\t\t\t\t * and destroyed when it is hidden. Extensions that have complex state\n\t\t\t\t * or UI can set the `retainContextWhenHidden` to make the editor keep the webview\n\t\t\t\t * context around, even when the webview moves to a background tab. When a webview using\n\t\t\t\t * `retainContextWhenHidden` becomes hidden, its scripts and other dynamic content are suspended.\n\t\t\t\t * When the view becomes visible again, the context is automatically restored\n\t\t\t\t * in the exact same state it was in originally. You cannot send messages to a\n\t\t\t\t * hidden webview, even with `retainContextWhenHidden` enabled.\n\t\t\t\t *\n\t\t\t\t * `retainContextWhenHidden` has a high memory overhead and should only be used if\n\t\t\t\t * your view's context cannot be quickly saved and restored.\n\t\t\t\t */\n\t\t\t\treadonly retainContextWhenHidden?: boolean;\n\t\t\t}"
                          }
                        }
                      ],
                      "calls": []
                    },
                    {
                      "isClass": false,
                      "_": -1,
                      "name": "IInline53",
                      "generics": [],
                      "doc": "",
                      "heritage": [],
                      "isInline": true,
                      "source": "",
                      "indexes": [],
                      "ctors": [],
                      "members": [
                        {
                          "doc": "Content settings for the webview panels created for this custom editor.",
                          "isMethod": false,
                          "_": 10353,
                          "source": "\n\t\t\t/**\n\t\t\t * Content settings for the webview panels created for this custom editor.\n\t\t\t */\n\t\t\treadonly webviewOptions?: WebviewPanelOptions;",
                          "name": "webviewOptions",
                          "generics": [],
                          "isGetter": false,
                          "isSetter": false,
                          "isNullable": true,
                          "isStatic": false,
                          "isReadonly": true,
                          "isPrivate": false,
                          "type": {
                            "ref": "WebviewPanelOptions",
                            "targs": [],
                            "isNullable": false,
                            "_": 10353,
                            "source": " WebviewPanelOptions"
                          }
                        },
                        {
                          "doc": "Only applies to `CustomReadonlyEditorProvider | CustomEditorProvider`.\n\nIndicates that the provider allows multiple editor instances to be open at the same time for\nthe same resource.\n\nBy default, the editor only allows one editor instance to be open at a time for each resource. If the\nuser tries to open a second editor instance for the resource, the first one is instead moved to where\nthe second one was to be opened.\n\nWhen `supportsMultipleEditorsPerDocument` is enabled, users can split and create copies of the custom\neditor. In this case, the custom editor must make sure it can properly synchronize the states of all\neditor instances for a resource so that they are consistent.",
                          "isMethod": false,
                          "_": 10369,
                          "source": "\n\n\t\t\t/**\n\t\t\t * Only applies to `CustomReadonlyEditorProvider | CustomEditorProvider`.\n\t\t\t *\n\t\t\t * Indicates that the provider allows multiple editor instances to be open at the same time for\n\t\t\t * the same resource.\n\t\t\t *\n\t\t\t * By default, the editor only allows one editor instance to be open at a time for each resource. If the\n\t\t\t * user tries to open a second editor instance for the resource, the first one is instead moved to where\n\t\t\t * the second one was to be opened.\n\t\t\t *\n\t\t\t * When `supportsMultipleEditorsPerDocument` is enabled, users can split and create copies of the custom\n\t\t\t * editor. In this case, the custom editor must make sure it can properly synchronize the states of all\n\t\t\t * editor instances for a resource so that they are consistent.\n\t\t\t */\n\t\t\treadonly supportsMultipleEditorsPerDocument?: boolean;",
                          "name": "supportsMultipleEditorsPerDocument",
                          "generics": [],
                          "isGetter": false,
                          "isSetter": false,
                          "isNullable": true,
                          "isStatic": false,
                          "isReadonly": true,
                          "isPrivate": false,
                          "type": {
                            "core": "boolean",
                            "isNullable": false,
                            "_": 10369,
                            "source": " boolean"
                          }
                        }
                      ],
                      "calls": []
                    }
                  ],
                  "typedefs": [],
                  "modules": [],
                  "funcs": [
                    {
                      "_": 9817,
                      "name": "showTextDocument",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "ref": "TextEditor",
                            "targs": [],
                            "isNullable": false,
                            "_": 9817,
                            "source": "TextEditor"
                          }
                        ],
                        "isNullable": false,
                        "_": 9817,
                        "source": " Thenable<TextEditor>"
                      },
                      "generics": [],
                      "doc": "Show the given document in a text editor. A {@link ViewColumncolumn} can be provided\nto control where the editor is being shown. Might change the {@link window.activeTextEditoractive editor}.\nShow the given document in a text editor. {@link TextDocumentShowOptionsOptions} can be provided\nto control options of the editor is being shown. Might change the {@link window.activeTextEditoractive editor}.\nA short-hand for `openTextDocument(uri).then(document => showTextDocument(document, options))`.",
                      "params": [
                        {
                          "name": "document",
                          "type": {
                            "ref": "TextDocument",
                            "targs": [],
                            "isNullable": false,
                            "_": 9817,
                            "source": " TextDocument"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "column",
                          "type": {
                            "ref": "ViewColumn",
                            "targs": [],
                            "isNullable": false,
                            "_": 9817,
                            "source": " ViewColumn"
                          },
                          "varargs": false,
                          "isNullable": true
                        },
                        {
                          "name": "preserveFocus",
                          "type": {
                            "core": "boolean",
                            "isNullable": false,
                            "_": 9817,
                            "source": " boolean"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Show the given document in a text editor. A {@link ViewColumn column} can be provided\n\t\t * to control where the editor is being shown. Might change the {@link window.activeTextEditor active editor}.\n\t\t *\n\t\t * @param document A text document to be shown.\n\t\t * @param column A view column in which the {@link TextEditor editor} should be shown. The default is the {@link ViewColumn.Active active}.\n\t\t * Columns that do not exist will be created as needed up to the maximum of {@linkcode ViewColumn.Nine}. Use {@linkcode ViewColumn.Beside}\n\t\t * to open the editor to the side of the currently active one.\n\t\t * @param preserveFocus When `true` the editor will not take focus.\n\t\t * @return A promise that resolves to an {@link TextEditor editor}.\n\t\t */\n\t\texport function showTextDocument(document: TextDocument, column?: ViewColumn, preserveFocus?: boolean): Thenable<TextEditor>;"
                    },
                    {
                      "_": 9827,
                      "name": "showTextDocument",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "ref": "TextEditor",
                            "targs": [],
                            "isNullable": false,
                            "_": 9827,
                            "source": "TextEditor"
                          }
                        ],
                        "isNullable": false,
                        "_": 9827,
                        "source": " Thenable<TextEditor>"
                      },
                      "generics": [],
                      "doc": "Show the given document in a text editor. A {@link ViewColumncolumn} can be provided\nto control where the editor is being shown. Might change the {@link window.activeTextEditoractive editor}.\nShow the given document in a text editor. {@link TextDocumentShowOptionsOptions} can be provided\nto control options of the editor is being shown. Might change the {@link window.activeTextEditoractive editor}.\nA short-hand for `openTextDocument(uri).then(document => showTextDocument(document, options))`.",
                      "params": [
                        {
                          "name": "document",
                          "type": {
                            "ref": "TextDocument",
                            "targs": [],
                            "isNullable": false,
                            "_": 9827,
                            "source": " TextDocument"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "options",
                          "type": {
                            "ref": "TextDocumentShowOptions",
                            "targs": [],
                            "isNullable": false,
                            "_": 9827,
                            "source": " TextDocumentShowOptions"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Show the given document in a text editor. {@link TextDocumentShowOptions Options} can be provided\n\t\t * to control options of the editor is being shown. Might change the {@link window.activeTextEditor active editor}.\n\t\t *\n\t\t * @param document A text document to be shown.\n\t\t * @param options {@link TextDocumentShowOptions Editor options} to configure the behavior of showing the {@link TextEditor editor}.\n\t\t * @return A promise that resolves to an {@link TextEditor editor}.\n\t\t */\n\t\texport function showTextDocument(document: TextDocument, options?: TextDocumentShowOptions): Thenable<TextEditor>;"
                    },
                    {
                      "_": 9838,
                      "name": "showTextDocument",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "ref": "TextEditor",
                            "targs": [],
                            "isNullable": false,
                            "_": 9838,
                            "source": "TextEditor"
                          }
                        ],
                        "isNullable": false,
                        "_": 9838,
                        "source": " Thenable<TextEditor>"
                      },
                      "generics": [],
                      "doc": "Show the given document in a text editor. A {@link ViewColumncolumn} can be provided\nto control where the editor is being shown. Might change the {@link window.activeTextEditoractive editor}.\nShow the given document in a text editor. {@link TextDocumentShowOptionsOptions} can be provided\nto control options of the editor is being shown. Might change the {@link window.activeTextEditoractive editor}.\nA short-hand for `openTextDocument(uri).then(document => showTextDocument(document, options))`.",
                      "params": [
                        {
                          "name": "uri",
                          "type": {
                            "ref": "Uri",
                            "targs": [],
                            "isNullable": false,
                            "_": 9838,
                            "source": " Uri"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "options",
                          "type": {
                            "ref": "TextDocumentShowOptions",
                            "targs": [],
                            "isNullable": false,
                            "_": 9838,
                            "source": " TextDocumentShowOptions"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * A short-hand for `openTextDocument(uri).then(document => showTextDocument(document, options))`.\n\t\t *\n\t\t * @see {@link workspace.openTextDocument}\n\t\t *\n\t\t * @param uri A resource identifier.\n\t\t * @param options {@link TextDocumentShowOptions Editor options} to configure the behavior of showing the {@link TextEditor editor}.\n\t\t * @return A promise that resolves to an {@link TextEditor editor}.\n\t\t */\n\t\texport function showTextDocument(uri: Uri, options?: TextDocumentShowOptions): Thenable<TextEditor>;"
                    },
                    {
                      "_": 9848,
                      "name": "showNotebookDocument",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "ref": "NotebookEditor",
                            "targs": [],
                            "isNullable": false,
                            "_": 9848,
                            "source": "NotebookEditor"
                          }
                        ],
                        "isNullable": false,
                        "_": 9848,
                        "source": " Thenable<NotebookEditor>"
                      },
                      "generics": [],
                      "doc": "Show the given {@link NotebookDocument} in a {@link NotebookEditornotebook editor}.",
                      "params": [
                        {
                          "name": "document",
                          "type": {
                            "ref": "NotebookDocument",
                            "targs": [],
                            "isNullable": false,
                            "_": 9848,
                            "source": " NotebookDocument"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "options",
                          "type": {
                            "ref": "NotebookDocumentShowOptions",
                            "targs": [],
                            "isNullable": false,
                            "_": 9848,
                            "source": " NotebookDocumentShowOptions"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Show the given {@link NotebookDocument} in a {@link NotebookEditor notebook editor}.\n\t\t *\n\t\t * @param document A text document to be shown.\n\t\t * @param options {@link NotebookDocumentShowOptions Editor options} to configure the behavior of showing the {@link NotebookEditor notebook editor}.\n\t\t *\n\t\t * @return A promise that resolves to an {@link NotebookEditor notebook editor}.\n\t\t */\n\t\texport function showNotebookDocument(document: NotebookDocument, options?: NotebookDocumentShowOptions): Thenable<NotebookEditor>;"
                    },
                    {
                      "_": 9856,
                      "name": "createTextEditorDecorationType",
                      "type": {
                        "ref": "TextEditorDecorationType",
                        "targs": [],
                        "isNullable": false,
                        "_": 9856,
                        "source": " TextEditorDecorationType"
                      },
                      "generics": [],
                      "doc": "Create a TextEditorDecorationType that can be used to add decorations to text editors.",
                      "params": [
                        {
                          "name": "options",
                          "type": {
                            "ref": "DecorationRenderOptions",
                            "targs": [],
                            "isNullable": false,
                            "_": 9856,
                            "source": " DecorationRenderOptions"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Create a TextEditorDecorationType that can be used to add decorations to text editors.\n\t\t *\n\t\t * @param options Rendering options for the decoration type.\n\t\t * @return A new decoration type instance.\n\t\t */\n\t\texport function createTextEditorDecorationType(options: DecorationRenderOptions): TextEditorDecorationType;"
                    },
                    {
                      "_": 9866,
                      "name": "showInformationMessage",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "union": [
                              {
                                "ref": "T",
                                "targs": [],
                                "isNullable": false,
                                "_": 9866,
                                "source": "T"
                              },
                              {
                                "core": "undefined",
                                "isNullable": false,
                                "_": 9866,
                                "source": " undefined"
                              }
                            ],
                            "isNullable": false,
                            "_": 9866,
                            "source": "T | undefined"
                          }
                        ],
                        "isNullable": false,
                        "_": 9866,
                        "source": " Thenable<T | undefined>"
                      },
                      "generics": [
                        {
                          "name": "T",
                          "constraint": {
                            "core": "string",
                            "isNullable": false,
                            "_": 9866,
                            "source": " string"
                          },
                          "_": 9866,
                          "source": "T extends string"
                        }
                      ],
                      "doc": "Show an information message to users. Optionally provide an array of items which will be presented as\nclickable buttons.\nShow an information message.",
                      "params": [
                        {
                          "name": "message",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 9866,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "items",
                          "type": {
                            "core": "array",
                            "targs": [
                              {
                                "ref": "T",
                                "targs": [],
                                "isNullable": false,
                                "_": 9866,
                                "source": " T"
                              }
                            ],
                            "isNullable": false,
                            "_": 9866,
                            "source": " T[]"
                          },
                          "varargs": true,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Show an information message to users. Optionally provide an array of items which will be presented as\n\t\t * clickable buttons.\n\t\t *\n\t\t * @param message The message to show.\n\t\t * @param items A set of items that will be rendered as actions in the message.\n\t\t * @return A thenable that resolves to the selected item or `undefined` when being dismissed.\n\t\t */\n\t\texport function showInformationMessage<T extends string>(message: string, ...items: T[]): Thenable<T | undefined>;"
                    },
                    {
                      "_": 9877,
                      "name": "showInformationMessage",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "union": [
                              {
                                "ref": "T",
                                "targs": [],
                                "isNullable": false,
                                "_": 9877,
                                "source": "T"
                              },
                              {
                                "core": "undefined",
                                "isNullable": false,
                                "_": 9877,
                                "source": " undefined"
                              }
                            ],
                            "isNullable": false,
                            "_": 9877,
                            "source": "T | undefined"
                          }
                        ],
                        "isNullable": false,
                        "_": 9877,
                        "source": " Thenable<T | undefined>"
                      },
                      "generics": [
                        {
                          "name": "T",
                          "constraint": {
                            "core": "string",
                            "isNullable": false,
                            "_": 9877,
                            "source": " string"
                          },
                          "_": 9877,
                          "source": "T extends string"
                        }
                      ],
                      "doc": "Show an information message to users. Optionally provide an array of items which will be presented as\nclickable buttons.\nShow an information message.",
                      "params": [
                        {
                          "name": "message",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 9877,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "options",
                          "type": {
                            "ref": "MessageOptions",
                            "targs": [],
                            "isNullable": false,
                            "_": 9877,
                            "source": " MessageOptions"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "items",
                          "type": {
                            "core": "array",
                            "targs": [
                              {
                                "ref": "T",
                                "targs": [],
                                "isNullable": false,
                                "_": 9877,
                                "source": " T"
                              }
                            ],
                            "isNullable": false,
                            "_": 9877,
                            "source": " T[]"
                          },
                          "varargs": true,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Show an information message to users. Optionally provide an array of items which will be presented as\n\t\t * clickable buttons.\n\t\t *\n\t\t * @param message The message to show.\n\t\t * @param options Configures the behaviour of the message.\n\t\t * @param items A set of items that will be rendered as actions in the message.\n\t\t * @return A thenable that resolves to the selected item or `undefined` when being dismissed.\n\t\t */\n\t\texport function showInformationMessage<T extends string>(message: string, options: MessageOptions, ...items: T[]): Thenable<T | undefined>;"
                    },
                    {
                      "_": 9888,
                      "name": "showInformationMessage",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "union": [
                              {
                                "ref": "T",
                                "targs": [],
                                "isNullable": false,
                                "_": 9888,
                                "source": "T"
                              },
                              {
                                "core": "undefined",
                                "isNullable": false,
                                "_": 9888,
                                "source": " undefined"
                              }
                            ],
                            "isNullable": false,
                            "_": 9888,
                            "source": "T | undefined"
                          }
                        ],
                        "isNullable": false,
                        "_": 9888,
                        "source": " Thenable<T | undefined>"
                      },
                      "generics": [
                        {
                          "name": "T",
                          "constraint": {
                            "ref": "MessageItem",
                            "targs": [],
                            "isNullable": false,
                            "_": 9888,
                            "source": " MessageItem"
                          },
                          "_": 9888,
                          "source": "T extends MessageItem"
                        }
                      ],
                      "doc": "Show an information message to users. Optionally provide an array of items which will be presented as\nclickable buttons.\nShow an information message.",
                      "params": [
                        {
                          "name": "message",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 9888,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "items",
                          "type": {
                            "core": "array",
                            "targs": [
                              {
                                "ref": "T",
                                "targs": [],
                                "isNullable": false,
                                "_": 9888,
                                "source": " T"
                              }
                            ],
                            "isNullable": false,
                            "_": 9888,
                            "source": " T[]"
                          },
                          "varargs": true,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Show an information message.\n\t\t *\n\t\t * @see {@link window.showInformationMessage showInformationMessage}\n\t\t *\n\t\t * @param message The message to show.\n\t\t * @param items A set of items that will be rendered as actions in the message.\n\t\t * @return A thenable that resolves to the selected item or `undefined` when being dismissed.\n\t\t */\n\t\texport function showInformationMessage<T extends MessageItem>(message: string, ...items: T[]): Thenable<T | undefined>;"
                    },
                    {
                      "_": 9900,
                      "name": "showInformationMessage",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "union": [
                              {
                                "ref": "T",
                                "targs": [],
                                "isNullable": false,
                                "_": 9900,
                                "source": "T"
                              },
                              {
                                "core": "undefined",
                                "isNullable": false,
                                "_": 9900,
                                "source": " undefined"
                              }
                            ],
                            "isNullable": false,
                            "_": 9900,
                            "source": "T | undefined"
                          }
                        ],
                        "isNullable": false,
                        "_": 9900,
                        "source": " Thenable<T | undefined>"
                      },
                      "generics": [
                        {
                          "name": "T",
                          "constraint": {
                            "ref": "MessageItem",
                            "targs": [],
                            "isNullable": false,
                            "_": 9900,
                            "source": " MessageItem"
                          },
                          "_": 9900,
                          "source": "T extends MessageItem"
                        }
                      ],
                      "doc": "Show an information message to users. Optionally provide an array of items which will be presented as\nclickable buttons.\nShow an information message.",
                      "params": [
                        {
                          "name": "message",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 9900,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "options",
                          "type": {
                            "ref": "MessageOptions",
                            "targs": [],
                            "isNullable": false,
                            "_": 9900,
                            "source": " MessageOptions"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "items",
                          "type": {
                            "core": "array",
                            "targs": [
                              {
                                "ref": "T",
                                "targs": [],
                                "isNullable": false,
                                "_": 9900,
                                "source": " T"
                              }
                            ],
                            "isNullable": false,
                            "_": 9900,
                            "source": " T[]"
                          },
                          "varargs": true,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Show an information message.\n\t\t *\n\t\t * @see {@link window.showInformationMessage showInformationMessage}\n\t\t *\n\t\t * @param message The message to show.\n\t\t * @param options Configures the behaviour of the message.\n\t\t * @param items A set of items that will be rendered as actions in the message.\n\t\t * @return A thenable that resolves to the selected item or `undefined` when being dismissed.\n\t\t */\n\t\texport function showInformationMessage<T extends MessageItem>(message: string, options: MessageOptions, ...items: T[]): Thenable<T | undefined>;"
                    },
                    {
                      "_": 9911,
                      "name": "showWarningMessage",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "union": [
                              {
                                "ref": "T",
                                "targs": [],
                                "isNullable": false,
                                "_": 9911,
                                "source": "T"
                              },
                              {
                                "core": "undefined",
                                "isNullable": false,
                                "_": 9911,
                                "source": " undefined"
                              }
                            ],
                            "isNullable": false,
                            "_": 9911,
                            "source": "T | undefined"
                          }
                        ],
                        "isNullable": false,
                        "_": 9911,
                        "source": " Thenable<T | undefined>"
                      },
                      "generics": [
                        {
                          "name": "T",
                          "constraint": {
                            "core": "string",
                            "isNullable": false,
                            "_": 9911,
                            "source": " string"
                          },
                          "_": 9911,
                          "source": "T extends string"
                        }
                      ],
                      "doc": "Show a warning message.",
                      "params": [
                        {
                          "name": "message",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 9911,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "items",
                          "type": {
                            "core": "array",
                            "targs": [
                              {
                                "ref": "T",
                                "targs": [],
                                "isNullable": false,
                                "_": 9911,
                                "source": " T"
                              }
                            ],
                            "isNullable": false,
                            "_": 9911,
                            "source": " T[]"
                          },
                          "varargs": true,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Show a warning message.\n\t\t *\n\t\t * @see {@link window.showInformationMessage showInformationMessage}\n\t\t *\n\t\t * @param message The message to show.\n\t\t * @param items A set of items that will be rendered as actions in the message.\n\t\t * @return A thenable that resolves to the selected item or `undefined` when being dismissed.\n\t\t */\n\t\texport function showWarningMessage<T extends string>(message: string, ...items: T[]): Thenable<T | undefined>;"
                    },
                    {
                      "_": 9923,
                      "name": "showWarningMessage",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "union": [
                              {
                                "ref": "T",
                                "targs": [],
                                "isNullable": false,
                                "_": 9923,
                                "source": "T"
                              },
                              {
                                "core": "undefined",
                                "isNullable": false,
                                "_": 9923,
                                "source": " undefined"
                              }
                            ],
                            "isNullable": false,
                            "_": 9923,
                            "source": "T | undefined"
                          }
                        ],
                        "isNullable": false,
                        "_": 9923,
                        "source": " Thenable<T | undefined>"
                      },
                      "generics": [
                        {
                          "name": "T",
                          "constraint": {
                            "core": "string",
                            "isNullable": false,
                            "_": 9923,
                            "source": " string"
                          },
                          "_": 9923,
                          "source": "T extends string"
                        }
                      ],
                      "doc": "Show a warning message.",
                      "params": [
                        {
                          "name": "message",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 9923,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "options",
                          "type": {
                            "ref": "MessageOptions",
                            "targs": [],
                            "isNullable": false,
                            "_": 9923,
                            "source": " MessageOptions"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "items",
                          "type": {
                            "core": "array",
                            "targs": [
                              {
                                "ref": "T",
                                "targs": [],
                                "isNullable": false,
                                "_": 9923,
                                "source": " T"
                              }
                            ],
                            "isNullable": false,
                            "_": 9923,
                            "source": " T[]"
                          },
                          "varargs": true,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Show a warning message.\n\t\t *\n\t\t * @see {@link window.showInformationMessage showInformationMessage}\n\t\t *\n\t\t * @param message The message to show.\n\t\t * @param options Configures the behaviour of the message.\n\t\t * @param items A set of items that will be rendered as actions in the message.\n\t\t * @return A thenable that resolves to the selected item or `undefined` when being dismissed.\n\t\t */\n\t\texport function showWarningMessage<T extends string>(message: string, options: MessageOptions, ...items: T[]): Thenable<T | undefined>;"
                    },
                    {
                      "_": 9934,
                      "name": "showWarningMessage",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "union": [
                              {
                                "ref": "T",
                                "targs": [],
                                "isNullable": false,
                                "_": 9934,
                                "source": "T"
                              },
                              {
                                "core": "undefined",
                                "isNullable": false,
                                "_": 9934,
                                "source": " undefined"
                              }
                            ],
                            "isNullable": false,
                            "_": 9934,
                            "source": "T | undefined"
                          }
                        ],
                        "isNullable": false,
                        "_": 9934,
                        "source": " Thenable<T | undefined>"
                      },
                      "generics": [
                        {
                          "name": "T",
                          "constraint": {
                            "ref": "MessageItem",
                            "targs": [],
                            "isNullable": false,
                            "_": 9934,
                            "source": " MessageItem"
                          },
                          "_": 9934,
                          "source": "T extends MessageItem"
                        }
                      ],
                      "doc": "Show a warning message.",
                      "params": [
                        {
                          "name": "message",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 9934,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "items",
                          "type": {
                            "core": "array",
                            "targs": [
                              {
                                "ref": "T",
                                "targs": [],
                                "isNullable": false,
                                "_": 9934,
                                "source": " T"
                              }
                            ],
                            "isNullable": false,
                            "_": 9934,
                            "source": " T[]"
                          },
                          "varargs": true,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Show a warning message.\n\t\t *\n\t\t * @see {@link window.showInformationMessage showInformationMessage}\n\t\t *\n\t\t * @param message The message to show.\n\t\t * @param items A set of items that will be rendered as actions in the message.\n\t\t * @return A thenable that resolves to the selected item or `undefined` when being dismissed.\n\t\t */\n\t\texport function showWarningMessage<T extends MessageItem>(message: string, ...items: T[]): Thenable<T | undefined>;"
                    },
                    {
                      "_": 9946,
                      "name": "showWarningMessage",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "union": [
                              {
                                "ref": "T",
                                "targs": [],
                                "isNullable": false,
                                "_": 9946,
                                "source": "T"
                              },
                              {
                                "core": "undefined",
                                "isNullable": false,
                                "_": 9946,
                                "source": " undefined"
                              }
                            ],
                            "isNullable": false,
                            "_": 9946,
                            "source": "T | undefined"
                          }
                        ],
                        "isNullable": false,
                        "_": 9946,
                        "source": " Thenable<T | undefined>"
                      },
                      "generics": [
                        {
                          "name": "T",
                          "constraint": {
                            "ref": "MessageItem",
                            "targs": [],
                            "isNullable": false,
                            "_": 9946,
                            "source": " MessageItem"
                          },
                          "_": 9946,
                          "source": "T extends MessageItem"
                        }
                      ],
                      "doc": "Show a warning message.",
                      "params": [
                        {
                          "name": "message",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 9946,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "options",
                          "type": {
                            "ref": "MessageOptions",
                            "targs": [],
                            "isNullable": false,
                            "_": 9946,
                            "source": " MessageOptions"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "items",
                          "type": {
                            "core": "array",
                            "targs": [
                              {
                                "ref": "T",
                                "targs": [],
                                "isNullable": false,
                                "_": 9946,
                                "source": " T"
                              }
                            ],
                            "isNullable": false,
                            "_": 9946,
                            "source": " T[]"
                          },
                          "varargs": true,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Show a warning message.\n\t\t *\n\t\t * @see {@link window.showInformationMessage showInformationMessage}\n\t\t *\n\t\t * @param message The message to show.\n\t\t * @param options Configures the behaviour of the message.\n\t\t * @param items A set of items that will be rendered as actions in the message.\n\t\t * @return A thenable that resolves to the selected item or `undefined` when being dismissed.\n\t\t */\n\t\texport function showWarningMessage<T extends MessageItem>(message: string, options: MessageOptions, ...items: T[]): Thenable<T | undefined>;"
                    },
                    {
                      "_": 9957,
                      "name": "showErrorMessage",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "union": [
                              {
                                "ref": "T",
                                "targs": [],
                                "isNullable": false,
                                "_": 9957,
                                "source": "T"
                              },
                              {
                                "core": "undefined",
                                "isNullable": false,
                                "_": 9957,
                                "source": " undefined"
                              }
                            ],
                            "isNullable": false,
                            "_": 9957,
                            "source": "T | undefined"
                          }
                        ],
                        "isNullable": false,
                        "_": 9957,
                        "source": " Thenable<T | undefined>"
                      },
                      "generics": [
                        {
                          "name": "T",
                          "constraint": {
                            "core": "string",
                            "isNullable": false,
                            "_": 9957,
                            "source": " string"
                          },
                          "_": 9957,
                          "source": "T extends string"
                        }
                      ],
                      "doc": "Show an error message.",
                      "params": [
                        {
                          "name": "message",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 9957,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "items",
                          "type": {
                            "core": "array",
                            "targs": [
                              {
                                "ref": "T",
                                "targs": [],
                                "isNullable": false,
                                "_": 9957,
                                "source": " T"
                              }
                            ],
                            "isNullable": false,
                            "_": 9957,
                            "source": " T[]"
                          },
                          "varargs": true,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Show an error message.\n\t\t *\n\t\t * @see {@link window.showInformationMessage showInformationMessage}\n\t\t *\n\t\t * @param message The message to show.\n\t\t * @param items A set of items that will be rendered as actions in the message.\n\t\t * @return A thenable that resolves to the selected item or `undefined` when being dismissed.\n\t\t */\n\t\texport function showErrorMessage<T extends string>(message: string, ...items: T[]): Thenable<T | undefined>;"
                    },
                    {
                      "_": 9969,
                      "name": "showErrorMessage",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "union": [
                              {
                                "ref": "T",
                                "targs": [],
                                "isNullable": false,
                                "_": 9969,
                                "source": "T"
                              },
                              {
                                "core": "undefined",
                                "isNullable": false,
                                "_": 9969,
                                "source": " undefined"
                              }
                            ],
                            "isNullable": false,
                            "_": 9969,
                            "source": "T | undefined"
                          }
                        ],
                        "isNullable": false,
                        "_": 9969,
                        "source": " Thenable<T | undefined>"
                      },
                      "generics": [
                        {
                          "name": "T",
                          "constraint": {
                            "core": "string",
                            "isNullable": false,
                            "_": 9969,
                            "source": " string"
                          },
                          "_": 9969,
                          "source": "T extends string"
                        }
                      ],
                      "doc": "Show an error message.",
                      "params": [
                        {
                          "name": "message",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 9969,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "options",
                          "type": {
                            "ref": "MessageOptions",
                            "targs": [],
                            "isNullable": false,
                            "_": 9969,
                            "source": " MessageOptions"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "items",
                          "type": {
                            "core": "array",
                            "targs": [
                              {
                                "ref": "T",
                                "targs": [],
                                "isNullable": false,
                                "_": 9969,
                                "source": " T"
                              }
                            ],
                            "isNullable": false,
                            "_": 9969,
                            "source": " T[]"
                          },
                          "varargs": true,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Show an error message.\n\t\t *\n\t\t * @see {@link window.showInformationMessage showInformationMessage}\n\t\t *\n\t\t * @param message The message to show.\n\t\t * @param options Configures the behaviour of the message.\n\t\t * @param items A set of items that will be rendered as actions in the message.\n\t\t * @return A thenable that resolves to the selected item or `undefined` when being dismissed.\n\t\t */\n\t\texport function showErrorMessage<T extends string>(message: string, options: MessageOptions, ...items: T[]): Thenable<T | undefined>;"
                    },
                    {
                      "_": 9980,
                      "name": "showErrorMessage",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "union": [
                              {
                                "ref": "T",
                                "targs": [],
                                "isNullable": false,
                                "_": 9980,
                                "source": "T"
                              },
                              {
                                "core": "undefined",
                                "isNullable": false,
                                "_": 9980,
                                "source": " undefined"
                              }
                            ],
                            "isNullable": false,
                            "_": 9980,
                            "source": "T | undefined"
                          }
                        ],
                        "isNullable": false,
                        "_": 9980,
                        "source": " Thenable<T | undefined>"
                      },
                      "generics": [
                        {
                          "name": "T",
                          "constraint": {
                            "ref": "MessageItem",
                            "targs": [],
                            "isNullable": false,
                            "_": 9980,
                            "source": " MessageItem"
                          },
                          "_": 9980,
                          "source": "T extends MessageItem"
                        }
                      ],
                      "doc": "Show an error message.",
                      "params": [
                        {
                          "name": "message",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 9980,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "items",
                          "type": {
                            "core": "array",
                            "targs": [
                              {
                                "ref": "T",
                                "targs": [],
                                "isNullable": false,
                                "_": 9980,
                                "source": " T"
                              }
                            ],
                            "isNullable": false,
                            "_": 9980,
                            "source": " T[]"
                          },
                          "varargs": true,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Show an error message.\n\t\t *\n\t\t * @see {@link window.showInformationMessage showInformationMessage}\n\t\t *\n\t\t * @param message The message to show.\n\t\t * @param items A set of items that will be rendered as actions in the message.\n\t\t * @return A thenable that resolves to the selected item or `undefined` when being dismissed.\n\t\t */\n\t\texport function showErrorMessage<T extends MessageItem>(message: string, ...items: T[]): Thenable<T | undefined>;"
                    },
                    {
                      "_": 9992,
                      "name": "showErrorMessage",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "union": [
                              {
                                "ref": "T",
                                "targs": [],
                                "isNullable": false,
                                "_": 9992,
                                "source": "T"
                              },
                              {
                                "core": "undefined",
                                "isNullable": false,
                                "_": 9992,
                                "source": " undefined"
                              }
                            ],
                            "isNullable": false,
                            "_": 9992,
                            "source": "T | undefined"
                          }
                        ],
                        "isNullable": false,
                        "_": 9992,
                        "source": " Thenable<T | undefined>"
                      },
                      "generics": [
                        {
                          "name": "T",
                          "constraint": {
                            "ref": "MessageItem",
                            "targs": [],
                            "isNullable": false,
                            "_": 9992,
                            "source": " MessageItem"
                          },
                          "_": 9992,
                          "source": "T extends MessageItem"
                        }
                      ],
                      "doc": "Show an error message.",
                      "params": [
                        {
                          "name": "message",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 9992,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "options",
                          "type": {
                            "ref": "MessageOptions",
                            "targs": [],
                            "isNullable": false,
                            "_": 9992,
                            "source": " MessageOptions"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "items",
                          "type": {
                            "core": "array",
                            "targs": [
                              {
                                "ref": "T",
                                "targs": [],
                                "isNullable": false,
                                "_": 9992,
                                "source": " T"
                              }
                            ],
                            "isNullable": false,
                            "_": 9992,
                            "source": " T[]"
                          },
                          "varargs": true,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Show an error message.\n\t\t *\n\t\t * @see {@link window.showInformationMessage showInformationMessage}\n\t\t *\n\t\t * @param message The message to show.\n\t\t * @param options Configures the behaviour of the message.\n\t\t * @param items A set of items that will be rendered as actions in the message.\n\t\t * @return A thenable that resolves to the selected item or `undefined` when being dismissed.\n\t\t */\n\t\texport function showErrorMessage<T extends MessageItem>(message: string, options: MessageOptions, ...items: T[]): Thenable<T | undefined>;"
                    },
                    {
                      "_": 10002,
                      "name": "showQuickPick",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "union": [
                              {
                                "core": "array",
                                "targs": [
                                  {
                                    "core": "string",
                                    "isNullable": false,
                                    "_": 10002,
                                    "source": "string"
                                  }
                                ],
                                "isNullable": false,
                                "_": 10002,
                                "source": "string[]"
                              },
                              {
                                "core": "undefined",
                                "isNullable": false,
                                "_": 10002,
                                "source": " undefined"
                              }
                            ],
                            "isNullable": false,
                            "_": 10002,
                            "source": "string[] | undefined"
                          }
                        ],
                        "isNullable": false,
                        "_": 10002,
                        "source": " Thenable<string[] | undefined>"
                      },
                      "generics": [],
                      "doc": "Shows a selection list allowing multiple selections.\nShows a selection list.",
                      "params": [
                        {
                          "name": "items",
                          "type": {
                            "union": [
                              {
                                "operator": 146,
                                "type": {
                                  "core": "array",
                                  "targs": [
                                    {
                                      "core": "string",
                                      "isNullable": false,
                                      "_": 10002,
                                      "source": " string"
                                    }
                                  ],
                                  "isNullable": false,
                                  "_": 10002,
                                  "source": " string[]"
                                },
                                "isNullable": false,
                                "_": 10002,
                                "source": " readonly string[]"
                              },
                              {
                                "ref": "Thenable",
                                "targs": [
                                  {
                                    "operator": 146,
                                    "type": {
                                      "core": "array",
                                      "targs": [
                                        {
                                          "core": "string",
                                          "isNullable": false,
                                          "_": 10002,
                                          "source": " string"
                                        }
                                      ],
                                      "isNullable": false,
                                      "_": 10002,
                                      "source": " string[]"
                                    },
                                    "isNullable": false,
                                    "_": 10002,
                                    "source": "readonly string[]"
                                  }
                                ],
                                "isNullable": false,
                                "_": 10002,
                                "source": " Thenable<readonly string[]>"
                              }
                            ],
                            "isNullable": false,
                            "_": 10002,
                            "source": " readonly string[] | Thenable<readonly string[]>"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "options",
                          "type": {
                            "intersect": [
                              {
                                "ref": "QuickPickOptions",
                                "targs": [],
                                "isNullable": false,
                                "_": 10002,
                                "source": " QuickPickOptions"
                              },
                              {
                                "ref": "IInline46",
                                "targs": [],
                                "isNullable": false,
                                "_": 10002,
                                "source": " { canPickMany: true }"
                              }
                            ],
                            "isNullable": false,
                            "_": 10002,
                            "source": " QuickPickOptions & { canPickMany: true }"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "token",
                          "type": {
                            "ref": "CancellationToken",
                            "targs": [],
                            "isNullable": false,
                            "_": 10002,
                            "source": " CancellationToken"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Shows a selection list allowing multiple selections.\n\t\t *\n\t\t * @param items An array of strings, or a promise that resolves to an array of strings.\n\t\t * @param options Configures the behavior of the selection list.\n\t\t * @param token A token that can be used to signal cancellation.\n\t\t * @return A promise that resolves to the selected items or `undefined`.\n\t\t */\n\t\texport function showQuickPick(items: readonly string[] | Thenable<readonly string[]>, options: QuickPickOptions & { canPickMany: true }, token?: CancellationToken): Thenable<string[] | undefined>;"
                    },
                    {
                      "_": 10012,
                      "name": "showQuickPick",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "union": [
                              {
                                "core": "string",
                                "isNullable": false,
                                "_": 10012,
                                "source": "string"
                              },
                              {
                                "core": "undefined",
                                "isNullable": false,
                                "_": 10012,
                                "source": " undefined"
                              }
                            ],
                            "isNullable": false,
                            "_": 10012,
                            "source": "string | undefined"
                          }
                        ],
                        "isNullable": false,
                        "_": 10012,
                        "source": " Thenable<string | undefined>"
                      },
                      "generics": [],
                      "doc": "Shows a selection list allowing multiple selections.\nShows a selection list.",
                      "params": [
                        {
                          "name": "items",
                          "type": {
                            "union": [
                              {
                                "operator": 146,
                                "type": {
                                  "core": "array",
                                  "targs": [
                                    {
                                      "core": "string",
                                      "isNullable": false,
                                      "_": 10012,
                                      "source": " string"
                                    }
                                  ],
                                  "isNullable": false,
                                  "_": 10012,
                                  "source": " string[]"
                                },
                                "isNullable": false,
                                "_": 10012,
                                "source": " readonly string[]"
                              },
                              {
                                "ref": "Thenable",
                                "targs": [
                                  {
                                    "operator": 146,
                                    "type": {
                                      "core": "array",
                                      "targs": [
                                        {
                                          "core": "string",
                                          "isNullable": false,
                                          "_": 10012,
                                          "source": " string"
                                        }
                                      ],
                                      "isNullable": false,
                                      "_": 10012,
                                      "source": " string[]"
                                    },
                                    "isNullable": false,
                                    "_": 10012,
                                    "source": "readonly string[]"
                                  }
                                ],
                                "isNullable": false,
                                "_": 10012,
                                "source": " Thenable<readonly string[]>"
                              }
                            ],
                            "isNullable": false,
                            "_": 10012,
                            "source": " readonly string[] | Thenable<readonly string[]>"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "options",
                          "type": {
                            "ref": "QuickPickOptions",
                            "targs": [],
                            "isNullable": false,
                            "_": 10012,
                            "source": " QuickPickOptions"
                          },
                          "varargs": false,
                          "isNullable": true
                        },
                        {
                          "name": "token",
                          "type": {
                            "ref": "CancellationToken",
                            "targs": [],
                            "isNullable": false,
                            "_": 10012,
                            "source": " CancellationToken"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Shows a selection list.\n\t\t *\n\t\t * @param items An array of strings, or a promise that resolves to an array of strings.\n\t\t * @param options Configures the behavior of the selection list.\n\t\t * @param token A token that can be used to signal cancellation.\n\t\t * @return A promise that resolves to the selection or `undefined`.\n\t\t */\n\t\texport function showQuickPick(items: readonly string[] | Thenable<readonly string[]>, options?: QuickPickOptions, token?: CancellationToken): Thenable<string | undefined>;"
                    },
                    {
                      "_": 10022,
                      "name": "showQuickPick",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "union": [
                              {
                                "core": "array",
                                "targs": [
                                  {
                                    "ref": "T",
                                    "targs": [],
                                    "isNullable": false,
                                    "_": 10022,
                                    "source": "T"
                                  }
                                ],
                                "isNullable": false,
                                "_": 10022,
                                "source": "T[]"
                              },
                              {
                                "core": "undefined",
                                "isNullable": false,
                                "_": 10022,
                                "source": " undefined"
                              }
                            ],
                            "isNullable": false,
                            "_": 10022,
                            "source": "T[] | undefined"
                          }
                        ],
                        "isNullable": false,
                        "_": 10022,
                        "source": " Thenable<T[] | undefined>"
                      },
                      "generics": [
                        {
                          "name": "T",
                          "constraint": {
                            "ref": "QuickPickItem",
                            "targs": [],
                            "isNullable": false,
                            "_": 10022,
                            "source": " QuickPickItem"
                          },
                          "_": 10022,
                          "source": "T extends QuickPickItem"
                        }
                      ],
                      "doc": "Shows a selection list allowing multiple selections.\nShows a selection list.",
                      "params": [
                        {
                          "name": "items",
                          "type": {
                            "union": [
                              {
                                "operator": 146,
                                "type": {
                                  "core": "array",
                                  "targs": [
                                    {
                                      "ref": "T",
                                      "targs": [],
                                      "isNullable": false,
                                      "_": 10022,
                                      "source": " T"
                                    }
                                  ],
                                  "isNullable": false,
                                  "_": 10022,
                                  "source": " T[]"
                                },
                                "isNullable": false,
                                "_": 10022,
                                "source": " readonly T[]"
                              },
                              {
                                "ref": "Thenable",
                                "targs": [
                                  {
                                    "operator": 146,
                                    "type": {
                                      "core": "array",
                                      "targs": [
                                        {
                                          "ref": "T",
                                          "targs": [],
                                          "isNullable": false,
                                          "_": 10022,
                                          "source": " T"
                                        }
                                      ],
                                      "isNullable": false,
                                      "_": 10022,
                                      "source": " T[]"
                                    },
                                    "isNullable": false,
                                    "_": 10022,
                                    "source": "readonly T[]"
                                  }
                                ],
                                "isNullable": false,
                                "_": 10022,
                                "source": " Thenable<readonly T[]>"
                              }
                            ],
                            "isNullable": false,
                            "_": 10022,
                            "source": " readonly T[] | Thenable<readonly T[]>"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "options",
                          "type": {
                            "intersect": [
                              {
                                "ref": "QuickPickOptions",
                                "targs": [],
                                "isNullable": false,
                                "_": 10022,
                                "source": " QuickPickOptions"
                              },
                              {
                                "ref": "IInline47",
                                "targs": [],
                                "isNullable": false,
                                "_": 10022,
                                "source": " { canPickMany: true }"
                              }
                            ],
                            "isNullable": false,
                            "_": 10022,
                            "source": " QuickPickOptions & { canPickMany: true }"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "token",
                          "type": {
                            "ref": "CancellationToken",
                            "targs": [],
                            "isNullable": false,
                            "_": 10022,
                            "source": " CancellationToken"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Shows a selection list allowing multiple selections.\n\t\t *\n\t\t * @param items An array of items, or a promise that resolves to an array of items.\n\t\t * @param options Configures the behavior of the selection list.\n\t\t * @param token A token that can be used to signal cancellation.\n\t\t * @return A promise that resolves to the selected items or `undefined`.\n\t\t */\n\t\texport function showQuickPick<T extends QuickPickItem>(items: readonly T[] | Thenable<readonly T[]>, options: QuickPickOptions & { canPickMany: true }, token?: CancellationToken): Thenable<T[] | undefined>;"
                    },
                    {
                      "_": 10032,
                      "name": "showQuickPick",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "union": [
                              {
                                "ref": "T",
                                "targs": [],
                                "isNullable": false,
                                "_": 10032,
                                "source": "T"
                              },
                              {
                                "core": "undefined",
                                "isNullable": false,
                                "_": 10032,
                                "source": " undefined"
                              }
                            ],
                            "isNullable": false,
                            "_": 10032,
                            "source": "T | undefined"
                          }
                        ],
                        "isNullable": false,
                        "_": 10032,
                        "source": " Thenable<T | undefined>"
                      },
                      "generics": [
                        {
                          "name": "T",
                          "constraint": {
                            "ref": "QuickPickItem",
                            "targs": [],
                            "isNullable": false,
                            "_": 10032,
                            "source": " QuickPickItem"
                          },
                          "_": 10032,
                          "source": "T extends QuickPickItem"
                        }
                      ],
                      "doc": "Shows a selection list allowing multiple selections.\nShows a selection list.",
                      "params": [
                        {
                          "name": "items",
                          "type": {
                            "union": [
                              {
                                "operator": 146,
                                "type": {
                                  "core": "array",
                                  "targs": [
                                    {
                                      "ref": "T",
                                      "targs": [],
                                      "isNullable": false,
                                      "_": 10032,
                                      "source": " T"
                                    }
                                  ],
                                  "isNullable": false,
                                  "_": 10032,
                                  "source": " T[]"
                                },
                                "isNullable": false,
                                "_": 10032,
                                "source": " readonly T[]"
                              },
                              {
                                "ref": "Thenable",
                                "targs": [
                                  {
                                    "operator": 146,
                                    "type": {
                                      "core": "array",
                                      "targs": [
                                        {
                                          "ref": "T",
                                          "targs": [],
                                          "isNullable": false,
                                          "_": 10032,
                                          "source": " T"
                                        }
                                      ],
                                      "isNullable": false,
                                      "_": 10032,
                                      "source": " T[]"
                                    },
                                    "isNullable": false,
                                    "_": 10032,
                                    "source": "readonly T[]"
                                  }
                                ],
                                "isNullable": false,
                                "_": 10032,
                                "source": " Thenable<readonly T[]>"
                              }
                            ],
                            "isNullable": false,
                            "_": 10032,
                            "source": " readonly T[] | Thenable<readonly T[]>"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "options",
                          "type": {
                            "ref": "QuickPickOptions",
                            "targs": [],
                            "isNullable": false,
                            "_": 10032,
                            "source": " QuickPickOptions"
                          },
                          "varargs": false,
                          "isNullable": true
                        },
                        {
                          "name": "token",
                          "type": {
                            "ref": "CancellationToken",
                            "targs": [],
                            "isNullable": false,
                            "_": 10032,
                            "source": " CancellationToken"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Shows a selection list.\n\t\t *\n\t\t * @param items An array of items, or a promise that resolves to an array of items.\n\t\t * @param options Configures the behavior of the selection list.\n\t\t * @param token A token that can be used to signal cancellation.\n\t\t * @return A promise that resolves to the selected item or `undefined`.\n\t\t */\n\t\texport function showQuickPick<T extends QuickPickItem>(items: readonly T[] | Thenable<readonly T[]>, options?: QuickPickOptions, token?: CancellationToken): Thenable<T | undefined>;"
                    },
                    {
                      "_": 10041,
                      "name": "showWorkspaceFolderPick",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "union": [
                              {
                                "ref": "WorkspaceFolder",
                                "targs": [],
                                "isNullable": false,
                                "_": 10041,
                                "source": "WorkspaceFolder"
                              },
                              {
                                "core": "undefined",
                                "isNullable": false,
                                "_": 10041,
                                "source": " undefined"
                              }
                            ],
                            "isNullable": false,
                            "_": 10041,
                            "source": "WorkspaceFolder | undefined"
                          }
                        ],
                        "isNullable": false,
                        "_": 10041,
                        "source": " Thenable<WorkspaceFolder | undefined>"
                      },
                      "generics": [],
                      "doc": "Shows a selection list of {@link workspace.workspaceFoldersworkspace folders} to pick from.\nReturns `undefined` if no folder is open.",
                      "params": [
                        {
                          "name": "options",
                          "type": {
                            "ref": "WorkspaceFolderPickOptions",
                            "targs": [],
                            "isNullable": false,
                            "_": 10041,
                            "source": " WorkspaceFolderPickOptions"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Shows a selection list of {@link workspace.workspaceFolders workspace folders} to pick from.\n\t\t * Returns `undefined` if no folder is open.\n\t\t *\n\t\t * @param options Configures the behavior of the workspace folder list.\n\t\t * @return A promise that resolves to the workspace folder or `undefined`.\n\t\t */\n\t\texport function showWorkspaceFolderPick(options?: WorkspaceFolderPickOptions): Thenable<WorkspaceFolder | undefined>;"
                    },
                    {
                      "_": 10050,
                      "name": "showOpenDialog",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "union": [
                              {
                                "core": "array",
                                "targs": [
                                  {
                                    "ref": "Uri",
                                    "targs": [],
                                    "isNullable": false,
                                    "_": 10050,
                                    "source": "Uri"
                                  }
                                ],
                                "isNullable": false,
                                "_": 10050,
                                "source": "Uri[]"
                              },
                              {
                                "core": "undefined",
                                "isNullable": false,
                                "_": 10050,
                                "source": " undefined"
                              }
                            ],
                            "isNullable": false,
                            "_": 10050,
                            "source": "Uri[] | undefined"
                          }
                        ],
                        "isNullable": false,
                        "_": 10050,
                        "source": " Thenable<Uri[] | undefined>"
                      },
                      "generics": [],
                      "doc": "Shows a file open dialog to the user which allows to select a file\nfor opening-purposes.",
                      "params": [
                        {
                          "name": "options",
                          "type": {
                            "ref": "OpenDialogOptions",
                            "targs": [],
                            "isNullable": false,
                            "_": 10050,
                            "source": " OpenDialogOptions"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Shows a file open dialog to the user which allows to select a file\n\t\t * for opening-purposes.\n\t\t *\n\t\t * @param options Options that control the dialog.\n\t\t * @returns A promise that resolves to the selected resources or `undefined`.\n\t\t */\n\t\texport function showOpenDialog(options?: OpenDialogOptions): Thenable<Uri[] | undefined>;"
                    },
                    {
                      "_": 10059,
                      "name": "showSaveDialog",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "union": [
                              {
                                "ref": "Uri",
                                "targs": [],
                                "isNullable": false,
                                "_": 10059,
                                "source": "Uri"
                              },
                              {
                                "core": "undefined",
                                "isNullable": false,
                                "_": 10059,
                                "source": " undefined"
                              }
                            ],
                            "isNullable": false,
                            "_": 10059,
                            "source": "Uri | undefined"
                          }
                        ],
                        "isNullable": false,
                        "_": 10059,
                        "source": " Thenable<Uri | undefined>"
                      },
                      "generics": [],
                      "doc": "Shows a file save dialog to the user which allows to select a file\nfor saving-purposes.",
                      "params": [
                        {
                          "name": "options",
                          "type": {
                            "ref": "SaveDialogOptions",
                            "targs": [],
                            "isNullable": false,
                            "_": 10059,
                            "source": " SaveDialogOptions"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Shows a file save dialog to the user which allows to select a file\n\t\t * for saving-purposes.\n\t\t *\n\t\t * @param options Options that control the dialog.\n\t\t * @returns A promise that resolves to the selected resource or `undefined`.\n\t\t */\n\t\texport function showSaveDialog(options?: SaveDialogOptions): Thenable<Uri | undefined>;"
                    },
                    {
                      "_": 10072,
                      "name": "showInputBox",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "union": [
                              {
                                "core": "string",
                                "isNullable": false,
                                "_": 10072,
                                "source": "string"
                              },
                              {
                                "core": "undefined",
                                "isNullable": false,
                                "_": 10072,
                                "source": " undefined"
                              }
                            ],
                            "isNullable": false,
                            "_": 10072,
                            "source": "string | undefined"
                          }
                        ],
                        "isNullable": false,
                        "_": 10072,
                        "source": " Thenable<string | undefined>"
                      },
                      "generics": [],
                      "doc": "Opens an input box to ask the user for input.\n\nThe returned value will be `undefined` if the input box was canceled (e.g. pressing ESC). Otherwise the\nreturned value will be the string typed by the user or an empty string if the user did not type\nanything but dismissed the input box with OK.",
                      "params": [
                        {
                          "name": "options",
                          "type": {
                            "ref": "InputBoxOptions",
                            "targs": [],
                            "isNullable": false,
                            "_": 10072,
                            "source": " InputBoxOptions"
                          },
                          "varargs": false,
                          "isNullable": true
                        },
                        {
                          "name": "token",
                          "type": {
                            "ref": "CancellationToken",
                            "targs": [],
                            "isNullable": false,
                            "_": 10072,
                            "source": " CancellationToken"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Opens an input box to ask the user for input.\n\t\t *\n\t\t * The returned value will be `undefined` if the input box was canceled (e.g. pressing ESC). Otherwise the\n\t\t * returned value will be the string typed by the user or an empty string if the user did not type\n\t\t * anything but dismissed the input box with OK.\n\t\t *\n\t\t * @param options Configures the behavior of the input box.\n\t\t * @param token A token that can be used to signal cancellation.\n\t\t * @return A promise that resolves to a string the user provided or to `undefined` in case of dismissal.\n\t\t */\n\t\texport function showInputBox(options?: InputBoxOptions, token?: CancellationToken): Thenable<string | undefined>;"
                    },
                    {
                      "_": 10084,
                      "name": "createQuickPick",
                      "type": {
                        "ref": "QuickPick",
                        "targs": [
                          {
                            "ref": "T",
                            "targs": [],
                            "isNullable": false,
                            "_": 10084,
                            "source": "T"
                          }
                        ],
                        "isNullable": false,
                        "_": 10084,
                        "source": " QuickPick<T>"
                      },
                      "generics": [
                        {
                          "name": "T",
                          "constraint": {
                            "ref": "QuickPickItem",
                            "targs": [],
                            "isNullable": false,
                            "_": 10084,
                            "source": " QuickPickItem"
                          },
                          "_": 10084,
                          "source": "T extends QuickPickItem"
                        }
                      ],
                      "doc": "Creates a {@link QuickPick} to let the user pick an item from a list\nof items of type T.\n\nNote that in many cases the more convenient {@link window.showQuickPick}\nis easier to use. {@link window.createQuickPick} should be used\nwhen {@link window.showQuickPick} does not offer the required flexibility.",
                      "params": [],
                      "source": "\n\n\t\t/**\n\t\t * Creates a {@link QuickPick} to let the user pick an item from a list\n\t\t * of items of type T.\n\t\t *\n\t\t * Note that in many cases the more convenient {@link window.showQuickPick}\n\t\t * is easier to use. {@link window.createQuickPick} should be used\n\t\t * when {@link window.showQuickPick} does not offer the required flexibility.\n\t\t *\n\t\t * @return A new {@link QuickPick}.\n\t\t */\n\t\texport function createQuickPick<T extends QuickPickItem>(): QuickPick<T>;"
                    },
                    {
                      "_": 10095,
                      "name": "createInputBox",
                      "type": {
                        "ref": "InputBox",
                        "targs": [],
                        "isNullable": false,
                        "_": 10095,
                        "source": " InputBox"
                      },
                      "generics": [],
                      "doc": "Creates a {@link InputBox} to let the user enter some text input.\n\nNote that in many cases the more convenient {@link window.showInputBox}\nis easier to use. {@link window.createInputBox} should be used\nwhen {@link window.showInputBox} does not offer the required flexibility.",
                      "params": [],
                      "source": "\n\n\t\t/**\n\t\t * Creates a {@link InputBox} to let the user enter some text input.\n\t\t *\n\t\t * Note that in many cases the more convenient {@link window.showInputBox}\n\t\t * is easier to use. {@link window.createInputBox} should be used\n\t\t * when {@link window.showInputBox} does not offer the required flexibility.\n\t\t *\n\t\t * @return A new {@link InputBox}.\n\t\t */\n\t\texport function createInputBox(): InputBox;"
                    },
                    {
                      "_": 10107,
                      "name": "createOutputChannel",
                      "type": {
                        "ref": "OutputChannel",
                        "targs": [],
                        "isNullable": false,
                        "_": 10107,
                        "source": " OutputChannel"
                      },
                      "generics": [],
                      "doc": "Creates a new {@link OutputChanneloutput channel} with the given name and language id\nIf language id is not provided, then **Log** is used as default language id.\n\nYou can access the visible or active output channel as a {@link TextDocumenttext document} from {@link window.visibleTextEditorsvisible editors} or {@link window.activeTextEditoractive editor}\nand use the language id to contribute language features like syntax coloring, code lens etc.,\nCreates a new {@link LogOutputChannellog output channel} with the given name.",
                      "params": [
                        {
                          "name": "name",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 10107,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "languageId",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 10107,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Creates a new {@link OutputChannel output channel} with the given name and language id\n\t\t * If language id is not provided, then **Log** is used as default language id.\n\t\t *\n\t\t * You can access the visible or active output channel as a {@link TextDocument text document} from {@link window.visibleTextEditors visible editors} or {@link window.activeTextEditor active editor}\n\t\t * and use the language id to contribute language features like syntax coloring, code lens etc.,\n\t\t *\n\t\t * @param name Human-readable string which will be used to represent the channel in the UI.\n\t\t * @param languageId The identifier of the language associated with the channel.\n\t\t */\n\t\texport function createOutputChannel(name: string, languageId?: string): OutputChannel;"
                    },
                    {
                      "_": 10115,
                      "name": "createOutputChannel",
                      "type": {
                        "ref": "LogOutputChannel",
                        "targs": [],
                        "isNullable": false,
                        "_": 10115,
                        "source": " LogOutputChannel"
                      },
                      "generics": [],
                      "doc": "Creates a new {@link OutputChanneloutput channel} with the given name and language id\nIf language id is not provided, then **Log** is used as default language id.\n\nYou can access the visible or active output channel as a {@link TextDocumenttext document} from {@link window.visibleTextEditorsvisible editors} or {@link window.activeTextEditoractive editor}\nand use the language id to contribute language features like syntax coloring, code lens etc.,\nCreates a new {@link LogOutputChannellog output channel} with the given name.",
                      "params": [
                        {
                          "name": "name",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 10115,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "options",
                          "type": {
                            "ref": "IInline48",
                            "targs": [],
                            "isNullable": false,
                            "_": 10115,
                            "source": " { log: true }"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Creates a new {@link LogOutputChannel log output channel} with the given name.\n\t\t *\n\t\t * @param name Human-readable string which will be used to represent the channel in the UI.\n\t\t * @param options Options for the log output channel.\n\t\t */\n\t\texport function createOutputChannel(name: string, options: { log: true }): LogOutputChannel;"
                    },
                    {
                      "_": 10127,
                      "name": "createWebviewPanel",
                      "type": {
                        "ref": "WebviewPanel",
                        "targs": [],
                        "isNullable": false,
                        "_": 10127,
                        "source": " WebviewPanel"
                      },
                      "generics": [],
                      "doc": "Create and show a new webview panel.",
                      "params": [
                        {
                          "name": "viewType",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 10127,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "title",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 10127,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "showOptions",
                          "type": {
                            "union": [
                              {
                                "ref": "ViewColumn",
                                "targs": [],
                                "isNullable": false,
                                "_": 10127,
                                "source": " ViewColumn"
                              },
                              {
                                "ref": "IInline49",
                                "targs": [],
                                "isNullable": false,
                                "_": 10127,
                                "source": " { readonly viewColumn: ViewColumn; readonly preserveFocus?: boolean }"
                              }
                            ],
                            "isNullable": false,
                            "_": 10127,
                            "source": " ViewColumn | { readonly viewColumn: ViewColumn; readonly preserveFocus?: boolean }"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "options",
                          "type": {
                            "intersect": [
                              {
                                "ref": "WebviewPanelOptions",
                                "targs": [],
                                "isNullable": false,
                                "_": 10127,
                                "source": " WebviewPanelOptions"
                              },
                              {
                                "ref": "WebviewOptions",
                                "targs": [],
                                "isNullable": false,
                                "_": 10127,
                                "source": " WebviewOptions"
                              }
                            ],
                            "isNullable": false,
                            "_": 10127,
                            "source": " WebviewPanelOptions & WebviewOptions"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Create and show a new webview panel.\n\t\t *\n\t\t * @param viewType Identifies the type of the webview panel.\n\t\t * @param title Title of the panel.\n\t\t * @param showOptions Where to show the webview in the editor. If preserveFocus is set, the new webview will not take focus.\n\t\t * @param options Settings for the new panel.\n\t\t *\n\t\t * @return New webview panel.\n\t\t */\n\t\texport function createWebviewPanel(viewType: string, title: string, showOptions: ViewColumn | { readonly viewColumn: ViewColumn; readonly preserveFocus?: boolean }, options?: WebviewPanelOptions & WebviewOptions): WebviewPanel;"
                    },
                    {
                      "_": 10137,
                      "name": "setStatusBarMessage",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 10137,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Set a message to the status bar. This is a short hand for the more powerful\nstatus bar {@link window.createStatusBarItemitems}.\nSet a message to the status bar. This is a short hand for the more powerful\nstatus bar {@link window.createStatusBarItemitems}.\n\n*Note* that status bar messages stack and that they must be disposed when no\nlonger used.",
                      "params": [
                        {
                          "name": "text",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 10137,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "hideAfterTimeout",
                          "type": {
                            "core": "number",
                            "isNullable": false,
                            "_": 10137,
                            "source": " number"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Set a message to the status bar. This is a short hand for the more powerful\n\t\t * status bar {@link window.createStatusBarItem items}.\n\t\t *\n\t\t * @param text The message to show, supports icon substitution as in status bar {@link StatusBarItem.text items}.\n\t\t * @param hideAfterTimeout Timeout in milliseconds after which the message will be disposed.\n\t\t * @return A disposable which hides the status bar message.\n\t\t */\n\t\texport function setStatusBarMessage(text: string, hideAfterTimeout: number): Disposable;"
                    },
                    {
                      "_": 10147,
                      "name": "setStatusBarMessage",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 10147,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Set a message to the status bar. This is a short hand for the more powerful\nstatus bar {@link window.createStatusBarItemitems}.\nSet a message to the status bar. This is a short hand for the more powerful\nstatus bar {@link window.createStatusBarItemitems}.\n\n*Note* that status bar messages stack and that they must be disposed when no\nlonger used.",
                      "params": [
                        {
                          "name": "text",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 10147,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "hideWhenDone",
                          "type": {
                            "ref": "Thenable",
                            "targs": [
                              {
                                "core": "any",
                                "isNullable": false,
                                "_": 10147,
                                "source": "any"
                              }
                            ],
                            "isNullable": false,
                            "_": 10147,
                            "source": " Thenable<any>"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Set a message to the status bar. This is a short hand for the more powerful\n\t\t * status bar {@link window.createStatusBarItem items}.\n\t\t *\n\t\t * @param text The message to show, supports icon substitution as in status bar {@link StatusBarItem.text items}.\n\t\t * @param hideWhenDone Thenable on which completion (resolve or reject) the message will be disposed.\n\t\t * @return A disposable which hides the status bar message.\n\t\t */\n\t\texport function setStatusBarMessage(text: string, hideWhenDone: Thenable<any>): Disposable;"
                    },
                    {
                      "_": 10159,
                      "name": "setStatusBarMessage",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 10159,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Set a message to the status bar. This is a short hand for the more powerful\nstatus bar {@link window.createStatusBarItemitems}.\nSet a message to the status bar. This is a short hand for the more powerful\nstatus bar {@link window.createStatusBarItemitems}.\n\n*Note* that status bar messages stack and that they must be disposed when no\nlonger used.",
                      "params": [
                        {
                          "name": "text",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 10159,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Set a message to the status bar. This is a short hand for the more powerful\n\t\t * status bar {@link window.createStatusBarItem items}.\n\t\t *\n\t\t * *Note* that status bar messages stack and that they must be disposed when no\n\t\t * longer used.\n\t\t *\n\t\t * @param text The message to show, supports icon substitution as in status bar {@link StatusBarItem.text items}.\n\t\t * @return A disposable which hides the status bar message.\n\t\t */\n\t\texport function setStatusBarMessage(text: string): Disposable;"
                    },
                    {
                      "_": 10171,
                      "name": "withScmProgress",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "ref": "R",
                            "targs": [],
                            "isNullable": false,
                            "_": 10171,
                            "source": "R"
                          }
                        ],
                        "isNullable": false,
                        "_": 10171,
                        "source": " Thenable<R>"
                      },
                      "generics": [
                        {
                          "name": "R",
                          "_": 10171,
                          "source": "R"
                        }
                      ],
                      "doc": "Show progress in the Source Control viewlet while running the given callback and while\nits returned promise isn't resolve or rejected.",
                      "params": [
                        {
                          "name": "task",
                          "type": {
                            "ctor": false,
                            "generics": [],
                            "returns": {
                              "ref": "Thenable",
                              "targs": [
                                {
                                  "ref": "R",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 10171,
                                  "source": "R"
                                }
                              ],
                              "isNullable": false,
                              "_": 10171,
                              "source": " Thenable<R>"
                            },
                            "params": [
                              {
                                "name": "progress",
                                "type": {
                                  "ref": "Progress",
                                  "targs": [
                                    {
                                      "core": "number",
                                      "isNullable": false,
                                      "_": 10171,
                                      "source": "number"
                                    }
                                  ],
                                  "isNullable": false,
                                  "_": 10171,
                                  "source": " Progress<number>"
                                },
                                "varargs": false,
                                "isNullable": false
                              }
                            ],
                            "isNullable": false,
                            "_": 10171,
                            "source": " (progress: Progress<number>) => Thenable<R>"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Show progress in the Source Control viewlet while running the given callback and while\n\t\t * its returned promise isn't resolve or rejected.\n\t\t *\n\t\t * @deprecated Use `withProgress` instead.\n\t\t *\n\t\t * @param task A callback returning a promise. Progress increments can be reported with\n\t\t * the provided {@link Progress}-object.\n\t\t * @return The thenable the task did return.\n\t\t */\n\t\texport function withScmProgress<R>(task: (progress: Progress<number>) => Thenable<R>): Thenable<R>;"
                    },
                    {
                      "_": 10192,
                      "name": "withProgress",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "ref": "R",
                            "targs": [],
                            "isNullable": false,
                            "_": 10192,
                            "source": "R"
                          }
                        ],
                        "isNullable": false,
                        "_": 10192,
                        "source": " Thenable<R>"
                      },
                      "generics": [
                        {
                          "name": "R",
                          "_": 10192,
                          "source": "R"
                        }
                      ],
                      "doc": "Show progress in the editor. Progress is shown while running the given callback\nand while the promise it returned isn't resolved nor rejected. The location at which\nprogress should show (and other details) is defined via the passed {@linkcode ProgressOptions}.",
                      "params": [
                        {
                          "name": "options",
                          "type": {
                            "ref": "ProgressOptions",
                            "targs": [],
                            "isNullable": false,
                            "_": 10192,
                            "source": " ProgressOptions"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "task",
                          "type": {
                            "ctor": false,
                            "generics": [],
                            "returns": {
                              "ref": "Thenable",
                              "targs": [
                                {
                                  "ref": "R",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 10192,
                                  "source": "R"
                                }
                              ],
                              "isNullable": false,
                              "_": 10192,
                              "source": " Thenable<R>"
                            },
                            "params": [
                              {
                                "name": "progress",
                                "type": {
                                  "ref": "Progress",
                                  "targs": [
                                    {
                                      "ref": "IInline50",
                                      "targs": [],
                                      "isNullable": false,
                                      "_": 10192,
                                      "source": "{ message?: string; increment?: number }"
                                    }
                                  ],
                                  "isNullable": false,
                                  "_": 10192,
                                  "source": " Progress<{ message?: string; increment?: number }>"
                                },
                                "varargs": false,
                                "isNullable": false
                              },
                              {
                                "name": "token",
                                "type": {
                                  "ref": "CancellationToken",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 10192,
                                  "source": " CancellationToken"
                                },
                                "varargs": false,
                                "isNullable": false
                              }
                            ],
                            "isNullable": false,
                            "_": 10192,
                            "source": " (progress: Progress<{ message?: string; increment?: number }>, token: CancellationToken) => Thenable<R>"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Show progress in the editor. Progress is shown while running the given callback\n\t\t * and while the promise it returned isn't resolved nor rejected. The location at which\n\t\t * progress should show (and other details) is defined via the passed {@linkcode ProgressOptions}.\n\t\t *\n\t\t * @param task A callback returning a promise. Progress state can be reported with\n\t\t * the provided {@link Progress}-object.\n\t\t *\n\t\t * To report discrete progress, use `increment` to indicate how much work has been completed. Each call with\n\t\t * a `increment` value will be summed up and reflected as overall progress until 100% is reached (a value of\n\t\t * e.g. `10` accounts for `10%` of work done).\n\t\t * Note that currently only `ProgressLocation.Notification` is capable of showing discrete progress.\n\t\t *\n\t\t * To monitor if the operation has been cancelled by the user, use the provided {@linkcode CancellationToken}.\n\t\t * Note that currently only `ProgressLocation.Notification` is supporting to show a cancel button to cancel the\n\t\t * long running operation.\n\t\t *\n\t\t * @return The thenable the task-callback returned.\n\t\t */\n\t\texport function withProgress<R>(options: ProgressOptions, task: (progress: Progress<{ message?: string; increment?: number }>, token: CancellationToken) => Thenable<R>): Thenable<R>;"
                    },
                    {
                      "_": 10202,
                      "name": "createStatusBarItem",
                      "type": {
                        "ref": "StatusBarItem",
                        "targs": [],
                        "isNullable": false,
                        "_": 10202,
                        "source": " StatusBarItem"
                      },
                      "generics": [],
                      "doc": "Creates a status bar {@link StatusBarItemitem}.",
                      "params": [
                        {
                          "name": "id",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 10202,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "alignment",
                          "type": {
                            "ref": "StatusBarAlignment",
                            "targs": [],
                            "isNullable": false,
                            "_": 10202,
                            "source": " StatusBarAlignment"
                          },
                          "varargs": false,
                          "isNullable": true
                        },
                        {
                          "name": "priority",
                          "type": {
                            "core": "number",
                            "isNullable": false,
                            "_": 10202,
                            "source": " number"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Creates a status bar {@link StatusBarItem item}.\n\t\t *\n\t\t * @param id The identifier of the item. Must be unique within the extension.\n\t\t * @param alignment The alignment of the item.\n\t\t * @param priority The priority of the item. Higher values mean the item should be shown more to the left.\n\t\t * @return A new status bar item.\n\t\t */\n\t\texport function createStatusBarItem(id: string, alignment?: StatusBarAlignment, priority?: number): StatusBarItem;"
                    },
                    {
                      "_": 10212,
                      "name": "createStatusBarItem",
                      "type": {
                        "ref": "StatusBarItem",
                        "targs": [],
                        "isNullable": false,
                        "_": 10212,
                        "source": " StatusBarItem"
                      },
                      "generics": [],
                      "doc": "Creates a status bar {@link StatusBarItemitem}.",
                      "params": [
                        {
                          "name": "alignment",
                          "type": {
                            "ref": "StatusBarAlignment",
                            "targs": [],
                            "isNullable": false,
                            "_": 10212,
                            "source": " StatusBarAlignment"
                          },
                          "varargs": false,
                          "isNullable": true
                        },
                        {
                          "name": "priority",
                          "type": {
                            "core": "number",
                            "isNullable": false,
                            "_": 10212,
                            "source": " number"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Creates a status bar {@link StatusBarItem item}.\n\t\t *\n\t\t * @see {@link createStatusBarItem} for creating a status bar item with an identifier.\n\t\t * @param alignment The alignment of the item.\n\t\t * @param priority The priority of the item. Higher values mean the item should be shown more to the left.\n\t\t * @return A new status bar item.\n\t\t */\n\t\texport function createStatusBarItem(alignment?: StatusBarAlignment, priority?: number): StatusBarItem;"
                    },
                    {
                      "_": 10226,
                      "name": "createTerminal",
                      "type": {
                        "ref": "Terminal",
                        "targs": [],
                        "isNullable": false,
                        "_": 10226,
                        "source": " Terminal"
                      },
                      "generics": [],
                      "doc": "Creates a {@link Terminal} with a backing shell process. The cwd of the terminal will be the workspace\ndirectory if it exists.\nCreates a {@link Terminal} with a backing shell process.\nCreates a {@link Terminal} where an extension controls its input and output.",
                      "params": [
                        {
                          "name": "name",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 10226,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": true
                        },
                        {
                          "name": "shellPath",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 10226,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": true
                        },
                        {
                          "name": "shellArgs",
                          "type": {
                            "union": [
                              {
                                "operator": 146,
                                "type": {
                                  "core": "array",
                                  "targs": [
                                    {
                                      "core": "string",
                                      "isNullable": false,
                                      "_": 10226,
                                      "source": " string"
                                    }
                                  ],
                                  "isNullable": false,
                                  "_": 10226,
                                  "source": " string[]"
                                },
                                "isNullable": false,
                                "_": 10226,
                                "source": " readonly string[]"
                              },
                              {
                                "core": "string",
                                "isNullable": false,
                                "_": 10226,
                                "source": " string"
                              }
                            ],
                            "isNullable": false,
                            "_": 10226,
                            "source": " readonly string[] | string"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Creates a {@link Terminal} with a backing shell process. The cwd of the terminal will be the workspace\n\t\t * directory if it exists.\n\t\t *\n\t\t * @param name Optional human-readable string which will be used to represent the terminal in the UI.\n\t\t * @param shellPath Optional path to a custom shell executable to be used in the terminal.\n\t\t * @param shellArgs Optional args for the custom shell executable. A string can be used on Windows only which\n\t\t * allows specifying shell args in\n\t\t * [command-line format](https://msdn.microsoft.com/en-au/08dfcab2-eb6e-49a4-80eb-87d4076c98c6).\n\t\t * @return A new Terminal.\n\t\t * @throws When running in an environment where a new process cannot be started.\n\t\t */\n\t\texport function createTerminal(name?: string, shellPath?: string, shellArgs?: readonly string[] | string): Terminal;"
                    },
                    {
                      "_": 10235,
                      "name": "createTerminal",
                      "type": {
                        "ref": "Terminal",
                        "targs": [],
                        "isNullable": false,
                        "_": 10235,
                        "source": " Terminal"
                      },
                      "generics": [],
                      "doc": "Creates a {@link Terminal} with a backing shell process. The cwd of the terminal will be the workspace\ndirectory if it exists.\nCreates a {@link Terminal} with a backing shell process.\nCreates a {@link Terminal} where an extension controls its input and output.",
                      "params": [
                        {
                          "name": "options",
                          "type": {
                            "ref": "TerminalOptions",
                            "targs": [],
                            "isNullable": false,
                            "_": 10235,
                            "source": " TerminalOptions"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Creates a {@link Terminal} with a backing shell process.\n\t\t *\n\t\t * @param options A TerminalOptions object describing the characteristics of the new terminal.\n\t\t * @return A new Terminal.\n\t\t * @throws When running in an environment where a new process cannot be started.\n\t\t */\n\t\texport function createTerminal(options: TerminalOptions): Terminal;"
                    },
                    {
                      "_": 10244,
                      "name": "createTerminal",
                      "type": {
                        "ref": "Terminal",
                        "targs": [],
                        "isNullable": false,
                        "_": 10244,
                        "source": " Terminal"
                      },
                      "generics": [],
                      "doc": "Creates a {@link Terminal} with a backing shell process. The cwd of the terminal will be the workspace\ndirectory if it exists.\nCreates a {@link Terminal} with a backing shell process.\nCreates a {@link Terminal} where an extension controls its input and output.",
                      "params": [
                        {
                          "name": "options",
                          "type": {
                            "ref": "ExtensionTerminalOptions",
                            "targs": [],
                            "isNullable": false,
                            "_": 10244,
                            "source": " ExtensionTerminalOptions"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Creates a {@link Terminal} where an extension controls its input and output.\n\t\t *\n\t\t * @param options An {@link ExtensionTerminalOptions} object describing\n\t\t * the characteristics of the new terminal.\n\t\t * @return A new Terminal.\n\t\t */\n\t\texport function createTerminal(options: ExtensionTerminalOptions): Terminal;"
                    },
                    {
                      "_": 10255,
                      "name": "registerTreeDataProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 10255,
                        "source": " Disposable"
                      },
                      "generics": [
                        {
                          "name": "T",
                          "_": 10255,
                          "source": "T"
                        }
                      ],
                      "doc": "Register a {@link TreeDataProvider} for the view contributed using the extension point `views`.\nThis will allow you to contribute data to the {@link TreeView} and update if the data changes.\n\n**Note:** To get access to the {@link TreeView} and perform operations on it, use {@link window.createTreeViewcreateTreeView}.",
                      "params": [
                        {
                          "name": "viewId",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 10255,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "treeDataProvider",
                          "type": {
                            "ref": "TreeDataProvider",
                            "targs": [
                              {
                                "ref": "T",
                                "targs": [],
                                "isNullable": false,
                                "_": 10255,
                                "source": "T"
                              }
                            ],
                            "isNullable": false,
                            "_": 10255,
                            "source": " TreeDataProvider<T>"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Register a {@link TreeDataProvider} for the view contributed using the extension point `views`.\n\t\t * This will allow you to contribute data to the {@link TreeView} and update if the data changes.\n\t\t *\n\t\t * **Note:** To get access to the {@link TreeView} and perform operations on it, use {@link window.createTreeView createTreeView}.\n\t\t *\n\t\t * @param viewId Id of the view contributed using the extension point `views`.\n\t\t * @param treeDataProvider A {@link TreeDataProvider} that provides tree data for the view\n\t\t */\n\t\texport function registerTreeDataProvider<T>(viewId: string, treeDataProvider: TreeDataProvider<T>): Disposable;"
                    },
                    {
                      "_": 10263,
                      "name": "createTreeView",
                      "type": {
                        "ref": "TreeView",
                        "targs": [
                          {
                            "ref": "T",
                            "targs": [],
                            "isNullable": false,
                            "_": 10263,
                            "source": "T"
                          }
                        ],
                        "isNullable": false,
                        "_": 10263,
                        "source": " TreeView<T>"
                      },
                      "generics": [
                        {
                          "name": "T",
                          "_": 10263,
                          "source": "T"
                        }
                      ],
                      "doc": "Create a {@link TreeView} for the view contributed using the extension point `views`.",
                      "params": [
                        {
                          "name": "viewId",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 10263,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "options",
                          "type": {
                            "ref": "TreeViewOptions",
                            "targs": [
                              {
                                "ref": "T",
                                "targs": [],
                                "isNullable": false,
                                "_": 10263,
                                "source": "T"
                              }
                            ],
                            "isNullable": false,
                            "_": 10263,
                            "source": " TreeViewOptions<T>"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Create a {@link TreeView} for the view contributed using the extension point `views`.\n\t\t * @param viewId Id of the view contributed using the extension point `views`.\n\t\t * @param options Options for creating the {@link TreeView}\n\t\t * @returns a {@link TreeView}.\n\t\t */\n\t\texport function createTreeView<T>(viewId: string, options: TreeViewOptions<T>): TreeView<T>;"
                    },
                    {
                      "_": 10286,
                      "name": "registerUriHandler",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 10286,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Registers a {@link UriHandleruri handler} capable of handling system-wide {@link Uriuris}.\nIn case there are multiple windows open, the topmost window will handle the uri.\nA uri handler is scoped to the extension it is contributed from; it will only\nbe able to handle uris which are directed to the extension itself. A uri must respect\nthe following rules:\n\n- The uri-scheme must be `vscode.env.uriScheme`;\n- The uri-authority must be the extension id (e.g. `my.extension`);\n- The uri-path, -query and -fragment parts are arbitrary.\n\nFor example, if the `my.extension` extension registers a uri handler, it will only\nbe allowed to handle uris with the prefix `product-name://my.extension`.\n\nAn extension can only register a single uri handler in its entire activation lifetime.\n\n* *Note:* There is an activation event `onUri` that fires when a uri directed for\nthe current extension is about to be handled.",
                      "params": [
                        {
                          "name": "handler",
                          "type": {
                            "ref": "UriHandler",
                            "targs": [],
                            "isNullable": false,
                            "_": 10286,
                            "source": " UriHandler"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Registers a {@link UriHandler uri handler} capable of handling system-wide {@link Uri uris}.\n\t\t * In case there are multiple windows open, the topmost window will handle the uri.\n\t\t * A uri handler is scoped to the extension it is contributed from; it will only\n\t\t * be able to handle uris which are directed to the extension itself. A uri must respect\n\t\t * the following rules:\n\t\t *\n\t\t * - The uri-scheme must be `vscode.env.uriScheme`;\n\t\t * - The uri-authority must be the extension id (e.g. `my.extension`);\n\t\t * - The uri-path, -query and -fragment parts are arbitrary.\n\t\t *\n\t\t * For example, if the `my.extension` extension registers a uri handler, it will only\n\t\t * be allowed to handle uris with the prefix `product-name://my.extension`.\n\t\t *\n\t\t * An extension can only register a single uri handler in its entire activation lifetime.\n\t\t *\n\t\t * * *Note:* There is an activation event `onUri` that fires when a uri directed for\n\t\t * the current extension is about to be handled.\n\t\t *\n\t\t * @param handler The uri handler to register for this extension.\n\t\t */\n\t\texport function registerUriHandler(handler: UriHandler): Disposable;"
                    },
                    {
                      "_": 10299,
                      "name": "registerWebviewPanelSerializer",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 10299,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Registers a webview panel serializer.\n\nExtensions that support reviving should have an `\"onWebviewPanel:viewType\"` activation event and\nmake sure that `registerWebviewPanelSerializer` is called during activation.\n\nOnly a single serializer may be registered at a time for a given `viewType`.",
                      "params": [
                        {
                          "name": "viewType",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 10299,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "serializer",
                          "type": {
                            "ref": "WebviewPanelSerializer",
                            "targs": [],
                            "isNullable": false,
                            "_": 10299,
                            "source": " WebviewPanelSerializer"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Registers a webview panel serializer.\n\t\t *\n\t\t * Extensions that support reviving should have an `\"onWebviewPanel:viewType\"` activation event and\n\t\t * make sure that `registerWebviewPanelSerializer` is called during activation.\n\t\t *\n\t\t * Only a single serializer may be registered at a time for a given `viewType`.\n\t\t *\n\t\t * @param viewType Type of the webview panel that can be serialized.\n\t\t * @param serializer Webview serializer.\n\t\t */\n\t\texport function registerWebviewPanelSerializer(viewType: string, serializer: WebviewPanelSerializer): Disposable;"
                    },
                    {
                      "_": 10310,
                      "name": "registerWebviewViewProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 10333,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Register a new provider for webview views.",
                      "params": [
                        {
                          "name": "viewId",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 10310,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "provider",
                          "type": {
                            "ref": "WebviewViewProvider",
                            "targs": [],
                            "isNullable": false,
                            "_": 10310,
                            "source": " WebviewViewProvider"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "options",
                          "type": {
                            "ref": "IInline51",
                            "targs": [],
                            "isNullable": false,
                            "_": 10310,
                            "source": " {\n\t\t\t/**\n\t\t\t * Content settings for the webview created for this view.\n\t\t\t */\n\t\t\treadonly webviewOptions?: {\n\t\t\t\t/**\n\t\t\t\t * Controls if the webview element itself (iframe) is kept around even when the view\n\t\t\t\t * is no longer visible.\n\t\t\t\t *\n\t\t\t\t * Normally the webview's html context is created when the view becomes visible\n\t\t\t\t * and destroyed when it is hidden. Extensions that have complex state\n\t\t\t\t * or UI can set the `retainContextWhenHidden` to make the editor keep the webview\n\t\t\t\t * context around, even when the webview moves to a background tab. When a webview using\n\t\t\t\t * `retainContextWhenHidden` becomes hidden, its scripts and other dynamic content are suspended.\n\t\t\t\t * When the view becomes visible again, the context is automatically restored\n\t\t\t\t * in the exact same state it was in originally. You cannot send messages to a\n\t\t\t\t * hidden webview, even with `retainContextWhenHidden` enabled.\n\t\t\t\t *\n\t\t\t\t * `retainContextWhenHidden` has a high memory overhead and should only be used if\n\t\t\t\t * your view's context cannot be quickly saved and restored.\n\t\t\t\t */\n\t\t\t\treadonly retainContextWhenHidden?: boolean;\n\t\t\t};\n\t\t}"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Register a new provider for webview views.\n\t\t *\n\t\t * @param viewId Unique id of the view. This should match the `id` from the\n\t\t *   `views` contribution in the package.json.\n\t\t * @param provider Provider for the webview views.\n\t\t *\n\t\t * @return Disposable that unregisters the provider.\n\t\t */\n\t\texport function registerWebviewViewProvider(viewId: string, provider: WebviewViewProvider, options?: {\n\t\t\t/**\n\t\t\t * Content settings for the webview created for this view.\n\t\t\t */\n\t\t\treadonly webviewOptions?: {\n\t\t\t\t/**\n\t\t\t\t * Controls if the webview element itself (iframe) is kept around even when the view\n\t\t\t\t * is no longer visible.\n\t\t\t\t *\n\t\t\t\t * Normally the webview's html context is created when the view becomes visible\n\t\t\t\t * and destroyed when it is hidden. Extensions that have complex state\n\t\t\t\t * or UI can set the `retainContextWhenHidden` to make the editor keep the webview\n\t\t\t\t * context around, even when the webview moves to a background tab. When a webview using\n\t\t\t\t * `retainContextWhenHidden` becomes hidden, its scripts and other dynamic content are suspended.\n\t\t\t\t * When the view becomes visible again, the context is automatically restored\n\t\t\t\t * in the exact same state it was in originally. You cannot send messages to a\n\t\t\t\t * hidden webview, even with `retainContextWhenHidden` enabled.\n\t\t\t\t *\n\t\t\t\t * `retainContextWhenHidden` has a high memory overhead and should only be used if\n\t\t\t\t * your view's context cannot be quickly saved and restored.\n\t\t\t\t */\n\t\t\t\treadonly retainContextWhenHidden?: boolean;\n\t\t\t};\n\t\t}): Disposable;"
                    },
                    {
                      "_": 10349,
                      "name": "registerCustomEditorProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 10370,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Register a provider for custom editors for the `viewType` contributed by the `customEditors` extension point.\n\nWhen a custom editor is opened, an `onCustomEditor:viewType` activation event is fired. Your extension\nmust register a {@linkcode CustomTextEditorProvider}, {@linkcode CustomReadonlyEditorProvider},\n{@linkcode CustomEditorProvider}for `viewType` as part of activation.",
                      "params": [
                        {
                          "name": "viewType",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 10349,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "provider",
                          "type": {
                            "union": [
                              {
                                "ref": "CustomTextEditorProvider",
                                "targs": [],
                                "isNullable": false,
                                "_": 10349,
                                "source": " CustomTextEditorProvider"
                              },
                              {
                                "ref": "CustomReadonlyEditorProvider",
                                "targs": [],
                                "isNullable": false,
                                "_": 10349,
                                "source": " CustomReadonlyEditorProvider"
                              },
                              {
                                "ref": "CustomEditorProvider",
                                "targs": [],
                                "isNullable": false,
                                "_": 10349,
                                "source": " CustomEditorProvider"
                              }
                            ],
                            "isNullable": false,
                            "_": 10349,
                            "source": " CustomTextEditorProvider | CustomReadonlyEditorProvider | CustomEditorProvider"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "options",
                          "type": {
                            "ref": "IInline53",
                            "targs": [],
                            "isNullable": false,
                            "_": 10349,
                            "source": " {\n\t\t\t/**\n\t\t\t * Content settings for the webview panels created for this custom editor.\n\t\t\t */\n\t\t\treadonly webviewOptions?: WebviewPanelOptions;\n\n\t\t\t/**\n\t\t\t * Only applies to `CustomReadonlyEditorProvider | CustomEditorProvider`.\n\t\t\t *\n\t\t\t * Indicates that the provider allows multiple editor instances to be open at the same time for\n\t\t\t * the same resource.\n\t\t\t *\n\t\t\t * By default, the editor only allows one editor instance to be open at a time for each resource. If the\n\t\t\t * user tries to open a second editor instance for the resource, the first one is instead moved to where\n\t\t\t * the second one was to be opened.\n\t\t\t *\n\t\t\t * When `supportsMultipleEditorsPerDocument` is enabled, users can split and create copies of the custom\n\t\t\t * editor. In this case, the custom editor must make sure it can properly synchronize the states of all\n\t\t\t * editor instances for a resource so that they are consistent.\n\t\t\t */\n\t\t\treadonly supportsMultipleEditorsPerDocument?: boolean;\n\t\t}"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Register a provider for custom editors for the `viewType` contributed by the `customEditors` extension point.\n\t\t *\n\t\t * When a custom editor is opened, an `onCustomEditor:viewType` activation event is fired. Your extension\n\t\t * must register a {@linkcode CustomTextEditorProvider}, {@linkcode CustomReadonlyEditorProvider},\n\t\t * {@linkcode CustomEditorProvider}for `viewType` as part of activation.\n\t\t *\n\t\t * @param viewType Unique identifier for the custom editor provider. This should match the `viewType` from the\n\t\t *   `customEditors` contribution point.\n\t\t * @param provider Provider that resolves custom editors.\n\t\t * @param options Options for the provider.\n\t\t *\n\t\t * @return Disposable that unregisters the provider.\n\t\t */\n\t\texport function registerCustomEditorProvider(viewType: string, provider: CustomTextEditorProvider | CustomReadonlyEditorProvider | CustomEditorProvider, options?: {\n\t\t\t/**\n\t\t\t * Content settings for the webview panels created for this custom editor.\n\t\t\t */\n\t\t\treadonly webviewOptions?: WebviewPanelOptions;\n\n\t\t\t/**\n\t\t\t * Only applies to `CustomReadonlyEditorProvider | CustomEditorProvider`.\n\t\t\t *\n\t\t\t * Indicates that the provider allows multiple editor instances to be open at the same time for\n\t\t\t * the same resource.\n\t\t\t *\n\t\t\t * By default, the editor only allows one editor instance to be open at a time for each resource. If the\n\t\t\t * user tries to open a second editor instance for the resource, the first one is instead moved to where\n\t\t\t * the second one was to be opened.\n\t\t\t *\n\t\t\t * When `supportsMultipleEditorsPerDocument` is enabled, users can split and create copies of the custom\n\t\t\t * editor. In this case, the custom editor must make sure it can properly synchronize the states of all\n\t\t\t * editor instances for a resource so that they are consistent.\n\t\t\t */\n\t\t\treadonly supportsMultipleEditorsPerDocument?: boolean;\n\t\t}): Disposable;"
                    },
                    {
                      "_": 10377,
                      "name": "registerTerminalLinkProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 10377,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Register provider that enables the detection and handling of links within the terminal.",
                      "params": [
                        {
                          "name": "provider",
                          "type": {
                            "ref": "TerminalLinkProvider",
                            "targs": [],
                            "isNullable": false,
                            "_": 10377,
                            "source": " TerminalLinkProvider"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Register provider that enables the detection and handling of links within the terminal.\n\t\t * @param provider The provider that provides the terminal links.\n\t\t * @return Disposable that unregisters the provider.\n\t\t */\n\t\texport function registerTerminalLinkProvider(provider: TerminalLinkProvider): Disposable;"
                    },
                    {
                      "_": 10384,
                      "name": "registerTerminalProfileProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 10384,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Registers a provider for a contributed terminal profile.",
                      "params": [
                        {
                          "name": "id",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 10384,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "provider",
                          "type": {
                            "ref": "TerminalProfileProvider",
                            "targs": [],
                            "isNullable": false,
                            "_": 10384,
                            "source": " TerminalProfileProvider"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Registers a provider for a contributed terminal profile.\n\t\t * @param id The ID of the contributed terminal profile.\n\t\t * @param provider The terminal profile provider.\n\t\t */\n\t\texport function registerTerminalProfileProvider(id: string, provider: TerminalProfileProvider): Disposable;"
                    },
                    {
                      "_": 10391,
                      "name": "registerFileDecorationProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 10391,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Register a file decoration provider.",
                      "params": [
                        {
                          "name": "provider",
                          "type": {
                            "ref": "FileDecorationProvider",
                            "targs": [],
                            "isNullable": false,
                            "_": 10391,
                            "source": " FileDecorationProvider"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\t\t/**\n\t\t * Register a file decoration provider.\n\t\t *\n\t\t * @param provider A {@link FileDecorationProvider}.\n\t\t * @return A {@link Disposable} that unregisters the provider.\n\t\t */\n\t\texport function registerFileDecorationProvider(provider: FileDecorationProvider): Disposable;"
                    }
                  ],
                  "vars": [
                    {
                      "_": 9677,
                      "name": "tabGroups",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "Represents the grid widget within the main editor area",
                      "type": {
                        "ref": "TabGroups",
                        "targs": [],
                        "isNullable": false,
                        "_": 9677,
                        "source": " TabGroups"
                      },
                      "source": " tabGroups: TabGroups"
                    },
                    {
                      "_": 9684,
                      "name": "activeTextEditor",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "The currently active editor or `undefined`. The active editor is the one\nthat currently has focus or, when none has focus, the one that has changed\ninput most recently.",
                      "type": {
                        "union": [
                          {
                            "ref": "TextEditor",
                            "targs": [],
                            "isNullable": false,
                            "_": 9684,
                            "source": " TextEditor"
                          },
                          {
                            "core": "undefined",
                            "isNullable": false,
                            "_": 9684,
                            "source": " undefined"
                          }
                        ],
                        "isNullable": false,
                        "_": 9684,
                        "source": " TextEditor | undefined"
                      },
                      "source": " activeTextEditor: TextEditor | undefined"
                    },
                    {
                      "_": 9689,
                      "name": "visibleTextEditors",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "The currently visible editors or an empty array.",
                      "type": {
                        "operator": 146,
                        "type": {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "TextEditor",
                              "targs": [],
                              "isNullable": false,
                              "_": 9689,
                              "source": " TextEditor"
                            }
                          ],
                          "isNullable": false,
                          "_": 9689,
                          "source": " TextEditor[]"
                        },
                        "isNullable": false,
                        "_": 9689,
                        "source": " readonly TextEditor[]"
                      },
                      "source": " visibleTextEditors: readonly TextEditor[]"
                    },
                    {
                      "_": 9696,
                      "name": "onDidChangeActiveTextEditor",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "An {@link Event} which fires when the {@link window.activeTextEditoractive editor}\nhas changed. *Note* that the event also fires when the active editor changes\nto `undefined`.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "union": [
                              {
                                "ref": "TextEditor",
                                "targs": [],
                                "isNullable": false,
                                "_": 9696,
                                "source": "TextEditor"
                              },
                              {
                                "core": "undefined",
                                "isNullable": false,
                                "_": 9696,
                                "source": " undefined"
                              }
                            ],
                            "isNullable": false,
                            "_": 9696,
                            "source": "TextEditor | undefined"
                          }
                        ],
                        "isNullable": false,
                        "_": 9696,
                        "source": " Event<TextEditor | undefined>"
                      },
                      "source": " onDidChangeActiveTextEditor: Event<TextEditor | undefined>"
                    },
                    {
                      "_": 9702,
                      "name": "onDidChangeVisibleTextEditors",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "An {@link Event} which fires when the array of {@link window.visibleTextEditorsvisible editors}\nhas changed.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "operator": 146,
                            "type": {
                              "core": "array",
                              "targs": [
                                {
                                  "ref": "TextEditor",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 9702,
                                  "source": " TextEditor"
                                }
                              ],
                              "isNullable": false,
                              "_": 9702,
                              "source": " TextEditor[]"
                            },
                            "isNullable": false,
                            "_": 9702,
                            "source": "readonly TextEditor[]"
                          }
                        ],
                        "isNullable": false,
                        "_": 9702,
                        "source": " Event<readonly TextEditor[]>"
                      },
                      "source": " onDidChangeVisibleTextEditors: Event<readonly TextEditor[]>"
                    },
                    {
                      "_": 9707,
                      "name": "onDidChangeTextEditorSelection",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "An {@link Event} which fires when the selection in an editor has changed.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "ref": "TextEditorSelectionChangeEvent",
                            "targs": [],
                            "isNullable": false,
                            "_": 9707,
                            "source": "TextEditorSelectionChangeEvent"
                          }
                        ],
                        "isNullable": false,
                        "_": 9707,
                        "source": " Event<TextEditorSelectionChangeEvent>"
                      },
                      "source": " onDidChangeTextEditorSelection: Event<TextEditorSelectionChangeEvent>"
                    },
                    {
                      "_": 9712,
                      "name": "onDidChangeTextEditorVisibleRanges",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "An {@link Event} which fires when the visible ranges of an editor has changed.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "ref": "TextEditorVisibleRangesChangeEvent",
                            "targs": [],
                            "isNullable": false,
                            "_": 9712,
                            "source": "TextEditorVisibleRangesChangeEvent"
                          }
                        ],
                        "isNullable": false,
                        "_": 9712,
                        "source": " Event<TextEditorVisibleRangesChangeEvent>"
                      },
                      "source": " onDidChangeTextEditorVisibleRanges: Event<TextEditorVisibleRangesChangeEvent>"
                    },
                    {
                      "_": 9717,
                      "name": "onDidChangeTextEditorOptions",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "An {@link Event} which fires when the options of an editor have changed.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "ref": "TextEditorOptionsChangeEvent",
                            "targs": [],
                            "isNullable": false,
                            "_": 9717,
                            "source": "TextEditorOptionsChangeEvent"
                          }
                        ],
                        "isNullable": false,
                        "_": 9717,
                        "source": " Event<TextEditorOptionsChangeEvent>"
                      },
                      "source": " onDidChangeTextEditorOptions: Event<TextEditorOptionsChangeEvent>"
                    },
                    {
                      "_": 9722,
                      "name": "onDidChangeTextEditorViewColumn",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "An {@link Event} which fires when the view column of an editor has changed.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "ref": "TextEditorViewColumnChangeEvent",
                            "targs": [],
                            "isNullable": false,
                            "_": 9722,
                            "source": "TextEditorViewColumnChangeEvent"
                          }
                        ],
                        "isNullable": false,
                        "_": 9722,
                        "source": " Event<TextEditorViewColumnChangeEvent>"
                      },
                      "source": " onDidChangeTextEditorViewColumn: Event<TextEditorViewColumnChangeEvent>"
                    },
                    {
                      "_": 9727,
                      "name": "visibleNotebookEditors",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "The currently visible {@link NotebookEditornotebook editors} or an empty array.",
                      "type": {
                        "operator": 146,
                        "type": {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "NotebookEditor",
                              "targs": [],
                              "isNullable": false,
                              "_": 9727,
                              "source": " NotebookEditor"
                            }
                          ],
                          "isNullable": false,
                          "_": 9727,
                          "source": " NotebookEditor[]"
                        },
                        "isNullable": false,
                        "_": 9727,
                        "source": " readonly NotebookEditor[]"
                      },
                      "source": " visibleNotebookEditors: readonly NotebookEditor[]"
                    },
                    {
                      "_": 9733,
                      "name": "onDidChangeVisibleNotebookEditors",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "An {@link Event} which fires when the {@link window.visibleNotebookEditorsvisible notebook editors}\nhas changed.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "operator": 146,
                            "type": {
                              "core": "array",
                              "targs": [
                                {
                                  "ref": "NotebookEditor",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 9733,
                                  "source": " NotebookEditor"
                                }
                              ],
                              "isNullable": false,
                              "_": 9733,
                              "source": " NotebookEditor[]"
                            },
                            "isNullable": false,
                            "_": 9733,
                            "source": "readonly NotebookEditor[]"
                          }
                        ],
                        "isNullable": false,
                        "_": 9733,
                        "source": " Event<readonly NotebookEditor[]>"
                      },
                      "source": " onDidChangeVisibleNotebookEditors: Event<readonly NotebookEditor[]>"
                    },
                    {
                      "_": 9740,
                      "name": "activeNotebookEditor",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "The currently active {@link NotebookEditornotebook editor} or `undefined`. The active editor is the one\nthat currently has focus or, when none has focus, the one that has changed\ninput most recently.",
                      "type": {
                        "union": [
                          {
                            "ref": "NotebookEditor",
                            "targs": [],
                            "isNullable": false,
                            "_": 9740,
                            "source": " NotebookEditor"
                          },
                          {
                            "core": "undefined",
                            "isNullable": false,
                            "_": 9740,
                            "source": " undefined"
                          }
                        ],
                        "isNullable": false,
                        "_": 9740,
                        "source": " NotebookEditor | undefined"
                      },
                      "source": " activeNotebookEditor: NotebookEditor | undefined"
                    },
                    {
                      "_": 9747,
                      "name": "onDidChangeActiveNotebookEditor",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "An {@link Event} which fires when the {@link window.activeNotebookEditoractive notebook editor}\nhas changed. *Note* that the event also fires when the active editor changes\nto `undefined`.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "union": [
                              {
                                "ref": "NotebookEditor",
                                "targs": [],
                                "isNullable": false,
                                "_": 9747,
                                "source": "NotebookEditor"
                              },
                              {
                                "core": "undefined",
                                "isNullable": false,
                                "_": 9747,
                                "source": " undefined"
                              }
                            ],
                            "isNullable": false,
                            "_": 9747,
                            "source": "NotebookEditor | undefined"
                          }
                        ],
                        "isNullable": false,
                        "_": 9747,
                        "source": " Event<NotebookEditor | undefined>"
                      },
                      "source": " onDidChangeActiveNotebookEditor: Event<NotebookEditor | undefined>"
                    },
                    {
                      "_": 9753,
                      "name": "onDidChangeNotebookEditorSelection",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "An {@link Event} which fires when the {@link NotebookEditor.selectionsnotebook editor selections}\nhave changed.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "ref": "NotebookEditorSelectionChangeEvent",
                            "targs": [],
                            "isNullable": false,
                            "_": 9753,
                            "source": "NotebookEditorSelectionChangeEvent"
                          }
                        ],
                        "isNullable": false,
                        "_": 9753,
                        "source": " Event<NotebookEditorSelectionChangeEvent>"
                      },
                      "source": " onDidChangeNotebookEditorSelection: Event<NotebookEditorSelectionChangeEvent>"
                    },
                    {
                      "_": 9759,
                      "name": "onDidChangeNotebookEditorVisibleRanges",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "An {@link Event} which fires when the {@link NotebookEditor.visibleRangesnotebook editor visible ranges}\nhave changed.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "ref": "NotebookEditorVisibleRangesChangeEvent",
                            "targs": [],
                            "isNullable": false,
                            "_": 9759,
                            "source": "NotebookEditorVisibleRangesChangeEvent"
                          }
                        ],
                        "isNullable": false,
                        "_": 9759,
                        "source": " Event<NotebookEditorVisibleRangesChangeEvent>"
                      },
                      "source": " onDidChangeNotebookEditorVisibleRanges: Event<NotebookEditorVisibleRangesChangeEvent>"
                    },
                    {
                      "_": 9764,
                      "name": "terminals",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "The currently opened terminals or an empty array.",
                      "type": {
                        "operator": 146,
                        "type": {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "Terminal",
                              "targs": [],
                              "isNullable": false,
                              "_": 9764,
                              "source": " Terminal"
                            }
                          ],
                          "isNullable": false,
                          "_": 9764,
                          "source": " Terminal[]"
                        },
                        "isNullable": false,
                        "_": 9764,
                        "source": " readonly Terminal[]"
                      },
                      "source": " terminals: readonly Terminal[]"
                    },
                    {
                      "_": 9770,
                      "name": "activeTerminal",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "The currently active terminal or `undefined`. The active terminal is the one that\ncurrently has focus or most recently had focus.",
                      "type": {
                        "union": [
                          {
                            "ref": "Terminal",
                            "targs": [],
                            "isNullable": false,
                            "_": 9770,
                            "source": " Terminal"
                          },
                          {
                            "core": "undefined",
                            "isNullable": false,
                            "_": 9770,
                            "source": " undefined"
                          }
                        ],
                        "isNullable": false,
                        "_": 9770,
                        "source": " Terminal | undefined"
                      },
                      "source": " activeTerminal: Terminal | undefined"
                    },
                    {
                      "_": 9777,
                      "name": "onDidChangeActiveTerminal",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "An {@link Event} which fires when the {@link window.activeTerminalactive terminal}\nhas changed. *Note* that the event also fires when the active terminal changes\nto `undefined`.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "union": [
                              {
                                "ref": "Terminal",
                                "targs": [],
                                "isNullable": false,
                                "_": 9777,
                                "source": "Terminal"
                              },
                              {
                                "core": "undefined",
                                "isNullable": false,
                                "_": 9777,
                                "source": " undefined"
                              }
                            ],
                            "isNullable": false,
                            "_": 9777,
                            "source": "Terminal | undefined"
                          }
                        ],
                        "isNullable": false,
                        "_": 9777,
                        "source": " Event<Terminal | undefined>"
                      },
                      "source": " onDidChangeActiveTerminal: Event<Terminal | undefined>"
                    },
                    {
                      "_": 9783,
                      "name": "onDidOpenTerminal",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "An {@link Event} which fires when a terminal has been created, either through the\n{@link window.createTerminalcreateTerminal} API or commands.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "ref": "Terminal",
                            "targs": [],
                            "isNullable": false,
                            "_": 9783,
                            "source": "Terminal"
                          }
                        ],
                        "isNullable": false,
                        "_": 9783,
                        "source": " Event<Terminal>"
                      },
                      "source": " onDidOpenTerminal: Event<Terminal>"
                    },
                    {
                      "_": 9788,
                      "name": "onDidCloseTerminal",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "An {@link Event} which fires when a terminal is disposed.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "ref": "Terminal",
                            "targs": [],
                            "isNullable": false,
                            "_": 9788,
                            "source": "Terminal"
                          }
                        ],
                        "isNullable": false,
                        "_": 9788,
                        "source": " Event<Terminal>"
                      },
                      "source": " onDidCloseTerminal: Event<Terminal>"
                    },
                    {
                      "_": 9793,
                      "name": "onDidChangeTerminalState",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "An {@link Event} which fires when a {@link Terminal.stateterminal's state} has changed.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "ref": "Terminal",
                            "targs": [],
                            "isNullable": false,
                            "_": 9793,
                            "source": "Terminal"
                          }
                        ],
                        "isNullable": false,
                        "_": 9793,
                        "source": " Event<Terminal>"
                      },
                      "source": " onDidChangeTerminalState: Event<Terminal>"
                    },
                    {
                      "_": 9798,
                      "name": "state",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "Represents the current window's state.",
                      "type": {
                        "ref": "WindowState",
                        "targs": [],
                        "isNullable": false,
                        "_": 9798,
                        "source": " WindowState"
                      },
                      "source": " state: WindowState"
                    },
                    {
                      "_": 9804,
                      "name": "onDidChangeWindowState",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "An {@link Event} which fires when the focus state of the current window\nchanges. The value of the event represents whether the window is focused.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "ref": "WindowState",
                            "targs": [],
                            "isNullable": false,
                            "_": 9804,
                            "source": "WindowState"
                          }
                        ],
                        "isNullable": false,
                        "_": 9804,
                        "source": " Event<WindowState>"
                      },
                      "source": " onDidChangeWindowState: Event<WindowState>"
                    },
                    {
                      "_": 10397,
                      "name": "activeColorTheme",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "The currently active color theme as configured in the settings. The active\ntheme can be changed via the `workbench.colorTheme` setting.",
                      "type": {
                        "ref": "ColorTheme",
                        "targs": [],
                        "isNullable": false,
                        "_": 10397,
                        "source": " ColorTheme"
                      },
                      "source": " activeColorTheme: ColorTheme"
                    },
                    {
                      "_": 10402,
                      "name": "onDidChangeActiveColorTheme",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "An {@link Event} which fires when the active color theme is changed or has changes.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "ref": "ColorTheme",
                            "targs": [],
                            "isNullable": false,
                            "_": 10402,
                            "source": "ColorTheme"
                          }
                        ],
                        "isNullable": false,
                        "_": 10402,
                        "source": " Event<ColorTheme>"
                      },
                      "source": " onDidChangeActiveColorTheme: Event<ColorTheme>"
                    }
                  ],
                  "enums": []
                }
              },
              {
                "_": 12221,
                "namespace": "workspace",
                "from": "submodule vscode",
                "items": {
                  "structs": [
                    {
                      "isClass": false,
                      "_": -1,
                      "name": "IInline64",
                      "generics": [],
                      "doc": "",
                      "heritage": [],
                      "isInline": true,
                      "source": "",
                      "indexes": [],
                      "ctors": [],
                      "members": [
                        {
                          "doc": "",
                          "isMethod": false,
                          "_": 12371,
                          "source": " readonly uri: Uri;",
                          "name": "uri",
                          "generics": [],
                          "isGetter": false,
                          "isSetter": false,
                          "isNullable": false,
                          "isStatic": false,
                          "isReadonly": true,
                          "isPrivate": false,
                          "type": {
                            "ref": "Uri",
                            "targs": [],
                            "isNullable": false,
                            "_": 12371,
                            "source": " Uri"
                          }
                        },
                        {
                          "doc": "",
                          "isMethod": false,
                          "_": 12371,
                          "source": " readonly name?: string",
                          "name": "name",
                          "generics": [],
                          "isGetter": false,
                          "isSetter": false,
                          "isNullable": true,
                          "isStatic": false,
                          "isReadonly": true,
                          "isPrivate": false,
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 12371,
                            "source": " string"
                          }
                        }
                      ],
                      "calls": []
                    },
                    {
                      "isClass": false,
                      "_": -1,
                      "name": "IInline65",
                      "generics": [],
                      "doc": "",
                      "heritage": [],
                      "isInline": true,
                      "source": "",
                      "indexes": [],
                      "ctors": [],
                      "members": [
                        {
                          "doc": "",
                          "isMethod": false,
                          "_": 12586,
                          "source": " language?: string;",
                          "name": "language",
                          "generics": [],
                          "isGetter": false,
                          "isSetter": false,
                          "isNullable": true,
                          "isStatic": false,
                          "isReadonly": false,
                          "isPrivate": false,
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 12586,
                            "source": " string"
                          }
                        },
                        {
                          "doc": "",
                          "isMethod": false,
                          "_": 12586,
                          "source": " content?: string",
                          "name": "content",
                          "generics": [],
                          "isGetter": false,
                          "isSetter": false,
                          "isNullable": true,
                          "isStatic": false,
                          "isReadonly": false,
                          "isPrivate": false,
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 12586,
                            "source": " string"
                          }
                        }
                      ],
                      "calls": []
                    },
                    {
                      "isClass": false,
                      "_": -1,
                      "name": "IInline66",
                      "generics": [],
                      "doc": "",
                      "heritage": [],
                      "isInline": true,
                      "source": "",
                      "indexes": [],
                      "ctors": [],
                      "members": [
                        {
                          "doc": "",
                          "isMethod": false,
                          "_": 12848,
                          "source": " readonly isCaseSensitive?: boolean;",
                          "name": "isCaseSensitive",
                          "generics": [],
                          "isGetter": false,
                          "isSetter": false,
                          "isNullable": true,
                          "isStatic": false,
                          "isReadonly": true,
                          "isPrivate": false,
                          "type": {
                            "core": "boolean",
                            "isNullable": false,
                            "_": 12848,
                            "source": " boolean"
                          }
                        },
                        {
                          "doc": "",
                          "isMethod": false,
                          "_": 12848,
                          "source": " readonly isReadonly?: boolean",
                          "name": "isReadonly",
                          "generics": [],
                          "isGetter": false,
                          "isSetter": false,
                          "isNullable": true,
                          "isStatic": false,
                          "isReadonly": true,
                          "isPrivate": false,
                          "type": {
                            "core": "boolean",
                            "isNullable": false,
                            "_": 12848,
                            "source": " boolean"
                          }
                        }
                      ],
                      "calls": []
                    }
                  ],
                  "typedefs": [],
                  "modules": [],
                  "funcs": [
                    {
                      "_": 12312,
                      "name": "getWorkspaceFolder",
                      "type": {
                        "union": [
                          {
                            "ref": "WorkspaceFolder",
                            "targs": [],
                            "isNullable": false,
                            "_": 12312,
                            "source": " WorkspaceFolder"
                          },
                          {
                            "core": "undefined",
                            "isNullable": false,
                            "_": 12312,
                            "source": " undefined"
                          }
                        ],
                        "isNullable": false,
                        "_": 12312,
                        "source": " WorkspaceFolder | undefined"
                      },
                      "generics": [],
                      "doc": "Returns the {@link WorkspaceFolderworkspace folder} that contains a given uri.\n* returns `undefined` when the given uri doesn't match any workspace folder\n* returns the *input* when the given uri is a workspace folder itself",
                      "params": [
                        {
                          "name": "uri",
                          "type": {
                            "ref": "Uri",
                            "targs": [],
                            "isNullable": false,
                            "_": 12312,
                            "source": " Uri"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Returns the {@link WorkspaceFolder workspace folder} that contains a given uri.\n\t\t * * returns `undefined` when the given uri doesn't match any workspace folder\n\t\t * * returns the *input* when the given uri is a workspace folder itself\n\t\t *\n\t\t * @param uri An uri.\n\t\t * @return A workspace folder or `undefined`\n\t\t */\n\t\texport function getWorkspaceFolder(uri: Uri): WorkspaceFolder | undefined;"
                    },
                    {
                      "_": 12326,
                      "name": "asRelativePath",
                      "type": {
                        "core": "string",
                        "isNullable": false,
                        "_": 12326,
                        "source": " string"
                      },
                      "generics": [],
                      "doc": "Returns a path that is relative to the workspace folder or folders.\n\nWhen there are no {@link workspace.workspaceFoldersworkspace folders} or when the path\nis not contained in them, the input is returned.",
                      "params": [
                        {
                          "name": "pathOrUri",
                          "type": {
                            "union": [
                              {
                                "core": "string",
                                "isNullable": false,
                                "_": 12326,
                                "source": " string"
                              },
                              {
                                "ref": "Uri",
                                "targs": [],
                                "isNullable": false,
                                "_": 12326,
                                "source": " Uri"
                              }
                            ],
                            "isNullable": false,
                            "_": 12326,
                            "source": " string | Uri"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "includeWorkspaceFolder",
                          "type": {
                            "core": "boolean",
                            "isNullable": false,
                            "_": 12326,
                            "source": " boolean"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Returns a path that is relative to the workspace folder or folders.\n\t\t *\n\t\t * When there are no {@link workspace.workspaceFolders workspace folders} or when the path\n\t\t * is not contained in them, the input is returned.\n\t\t *\n\t\t * @param pathOrUri A path or uri. When a uri is given its {@link Uri.fsPath fsPath} is used.\n\t\t * @param includeWorkspaceFolder When `true` and when the given path is contained inside a\n\t\t * workspace folder the name of the workspace is prepended. Defaults to `true` when there are\n\t\t * multiple workspace folders and `false` otherwise.\n\t\t * @return A path relative to the root or the input.\n\t\t */\n\t\texport function asRelativePath(pathOrUri: string | Uri, includeWorkspaceFolder?: boolean): string;"
                    },
                    {
                      "_": 12371,
                      "name": "updateWorkspaceFolders",
                      "type": {
                        "core": "boolean",
                        "isNullable": false,
                        "_": 12371,
                        "source": " boolean"
                      },
                      "generics": [],
                      "doc": "This method replaces `deleteCount` {@link workspace.workspaceFoldersworkspace folders} starting at index `start`\nby an optional set of `workspaceFoldersToAdd` on the `vscode.workspace.workspaceFolders` array. This \"splice\"\nbehavior can be used to add, remove and change workspace folders in a single operation.\n\n**Note:** in some cases calling this method may result in the currently executing extensions (including the\none that called this method) to be terminated and restarted. For example when the first workspace folder is\nadded, removed or changed the (deprecated) `rootPath` property is updated to point to the first workspace\nfolder. Another case is when transitioning from an empty or single-folder workspace into a multi-folder\nworkspace (see also: https://code.visualstudio.com/docs/editor/workspaces).\n\nUse the {@linkcode onDidChangeWorkspaceFoldersonDidChangeWorkspaceFolders()} event to get notified when the\nworkspace folders have been updated.\n\n**Example:** adding a new workspace folder at the end of workspace folders\n```typescript\nworkspace.updateWorkspaceFolders(workspace.workspaceFolders ? workspace.workspaceFolders.length : 0, null, { uri: ...});\n```\n\n**Example:** removing the first workspace folder\n```typescript\nworkspace.updateWorkspaceFolders(0, 1);\n```\n\n**Example:** replacing an existing workspace folder with a new one\n```typescript\nworkspace.updateWorkspaceFolders(0, 1, { uri: ...});\n```\n\nIt is valid to remove an existing workspace folder and add it again with a different name\nto rename that folder.\n\n**Note:** it is not valid to call {@link updateWorkspaceFoldersupdateWorkspaceFolders()} multiple times\nwithout waiting for the {@linkcode onDidChangeWorkspaceFoldersonDidChangeWorkspaceFolders()} to fire.",
                      "params": [
                        {
                          "name": "start",
                          "type": {
                            "core": "number",
                            "isNullable": false,
                            "_": 12371,
                            "source": " number"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "deleteCount",
                          "type": {
                            "union": [
                              {
                                "core": "number",
                                "isNullable": false,
                                "_": 12371,
                                "source": " number"
                              },
                              {
                                "core": "undefined",
                                "isNullable": false,
                                "_": 12371,
                                "source": " undefined"
                              },
                              {
                                "core": "null",
                                "isNullable": false,
                                "_": 12371,
                                "source": " null"
                              }
                            ],
                            "isNullable": false,
                            "_": 12371,
                            "source": " number | undefined | null"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "workspaceFoldersToAdd",
                          "type": {
                            "core": "array",
                            "targs": [
                              {
                                "ref": "IInline64",
                                "targs": [],
                                "isNullable": false,
                                "_": 12371,
                                "source": " { readonly uri: Uri; readonly name?: string }"
                              }
                            ],
                            "isNullable": false,
                            "_": 12371,
                            "source": " { readonly uri: Uri; readonly name?: string }[]"
                          },
                          "varargs": true,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * This method replaces `deleteCount` {@link workspace.workspaceFolders workspace folders} starting at index `start`\n\t\t * by an optional set of `workspaceFoldersToAdd` on the `vscode.workspace.workspaceFolders` array. This \"splice\"\n\t\t * behavior can be used to add, remove and change workspace folders in a single operation.\n\t\t *\n\t\t * **Note:** in some cases calling this method may result in the currently executing extensions (including the\n\t\t * one that called this method) to be terminated and restarted. For example when the first workspace folder is\n\t\t * added, removed or changed the (deprecated) `rootPath` property is updated to point to the first workspace\n\t\t * folder. Another case is when transitioning from an empty or single-folder workspace into a multi-folder\n\t\t * workspace (see also: https://code.visualstudio.com/docs/editor/workspaces).\n\t\t *\n\t\t * Use the {@linkcode onDidChangeWorkspaceFolders onDidChangeWorkspaceFolders()} event to get notified when the\n\t\t * workspace folders have been updated.\n\t\t *\n\t\t * **Example:** adding a new workspace folder at the end of workspace folders\n\t\t * ```typescript\n\t\t * workspace.updateWorkspaceFolders(workspace.workspaceFolders ? workspace.workspaceFolders.length : 0, null, { uri: ...});\n\t\t * ```\n\t\t *\n\t\t * **Example:** removing the first workspace folder\n\t\t * ```typescript\n\t\t * workspace.updateWorkspaceFolders(0, 1);\n\t\t * ```\n\t\t *\n\t\t * **Example:** replacing an existing workspace folder with a new one\n\t\t * ```typescript\n\t\t * workspace.updateWorkspaceFolders(0, 1, { uri: ...});\n\t\t * ```\n\t\t *\n\t\t * It is valid to remove an existing workspace folder and add it again with a different name\n\t\t * to rename that folder.\n\t\t *\n\t\t * **Note:** it is not valid to call {@link updateWorkspaceFolders updateWorkspaceFolders()} multiple times\n\t\t * without waiting for the {@linkcode onDidChangeWorkspaceFolders onDidChangeWorkspaceFolders()} to fire.\n\t\t *\n\t\t * @param start the zero-based location in the list of currently opened {@link WorkspaceFolder workspace folders}\n\t\t * from which to start deleting workspace folders.\n\t\t * @param deleteCount the optional number of workspace folders to remove.\n\t\t * @param workspaceFoldersToAdd the optional variable set of workspace folders to add in place of the deleted ones.\n\t\t * Each workspace is identified with a mandatory URI and an optional name.\n\t\t * @return true if the operation was successfully started and false otherwise if arguments were used that would result\n\t\t * in invalid workspace folder state (e.g. 2 folders with the same URI).\n\t\t */\n\t\texport function updateWorkspaceFolders(start: number, deleteCount: number | undefined | null, ...workspaceFoldersToAdd: { readonly uri: Uri; readonly name?: string }[]): boolean;"
                    },
                    {
                      "_": 12494,
                      "name": "createFileSystemWatcher",
                      "type": {
                        "ref": "FileSystemWatcher",
                        "targs": [],
                        "isNullable": false,
                        "_": 12494,
                        "source": " FileSystemWatcher"
                      },
                      "generics": [],
                      "doc": "Creates a file system watcher that is notified on file events (create, change, delete)\ndepending on the parameters provided.\n\nBy default, all opened {@link workspace.workspaceFoldersworkspace folders} will be watched\nfor file changes recursively.\n\nAdditional paths can be added for file watching by providing a {@link RelativePattern} with\na `base` path to watch. If the `pattern` is complex (e.g. contains `**` or path segments),\nthe path will be watched recursively and otherwise will be watched non-recursively (i.e. only\nchanges to the first level of the path will be reported).\n\n*Note* that requests for recursive file watchers for a `base` path that is inside the opened\nworkspace are ignored given all opened {@link workspace.workspaceFoldersworkspace folders} are\nwatched for file changes recursively by default. Non-recursive file watchers however are always\nsupported, even inside the opened workspace because they allow to bypass the configured settings\nfor excludes (`files.watcherExclude`). If you need to watch in a location that is typically\nexcluded (for example `node_modules` or `.git` folder), then you can use a non-recursive watcher\nin the workspace for this purpose.\n\nIf possible, keep the use of recursive watchers to a minimum because recursive file watching\nis quite resource intense.\n\nProviding a `string` as `globPattern` acts as convenience method for watching file events in\nall opened workspace folders. It cannot be used to add more folders for file watching, nor will\nit report any file events from folders that are not part of the opened workspace folders.\n\nOptionally, flags to ignore certain kinds of events can be provided.\n\nTo stop listening to events the watcher must be disposed.\n\n*Note* that file events from recursive file watchers may be excluded based on user configuration.\nThe setting `files.watcherExclude` helps to reduce the overhead of file events from folders\nthat are known to produce many file changes at once (such as `node_modules` folders). As such,\nit is highly recommended to watch with simple patterns that do not require recursive watchers\nwhere the exclude settings are ignored and you have full control over the events.\n\n*Note* that symbolic links are not automatically followed for file watching unless the path to\nwatch itself is a symbolic link.\n\n*Note* that file changes for the path to be watched may not be delivered when the path itself\nchanges. For example, when watching a path `/Users/somename/Desktop` and the path itself is\nbeing deleted, the watcher may not report an event and may not work anymore from that moment on.\nThe underlying behaviour depends on the path that is provided for watching:\n* if the path is within any of the workspace folders, deletions are tracked and reported unless\n  excluded via `files.watcherExclude` setting\n* if the path is equal to any of the workspace folders, deletions are not tracked\n* if the path is outside of any of the workspace folders, deletions are not tracked\n\nIf you are interested in being notified when the watched path itself is being deleted, you have\nto watch it's parent folder. Make sure to use a simple `pattern` (such as putting the name of the\nfolder) to not accidentally watch all sibling folders recursively.\n\n*Note* that the file paths that are reported for having changed may have a different path casing\ncompared to the actual casing on disk on case-insensitive platforms (typically macOS and Windows\nbut not Linux). We allow a user to open a workspace folder with any desired path casing and try\nto preserve that. This means:\n* if the path is within any of the workspace folders, the path will match the casing of the\n  workspace folder up to that portion of the path and match the casing on disk for children\n* if the path is outside of any of the workspace folders, the casing will match the case of the\n  path that was provided for watching\nIn the same way, symbolic links are preserved, i.e. the file event will report the path of the\nsymbolic link as it was provided for watching and not the target.\n\n### Examples\n\nThe basic anatomy of a file watcher is as follows:\n\n```ts\nconst watcher = vscode.workspace.createFileSystemWatcher(new vscode.RelativePattern(<folder>, <pattern>));\n\nwatcher.onDidChange(uri => { ... }); // listen to files being changed\nwatcher.onDidCreate(uri => { ... }); // listen to files/folders being created\nwatcher.onDidDelete(uri => { ... }); // listen to files/folders getting deleted\n\nwatcher.dispose(); // dispose after usage\n```\n\n#### Workspace file watching\n\nIf you only care about file events in a specific workspace folder:\n\n```ts\nvscode.workspace.createFileSystemWatcher(new vscode.RelativePattern(vscode.workspace.workspaceFolders[0], '**​/*.js'));\n```\n\nIf you want to monitor file events across all opened workspace folders:\n\n```ts\nvscode.workspace.createFileSystemWatcher('**​/*.js');\n```\n\n*Note:* the array of workspace folders can be empty if no workspace is opened (empty window).\n\n#### Out of workspace file watching\n\nTo watch a folder for changes to *.js files outside the workspace (non recursively), pass in a `Uri` to such\na folder:\n\n```ts\nvscode.workspace.createFileSystemWatcher(new vscode.RelativePattern(vscode.Uri.file(<path to folder outside workspace>), '*.js'));\n```\n\nAnd use a complex glob pattern to watch recursively:\n\n```ts\nvscode.workspace.createFileSystemWatcher(new vscode.RelativePattern(vscode.Uri.file(<path to folder outside workspace>), '**​/*.js'));\n```\n\nHere is an example for watching the active editor for file changes:\n\n```ts\nvscode.workspace.createFileSystemWatcher(new vscode.RelativePattern(vscode.window.activeTextEditor.document.uri, '*'));\n```",
                      "params": [
                        {
                          "name": "globPattern",
                          "type": {
                            "ref": "GlobPattern",
                            "targs": [],
                            "isNullable": false,
                            "_": 12494,
                            "source": " GlobPattern"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "ignoreCreateEvents",
                          "type": {
                            "core": "boolean",
                            "isNullable": false,
                            "_": 12494,
                            "source": " boolean"
                          },
                          "varargs": false,
                          "isNullable": true
                        },
                        {
                          "name": "ignoreChangeEvents",
                          "type": {
                            "core": "boolean",
                            "isNullable": false,
                            "_": 12494,
                            "source": " boolean"
                          },
                          "varargs": false,
                          "isNullable": true
                        },
                        {
                          "name": "ignoreDeleteEvents",
                          "type": {
                            "core": "boolean",
                            "isNullable": false,
                            "_": 12494,
                            "source": " boolean"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Creates a file system watcher that is notified on file events (create, change, delete)\n\t\t * depending on the parameters provided.\n\t\t *\n\t\t * By default, all opened {@link workspace.workspaceFolders workspace folders} will be watched\n\t\t * for file changes recursively.\n\t\t *\n\t\t * Additional paths can be added for file watching by providing a {@link RelativePattern} with\n\t\t * a `base` path to watch. If the `pattern` is complex (e.g. contains `**` or path segments),\n\t\t * the path will be watched recursively and otherwise will be watched non-recursively (i.e. only\n\t\t * changes to the first level of the path will be reported).\n\t\t *\n\t\t * *Note* that requests for recursive file watchers for a `base` path that is inside the opened\n\t\t * workspace are ignored given all opened {@link workspace.workspaceFolders workspace folders} are\n\t\t * watched for file changes recursively by default. Non-recursive file watchers however are always\n\t\t * supported, even inside the opened workspace because they allow to bypass the configured settings\n\t\t * for excludes (`files.watcherExclude`). If you need to watch in a location that is typically\n\t\t * excluded (for example `node_modules` or `.git` folder), then you can use a non-recursive watcher\n\t\t * in the workspace for this purpose.\n\t\t *\n\t\t * If possible, keep the use of recursive watchers to a minimum because recursive file watching\n\t\t * is quite resource intense.\n\t\t *\n\t\t * Providing a `string` as `globPattern` acts as convenience method for watching file events in\n\t\t * all opened workspace folders. It cannot be used to add more folders for file watching, nor will\n\t\t * it report any file events from folders that are not part of the opened workspace folders.\n\t\t *\n\t\t * Optionally, flags to ignore certain kinds of events can be provided.\n\t\t *\n\t\t * To stop listening to events the watcher must be disposed.\n\t\t *\n\t\t * *Note* that file events from recursive file watchers may be excluded based on user configuration.\n\t\t * The setting `files.watcherExclude` helps to reduce the overhead of file events from folders\n\t\t * that are known to produce many file changes at once (such as `node_modules` folders). As such,\n\t\t * it is highly recommended to watch with simple patterns that do not require recursive watchers\n\t\t * where the exclude settings are ignored and you have full control over the events.\n\t\t *\n\t\t * *Note* that symbolic links are not automatically followed for file watching unless the path to\n\t\t * watch itself is a symbolic link.\n\t\t *\n\t\t * *Note* that file changes for the path to be watched may not be delivered when the path itself\n\t\t * changes. For example, when watching a path `/Users/somename/Desktop` and the path itself is\n\t\t * being deleted, the watcher may not report an event and may not work anymore from that moment on.\n\t\t * The underlying behaviour depends on the path that is provided for watching:\n\t\t * * if the path is within any of the workspace folders, deletions are tracked and reported unless\n\t\t *   excluded via `files.watcherExclude` setting\n\t\t * * if the path is equal to any of the workspace folders, deletions are not tracked\n\t\t * * if the path is outside of any of the workspace folders, deletions are not tracked\n\t\t *\n\t\t * If you are interested in being notified when the watched path itself is being deleted, you have\n\t\t * to watch it's parent folder. Make sure to use a simple `pattern` (such as putting the name of the\n\t\t * folder) to not accidentally watch all sibling folders recursively.\n\t\t *\n\t\t * *Note* that the file paths that are reported for having changed may have a different path casing\n\t\t * compared to the actual casing on disk on case-insensitive platforms (typically macOS and Windows\n\t\t * but not Linux). We allow a user to open a workspace folder with any desired path casing and try\n\t\t * to preserve that. This means:\n\t\t * * if the path is within any of the workspace folders, the path will match the casing of the\n\t\t *   workspace folder up to that portion of the path and match the casing on disk for children\n\t\t * * if the path is outside of any of the workspace folders, the casing will match the case of the\n\t\t *   path that was provided for watching\n\t\t * In the same way, symbolic links are preserved, i.e. the file event will report the path of the\n\t\t * symbolic link as it was provided for watching and not the target.\n\t\t *\n\t\t * ### Examples\n\t\t *\n\t\t * The basic anatomy of a file watcher is as follows:\n\t\t *\n\t\t * ```ts\n\t\t * const watcher = vscode.workspace.createFileSystemWatcher(new vscode.RelativePattern(<folder>, <pattern>));\n\t\t *\n\t\t * watcher.onDidChange(uri => { ... }); // listen to files being changed\n\t\t * watcher.onDidCreate(uri => { ... }); // listen to files/folders being created\n\t\t * watcher.onDidDelete(uri => { ... }); // listen to files/folders getting deleted\n\t\t *\n\t\t * watcher.dispose(); // dispose after usage\n\t\t * ```\n\t\t *\n\t\t * #### Workspace file watching\n\t\t *\n\t\t * If you only care about file events in a specific workspace folder:\n\t\t *\n\t\t * ```ts\n\t\t * vscode.workspace.createFileSystemWatcher(new vscode.RelativePattern(vscode.workspace.workspaceFolders[0], '**​/*.js'));\n\t\t * ```\n\t\t *\n\t\t * If you want to monitor file events across all opened workspace folders:\n\t\t *\n\t\t * ```ts\n\t\t * vscode.workspace.createFileSystemWatcher('**​/*.js');\n\t\t * ```\n\t\t *\n\t\t * *Note:* the array of workspace folders can be empty if no workspace is opened (empty window).\n\t\t *\n\t\t * #### Out of workspace file watching\n\t\t *\n\t\t * To watch a folder for changes to *.js files outside the workspace (non recursively), pass in a `Uri` to such\n\t\t * a folder:\n\t\t *\n\t\t * ```ts\n\t\t * vscode.workspace.createFileSystemWatcher(new vscode.RelativePattern(vscode.Uri.file(<path to folder outside workspace>), '*.js'));\n\t\t * ```\n\t\t *\n\t\t * And use a complex glob pattern to watch recursively:\n\t\t *\n\t\t * ```ts\n\t\t * vscode.workspace.createFileSystemWatcher(new vscode.RelativePattern(vscode.Uri.file(<path to folder outside workspace>), '**​/*.js'));\n\t\t * ```\n\t\t *\n\t\t * Here is an example for watching the active editor for file changes:\n\t\t *\n\t\t * ```ts\n\t\t * vscode.workspace.createFileSystemWatcher(new vscode.RelativePattern(vscode.window.activeTextEditor.document.uri, '*'));\n\t\t * ```\n\t\t *\n\t\t * @param globPattern A {@link GlobPattern glob pattern} that controls which file events the watcher should report.\n\t\t * @param ignoreCreateEvents Ignore when files have been created.\n\t\t * @param ignoreChangeEvents Ignore when files have been changed.\n\t\t * @param ignoreDeleteEvents Ignore when files have been deleted.\n\t\t * @return A new file system watcher instance. Must be disposed when no longer needed.\n\t\t */\n\t\texport function createFileSystemWatcher(globPattern: GlobPattern, ignoreCreateEvents?: boolean, ignoreChangeEvents?: boolean, ignoreDeleteEvents?: boolean): FileSystemWatcher;"
                    },
                    {
                      "_": 12513,
                      "name": "findFiles",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "core": "array",
                            "targs": [
                              {
                                "ref": "Uri",
                                "targs": [],
                                "isNullable": false,
                                "_": 12513,
                                "source": "Uri"
                              }
                            ],
                            "isNullable": false,
                            "_": 12513,
                            "source": "Uri[]"
                          }
                        ],
                        "isNullable": false,
                        "_": 12513,
                        "source": " Thenable<Uri[]>"
                      },
                      "generics": [],
                      "doc": "Find files across all {@link workspace.workspaceFoldersworkspace folders} in the workspace.",
                      "params": [
                        {
                          "name": "include",
                          "type": {
                            "ref": "GlobPattern",
                            "targs": [],
                            "isNullable": false,
                            "_": 12513,
                            "source": " GlobPattern"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "exclude",
                          "type": {
                            "union": [
                              {
                                "ref": "GlobPattern",
                                "targs": [],
                                "isNullable": false,
                                "_": 12513,
                                "source": " GlobPattern"
                              },
                              {
                                "core": "null",
                                "isNullable": false,
                                "_": 12513,
                                "source": " null"
                              }
                            ],
                            "isNullable": false,
                            "_": 12513,
                            "source": " GlobPattern | null"
                          },
                          "varargs": false,
                          "isNullable": true
                        },
                        {
                          "name": "maxResults",
                          "type": {
                            "core": "number",
                            "isNullable": false,
                            "_": 12513,
                            "source": " number"
                          },
                          "varargs": false,
                          "isNullable": true
                        },
                        {
                          "name": "token",
                          "type": {
                            "ref": "CancellationToken",
                            "targs": [],
                            "isNullable": false,
                            "_": 12513,
                            "source": " CancellationToken"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Find files across all {@link workspace.workspaceFolders workspace folders} in the workspace.\n\t\t *\n\t\t * @example\n\t\t * findFiles('**​/*.js', '**​/node_modules/**', 10)\n\t\t *\n\t\t * @param include A {@link GlobPattern glob pattern} that defines the files to search for. The glob pattern\n\t\t * will be matched against the file paths of resulting matches relative to their workspace. Use a {@link RelativePattern relative pattern}\n\t\t * to restrict the search results to a {@link WorkspaceFolder workspace folder}.\n\t\t * @param exclude  A {@link GlobPattern glob pattern} that defines files and folders to exclude. The glob pattern\n\t\t * will be matched against the file paths of resulting matches relative to their workspace. When `undefined`, default file-excludes (e.g. the `files.exclude`-setting\n\t\t * but not `search.exclude`) will apply. When `null`, no excludes will apply.\n\t\t * @param maxResults An upper-bound for the result.\n\t\t * @param token A token that can be used to signal cancellation to the underlying search engine.\n\t\t * @return A thenable that resolves to an array of resource identifiers. Will return no results if no\n\t\t * {@link workspace.workspaceFolders workspace folders} are opened.\n\t\t */\n\t\texport function findFiles(include: GlobPattern, exclude?: GlobPattern | null, maxResults?: number, token?: CancellationToken): Thenable<Uri[]>;"
                    },
                    {
                      "_": 12522,
                      "name": "saveAll",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "core": "boolean",
                            "isNullable": false,
                            "_": 12522,
                            "source": "boolean"
                          }
                        ],
                        "isNullable": false,
                        "_": 12522,
                        "source": " Thenable<boolean>"
                      },
                      "generics": [],
                      "doc": "Save all dirty files.",
                      "params": [
                        {
                          "name": "includeUntitled",
                          "type": {
                            "core": "boolean",
                            "isNullable": false,
                            "_": 12522,
                            "source": " boolean"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Save all dirty files.\n\t\t *\n\t\t * @param includeUntitled Also save files that have been created during this session.\n\t\t * @return A thenable that resolves when the files have been saved. Will return `false`\n\t\t * for any file that failed to save.\n\t\t */\n\t\texport function saveAll(includeUntitled?: boolean): Thenable<boolean>;"
                    },
                    {
                      "_": 12541,
                      "name": "applyEdit",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "core": "boolean",
                            "isNullable": false,
                            "_": 12541,
                            "source": "boolean"
                          }
                        ],
                        "isNullable": false,
                        "_": 12541,
                        "source": " Thenable<boolean>"
                      },
                      "generics": [],
                      "doc": "Make changes to one or many resources or create, delete, and rename resources as defined by the given\n{@link WorkspaceEditworkspace edit}.\n\nAll changes of a workspace edit are applied in the same order in which they have been added. If\nmultiple textual inserts are made at the same position, these strings appear in the resulting text\nin the order the 'inserts' were made, unless that are interleaved with resource edits. Invalid sequences\nlike 'delete file a' -> 'insert text in file a' cause failure of the operation.\n\nWhen applying a workspace edit that consists only of text edits an 'all-or-nothing'-strategy is used.\nA workspace edit with resource creations or deletions aborts the operation, e.g. consecutive edits will\nnot be attempted, when a single edit fails.",
                      "params": [
                        {
                          "name": "edit",
                          "type": {
                            "ref": "WorkspaceEdit",
                            "targs": [],
                            "isNullable": false,
                            "_": 12541,
                            "source": " WorkspaceEdit"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "metadata",
                          "type": {
                            "ref": "WorkspaceEditMetadata",
                            "targs": [],
                            "isNullable": false,
                            "_": 12541,
                            "source": " WorkspaceEditMetadata"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Make changes to one or many resources or create, delete, and rename resources as defined by the given\n\t\t * {@link WorkspaceEdit workspace edit}.\n\t\t *\n\t\t * All changes of a workspace edit are applied in the same order in which they have been added. If\n\t\t * multiple textual inserts are made at the same position, these strings appear in the resulting text\n\t\t * in the order the 'inserts' were made, unless that are interleaved with resource edits. Invalid sequences\n\t\t * like 'delete file a' -> 'insert text in file a' cause failure of the operation.\n\t\t *\n\t\t * When applying a workspace edit that consists only of text edits an 'all-or-nothing'-strategy is used.\n\t\t * A workspace edit with resource creations or deletions aborts the operation, e.g. consecutive edits will\n\t\t * not be attempted, when a single edit fails.\n\t\t *\n\t\t * @param edit A workspace edit.\n\t\t * @param metadata Optional {@link WorkspaceEditMetadata metadata} for the edit.\n\t\t * @return A thenable that resolves when the edit could be applied.\n\t\t */\n\t\texport function applyEdit(edit: WorkspaceEdit, metadata?: WorkspaceEditMetadata): Thenable<boolean>;"
                    },
                    {
                      "_": 12567,
                      "name": "openTextDocument",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "ref": "TextDocument",
                            "targs": [],
                            "isNullable": false,
                            "_": 12567,
                            "source": "TextDocument"
                          }
                        ],
                        "isNullable": false,
                        "_": 12567,
                        "source": " Thenable<TextDocument>"
                      },
                      "generics": [],
                      "doc": "Opens a document. Will return early if this document is already open. Otherwise\nthe document is loaded and the {@link workspace.onDidOpenTextDocumentdidOpen}-event fires.\n\nThe document is denoted by an {@link Uri}. Depending on the {@link Uri.schemescheme} the\nfollowing rules apply:\n* `file`-scheme: Open a file on disk (`openTextDocument(Uri.file(path))`). Will be rejected if the file\ndoes not exist or cannot be loaded.\n* `untitled`-scheme: Open a blank untitled file with associated path (`openTextDocument(Uri.file(path).with({ scheme: 'untitled' }))`).\nThe language will be derived from the file name.\n* For all other schemes contributed {@link TextDocumentContentProvidertext document content providers} and\n{@link FileSystemProviderfile system providers} are consulted.\n\n*Note* that the lifecycle of the returned document is owned by the editor and not by the extension. That means an\n{@linkcode workspace.onDidCloseTextDocumentonDidClose}-event can occur at any time after opening it.\nA short-hand for `openTextDocument(Uri.file(fileName))`.\nOpens an untitled text document. The editor will prompt the user for a file\npath when the document is to be saved. The `options` parameter allows to\nspecify the *language* and/or the *content* of the document.",
                      "params": [
                        {
                          "name": "uri",
                          "type": {
                            "ref": "Uri",
                            "targs": [],
                            "isNullable": false,
                            "_": 12567,
                            "source": " Uri"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Opens a document. Will return early if this document is already open. Otherwise\n\t\t * the document is loaded and the {@link workspace.onDidOpenTextDocument didOpen}-event fires.\n\t\t *\n\t\t * The document is denoted by an {@link Uri}. Depending on the {@link Uri.scheme scheme} the\n\t\t * following rules apply:\n\t\t * * `file`-scheme: Open a file on disk (`openTextDocument(Uri.file(path))`). Will be rejected if the file\n\t\t * does not exist or cannot be loaded.\n\t\t * * `untitled`-scheme: Open a blank untitled file with associated path (`openTextDocument(Uri.file(path).with({ scheme: 'untitled' }))`).\n\t\t * The language will be derived from the file name.\n\t\t * * For all other schemes contributed {@link TextDocumentContentProvider text document content providers} and\n\t\t * {@link FileSystemProvider file system providers} are consulted.\n\t\t *\n\t\t * *Note* that the lifecycle of the returned document is owned by the editor and not by the extension. That means an\n\t\t * {@linkcode workspace.onDidCloseTextDocument onDidClose}-event can occur at any time after opening it.\n\t\t *\n\t\t * @param uri Identifies the resource to open.\n\t\t * @return A promise that resolves to a {@link TextDocument document}.\n\t\t */\n\t\texport function openTextDocument(uri: Uri): Thenable<TextDocument>;"
                    },
                    {
                      "_": 12576,
                      "name": "openTextDocument",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "ref": "TextDocument",
                            "targs": [],
                            "isNullable": false,
                            "_": 12576,
                            "source": "TextDocument"
                          }
                        ],
                        "isNullable": false,
                        "_": 12576,
                        "source": " Thenable<TextDocument>"
                      },
                      "generics": [],
                      "doc": "Opens a document. Will return early if this document is already open. Otherwise\nthe document is loaded and the {@link workspace.onDidOpenTextDocumentdidOpen}-event fires.\n\nThe document is denoted by an {@link Uri}. Depending on the {@link Uri.schemescheme} the\nfollowing rules apply:\n* `file`-scheme: Open a file on disk (`openTextDocument(Uri.file(path))`). Will be rejected if the file\ndoes not exist or cannot be loaded.\n* `untitled`-scheme: Open a blank untitled file with associated path (`openTextDocument(Uri.file(path).with({ scheme: 'untitled' }))`).\nThe language will be derived from the file name.\n* For all other schemes contributed {@link TextDocumentContentProvidertext document content providers} and\n{@link FileSystemProviderfile system providers} are consulted.\n\n*Note* that the lifecycle of the returned document is owned by the editor and not by the extension. That means an\n{@linkcode workspace.onDidCloseTextDocumentonDidClose}-event can occur at any time after opening it.\nA short-hand for `openTextDocument(Uri.file(fileName))`.\nOpens an untitled text document. The editor will prompt the user for a file\npath when the document is to be saved. The `options` parameter allows to\nspecify the *language* and/or the *content* of the document.",
                      "params": [
                        {
                          "name": "fileName",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 12576,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * A short-hand for `openTextDocument(Uri.file(fileName))`.\n\t\t *\n\t\t * @see {@link workspace.openTextDocument}\n\t\t * @param fileName A name of a file on disk.\n\t\t * @return A promise that resolves to a {@link TextDocument document}.\n\t\t */\n\t\texport function openTextDocument(fileName: string): Thenable<TextDocument>;"
                    },
                    {
                      "_": 12586,
                      "name": "openTextDocument",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "ref": "TextDocument",
                            "targs": [],
                            "isNullable": false,
                            "_": 12586,
                            "source": "TextDocument"
                          }
                        ],
                        "isNullable": false,
                        "_": 12586,
                        "source": " Thenable<TextDocument>"
                      },
                      "generics": [],
                      "doc": "Opens a document. Will return early if this document is already open. Otherwise\nthe document is loaded and the {@link workspace.onDidOpenTextDocumentdidOpen}-event fires.\n\nThe document is denoted by an {@link Uri}. Depending on the {@link Uri.schemescheme} the\nfollowing rules apply:\n* `file`-scheme: Open a file on disk (`openTextDocument(Uri.file(path))`). Will be rejected if the file\ndoes not exist or cannot be loaded.\n* `untitled`-scheme: Open a blank untitled file with associated path (`openTextDocument(Uri.file(path).with({ scheme: 'untitled' }))`).\nThe language will be derived from the file name.\n* For all other schemes contributed {@link TextDocumentContentProvidertext document content providers} and\n{@link FileSystemProviderfile system providers} are consulted.\n\n*Note* that the lifecycle of the returned document is owned by the editor and not by the extension. That means an\n{@linkcode workspace.onDidCloseTextDocumentonDidClose}-event can occur at any time after opening it.\nA short-hand for `openTextDocument(Uri.file(fileName))`.\nOpens an untitled text document. The editor will prompt the user for a file\npath when the document is to be saved. The `options` parameter allows to\nspecify the *language* and/or the *content* of the document.",
                      "params": [
                        {
                          "name": "options",
                          "type": {
                            "ref": "IInline65",
                            "targs": [],
                            "isNullable": false,
                            "_": 12586,
                            "source": " { language?: string; content?: string }"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Opens an untitled text document. The editor will prompt the user for a file\n\t\t * path when the document is to be saved. The `options` parameter allows to\n\t\t * specify the *language* and/or the *content* of the document.\n\t\t *\n\t\t * @param options Options to control how the document will be created.\n\t\t * @return A promise that resolves to a {@link TextDocument document}.\n\t\t */\n\t\texport function openTextDocument(options?: { language?: string; content?: string }): Thenable<TextDocument>;"
                    },
                    {
                      "_": 12597,
                      "name": "registerTextDocumentContentProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 12597,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Register a text document content provider.\n\nOnly one provider can be registered per scheme.",
                      "params": [
                        {
                          "name": "scheme",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 12597,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "provider",
                          "type": {
                            "ref": "TextDocumentContentProvider",
                            "targs": [],
                            "isNullable": false,
                            "_": 12597,
                            "source": " TextDocumentContentProvider"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Register a text document content provider.\n\t\t *\n\t\t * Only one provider can be registered per scheme.\n\t\t *\n\t\t * @param scheme The uri-scheme to register for.\n\t\t * @param provider A content provider.\n\t\t * @return A {@link Disposable} that unregisters this provider when being disposed.\n\t\t */\n\t\texport function registerTextDocumentContentProvider(scheme: string, provider: TextDocumentContentProvider): Disposable;"
                    },
                    {
                      "_": 12670,
                      "name": "openNotebookDocument",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "ref": "NotebookDocument",
                            "targs": [],
                            "isNullable": false,
                            "_": 12670,
                            "source": "NotebookDocument"
                          }
                        ],
                        "isNullable": false,
                        "_": 12670,
                        "source": " Thenable<NotebookDocument>"
                      },
                      "generics": [],
                      "doc": "Open a notebook. Will return early if this notebook is already {@link notebookDocumentsloaded}. Otherwise\nthe notebook is loaded and the {@linkcode onDidOpenNotebookDocument}-event fires.\n\n*Note* that the lifecycle of the returned notebook is owned by the editor and not by the extension. That means an\n{@linkcode onDidCloseNotebookDocument}-event can occur at any time after.\n\n*Note* that opening a notebook does not show a notebook editor. This function only returns a notebook document which\ncan be shown in a notebook editor but it can also be used for other things.\nOpen an untitled notebook. The editor will prompt the user for a file\npath when the document is to be saved.",
                      "params": [
                        {
                          "name": "uri",
                          "type": {
                            "ref": "Uri",
                            "targs": [],
                            "isNullable": false,
                            "_": 12670,
                            "source": " Uri"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Open a notebook. Will return early if this notebook is already {@link notebookDocuments loaded}. Otherwise\n\t\t * the notebook is loaded and the {@linkcode onDidOpenNotebookDocument}-event fires.\n\t\t *\n\t\t * *Note* that the lifecycle of the returned notebook is owned by the editor and not by the extension. That means an\n\t\t * {@linkcode onDidCloseNotebookDocument}-event can occur at any time after.\n\t\t *\n\t\t * *Note* that opening a notebook does not show a notebook editor. This function only returns a notebook document which\n\t\t * can be shown in a notebook editor but it can also be used for other things.\n\t\t *\n\t\t * @param uri The resource to open.\n\t\t * @returns A promise that resolves to a {@link NotebookDocument notebook}\n\t\t */\n\t\texport function openNotebookDocument(uri: Uri): Thenable<NotebookDocument>;"
                    },
                    {
                      "_": 12681,
                      "name": "openNotebookDocument",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "ref": "NotebookDocument",
                            "targs": [],
                            "isNullable": false,
                            "_": 12681,
                            "source": "NotebookDocument"
                          }
                        ],
                        "isNullable": false,
                        "_": 12681,
                        "source": " Thenable<NotebookDocument>"
                      },
                      "generics": [],
                      "doc": "Open a notebook. Will return early if this notebook is already {@link notebookDocumentsloaded}. Otherwise\nthe notebook is loaded and the {@linkcode onDidOpenNotebookDocument}-event fires.\n\n*Note* that the lifecycle of the returned notebook is owned by the editor and not by the extension. That means an\n{@linkcode onDidCloseNotebookDocument}-event can occur at any time after.\n\n*Note* that opening a notebook does not show a notebook editor. This function only returns a notebook document which\ncan be shown in a notebook editor but it can also be used for other things.\nOpen an untitled notebook. The editor will prompt the user for a file\npath when the document is to be saved.",
                      "params": [
                        {
                          "name": "notebookType",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 12681,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "content",
                          "type": {
                            "ref": "NotebookData",
                            "targs": [],
                            "isNullable": false,
                            "_": 12681,
                            "source": " NotebookData"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Open an untitled notebook. The editor will prompt the user for a file\n\t\t * path when the document is to be saved.\n\t\t *\n\t\t * @see {@link workspace.openNotebookDocument}\n\t\t * @param notebookType The notebook type that should be used.\n\t\t * @param content The initial contents of the notebook.\n\t\t * @returns A promise that resolves to a {@link NotebookDocument notebook}.\n\t\t */\n\t\texport function openNotebookDocument(notebookType: string, content?: NotebookData): Thenable<NotebookDocument>;"
                    },
                    {
                      "_": 12719,
                      "name": "registerNotebookSerializer",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 12719,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Register a {@link NotebookSerializernotebook serializer}.\n\nA notebook serializer must be contributed through the `notebooks` extension point. When opening a notebook file, the editor will send\nthe `onNotebook:<notebookType>` activation event, and extensions must register their serializer in return.",
                      "params": [
                        {
                          "name": "notebookType",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 12719,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "serializer",
                          "type": {
                            "ref": "NotebookSerializer",
                            "targs": [],
                            "isNullable": false,
                            "_": 12719,
                            "source": " NotebookSerializer"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "options",
                          "type": {
                            "ref": "NotebookDocumentContentOptions",
                            "targs": [],
                            "isNullable": false,
                            "_": 12719,
                            "source": " NotebookDocumentContentOptions"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Register a {@link NotebookSerializer notebook serializer}.\n\t\t *\n\t\t * A notebook serializer must be contributed through the `notebooks` extension point. When opening a notebook file, the editor will send\n\t\t * the `onNotebook:<notebookType>` activation event, and extensions must register their serializer in return.\n\t\t *\n\t\t * @param notebookType A notebook.\n\t\t * @param serializer A notebook serializer.\n\t\t * @param options Optional context options that define what parts of a notebook should be persisted\n\t\t * @return A {@link Disposable} that unregisters this serializer when being disposed.\n\t\t */\n\t\texport function registerNotebookSerializer(notebookType: string, serializer: NotebookSerializer, options?: NotebookDocumentContentOptions): Disposable;"
                    },
                    {
                      "_": 12819,
                      "name": "getConfiguration",
                      "type": {
                        "ref": "WorkspaceConfiguration",
                        "targs": [],
                        "isNullable": false,
                        "_": 12819,
                        "source": " WorkspaceConfiguration"
                      },
                      "generics": [],
                      "doc": "Get a workspace configuration object.\n\nWhen a section-identifier is provided only that part of the configuration\nis returned. Dots in the section-identifier are interpreted as child-access,\nlike `{ myExt: { setting: { doIt: true }}}` and `getConfiguration('myExt.setting').get('doIt') === true`.\n\nWhen a scope is provided configuration confined to that scope is returned. Scope can be a resource or a language identifier or both.",
                      "params": [
                        {
                          "name": "section",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 12819,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": true
                        },
                        {
                          "name": "scope",
                          "type": {
                            "union": [
                              {
                                "ref": "ConfigurationScope",
                                "targs": [],
                                "isNullable": false,
                                "_": 12819,
                                "source": " ConfigurationScope"
                              },
                              {
                                "core": "null",
                                "isNullable": false,
                                "_": 12819,
                                "source": " null"
                              }
                            ],
                            "isNullable": false,
                            "_": 12819,
                            "source": " ConfigurationScope | null"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Get a workspace configuration object.\n\t\t *\n\t\t * When a section-identifier is provided only that part of the configuration\n\t\t * is returned. Dots in the section-identifier are interpreted as child-access,\n\t\t * like `{ myExt: { setting: { doIt: true }}}` and `getConfiguration('myExt.setting').get('doIt') === true`.\n\t\t *\n\t\t * When a scope is provided configuration confined to that scope is returned. Scope can be a resource or a language identifier or both.\n\t\t *\n\t\t * @param section A dot-separated identifier.\n\t\t * @param scope A scope for which the configuration is asked for.\n\t\t * @return The full configuration or a subset.\n\t\t */\n\t\texport function getConfiguration(section?: string, scope?: ConfigurationScope | null): WorkspaceConfiguration;"
                    },
                    {
                      "_": 12835,
                      "name": "registerTaskProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 12835,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Register a task provider.",
                      "params": [
                        {
                          "name": "type",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 12835,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "provider",
                          "type": {
                            "ref": "TaskProvider",
                            "targs": [],
                            "isNullable": false,
                            "_": 12835,
                            "source": " TaskProvider"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Register a task provider.\n\t\t *\n\t\t * @deprecated Use the corresponding function on the `tasks` namespace instead\n\t\t *\n\t\t * @param type The task kind type this provider is registered for.\n\t\t * @param provider A task provider.\n\t\t * @return A {@link Disposable} that unregisters this provider when being disposed.\n\t\t */\n\t\texport function registerTaskProvider(type: string, provider: TaskProvider): Disposable;"
                    },
                    {
                      "_": 12848,
                      "name": "registerFileSystemProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 12848,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Register a filesystem provider for a given scheme, e.g. `ftp`.\n\nThere can only be one provider per scheme and an error is being thrown when a scheme\nhas been claimed by another provider or when it is reserved.",
                      "params": [
                        {
                          "name": "scheme",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 12848,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "provider",
                          "type": {
                            "ref": "FileSystemProvider",
                            "targs": [],
                            "isNullable": false,
                            "_": 12848,
                            "source": " FileSystemProvider"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "options",
                          "type": {
                            "ref": "IInline66",
                            "targs": [],
                            "isNullable": false,
                            "_": 12848,
                            "source": " { readonly isCaseSensitive?: boolean; readonly isReadonly?: boolean }"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Register a filesystem provider for a given scheme, e.g. `ftp`.\n\t\t *\n\t\t * There can only be one provider per scheme and an error is being thrown when a scheme\n\t\t * has been claimed by another provider or when it is reserved.\n\t\t *\n\t\t * @param scheme The uri-{@link Uri.scheme scheme} the provider registers for.\n\t\t * @param provider The filesystem provider.\n\t\t * @param options Immutable metadata about the provider.\n\t\t * @return A {@link Disposable} that unregisters this provider when being disposed.\n\t\t */\n\t\texport function registerFileSystemProvider(scheme: string, provider: FileSystemProvider, options?: { readonly isCaseSensitive?: boolean; readonly isReadonly?: boolean }): Disposable;"
                    }
                  ],
                  "vars": [
                    {
                      "_": 12229,
                      "name": "fs",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "A {@link FileSystemfile system} instance that allows to interact with local and remote\nfiles, e.g. `vscode.workspace.fs.readDirectory(someUri)` allows to retrieve all entries\nof a directory or `vscode.workspace.fs.stat(anotherUri)` returns the meta data for a\nfile.",
                      "type": {
                        "ref": "FileSystem",
                        "targs": [],
                        "isNullable": false,
                        "_": 12229,
                        "source": " FileSystem"
                      },
                      "source": " fs: FileSystem"
                    },
                    {
                      "_": 12240,
                      "name": "rootPath",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "The uri of the first entry of {@linkcode workspace.workspaceFoldersworkspaceFolders}\nas `string`. `undefined` if there is no first entry.\n\nRefer to https://code.visualstudio.com/docs/editor/workspaces for more information\non workspaces.",
                      "type": {
                        "union": [
                          {
                            "core": "string",
                            "isNullable": false,
                            "_": 12240,
                            "source": " string"
                          },
                          {
                            "core": "undefined",
                            "isNullable": false,
                            "_": 12240,
                            "source": " undefined"
                          }
                        ],
                        "isNullable": false,
                        "_": 12240,
                        "source": " string | undefined"
                      },
                      "source": " rootPath: string | undefined"
                    },
                    {
                      "_": 12249,
                      "name": "workspaceFolders",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "List of workspace folders (0-N) that are open in the editor. `undefined` when no workspace\nhas been opened.\n\nRefer to https://code.visualstudio.com/docs/editor/workspaces for more information\non workspaces.",
                      "type": {
                        "union": [
                          {
                            "operator": 146,
                            "type": {
                              "core": "array",
                              "targs": [
                                {
                                  "ref": "WorkspaceFolder",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 12249,
                                  "source": " WorkspaceFolder"
                                }
                              ],
                              "isNullable": false,
                              "_": 12249,
                              "source": " WorkspaceFolder[]"
                            },
                            "isNullable": false,
                            "_": 12249,
                            "source": " readonly WorkspaceFolder[]"
                          },
                          {
                            "core": "undefined",
                            "isNullable": false,
                            "_": 12249,
                            "source": " undefined"
                          }
                        ],
                        "isNullable": false,
                        "_": 12249,
                        "source": " readonly WorkspaceFolder[] | undefined"
                      },
                      "source": " workspaceFolders: readonly WorkspaceFolder[] | undefined"
                    },
                    {
                      "_": 12258,
                      "name": "name",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "The name of the workspace. `undefined` when no workspace\nhas been opened.\n\nRefer to https://code.visualstudio.com/docs/editor/workspaces for more information on\nthe concept of workspaces.",
                      "type": {
                        "union": [
                          {
                            "core": "string",
                            "isNullable": false,
                            "_": 12258,
                            "source": " string"
                          },
                          {
                            "core": "undefined",
                            "isNullable": false,
                            "_": 12258,
                            "source": " undefined"
                          }
                        ],
                        "isNullable": false,
                        "_": 12258,
                        "source": " string | undefined"
                      },
                      "source": " name: string | undefined"
                    },
                    {
                      "_": 12292,
                      "name": "workspaceFile",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "The location of the workspace file, for example:\n\n`file:///Users/name/Development/myProject.code-workspace`\n\nor\n\n`untitled:1555503116870`\n\nfor a workspace that is untitled and not yet saved.\n\nDepending on the workspace that is opened, the value will be:\n * `undefined` when no workspace is opened\n * the path of the workspace file as `Uri` otherwise. if the workspace\nis untitled, the returned URI will use the `untitled:` scheme\n\nThe location can e.g. be used with the `vscode.openFolder` command to\nopen the workspace again after it has been closed.\n\n**Example:**\n```typescript\nvscode.commands.executeCommand('vscode.openFolder', uriOfWorkspace);\n```\n\nRefer to https://code.visualstudio.com/docs/editor/workspaces for more information on\nthe concept of workspaces.\n\n**Note:** it is not advised to use `workspace.workspaceFile` to write\nconfiguration data into the file. You can use `workspace.getConfiguration().update()`\nfor that purpose which will work both when a single folder is opened as\nwell as an untitled or saved workspace.",
                      "type": {
                        "union": [
                          {
                            "ref": "Uri",
                            "targs": [],
                            "isNullable": false,
                            "_": 12292,
                            "source": " Uri"
                          },
                          {
                            "core": "undefined",
                            "isNullable": false,
                            "_": 12292,
                            "source": " undefined"
                          }
                        ],
                        "isNullable": false,
                        "_": 12292,
                        "source": " Uri | undefined"
                      },
                      "source": " workspaceFile: Uri | undefined"
                    },
                    {
                      "_": 12302,
                      "name": "onDidChangeWorkspaceFolders",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "An event that is emitted when a workspace folder is added or removed.\n\n**Note:** this event will not fire if the first workspace folder is added, removed or changed,\nbecause in that case the currently executing extensions (including the one that listens to this\nevent) will be terminated and restarted so that the (deprecated) `rootPath` property is updated\nto point to the first workspace folder.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "ref": "WorkspaceFoldersChangeEvent",
                            "targs": [],
                            "isNullable": false,
                            "_": 12302,
                            "source": "WorkspaceFoldersChangeEvent"
                          }
                        ],
                        "isNullable": false,
                        "_": 12302,
                        "source": " Event<WorkspaceFoldersChangeEvent>"
                      },
                      "source": " onDidChangeWorkspaceFolders: Event<WorkspaceFoldersChangeEvent>"
                    },
                    {
                      "_": 12546,
                      "name": "textDocuments",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "All text documents currently known to the editor.",
                      "type": {
                        "operator": 146,
                        "type": {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "TextDocument",
                              "targs": [],
                              "isNullable": false,
                              "_": 12546,
                              "source": " TextDocument"
                            }
                          ],
                          "isNullable": false,
                          "_": 12546,
                          "source": " TextDocument[]"
                        },
                        "isNullable": false,
                        "_": 12546,
                        "source": " readonly TextDocument[]"
                      },
                      "source": " textDocuments: readonly TextDocument[]"
                    },
                    {
                      "_": 12611,
                      "name": "onDidOpenTextDocument",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "An event that is emitted when a {@link TextDocumenttext document} is opened or when the language id\nof a text document {@link languages.setTextDocumentLanguagehas been changed}.\n\nTo add an event listener when a visible text document is opened, use the {@link TextEditor} events in the\n{@link window} namespace. Note that:\n\n- The event is emitted before the {@link TextDocumentdocument} is updated in the\n{@link window.activeTextEditoractive text editor}\n- When a {@link TextDocumenttext document} is already open (e.g.: open in another {@link window.visibleTextEditorsvisible text editor}) this event is not emitted",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "ref": "TextDocument",
                            "targs": [],
                            "isNullable": false,
                            "_": 12611,
                            "source": "TextDocument"
                          }
                        ],
                        "isNullable": false,
                        "_": 12611,
                        "source": " Event<TextDocument>"
                      },
                      "source": " onDidOpenTextDocument: Event<TextDocument>"
                    },
                    {
                      "_": 12623,
                      "name": "onDidCloseTextDocument",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "An event that is emitted when a {@link TextDocumenttext document} is disposed or when the language id\nof a text document {@link languages.setTextDocumentLanguagehas been changed}.\n\n*Note 1:* There is no guarantee that this event fires when an editor tab is closed, use the\n{@linkcode window.onDidChangeVisibleTextEditorsonDidChangeVisibleTextEditors}-event to know when editors change.\n\n*Note 2:* A document can be open but not shown in an editor which means this event can fire\nfor a document that has not been shown in an editor.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "ref": "TextDocument",
                            "targs": [],
                            "isNullable": false,
                            "_": 12623,
                            "source": "TextDocument"
                          }
                        ],
                        "isNullable": false,
                        "_": 12623,
                        "source": " Event<TextDocument>"
                      },
                      "source": " onDidCloseTextDocument: Event<TextDocument>"
                    },
                    {
                      "_": 12630,
                      "name": "onDidChangeTextDocument",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "An event that is emitted when a {@link TextDocumenttext document} is changed. This usually happens\nwhen the {@link TextDocument.getTextcontents} changes but also when other things like the\n{@link TextDocument.isDirtydirty}-state changes.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "ref": "TextDocumentChangeEvent",
                            "targs": [],
                            "isNullable": false,
                            "_": 12630,
                            "source": "TextDocumentChangeEvent"
                          }
                        ],
                        "isNullable": false,
                        "_": 12630,
                        "source": " Event<TextDocumentChangeEvent>"
                      },
                      "source": " onDidChangeTextDocument: Event<TextDocumentChangeEvent>"
                    },
                    {
                      "_": 12645,
                      "name": "onWillSaveTextDocument",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "An event that is emitted when a {@link TextDocumenttext document} will be saved to disk.\n\n*Note 1:* Subscribers can delay saving by registering asynchronous work. For the sake of data integrity the editor\nmight save without firing this event. For instance when shutting down with dirty files.\n\n*Note 2:* Subscribers are called sequentially and they can {@link TextDocumentWillSaveEvent.waitUntildelay} saving\nby registering asynchronous work. Protection against misbehaving listeners is implemented as such:\n * there is an overall time budget that all listeners share and if that is exhausted no further listener is called\n * listeners that take a long time or produce errors frequently will not be called anymore\n\nThe current thresholds are 1.5 seconds as overall time budget and a listener can misbehave 3 times before being ignored.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "ref": "TextDocumentWillSaveEvent",
                            "targs": [],
                            "isNullable": false,
                            "_": 12645,
                            "source": "TextDocumentWillSaveEvent"
                          }
                        ],
                        "isNullable": false,
                        "_": 12645,
                        "source": " Event<TextDocumentWillSaveEvent>"
                      },
                      "source": " onWillSaveTextDocument: Event<TextDocumentWillSaveEvent>"
                    },
                    {
                      "_": 12650,
                      "name": "onDidSaveTextDocument",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "An event that is emitted when a {@link TextDocumenttext document} is saved to disk.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "ref": "TextDocument",
                            "targs": [],
                            "isNullable": false,
                            "_": 12650,
                            "source": "TextDocument"
                          }
                        ],
                        "isNullable": false,
                        "_": 12650,
                        "source": " Event<TextDocument>"
                      },
                      "source": " onDidSaveTextDocument: Event<TextDocument>"
                    },
                    {
                      "_": 12655,
                      "name": "notebookDocuments",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "All notebook documents currently known to the editor.",
                      "type": {
                        "operator": 146,
                        "type": {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "NotebookDocument",
                              "targs": [],
                              "isNullable": false,
                              "_": 12655,
                              "source": " NotebookDocument"
                            }
                          ],
                          "isNullable": false,
                          "_": 12655,
                          "source": " NotebookDocument[]"
                        },
                        "isNullable": false,
                        "_": 12655,
                        "source": " readonly NotebookDocument[]"
                      },
                      "source": " notebookDocuments: readonly NotebookDocument[]"
                    },
                    {
                      "_": 12686,
                      "name": "onDidChangeNotebookDocument",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "An event that is emitted when a {@link NotebookDocumentnotebook} has changed.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "ref": "NotebookDocumentChangeEvent",
                            "targs": [],
                            "isNullable": false,
                            "_": 12686,
                            "source": "NotebookDocumentChangeEvent"
                          }
                        ],
                        "isNullable": false,
                        "_": 12686,
                        "source": " Event<NotebookDocumentChangeEvent>"
                      },
                      "source": " onDidChangeNotebookDocument: Event<NotebookDocumentChangeEvent>"
                    },
                    {
                      "_": 12701,
                      "name": "onWillSaveNotebookDocument",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "An event that is emitted when a {@link NotebookDocumentnotebook document} will be saved to disk.\n\n*Note 1:* Subscribers can delay saving by registering asynchronous work. For the sake of data integrity the editor\nmight save without firing this event. For instance when shutting down with dirty files.\n\n*Note 2:* Subscribers are called sequentially and they can {@link NotebookDocumentWillSaveEvent.waitUntildelay} saving\nby registering asynchronous work. Protection against misbehaving listeners is implemented as such:\n * there is an overall time budget that all listeners share and if that is exhausted no further listener is called\n * listeners that take a long time or produce errors frequently will not be called anymore\n\nThe current thresholds are 1.5 seconds as overall time budget and a listener can misbehave 3 times before being ignored.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "ref": "NotebookDocumentWillSaveEvent",
                            "targs": [],
                            "isNullable": false,
                            "_": 12701,
                            "source": "NotebookDocumentWillSaveEvent"
                          }
                        ],
                        "isNullable": false,
                        "_": 12701,
                        "source": " Event<NotebookDocumentWillSaveEvent>"
                      },
                      "source": " onWillSaveNotebookDocument: Event<NotebookDocumentWillSaveEvent>"
                    },
                    {
                      "_": 12706,
                      "name": "onDidSaveNotebookDocument",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "An event that is emitted when a {@link NotebookDocumentnotebook} is saved.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "ref": "NotebookDocument",
                            "targs": [],
                            "isNullable": false,
                            "_": 12706,
                            "source": "NotebookDocument"
                          }
                        ],
                        "isNullable": false,
                        "_": 12706,
                        "source": " Event<NotebookDocument>"
                      },
                      "source": " onDidSaveNotebookDocument: Event<NotebookDocument>"
                    },
                    {
                      "_": 12724,
                      "name": "onDidOpenNotebookDocument",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "An event that is emitted when a {@link NotebookDocumentnotebook} is opened.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "ref": "NotebookDocument",
                            "targs": [],
                            "isNullable": false,
                            "_": 12724,
                            "source": "NotebookDocument"
                          }
                        ],
                        "isNullable": false,
                        "_": 12724,
                        "source": " Event<NotebookDocument>"
                      },
                      "source": " onDidOpenNotebookDocument: Event<NotebookDocument>"
                    },
                    {
                      "_": 12734,
                      "name": "onDidCloseNotebookDocument",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "An event that is emitted when a {@link NotebookDocumentnotebook} is disposed.\n\n*Note 1:* There is no guarantee that this event fires when an editor tab is closed.\n\n*Note 2:* A notebook can be open but not shown in an editor which means this event can fire\nfor a notebook that has not been shown in an editor.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "ref": "NotebookDocument",
                            "targs": [],
                            "isNullable": false,
                            "_": 12734,
                            "source": "NotebookDocument"
                          }
                        ],
                        "isNullable": false,
                        "_": 12734,
                        "source": " Event<NotebookDocument>"
                      },
                      "source": " onDidCloseNotebookDocument: Event<NotebookDocument>"
                    },
                    {
                      "_": 12746,
                      "name": "onWillCreateFiles",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "An event that is emitted when files are being created.\n\n*Note 1:* This event is triggered by user gestures, like creating a file from the\nexplorer, or from the {@linkcode workspace.applyEdit}-api. This event is *not* fired when\nfiles change on disk, e.g triggered by another application, or when using the\n{@linkcode FileSystemworkspace.fs}-api.\n\n*Note 2:* When this event is fired, edits to files that are are being created cannot be applied.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "ref": "FileWillCreateEvent",
                            "targs": [],
                            "isNullable": false,
                            "_": 12746,
                            "source": "FileWillCreateEvent"
                          }
                        ],
                        "isNullable": false,
                        "_": 12746,
                        "source": " Event<FileWillCreateEvent>"
                      },
                      "source": " onWillCreateFiles: Event<FileWillCreateEvent>"
                    },
                    {
                      "_": 12756,
                      "name": "onDidCreateFiles",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "An event that is emitted when files have been created.\n\n*Note:* This event is triggered by user gestures, like creating a file from the\nexplorer, or from the {@linkcode workspace.applyEdit}-api, but this event is *not* fired when\nfiles change on disk, e.g triggered by another application, or when using the\n{@linkcode FileSystemworkspace.fs}-api.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "ref": "FileCreateEvent",
                            "targs": [],
                            "isNullable": false,
                            "_": 12756,
                            "source": "FileCreateEvent"
                          }
                        ],
                        "isNullable": false,
                        "_": 12756,
                        "source": " Event<FileCreateEvent>"
                      },
                      "source": " onDidCreateFiles: Event<FileCreateEvent>"
                    },
                    {
                      "_": 12768,
                      "name": "onWillDeleteFiles",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "An event that is emitted when files are being deleted.\n\n*Note 1:* This event is triggered by user gestures, like deleting a file from the\nexplorer, or from the {@linkcode workspace.applyEdit}-api, but this event is *not* fired when\nfiles change on disk, e.g triggered by another application, or when using the\n{@linkcode FileSystemworkspace.fs}-api.\n\n*Note 2:* When deleting a folder with children only one event is fired.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "ref": "FileWillDeleteEvent",
                            "targs": [],
                            "isNullable": false,
                            "_": 12768,
                            "source": "FileWillDeleteEvent"
                          }
                        ],
                        "isNullable": false,
                        "_": 12768,
                        "source": " Event<FileWillDeleteEvent>"
                      },
                      "source": " onWillDeleteFiles: Event<FileWillDeleteEvent>"
                    },
                    {
                      "_": 12780,
                      "name": "onDidDeleteFiles",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "An event that is emitted when files have been deleted.\n\n*Note 1:* This event is triggered by user gestures, like deleting a file from the\nexplorer, or from the {@linkcode workspace.applyEdit}-api, but this event is *not* fired when\nfiles change on disk, e.g triggered by another application, or when using the\n{@linkcode FileSystemworkspace.fs}-api.\n\n*Note 2:* When deleting a folder with children only one event is fired.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "ref": "FileDeleteEvent",
                            "targs": [],
                            "isNullable": false,
                            "_": 12780,
                            "source": "FileDeleteEvent"
                          }
                        ],
                        "isNullable": false,
                        "_": 12780,
                        "source": " Event<FileDeleteEvent>"
                      },
                      "source": " onDidDeleteFiles: Event<FileDeleteEvent>"
                    },
                    {
                      "_": 12792,
                      "name": "onWillRenameFiles",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "An event that is emitted when files are being renamed.\n\n*Note 1:* This event is triggered by user gestures, like renaming a file from the\nexplorer, and from the {@linkcode workspace.applyEdit}-api, but this event is *not* fired when\nfiles change on disk, e.g triggered by another application, or when using the\n{@linkcode FileSystemworkspace.fs}-api.\n\n*Note 2:* When renaming a folder with children only one event is fired.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "ref": "FileWillRenameEvent",
                            "targs": [],
                            "isNullable": false,
                            "_": 12792,
                            "source": "FileWillRenameEvent"
                          }
                        ],
                        "isNullable": false,
                        "_": 12792,
                        "source": " Event<FileWillRenameEvent>"
                      },
                      "source": " onWillRenameFiles: Event<FileWillRenameEvent>"
                    },
                    {
                      "_": 12804,
                      "name": "onDidRenameFiles",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "An event that is emitted when files have been renamed.\n\n*Note 1:* This event is triggered by user gestures, like renaming a file from the\nexplorer, and from the {@linkcode workspace.applyEdit}-api, but this event is *not* fired when\nfiles change on disk, e.g triggered by another application, or when using the\n{@linkcode FileSystemworkspace.fs}-api.\n\n*Note 2:* When renaming a folder with children only one event is fired.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "ref": "FileRenameEvent",
                            "targs": [],
                            "isNullable": false,
                            "_": 12804,
                            "source": "FileRenameEvent"
                          }
                        ],
                        "isNullable": false,
                        "_": 12804,
                        "source": " Event<FileRenameEvent>"
                      },
                      "source": " onDidRenameFiles: Event<FileRenameEvent>"
                    },
                    {
                      "_": 12824,
                      "name": "onDidChangeConfiguration",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "An event that is emitted when the {@link WorkspaceConfigurationconfiguration} changed.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "ref": "ConfigurationChangeEvent",
                            "targs": [],
                            "isNullable": false,
                            "_": 12824,
                            "source": "ConfigurationChangeEvent"
                          }
                        ],
                        "isNullable": false,
                        "_": 12824,
                        "source": " Event<ConfigurationChangeEvent>"
                      },
                      "source": " onDidChangeConfiguration: Event<ConfigurationChangeEvent>"
                    },
                    {
                      "_": 12853,
                      "name": "isTrusted",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "When true, the user has explicitly trusted the contents of the workspace.",
                      "type": {
                        "core": "boolean",
                        "isNullable": false,
                        "_": 12853,
                        "source": " boolean"
                      },
                      "source": " isTrusted: boolean"
                    },
                    {
                      "_": 12858,
                      "name": "onDidGrantWorkspaceTrust",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "Event that fires when the current workspace has been trusted.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "core": "void",
                            "isNullable": false,
                            "_": 12858,
                            "source": "void"
                          }
                        ],
                        "isNullable": false,
                        "_": 12858,
                        "source": " Event<void>"
                      },
                      "source": " onDidGrantWorkspaceTrust: Event<void>"
                    }
                  ],
                  "enums": []
                }
              },
              {
                "_": 12913,
                "namespace": "languages",
                "from": "submodule vscode",
                "items": {
                  "structs": [],
                  "typedefs": [],
                  "modules": [],
                  "funcs": [
                    {
                      "_": 12919,
                      "name": "getLanguages",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "core": "array",
                            "targs": [
                              {
                                "core": "string",
                                "isNullable": false,
                                "_": 12919,
                                "source": "string"
                              }
                            ],
                            "isNullable": false,
                            "_": 12919,
                            "source": "string[]"
                          }
                        ],
                        "isNullable": false,
                        "_": 12919,
                        "source": " Thenable<string[]>"
                      },
                      "generics": [],
                      "doc": "Return the identifiers of all known languages.",
                      "params": [],
                      "source": "\n\n\t\t/**\n\t\t * Return the identifiers of all known languages.\n\t\t * @return Promise resolving to an array of identifier strings.\n\t\t */\n\t\texport function getLanguages(): Thenable<string[]>;"
                    },
                    {
                      "_": 12932,
                      "name": "setTextDocumentLanguage",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "ref": "TextDocument",
                            "targs": [],
                            "isNullable": false,
                            "_": 12932,
                            "source": "TextDocument"
                          }
                        ],
                        "isNullable": false,
                        "_": 12932,
                        "source": " Thenable<TextDocument>"
                      },
                      "generics": [],
                      "doc": "Set (and change) the {@link TextDocument.languageIdlanguage} that is associated\nwith the given document.\n\n*Note* that calling this function will trigger the {@linkcode workspace.onDidCloseTextDocumentonDidCloseTextDocument} event\nfollowed by the {@linkcode workspace.onDidOpenTextDocumentonDidOpenTextDocument} event.",
                      "params": [
                        {
                          "name": "document",
                          "type": {
                            "ref": "TextDocument",
                            "targs": [],
                            "isNullable": false,
                            "_": 12932,
                            "source": " TextDocument"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "languageId",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 12932,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Set (and change) the {@link TextDocument.languageId language} that is associated\n\t\t * with the given document.\n\t\t *\n\t\t * *Note* that calling this function will trigger the {@linkcode workspace.onDidCloseTextDocument onDidCloseTextDocument} event\n\t\t * followed by the {@linkcode workspace.onDidOpenTextDocument onDidOpenTextDocument} event.\n\t\t *\n\t\t * @param document The document which language is to be changed\n\t\t * @param languageId The new language identifier.\n\t\t * @returns A thenable that resolves with the updated document.\n\t\t */\n\t\texport function setTextDocumentLanguage(document: TextDocument, languageId: string): Thenable<TextDocument>;"
                    },
                    {
                      "_": 12979,
                      "name": "match",
                      "type": {
                        "core": "number",
                        "isNullable": false,
                        "_": 12979,
                        "source": " number"
                      },
                      "generics": [],
                      "doc": "Compute the match between a document {@link DocumentSelectorselector} and a document. Values\ngreater than zero mean the selector matches the document.\n\nA match is computed according to these rules:\n1. When {@linkcode DocumentSelector} is an array, compute the match for each contained `DocumentFilter` or language identifier and take the maximum value.\n2. A string will be desugared to become the `language`-part of a {@linkcode DocumentFilter}, so `\"fooLang\"` is like `{ language: \"fooLang\" }`.\n3. A {@linkcode DocumentFilter} will be matched against the document by comparing its parts with the document. The following rules apply:\n   1. When the `DocumentFilter` is empty (`{}`) the result is `0`\n   2. When `scheme`, `language`, `pattern`, or `notebook` are defined but one doesn't match, the result is `0`\n   3. Matching against `*` gives a score of `5`, matching via equality or via a glob-pattern gives a score of `10`\n   4. The result is the maximum value of each match\n\nSamples:\n```js\n// default document from disk (file-scheme)\ndoc.uri; //'file:///my/file.js'\ndoc.languageId; // 'javascript'\nmatch('javascript', doc); // 10;\nmatch({ language: 'javascript' }, doc); // 10;\nmatch({ language: 'javascript', scheme: 'file' }, doc); // 10;\nmatch('*', doc); // 5\nmatch('fooLang', doc); // 0\nmatch(['fooLang', '*'], doc); // 5\n\n// virtual document, e.g. from git-index\ndoc.uri; // 'git:/my/file.js'\ndoc.languageId; // 'javascript'\nmatch('javascript', doc); // 10;\nmatch({ language: 'javascript', scheme: 'git' }, doc); // 10;\nmatch('*', doc); // 5\n\n// notebook cell document\ndoc.uri; // `vscode-notebook-cell:///my/notebook.ipynb#gl65s2pmha`;\ndoc.languageId; // 'python'\nmatch({ notebookType: 'jupyter-notebook' }, doc) // 10\nmatch({ notebookType: 'fooNotebook', language: 'python' }, doc) // 0\nmatch({ language: 'python' }, doc) // 10\nmatch({ notebookType: '*' }, doc) // 5\n```",
                      "params": [
                        {
                          "name": "selector",
                          "type": {
                            "ref": "DocumentSelector",
                            "targs": [],
                            "isNullable": false,
                            "_": 12979,
                            "source": " DocumentSelector"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "document",
                          "type": {
                            "ref": "TextDocument",
                            "targs": [],
                            "isNullable": false,
                            "_": 12979,
                            "source": " TextDocument"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Compute the match between a document {@link DocumentSelector selector} and a document. Values\n\t\t * greater than zero mean the selector matches the document.\n\t\t *\n\t\t * A match is computed according to these rules:\n\t\t * 1. When {@linkcode DocumentSelector} is an array, compute the match for each contained `DocumentFilter` or language identifier and take the maximum value.\n\t\t * 2. A string will be desugared to become the `language`-part of a {@linkcode DocumentFilter}, so `\"fooLang\"` is like `{ language: \"fooLang\" }`.\n\t\t * 3. A {@linkcode DocumentFilter} will be matched against the document by comparing its parts with the document. The following rules apply:\n\t\t *    1. When the `DocumentFilter` is empty (`{}`) the result is `0`\n\t\t *    2. When `scheme`, `language`, `pattern`, or `notebook` are defined but one doesn't match, the result is `0`\n\t\t *    3. Matching against `*` gives a score of `5`, matching via equality or via a glob-pattern gives a score of `10`\n\t\t *    4. The result is the maximum value of each match\n\t\t *\n\t\t * Samples:\n\t\t * ```js\n\t\t * // default document from disk (file-scheme)\n\t\t * doc.uri; //'file:///my/file.js'\n\t\t * doc.languageId; // 'javascript'\n\t\t * match('javascript', doc); // 10;\n\t\t * match({ language: 'javascript' }, doc); // 10;\n\t\t * match({ language: 'javascript', scheme: 'file' }, doc); // 10;\n\t\t * match('*', doc); // 5\n\t\t * match('fooLang', doc); // 0\n\t\t * match(['fooLang', '*'], doc); // 5\n\t\t *\n\t\t * // virtual document, e.g. from git-index\n\t\t * doc.uri; // 'git:/my/file.js'\n\t\t * doc.languageId; // 'javascript'\n\t\t * match('javascript', doc); // 10;\n\t\t * match({ language: 'javascript', scheme: 'git' }, doc); // 10;\n\t\t * match('*', doc); // 5\n\t\t *\n\t\t * // notebook cell document\n\t\t * doc.uri; // `vscode-notebook-cell:///my/notebook.ipynb#gl65s2pmha`;\n\t\t * doc.languageId; // 'python'\n\t\t * match({ notebookType: 'jupyter-notebook' }, doc) // 10\n\t\t * match({ notebookType: 'fooNotebook', language: 'python' }, doc) // 0\n\t\t * match({ language: 'python' }, doc) // 10\n\t\t * match({ notebookType: '*' }, doc) // 5\n\t\t * ```\n\t\t *\n\t\t * @param selector A document selector.\n\t\t * @param document A text document.\n\t\t * @return A number `>0` when the selector matches and `0` when the selector does not match.\n\t\t */\n\t\texport function match(selector: DocumentSelector, document: TextDocument): number;"
                    },
                    {
                      "_": 12993,
                      "name": "getDiagnostics",
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "ref": "Diagnostic",
                            "targs": [],
                            "isNullable": false,
                            "_": 12993,
                            "source": " Diagnostic"
                          }
                        ],
                        "isNullable": false,
                        "_": 12993,
                        "source": " Diagnostic[]"
                      },
                      "generics": [],
                      "doc": "Get all diagnostics for a given resource.\nGet all diagnostics.",
                      "params": [
                        {
                          "name": "resource",
                          "type": {
                            "ref": "Uri",
                            "targs": [],
                            "isNullable": false,
                            "_": 12993,
                            "source": " Uri"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Get all diagnostics for a given resource.\n\t\t *\n\t\t * @param resource A resource\n\t\t * @returns An array of {@link Diagnostic diagnostics} objects or an empty array.\n\t\t */\n\t\texport function getDiagnostics(resource: Uri): Diagnostic[];"
                    },
                    {
                      "_": 13000,
                      "name": "getDiagnostics",
                      "type": {
                        "core": "array",
                        "targs": [
                          {
                            "tuple": [
                              {
                                "ref": "Uri",
                                "targs": [],
                                "isNullable": false,
                                "_": 13000,
                                "source": "Uri"
                              },
                              {
                                "core": "array",
                                "targs": [
                                  {
                                    "ref": "Diagnostic",
                                    "targs": [],
                                    "isNullable": false,
                                    "_": 13000,
                                    "source": " Diagnostic"
                                  }
                                ],
                                "isNullable": false,
                                "_": 13000,
                                "source": " Diagnostic[]"
                              }
                            ],
                            "isNullable": false,
                            "_": 13000,
                            "source": " [Uri, Diagnostic[]]"
                          }
                        ],
                        "isNullable": false,
                        "_": 13000,
                        "source": " [Uri, Diagnostic[]][]"
                      },
                      "generics": [],
                      "doc": "Get all diagnostics for a given resource.\nGet all diagnostics.",
                      "params": [],
                      "source": "\n\n\t\t/**\n\t\t * Get all diagnostics.\n\t\t *\n\t\t * @returns An array of uri-diagnostics tuples or an empty array.\n\t\t */\n\t\texport function getDiagnostics(): [Uri, Diagnostic[]][];"
                    },
                    {
                      "_": 13008,
                      "name": "createDiagnosticCollection",
                      "type": {
                        "ref": "DiagnosticCollection",
                        "targs": [],
                        "isNullable": false,
                        "_": 13008,
                        "source": " DiagnosticCollection"
                      },
                      "generics": [],
                      "doc": "Create a diagnostics collection.",
                      "params": [
                        {
                          "name": "name",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 13008,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Create a diagnostics collection.\n\t\t *\n\t\t * @param name The {@link DiagnosticCollection.name name} of the collection.\n\t\t * @return A new diagnostic collection.\n\t\t */\n\t\texport function createDiagnosticCollection(name?: string): DiagnosticCollection;"
                    },
                    {
                      "_": 13016,
                      "name": "createLanguageStatusItem",
                      "type": {
                        "ref": "LanguageStatusItem",
                        "targs": [],
                        "isNullable": false,
                        "_": 13016,
                        "source": " LanguageStatusItem"
                      },
                      "generics": [],
                      "doc": "Creates a new {@link LanguageStatusItemlanguage status item}.",
                      "params": [
                        {
                          "name": "id",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 13016,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "selector",
                          "type": {
                            "ref": "DocumentSelector",
                            "targs": [],
                            "isNullable": false,
                            "_": 13016,
                            "source": " DocumentSelector"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Creates a new {@link LanguageStatusItem language status item}.\n\t\t *\n\t\t * @param id The identifier of the item.\n\t\t * @param selector The document selector that defines for what editors the item shows.\n\t\t */\n\t\texport function createLanguageStatusItem(id: string, selector: DocumentSelector): LanguageStatusItem;"
                    },
                    {
                      "_": 13037,
                      "name": "registerCompletionItemProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 13037,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Register a completion provider.\n\nMultiple providers can be registered for a language. In that case providers are sorted\nby their {@link languages.matchscore} and groups of equal score are sequentially asked for\ncompletion items. The process stops when one or many providers of a group return a\nresult. A failing provider (rejected promise or exception) will not fail the whole\noperation.\n\nA completion item provider can be associated with a set of `triggerCharacters`. When trigger\ncharacters are being typed, completions are requested but only from providers that registered\nthe typed character. Because of that trigger characters should be different than {@link LanguageConfiguration.wordPatternword characters},\na common trigger character is `.` to trigger member completions.",
                      "params": [
                        {
                          "name": "selector",
                          "type": {
                            "ref": "DocumentSelector",
                            "targs": [],
                            "isNullable": false,
                            "_": 13037,
                            "source": " DocumentSelector"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "provider",
                          "type": {
                            "ref": "CompletionItemProvider",
                            "targs": [],
                            "isNullable": false,
                            "_": 13037,
                            "source": " CompletionItemProvider"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "triggerCharacters",
                          "type": {
                            "core": "array",
                            "targs": [
                              {
                                "core": "string",
                                "isNullable": false,
                                "_": 13037,
                                "source": " string"
                              }
                            ],
                            "isNullable": false,
                            "_": 13037,
                            "source": " string[]"
                          },
                          "varargs": true,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Register a completion provider.\n\t\t *\n\t\t * Multiple providers can be registered for a language. In that case providers are sorted\n\t\t * by their {@link languages.match score} and groups of equal score are sequentially asked for\n\t\t * completion items. The process stops when one or many providers of a group return a\n\t\t * result. A failing provider (rejected promise or exception) will not fail the whole\n\t\t * operation.\n\t\t *\n\t\t * A completion item provider can be associated with a set of `triggerCharacters`. When trigger\n\t\t * characters are being typed, completions are requested but only from providers that registered\n\t\t * the typed character. Because of that trigger characters should be different than {@link LanguageConfiguration.wordPattern word characters},\n\t\t * a common trigger character is `.` to trigger member completions.\n\t\t *\n\t\t * @param selector A selector that defines the documents this provider is applicable to.\n\t\t * @param provider A completion provider.\n\t\t * @param triggerCharacters Trigger completion when the user types one of the characters.\n\t\t * @return A {@link Disposable} that unregisters this provider when being disposed.\n\t\t */\n\t\texport function registerCompletionItemProvider(selector: DocumentSelector, provider: CompletionItemProvider, ...triggerCharacters: string[]): Disposable;"
                    },
                    {
                      "_": 13050,
                      "name": "registerInlineCompletionItemProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 13050,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Registers an inline completion provider.\n\nMultiple providers can be registered for a language. In that case providers are asked in\nparallel and the results are merged. A failing provider (rejected promise or exception) will\nnot cause a failure of the whole operation.",
                      "params": [
                        {
                          "name": "selector",
                          "type": {
                            "ref": "DocumentSelector",
                            "targs": [],
                            "isNullable": false,
                            "_": 13050,
                            "source": " DocumentSelector"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "provider",
                          "type": {
                            "ref": "InlineCompletionItemProvider",
                            "targs": [],
                            "isNullable": false,
                            "_": 13050,
                            "source": " InlineCompletionItemProvider"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Registers an inline completion provider.\n\t\t *\n\t\t * Multiple providers can be registered for a language. In that case providers are asked in\n\t\t * parallel and the results are merged. A failing provider (rejected promise or exception) will\n\t\t * not cause a failure of the whole operation.\n\t\t *\n\t\t * @param selector A selector that defines the documents this provider is applicable to.\n\t\t * @param provider An inline completion provider.\n\t\t * @return A {@link Disposable} that unregisters this provider when being disposed.\n\t\t */\n\t\texport function registerInlineCompletionItemProvider(selector: DocumentSelector, provider: InlineCompletionItemProvider): Disposable;"
                    },
                    {
                      "_": 13064,
                      "name": "registerCodeActionsProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 13064,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Register a code action provider.\n\nMultiple providers can be registered for a language. In that case providers are asked in\nparallel and the results are merged. A failing provider (rejected promise or exception) will\nnot cause a failure of the whole operation.",
                      "params": [
                        {
                          "name": "selector",
                          "type": {
                            "ref": "DocumentSelector",
                            "targs": [],
                            "isNullable": false,
                            "_": 13064,
                            "source": " DocumentSelector"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "provider",
                          "type": {
                            "ref": "CodeActionProvider",
                            "targs": [],
                            "isNullable": false,
                            "_": 13064,
                            "source": " CodeActionProvider"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "metadata",
                          "type": {
                            "ref": "CodeActionProviderMetadata",
                            "targs": [],
                            "isNullable": false,
                            "_": 13064,
                            "source": " CodeActionProviderMetadata"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Register a code action provider.\n\t\t *\n\t\t * Multiple providers can be registered for a language. In that case providers are asked in\n\t\t * parallel and the results are merged. A failing provider (rejected promise or exception) will\n\t\t * not cause a failure of the whole operation.\n\t\t *\n\t\t * @param selector A selector that defines the documents this provider is applicable to.\n\t\t * @param provider A code action provider.\n\t\t * @param metadata Metadata about the kind of code actions the provider provides.\n\t\t * @return A {@link Disposable} that unregisters this provider when being disposed.\n\t\t */\n\t\texport function registerCodeActionsProvider(selector: DocumentSelector, provider: CodeActionProvider, metadata?: CodeActionProviderMetadata): Disposable;"
                    },
                    {
                      "_": 13077,
                      "name": "registerCodeLensProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 13077,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Register a code lens provider.\n\nMultiple providers can be registered for a language. In that case providers are asked in\nparallel and the results are merged. A failing provider (rejected promise or exception) will\nnot cause a failure of the whole operation.",
                      "params": [
                        {
                          "name": "selector",
                          "type": {
                            "ref": "DocumentSelector",
                            "targs": [],
                            "isNullable": false,
                            "_": 13077,
                            "source": " DocumentSelector"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "provider",
                          "type": {
                            "ref": "CodeLensProvider",
                            "targs": [],
                            "isNullable": false,
                            "_": 13077,
                            "source": " CodeLensProvider"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Register a code lens provider.\n\t\t *\n\t\t * Multiple providers can be registered for a language. In that case providers are asked in\n\t\t * parallel and the results are merged. A failing provider (rejected promise or exception) will\n\t\t * not cause a failure of the whole operation.\n\t\t *\n\t\t * @param selector A selector that defines the documents this provider is applicable to.\n\t\t * @param provider A code lens provider.\n\t\t * @return A {@link Disposable} that unregisters this provider when being disposed.\n\t\t */\n\t\texport function registerCodeLensProvider(selector: DocumentSelector, provider: CodeLensProvider): Disposable;"
                    },
                    {
                      "_": 13090,
                      "name": "registerDefinitionProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 13090,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Register a definition provider.\n\nMultiple providers can be registered for a language. In that case providers are asked in\nparallel and the results are merged. A failing provider (rejected promise or exception) will\nnot cause a failure of the whole operation.",
                      "params": [
                        {
                          "name": "selector",
                          "type": {
                            "ref": "DocumentSelector",
                            "targs": [],
                            "isNullable": false,
                            "_": 13090,
                            "source": " DocumentSelector"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "provider",
                          "type": {
                            "ref": "DefinitionProvider",
                            "targs": [],
                            "isNullable": false,
                            "_": 13090,
                            "source": " DefinitionProvider"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Register a definition provider.\n\t\t *\n\t\t * Multiple providers can be registered for a language. In that case providers are asked in\n\t\t * parallel and the results are merged. A failing provider (rejected promise or exception) will\n\t\t * not cause a failure of the whole operation.\n\t\t *\n\t\t * @param selector A selector that defines the documents this provider is applicable to.\n\t\t * @param provider A definition provider.\n\t\t * @return A {@link Disposable} that unregisters this provider when being disposed.\n\t\t */\n\t\texport function registerDefinitionProvider(selector: DocumentSelector, provider: DefinitionProvider): Disposable;"
                    },
                    {
                      "_": 13103,
                      "name": "registerImplementationProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 13103,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Register an implementation provider.\n\nMultiple providers can be registered for a language. In that case providers are asked in\nparallel and the results are merged. A failing provider (rejected promise or exception) will\nnot cause a failure of the whole operation.",
                      "params": [
                        {
                          "name": "selector",
                          "type": {
                            "ref": "DocumentSelector",
                            "targs": [],
                            "isNullable": false,
                            "_": 13103,
                            "source": " DocumentSelector"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "provider",
                          "type": {
                            "ref": "ImplementationProvider",
                            "targs": [],
                            "isNullable": false,
                            "_": 13103,
                            "source": " ImplementationProvider"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Register an implementation provider.\n\t\t *\n\t\t * Multiple providers can be registered for a language. In that case providers are asked in\n\t\t * parallel and the results are merged. A failing provider (rejected promise or exception) will\n\t\t * not cause a failure of the whole operation.\n\t\t *\n\t\t * @param selector A selector that defines the documents this provider is applicable to.\n\t\t * @param provider An implementation provider.\n\t\t * @return A {@link Disposable} that unregisters this provider when being disposed.\n\t\t */\n\t\texport function registerImplementationProvider(selector: DocumentSelector, provider: ImplementationProvider): Disposable;"
                    },
                    {
                      "_": 13116,
                      "name": "registerTypeDefinitionProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 13116,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Register a type definition provider.\n\nMultiple providers can be registered for a language. In that case providers are asked in\nparallel and the results are merged. A failing provider (rejected promise or exception) will\nnot cause a failure of the whole operation.",
                      "params": [
                        {
                          "name": "selector",
                          "type": {
                            "ref": "DocumentSelector",
                            "targs": [],
                            "isNullable": false,
                            "_": 13116,
                            "source": " DocumentSelector"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "provider",
                          "type": {
                            "ref": "TypeDefinitionProvider",
                            "targs": [],
                            "isNullable": false,
                            "_": 13116,
                            "source": " TypeDefinitionProvider"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Register a type definition provider.\n\t\t *\n\t\t * Multiple providers can be registered for a language. In that case providers are asked in\n\t\t * parallel and the results are merged. A failing provider (rejected promise or exception) will\n\t\t * not cause a failure of the whole operation.\n\t\t *\n\t\t * @param selector A selector that defines the documents this provider is applicable to.\n\t\t * @param provider A type definition provider.\n\t\t * @return A {@link Disposable} that unregisters this provider when being disposed.\n\t\t */\n\t\texport function registerTypeDefinitionProvider(selector: DocumentSelector, provider: TypeDefinitionProvider): Disposable;"
                    },
                    {
                      "_": 13129,
                      "name": "registerDeclarationProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 13129,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Register a declaration provider.\n\nMultiple providers can be registered for a language. In that case providers are asked in\nparallel and the results are merged. A failing provider (rejected promise or exception) will\nnot cause a failure of the whole operation.",
                      "params": [
                        {
                          "name": "selector",
                          "type": {
                            "ref": "DocumentSelector",
                            "targs": [],
                            "isNullable": false,
                            "_": 13129,
                            "source": " DocumentSelector"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "provider",
                          "type": {
                            "ref": "DeclarationProvider",
                            "targs": [],
                            "isNullable": false,
                            "_": 13129,
                            "source": " DeclarationProvider"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Register a declaration provider.\n\t\t *\n\t\t * Multiple providers can be registered for a language. In that case providers are asked in\n\t\t * parallel and the results are merged. A failing provider (rejected promise or exception) will\n\t\t * not cause a failure of the whole operation.\n\t\t *\n\t\t * @param selector A selector that defines the documents this provider is applicable to.\n\t\t * @param provider A declaration provider.\n\t\t * @return A {@link Disposable} that unregisters this provider when being disposed.\n\t\t */\n\t\texport function registerDeclarationProvider(selector: DocumentSelector, provider: DeclarationProvider): Disposable;"
                    },
                    {
                      "_": 13142,
                      "name": "registerHoverProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 13142,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Register a hover provider.\n\nMultiple providers can be registered for a language. In that case providers are asked in\nparallel and the results are merged. A failing provider (rejected promise or exception) will\nnot cause a failure of the whole operation.",
                      "params": [
                        {
                          "name": "selector",
                          "type": {
                            "ref": "DocumentSelector",
                            "targs": [],
                            "isNullable": false,
                            "_": 13142,
                            "source": " DocumentSelector"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "provider",
                          "type": {
                            "ref": "HoverProvider",
                            "targs": [],
                            "isNullable": false,
                            "_": 13142,
                            "source": " HoverProvider"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Register a hover provider.\n\t\t *\n\t\t * Multiple providers can be registered for a language. In that case providers are asked in\n\t\t * parallel and the results are merged. A failing provider (rejected promise or exception) will\n\t\t * not cause a failure of the whole operation.\n\t\t *\n\t\t * @param selector A selector that defines the documents this provider is applicable to.\n\t\t * @param provider A hover provider.\n\t\t * @return A {@link Disposable} that unregisters this provider when being disposed.\n\t\t */\n\t\texport function registerHoverProvider(selector: DocumentSelector, provider: HoverProvider): Disposable;"
                    },
                    {
                      "_": 13154,
                      "name": "registerEvaluatableExpressionProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 13154,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Register a provider that locates evaluatable expressions in text documents.\nThe editor will evaluate the expression in the active debug session and will show the result in the debug hover.\n\nIf multiple providers are registered for a language an arbitrary provider will be used.",
                      "params": [
                        {
                          "name": "selector",
                          "type": {
                            "ref": "DocumentSelector",
                            "targs": [],
                            "isNullable": false,
                            "_": 13154,
                            "source": " DocumentSelector"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "provider",
                          "type": {
                            "ref": "EvaluatableExpressionProvider",
                            "targs": [],
                            "isNullable": false,
                            "_": 13154,
                            "source": " EvaluatableExpressionProvider"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Register a provider that locates evaluatable expressions in text documents.\n\t\t * The editor will evaluate the expression in the active debug session and will show the result in the debug hover.\n\t\t *\n\t\t * If multiple providers are registered for a language an arbitrary provider will be used.\n\t\t *\n\t\t * @param selector A selector that defines the documents this provider is applicable to.\n\t\t * @param provider An evaluatable expression provider.\n\t\t * @return A {@link Disposable} that unregisters this provider when being disposed.\n\t\t */\n\t\texport function registerEvaluatableExpressionProvider(selector: DocumentSelector, provider: EvaluatableExpressionProvider): Disposable;"
                    },
                    {
                      "_": 13169,
                      "name": "registerInlineValuesProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 13169,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Register a provider that returns data for the debugger's 'inline value' feature.\nWhenever the generic debugger has stopped in a source file, providers registered for the language of the file\nare called to return textual data that will be shown in the editor at the end of lines.\n\nMultiple providers can be registered for a language. In that case providers are asked in\nparallel and the results are merged. A failing provider (rejected promise or exception) will\nnot cause a failure of the whole operation.",
                      "params": [
                        {
                          "name": "selector",
                          "type": {
                            "ref": "DocumentSelector",
                            "targs": [],
                            "isNullable": false,
                            "_": 13169,
                            "source": " DocumentSelector"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "provider",
                          "type": {
                            "ref": "InlineValuesProvider",
                            "targs": [],
                            "isNullable": false,
                            "_": 13169,
                            "source": " InlineValuesProvider"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Register a provider that returns data for the debugger's 'inline value' feature.\n\t\t * Whenever the generic debugger has stopped in a source file, providers registered for the language of the file\n\t\t * are called to return textual data that will be shown in the editor at the end of lines.\n\t\t *\n\t\t * Multiple providers can be registered for a language. In that case providers are asked in\n\t\t * parallel and the results are merged. A failing provider (rejected promise or exception) will\n\t\t * not cause a failure of the whole operation.\n\t\t *\n\t\t * @param selector A selector that defines the documents this provider is applicable to.\n\t\t * @param provider An inline values provider.\n\t\t * @return A {@link Disposable} that unregisters this provider when being disposed.\n\t\t */\n\t\texport function registerInlineValuesProvider(selector: DocumentSelector, provider: InlineValuesProvider): Disposable;"
                    },
                    {
                      "_": 13182,
                      "name": "registerDocumentHighlightProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 13182,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Register a document highlight provider.\n\nMultiple providers can be registered for a language. In that case providers are sorted\nby their {@link languages.matchscore} and groups sequentially asked for document highlights.\nThe process stops when a provider returns a `non-falsy` or `non-failure` result.",
                      "params": [
                        {
                          "name": "selector",
                          "type": {
                            "ref": "DocumentSelector",
                            "targs": [],
                            "isNullable": false,
                            "_": 13182,
                            "source": " DocumentSelector"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "provider",
                          "type": {
                            "ref": "DocumentHighlightProvider",
                            "targs": [],
                            "isNullable": false,
                            "_": 13182,
                            "source": " DocumentHighlightProvider"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Register a document highlight provider.\n\t\t *\n\t\t * Multiple providers can be registered for a language. In that case providers are sorted\n\t\t * by their {@link languages.match score} and groups sequentially asked for document highlights.\n\t\t * The process stops when a provider returns a `non-falsy` or `non-failure` result.\n\t\t *\n\t\t * @param selector A selector that defines the documents this provider is applicable to.\n\t\t * @param provider A document highlight provider.\n\t\t * @return A {@link Disposable} that unregisters this provider when being disposed.\n\t\t */\n\t\texport function registerDocumentHighlightProvider(selector: DocumentSelector, provider: DocumentHighlightProvider): Disposable;"
                    },
                    {
                      "_": 13196,
                      "name": "registerDocumentSymbolProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 13196,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Register a document symbol provider.\n\nMultiple providers can be registered for a language. In that case providers are asked in\nparallel and the results are merged. A failing provider (rejected promise or exception) will\nnot cause a failure of the whole operation.",
                      "params": [
                        {
                          "name": "selector",
                          "type": {
                            "ref": "DocumentSelector",
                            "targs": [],
                            "isNullable": false,
                            "_": 13196,
                            "source": " DocumentSelector"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "provider",
                          "type": {
                            "ref": "DocumentSymbolProvider",
                            "targs": [],
                            "isNullable": false,
                            "_": 13196,
                            "source": " DocumentSymbolProvider"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "metaData",
                          "type": {
                            "ref": "DocumentSymbolProviderMetadata",
                            "targs": [],
                            "isNullable": false,
                            "_": 13196,
                            "source": " DocumentSymbolProviderMetadata"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Register a document symbol provider.\n\t\t *\n\t\t * Multiple providers can be registered for a language. In that case providers are asked in\n\t\t * parallel and the results are merged. A failing provider (rejected promise or exception) will\n\t\t * not cause a failure of the whole operation.\n\t\t *\n\t\t * @param selector A selector that defines the documents this provider is applicable to.\n\t\t * @param provider A document symbol provider.\n\t\t * @param metaData metadata about the provider\n\t\t * @return A {@link Disposable} that unregisters this provider when being disposed.\n\t\t */\n\t\texport function registerDocumentSymbolProvider(selector: DocumentSelector, provider: DocumentSymbolProvider, metaData?: DocumentSymbolProviderMetadata): Disposable;"
                    },
                    {
                      "_": 13208,
                      "name": "registerWorkspaceSymbolProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 13208,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Register a workspace symbol provider.\n\nMultiple providers can be registered. In that case providers are asked in parallel and\nthe results are merged. A failing provider (rejected promise or exception) will not cause\na failure of the whole operation.",
                      "params": [
                        {
                          "name": "provider",
                          "type": {
                            "ref": "WorkspaceSymbolProvider",
                            "targs": [],
                            "isNullable": false,
                            "_": 13208,
                            "source": " WorkspaceSymbolProvider"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Register a workspace symbol provider.\n\t\t *\n\t\t * Multiple providers can be registered. In that case providers are asked in parallel and\n\t\t * the results are merged. A failing provider (rejected promise or exception) will not cause\n\t\t * a failure of the whole operation.\n\t\t *\n\t\t * @param provider A workspace symbol provider.\n\t\t * @return A {@link Disposable} that unregisters this provider when being disposed.\n\t\t */\n\t\texport function registerWorkspaceSymbolProvider(provider: WorkspaceSymbolProvider): Disposable;"
                    },
                    {
                      "_": 13221,
                      "name": "registerReferenceProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 13221,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Register a reference provider.\n\nMultiple providers can be registered for a language. In that case providers are asked in\nparallel and the results are merged. A failing provider (rejected promise or exception) will\nnot cause a failure of the whole operation.",
                      "params": [
                        {
                          "name": "selector",
                          "type": {
                            "ref": "DocumentSelector",
                            "targs": [],
                            "isNullable": false,
                            "_": 13221,
                            "source": " DocumentSelector"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "provider",
                          "type": {
                            "ref": "ReferenceProvider",
                            "targs": [],
                            "isNullable": false,
                            "_": 13221,
                            "source": " ReferenceProvider"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Register a reference provider.\n\t\t *\n\t\t * Multiple providers can be registered for a language. In that case providers are asked in\n\t\t * parallel and the results are merged. A failing provider (rejected promise or exception) will\n\t\t * not cause a failure of the whole operation.\n\t\t *\n\t\t * @param selector A selector that defines the documents this provider is applicable to.\n\t\t * @param provider A reference provider.\n\t\t * @return A {@link Disposable} that unregisters this provider when being disposed.\n\t\t */\n\t\texport function registerReferenceProvider(selector: DocumentSelector, provider: ReferenceProvider): Disposable;"
                    },
                    {
                      "_": 13234,
                      "name": "registerRenameProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 13234,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Register a rename provider.\n\nMultiple providers can be registered for a language. In that case providers are sorted\nby their {@link languages.matchscore} and asked in sequence. The first provider producing a result\ndefines the result of the whole operation.",
                      "params": [
                        {
                          "name": "selector",
                          "type": {
                            "ref": "DocumentSelector",
                            "targs": [],
                            "isNullable": false,
                            "_": 13234,
                            "source": " DocumentSelector"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "provider",
                          "type": {
                            "ref": "RenameProvider",
                            "targs": [],
                            "isNullable": false,
                            "_": 13234,
                            "source": " RenameProvider"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Register a rename provider.\n\t\t *\n\t\t * Multiple providers can be registered for a language. In that case providers are sorted\n\t\t * by their {@link languages.match score} and asked in sequence. The first provider producing a result\n\t\t * defines the result of the whole operation.\n\t\t *\n\t\t * @param selector A selector that defines the documents this provider is applicable to.\n\t\t * @param provider A rename provider.\n\t\t * @return A {@link Disposable} that unregisters this provider when being disposed.\n\t\t */\n\t\texport function registerRenameProvider(selector: DocumentSelector, provider: RenameProvider): Disposable;"
                    },
                    {
                      "_": 13247,
                      "name": "registerDocumentSemanticTokensProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 13247,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Register a semantic tokens provider for a whole document.\n\nMultiple providers can be registered for a language. In that case providers are sorted\nby their {@link languages.matchscore} and the best-matching provider is used. Failure\nof the selected provider will cause a failure of the whole operation.",
                      "params": [
                        {
                          "name": "selector",
                          "type": {
                            "ref": "DocumentSelector",
                            "targs": [],
                            "isNullable": false,
                            "_": 13247,
                            "source": " DocumentSelector"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "provider",
                          "type": {
                            "ref": "DocumentSemanticTokensProvider",
                            "targs": [],
                            "isNullable": false,
                            "_": 13247,
                            "source": " DocumentSemanticTokensProvider"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "legend",
                          "type": {
                            "ref": "SemanticTokensLegend",
                            "targs": [],
                            "isNullable": false,
                            "_": 13247,
                            "source": " SemanticTokensLegend"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Register a semantic tokens provider for a whole document.\n\t\t *\n\t\t * Multiple providers can be registered for a language. In that case providers are sorted\n\t\t * by their {@link languages.match score} and the best-matching provider is used. Failure\n\t\t * of the selected provider will cause a failure of the whole operation.\n\t\t *\n\t\t * @param selector A selector that defines the documents this provider is applicable to.\n\t\t * @param provider A document semantic tokens provider.\n\t\t * @return A {@link Disposable} that unregisters this provider when being disposed.\n\t\t */\n\t\texport function registerDocumentSemanticTokensProvider(selector: DocumentSelector, provider: DocumentSemanticTokensProvider, legend: SemanticTokensLegend): Disposable;"
                    },
                    {
                      "_": 13266,
                      "name": "registerDocumentRangeSemanticTokensProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 13266,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Register a semantic tokens provider for a document range.\n\n*Note:* If a document has both a `DocumentSemanticTokensProvider` and a `DocumentRangeSemanticTokensProvider`,\nthe range provider will be invoked only initially, for the time in which the full document provider takes\nto resolve the first request. Once the full document provider resolves the first request, the semantic tokens\nprovided via the range provider will be discarded and from that point forward, only the document provider\nwill be used.\n\nMultiple providers can be registered for a language. In that case providers are sorted\nby their {@link languages.matchscore} and the best-matching provider is used. Failure\nof the selected provider will cause a failure of the whole operation.",
                      "params": [
                        {
                          "name": "selector",
                          "type": {
                            "ref": "DocumentSelector",
                            "targs": [],
                            "isNullable": false,
                            "_": 13266,
                            "source": " DocumentSelector"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "provider",
                          "type": {
                            "ref": "DocumentRangeSemanticTokensProvider",
                            "targs": [],
                            "isNullable": false,
                            "_": 13266,
                            "source": " DocumentRangeSemanticTokensProvider"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "legend",
                          "type": {
                            "ref": "SemanticTokensLegend",
                            "targs": [],
                            "isNullable": false,
                            "_": 13266,
                            "source": " SemanticTokensLegend"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Register a semantic tokens provider for a document range.\n\t\t *\n\t\t * *Note:* If a document has both a `DocumentSemanticTokensProvider` and a `DocumentRangeSemanticTokensProvider`,\n\t\t * the range provider will be invoked only initially, for the time in which the full document provider takes\n\t\t * to resolve the first request. Once the full document provider resolves the first request, the semantic tokens\n\t\t * provided via the range provider will be discarded and from that point forward, only the document provider\n\t\t * will be used.\n\t\t *\n\t\t * Multiple providers can be registered for a language. In that case providers are sorted\n\t\t * by their {@link languages.match score} and the best-matching provider is used. Failure\n\t\t * of the selected provider will cause a failure of the whole operation.\n\t\t *\n\t\t * @param selector A selector that defines the documents this provider is applicable to.\n\t\t * @param provider A document range semantic tokens provider.\n\t\t * @return A {@link Disposable} that unregisters this provider when being disposed.\n\t\t */\n\t\texport function registerDocumentRangeSemanticTokensProvider(selector: DocumentSelector, provider: DocumentRangeSemanticTokensProvider, legend: SemanticTokensLegend): Disposable;"
                    },
                    {
                      "_": 13279,
                      "name": "registerDocumentFormattingEditProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 13279,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Register a formatting provider for a document.\n\nMultiple providers can be registered for a language. In that case providers are sorted\nby their {@link languages.matchscore} and the best-matching provider is used. Failure\nof the selected provider will cause a failure of the whole operation.",
                      "params": [
                        {
                          "name": "selector",
                          "type": {
                            "ref": "DocumentSelector",
                            "targs": [],
                            "isNullable": false,
                            "_": 13279,
                            "source": " DocumentSelector"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "provider",
                          "type": {
                            "ref": "DocumentFormattingEditProvider",
                            "targs": [],
                            "isNullable": false,
                            "_": 13279,
                            "source": " DocumentFormattingEditProvider"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Register a formatting provider for a document.\n\t\t *\n\t\t * Multiple providers can be registered for a language. In that case providers are sorted\n\t\t * by their {@link languages.match score} and the best-matching provider is used. Failure\n\t\t * of the selected provider will cause a failure of the whole operation.\n\t\t *\n\t\t * @param selector A selector that defines the documents this provider is applicable to.\n\t\t * @param provider A document formatting edit provider.\n\t\t * @return A {@link Disposable} that unregisters this provider when being disposed.\n\t\t */\n\t\texport function registerDocumentFormattingEditProvider(selector: DocumentSelector, provider: DocumentFormattingEditProvider): Disposable;"
                    },
                    {
                      "_": 13296,
                      "name": "registerDocumentRangeFormattingEditProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 13296,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Register a formatting provider for a document range.\n\n*Note:* A document range provider is also a {@link DocumentFormattingEditProviderdocument formatter}\nwhich means there is no need to {@link languages.registerDocumentFormattingEditProviderregister} a document\nformatter when also registering a range provider.\n\nMultiple providers can be registered for a language. In that case providers are sorted\nby their {@link languages.matchscore} and the best-matching provider is used. Failure\nof the selected provider will cause a failure of the whole operation.",
                      "params": [
                        {
                          "name": "selector",
                          "type": {
                            "ref": "DocumentSelector",
                            "targs": [],
                            "isNullable": false,
                            "_": 13296,
                            "source": " DocumentSelector"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "provider",
                          "type": {
                            "ref": "DocumentRangeFormattingEditProvider",
                            "targs": [],
                            "isNullable": false,
                            "_": 13296,
                            "source": " DocumentRangeFormattingEditProvider"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Register a formatting provider for a document range.\n\t\t *\n\t\t * *Note:* A document range provider is also a {@link DocumentFormattingEditProvider document formatter}\n\t\t * which means there is no need to {@link languages.registerDocumentFormattingEditProvider register} a document\n\t\t * formatter when also registering a range provider.\n\t\t *\n\t\t * Multiple providers can be registered for a language. In that case providers are sorted\n\t\t * by their {@link languages.match score} and the best-matching provider is used. Failure\n\t\t * of the selected provider will cause a failure of the whole operation.\n\t\t *\n\t\t * @param selector A selector that defines the documents this provider is applicable to.\n\t\t * @param provider A document range formatting edit provider.\n\t\t * @return A {@link Disposable} that unregisters this provider when being disposed.\n\t\t */\n\t\texport function registerDocumentRangeFormattingEditProvider(selector: DocumentSelector, provider: DocumentRangeFormattingEditProvider): Disposable;"
                    },
                    {
                      "_": 13311,
                      "name": "registerOnTypeFormattingEditProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 13311,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Register a formatting provider that works on type. The provider is active when the user enables the setting `editor.formatOnType`.\n\nMultiple providers can be registered for a language. In that case providers are sorted\nby their {@link languages.matchscore} and the best-matching provider is used. Failure\nof the selected provider will cause a failure of the whole operation.",
                      "params": [
                        {
                          "name": "selector",
                          "type": {
                            "ref": "DocumentSelector",
                            "targs": [],
                            "isNullable": false,
                            "_": 13311,
                            "source": " DocumentSelector"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "provider",
                          "type": {
                            "ref": "OnTypeFormattingEditProvider",
                            "targs": [],
                            "isNullable": false,
                            "_": 13311,
                            "source": " OnTypeFormattingEditProvider"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "firstTriggerCharacter",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 13311,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "moreTriggerCharacter",
                          "type": {
                            "core": "array",
                            "targs": [
                              {
                                "core": "string",
                                "isNullable": false,
                                "_": 13311,
                                "source": " string"
                              }
                            ],
                            "isNullable": false,
                            "_": 13311,
                            "source": " string[]"
                          },
                          "varargs": true,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Register a formatting provider that works on type. The provider is active when the user enables the setting `editor.formatOnType`.\n\t\t *\n\t\t * Multiple providers can be registered for a language. In that case providers are sorted\n\t\t * by their {@link languages.match score} and the best-matching provider is used. Failure\n\t\t * of the selected provider will cause a failure of the whole operation.\n\t\t *\n\t\t * @param selector A selector that defines the documents this provider is applicable to.\n\t\t * @param provider An on type formatting edit provider.\n\t\t * @param firstTriggerCharacter A character on which formatting should be triggered, like `}`.\n\t\t * @param moreTriggerCharacter More trigger characters.\n\t\t * @return A {@link Disposable} that unregisters this provider when being disposed.\n\t\t */\n\t\texport function registerOnTypeFormattingEditProvider(selector: DocumentSelector, provider: OnTypeFormattingEditProvider, firstTriggerCharacter: string, ...moreTriggerCharacter: string[]): Disposable;"
                    },
                    {
                      "_": 13326,
                      "name": "registerSignatureHelpProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 13326,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Register a signature help provider.\n\nMultiple providers can be registered for a language. In that case providers are sorted\nby their {@link languages.matchscore} and called sequentially until a provider returns a\nvalid result.",
                      "params": [
                        {
                          "name": "selector",
                          "type": {
                            "ref": "DocumentSelector",
                            "targs": [],
                            "isNullable": false,
                            "_": 13326,
                            "source": " DocumentSelector"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "provider",
                          "type": {
                            "ref": "SignatureHelpProvider",
                            "targs": [],
                            "isNullable": false,
                            "_": 13326,
                            "source": " SignatureHelpProvider"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "triggerCharacters",
                          "type": {
                            "core": "array",
                            "targs": [
                              {
                                "core": "string",
                                "isNullable": false,
                                "_": 13326,
                                "source": " string"
                              }
                            ],
                            "isNullable": false,
                            "_": 13326,
                            "source": " string[]"
                          },
                          "varargs": true,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Register a signature help provider.\n\t\t *\n\t\t * Multiple providers can be registered for a language. In that case providers are sorted\n\t\t * by their {@link languages.match score} and called sequentially until a provider returns a\n\t\t * valid result.\n\t\t *\n\t\t * @param selector A selector that defines the documents this provider is applicable to.\n\t\t * @param provider A signature help provider.\n\t\t * @param triggerCharacters Trigger signature help when the user types one of the characters, like `,` or `(`.\n\t\t * @param metadata Information about the provider.\n\t\t * @return A {@link Disposable} that unregisters this provider when being disposed.\n\t\t */\n\t\texport function registerSignatureHelpProvider(selector: DocumentSelector, provider: SignatureHelpProvider, ...triggerCharacters: string[]): Disposable;"
                    },
                    {
                      "_": 13327,
                      "name": "registerSignatureHelpProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 13327,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Register a signature help provider.\n\nMultiple providers can be registered for a language. In that case providers are sorted\nby their {@link languages.matchscore} and called sequentially until a provider returns a\nvalid result.",
                      "params": [
                        {
                          "name": "selector",
                          "type": {
                            "ref": "DocumentSelector",
                            "targs": [],
                            "isNullable": false,
                            "_": 13327,
                            "source": " DocumentSelector"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "provider",
                          "type": {
                            "ref": "SignatureHelpProvider",
                            "targs": [],
                            "isNullable": false,
                            "_": 13327,
                            "source": " SignatureHelpProvider"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "metadata",
                          "type": {
                            "ref": "SignatureHelpProviderMetadata",
                            "targs": [],
                            "isNullable": false,
                            "_": 13327,
                            "source": " SignatureHelpProviderMetadata"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\t\texport function registerSignatureHelpProvider(selector: DocumentSelector, provider: SignatureHelpProvider, metadata: SignatureHelpProviderMetadata): Disposable;"
                    },
                    {
                      "_": 13340,
                      "name": "registerDocumentLinkProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 13340,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Register a document link provider.\n\nMultiple providers can be registered for a language. In that case providers are asked in\nparallel and the results are merged. A failing provider (rejected promise or exception) will\nnot cause a failure of the whole operation.",
                      "params": [
                        {
                          "name": "selector",
                          "type": {
                            "ref": "DocumentSelector",
                            "targs": [],
                            "isNullable": false,
                            "_": 13340,
                            "source": " DocumentSelector"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "provider",
                          "type": {
                            "ref": "DocumentLinkProvider",
                            "targs": [],
                            "isNullable": false,
                            "_": 13340,
                            "source": " DocumentLinkProvider"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Register a document link provider.\n\t\t *\n\t\t * Multiple providers can be registered for a language. In that case providers are asked in\n\t\t * parallel and the results are merged. A failing provider (rejected promise or exception) will\n\t\t * not cause a failure of the whole operation.\n\t\t *\n\t\t * @param selector A selector that defines the documents this provider is applicable to.\n\t\t * @param provider A document link provider.\n\t\t * @return A {@link Disposable} that unregisters this provider when being disposed.\n\t\t */\n\t\texport function registerDocumentLinkProvider(selector: DocumentSelector, provider: DocumentLinkProvider): Disposable;"
                    },
                    {
                      "_": 13353,
                      "name": "registerColorProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 13353,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Register a color provider.\n\nMultiple providers can be registered for a language. In that case providers are asked in\nparallel and the results are merged. A failing provider (rejected promise or exception) will\nnot cause a failure of the whole operation.",
                      "params": [
                        {
                          "name": "selector",
                          "type": {
                            "ref": "DocumentSelector",
                            "targs": [],
                            "isNullable": false,
                            "_": 13353,
                            "source": " DocumentSelector"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "provider",
                          "type": {
                            "ref": "DocumentColorProvider",
                            "targs": [],
                            "isNullable": false,
                            "_": 13353,
                            "source": " DocumentColorProvider"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Register a color provider.\n\t\t *\n\t\t * Multiple providers can be registered for a language. In that case providers are asked in\n\t\t * parallel and the results are merged. A failing provider (rejected promise or exception) will\n\t\t * not cause a failure of the whole operation.\n\t\t *\n\t\t * @param selector A selector that defines the documents this provider is applicable to.\n\t\t * @param provider A color provider.\n\t\t * @return A {@link Disposable} that unregisters this provider when being disposed.\n\t\t */\n\t\texport function registerColorProvider(selector: DocumentSelector, provider: DocumentColorProvider): Disposable;"
                    },
                    {
                      "_": 13366,
                      "name": "registerInlayHintsProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 13366,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Register a inlay hints provider.\n\nMultiple providers can be registered for a language. In that case providers are asked in\nparallel and the results are merged. A failing provider (rejected promise or exception) will\nnot cause a failure of the whole operation.",
                      "params": [
                        {
                          "name": "selector",
                          "type": {
                            "ref": "DocumentSelector",
                            "targs": [],
                            "isNullable": false,
                            "_": 13366,
                            "source": " DocumentSelector"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "provider",
                          "type": {
                            "ref": "InlayHintsProvider",
                            "targs": [],
                            "isNullable": false,
                            "_": 13366,
                            "source": " InlayHintsProvider"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Register a inlay hints provider.\n\t\t *\n\t\t * Multiple providers can be registered for a language. In that case providers are asked in\n\t\t * parallel and the results are merged. A failing provider (rejected promise or exception) will\n\t\t * not cause a failure of the whole operation.\n\t\t *\n\t\t * @param selector A selector that defines the documents this provider is applicable to.\n\t\t * @param provider An inlay hints provider.\n\t\t * @return A {@link Disposable} that unregisters this provider when being disposed.\n\t\t */\n\t\texport function registerInlayHintsProvider(selector: DocumentSelector, provider: InlayHintsProvider): Disposable;"
                    },
                    {
                      "_": 13383,
                      "name": "registerFoldingRangeProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 13383,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Register a folding range provider.\n\nMultiple providers can be registered for a language. In that case providers are asked in\nparallel and the results are merged.\nIf multiple folding ranges start at the same position, only the range of the first registered provider is used.\nIf a folding range overlaps with an other range that has a smaller position, it is also ignored.\n\nA failing provider (rejected promise or exception) will\nnot cause a failure of the whole operation.",
                      "params": [
                        {
                          "name": "selector",
                          "type": {
                            "ref": "DocumentSelector",
                            "targs": [],
                            "isNullable": false,
                            "_": 13383,
                            "source": " DocumentSelector"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "provider",
                          "type": {
                            "ref": "FoldingRangeProvider",
                            "targs": [],
                            "isNullable": false,
                            "_": 13383,
                            "source": " FoldingRangeProvider"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Register a folding range provider.\n\t\t *\n\t\t * Multiple providers can be registered for a language. In that case providers are asked in\n\t\t * parallel and the results are merged.\n\t\t * If multiple folding ranges start at the same position, only the range of the first registered provider is used.\n\t\t * If a folding range overlaps with an other range that has a smaller position, it is also ignored.\n\t\t *\n\t\t * A failing provider (rejected promise or exception) will\n\t\t * not cause a failure of the whole operation.\n\t\t *\n\t\t * @param selector A selector that defines the documents this provider is applicable to.\n\t\t * @param provider A folding range provider.\n\t\t * @return A {@link Disposable} that unregisters this provider when being disposed.\n\t\t */\n\t\texport function registerFoldingRangeProvider(selector: DocumentSelector, provider: FoldingRangeProvider): Disposable;"
                    },
                    {
                      "_": 13396,
                      "name": "registerSelectionRangeProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 13396,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Register a selection range provider.\n\nMultiple providers can be registered for a language. In that case providers are asked in\nparallel and the results are merged. A failing provider (rejected promise or exception) will\nnot cause a failure of the whole operation.",
                      "params": [
                        {
                          "name": "selector",
                          "type": {
                            "ref": "DocumentSelector",
                            "targs": [],
                            "isNullable": false,
                            "_": 13396,
                            "source": " DocumentSelector"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "provider",
                          "type": {
                            "ref": "SelectionRangeProvider",
                            "targs": [],
                            "isNullable": false,
                            "_": 13396,
                            "source": " SelectionRangeProvider"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Register a selection range provider.\n\t\t *\n\t\t * Multiple providers can be registered for a language. In that case providers are asked in\n\t\t * parallel and the results are merged. A failing provider (rejected promise or exception) will\n\t\t * not cause a failure of the whole operation.\n\t\t *\n\t\t * @param selector A selector that defines the documents this provider is applicable to.\n\t\t * @param provider A selection range provider.\n\t\t * @return A {@link Disposable} that unregisters this provider when being disposed.\n\t\t */\n\t\texport function registerSelectionRangeProvider(selector: DocumentSelector, provider: SelectionRangeProvider): Disposable;"
                    },
                    {
                      "_": 13405,
                      "name": "registerCallHierarchyProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 13405,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Register a call hierarchy provider.",
                      "params": [
                        {
                          "name": "selector",
                          "type": {
                            "ref": "DocumentSelector",
                            "targs": [],
                            "isNullable": false,
                            "_": 13405,
                            "source": " DocumentSelector"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "provider",
                          "type": {
                            "ref": "CallHierarchyProvider",
                            "targs": [],
                            "isNullable": false,
                            "_": 13405,
                            "source": " CallHierarchyProvider"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Register a call hierarchy provider.\n\t\t *\n\t\t * @param selector A selector that defines the documents this provider is applicable to.\n\t\t * @param provider A call hierarchy provider.\n\t\t * @return A {@link Disposable} that unregisters this provider when being disposed.\n\t\t */\n\t\texport function registerCallHierarchyProvider(selector: DocumentSelector, provider: CallHierarchyProvider): Disposable;"
                    },
                    {
                      "_": 13414,
                      "name": "registerTypeHierarchyProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 13414,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Register a type hierarchy provider.",
                      "params": [
                        {
                          "name": "selector",
                          "type": {
                            "ref": "DocumentSelector",
                            "targs": [],
                            "isNullable": false,
                            "_": 13414,
                            "source": " DocumentSelector"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "provider",
                          "type": {
                            "ref": "TypeHierarchyProvider",
                            "targs": [],
                            "isNullable": false,
                            "_": 13414,
                            "source": " TypeHierarchyProvider"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Register a type hierarchy provider.\n\t\t *\n\t\t * @param selector A selector that defines the documents this provider is applicable to.\n\t\t * @param provider A type hierarchy provider.\n\t\t * @return A {@link Disposable} that unregisters this provider when being disposed.\n\t\t */\n\t\texport function registerTypeHierarchyProvider(selector: DocumentSelector, provider: TypeHierarchyProvider): Disposable;"
                    },
                    {
                      "_": 13427,
                      "name": "registerLinkedEditingRangeProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 13427,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Register a linked editing range provider.\n\nMultiple providers can be registered for a language. In that case providers are sorted\nby their {@link languages.matchscore} and the best-matching provider that has a result is used. Failure\nof the selected provider will cause a failure of the whole operation.",
                      "params": [
                        {
                          "name": "selector",
                          "type": {
                            "ref": "DocumentSelector",
                            "targs": [],
                            "isNullable": false,
                            "_": 13427,
                            "source": " DocumentSelector"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "provider",
                          "type": {
                            "ref": "LinkedEditingRangeProvider",
                            "targs": [],
                            "isNullable": false,
                            "_": 13427,
                            "source": " LinkedEditingRangeProvider"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Register a linked editing range provider.\n\t\t *\n\t\t * Multiple providers can be registered for a language. In that case providers are sorted\n\t\t * by their {@link languages.match score} and the best-matching provider that has a result is used. Failure\n\t\t * of the selected provider will cause a failure of the whole operation.\n\t\t *\n\t\t * @param selector A selector that defines the documents this provider is applicable to.\n\t\t * @param provider A linked editing range provider.\n\t\t * @return A {@link Disposable} that unregisters this provider when being disposed.\n\t\t */\n\t\texport function registerLinkedEditingRangeProvider(selector: DocumentSelector, provider: LinkedEditingRangeProvider): Disposable;"
                    },
                    {
                      "_": 13437,
                      "name": "registerDocumentDropEditProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 13437,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Registers a new {@link DocumentDropEditProvider}.",
                      "params": [
                        {
                          "name": "selector",
                          "type": {
                            "ref": "DocumentSelector",
                            "targs": [],
                            "isNullable": false,
                            "_": 13437,
                            "source": " DocumentSelector"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "provider",
                          "type": {
                            "ref": "DocumentDropEditProvider",
                            "targs": [],
                            "isNullable": false,
                            "_": 13437,
                            "source": " DocumentDropEditProvider"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Registers a new {@link DocumentDropEditProvider}.\n\t\t *\n\t\t * @param selector A selector that defines the documents this provider applies to.\n\t\t * @param provider A drop provider.\n\t\t *\n\t\t * @return A {@link Disposable} that unregisters this provider when disposed of.\n\t\t */\n\t\texport function registerDocumentDropEditProvider(selector: DocumentSelector, provider: DocumentDropEditProvider): Disposable;"
                    },
                    {
                      "_": 13446,
                      "name": "setLanguageConfiguration",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 13446,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Set a {@link LanguageConfigurationlanguage configuration} for a language.",
                      "params": [
                        {
                          "name": "language",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 13446,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "configuration",
                          "type": {
                            "ref": "LanguageConfiguration",
                            "targs": [],
                            "isNullable": false,
                            "_": 13446,
                            "source": " LanguageConfiguration"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Set a {@link LanguageConfiguration language configuration} for a language.\n\t\t *\n\t\t * @param language A language identifier like `typescript`.\n\t\t * @param configuration Language configuration.\n\t\t * @return A {@link Disposable} that unsets this configuration.\n\t\t */\n\t\texport function setLanguageConfiguration(language: string, configuration: LanguageConfiguration): Disposable;"
                    }
                  ],
                  "vars": [
                    {
                      "_": 12985,
                      "name": "onDidChangeDiagnostics",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "An {@link Event} which fires when the global set of diagnostics changes. This is\nnewly added and removed diagnostics.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "ref": "DiagnosticChangeEvent",
                            "targs": [],
                            "isNullable": false,
                            "_": 12985,
                            "source": "DiagnosticChangeEvent"
                          }
                        ],
                        "isNullable": false,
                        "_": 12985,
                        "source": " Event<DiagnosticChangeEvent>"
                      },
                      "source": " onDidChangeDiagnostics: Event<DiagnosticChangeEvent>"
                    }
                  ],
                  "enums": []
                }
              },
              {
                "_": 14467,
                "namespace": "notebooks",
                "from": "submodule vscode",
                "items": {
                  "structs": [],
                  "typedefs": [],
                  "modules": [],
                  "funcs": [
                    {
                      "_": 14477,
                      "name": "createNotebookController",
                      "type": {
                        "ref": "NotebookController",
                        "targs": [],
                        "isNullable": false,
                        "_": 14477,
                        "source": " NotebookController"
                      },
                      "generics": [],
                      "doc": "Creates a new notebook controller.",
                      "params": [
                        {
                          "name": "id",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 14477,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "notebookType",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 14477,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "label",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 14477,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "handler",
                          "type": {
                            "ctor": false,
                            "generics": [],
                            "returns": {
                              "union": [
                                {
                                  "core": "void",
                                  "isNullable": false,
                                  "_": 14477,
                                  "source": " void"
                                },
                                {
                                  "ref": "Thenable",
                                  "targs": [
                                    {
                                      "core": "void",
                                      "isNullable": false,
                                      "_": 14477,
                                      "source": "void"
                                    }
                                  ],
                                  "isNullable": false,
                                  "_": 14477,
                                  "source": " Thenable<void>"
                                }
                              ],
                              "isNullable": false,
                              "_": 14477,
                              "source": " void | Thenable<void>"
                            },
                            "params": [
                              {
                                "name": "cells",
                                "type": {
                                  "core": "array",
                                  "targs": [
                                    {
                                      "ref": "NotebookCell",
                                      "targs": [],
                                      "isNullable": false,
                                      "_": 14477,
                                      "source": " NotebookCell"
                                    }
                                  ],
                                  "isNullable": false,
                                  "_": 14477,
                                  "source": " NotebookCell[]"
                                },
                                "varargs": false,
                                "isNullable": false
                              },
                              {
                                "name": "notebook",
                                "type": {
                                  "ref": "NotebookDocument",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 14477,
                                  "source": " NotebookDocument"
                                },
                                "varargs": false,
                                "isNullable": false
                              },
                              {
                                "name": "controller",
                                "type": {
                                  "ref": "NotebookController",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 14477,
                                  "source": " NotebookController"
                                },
                                "varargs": false,
                                "isNullable": false
                              }
                            ],
                            "isNullable": false,
                            "_": 14477,
                            "source": " (cells: NotebookCell[], notebook: NotebookDocument, controller: NotebookController) => void | Thenable<void>"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Creates a new notebook controller.\n\t\t *\n\t\t * @param id Identifier of the controller. Must be unique per extension.\n\t\t * @param notebookType A notebook type for which this controller is for.\n\t\t * @param label The label of the controller.\n\t\t * @param handler The execute-handler of the controller.\n\t\t */\n\t\texport function createNotebookController(id: string, notebookType: string, label: string, handler?: (cells: NotebookCell[], notebook: NotebookDocument, controller: NotebookController) => void | Thenable<void>): NotebookController;"
                    },
                    {
                      "_": 14486,
                      "name": "registerNotebookCellStatusBarItemProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 14486,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Register a {@link NotebookCellStatusBarItemProvidercell statusbar item provider} for the given notebook type.",
                      "params": [
                        {
                          "name": "notebookType",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 14486,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "provider",
                          "type": {
                            "ref": "NotebookCellStatusBarItemProvider",
                            "targs": [],
                            "isNullable": false,
                            "_": 14486,
                            "source": " NotebookCellStatusBarItemProvider"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Register a {@link NotebookCellStatusBarItemProvider cell statusbar item provider} for the given notebook type.\n\t\t *\n\t\t * @param notebookType The notebook type to register for.\n\t\t * @param provider A cell status bar provider.\n\t\t * @return A {@link Disposable} that unregisters this provider when being disposed.\n\t\t */\n\t\texport function registerNotebookCellStatusBarItemProvider(notebookType: string, provider: NotebookCellStatusBarItemProvider): Disposable;"
                    },
                    {
                      "_": 14498,
                      "name": "createRendererMessaging",
                      "type": {
                        "ref": "NotebookRendererMessaging",
                        "targs": [],
                        "isNullable": false,
                        "_": 14498,
                        "source": " NotebookRendererMessaging"
                      },
                      "generics": [],
                      "doc": "Creates a new messaging instance used to communicate with a specific renderer.\n\n* *Note 1:* Extensions can only create renderer that they have defined in their `package.json`-file\n* *Note 2:* A renderer only has access to messaging if `requiresMessaging` is set to `always` or `optional` in\nits `notebookRenderer` contribution.",
                      "params": [
                        {
                          "name": "rendererId",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 14498,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Creates a new messaging instance used to communicate with a specific renderer.\n\t\t *\n\t\t * * *Note 1:* Extensions can only create renderer that they have defined in their `package.json`-file\n\t\t * * *Note 2:* A renderer only has access to messaging if `requiresMessaging` is set to `always` or `optional` in\n\t\t * its `notebookRenderer` contribution.\n\t\t *\n\t\t * @param rendererId The renderer ID to communicate with\n\t\t * @returns A new notebook renderer messaging object.\n\t\t*/\n\t\texport function createRendererMessaging(rendererId: string): NotebookRendererMessaging;"
                    }
                  ],
                  "vars": [],
                  "enums": []
                }
              },
              {
                "_": 14740,
                "namespace": "scm",
                "from": "submodule vscode",
                "items": {
                  "structs": [],
                  "typedefs": [],
                  "modules": [],
                  "funcs": [
                    {
                      "_": 14758,
                      "name": "createSourceControl",
                      "type": {
                        "ref": "SourceControl",
                        "targs": [],
                        "isNullable": false,
                        "_": 14758,
                        "source": " SourceControl"
                      },
                      "generics": [],
                      "doc": "Creates a new {@link SourceControlsource control} instance.",
                      "params": [
                        {
                          "name": "id",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 14758,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "label",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 14758,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "rootUri",
                          "type": {
                            "ref": "Uri",
                            "targs": [],
                            "isNullable": false,
                            "_": 14758,
                            "source": " Uri"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Creates a new {@link SourceControl source control} instance.\n\t\t *\n\t\t * @param id An `id` for the source control. Something short, e.g.: `git`.\n\t\t * @param label A human-readable string for the source control. E.g.: `Git`.\n\t\t * @param rootUri An optional Uri of the root of the source control. E.g.: `Uri.parse(workspaceRoot)`.\n\t\t * @return An instance of {@link SourceControl source control}.\n\t\t */\n\t\texport function createSourceControl(id: string, label: string, rootUri?: Uri): SourceControl;"
                    }
                  ],
                  "vars": [
                    {
                      "_": 14748,
                      "name": "inputBox",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "The {@link SourceControlInputBoxinput box} for the last source control\ncreated by the extension.",
                      "type": {
                        "ref": "SourceControlInputBox",
                        "targs": [],
                        "isNullable": false,
                        "_": 14748,
                        "source": " SourceControlInputBox"
                      },
                      "source": " inputBox: SourceControlInputBox"
                    }
                  ],
                  "enums": []
                }
              },
              {
                "_": 15303,
                "namespace": "debug",
                "from": "submodule vscode",
                "items": {
                  "structs": [],
                  "typedefs": [],
                  "modules": [],
                  "funcs": [
                    {
                      "_": 15364,
                      "name": "registerDebugConfigurationProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 15364,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Register a {@link DebugConfigurationProviderdebug configuration provider} for a specific debug type.\nThe optional {@link DebugConfigurationProviderTriggerKindtriggerKind} can be used to specify when the `provideDebugConfigurations` method of the provider is triggered.\nCurrently two trigger kinds are possible: with the value `Initial` (or if no trigger kind argument is given) the `provideDebugConfigurations` method is used to provide the initial debug configurations to be copied into a newly created launch.json.\nWith the trigger kind `Dynamic` the `provideDebugConfigurations` method is used to dynamically determine debug configurations to be presented to the user (in addition to the static configurations from the launch.json).\nPlease note that the `triggerKind` argument only applies to the `provideDebugConfigurations` method: so the `resolveDebugConfiguration` methods are not affected at all.\nRegistering a single provider with resolve methods for different trigger kinds, results in the same resolve methods called multiple times.\nMore than one provider can be registered for the same type.",
                      "params": [
                        {
                          "name": "debugType",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 15364,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "provider",
                          "type": {
                            "ref": "DebugConfigurationProvider",
                            "targs": [],
                            "isNullable": false,
                            "_": 15364,
                            "source": " DebugConfigurationProvider"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "triggerKind",
                          "type": {
                            "ref": "DebugConfigurationProviderTriggerKind",
                            "targs": [],
                            "isNullable": false,
                            "_": 15364,
                            "source": " DebugConfigurationProviderTriggerKind"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Register a {@link DebugConfigurationProvider debug configuration provider} for a specific debug type.\n\t\t * The optional {@link DebugConfigurationProviderTriggerKind triggerKind} can be used to specify when the `provideDebugConfigurations` method of the provider is triggered.\n\t\t * Currently two trigger kinds are possible: with the value `Initial` (or if no trigger kind argument is given) the `provideDebugConfigurations` method is used to provide the initial debug configurations to be copied into a newly created launch.json.\n\t\t * With the trigger kind `Dynamic` the `provideDebugConfigurations` method is used to dynamically determine debug configurations to be presented to the user (in addition to the static configurations from the launch.json).\n\t\t * Please note that the `triggerKind` argument only applies to the `provideDebugConfigurations` method: so the `resolveDebugConfiguration` methods are not affected at all.\n\t\t * Registering a single provider with resolve methods for different trigger kinds, results in the same resolve methods called multiple times.\n\t\t * More than one provider can be registered for the same type.\n\t\t *\n\t\t * @param debugType The debug type for which the provider is registered.\n\t\t * @param provider The {@link DebugConfigurationProvider debug configuration provider} to register.\n\t\t * @param triggerKind The {@link DebugConfigurationProviderTriggerKind trigger} for which the 'provideDebugConfiguration' method of the provider is registered. If `triggerKind` is missing, the value `DebugConfigurationProviderTriggerKind.Initial` is assumed.\n\t\t * @return A {@link Disposable} that unregisters this provider when being disposed.\n\t\t */\n\t\texport function registerDebugConfigurationProvider(debugType: string, provider: DebugConfigurationProvider, triggerKind?: DebugConfigurationProviderTriggerKind): Disposable;"
                    },
                    {
                      "_": 15375,
                      "name": "registerDebugAdapterDescriptorFactory",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 15375,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Register a {@link DebugAdapterDescriptorFactorydebug adapter descriptor factory} for a specific debug type.\nAn extension is only allowed to register a DebugAdapterDescriptorFactory for the debug type(s) defined by the extension. Otherwise an error is thrown.\nRegistering more than one DebugAdapterDescriptorFactory for a debug type results in an error.",
                      "params": [
                        {
                          "name": "debugType",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 15375,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "factory",
                          "type": {
                            "ref": "DebugAdapterDescriptorFactory",
                            "targs": [],
                            "isNullable": false,
                            "_": 15375,
                            "source": " DebugAdapterDescriptorFactory"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Register a {@link DebugAdapterDescriptorFactory debug adapter descriptor factory} for a specific debug type.\n\t\t * An extension is only allowed to register a DebugAdapterDescriptorFactory for the debug type(s) defined by the extension. Otherwise an error is thrown.\n\t\t * Registering more than one DebugAdapterDescriptorFactory for a debug type results in an error.\n\t\t *\n\t\t * @param debugType The debug type for which the factory is registered.\n\t\t * @param factory The {@link DebugAdapterDescriptorFactory debug adapter descriptor factory} to register.\n\t\t * @return A {@link Disposable} that unregisters this factory when being disposed.\n\t\t */\n\t\texport function registerDebugAdapterDescriptorFactory(debugType: string, factory: DebugAdapterDescriptorFactory): Disposable;"
                    },
                    {
                      "_": 15384,
                      "name": "registerDebugAdapterTrackerFactory",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 15384,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Register a debug adapter tracker factory for the given debug type.",
                      "params": [
                        {
                          "name": "debugType",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 15384,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "factory",
                          "type": {
                            "ref": "DebugAdapterTrackerFactory",
                            "targs": [],
                            "isNullable": false,
                            "_": 15384,
                            "source": " DebugAdapterTrackerFactory"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Register a debug adapter tracker factory for the given debug type.\n\t\t *\n\t\t * @param debugType The debug type for which the factory is registered or '*' for matching all debug types.\n\t\t * @param factory The {@link DebugAdapterTrackerFactory debug adapter tracker factory} to register.\n\t\t * @return A {@link Disposable} that unregisters this factory when being disposed.\n\t\t */\n\t\texport function registerDebugAdapterTrackerFactory(debugType: string, factory: DebugAdapterTrackerFactory): Disposable;"
                    },
                    {
                      "_": 15397,
                      "name": "startDebugging",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "core": "boolean",
                            "isNullable": false,
                            "_": 15397,
                            "source": "boolean"
                          }
                        ],
                        "isNullable": false,
                        "_": 15397,
                        "source": " Thenable<boolean>"
                      },
                      "generics": [],
                      "doc": "Start debugging by using either a named launch or named compound configuration,\nor by directly passing a {@link DebugConfiguration}.\nThe named configurations are looked up in '.vscode/launch.json' found in the given folder.\nBefore debugging starts, all unsaved files are saved and the launch configurations are brought up-to-date.\nFolder specific variables used in the configuration (e.g. '${workspaceFolder}') are resolved against the given folder.",
                      "params": [
                        {
                          "name": "folder",
                          "type": {
                            "union": [
                              {
                                "ref": "WorkspaceFolder",
                                "targs": [],
                                "isNullable": false,
                                "_": 15397,
                                "source": " WorkspaceFolder"
                              },
                              {
                                "core": "undefined",
                                "isNullable": false,
                                "_": 15397,
                                "source": " undefined"
                              }
                            ],
                            "isNullable": false,
                            "_": 15397,
                            "source": " WorkspaceFolder | undefined"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "nameOrConfiguration",
                          "type": {
                            "union": [
                              {
                                "core": "string",
                                "isNullable": false,
                                "_": 15397,
                                "source": " string"
                              },
                              {
                                "ref": "DebugConfiguration",
                                "targs": [],
                                "isNullable": false,
                                "_": 15397,
                                "source": " DebugConfiguration"
                              }
                            ],
                            "isNullable": false,
                            "_": 15397,
                            "source": " string | DebugConfiguration"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "parentSessionOrOptions",
                          "type": {
                            "union": [
                              {
                                "ref": "DebugSession",
                                "targs": [],
                                "isNullable": false,
                                "_": 15397,
                                "source": " DebugSession"
                              },
                              {
                                "ref": "DebugSessionOptions",
                                "targs": [],
                                "isNullable": false,
                                "_": 15397,
                                "source": " DebugSessionOptions"
                              }
                            ],
                            "isNullable": false,
                            "_": 15397,
                            "source": " DebugSession | DebugSessionOptions"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Start debugging by using either a named launch or named compound configuration,\n\t\t * or by directly passing a {@link DebugConfiguration}.\n\t\t * The named configurations are looked up in '.vscode/launch.json' found in the given folder.\n\t\t * Before debugging starts, all unsaved files are saved and the launch configurations are brought up-to-date.\n\t\t * Folder specific variables used in the configuration (e.g. '${workspaceFolder}') are resolved against the given folder.\n\t\t * @param folder The {@link WorkspaceFolder workspace folder} for looking up named configurations and resolving variables or `undefined` for a non-folder setup.\n\t\t * @param nameOrConfiguration Either the name of a debug or compound configuration or a {@link DebugConfiguration} object.\n\t\t * @param parentSessionOrOptions Debug session options. When passed a parent {@link DebugSession debug session}, assumes options with just this parent session.\n\t\t * @return A thenable that resolves when debugging could be successfully started.\n\t\t */\n\t\texport function startDebugging(folder: WorkspaceFolder | undefined, nameOrConfiguration: string | DebugConfiguration, parentSessionOrOptions?: DebugSession | DebugSessionOptions): Thenable<boolean>;"
                    },
                    {
                      "_": 15403,
                      "name": "stopDebugging",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "core": "void",
                            "isNullable": false,
                            "_": 15403,
                            "source": "void"
                          }
                        ],
                        "isNullable": false,
                        "_": 15403,
                        "source": " Thenable<void>"
                      },
                      "generics": [],
                      "doc": "Stop the given debug session or stop all debug sessions if session is omitted.",
                      "params": [
                        {
                          "name": "session",
                          "type": {
                            "ref": "DebugSession",
                            "targs": [],
                            "isNullable": false,
                            "_": 15403,
                            "source": " DebugSession"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Stop the given debug session or stop all debug sessions if session is omitted.\n\t\t * @param session The {@link DebugSession debug session} to stop; if omitted all sessions are stopped.\n\t\t */\n\t\texport function stopDebugging(session?: DebugSession): Thenable<void>;"
                    },
                    {
                      "_": 15409,
                      "name": "addBreakpoints",
                      "type": {
                        "core": "void",
                        "isNullable": false,
                        "_": 15409,
                        "source": " void"
                      },
                      "generics": [],
                      "doc": "Add breakpoints.",
                      "params": [
                        {
                          "name": "breakpoints",
                          "type": {
                            "operator": 146,
                            "type": {
                              "core": "array",
                              "targs": [
                                {
                                  "ref": "Breakpoint",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 15409,
                                  "source": " Breakpoint"
                                }
                              ],
                              "isNullable": false,
                              "_": 15409,
                              "source": " Breakpoint[]"
                            },
                            "isNullable": false,
                            "_": 15409,
                            "source": " readonly Breakpoint[]"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Add breakpoints.\n\t\t * @param breakpoints The breakpoints to add.\n\t\t*/\n\t\texport function addBreakpoints(breakpoints: readonly Breakpoint[]): void;"
                    },
                    {
                      "_": 15415,
                      "name": "removeBreakpoints",
                      "type": {
                        "core": "void",
                        "isNullable": false,
                        "_": 15415,
                        "source": " void"
                      },
                      "generics": [],
                      "doc": "Remove breakpoints.",
                      "params": [
                        {
                          "name": "breakpoints",
                          "type": {
                            "operator": 146,
                            "type": {
                              "core": "array",
                              "targs": [
                                {
                                  "ref": "Breakpoint",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 15415,
                                  "source": " Breakpoint"
                                }
                              ],
                              "isNullable": false,
                              "_": 15415,
                              "source": " Breakpoint[]"
                            },
                            "isNullable": false,
                            "_": 15415,
                            "source": " readonly Breakpoint[]"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Remove breakpoints.\n\t\t * @param breakpoints The breakpoints to remove.\n\t\t */\n\t\texport function removeBreakpoints(breakpoints: readonly Breakpoint[]): void;"
                    },
                    {
                      "_": 15428,
                      "name": "asDebugSourceUri",
                      "type": {
                        "ref": "Uri",
                        "targs": [],
                        "isNullable": false,
                        "_": 15428,
                        "source": " Uri"
                      },
                      "generics": [],
                      "doc": "Converts a \"Source\" descriptor object received via the Debug Adapter Protocol into a Uri that can be used to load its contents.\nIf the source descriptor is based on a path, a file Uri is returned.\nIf the source descriptor uses a reference number, a specific debug Uri (scheme 'debug') is constructed that requires a corresponding ContentProvider and a running debug session\n\nIf the \"Source\" descriptor has insufficient information for creating the Uri, an error is thrown.",
                      "params": [
                        {
                          "name": "source",
                          "type": {
                            "ref": "DebugProtocolSource",
                            "targs": [],
                            "isNullable": false,
                            "_": 15428,
                            "source": " DebugProtocolSource"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "session",
                          "type": {
                            "ref": "DebugSession",
                            "targs": [],
                            "isNullable": false,
                            "_": 15428,
                            "source": " DebugSession"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Converts a \"Source\" descriptor object received via the Debug Adapter Protocol into a Uri that can be used to load its contents.\n\t\t * If the source descriptor is based on a path, a file Uri is returned.\n\t\t * If the source descriptor uses a reference number, a specific debug Uri (scheme 'debug') is constructed that requires a corresponding ContentProvider and a running debug session\n\t\t *\n\t\t * If the \"Source\" descriptor has insufficient information for creating the Uri, an error is thrown.\n\t\t *\n\t\t * @param source An object conforming to the [Source](https://microsoft.github.io/debug-adapter-protocol/specification#Types_Source) type defined in the Debug Adapter Protocol.\n\t\t * @param session An optional debug session that will be used when the source descriptor uses a reference number to load the contents from an active debug session.\n\t\t * @return A uri that can be used to load the contents of the source.\n\t\t */\n\t\texport function asDebugSourceUri(source: DebugProtocolSource, session?: DebugSession): Uri;"
                    }
                  ],
                  "vars": [
                    {
                      "_": 15310,
                      "name": "activeDebugSession",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "The currently active {@link DebugSessiondebug session} or `undefined`. The active debug session is the one\nrepresented by the debug action floating window or the one currently shown in the drop down menu of the debug action floating window.\nIf no debug session is active, the value is `undefined`.",
                      "type": {
                        "union": [
                          {
                            "ref": "DebugSession",
                            "targs": [],
                            "isNullable": false,
                            "_": 15310,
                            "source": " DebugSession"
                          },
                          {
                            "core": "undefined",
                            "isNullable": false,
                            "_": 15310,
                            "source": " undefined"
                          }
                        ],
                        "isNullable": false,
                        "_": 15310,
                        "source": " DebugSession | undefined"
                      },
                      "source": " activeDebugSession: DebugSession | undefined"
                    },
                    {
                      "_": 15316,
                      "name": "activeDebugConsole",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "The currently active {@link DebugConsoledebug console}.\nIf no debug session is active, output sent to the debug console is not shown.",
                      "type": {
                        "ref": "DebugConsole",
                        "targs": [],
                        "isNullable": false,
                        "_": 15316,
                        "source": " DebugConsole"
                      },
                      "source": " activeDebugConsole: DebugConsole"
                    },
                    {
                      "_": 15321,
                      "name": "breakpoints",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "List of breakpoints.",
                      "type": {
                        "operator": 146,
                        "type": {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "Breakpoint",
                              "targs": [],
                              "isNullable": false,
                              "_": 15321,
                              "source": " Breakpoint"
                            }
                          ],
                          "isNullable": false,
                          "_": 15321,
                          "source": " Breakpoint[]"
                        },
                        "isNullable": false,
                        "_": 15321,
                        "source": " readonly Breakpoint[]"
                      },
                      "source": " breakpoints: readonly Breakpoint[]"
                    },
                    {
                      "_": 15328,
                      "name": "onDidChangeActiveDebugSession",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "An {@link Event} which fires when the {@link debug.activeDebugSessionactive debug session}\nhas changed. *Note* that the event also fires when the active debug session changes\nto `undefined`.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "union": [
                              {
                                "ref": "DebugSession",
                                "targs": [],
                                "isNullable": false,
                                "_": 15328,
                                "source": "DebugSession"
                              },
                              {
                                "core": "undefined",
                                "isNullable": false,
                                "_": 15328,
                                "source": " undefined"
                              }
                            ],
                            "isNullable": false,
                            "_": 15328,
                            "source": "DebugSession | undefined"
                          }
                        ],
                        "isNullable": false,
                        "_": 15328,
                        "source": " Event<DebugSession | undefined>"
                      },
                      "source": " onDidChangeActiveDebugSession: Event<DebugSession | undefined>"
                    },
                    {
                      "_": 15333,
                      "name": "onDidStartDebugSession",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "An {@link Event} which fires when a new {@link DebugSessiondebug session} has been started.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "ref": "DebugSession",
                            "targs": [],
                            "isNullable": false,
                            "_": 15333,
                            "source": "DebugSession"
                          }
                        ],
                        "isNullable": false,
                        "_": 15333,
                        "source": " Event<DebugSession>"
                      },
                      "source": " onDidStartDebugSession: Event<DebugSession>"
                    },
                    {
                      "_": 15338,
                      "name": "onDidReceiveDebugSessionCustomEvent",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "An {@link Event} which fires when a custom DAP event is received from the {@link DebugSessiondebug session}.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "ref": "DebugSessionCustomEvent",
                            "targs": [],
                            "isNullable": false,
                            "_": 15338,
                            "source": "DebugSessionCustomEvent"
                          }
                        ],
                        "isNullable": false,
                        "_": 15338,
                        "source": " Event<DebugSessionCustomEvent>"
                      },
                      "source": " onDidReceiveDebugSessionCustomEvent: Event<DebugSessionCustomEvent>"
                    },
                    {
                      "_": 15343,
                      "name": "onDidTerminateDebugSession",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "An {@link Event} which fires when a {@link DebugSessiondebug session} has terminated.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "ref": "DebugSession",
                            "targs": [],
                            "isNullable": false,
                            "_": 15343,
                            "source": "DebugSession"
                          }
                        ],
                        "isNullable": false,
                        "_": 15343,
                        "source": " Event<DebugSession>"
                      },
                      "source": " onDidTerminateDebugSession: Event<DebugSession>"
                    },
                    {
                      "_": 15348,
                      "name": "onDidChangeBreakpoints",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "An {@link Event} that is emitted when the set of breakpoints is added, removed, or changed.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "ref": "BreakpointsChangeEvent",
                            "targs": [],
                            "isNullable": false,
                            "_": 15348,
                            "source": "BreakpointsChangeEvent"
                          }
                        ],
                        "isNullable": false,
                        "_": 15348,
                        "source": " Event<BreakpointsChangeEvent>"
                      },
                      "source": " onDidChangeBreakpoints: Event<BreakpointsChangeEvent>"
                    }
                  ],
                  "enums": []
                }
              },
              {
                "_": 15463,
                "namespace": "extensions",
                "from": "submodule vscode",
                "items": {
                  "structs": [],
                  "typedefs": [],
                  "modules": [],
                  "funcs": [
                    {
                      "_": 15471,
                      "name": "getExtension",
                      "type": {
                        "union": [
                          {
                            "ref": "Extension",
                            "targs": [
                              {
                                "ref": "T",
                                "targs": [],
                                "isNullable": false,
                                "_": 15471,
                                "source": "T"
                              }
                            ],
                            "isNullable": false,
                            "_": 15471,
                            "source": " Extension<T>"
                          },
                          {
                            "core": "undefined",
                            "isNullable": false,
                            "_": 15471,
                            "source": " undefined"
                          }
                        ],
                        "isNullable": false,
                        "_": 15471,
                        "source": " Extension<T> | undefined"
                      },
                      "generics": [
                        {
                          "name": "T",
                          "default": {
                            "core": "any",
                            "isNullable": false,
                            "_": 15471,
                            "source": " any"
                          },
                          "_": 15471,
                          "source": "T = any"
                        }
                      ],
                      "doc": "Get an extension by its full identifier in the form of: `publisher.name`.",
                      "params": [
                        {
                          "name": "extensionId",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 15471,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Get an extension by its full identifier in the form of: `publisher.name`.\n\t\t *\n\t\t * @param extensionId An extension identifier.\n\t\t * @return An extension or `undefined`.\n\t\t */\n\t\texport function getExtension<T = any>(extensionId: string): Extension<T> | undefined;"
                    }
                  ],
                  "vars": [
                    {
                      "_": 15476,
                      "name": "all",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "All extensions currently known to the system.",
                      "type": {
                        "operator": 146,
                        "type": {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "Extension",
                              "targs": [
                                {
                                  "core": "any",
                                  "isNullable": false,
                                  "_": 15476,
                                  "source": "any"
                                }
                              ],
                              "isNullable": false,
                              "_": 15476,
                              "source": " Extension<any>"
                            }
                          ],
                          "isNullable": false,
                          "_": 15476,
                          "source": " Extension<any>[]"
                        },
                        "isNullable": false,
                        "_": 15476,
                        "source": " readonly Extension<any>[]"
                      },
                      "source": " all: readonly Extension<any>[]"
                    },
                    {
                      "_": 15482,
                      "name": "onDidChange",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "An event which fires when `extensions.all` changes. This can happen when extensions are\ninstalled, uninstalled, enabled or disabled.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "core": "void",
                            "isNullable": false,
                            "_": 15482,
                            "source": "void"
                          }
                        ],
                        "isNullable": false,
                        "_": 15482,
                        "source": " Event<void>"
                      },
                      "source": " onDidChange: Event<void>"
                    }
                  ],
                  "enums": []
                }
              },
              {
                "_": 15781,
                "namespace": "comments",
                "from": "submodule vscode",
                "items": {
                  "structs": [],
                  "typedefs": [],
                  "modules": [],
                  "funcs": [
                    {
                      "_": 15789,
                      "name": "createCommentController",
                      "type": {
                        "ref": "CommentController",
                        "targs": [],
                        "isNullable": false,
                        "_": 15789,
                        "source": " CommentController"
                      },
                      "generics": [],
                      "doc": "Creates a new {@link CommentControllercomment controller} instance.",
                      "params": [
                        {
                          "name": "id",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 15789,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "label",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 15789,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\t\t/**\n\t\t * Creates a new {@link CommentController comment controller} instance.\n\t\t *\n\t\t * @param id An `id` for the comment controller.\n\t\t * @param label A human-readable string for the comment controller.\n\t\t * @return An instance of {@link CommentController comment controller}.\n\t\t */\n\t\texport function createCommentController(id: string, label: string): CommentController;"
                    }
                  ],
                  "vars": [],
                  "enums": []
                }
              },
              {
                "_": 16014,
                "namespace": "authentication",
                "from": "submodule vscode",
                "items": {
                  "structs": [
                    {
                      "isClass": false,
                      "_": -1,
                      "name": "IInline83",
                      "generics": [],
                      "doc": "",
                      "heritage": [],
                      "isInline": true,
                      "source": "",
                      "indexes": [],
                      "ctors": [],
                      "members": [
                        {
                          "doc": "",
                          "isMethod": false,
                          "_": 16028,
                          "source": " createIfNone: true",
                          "name": "createIfNone",
                          "generics": [],
                          "isGetter": false,
                          "isSetter": false,
                          "isNullable": false,
                          "isStatic": false,
                          "isReadonly": false,
                          "isPrivate": false,
                          "type": {
                            "core": "true",
                            "isNullable": false,
                            "_": 16028,
                            "source": " true"
                          }
                        }
                      ],
                      "calls": []
                    },
                    {
                      "isClass": false,
                      "_": -1,
                      "name": "IInline84",
                      "generics": [],
                      "doc": "",
                      "heritage": [],
                      "isInline": true,
                      "source": "",
                      "indexes": [],
                      "ctors": [],
                      "members": [
                        {
                          "doc": "",
                          "isMethod": false,
                          "_": 16043,
                          "source": " forceNewSession: true | AuthenticationForceNewSessionOptions",
                          "name": "forceNewSession",
                          "generics": [],
                          "isGetter": false,
                          "isSetter": false,
                          "isNullable": false,
                          "isStatic": false,
                          "isReadonly": false,
                          "isPrivate": false,
                          "type": {
                            "union": [
                              {
                                "core": "true",
                                "isNullable": false,
                                "_": 16043,
                                "source": " true"
                              },
                              {
                                "ref": "AuthenticationForceNewSessionOptions",
                                "targs": [],
                                "isNullable": false,
                                "_": 16043,
                                "source": " AuthenticationForceNewSessionOptions"
                              }
                            ],
                            "isNullable": false,
                            "_": 16043,
                            "source": " true | AuthenticationForceNewSessionOptions"
                          }
                        }
                      ],
                      "calls": []
                    }
                  ],
                  "typedefs": [],
                  "modules": [],
                  "funcs": [
                    {
                      "_": 16028,
                      "name": "getSession",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "ref": "AuthenticationSession",
                            "targs": [],
                            "isNullable": false,
                            "_": 16028,
                            "source": "AuthenticationSession"
                          }
                        ],
                        "isNullable": false,
                        "_": 16028,
                        "source": " Thenable<AuthenticationSession>"
                      },
                      "generics": [],
                      "doc": "Get an authentication session matching the desired scopes. Rejects if a provider with providerId is not\nregistered, or if the user does not consent to sharing authentication information with\nthe extension. If there are multiple sessions with the same scopes, the user will be shown a\nquickpick to select which account they would like to use.\n\nCurrently, there are only two authentication providers that are contributed from built in extensions\nto the editor that implement GitHub and Microsoft authentication: their providerId's are 'github' and 'microsoft'.",
                      "params": [
                        {
                          "name": "providerId",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 16028,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "scopes",
                          "type": {
                            "operator": 146,
                            "type": {
                              "core": "array",
                              "targs": [
                                {
                                  "core": "string",
                                  "isNullable": false,
                                  "_": 16028,
                                  "source": " string"
                                }
                              ],
                              "isNullable": false,
                              "_": 16028,
                              "source": " string[]"
                            },
                            "isNullable": false,
                            "_": 16028,
                            "source": " readonly string[]"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "options",
                          "type": {
                            "intersect": [
                              {
                                "ref": "AuthenticationGetSessionOptions",
                                "targs": [],
                                "isNullable": false,
                                "_": 16028,
                                "source": " AuthenticationGetSessionOptions"
                              },
                              {
                                "ref": "IInline83",
                                "targs": [],
                                "isNullable": false,
                                "_": 16028,
                                "source": " { createIfNone: true }"
                              }
                            ],
                            "isNullable": false,
                            "_": 16028,
                            "source": " AuthenticationGetSessionOptions & { createIfNone: true }"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\t\t/**\n\t\t * Get an authentication session matching the desired scopes. Rejects if a provider with providerId is not\n\t\t * registered, or if the user does not consent to sharing authentication information with\n\t\t * the extension. If there are multiple sessions with the same scopes, the user will be shown a\n\t\t * quickpick to select which account they would like to use.\n\t\t *\n\t\t * Currently, there are only two authentication providers that are contributed from built in extensions\n\t\t * to the editor that implement GitHub and Microsoft authentication: their providerId's are 'github' and 'microsoft'.\n\t\t * @param providerId The id of the provider to use\n\t\t * @param scopes A list of scopes representing the permissions requested. These are dependent on the authentication provider\n\t\t * @param options The {@link AuthenticationGetSessionOptions} to use\n\t\t * @returns A thenable that resolves to an authentication session\n\t\t */\n\t\texport function getSession(providerId: string, scopes: readonly string[], options: AuthenticationGetSessionOptions & { createIfNone: true }): Thenable<AuthenticationSession>;"
                    },
                    {
                      "_": 16043,
                      "name": "getSession",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "ref": "AuthenticationSession",
                            "targs": [],
                            "isNullable": false,
                            "_": 16043,
                            "source": "AuthenticationSession"
                          }
                        ],
                        "isNullable": false,
                        "_": 16043,
                        "source": " Thenable<AuthenticationSession>"
                      },
                      "generics": [],
                      "doc": "Get an authentication session matching the desired scopes. Rejects if a provider with providerId is not\nregistered, or if the user does not consent to sharing authentication information with\nthe extension. If there are multiple sessions with the same scopes, the user will be shown a\nquickpick to select which account they would like to use.\n\nCurrently, there are only two authentication providers that are contributed from built in extensions\nto the editor that implement GitHub and Microsoft authentication: their providerId's are 'github' and 'microsoft'.",
                      "params": [
                        {
                          "name": "providerId",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 16043,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "scopes",
                          "type": {
                            "operator": 146,
                            "type": {
                              "core": "array",
                              "targs": [
                                {
                                  "core": "string",
                                  "isNullable": false,
                                  "_": 16043,
                                  "source": " string"
                                }
                              ],
                              "isNullable": false,
                              "_": 16043,
                              "source": " string[]"
                            },
                            "isNullable": false,
                            "_": 16043,
                            "source": " readonly string[]"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "options",
                          "type": {
                            "intersect": [
                              {
                                "ref": "AuthenticationGetSessionOptions",
                                "targs": [],
                                "isNullable": false,
                                "_": 16043,
                                "source": " AuthenticationGetSessionOptions"
                              },
                              {
                                "ref": "IInline84",
                                "targs": [],
                                "isNullable": false,
                                "_": 16043,
                                "source": " { forceNewSession: true | AuthenticationForceNewSessionOptions }"
                              }
                            ],
                            "isNullable": false,
                            "_": 16043,
                            "source": " AuthenticationGetSessionOptions & { forceNewSession: true | AuthenticationForceNewSessionOptions }"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Get an authentication session matching the desired scopes. Rejects if a provider with providerId is not\n\t\t * registered, or if the user does not consent to sharing authentication information with\n\t\t * the extension. If there are multiple sessions with the same scopes, the user will be shown a\n\t\t * quickpick to select which account they would like to use.\n\t\t *\n\t\t * Currently, there are only two authentication providers that are contributed from built in extensions\n\t\t * to the editor that implement GitHub and Microsoft authentication: their providerId's are 'github' and 'microsoft'.\n\t\t * @param providerId The id of the provider to use\n\t\t * @param scopes A list of scopes representing the permissions requested. These are dependent on the authentication provider\n\t\t * @param options The {@link AuthenticationGetSessionOptions} to use\n\t\t * @returns A thenable that resolves to an authentication session\n\t\t */\n\t\texport function getSession(providerId: string, scopes: readonly string[], options: AuthenticationGetSessionOptions & { forceNewSession: true | AuthenticationForceNewSessionOptions }): Thenable<AuthenticationSession>;"
                    },
                    {
                      "_": 16058,
                      "name": "getSession",
                      "type": {
                        "ref": "Thenable",
                        "targs": [
                          {
                            "union": [
                              {
                                "ref": "AuthenticationSession",
                                "targs": [],
                                "isNullable": false,
                                "_": 16058,
                                "source": "AuthenticationSession"
                              },
                              {
                                "core": "undefined",
                                "isNullable": false,
                                "_": 16058,
                                "source": " undefined"
                              }
                            ],
                            "isNullable": false,
                            "_": 16058,
                            "source": "AuthenticationSession | undefined"
                          }
                        ],
                        "isNullable": false,
                        "_": 16058,
                        "source": " Thenable<AuthenticationSession | undefined>"
                      },
                      "generics": [],
                      "doc": "Get an authentication session matching the desired scopes. Rejects if a provider with providerId is not\nregistered, or if the user does not consent to sharing authentication information with\nthe extension. If there are multiple sessions with the same scopes, the user will be shown a\nquickpick to select which account they would like to use.\n\nCurrently, there are only two authentication providers that are contributed from built in extensions\nto the editor that implement GitHub and Microsoft authentication: their providerId's are 'github' and 'microsoft'.",
                      "params": [
                        {
                          "name": "providerId",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 16058,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "scopes",
                          "type": {
                            "operator": 146,
                            "type": {
                              "core": "array",
                              "targs": [
                                {
                                  "core": "string",
                                  "isNullable": false,
                                  "_": 16058,
                                  "source": " string"
                                }
                              ],
                              "isNullable": false,
                              "_": 16058,
                              "source": " string[]"
                            },
                            "isNullable": false,
                            "_": 16058,
                            "source": " readonly string[]"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "options",
                          "type": {
                            "ref": "AuthenticationGetSessionOptions",
                            "targs": [],
                            "isNullable": false,
                            "_": 16058,
                            "source": " AuthenticationGetSessionOptions"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Get an authentication session matching the desired scopes. Rejects if a provider with providerId is not\n\t\t * registered, or if the user does not consent to sharing authentication information with\n\t\t * the extension. If there are multiple sessions with the same scopes, the user will be shown a\n\t\t * quickpick to select which account they would like to use.\n\t\t *\n\t\t * Currently, there are only two authentication providers that are contributed from built in extensions\n\t\t * to the editor that implement GitHub and Microsoft authentication: their providerId's are 'github' and 'microsoft'.\n\t\t * @param providerId The id of the provider to use\n\t\t * @param scopes A list of scopes representing the permissions requested. These are dependent on the authentication provider\n\t\t * @param options The {@link AuthenticationGetSessionOptions} to use\n\t\t * @returns A thenable that resolves to an authentication session if available, or undefined if there are no sessions\n\t\t */\n\t\texport function getSession(providerId: string, scopes: readonly string[], options?: AuthenticationGetSessionOptions): Thenable<AuthenticationSession | undefined>;"
                    },
                    {
                      "_": 16078,
                      "name": "registerAuthenticationProvider",
                      "type": {
                        "ref": "Disposable",
                        "targs": [],
                        "isNullable": false,
                        "_": 16078,
                        "source": " Disposable"
                      },
                      "generics": [],
                      "doc": "Register an authentication provider.\n\nThere can only be one provider per id and an error is being thrown when an id\nhas already been used by another provider. Ids are case-sensitive.",
                      "params": [
                        {
                          "name": "id",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 16078,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "label",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 16078,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "provider",
                          "type": {
                            "ref": "AuthenticationProvider",
                            "targs": [],
                            "isNullable": false,
                            "_": 16078,
                            "source": " AuthenticationProvider"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "options",
                          "type": {
                            "ref": "AuthenticationProviderOptions",
                            "targs": [],
                            "isNullable": false,
                            "_": 16078,
                            "source": " AuthenticationProviderOptions"
                          },
                          "varargs": false,
                          "isNullable": true
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Register an authentication provider.\n\t\t *\n\t\t * There can only be one provider per id and an error is being thrown when an id\n\t\t * has already been used by another provider. Ids are case-sensitive.\n\t\t *\n\t\t * @param id The unique identifier of the provider.\n\t\t * @param label The human-readable name of the provider.\n\t\t * @param provider The authentication provider provider.\n\t\t * @param options Additional options for the provider.\n\t\t * @return A {@link Disposable} that unregisters this provider when being disposed.\n\t\t */\n\t\texport function registerAuthenticationProvider(id: string, label: string, provider: AuthenticationProvider, options?: AuthenticationProviderOptions): Disposable;"
                    }
                  ],
                  "vars": [
                    {
                      "_": 16064,
                      "name": "onDidChangeSessions",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "An {@link Event} which fires when the authentication sessions of an authentication provider have\nbeen added, removed, or changed.",
                      "type": {
                        "ref": "Event",
                        "targs": [
                          {
                            "ref": "AuthenticationSessionsChangeEvent",
                            "targs": [],
                            "isNullable": false,
                            "_": 16064,
                            "source": "AuthenticationSessionsChangeEvent"
                          }
                        ],
                        "isNullable": false,
                        "_": 16064,
                        "source": " Event<AuthenticationSessionsChangeEvent>"
                      },
                      "source": " onDidChangeSessions: Event<AuthenticationSessionsChangeEvent>"
                    }
                  ],
                  "enums": []
                }
              },
              {
                "_": 16091,
                "namespace": "l10n",
                "from": "submodule vscode",
                "items": {
                  "structs": [
                    {
                      "isClass": false,
                      "_": -1,
                      "name": "IInline85",
                      "generics": [],
                      "doc": "",
                      "heritage": [],
                      "isInline": true,
                      "source": "",
                      "indexes": [],
                      "ctors": [],
                      "members": [
                        {
                          "doc": "The message to localize. If {@link options.args args} is an array, this message supports index templating where strings like\n `{0}` and `{1}` are replaced by the item at that index in the {@link options.args args} array. If `args` is a `Record<string, any>`,\n this supports named templating where strings like `{foo}` and `{bar}` are replaced by the value in\n the Record for that key (foo, bar, etc).",
                          "isMethod": false,
                          "_": 16138,
                          "source": "\n\t\t\t/**\n\t\t\t * The message to localize. If {@link options.args args} is an array, this message supports index templating where strings like\n\t\t\t * `{0}` and `{1}` are replaced by the item at that index in the {@link options.args args} array. If `args` is a `Record<string, any>`,\n\t\t\t * this supports named templating where strings like `{foo}` and `{bar}` are replaced by the value in\n\t\t\t * the Record for that key (foo, bar, etc).\n\t\t\t */\n\t\t\tmessage: string;",
                          "name": "message",
                          "generics": [],
                          "isGetter": false,
                          "isSetter": false,
                          "isNullable": false,
                          "isStatic": false,
                          "isReadonly": false,
                          "isPrivate": false,
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 16138,
                            "source": " string"
                          }
                        },
                        {
                          "doc": "The arguments to be used in the localized string. As an array, the index of the argument is used to\n match the template placeholder in the localized string. As a Record, the key is used to match the template\n placeholder in the localized string.",
                          "isMethod": false,
                          "_": 16144,
                          "source": "\n\t\t\t/**\n\t\t\t * The arguments to be used in the localized string. As an array, the index of the argument is used to\n\t\t\t * match the template placeholder in the localized string. As a Record, the key is used to match the template\n\t\t\t * placeholder in the localized string.\n\t\t\t */\n\t\t\targs?: Array<string | number | boolean> | Record<string, any>;",
                          "name": "args",
                          "generics": [],
                          "isGetter": false,
                          "isSetter": false,
                          "isNullable": true,
                          "isStatic": false,
                          "isReadonly": false,
                          "isPrivate": false,
                          "type": {
                            "union": [
                              {
                                "ref": "Array",
                                "targs": [
                                  {
                                    "union": [
                                      {
                                        "core": "string",
                                        "isNullable": false,
                                        "_": 16144,
                                        "source": "string"
                                      },
                                      {
                                        "core": "number",
                                        "isNullable": false,
                                        "_": 16144,
                                        "source": " number"
                                      },
                                      {
                                        "core": "boolean",
                                        "isNullable": false,
                                        "_": 16144,
                                        "source": " boolean"
                                      }
                                    ],
                                    "isNullable": false,
                                    "_": 16144,
                                    "source": "string | number | boolean"
                                  }
                                ],
                                "isNullable": false,
                                "_": 16144,
                                "source": " Array<string | number | boolean>"
                              },
                              {
                                "ref": "Record",
                                "targs": [
                                  {
                                    "core": "string",
                                    "isNullable": false,
                                    "_": 16144,
                                    "source": "string"
                                  },
                                  {
                                    "core": "any",
                                    "isNullable": false,
                                    "_": 16144,
                                    "source": " any"
                                  }
                                ],
                                "isNullable": false,
                                "_": 16144,
                                "source": " Record<string, any>"
                              }
                            ],
                            "isNullable": false,
                            "_": 16144,
                            "source": " Array<string | number | boolean> | Record<string, any>"
                          }
                        },
                        {
                          "doc": "A comment to help translators understand the context of the message.",
                          "isMethod": false,
                          "_": 16148,
                          "source": "\n\t\t\t/**\n\t\t\t * A comment to help translators understand the context of the message.\n\t\t\t */\n\t\t\tcomment: string | string[];",
                          "name": "comment",
                          "generics": [],
                          "isGetter": false,
                          "isSetter": false,
                          "isNullable": false,
                          "isStatic": false,
                          "isReadonly": false,
                          "isPrivate": false,
                          "type": {
                            "union": [
                              {
                                "core": "string",
                                "isNullable": false,
                                "_": 16148,
                                "source": " string"
                              },
                              {
                                "core": "array",
                                "targs": [
                                  {
                                    "core": "string",
                                    "isNullable": false,
                                    "_": 16148,
                                    "source": " string"
                                  }
                                ],
                                "isNullable": false,
                                "_": 16148,
                                "source": " string[]"
                              }
                            ],
                            "isNullable": false,
                            "_": 16148,
                            "source": " string | string[]"
                          }
                        }
                      ],
                      "calls": []
                    },
                    {
                      "isClass": false,
                      "_": -1,
                      "name": "IInline86",
                      "generics": [],
                      "doc": "",
                      "heritage": [],
                      "isInline": true,
                      "source": "",
                      "indexes": [
                        {
                          "key": {
                            "core": "string",
                            "isNullable": false,
                            "_": 16155,
                            "source": " string"
                          },
                          "value": {
                            "core": "string",
                            "isNullable": false,
                            "_": 16155,
                            "source": " string"
                          },
                          "doc": "",
                          "_": 16155,
                          "source": " [key: string]: string",
                          "isStatic": false,
                          "isReadonly": false,
                          "isPrivate": false
                        }
                      ],
                      "ctors": [],
                      "members": [],
                      "calls": []
                    }
                  ],
                  "typedefs": [],
                  "modules": [],
                  "funcs": [
                    {
                      "_": 16106,
                      "name": "t",
                      "type": {
                        "core": "string",
                        "isNullable": false,
                        "_": 16106,
                        "source": " string"
                      },
                      "generics": [],
                      "doc": "Marks a string for localization. If a localized bundle is available for the language specified by\n{@link env.language} and the bundle has a localized value for this message, then that localized\nvalue will be returned (with injected {@link args} values for any templated values).\nMarks a string for localization. If a localized bundle is available for the language specified by\n{@link env.language} and the bundle has a localized value for this message, then that localized\nvalue will be returned (with injected args values for any templated values).",
                      "params": [
                        {
                          "name": "message",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 16106,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "args",
                          "type": {
                            "ref": "Array",
                            "targs": [
                              {
                                "union": [
                                  {
                                    "core": "string",
                                    "isNullable": false,
                                    "_": 16106,
                                    "source": "string"
                                  },
                                  {
                                    "core": "number",
                                    "isNullable": false,
                                    "_": 16106,
                                    "source": " number"
                                  },
                                  {
                                    "core": "boolean",
                                    "isNullable": false,
                                    "_": 16106,
                                    "source": " boolean"
                                  }
                                ],
                                "isNullable": false,
                                "_": 16106,
                                "source": "string | number | boolean"
                              }
                            ],
                            "isNullable": false,
                            "_": 16106,
                            "source": " Array<string | number | boolean>"
                          },
                          "varargs": true,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\t\t/**\n\t\t * Marks a string for localization. If a localized bundle is available for the language specified by\n\t\t * {@link env.language} and the bundle has a localized value for this message, then that localized\n\t\t * value will be returned (with injected {@link args} values for any templated values).\n\t\t *\n\t\t * @param message - The message to localize. Supports index templating where strings like `{0}` and `{1}` are\n\t\t * replaced by the item at that index in the {@link args} array.\n\t\t * @param args - The arguments to be used in the localized string. The index of the argument is used to\n\t\t * match the template placeholder in the localized string.\n\t\t * @returns localized string with injected arguments.\n\t\t *\n\t\t * @example\n\t\t * l10n.t('Hello {0}!', 'World');\n\t\t */\n\t\texport function t(message: string, ...args: Array<string | number | boolean>): string;"
                    },
                    {
                      "_": 16122,
                      "name": "t",
                      "type": {
                        "core": "string",
                        "isNullable": false,
                        "_": 16122,
                        "source": " string"
                      },
                      "generics": [],
                      "doc": "Marks a string for localization. If a localized bundle is available for the language specified by\n{@link env.language} and the bundle has a localized value for this message, then that localized\nvalue will be returned (with injected {@link args} values for any templated values).\nMarks a string for localization. If a localized bundle is available for the language specified by\n{@link env.language} and the bundle has a localized value for this message, then that localized\nvalue will be returned (with injected args values for any templated values).",
                      "params": [
                        {
                          "name": "message",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 16122,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "args",
                          "type": {
                            "ref": "Record",
                            "targs": [
                              {
                                "core": "string",
                                "isNullable": false,
                                "_": 16122,
                                "source": "string"
                              },
                              {
                                "core": "any",
                                "isNullable": false,
                                "_": 16122,
                                "source": " any"
                              }
                            ],
                            "isNullable": false,
                            "_": 16122,
                            "source": " Record<string, any>"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\n\t\t/**\n\t\t * Marks a string for localization. If a localized bundle is available for the language specified by\n\t\t * {@link env.language} and the bundle has a localized value for this message, then that localized\n\t\t * value will be returned (with injected {@link args} values for any templated values).\n\t\t *\n\t\t * @param message The message to localize. Supports named templating where strings like `{foo}` and `{bar}` are\n\t\t * replaced by the value in the Record for that key (foo, bar, etc).\n\t\t * @param args The arguments to be used in the localized string. The name of the key in the record is used to\n\t\t * match the template placeholder in the localized string.\n\t\t * @returns localized string with injected arguments.\n\t\t *\n\t\t * @example\n\t\t * l10n.t('Hello {name}', { name: 'Erich' });\n\t\t */\n\t\texport function t(message: string, args: Record<string, any>): string;"
                    },
                    {
                      "_": 16131,
                      "name": "t",
                      "type": {
                        "core": "string",
                        "isNullable": false,
                        "_": 16149,
                        "source": " string"
                      },
                      "generics": [],
                      "doc": "Marks a string for localization. If a localized bundle is available for the language specified by\n{@link env.language} and the bundle has a localized value for this message, then that localized\nvalue will be returned (with injected {@link args} values for any templated values).\nMarks a string for localization. If a localized bundle is available for the language specified by\n{@link env.language} and the bundle has a localized value for this message, then that localized\nvalue will be returned (with injected args values for any templated values).",
                      "params": [
                        {
                          "name": "options",
                          "type": {
                            "ref": "IInline85",
                            "targs": [],
                            "isNullable": false,
                            "_": 16131,
                            "source": " {\n\t\t\t/**\n\t\t\t * The message to localize. If {@link options.args args} is an array, this message supports index templating where strings like\n\t\t\t * `{0}` and `{1}` are replaced by the item at that index in the {@link options.args args} array. If `args` is a `Record<string, any>`,\n\t\t\t * this supports named templating where strings like `{foo}` and `{bar}` are replaced by the value in\n\t\t\t * the Record for that key (foo, bar, etc).\n\t\t\t */\n\t\t\tmessage: string;\n\t\t\t/**\n\t\t\t * The arguments to be used in the localized string. As an array, the index of the argument is used to\n\t\t\t * match the template placeholder in the localized string. As a Record, the key is used to match the template\n\t\t\t * placeholder in the localized string.\n\t\t\t */\n\t\t\targs?: Array<string | number | boolean> | Record<string, any>;\n\t\t\t/**\n\t\t\t * A comment to help translators understand the context of the message.\n\t\t\t */\n\t\t\tcomment: string | string[];\n\t\t}"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\t\t/**\n\t\t * Marks a string for localization. If a localized bundle is available for the language specified by\n\t\t * {@link env.language} and the bundle has a localized value for this message, then that localized\n\t\t * value will be returned (with injected args values for any templated values).\n\t\t *\n\t\t * @param options The options to use when localizing the message.\n\t\t * @returns localized string with injected arguments.\n\t\t */\n\t\texport function t(options: {\n\t\t\t/**\n\t\t\t * The message to localize. If {@link options.args args} is an array, this message supports index templating where strings like\n\t\t\t * `{0}` and `{1}` are replaced by the item at that index in the {@link options.args args} array. If `args` is a `Record<string, any>`,\n\t\t\t * this supports named templating where strings like `{foo}` and `{bar}` are replaced by the value in\n\t\t\t * the Record for that key (foo, bar, etc).\n\t\t\t */\n\t\t\tmessage: string;\n\t\t\t/**\n\t\t\t * The arguments to be used in the localized string. As an array, the index of the argument is used to\n\t\t\t * match the template placeholder in the localized string. As a Record, the key is used to match the template\n\t\t\t * placeholder in the localized string.\n\t\t\t */\n\t\t\targs?: Array<string | number | boolean> | Record<string, any>;\n\t\t\t/**\n\t\t\t * A comment to help translators understand the context of the message.\n\t\t\t */\n\t\t\tcomment: string | string[];\n\t\t}): string;"
                    }
                  ],
                  "vars": [
                    {
                      "_": 16155,
                      "name": "bundle",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "The bundle of localized strings that have been loaded for the extension.\nIt's undefined if no bundle has been loaded. The bundle is typically not loaded if\nthere was no bundle found or when we are running with the default language.",
                      "type": {
                        "union": [
                          {
                            "ref": "IInline86",
                            "targs": [],
                            "isNullable": false,
                            "_": 16155,
                            "source": " { [key: string]: string }"
                          },
                          {
                            "core": "undefined",
                            "isNullable": false,
                            "_": 16155,
                            "source": " undefined"
                          }
                        ],
                        "isNullable": false,
                        "_": 16155,
                        "source": " { [key: string]: string } | undefined"
                      },
                      "source": " bundle: { [key: string]: string } | undefined"
                    },
                    {
                      "_": 16161,
                      "name": "uri",
                      "isReadonly": true,
                      "isStatic": false,
                      "isNullable": false,
                      "doc": "The URI of the localization bundle that has been loaded for the extension.\nIt's undefined if no bundle has been loaded. The bundle is typically not loaded if\nthere was no bundle found or when we are running with the default language.",
                      "type": {
                        "union": [
                          {
                            "ref": "Uri",
                            "targs": [],
                            "isNullable": false,
                            "_": 16161,
                            "source": " Uri"
                          },
                          {
                            "core": "undefined",
                            "isNullable": false,
                            "_": 16161,
                            "source": " undefined"
                          }
                        ],
                        "isNullable": false,
                        "_": 16161,
                        "source": " Uri | undefined"
                      },
                      "source": " uri: Uri | undefined"
                    }
                  ],
                  "enums": []
                }
              },
              {
                "_": 16170,
                "namespace": "tests",
                "from": "submodule vscode",
                "items": {
                  "structs": [],
                  "typedefs": [],
                  "modules": [],
                  "funcs": [
                    {
                      "_": 16178,
                      "name": "createTestController",
                      "type": {
                        "ref": "TestController",
                        "targs": [],
                        "isNullable": false,
                        "_": 16178,
                        "source": " TestController"
                      },
                      "generics": [],
                      "doc": "Creates a new test controller.",
                      "params": [
                        {
                          "name": "id",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 16178,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        },
                        {
                          "name": "label",
                          "type": {
                            "core": "string",
                            "isNullable": false,
                            "_": 16178,
                            "source": " string"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "source": "\n\t\t/**\n\t\t * Creates a new test controller.\n\t\t *\n\t\t * @param id Identifier for the controller, must be globally unique.\n\t\t * @param label A human-readable label for the controller.\n\t\t * @returns An instance of the {@link TestController}.\n\t\t*/\n\t\texport function createTestController(id: string, label: string): TestController;"
                    }
                  ],
                  "vars": [],
                  "enums": []
                }
              }
            ],
            "funcs": [],
            "vars": [
              {
                "_": 22,
                "name": "version",
                "isReadonly": true,
                "isStatic": false,
                "isNullable": false,
                "doc": "The version of the editor.",
                "type": {
                  "core": "string",
                  "isNullable": false,
                  "_": 22,
                  "source": " string"
                },
                "source": " version: string"
              }
            ],
            "enums": [
              {
                "name": "TextEditorSelectionChangeKind",
                "doc": "Represents sources that can cause {@link window.onDidChangeTextEditorSelectionselection change events}.",
                "_": 523,
                "source": "\n\n\t/**\n\t * Represents sources that can cause {@link window.onDidChangeTextEditorSelection selection change events}.\n\t*/\n\texport enum TextEditorSelectionChangeKind {\n\t\t/**\n\t\t * Selection changed due to typing in the editor.\n\t\t */\n\t\tKeyboard = 1,\n\t\t/**\n\t\t * Selection change due to clicking in the editor.\n\t\t */\n\t\tMouse = 2,\n\t\t/**\n\t\t * Selection changed because a command ran.\n\t\t */\n\t\tCommand = 3\n\t}",
                "members": [
                  {
                    "name": "Keyboard",
                    "doc": "Selection changed due to typing in the editor.",
                    "value": "1",
                    "_": 527,
                    "source": "\n\t\t/**\n\t\t * Selection changed due to typing in the editor.\n\t\t */\n\t\tKeyboard = 1"
                  },
                  {
                    "name": "Mouse",
                    "doc": "Selection change due to clicking in the editor.",
                    "value": "2",
                    "_": 531,
                    "source": "\n\t\t/**\n\t\t * Selection change due to clicking in the editor.\n\t\t */\n\t\tMouse = 2"
                  },
                  {
                    "name": "Command",
                    "doc": "Selection changed because a command ran.",
                    "value": "3",
                    "_": 535,
                    "source": "\n\t\t/**\n\t\t * Selection changed because a command ran.\n\t\t */\n\t\tCommand = 3"
                  }
                ]
              },
              {
                "name": "TextEditorCursorStyle",
                "doc": "Rendering style of the cursor.",
                "_": 602,
                "source": "\n\n\t/**\n\t * Rendering style of the cursor.\n\t */\n\texport enum TextEditorCursorStyle {\n\t\t/**\n\t\t * Render the cursor as a vertical thick line.\n\t\t */\n\t\tLine = 1,\n\t\t/**\n\t\t * Render the cursor as a block filled.\n\t\t */\n\t\tBlock = 2,\n\t\t/**\n\t\t * Render the cursor as a thick horizontal line.\n\t\t */\n\t\tUnderline = 3,\n\t\t/**\n\t\t * Render the cursor as a vertical thin line.\n\t\t */\n\t\tLineThin = 4,\n\t\t/**\n\t\t * Render the cursor as a block outlined.\n\t\t */\n\t\tBlockOutline = 5,\n\t\t/**\n\t\t * Render the cursor as a thin horizontal line.\n\t\t */\n\t\tUnderlineThin = 6\n\t}",
                "members": [
                  {
                    "name": "Line",
                    "doc": "Render the cursor as a vertical thick line.",
                    "value": "1",
                    "_": 606,
                    "source": "\n\t\t/**\n\t\t * Render the cursor as a vertical thick line.\n\t\t */\n\t\tLine = 1"
                  },
                  {
                    "name": "Block",
                    "doc": "Render the cursor as a block filled.",
                    "value": "2",
                    "_": 610,
                    "source": "\n\t\t/**\n\t\t * Render the cursor as a block filled.\n\t\t */\n\t\tBlock = 2"
                  },
                  {
                    "name": "Underline",
                    "doc": "Render the cursor as a thick horizontal line.",
                    "value": "3",
                    "_": 614,
                    "source": "\n\t\t/**\n\t\t * Render the cursor as a thick horizontal line.\n\t\t */\n\t\tUnderline = 3"
                  },
                  {
                    "name": "LineThin",
                    "doc": "Render the cursor as a vertical thin line.",
                    "value": "4",
                    "_": 618,
                    "source": "\n\t\t/**\n\t\t * Render the cursor as a vertical thin line.\n\t\t */\n\t\tLineThin = 4"
                  },
                  {
                    "name": "BlockOutline",
                    "doc": "Render the cursor as a block outlined.",
                    "value": "5",
                    "_": 622,
                    "source": "\n\t\t/**\n\t\t * Render the cursor as a block outlined.\n\t\t */\n\t\tBlockOutline = 5"
                  },
                  {
                    "name": "UnderlineThin",
                    "doc": "Render the cursor as a thin horizontal line.",
                    "value": "6",
                    "_": 626,
                    "source": "\n\t\t/**\n\t\t * Render the cursor as a thin horizontal line.\n\t\t */\n\t\tUnderlineThin = 6"
                  }
                ]
              },
              {
                "name": "TextEditorLineNumbersStyle",
                "doc": "Rendering style of the line numbers.",
                "_": 632,
                "source": "\n\n\t/**\n\t * Rendering style of the line numbers.\n\t */\n\texport enum TextEditorLineNumbersStyle {\n\t\t/**\n\t\t * Do not render the line numbers.\n\t\t */\n\t\tOff = 0,\n\t\t/**\n\t\t * Render the line numbers.\n\t\t */\n\t\tOn = 1,\n\t\t/**\n\t\t * Render the line numbers with values relative to the primary cursor location.\n\t\t */\n\t\tRelative = 2\n\t}",
                "members": [
                  {
                    "name": "Off",
                    "doc": "Do not render the line numbers.",
                    "value": "0",
                    "_": 636,
                    "source": "\n\t\t/**\n\t\t * Do not render the line numbers.\n\t\t */\n\t\tOff = 0"
                  },
                  {
                    "name": "On",
                    "doc": "Render the line numbers.",
                    "value": "1",
                    "_": 640,
                    "source": "\n\t\t/**\n\t\t * Render the line numbers.\n\t\t */\n\t\tOn = 1"
                  },
                  {
                    "name": "Relative",
                    "doc": "Render the line numbers with values relative to the primary cursor location.",
                    "value": "2",
                    "_": 644,
                    "source": "\n\t\t/**\n\t\t * Render the line numbers with values relative to the primary cursor location.\n\t\t */\n\t\tRelative = 2"
                  }
                ]
              },
              {
                "name": "TextEditorRevealType",
                "doc": "Represents different {@link TextEditor.revealRangereveal} strategies in a text editor.",
                "_": 707,
                "source": "\n\n\t/**\n\t * Represents different {@link TextEditor.revealRange reveal} strategies in a text editor.\n\t */\n\texport enum TextEditorRevealType {\n\t\t/**\n\t\t * The range will be revealed with as little scrolling as possible.\n\t\t */\n\t\tDefault = 0,\n\t\t/**\n\t\t * The range will always be revealed in the center of the viewport.\n\t\t */\n\t\tInCenter = 1,\n\t\t/**\n\t\t * If the range is outside the viewport, it will be revealed in the center of the viewport.\n\t\t * Otherwise, it will be revealed with as little scrolling as possible.\n\t\t */\n\t\tInCenterIfOutsideViewport = 2,\n\t\t/**\n\t\t * The range will always be revealed at the top of the viewport.\n\t\t */\n\t\tAtTop = 3\n\t}",
                "members": [
                  {
                    "name": "Default",
                    "doc": "The range will be revealed with as little scrolling as possible.",
                    "value": "0",
                    "_": 711,
                    "source": "\n\t\t/**\n\t\t * The range will be revealed with as little scrolling as possible.\n\t\t */\n\t\tDefault = 0"
                  },
                  {
                    "name": "InCenter",
                    "doc": "The range will always be revealed in the center of the viewport.",
                    "value": "1",
                    "_": 715,
                    "source": "\n\t\t/**\n\t\t * The range will always be revealed in the center of the viewport.\n\t\t */\n\t\tInCenter = 1"
                  },
                  {
                    "name": "InCenterIfOutsideViewport",
                    "doc": "If the range is outside the viewport, it will be revealed in the center of the viewport.\n Otherwise, it will be revealed with as little scrolling as possible.",
                    "value": "2",
                    "_": 720,
                    "source": "\n\t\t/**\n\t\t * If the range is outside the viewport, it will be revealed in the center of the viewport.\n\t\t * Otherwise, it will be revealed with as little scrolling as possible.\n\t\t */\n\t\tInCenterIfOutsideViewport = 2"
                  },
                  {
                    "name": "AtTop",
                    "doc": "The range will always be revealed at the top of the viewport.",
                    "value": "3",
                    "_": 724,
                    "source": "\n\t\t/**\n\t\t * The range will always be revealed at the top of the viewport.\n\t\t */\n\t\tAtTop = 3"
                  }
                ]
              },
              {
                "name": "OverviewRulerLane",
                "doc": "Represents different positions for rendering a decoration in an {@link DecorationRenderOptions.overviewRulerLaneoverview ruler}.\nThe overview ruler supports three lanes.",
                "_": 731,
                "source": "\n\n\t/**\n\t * Represents different positions for rendering a decoration in an {@link DecorationRenderOptions.overviewRulerLane overview ruler}.\n\t * The overview ruler supports three lanes.\n\t */\n\texport enum OverviewRulerLane {\n\t\tLeft = 1,\n\t\tCenter = 2,\n\t\tRight = 4,\n\t\tFull = 7\n\t}",
                "members": [
                  {
                    "name": "Left",
                    "doc": "",
                    "value": "1",
                    "_": 732,
                    "source": "\n\t\tLeft = 1"
                  },
                  {
                    "name": "Center",
                    "doc": "",
                    "value": "2",
                    "_": 733,
                    "source": "\n\t\tCenter = 2"
                  },
                  {
                    "name": "Right",
                    "doc": "",
                    "value": "4",
                    "_": 734,
                    "source": "\n\t\tRight = 4"
                  },
                  {
                    "name": "Full",
                    "doc": "",
                    "value": "7",
                    "_": 735,
                    "source": "\n\t\tFull = 7"
                  }
                ]
              },
              {
                "name": "DecorationRangeBehavior",
                "doc": "Describes the behavior of decorations when typing/editing at their edges.",
                "_": 741,
                "source": "\n\n\t/**\n\t * Describes the behavior of decorations when typing/editing at their edges.\n\t */\n\texport enum DecorationRangeBehavior {\n\t\t/**\n\t\t * The decoration's range will widen when edits occur at the start or end.\n\t\t */\n\t\tOpenOpen = 0,\n\t\t/**\n\t\t * The decoration's range will not widen when edits occur at the start or end.\n\t\t */\n\t\tClosedClosed = 1,\n\t\t/**\n\t\t * The decoration's range will widen when edits occur at the start, but not at the end.\n\t\t */\n\t\tOpenClosed = 2,\n\t\t/**\n\t\t * The decoration's range will widen when edits occur at the end, but not at the start.\n\t\t */\n\t\tClosedOpen = 3\n\t}",
                "members": [
                  {
                    "name": "OpenOpen",
                    "doc": "The decoration's range will widen when edits occur at the start or end.",
                    "value": "0",
                    "_": 745,
                    "source": "\n\t\t/**\n\t\t * The decoration's range will widen when edits occur at the start or end.\n\t\t */\n\t\tOpenOpen = 0"
                  },
                  {
                    "name": "ClosedClosed",
                    "doc": "The decoration's range will not widen when edits occur at the start or end.",
                    "value": "1",
                    "_": 749,
                    "source": "\n\t\t/**\n\t\t * The decoration's range will not widen when edits occur at the start or end.\n\t\t */\n\t\tClosedClosed = 1"
                  },
                  {
                    "name": "OpenClosed",
                    "doc": "The decoration's range will widen when edits occur at the start, but not at the end.",
                    "value": "2",
                    "_": 753,
                    "source": "\n\t\t/**\n\t\t * The decoration's range will widen when edits occur at the start, but not at the end.\n\t\t */\n\t\tOpenClosed = 2"
                  },
                  {
                    "name": "ClosedOpen",
                    "doc": "The decoration's range will widen when edits occur at the end, but not at the start.",
                    "value": "3",
                    "_": 757,
                    "source": "\n\t\t/**\n\t\t * The decoration's range will widen when edits occur at the end, but not at the start.\n\t\t */\n\t\tClosedOpen = 3"
                  }
                ]
              },
              {
                "name": "EndOfLine",
                "doc": "Represents an end of line character sequence in a {@link TextDocumentdocument}.",
                "_": 1271,
                "source": "\n\n\t/**\n\t * Represents an end of line character sequence in a {@link TextDocument document}.\n\t */\n\texport enum EndOfLine {\n\t\t/**\n\t\t * The line feed `\\n` character.\n\t\t */\n\t\tLF = 1,\n\t\t/**\n\t\t * The carriage return line feed `\\r\\n` sequence.\n\t\t */\n\t\tCRLF = 2\n\t}",
                "members": [
                  {
                    "name": "LF",
                    "doc": "The line feed `\\n` character.",
                    "value": "1",
                    "_": 1275,
                    "source": "\n\t\t/**\n\t\t * The line feed `\\n` character.\n\t\t */\n\t\tLF = 1"
                  },
                  {
                    "name": "CRLF",
                    "doc": "The carriage return line feed `\\r\\n` sequence.",
                    "value": "2",
                    "_": 1279,
                    "source": "\n\t\t/**\n\t\t * The carriage return line feed `\\r\\n` sequence.\n\t\t */\n\t\tCRLF = 2"
                  }
                ]
              },
              {
                "name": "QuickPickItemKind",
                "doc": "The kind of {@link QuickPickItemquick pick item}.",
                "_": 1717,
                "source": "\n\n\t/**\n\t * The kind of {@link QuickPickItem quick pick item}.\n\t */\n\texport enum QuickPickItemKind {\n\t\t/**\n\t\t * When a {@link QuickPickItem} has a kind of {@link Separator}, the item is just a visual separator and does not represent a real item.\n\t\t * The only property that applies is {@link QuickPickItem.label label }. All other properties on {@link QuickPickItem} will be ignored and have no effect.\n\t\t */\n\t\tSeparator = -1,\n\t\t/**\n\t\t * The default {@link QuickPickItem.kind} is an item that can be selected in the quick pick.\n\t\t */\n\t\tDefault = 0,\n\t}",
                "members": [
                  {
                    "name": "Separator",
                    "doc": "When a {@link QuickPickItem} has a kind of {@link Separator}, the item is just a visual separator and does not represent a real item.\n The only property that applies is {@link QuickPickItem.label label }. All other properties on {@link QuickPickItem} will be ignored and have no effect.",
                    "value": "-1",
                    "_": 1722,
                    "source": "\n\t\t/**\n\t\t * When a {@link QuickPickItem} has a kind of {@link Separator}, the item is just a visual separator and does not represent a real item.\n\t\t * The only property that applies is {@link QuickPickItem.label label }. All other properties on {@link QuickPickItem} will be ignored and have no effect.\n\t\t */\n\t\tSeparator = -1"
                  },
                  {
                    "name": "Default",
                    "doc": "The default {@link QuickPickItem.kind} is an item that can be selected in the quick pick.",
                    "value": "0",
                    "_": 1726,
                    "source": "\n\t\t/**\n\t\t * The default {@link QuickPickItem.kind} is an item that can be selected in the quick pick.\n\t\t */\n\t\tDefault = 0"
                  }
                ]
              },
              {
                "name": "InputBoxValidationSeverity",
                "doc": "Impacts the behavior and appearance of the validation message.",
                "_": 1997,
                "source": "\n\n\t/**\n\t * Impacts the behavior and appearance of the validation message.\n\t */\n\texport enum InputBoxValidationSeverity {\n\t\tInfo = 1,\n\t\tWarning = 2,\n\t\tError = 3\n\t}",
                "members": [
                  {
                    "name": "Info",
                    "doc": "",
                    "value": "1",
                    "_": 1998,
                    "source": "\n\t\tInfo = 1"
                  },
                  {
                    "name": "Warning",
                    "doc": "",
                    "value": "2",
                    "_": 1999,
                    "source": "\n\t\tWarning = 2"
                  },
                  {
                    "name": "Error",
                    "doc": "",
                    "value": "3",
                    "_": 2000,
                    "source": "\n\t\tError = 3"
                  }
                ]
              },
              {
                "name": "CodeActionTriggerKind",
                "doc": "The reason why code actions were requested.",
                "_": 2382,
                "source": "\n\n\t/**\n\t * The reason why code actions were requested.\n\t */\n\texport enum CodeActionTriggerKind {\n\t\t/**\n\t\t * Code actions were explicitly requested by the user or by an extension.\n\t\t */\n\t\tInvoke = 1,\n\n\t\t/**\n\t\t * Code actions were requested automatically.\n\t\t *\n\t\t * This typically happens when current selection in a file changes, but can\n\t\t * also be triggered when file content changes.\n\t\t */\n\t\tAutomatic = 2,\n\t}",
                "members": [
                  {
                    "name": "Invoke",
                    "doc": "Code actions were explicitly requested by the user or by an extension.",
                    "value": "1",
                    "_": 2386,
                    "source": "\n\t\t/**\n\t\t * Code actions were explicitly requested by the user or by an extension.\n\t\t */\n\t\tInvoke = 1"
                  },
                  {
                    "name": "Automatic",
                    "doc": "Code actions were requested automatically.\n\n This typically happens when current selection in a file changes, but can\n also be triggered when file content changes.",
                    "value": "2",
                    "_": 2394,
                    "source": "\n\n\t\t/**\n\t\t * Code actions were requested automatically.\n\t\t *\n\t\t * This typically happens when current selection in a file changes, but can\n\t\t * also be triggered when file content changes.\n\t\t */\n\t\tAutomatic = 2"
                  }
                ]
              },
              {
                "name": "DocumentHighlightKind",
                "doc": "A document highlight kind.",
                "_": 3095,
                "source": "\n\n\t/**\n\t * A document highlight kind.\n\t */\n\texport enum DocumentHighlightKind {\n\n\t\t/**\n\t\t * A textual occurrence.\n\t\t */\n\t\tText = 0,\n\n\t\t/**\n\t\t * Read-access of a symbol, like reading a variable.\n\t\t */\n\t\tRead = 1,\n\n\t\t/**\n\t\t * Write-access of a symbol, like writing to a variable.\n\t\t */\n\t\tWrite = 2\n\t}",
                "members": [
                  {
                    "name": "Text",
                    "doc": "A textual occurrence.",
                    "value": "0",
                    "_": 3100,
                    "source": "\n\n\t\t/**\n\t\t * A textual occurrence.\n\t\t */\n\t\tText = 0"
                  },
                  {
                    "name": "Read",
                    "doc": "Read-access of a symbol, like reading a variable.",
                    "value": "1",
                    "_": 3105,
                    "source": "\n\n\t\t/**\n\t\t * Read-access of a symbol, like reading a variable.\n\t\t */\n\t\tRead = 1"
                  },
                  {
                    "name": "Write",
                    "doc": "Write-access of a symbol, like writing to a variable.",
                    "value": "2",
                    "_": 3110,
                    "source": "\n\n\t\t/**\n\t\t * Write-access of a symbol, like writing to a variable.\n\t\t */\n\t\tWrite = 2"
                  }
                ]
              },
              {
                "name": "SymbolKind",
                "doc": "A symbol kind.",
                "_": 3161,
                "source": "\n\n\t/**\n\t * A symbol kind.\n\t */\n\texport enum SymbolKind {\n\t\tFile = 0,\n\t\tModule = 1,\n\t\tNamespace = 2,\n\t\tPackage = 3,\n\t\tClass = 4,\n\t\tMethod = 5,\n\t\tProperty = 6,\n\t\tField = 7,\n\t\tConstructor = 8,\n\t\tEnum = 9,\n\t\tInterface = 10,\n\t\tFunction = 11,\n\t\tVariable = 12,\n\t\tConstant = 13,\n\t\tString = 14,\n\t\tNumber = 15,\n\t\tBoolean = 16,\n\t\tArray = 17,\n\t\tObject = 18,\n\t\tKey = 19,\n\t\tNull = 20,\n\t\tEnumMember = 21,\n\t\tStruct = 22,\n\t\tEvent = 23,\n\t\tOperator = 24,\n\t\tTypeParameter = 25\n\t}",
                "members": [
                  {
                    "name": "File",
                    "doc": "",
                    "value": "0",
                    "_": 3162,
                    "source": "\n\t\tFile = 0"
                  },
                  {
                    "name": "Module",
                    "doc": "",
                    "value": "1",
                    "_": 3163,
                    "source": "\n\t\tModule = 1"
                  },
                  {
                    "name": "Namespace",
                    "doc": "",
                    "value": "2",
                    "_": 3164,
                    "source": "\n\t\tNamespace = 2"
                  },
                  {
                    "name": "Package",
                    "doc": "",
                    "value": "3",
                    "_": 3165,
                    "source": "\n\t\tPackage = 3"
                  },
                  {
                    "name": "Class",
                    "doc": "",
                    "value": "4",
                    "_": 3166,
                    "source": "\n\t\tClass = 4"
                  },
                  {
                    "name": "Method",
                    "doc": "",
                    "value": "5",
                    "_": 3167,
                    "source": "\n\t\tMethod = 5"
                  },
                  {
                    "name": "Property",
                    "doc": "",
                    "value": "6",
                    "_": 3168,
                    "source": "\n\t\tProperty = 6"
                  },
                  {
                    "name": "Field",
                    "doc": "",
                    "value": "7",
                    "_": 3169,
                    "source": "\n\t\tField = 7"
                  },
                  {
                    "name": "Constructor",
                    "doc": "",
                    "value": "8",
                    "_": 3170,
                    "source": "\n\t\tConstructor = 8"
                  },
                  {
                    "name": "Enum",
                    "doc": "",
                    "value": "9",
                    "_": 3171,
                    "source": "\n\t\tEnum = 9"
                  },
                  {
                    "name": "Interface",
                    "doc": "",
                    "value": "10",
                    "_": 3172,
                    "source": "\n\t\tInterface = 10"
                  },
                  {
                    "name": "Function",
                    "doc": "",
                    "value": "11",
                    "_": 3173,
                    "source": "\n\t\tFunction = 11"
                  },
                  {
                    "name": "Variable",
                    "doc": "",
                    "value": "12",
                    "_": 3174,
                    "source": "\n\t\tVariable = 12"
                  },
                  {
                    "name": "Constant",
                    "doc": "",
                    "value": "13",
                    "_": 3175,
                    "source": "\n\t\tConstant = 13"
                  },
                  {
                    "name": "String",
                    "doc": "",
                    "value": "14",
                    "_": 3176,
                    "source": "\n\t\tString = 14"
                  },
                  {
                    "name": "Number",
                    "doc": "",
                    "value": "15",
                    "_": 3177,
                    "source": "\n\t\tNumber = 15"
                  },
                  {
                    "name": "Boolean",
                    "doc": "",
                    "value": "16",
                    "_": 3178,
                    "source": "\n\t\tBoolean = 16"
                  },
                  {
                    "name": "Array",
                    "doc": "",
                    "value": "17",
                    "_": 3179,
                    "source": "\n\t\tArray = 17"
                  },
                  {
                    "name": "Object",
                    "doc": "",
                    "value": "18",
                    "_": 3180,
                    "source": "\n\t\tObject = 18"
                  },
                  {
                    "name": "Key",
                    "doc": "",
                    "value": "19",
                    "_": 3181,
                    "source": "\n\t\tKey = 19"
                  },
                  {
                    "name": "Null",
                    "doc": "",
                    "value": "20",
                    "_": 3182,
                    "source": "\n\t\tNull = 20"
                  },
                  {
                    "name": "EnumMember",
                    "doc": "",
                    "value": "21",
                    "_": 3183,
                    "source": "\n\t\tEnumMember = 21"
                  },
                  {
                    "name": "Struct",
                    "doc": "",
                    "value": "22",
                    "_": 3184,
                    "source": "\n\t\tStruct = 22"
                  },
                  {
                    "name": "Event",
                    "doc": "",
                    "value": "23",
                    "_": 3185,
                    "source": "\n\t\tEvent = 23"
                  },
                  {
                    "name": "Operator",
                    "doc": "",
                    "value": "24",
                    "_": 3186,
                    "source": "\n\t\tOperator = 24"
                  },
                  {
                    "name": "TypeParameter",
                    "doc": "",
                    "value": "25",
                    "_": 3187,
                    "source": "\n\t\tTypeParameter = 25"
                  }
                ]
              },
              {
                "name": "SymbolTag",
                "doc": "Symbol tags are extra annotations that tweak the rendering of a symbol.",
                "_": 3193,
                "source": "\n\n\t/**\n\t * Symbol tags are extra annotations that tweak the rendering of a symbol.\n\t */\n\texport enum SymbolTag {\n\n\t\t/**\n\t\t * Render a symbol as obsolete, usually using a strike-out.\n\t\t */\n\t\tDeprecated = 1\n\t}",
                "members": [
                  {
                    "name": "Deprecated",
                    "doc": "Render a symbol as obsolete, usually using a strike-out.",
                    "value": "1",
                    "_": 3198,
                    "source": "\n\n\t\t/**\n\t\t * Render a symbol as obsolete, usually using a strike-out.\n\t\t */\n\t\tDeprecated = 1"
                  }
                ]
              },
              {
                "name": "SignatureHelpTriggerKind",
                "doc": "How a {@linkcode SignatureHelpProvider} was triggered.",
                "_": 4306,
                "source": "\n\n\t/**\n\t * How a {@linkcode SignatureHelpProvider} was triggered.\n\t */\n\texport enum SignatureHelpTriggerKind {\n\t\t/**\n\t\t * Signature help was invoked manually by the user or by a command.\n\t\t */\n\t\tInvoke = 1,\n\n\t\t/**\n\t\t * Signature help was triggered by a trigger character.\n\t\t */\n\t\tTriggerCharacter = 2,\n\n\t\t/**\n\t\t * Signature help was triggered by the cursor moving or by the document content changing.\n\t\t */\n\t\tContentChange = 3,\n\t}",
                "members": [
                  {
                    "name": "Invoke",
                    "doc": "Signature help was invoked manually by the user or by a command.",
                    "value": "1",
                    "_": 4310,
                    "source": "\n\t\t/**\n\t\t * Signature help was invoked manually by the user or by a command.\n\t\t */\n\t\tInvoke = 1"
                  },
                  {
                    "name": "TriggerCharacter",
                    "doc": "Signature help was triggered by a trigger character.",
                    "value": "2",
                    "_": 4315,
                    "source": "\n\n\t\t/**\n\t\t * Signature help was triggered by a trigger character.\n\t\t */\n\t\tTriggerCharacter = 2"
                  },
                  {
                    "name": "ContentChange",
                    "doc": "Signature help was triggered by the cursor moving or by the document content changing.",
                    "value": "3",
                    "_": 4320,
                    "source": "\n\n\t\t/**\n\t\t * Signature help was triggered by the cursor moving or by the document content changing.\n\t\t */\n\t\tContentChange = 3"
                  }
                ]
              },
              {
                "name": "CompletionItemKind",
                "doc": "Completion item kinds.",
                "_": 4424,
                "source": "\n\n\t/**\n\t * Completion item kinds.\n\t */\n\texport enum CompletionItemKind {\n\t\tText = 0,\n\t\tMethod = 1,\n\t\tFunction = 2,\n\t\tConstructor = 3,\n\t\tField = 4,\n\t\tVariable = 5,\n\t\tClass = 6,\n\t\tInterface = 7,\n\t\tModule = 8,\n\t\tProperty = 9,\n\t\tUnit = 10,\n\t\tValue = 11,\n\t\tEnum = 12,\n\t\tKeyword = 13,\n\t\tSnippet = 14,\n\t\tColor = 15,\n\t\tReference = 17,\n\t\tFile = 16,\n\t\tFolder = 18,\n\t\tEnumMember = 19,\n\t\tConstant = 20,\n\t\tStruct = 21,\n\t\tEvent = 22,\n\t\tOperator = 23,\n\t\tTypeParameter = 24,\n\t\tUser = 25,\n\t\tIssue = 26,\n\t}",
                "members": [
                  {
                    "name": "Text",
                    "doc": "",
                    "value": "0",
                    "_": 4425,
                    "source": "\n\t\tText = 0"
                  },
                  {
                    "name": "Method",
                    "doc": "",
                    "value": "1",
                    "_": 4426,
                    "source": "\n\t\tMethod = 1"
                  },
                  {
                    "name": "Function",
                    "doc": "",
                    "value": "2",
                    "_": 4427,
                    "source": "\n\t\tFunction = 2"
                  },
                  {
                    "name": "Constructor",
                    "doc": "",
                    "value": "3",
                    "_": 4428,
                    "source": "\n\t\tConstructor = 3"
                  },
                  {
                    "name": "Field",
                    "doc": "",
                    "value": "4",
                    "_": 4429,
                    "source": "\n\t\tField = 4"
                  },
                  {
                    "name": "Variable",
                    "doc": "",
                    "value": "5",
                    "_": 4430,
                    "source": "\n\t\tVariable = 5"
                  },
                  {
                    "name": "Class",
                    "doc": "",
                    "value": "6",
                    "_": 4431,
                    "source": "\n\t\tClass = 6"
                  },
                  {
                    "name": "Interface",
                    "doc": "",
                    "value": "7",
                    "_": 4432,
                    "source": "\n\t\tInterface = 7"
                  },
                  {
                    "name": "Module",
                    "doc": "",
                    "value": "8",
                    "_": 4433,
                    "source": "\n\t\tModule = 8"
                  },
                  {
                    "name": "Property",
                    "doc": "",
                    "value": "9",
                    "_": 4434,
                    "source": "\n\t\tProperty = 9"
                  },
                  {
                    "name": "Unit",
                    "doc": "",
                    "value": "10",
                    "_": 4435,
                    "source": "\n\t\tUnit = 10"
                  },
                  {
                    "name": "Value",
                    "doc": "",
                    "value": "11",
                    "_": 4436,
                    "source": "\n\t\tValue = 11"
                  },
                  {
                    "name": "Enum",
                    "doc": "",
                    "value": "12",
                    "_": 4437,
                    "source": "\n\t\tEnum = 12"
                  },
                  {
                    "name": "Keyword",
                    "doc": "",
                    "value": "13",
                    "_": 4438,
                    "source": "\n\t\tKeyword = 13"
                  },
                  {
                    "name": "Snippet",
                    "doc": "",
                    "value": "14",
                    "_": 4439,
                    "source": "\n\t\tSnippet = 14"
                  },
                  {
                    "name": "Color",
                    "doc": "",
                    "value": "15",
                    "_": 4440,
                    "source": "\n\t\tColor = 15"
                  },
                  {
                    "name": "Reference",
                    "doc": "",
                    "value": "17",
                    "_": 4441,
                    "source": "\n\t\tReference = 17"
                  },
                  {
                    "name": "File",
                    "doc": "",
                    "value": "16",
                    "_": 4442,
                    "source": "\n\t\tFile = 16"
                  },
                  {
                    "name": "Folder",
                    "doc": "",
                    "value": "18",
                    "_": 4443,
                    "source": "\n\t\tFolder = 18"
                  },
                  {
                    "name": "EnumMember",
                    "doc": "",
                    "value": "19",
                    "_": 4444,
                    "source": "\n\t\tEnumMember = 19"
                  },
                  {
                    "name": "Constant",
                    "doc": "",
                    "value": "20",
                    "_": 4445,
                    "source": "\n\t\tConstant = 20"
                  },
                  {
                    "name": "Struct",
                    "doc": "",
                    "value": "21",
                    "_": 4446,
                    "source": "\n\t\tStruct = 21"
                  },
                  {
                    "name": "Event",
                    "doc": "",
                    "value": "22",
                    "_": 4447,
                    "source": "\n\t\tEvent = 22"
                  },
                  {
                    "name": "Operator",
                    "doc": "",
                    "value": "23",
                    "_": 4448,
                    "source": "\n\t\tOperator = 23"
                  },
                  {
                    "name": "TypeParameter",
                    "doc": "",
                    "value": "24",
                    "_": 4449,
                    "source": "\n\t\tTypeParameter = 24"
                  },
                  {
                    "name": "User",
                    "doc": "",
                    "value": "25",
                    "_": 4450,
                    "source": "\n\t\tUser = 25"
                  },
                  {
                    "name": "Issue",
                    "doc": "",
                    "value": "26",
                    "_": 4451,
                    "source": "\n\t\tIssue = 26"
                  }
                ]
              },
              {
                "name": "CompletionItemTag",
                "doc": "Completion item tags are extra annotations that tweak the rendering of a completion\nitem.",
                "_": 4458,
                "source": "\n\n\t/**\n\t * Completion item tags are extra annotations that tweak the rendering of a completion\n\t * item.\n\t */\n\texport enum CompletionItemTag {\n\t\t/**\n\t\t * Render a completion as obsolete, usually using a strike-out.\n\t\t */\n\t\tDeprecated = 1\n\t}",
                "members": [
                  {
                    "name": "Deprecated",
                    "doc": "Render a completion as obsolete, usually using a strike-out.",
                    "value": "1",
                    "_": 4462,
                    "source": "\n\t\t/**\n\t\t * Render a completion as obsolete, usually using a strike-out.\n\t\t */\n\t\tDeprecated = 1"
                  }
                ]
              },
              {
                "name": "CompletionTriggerKind",
                "doc": "How a {@link CompletionItemProvidercompletion provider} was triggered",
                "_": 4643,
                "source": "\n\n\t/**\n\t * How a {@link CompletionItemProvider completion provider} was triggered\n\t */\n\texport enum CompletionTriggerKind {\n\t\t/**\n\t\t * Completion was triggered normally.\n\t\t */\n\t\tInvoke = 0,\n\t\t/**\n\t\t * Completion was triggered by a trigger character.\n\t\t */\n\t\tTriggerCharacter = 1,\n\t\t/**\n\t\t * Completion was re-triggered as current completion list is incomplete\n\t\t */\n\t\tTriggerForIncompleteCompletions = 2\n\t}",
                "members": [
                  {
                    "name": "Invoke",
                    "doc": "Completion was triggered normally.",
                    "value": "0",
                    "_": 4647,
                    "source": "\n\t\t/**\n\t\t * Completion was triggered normally.\n\t\t */\n\t\tInvoke = 0"
                  },
                  {
                    "name": "TriggerCharacter",
                    "doc": "Completion was triggered by a trigger character.",
                    "value": "1",
                    "_": 4651,
                    "source": "\n\t\t/**\n\t\t * Completion was triggered by a trigger character.\n\t\t */\n\t\tTriggerCharacter = 1"
                  },
                  {
                    "name": "TriggerForIncompleteCompletions",
                    "doc": "Completion was re-triggered as current completion list is incomplete",
                    "value": "2",
                    "_": 4655,
                    "source": "\n\t\t/**\n\t\t * Completion was re-triggered as current completion list is incomplete\n\t\t */\n\t\tTriggerForIncompleteCompletions = 2"
                  }
                ]
              },
              {
                "name": "InlineCompletionTriggerKind",
                "doc": "Describes how an {@link InlineCompletionItemProviderinline completion provider} was triggered.",
                "_": 4809,
                "source": "\n\n\t/**\n\t * Describes how an {@link InlineCompletionItemProvider inline completion provider} was triggered.\n\t */\n\texport enum InlineCompletionTriggerKind {\n\t\t/**\n\t\t * Completion was triggered explicitly by a user gesture.\n\t\t * Return multiple completion items to enable cycling through them.\n\t\t */\n\t\tInvoke = 0,\n\n\t\t/**\n\t\t * Completion was triggered automatically while editing.\n\t\t * It is sufficient to return a single completion item in this case.\n\t\t */\n\t\tAutomatic = 1,\n\t}",
                "members": [
                  {
                    "name": "Invoke",
                    "doc": "Completion was triggered explicitly by a user gesture.\n Return multiple completion items to enable cycling through them.",
                    "value": "0",
                    "_": 4814,
                    "source": "\n\t\t/**\n\t\t * Completion was triggered explicitly by a user gesture.\n\t\t * Return multiple completion items to enable cycling through them.\n\t\t */\n\t\tInvoke = 0"
                  },
                  {
                    "name": "Automatic",
                    "doc": "Completion was triggered automatically while editing.\n It is sufficient to return a single completion item in this case.",
                    "value": "1",
                    "_": 4820,
                    "source": "\n\n\t\t/**\n\t\t * Completion was triggered automatically while editing.\n\t\t * It is sufficient to return a single completion item in this case.\n\t\t */\n\t\tAutomatic = 1"
                  }
                ]
              },
              {
                "name": "InlayHintKind",
                "doc": "Inlay hint kinds.\n\nThe kind of an inline hint defines its appearance, e.g the corresponding foreground and background colors are being\nused.",
                "_": 5061,
                "source": "\n\n\t/**\n\t * Inlay hint kinds.\n\t *\n\t * The kind of an inline hint defines its appearance, e.g the corresponding foreground and background colors are being\n\t * used.\n\t */\n\texport enum InlayHintKind {\n\t\t/**\n\t\t * An inlay hint that for a type annotation.\n\t\t */\n\t\tType = 1,\n\t\t/**\n\t\t * An inlay hint that is for a parameter.\n\t\t */\n\t\tParameter = 2,\n\t}",
                "members": [
                  {
                    "name": "Type",
                    "doc": "An inlay hint that for a type annotation.",
                    "value": "1",
                    "_": 5065,
                    "source": "\n\t\t/**\n\t\t * An inlay hint that for a type annotation.\n\t\t */\n\t\tType = 1"
                  },
                  {
                    "name": "Parameter",
                    "doc": "An inlay hint that is for a parameter.",
                    "value": "2",
                    "_": 5069,
                    "source": "\n\t\t/**\n\t\t * An inlay hint that is for a parameter.\n\t\t */\n\t\tParameter = 2"
                  }
                ]
              },
              {
                "name": "FoldingRangeKind",
                "doc": "An enumeration of specific folding range kinds. The kind is an optional field of a {@link FoldingRange}\nand is used to distinguish specific folding ranges such as ranges originated from comments. The kind is used by commands like\n`Fold all comments` or `Fold all regions`.\nIf the kind is not set on the range, the range originated from a syntax element other than comments, imports or region markers.",
                "_": 5268,
                "source": "\n\n\t/**\n\t * An enumeration of specific folding range kinds. The kind is an optional field of a {@link FoldingRange}\n\t * and is used to distinguish specific folding ranges such as ranges originated from comments. The kind is used by commands like\n\t * `Fold all comments` or `Fold all regions`.\n\t * If the kind is not set on the range, the range originated from a syntax element other than comments, imports or region markers.\n\t */\n\texport enum FoldingRangeKind {\n\t\t/**\n\t\t * Kind for folding range representing a comment.\n\t\t */\n\t\tComment = 1,\n\t\t/**\n\t\t * Kind for folding range representing a import.\n\t\t */\n\t\tImports = 2,\n\t\t/**\n\t\t * Kind for folding range representing regions originating from folding markers like `#region` and `#endregion`.\n\t\t */\n\t\tRegion = 3\n\t}",
                "members": [
                  {
                    "name": "Comment",
                    "doc": "Kind for folding range representing a comment.",
                    "value": "1",
                    "_": 5272,
                    "source": "\n\t\t/**\n\t\t * Kind for folding range representing a comment.\n\t\t */\n\t\tComment = 1"
                  },
                  {
                    "name": "Imports",
                    "doc": "Kind for folding range representing a import.",
                    "value": "2",
                    "_": 5276,
                    "source": "\n\t\t/**\n\t\t * Kind for folding range representing a import.\n\t\t */\n\t\tImports = 2"
                  },
                  {
                    "name": "Region",
                    "doc": "Kind for folding range representing regions originating from folding markers like `#region` and `#endregion`.",
                    "value": "3",
                    "_": 5280,
                    "source": "\n\t\t/**\n\t\t * Kind for folding range representing regions originating from folding markers like `#region` and `#endregion`.\n\t\t */\n\t\tRegion = 3"
                  }
                ]
              },
              {
                "name": "IndentAction",
                "doc": "Describes what to do with the indentation when pressing Enter.",
                "_": 5726,
                "source": "\n\n\t/**\n\t * Describes what to do with the indentation when pressing Enter.\n\t */\n\texport enum IndentAction {\n\t\t/**\n\t\t * Insert new line and copy the previous line's indentation.\n\t\t */\n\t\tNone = 0,\n\t\t/**\n\t\t * Insert new line and indent once (relative to the previous line's indentation).\n\t\t */\n\t\tIndent = 1,\n\t\t/**\n\t\t * Insert two new lines:\n\t\t *  - the first one indented which will hold the cursor\n\t\t *  - the second one at the same indentation level\n\t\t */\n\t\tIndentOutdent = 2,\n\t\t/**\n\t\t * Insert new line and outdent once (relative to the previous line's indentation).\n\t\t */\n\t\tOutdent = 3\n\t}",
                "members": [
                  {
                    "name": "None",
                    "doc": "Insert new line and copy the previous line's indentation.",
                    "value": "0",
                    "_": 5730,
                    "source": "\n\t\t/**\n\t\t * Insert new line and copy the previous line's indentation.\n\t\t */\n\t\tNone = 0"
                  },
                  {
                    "name": "Indent",
                    "doc": "Insert new line and indent once (relative to the previous line's indentation).",
                    "value": "1",
                    "_": 5734,
                    "source": "\n\t\t/**\n\t\t * Insert new line and indent once (relative to the previous line's indentation).\n\t\t */\n\t\tIndent = 1"
                  },
                  {
                    "name": "IndentOutdent",
                    "doc": "Insert two new lines:\n  - the first one indented which will hold the cursor\n  - the second one at the same indentation level",
                    "value": "2",
                    "_": 5740,
                    "source": "\n\t\t/**\n\t\t * Insert two new lines:\n\t\t *  - the first one indented which will hold the cursor\n\t\t *  - the second one at the same indentation level\n\t\t */\n\t\tIndentOutdent = 2"
                  },
                  {
                    "name": "Outdent",
                    "doc": "Insert new line and outdent once (relative to the previous line's indentation).",
                    "value": "3",
                    "_": 5744,
                    "source": "\n\t\t/**\n\t\t * Insert new line and outdent once (relative to the previous line's indentation).\n\t\t */\n\t\tOutdent = 3"
                  }
                ]
              },
              {
                "name": "ConfigurationTarget",
                "doc": "The configuration target",
                "_": 5861,
                "source": "\n\n\t/**\n\t * The configuration target\n\t */\n\texport enum ConfigurationTarget {\n\t\t/**\n\t\t * Global configuration\n\t\t*/\n\t\tGlobal = 1,\n\n\t\t/**\n\t\t * Workspace configuration\n\t\t */\n\t\tWorkspace = 2,\n\n\t\t/**\n\t\t * Workspace folder configuration\n\t\t */\n\t\tWorkspaceFolder = 3\n\t}",
                "members": [
                  {
                    "name": "Global",
                    "doc": "Global configuration",
                    "value": "1",
                    "_": 5865,
                    "source": "\n\t\t/**\n\t\t * Global configuration\n\t\t*/\n\t\tGlobal = 1"
                  },
                  {
                    "name": "Workspace",
                    "doc": "Workspace configuration",
                    "value": "2",
                    "_": 5870,
                    "source": "\n\n\t\t/**\n\t\t * Workspace configuration\n\t\t */\n\t\tWorkspace = 2"
                  },
                  {
                    "name": "WorkspaceFolder",
                    "doc": "Workspace folder configuration",
                    "value": "3",
                    "_": 5875,
                    "source": "\n\n\t\t/**\n\t\t * Workspace folder configuration\n\t\t */\n\t\tWorkspaceFolder = 3"
                  }
                ]
              },
              {
                "name": "DiagnosticSeverity",
                "doc": "Represents the severity of diagnostics.",
                "_": 6104,
                "source": "\n\n\t/**\n\t * Represents the severity of diagnostics.\n\t */\n\texport enum DiagnosticSeverity {\n\n\t\t/**\n\t\t * Something not allowed by the rules of a language or other means.\n\t\t */\n\t\tError = 0,\n\n\t\t/**\n\t\t * Something suspicious but allowed.\n\t\t */\n\t\tWarning = 1,\n\n\t\t/**\n\t\t * Something to inform about but not a problem.\n\t\t */\n\t\tInformation = 2,\n\n\t\t/**\n\t\t * Something to hint to a better way of doing it, like proposing\n\t\t * a refactoring.\n\t\t */\n\t\tHint = 3\n\t}",
                "members": [
                  {
                    "name": "Error",
                    "doc": "Something not allowed by the rules of a language or other means.",
                    "value": "0",
                    "_": 6109,
                    "source": "\n\n\t\t/**\n\t\t * Something not allowed by the rules of a language or other means.\n\t\t */\n\t\tError = 0"
                  },
                  {
                    "name": "Warning",
                    "doc": "Something suspicious but allowed.",
                    "value": "1",
                    "_": 6114,
                    "source": "\n\n\t\t/**\n\t\t * Something suspicious but allowed.\n\t\t */\n\t\tWarning = 1"
                  },
                  {
                    "name": "Information",
                    "doc": "Something to inform about but not a problem.",
                    "value": "2",
                    "_": 6119,
                    "source": "\n\n\t\t/**\n\t\t * Something to inform about but not a problem.\n\t\t */\n\t\tInformation = 2"
                  },
                  {
                    "name": "Hint",
                    "doc": "Something to hint to a better way of doing it, like proposing\n a refactoring.",
                    "value": "3",
                    "_": 6125,
                    "source": "\n\n\t\t/**\n\t\t * Something to hint to a better way of doing it, like proposing\n\t\t * a refactoring.\n\t\t */\n\t\tHint = 3"
                  }
                ]
              },
              {
                "name": "DiagnosticTag",
                "doc": "Additional metadata about the type of a diagnostic.",
                "_": 6157,
                "source": "\n\n\t/**\n\t * Additional metadata about the type of a diagnostic.\n\t */\n\texport enum DiagnosticTag {\n\t\t/**\n\t\t * Unused or unnecessary code.\n\t\t *\n\t\t * Diagnostics with this tag are rendered faded out. The amount of fading\n\t\t * is controlled by the `\"editorUnnecessaryCode.opacity\"` theme color. For\n\t\t * example, `\"editorUnnecessaryCode.opacity\": \"#000000c0\"` will render the\n\t\t * code with 75% opacity. For high contrast themes, use the\n\t\t * `\"editorUnnecessaryCode.border\"` theme color to underline unnecessary code\n\t\t * instead of fading it out.\n\t\t */\n\t\tUnnecessary = 1,\n\n\t\t/**\n\t\t * Deprecated or obsolete code.\n\t\t *\n\t\t * Diagnostics with this tag are rendered with a strike through.\n\t\t */\n\t\tDeprecated = 2,\n\t}",
                "members": [
                  {
                    "name": "Unnecessary",
                    "doc": "Unused or unnecessary code.\n\n Diagnostics with this tag are rendered faded out. The amount of fading\n is controlled by the `\"editorUnnecessaryCode.opacity\"` theme color. For\n example, `\"editorUnnecessaryCode.opacity\": \"#000000c0\"` will render the\n code with 75% opacity. For high contrast themes, use the\n `\"editorUnnecessaryCode.border\"` theme color to underline unnecessary code\n instead of fading it out.",
                    "value": "1",
                    "_": 6168,
                    "source": "\n\t\t/**\n\t\t * Unused or unnecessary code.\n\t\t *\n\t\t * Diagnostics with this tag are rendered faded out. The amount of fading\n\t\t * is controlled by the `\"editorUnnecessaryCode.opacity\"` theme color. For\n\t\t * example, `\"editorUnnecessaryCode.opacity\": \"#000000c0\"` will render the\n\t\t * code with 75% opacity. For high contrast themes, use the\n\t\t * `\"editorUnnecessaryCode.border\"` theme color to underline unnecessary code\n\t\t * instead of fading it out.\n\t\t */\n\t\tUnnecessary = 1"
                  },
                  {
                    "name": "Deprecated",
                    "doc": "Deprecated or obsolete code.\n\n Diagnostics with this tag are rendered with a strike through.",
                    "value": "2",
                    "_": 6175,
                    "source": "\n\n\t\t/**\n\t\t * Deprecated or obsolete code.\n\t\t *\n\t\t * Diagnostics with this tag are rendered with a strike through.\n\t\t */\n\t\tDeprecated = 2"
                  }
                ]
              },
              {
                "name": "LanguageStatusSeverity",
                "doc": "Represents the severity of a language status item.",
                "_": 6331,
                "source": "\n\n\t/**\n\t * Represents the severity of a language status item.\n\t */\n\texport enum LanguageStatusSeverity {\n\t\tInformation = 0,\n\t\tWarning = 1,\n\t\tError = 2\n\t}",
                "members": [
                  {
                    "name": "Information",
                    "doc": "",
                    "value": "0",
                    "_": 6332,
                    "source": "\n\t\tInformation = 0"
                  },
                  {
                    "name": "Warning",
                    "doc": "",
                    "value": "1",
                    "_": 6333,
                    "source": "\n\t\tWarning = 1"
                  },
                  {
                    "name": "Error",
                    "doc": "",
                    "value": "2",
                    "_": 6334,
                    "source": "\n\t\tError = 2"
                  }
                ]
              },
              {
                "name": "ViewColumn",
                "doc": "Denotes a location of an editor in the window. Editors can be arranged in a grid\nand each column represents one editor location in that grid by counting the editors\nin order of their appearance.",
                "_": 6409,
                "source": "\n\n\t/**\n\t * Denotes a location of an editor in the window. Editors can be arranged in a grid\n\t * and each column represents one editor location in that grid by counting the editors\n\t * in order of their appearance.\n\t */\n\texport enum ViewColumn {\n\t\t/**\n\t\t * A *symbolic* editor column representing the currently active column. This value\n\t\t * can be used when opening editors, but the *resolved* {@link TextEditor.viewColumn viewColumn}-value\n\t\t * of editors will always be `One`, `Two`, `Three`,... or `undefined` but never `Active`.\n\t\t */\n\t\tActive = -1,\n\t\t/**\n\t\t * A *symbolic* editor column representing the column to the side of the active one. This value\n\t\t * can be used when opening editors, but the *resolved* {@link TextEditor.viewColumn viewColumn}-value\n\t\t * of editors will always be `One`, `Two`, `Three`,... or `undefined` but never `Beside`.\n\t\t */\n\t\tBeside = -2,\n\t\t/**\n\t\t * The first editor column.\n\t\t */\n\t\tOne = 1,\n\t\t/**\n\t\t * The second editor column.\n\t\t */\n\t\tTwo = 2,\n\t\t/**\n\t\t * The third editor column.\n\t\t */\n\t\tThree = 3,\n\t\t/**\n\t\t * The fourth editor column.\n\t\t */\n\t\tFour = 4,\n\t\t/**\n\t\t * The fifth editor column.\n\t\t */\n\t\tFive = 5,\n\t\t/**\n\t\t * The sixth editor column.\n\t\t */\n\t\tSix = 6,\n\t\t/**\n\t\t * The seventh editor column.\n\t\t */\n\t\tSeven = 7,\n\t\t/**\n\t\t * The eighth editor column.\n\t\t */\n\t\tEight = 8,\n\t\t/**\n\t\t * The ninth editor column.\n\t\t */\n\t\tNine = 9\n\t}",
                "members": [
                  {
                    "name": "Active",
                    "doc": "A *symbolic* editor column representing the currently active column. This value\n can be used when opening editors, but the *resolved* {@link TextEditor.viewColumn viewColumn}-value\n of editors will always be `One`, `Two`, `Three`,... or `undefined` but never `Active`.",
                    "value": "-1",
                    "_": 6415,
                    "source": "\n\t\t/**\n\t\t * A *symbolic* editor column representing the currently active column. This value\n\t\t * can be used when opening editors, but the *resolved* {@link TextEditor.viewColumn viewColumn}-value\n\t\t * of editors will always be `One`, `Two`, `Three`,... or `undefined` but never `Active`.\n\t\t */\n\t\tActive = -1"
                  },
                  {
                    "name": "Beside",
                    "doc": "A *symbolic* editor column representing the column to the side of the active one. This value\n can be used when opening editors, but the *resolved* {@link TextEditor.viewColumn viewColumn}-value\n of editors will always be `One`, `Two`, `Three`,... or `undefined` but never `Beside`.",
                    "value": "-2",
                    "_": 6421,
                    "source": "\n\t\t/**\n\t\t * A *symbolic* editor column representing the column to the side of the active one. This value\n\t\t * can be used when opening editors, but the *resolved* {@link TextEditor.viewColumn viewColumn}-value\n\t\t * of editors will always be `One`, `Two`, `Three`,... or `undefined` but never `Beside`.\n\t\t */\n\t\tBeside = -2"
                  },
                  {
                    "name": "One",
                    "doc": "The first editor column.",
                    "value": "1",
                    "_": 6425,
                    "source": "\n\t\t/**\n\t\t * The first editor column.\n\t\t */\n\t\tOne = 1"
                  },
                  {
                    "name": "Two",
                    "doc": "The second editor column.",
                    "value": "2",
                    "_": 6429,
                    "source": "\n\t\t/**\n\t\t * The second editor column.\n\t\t */\n\t\tTwo = 2"
                  },
                  {
                    "name": "Three",
                    "doc": "The third editor column.",
                    "value": "3",
                    "_": 6433,
                    "source": "\n\t\t/**\n\t\t * The third editor column.\n\t\t */\n\t\tThree = 3"
                  },
                  {
                    "name": "Four",
                    "doc": "The fourth editor column.",
                    "value": "4",
                    "_": 6437,
                    "source": "\n\t\t/**\n\t\t * The fourth editor column.\n\t\t */\n\t\tFour = 4"
                  },
                  {
                    "name": "Five",
                    "doc": "The fifth editor column.",
                    "value": "5",
                    "_": 6441,
                    "source": "\n\t\t/**\n\t\t * The fifth editor column.\n\t\t */\n\t\tFive = 5"
                  },
                  {
                    "name": "Six",
                    "doc": "The sixth editor column.",
                    "value": "6",
                    "_": 6445,
                    "source": "\n\t\t/**\n\t\t * The sixth editor column.\n\t\t */\n\t\tSix = 6"
                  },
                  {
                    "name": "Seven",
                    "doc": "The seventh editor column.",
                    "value": "7",
                    "_": 6449,
                    "source": "\n\t\t/**\n\t\t * The seventh editor column.\n\t\t */\n\t\tSeven = 7"
                  },
                  {
                    "name": "Eight",
                    "doc": "The eighth editor column.",
                    "value": "8",
                    "_": 6453,
                    "source": "\n\t\t/**\n\t\t * The eighth editor column.\n\t\t */\n\t\tEight = 8"
                  },
                  {
                    "name": "Nine",
                    "doc": "The ninth editor column.",
                    "value": "9",
                    "_": 6457,
                    "source": "\n\t\t/**\n\t\t * The ninth editor column.\n\t\t */\n\t\tNine = 9"
                  }
                ]
              },
              {
                "name": "StatusBarAlignment",
                "doc": "Represents the alignment of status bar items.",
                "_": 6613,
                "source": "\n\n\t/**\n\t * Represents the alignment of status bar items.\n\t */\n\texport enum StatusBarAlignment {\n\n\t\t/**\n\t\t * Aligned to the left side.\n\t\t */\n\t\tLeft = 1,\n\n\t\t/**\n\t\t * Aligned to the right side.\n\t\t */\n\t\tRight = 2\n\t}",
                "members": [
                  {
                    "name": "Left",
                    "doc": "Aligned to the left side.",
                    "value": "1",
                    "_": 6618,
                    "source": "\n\n\t\t/**\n\t\t * Aligned to the left side.\n\t\t */\n\t\tLeft = 1"
                  },
                  {
                    "name": "Right",
                    "doc": "Aligned to the right side.",
                    "value": "2",
                    "_": 6623,
                    "source": "\n\n\t\t/**\n\t\t * Aligned to the right side.\n\t\t */\n\t\tRight = 2"
                  }
                ]
              },
              {
                "name": "TerminalLocation",
                "doc": "The location of the terminal.",
                "_": 6811,
                "source": "\n\n\t/**\n\t * The location of the terminal.\n\t */\n\texport enum TerminalLocation {\n\t\t/**\n\t\t * In the terminal view\n\t\t */\n\t\tPanel = 1,\n\t\t/**\n\t\t * In the editor area\n\t\t */\n\t\tEditor = 2,\n\t}",
                "members": [
                  {
                    "name": "Panel",
                    "doc": "In the terminal view",
                    "value": "1",
                    "_": 6815,
                    "source": "\n\t\t/**\n\t\t * In the terminal view\n\t\t */\n\t\tPanel = 1"
                  },
                  {
                    "name": "Editor",
                    "doc": "In the editor area",
                    "value": "2",
                    "_": 6819,
                    "source": "\n\t\t/**\n\t\t * In the editor area\n\t\t */\n\t\tEditor = 2"
                  }
                ]
              },
              {
                "name": "ExtensionKind",
                "doc": "In a remote window the extension kind describes if an extension\nruns where the UI (window) runs or if an extension runs remotely.",
                "_": 7044,
                "source": "\n\n\n\t/**\n\t * In a remote window the extension kind describes if an extension\n\t * runs where the UI (window) runs or if an extension runs remotely.\n\t */\n\texport enum ExtensionKind {\n\n\t\t/**\n\t\t * Extension runs where the UI runs.\n\t\t */\n\t\tUI = 1,\n\n\t\t/**\n\t\t * Extension runs where the remote extension host runs.\n\t\t */\n\t\tWorkspace = 2\n\t}",
                "members": [
                  {
                    "name": "UI",
                    "doc": "Extension runs where the UI runs.",
                    "value": "1",
                    "_": 7049,
                    "source": "\n\n\t\t/**\n\t\t * Extension runs where the UI runs.\n\t\t */\n\t\tUI = 1"
                  },
                  {
                    "name": "Workspace",
                    "doc": "Extension runs where the remote extension host runs.",
                    "value": "2",
                    "_": 7054,
                    "source": "\n\n\t\t/**\n\t\t * Extension runs where the remote extension host runs.\n\t\t */\n\t\tWorkspace = 2"
                  }
                ]
              },
              {
                "name": "ExtensionMode",
                "doc": "The ExtensionMode is provided on the `ExtensionContext` and indicates the\nmode the specific extension is running in.",
                "_": 7117,
                "source": "\n\n\t/**\n\t * The ExtensionMode is provided on the `ExtensionContext` and indicates the\n\t * mode the specific extension is running in.\n\t */\n\texport enum ExtensionMode {\n\t\t/**\n\t\t * The extension is installed normally (for example, from the marketplace\n\t\t * or VSIX) in the editor.\n\t\t */\n\t\tProduction = 1,\n\n\t\t/**\n\t\t * The extension is running from an `--extensionDevelopmentPath` provided\n\t\t * when launching the editor.\n\t\t */\n\t\tDevelopment = 2,\n\n\t\t/**\n\t\t * The extension is running from an `--extensionTestsPath` and\n\t\t * the extension host is running unit tests.\n\t\t */\n\t\tTest = 3,\n\t}",
                "members": [
                  {
                    "name": "Production",
                    "doc": "The extension is installed normally (for example, from the marketplace\n or VSIX) in the editor.",
                    "value": "1",
                    "_": 7122,
                    "source": "\n\t\t/**\n\t\t * The extension is installed normally (for example, from the marketplace\n\t\t * or VSIX) in the editor.\n\t\t */\n\t\tProduction = 1"
                  },
                  {
                    "name": "Development",
                    "doc": "The extension is running from an `--extensionDevelopmentPath` provided\n when launching the editor.",
                    "value": "2",
                    "_": 7128,
                    "source": "\n\n\t\t/**\n\t\t * The extension is running from an `--extensionDevelopmentPath` provided\n\t\t * when launching the editor.\n\t\t */\n\t\tDevelopment = 2"
                  },
                  {
                    "name": "Test",
                    "doc": "The extension is running from an `--extensionTestsPath` and\n the extension host is running unit tests.",
                    "value": "3",
                    "_": 7134,
                    "source": "\n\n\t\t/**\n\t\t * The extension is running from an `--extensionTestsPath` and\n\t\t * the extension host is running unit tests.\n\t\t */\n\t\tTest = 3"
                  }
                ]
              },
              {
                "name": "ColorThemeKind",
                "doc": "Represents a color theme kind.",
                "_": 7384,
                "source": "\n\n\t/**\n\t * Represents a color theme kind.\n\t */\n\texport enum ColorThemeKind {\n\t\tLight = 1,\n\t\tDark = 2,\n\t\tHighContrast = 3,\n\t\tHighContrastLight = 4\n\t}",
                "members": [
                  {
                    "name": "Light",
                    "doc": "",
                    "value": "1",
                    "_": 7385,
                    "source": "\n\t\tLight = 1"
                  },
                  {
                    "name": "Dark",
                    "doc": "",
                    "value": "2",
                    "_": 7386,
                    "source": "\n\t\tDark = 2"
                  },
                  {
                    "name": "HighContrast",
                    "doc": "",
                    "value": "3",
                    "_": 7387,
                    "source": "\n\t\tHighContrast = 3"
                  },
                  {
                    "name": "HighContrastLight",
                    "doc": "",
                    "value": "4",
                    "_": 7388,
                    "source": "\n\t\tHighContrastLight = 4"
                  }
                ]
              },
              {
                "name": "TaskRevealKind",
                "doc": "Controls the behaviour of the terminal's visibility.",
                "_": 7405,
                "source": "\n\n\t/**\n\t * Controls the behaviour of the terminal's visibility.\n\t */\n\texport enum TaskRevealKind {\n\t\t/**\n\t\t * Always brings the terminal to front if the task is executed.\n\t\t */\n\t\tAlways = 1,\n\n\t\t/**\n\t\t * Only brings the terminal to front if a problem is detected executing the task\n\t\t * (e.g. the task couldn't be started because).\n\t\t */\n\t\tSilent = 2,\n\n\t\t/**\n\t\t * The terminal never comes to front when the task is executed.\n\t\t */\n\t\tNever = 3\n\t}",
                "members": [
                  {
                    "name": "Always",
                    "doc": "Always brings the terminal to front if the task is executed.",
                    "value": "1",
                    "_": 7409,
                    "source": "\n\t\t/**\n\t\t * Always brings the terminal to front if the task is executed.\n\t\t */\n\t\tAlways = 1"
                  },
                  {
                    "name": "Silent",
                    "doc": "Only brings the terminal to front if a problem is detected executing the task\n (e.g. the task couldn't be started because).",
                    "value": "2",
                    "_": 7415,
                    "source": "\n\n\t\t/**\n\t\t * Only brings the terminal to front if a problem is detected executing the task\n\t\t * (e.g. the task couldn't be started because).\n\t\t */\n\t\tSilent = 2"
                  },
                  {
                    "name": "Never",
                    "doc": "The terminal never comes to front when the task is executed.",
                    "value": "3",
                    "_": 7420,
                    "source": "\n\n\t\t/**\n\t\t * The terminal never comes to front when the task is executed.\n\t\t */\n\t\tNever = 3"
                  }
                ]
              },
              {
                "name": "TaskPanelKind",
                "doc": "Controls how the task channel is used between tasks",
                "_": 7426,
                "source": "\n\n\t/**\n\t * Controls how the task channel is used between tasks\n\t */\n\texport enum TaskPanelKind {\n\n\t\t/**\n\t\t * Shares a panel with other tasks. This is the default.\n\t\t */\n\t\tShared = 1,\n\n\t\t/**\n\t\t * Uses a dedicated panel for this tasks. The panel is not\n\t\t * shared with other tasks.\n\t\t */\n\t\tDedicated = 2,\n\n\t\t/**\n\t\t * Creates a new panel whenever this task is executed.\n\t\t */\n\t\tNew = 3\n\t}",
                "members": [
                  {
                    "name": "Shared",
                    "doc": "Shares a panel with other tasks. This is the default.",
                    "value": "1",
                    "_": 7431,
                    "source": "\n\n\t\t/**\n\t\t * Shares a panel with other tasks. This is the default.\n\t\t */\n\t\tShared = 1"
                  },
                  {
                    "name": "Dedicated",
                    "doc": "Uses a dedicated panel for this tasks. The panel is not\n shared with other tasks.",
                    "value": "2",
                    "_": 7437,
                    "source": "\n\n\t\t/**\n\t\t * Uses a dedicated panel for this tasks. The panel is not\n\t\t * shared with other tasks.\n\t\t */\n\t\tDedicated = 2"
                  },
                  {
                    "name": "New",
                    "doc": "Creates a new panel whenever this task is executed.",
                    "value": "3",
                    "_": 7442,
                    "source": "\n\n\t\t/**\n\t\t * Creates a new panel whenever this task is executed.\n\t\t */\n\t\tNew = 3"
                  }
                ]
              },
              {
                "name": "ShellQuoting",
                "doc": "Defines how an argument should be quoted if it contains\nspaces or unsupported characters.",
                "_": 7687,
                "source": "\n\n\t/**\n\t * Defines how an argument should be quoted if it contains\n\t * spaces or unsupported characters.\n\t */\n\texport enum ShellQuoting {\n\n\t\t/**\n\t\t * Character escaping should be used. This for example\n\t\t * uses \\ on bash and ` on PowerShell.\n\t\t */\n\t\tEscape = 1,\n\n\t\t/**\n\t\t * Strong string quoting should be used. This for example\n\t\t * uses \" for Windows cmd and ' for bash and PowerShell.\n\t\t * Strong quoting treats arguments as literal strings.\n\t\t * Under PowerShell echo 'The value is $(2 * 3)' will\n\t\t * print `The value is $(2 * 3)`\n\t\t */\n\t\tStrong = 2,\n\n\t\t/**\n\t\t * Weak string quoting should be used. This for example\n\t\t * uses \" for Windows cmd, bash and PowerShell. Weak quoting\n\t\t * still performs some kind of evaluation inside the quoted\n\t\t * string.  Under PowerShell echo \"The value is $(2 * 3)\"\n\t\t * will print `The value is 6`\n\t\t */\n\t\tWeak = 3\n\t}",
                "members": [
                  {
                    "name": "Escape",
                    "doc": "Character escaping should be used. This for example\n uses \\ on bash and ` on PowerShell.",
                    "value": "1",
                    "_": 7693,
                    "source": "\n\n\t\t/**\n\t\t * Character escaping should be used. This for example\n\t\t * uses \\ on bash and ` on PowerShell.\n\t\t */\n\t\tEscape = 1"
                  },
                  {
                    "name": "Strong",
                    "doc": "Strong string quoting should be used. This for example\n uses \" for Windows cmd and ' for bash and PowerShell.\n Strong quoting treats arguments as literal strings.\n Under PowerShell echo 'The value is $(2 * 3)' will\n print `The value is $(2 * 3)`",
                    "value": "2",
                    "_": 7702,
                    "source": "\n\n\t\t/**\n\t\t * Strong string quoting should be used. This for example\n\t\t * uses \" for Windows cmd and ' for bash and PowerShell.\n\t\t * Strong quoting treats arguments as literal strings.\n\t\t * Under PowerShell echo 'The value is $(2 * 3)' will\n\t\t * print `The value is $(2 * 3)`\n\t\t */\n\t\tStrong = 2"
                  },
                  {
                    "name": "Weak",
                    "doc": "Weak string quoting should be used. This for example\n uses \" for Windows cmd, bash and PowerShell. Weak quoting\n still performs some kind of evaluation inside the quoted\n string.  Under PowerShell echo \"The value is $(2 * 3)\"\n will print `The value is 6`",
                    "value": "3",
                    "_": 7711,
                    "source": "\n\n\t\t/**\n\t\t * Weak string quoting should be used. This for example\n\t\t * uses \" for Windows cmd, bash and PowerShell. Weak quoting\n\t\t * still performs some kind of evaluation inside the quoted\n\t\t * string.  Under PowerShell echo \"The value is $(2 * 3)\"\n\t\t * will print `The value is 6`\n\t\t */\n\t\tWeak = 3"
                  }
                ]
              },
              {
                "name": "TaskScope",
                "doc": "The scope of a task.",
                "_": 7791,
                "source": "\n\n\t/**\n\t * The scope of a task.\n\t */\n\texport enum TaskScope {\n\t\t/**\n\t\t * The task is a global task. Global tasks are currently not supported.\n\t\t */\n\t\tGlobal = 1,\n\n\t\t/**\n\t\t * The task is a workspace task\n\t\t */\n\t\tWorkspace = 2\n\t}",
                "members": [
                  {
                    "name": "Global",
                    "doc": "The task is a global task. Global tasks are currently not supported.",
                    "value": "1",
                    "_": 7795,
                    "source": "\n\t\t/**\n\t\t * The task is a global task. Global tasks are currently not supported.\n\t\t */\n\t\tGlobal = 1"
                  },
                  {
                    "name": "Workspace",
                    "doc": "The task is a workspace task",
                    "value": "2",
                    "_": 7800,
                    "source": "\n\n\t\t/**\n\t\t * The task is a workspace task\n\t\t */\n\t\tWorkspace = 2"
                  }
                ]
              },
              {
                "name": "FileType",
                "doc": "Enumeration of file types. The types `File` and `Directory` can also be\na symbolic links, in that case use `FileType.File | FileType.SymbolicLink` and\n`FileType.Directory | FileType.SymbolicLink`.",
                "_": 8101,
                "source": "\n\n\t/**\n\t * Enumeration of file types. The types `File` and `Directory` can also be\n\t * a symbolic links, in that case use `FileType.File | FileType.SymbolicLink` and\n\t * `FileType.Directory | FileType.SymbolicLink`.\n\t */\n\texport enum FileType {\n\t\t/**\n\t\t * The file type is unknown.\n\t\t */\n\t\tUnknown = 0,\n\t\t/**\n\t\t * A regular file.\n\t\t */\n\t\tFile = 1,\n\t\t/**\n\t\t * A directory.\n\t\t */\n\t\tDirectory = 2,\n\t\t/**\n\t\t * A symbolic link to a file.\n\t\t */\n\t\tSymbolicLink = 64\n\t}",
                "members": [
                  {
                    "name": "Unknown",
                    "doc": "The file type is unknown.",
                    "value": "0",
                    "_": 8105,
                    "source": "\n\t\t/**\n\t\t * The file type is unknown.\n\t\t */\n\t\tUnknown = 0"
                  },
                  {
                    "name": "File",
                    "doc": "A regular file.",
                    "value": "1",
                    "_": 8109,
                    "source": "\n\t\t/**\n\t\t * A regular file.\n\t\t */\n\t\tFile = 1"
                  },
                  {
                    "name": "Directory",
                    "doc": "A directory.",
                    "value": "2",
                    "_": 8113,
                    "source": "\n\t\t/**\n\t\t * A directory.\n\t\t */\n\t\tDirectory = 2"
                  },
                  {
                    "name": "SymbolicLink",
                    "doc": "A symbolic link to a file.",
                    "value": "64",
                    "_": 8117,
                    "source": "\n\t\t/**\n\t\t * A symbolic link to a file.\n\t\t */\n\t\tSymbolicLink = 64"
                  }
                ]
              },
              {
                "name": "FilePermission",
                "doc": "",
                "_": 8120,
                "source": "\n\n\texport enum FilePermission {\n\t\t/**\n\t\t * The file is readonly.\n\t\t *\n\t\t * *Note:* All `FileStat` from a `FileSystemProvider` that is registered with\n\t\t * the option `isReadonly: true` will be implicitly handled as if `FilePermission.Readonly`\n\t\t * is set. As a consequence, it is not possible to have a readonly file system provider\n\t\t * registered where some `FileStat` are not readonly.\n\t\t */\n\t\tReadonly = 1\n\t}",
                "members": [
                  {
                    "name": "Readonly",
                    "doc": "The file is readonly.\n\n *Note:* All `FileStat` from a `FileSystemProvider` that is registered with\n the option `isReadonly: true` will be implicitly handled as if `FilePermission.Readonly`\n is set. As a consequence, it is not possible to have a readonly file system provider\n registered where some `FileStat` are not readonly.",
                    "value": "1",
                    "_": 8129,
                    "source": "\n\t\t/**\n\t\t * The file is readonly.\n\t\t *\n\t\t * *Note:* All `FileStat` from a `FileSystemProvider` that is registered with\n\t\t * the option `isReadonly: true` will be implicitly handled as if `FilePermission.Readonly`\n\t\t * is set. As a consequence, it is not possible to have a readonly file system provider\n\t\t * registered where some `FileStat` are not readonly.\n\t\t */\n\t\tReadonly = 1"
                  }
                ]
              },
              {
                "name": "FileChangeType",
                "doc": "Enumeration of file change types.",
                "_": 8236,
                "source": "\n\n\t/**\n\t * Enumeration of file change types.\n\t */\n\texport enum FileChangeType {\n\n\t\t/**\n\t\t * The contents or metadata of a file have changed.\n\t\t */\n\t\tChanged = 1,\n\n\t\t/**\n\t\t * A file has been created.\n\t\t */\n\t\tCreated = 2,\n\n\t\t/**\n\t\t * A file has been deleted.\n\t\t */\n\t\tDeleted = 3,\n\t}",
                "members": [
                  {
                    "name": "Changed",
                    "doc": "The contents or metadata of a file have changed.",
                    "value": "1",
                    "_": 8241,
                    "source": "\n\n\t\t/**\n\t\t * The contents or metadata of a file have changed.\n\t\t */\n\t\tChanged = 1"
                  },
                  {
                    "name": "Created",
                    "doc": "A file has been created.",
                    "value": "2",
                    "_": 8246,
                    "source": "\n\n\t\t/**\n\t\t * A file has been created.\n\t\t */\n\t\tCreated = 2"
                  },
                  {
                    "name": "Deleted",
                    "doc": "A file has been deleted.",
                    "value": "3",
                    "_": 8251,
                    "source": "\n\n\t\t/**\n\t\t * A file has been deleted.\n\t\t */\n\t\tDeleted = 3"
                  }
                ]
              },
              {
                "name": "UIKind",
                "doc": "Possible kinds of UI that can use extensions.",
                "_": 9312,
                "source": "\n\n\t/**\n\t * Possible kinds of UI that can use extensions.\n\t */\n\texport enum UIKind {\n\n\t\t/**\n\t\t * Extensions are accessed from a desktop application.\n\t\t */\n\t\tDesktop = 1,\n\n\t\t/**\n\t\t * Extensions are accessed from a web browser.\n\t\t */\n\t\tWeb = 2\n\t}",
                "members": [
                  {
                    "name": "Desktop",
                    "doc": "Extensions are accessed from a desktop application.",
                    "value": "1",
                    "_": 9317,
                    "source": "\n\n\t\t/**\n\t\t * Extensions are accessed from a desktop application.\n\t\t */\n\t\tDesktop = 1"
                  },
                  {
                    "name": "Web",
                    "doc": "Extensions are accessed from a web browser.",
                    "value": "2",
                    "_": 9322,
                    "source": "\n\n\t\t/**\n\t\t * Extensions are accessed from a web browser.\n\t\t */\n\t\tWeb = 2"
                  }
                ]
              },
              {
                "name": "LogLevel",
                "doc": "Log levels",
                "_": 9328,
                "source": "\n\n\t/**\n\t * Log levels\n\t */\n\texport enum LogLevel {\n\n\t\t/**\n\t\t * No messages are logged with this level.\n\t\t */\n\t\tOff = 0,\n\n\t\t/**\n\t\t * All messages are logged with this level.\n\t\t */\n\t\tTrace = 1,\n\n\t\t/**\n\t\t * Messages with debug and higher log level are logged with this level.\n\t\t */\n\t\tDebug = 2,\n\n\t\t/**\n\t\t * Messages with info and higher log level are logged with this level.\n\t\t */\n\t\tInfo = 3,\n\n\t\t/**\n\t\t * Messages with warning and higher log level are logged with this level.\n\t\t */\n\t\tWarning = 4,\n\n\t\t/**\n\t\t * Only error messages are logged with this level.\n\t\t */\n\t\tError = 5\n\t}",
                "members": [
                  {
                    "name": "Off",
                    "doc": "No messages are logged with this level.",
                    "value": "0",
                    "_": 9333,
                    "source": "\n\n\t\t/**\n\t\t * No messages are logged with this level.\n\t\t */\n\t\tOff = 0"
                  },
                  {
                    "name": "Trace",
                    "doc": "All messages are logged with this level.",
                    "value": "1",
                    "_": 9338,
                    "source": "\n\n\t\t/**\n\t\t * All messages are logged with this level.\n\t\t */\n\t\tTrace = 1"
                  },
                  {
                    "name": "Debug",
                    "doc": "Messages with debug and higher log level are logged with this level.",
                    "value": "2",
                    "_": 9343,
                    "source": "\n\n\t\t/**\n\t\t * Messages with debug and higher log level are logged with this level.\n\t\t */\n\t\tDebug = 2"
                  },
                  {
                    "name": "Info",
                    "doc": "Messages with info and higher log level are logged with this level.",
                    "value": "3",
                    "_": 9348,
                    "source": "\n\n\t\t/**\n\t\t * Messages with info and higher log level are logged with this level.\n\t\t */\n\t\tInfo = 3"
                  },
                  {
                    "name": "Warning",
                    "doc": "Messages with warning and higher log level are logged with this level.",
                    "value": "4",
                    "_": 9353,
                    "source": "\n\n\t\t/**\n\t\t * Messages with warning and higher log level are logged with this level.\n\t\t */\n\t\tWarning = 4"
                  },
                  {
                    "name": "Error",
                    "doc": "Only error messages are logged with this level.",
                    "value": "5",
                    "_": 9358,
                    "source": "\n\n\t\t/**\n\t\t * Only error messages are logged with this level.\n\t\t */\n\t\tError = 5"
                  }
                ]
              },
              {
                "name": "TreeItemCollapsibleState",
                "doc": "Collapsible state of the tree item",
                "_": 10938,
                "source": "\n\n\t/**\n\t * Collapsible state of the tree item\n\t */\n\texport enum TreeItemCollapsibleState {\n\t\t/**\n\t\t * Determines an item can be neither collapsed nor expanded. Implies it has no children.\n\t\t */\n\t\tNone = 0,\n\t\t/**\n\t\t * Determines an item is collapsed\n\t\t */\n\t\tCollapsed = 1,\n\t\t/**\n\t\t * Determines an item is expanded\n\t\t */\n\t\tExpanded = 2\n\t}",
                "members": [
                  {
                    "name": "None",
                    "doc": "Determines an item can be neither collapsed nor expanded. Implies it has no children.",
                    "value": "0",
                    "_": 10942,
                    "source": "\n\t\t/**\n\t\t * Determines an item can be neither collapsed nor expanded. Implies it has no children.\n\t\t */\n\t\tNone = 0"
                  },
                  {
                    "name": "Collapsed",
                    "doc": "Determines an item is collapsed",
                    "value": "1",
                    "_": 10946,
                    "source": "\n\t\t/**\n\t\t * Determines an item is collapsed\n\t\t */\n\t\tCollapsed = 1"
                  },
                  {
                    "name": "Expanded",
                    "doc": "Determines an item is expanded",
                    "value": "2",
                    "_": 10950,
                    "source": "\n\t\t/**\n\t\t * Determines an item is expanded\n\t\t */\n\t\tExpanded = 2"
                  }
                ]
              },
              {
                "name": "TreeItemCheckboxState",
                "doc": "Checkbox state of the tree item",
                "_": 10973,
                "source": "\n\n\t/**\n\t* Checkbox state of the tree item\n\t*/\n\texport enum TreeItemCheckboxState {\n\t\t/**\n\t\t * Determines an item is unchecked\n\t\t */\n\t\tUnchecked = 0,\n\t\t/**\n\t\t * Determines an item is checked\n\t\t */\n\t\tChecked = 1\n\t}",
                "members": [
                  {
                    "name": "Unchecked",
                    "doc": "Determines an item is unchecked",
                    "value": "0",
                    "_": 10977,
                    "source": "\n\t\t/**\n\t\t * Determines an item is unchecked\n\t\t */\n\t\tUnchecked = 0"
                  },
                  {
                    "name": "Checked",
                    "doc": "Determines an item is checked",
                    "value": "1",
                    "_": 10981,
                    "source": "\n\t\t/**\n\t\t * Determines an item is checked\n\t\t */\n\t\tChecked = 1"
                  }
                ]
              },
              {
                "name": "TerminalExitReason",
                "doc": "Terminal exit reason kind.",
                "_": 11303,
                "source": "\n\n\t/**\n\t * Terminal exit reason kind.\n\t */\n\texport enum TerminalExitReason {\n\t\t/**\n\t\t * Unknown reason.\n\t\t */\n\t\tUnknown = 0,\n\n\t\t/**\n\t\t * The window closed/reloaded.\n\t\t */\n\t\tShutdown = 1,\n\n\t\t/**\n\t\t * The shell process exited.\n\t\t */\n\t\tProcess = 2,\n\n\t\t/**\n\t\t * The user closed the terminal.\n\t\t */\n\t\tUser = 3,\n\n\t\t/**\n\t\t * An extension disposed the terminal.\n\t\t */\n\t\tExtension = 4,\n\t}",
                "members": [
                  {
                    "name": "Unknown",
                    "doc": "Unknown reason.",
                    "value": "0",
                    "_": 11307,
                    "source": "\n\t\t/**\n\t\t * Unknown reason.\n\t\t */\n\t\tUnknown = 0"
                  },
                  {
                    "name": "Shutdown",
                    "doc": "The window closed/reloaded.",
                    "value": "1",
                    "_": 11312,
                    "source": "\n\n\t\t/**\n\t\t * The window closed/reloaded.\n\t\t */\n\t\tShutdown = 1"
                  },
                  {
                    "name": "Process",
                    "doc": "The shell process exited.",
                    "value": "2",
                    "_": 11317,
                    "source": "\n\n\t\t/**\n\t\t * The shell process exited.\n\t\t */\n\t\tProcess = 2"
                  },
                  {
                    "name": "User",
                    "doc": "The user closed the terminal.",
                    "value": "3",
                    "_": 11322,
                    "source": "\n\n\t\t/**\n\t\t * The user closed the terminal.\n\t\t */\n\t\tUser = 3"
                  },
                  {
                    "name": "Extension",
                    "doc": "An extension disposed the terminal.",
                    "value": "4",
                    "_": 11327,
                    "source": "\n\n\t\t/**\n\t\t * An extension disposed the terminal.\n\t\t */\n\t\tExtension = 4"
                  }
                ]
              },
              {
                "name": "EnvironmentVariableMutatorType",
                "doc": "A type of mutation that can be applied to an environment variable.",
                "_": 11333,
                "source": "\n\n\t/**\n\t * A type of mutation that can be applied to an environment variable.\n\t */\n\texport enum EnvironmentVariableMutatorType {\n\t\t/**\n\t\t * Replace the variable's existing value.\n\t\t */\n\t\tReplace = 1,\n\t\t/**\n\t\t * Append to the end of the variable's existing value.\n\t\t */\n\t\tAppend = 2,\n\t\t/**\n\t\t * Prepend to the start of the variable's existing value.\n\t\t */\n\t\tPrepend = 3\n\t}",
                "members": [
                  {
                    "name": "Replace",
                    "doc": "Replace the variable's existing value.",
                    "value": "1",
                    "_": 11337,
                    "source": "\n\t\t/**\n\t\t * Replace the variable's existing value.\n\t\t */\n\t\tReplace = 1"
                  },
                  {
                    "name": "Append",
                    "doc": "Append to the end of the variable's existing value.",
                    "value": "2",
                    "_": 11341,
                    "source": "\n\t\t/**\n\t\t * Append to the end of the variable's existing value.\n\t\t */\n\t\tAppend = 2"
                  },
                  {
                    "name": "Prepend",
                    "doc": "Prepend to the start of the variable's existing value.",
                    "value": "3",
                    "_": 11345,
                    "source": "\n\t\t/**\n\t\t * Prepend to the start of the variable's existing value.\n\t\t */\n\t\tPrepend = 3"
                  }
                ]
              },
              {
                "name": "ProgressLocation",
                "doc": "A location in the editor at which progress information can be shown. It depends on the\nlocation how progress is visually represented.",
                "_": 11508,
                "source": "\n\n\t/**\n\t * A location in the editor at which progress information can be shown. It depends on the\n\t * location how progress is visually represented.\n\t */\n\texport enum ProgressLocation {\n\n\t\t/**\n\t\t * Show progress for the source control viewlet, as overlay for the icon and as progress bar\n\t\t * inside the viewlet (when visible). Neither supports cancellation nor discrete progress nor\n\t\t * a label to describe the operation.\n\t\t */\n\t\tSourceControl = 1,\n\n\t\t/**\n\t\t * Show progress in the status bar of the editor. Neither supports cancellation nor discrete progress.\n\t\t * Supports rendering of {@link ThemeIcon theme icons} via the `$(<name>)`-syntax in the progress label.\n\t\t */\n\t\tWindow = 10,\n\n\t\t/**\n\t\t * Show progress as notification with an optional cancel button. Supports to show infinite and discrete\n\t\t * progress but does not support rendering of icons.\n\t\t */\n\t\tNotification = 15\n\t}",
                "members": [
                  {
                    "name": "SourceControl",
                    "doc": "Show progress for the source control viewlet, as overlay for the icon and as progress bar\n inside the viewlet (when visible). Neither supports cancellation nor discrete progress nor\n a label to describe the operation.",
                    "value": "1",
                    "_": 11515,
                    "source": "\n\n\t\t/**\n\t\t * Show progress for the source control viewlet, as overlay for the icon and as progress bar\n\t\t * inside the viewlet (when visible). Neither supports cancellation nor discrete progress nor\n\t\t * a label to describe the operation.\n\t\t */\n\t\tSourceControl = 1"
                  },
                  {
                    "name": "Window",
                    "doc": "Show progress in the status bar of the editor. Neither supports cancellation nor discrete progress.\n Supports rendering of {@link ThemeIcon theme icons} via the `$(<name>)`-syntax in the progress label.",
                    "value": "10",
                    "_": 11521,
                    "source": "\n\n\t\t/**\n\t\t * Show progress in the status bar of the editor. Neither supports cancellation nor discrete progress.\n\t\t * Supports rendering of {@link ThemeIcon theme icons} via the `$(<name>)`-syntax in the progress label.\n\t\t */\n\t\tWindow = 10"
                  },
                  {
                    "name": "Notification",
                    "doc": "Show progress as notification with an optional cancel button. Supports to show infinite and discrete\n progress but does not support rendering of icons.",
                    "value": "15",
                    "_": 11527,
                    "source": "\n\n\t\t/**\n\t\t * Show progress as notification with an optional cancel button. Supports to show infinite and discrete\n\t\t * progress but does not support rendering of icons.\n\t\t */\n\t\tNotification = 15"
                  }
                ]
              },
              {
                "name": "TextDocumentChangeReason",
                "doc": "",
                "_": 11881,
                "source": "\n\n\texport enum TextDocumentChangeReason {\n\t\t/** The text change is caused by an undo operation. */\n\t\tUndo = 1,\n\n\t\t/** The text change is caused by an redo operation. */\n\t\tRedo = 2,\n\t}",
                "members": [
                  {
                    "name": "Undo",
                    "doc": "The text change is caused by an undo operation.",
                    "value": "1",
                    "_": 11883,
                    "source": "\n\t\t/** The text change is caused by an undo operation. */\n\t\tUndo = 1"
                  },
                  {
                    "name": "Redo",
                    "doc": "The text change is caused by an redo operation.",
                    "value": "2",
                    "_": 11886,
                    "source": "\n\n\t\t/** The text change is caused by an redo operation. */\n\t\tRedo = 2"
                  }
                ]
              },
              {
                "name": "TextDocumentSaveReason",
                "doc": "Represents reasons why a text document is saved.",
                "_": 11914,
                "source": "\n\n\t/**\n\t * Represents reasons why a text document is saved.\n\t */\n\texport enum TextDocumentSaveReason {\n\n\t\t/**\n\t\t * Manually triggered, e.g. by the user pressing save, by starting debugging,\n\t\t * or by an API call.\n\t\t */\n\t\tManual = 1,\n\n\t\t/**\n\t\t * Automatic after a delay.\n\t\t */\n\t\tAfterDelay = 2,\n\n\t\t/**\n\t\t * When the editor lost focus.\n\t\t */\n\t\tFocusOut = 3\n\t}",
                "members": [
                  {
                    "name": "Manual",
                    "doc": "Manually triggered, e.g. by the user pressing save, by starting debugging,\n or by an API call.",
                    "value": "1",
                    "_": 11920,
                    "source": "\n\n\t\t/**\n\t\t * Manually triggered, e.g. by the user pressing save, by starting debugging,\n\t\t * or by an API call.\n\t\t */\n\t\tManual = 1"
                  },
                  {
                    "name": "AfterDelay",
                    "doc": "Automatic after a delay.",
                    "value": "2",
                    "_": 11925,
                    "source": "\n\n\t\t/**\n\t\t * Automatic after a delay.\n\t\t */\n\t\tAfterDelay = 2"
                  },
                  {
                    "name": "FocusOut",
                    "doc": "When the editor lost focus.",
                    "value": "3",
                    "_": 11930,
                    "source": "\n\n\t\t/**\n\t\t * When the editor lost focus.\n\t\t */\n\t\tFocusOut = 3"
                  }
                ]
              },
              {
                "name": "NotebookEditorRevealType",
                "doc": "Represents a notebook editor that is attached to a {@link NotebookDocumentnotebook}.",
                "_": 13452,
                "source": "\n\n\t/**\n\t * Represents a notebook editor that is attached to a {@link NotebookDocument notebook}.\n\t */\n\texport enum NotebookEditorRevealType {\n\t\t/**\n\t\t * The range will be revealed with as little scrolling as possible.\n\t\t */\n\t\tDefault = 0,\n\n\t\t/**\n\t\t * The range will always be revealed in the center of the viewport.\n\t\t */\n\t\tInCenter = 1,\n\n\t\t/**\n\t\t * If the range is outside the viewport, it will be revealed in the center of the viewport.\n\t\t * Otherwise, it will be revealed with as little scrolling as possible.\n\t\t */\n\t\tInCenterIfOutsideViewport = 2,\n\n\t\t/**\n\t\t * The range will always be revealed at the top of the viewport.\n\t\t */\n\t\tAtTop = 3\n\t}",
                "members": [
                  {
                    "name": "Default",
                    "doc": "The range will be revealed with as little scrolling as possible.",
                    "value": "0",
                    "_": 13456,
                    "source": "\n\t\t/**\n\t\t * The range will be revealed with as little scrolling as possible.\n\t\t */\n\t\tDefault = 0"
                  },
                  {
                    "name": "InCenter",
                    "doc": "The range will always be revealed in the center of the viewport.",
                    "value": "1",
                    "_": 13461,
                    "source": "\n\n\t\t/**\n\t\t * The range will always be revealed in the center of the viewport.\n\t\t */\n\t\tInCenter = 1"
                  },
                  {
                    "name": "InCenterIfOutsideViewport",
                    "doc": "If the range is outside the viewport, it will be revealed in the center of the viewport.\n Otherwise, it will be revealed with as little scrolling as possible.",
                    "value": "2",
                    "_": 13467,
                    "source": "\n\n\t\t/**\n\t\t * If the range is outside the viewport, it will be revealed in the center of the viewport.\n\t\t * Otherwise, it will be revealed with as little scrolling as possible.\n\t\t */\n\t\tInCenterIfOutsideViewport = 2"
                  },
                  {
                    "name": "AtTop",
                    "doc": "The range will always be revealed at the top of the viewport.",
                    "value": "3",
                    "_": 13472,
                    "source": "\n\n\t\t/**\n\t\t * The range will always be revealed at the top of the viewport.\n\t\t */\n\t\tAtTop = 3"
                  }
                ]
              },
              {
                "name": "NotebookCellKind",
                "doc": "A notebook cell kind.",
                "_": 13545,
                "source": "\n\n\t/**\n\t * A notebook cell kind.\n\t */\n\texport enum NotebookCellKind {\n\n\t\t/**\n\t\t * A markup-cell is formatted source that is used for display.\n\t\t */\n\t\tMarkup = 1,\n\n\t\t/**\n\t\t * A code-cell is source that can be {@link NotebookController executed} and that\n\t\t * produces {@link NotebookCellOutput output}.\n\t\t */\n\t\tCode = 2\n\t}",
                "members": [
                  {
                    "name": "Markup",
                    "doc": "A markup-cell is formatted source that is used for display.",
                    "value": "1",
                    "_": 13550,
                    "source": "\n\n\t\t/**\n\t\t * A markup-cell is formatted source that is used for display.\n\t\t */\n\t\tMarkup = 1"
                  },
                  {
                    "name": "Code",
                    "doc": "A code-cell is source that can be {@link NotebookController executed} and that\n produces {@link NotebookCellOutput output}.",
                    "value": "2",
                    "_": 13556,
                    "source": "\n\n\t\t/**\n\t\t * A code-cell is source that can be {@link NotebookController executed} and that\n\t\t * produces {@link NotebookCellOutput output}.\n\t\t */\n\t\tCode = 2"
                  }
                ]
              },
              {
                "name": "NotebookControllerAffinity",
                "doc": "Notebook controller affinity for notebook documents.",
                "_": 14143,
                "source": "\n\n\t/**\n\t * Notebook controller affinity for notebook documents.\n\t *\n\t * @see {@link NotebookController.updateNotebookAffinity}\n\t */\n\texport enum NotebookControllerAffinity {\n\t\t/**\n\t\t * Default affinity.\n\t\t */\n\t\tDefault = 1,\n\t\t/**\n\t\t * A controller is preferred for a notebook.\n\t\t */\n\t\tPreferred = 2\n\t}",
                "members": [
                  {
                    "name": "Default",
                    "doc": "Default affinity.",
                    "value": "1",
                    "_": 14147,
                    "source": "\n\t\t/**\n\t\t * Default affinity.\n\t\t */\n\t\tDefault = 1"
                  },
                  {
                    "name": "Preferred",
                    "doc": "A controller is preferred for a notebook.",
                    "value": "2",
                    "_": 14151,
                    "source": "\n\t\t/**\n\t\t * A controller is preferred for a notebook.\n\t\t */\n\t\tPreferred = 2"
                  }
                ]
              },
              {
                "name": "NotebookCellStatusBarAlignment",
                "doc": "Represents the alignment of status bar items.",
                "_": 14380,
                "source": "\n\n\t/**\n\t * Represents the alignment of status bar items.\n\t */\n\texport enum NotebookCellStatusBarAlignment {\n\n\t\t/**\n\t\t * Aligned to the left side.\n\t\t */\n\t\tLeft = 1,\n\n\t\t/**\n\t\t * Aligned to the right side.\n\t\t */\n\t\tRight = 2\n\t}",
                "members": [
                  {
                    "name": "Left",
                    "doc": "Aligned to the left side.",
                    "value": "1",
                    "_": 14385,
                    "source": "\n\n\t\t/**\n\t\t * Aligned to the left side.\n\t\t */\n\t\tLeft = 1"
                  },
                  {
                    "name": "Right",
                    "doc": "Aligned to the right side.",
                    "value": "2",
                    "_": 14390,
                    "source": "\n\n\t\t/**\n\t\t * Aligned to the right side.\n\t\t */\n\t\tRight = 2"
                  }
                ]
              },
              {
                "name": "DebugConsoleMode",
                "doc": "Debug console mode used by debug session, see {@link DebugSessionOptionsoptions}.",
                "_": 15211,
                "source": "\n\n\t/**\n\t * Debug console mode used by debug session, see {@link DebugSessionOptions options}.\n\t */\n\texport enum DebugConsoleMode {\n\t\t/**\n\t\t * Debug session should have a separate debug console.\n\t\t */\n\t\tSeparate = 0,\n\n\t\t/**\n\t\t * Debug session should share debug console with its parent session.\n\t\t * This value has no effect for sessions which do not have a parent session.\n\t\t */\n\t\tMergeWithParent = 1\n\t}",
                "members": [
                  {
                    "name": "Separate",
                    "doc": "Debug session should have a separate debug console.",
                    "value": "0",
                    "_": 15215,
                    "source": "\n\t\t/**\n\t\t * Debug session should have a separate debug console.\n\t\t */\n\t\tSeparate = 0"
                  },
                  {
                    "name": "MergeWithParent",
                    "doc": "Debug session should share debug console with its parent session.\n This value has no effect for sessions which do not have a parent session.",
                    "value": "1",
                    "_": 15221,
                    "source": "\n\n\t\t/**\n\t\t * Debug session should share debug console with its parent session.\n\t\t * This value has no effect for sessions which do not have a parent session.\n\t\t */\n\t\tMergeWithParent = 1"
                  }
                ]
              },
              {
                "name": "DebugConfigurationProviderTriggerKind",
                "doc": "A DebugConfigurationProviderTriggerKind specifies when the `provideDebugConfigurations` method of a `DebugConfigurationProvider` is triggered.\nCurrently there are two situations: to provide the initial debug configurations for a newly created launch.json or\nto provide dynamically generated debug configurations when the user asks for them through the UI (e.g. via the \"Select and Start Debugging\" command).\nA trigger kind is used when registering a `DebugConfigurationProvider` with {@link debug.registerDebugConfigurationProvider}.",
                "_": 15289,
                "source": "\n\n\t/**\n\t * A DebugConfigurationProviderTriggerKind specifies when the `provideDebugConfigurations` method of a `DebugConfigurationProvider` is triggered.\n\t * Currently there are two situations: to provide the initial debug configurations for a newly created launch.json or\n\t * to provide dynamically generated debug configurations when the user asks for them through the UI (e.g. via the \"Select and Start Debugging\" command).\n\t * A trigger kind is used when registering a `DebugConfigurationProvider` with {@link debug.registerDebugConfigurationProvider}.\n\t */\n\texport enum DebugConfigurationProviderTriggerKind {\n\t\t/**\n\t\t *\t`DebugConfigurationProvider.provideDebugConfigurations` is called to provide the initial debug configurations for a newly created launch.json.\n\t\t */\n\t\tInitial = 1,\n\t\t/**\n\t\t * `DebugConfigurationProvider.provideDebugConfigurations` is called to provide dynamically generated debug configurations when the user asks for them through the UI (e.g. via the \"Select and Start Debugging\" command).\n\t\t */\n\t\tDynamic = 2\n\t}",
                "members": [
                  {
                    "name": "Initial",
                    "doc": "`DebugConfigurationProvider.provideDebugConfigurations` is called to provide the initial debug configurations for a newly created launch.json.",
                    "value": "1",
                    "_": 15293,
                    "source": "\n\t\t/**\n\t\t *\t`DebugConfigurationProvider.provideDebugConfigurations` is called to provide the initial debug configurations for a newly created launch.json.\n\t\t */\n\t\tInitial = 1"
                  },
                  {
                    "name": "Dynamic",
                    "doc": "`DebugConfigurationProvider.provideDebugConfigurations` is called to provide dynamically generated debug configurations when the user asks for them through the UI (e.g. via the \"Select and Start Debugging\" command).",
                    "value": "2",
                    "_": 15297,
                    "source": "\n\t\t/**\n\t\t * `DebugConfigurationProvider.provideDebugConfigurations` is called to provide dynamically generated debug configurations when the user asks for them through the UI (e.g. via the \"Select and Start Debugging\" command).\n\t\t */\n\t\tDynamic = 2"
                  }
                ]
              },
              {
                "name": "CommentThreadCollapsibleState",
                "doc": "Collapsible state of a {@link CommentThreadcomment thread}",
                "_": 15488,
                "source": "\n\n\t/**\n\t * Collapsible state of a {@link CommentThread comment thread}\n\t */\n\texport enum CommentThreadCollapsibleState {\n\t\t/**\n\t\t * Determines an item is collapsed\n\t\t */\n\t\tCollapsed = 0,\n\n\t\t/**\n\t\t * Determines an item is expanded\n\t\t */\n\t\tExpanded = 1\n\t}",
                "members": [
                  {
                    "name": "Collapsed",
                    "doc": "Determines an item is collapsed",
                    "value": "0",
                    "_": 15492,
                    "source": "\n\t\t/**\n\t\t * Determines an item is collapsed\n\t\t */\n\t\tCollapsed = 0"
                  },
                  {
                    "name": "Expanded",
                    "doc": "Determines an item is expanded",
                    "value": "1",
                    "_": 15497,
                    "source": "\n\n\t\t/**\n\t\t * Determines an item is expanded\n\t\t */\n\t\tExpanded = 1"
                  }
                ]
              },
              {
                "name": "CommentMode",
                "doc": "Comment mode of a {@link Comment}",
                "_": 15503,
                "source": "\n\n\t/**\n\t * Comment mode of a {@link Comment}\n\t */\n\texport enum CommentMode {\n\t\t/**\n\t\t * Displays the comment editor\n\t\t */\n\t\tEditing = 0,\n\n\t\t/**\n\t\t * Displays the preview of the comment\n\t\t */\n\t\tPreview = 1\n\t}",
                "members": [
                  {
                    "name": "Editing",
                    "doc": "Displays the comment editor",
                    "value": "0",
                    "_": 15507,
                    "source": "\n\t\t/**\n\t\t * Displays the comment editor\n\t\t */\n\t\tEditing = 0"
                  },
                  {
                    "name": "Preview",
                    "doc": "Displays the preview of the comment",
                    "value": "1",
                    "_": 15512,
                    "source": "\n\n\t\t/**\n\t\t * Displays the preview of the comment\n\t\t */\n\t\tPreview = 1"
                  }
                ]
              },
              {
                "name": "CommentThreadState",
                "doc": "The state of a comment thread.",
                "_": 15518,
                "source": "\n\n\t/**\n\t * The state of a comment thread.\n\t */\n\texport enum CommentThreadState {\n\t\tUnresolved = 0,\n\t\tResolved = 1\n\t}",
                "members": [
                  {
                    "name": "Unresolved",
                    "doc": "",
                    "value": "0",
                    "_": 15519,
                    "source": "\n\t\tUnresolved = 0"
                  },
                  {
                    "name": "Resolved",
                    "doc": "",
                    "value": "1",
                    "_": 15520,
                    "source": "\n\t\tResolved = 1"
                  }
                ]
              },
              {
                "name": "TestRunProfileKind",
                "doc": "The kind of executions that {@link TestRunProfileTestRunProfiles} control.",
                "_": 16184,
                "source": "\n\n\t/**\n\t * The kind of executions that {@link TestRunProfile TestRunProfiles} control.\n\t */\n\texport enum TestRunProfileKind {\n\t\tRun = 1,\n\t\tDebug = 2,\n\t\tCoverage = 3,\n\t}",
                "members": [
                  {
                    "name": "Run",
                    "doc": "",
                    "value": "1",
                    "_": 16185,
                    "source": "\n\t\tRun = 1"
                  },
                  {
                    "name": "Debug",
                    "doc": "",
                    "value": "2",
                    "_": 16186,
                    "source": "\n\t\tDebug = 2"
                  },
                  {
                    "name": "Coverage",
                    "doc": "",
                    "value": "3",
                    "_": 16187,
                    "source": "\n\t\tCoverage = 3"
                  }
                ]
              }
            ]
          }
        }
      ],
      "funcs": [],
      "vars": [],
      "enums": []
    },
    "name": "0index.d.ts"
  }
]