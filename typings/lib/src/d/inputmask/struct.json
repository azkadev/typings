[
  {
    "_": -1,
    "namespace": "",
    "name": "main",
    "from": "mainLoop ",
    "items": {
      "structs": [],
      "typedefs": [],
      "modules": [
        {
          "_": 3,
          "namespace": "Inputmask",
          "from": "submodule ",
          "items": {
            "structs": [
              {
                "isClass": false,
                "_": -1,
                "name": "IInline0",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "Range",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 4,
                    "source": " start: string;",
                    "name": "start",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 4,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 4,
                    "source": " end: string",
                    "name": "end",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 4,
                      "source": " string"
                    }
                  }
                ],
                "calls": []
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline1",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "Options",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 146,
                    "source": " begin: number;",
                    "name": "begin",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 146,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 146,
                    "source": " end: number",
                    "name": "end",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 146,
                      "source": " number"
                    }
                  }
                ],
                "calls": []
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline2",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "Options",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 297,
                    "source": " begin: number;",
                    "name": "begin",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 297,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 297,
                    "source": " end: number",
                    "name": "end",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 297,
                      "source": " number"
                    }
                  }
                ],
                "calls": []
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline3",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "Options",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 424,
                    "source": " front: string;",
                    "name": "front",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 424,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 424,
                    "source": " back: string",
                    "name": "back",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 424,
                      "source": " string"
                    }
                  }
                ],
                "calls": []
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline4",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "Options",
                "source": "",
                "indexes": [
                  {
                    "key": {
                      "core": "string",
                      "isNullable": false,
                      "_": 483,
                      "source": " string"
                    },
                    "value": {
                      "core": "string",
                      "isNullable": false,
                      "_": 483,
                      "source": " string"
                    },
                    "doc": "",
                    "_": 483,
                    "source": " [shortcut: string]: string",
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false
                  }
                ],
                "ctors": [],
                "members": [],
                "calls": []
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline5",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "Options",
                "source": "",
                "indexes": [
                  {
                    "key": {
                      "core": "string",
                      "isNullable": false,
                      "_": 538,
                      "source": " string"
                    },
                    "value": {
                      "ref": "Definition",
                      "targs": [],
                      "isNullable": false,
                      "_": 538,
                      "source": " Definition"
                    },
                    "doc": "",
                    "_": 538,
                    "source": "\n                [key: string]: Definition;",
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false
                  }
                ],
                "ctors": [],
                "members": [],
                "calls": []
              },
              {
                "_": 21,
                "name": "Options",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Change the mask placeholder. Instead of \"_\", you can change the unfilled characters mask as you like, simply\n by adding the placeholder option. For example, placeholder: \" \" will change the default autofill with empty\n values.\n\n @default \"_\"",
                    "isMethod": false,
                    "_": 29,
                    "source": "\n        /**\n         * Change the mask placeholder. Instead of \"_\", you can change the unfilled characters mask as you like, simply\n         * by adding the placeholder option. For example, placeholder: \" \" will change the default autofill with empty\n         * values.\n         *\n         * @default \"_\"\n         */\n        placeholder?: string | undefined;",
                    "name": "placeholder",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 29,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 29,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 29,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "Definition of the symbols used to indicate an optional part in the mask.\n\n @default { start: \"[\", end: \"]\" }",
                    "isMethod": false,
                    "_": 35,
                    "source": "\n        /**\n         * Definition of the symbols used to indicate an optional part in the mask.\n         *\n         * @default { start: \"[\", end: \"]\" }\n         */\n        optionalmarker?: Range | undefined;",
                    "name": "optionalmarker",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 35,
                          "source": " Range"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 35,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 35,
                      "source": " Range | undefined"
                    }
                  },
                  {
                    "doc": "Definition of the symbols used to indicate a quantifier in the mask.\n\n @default { start: \"{\", end: \"}\" }",
                    "isMethod": false,
                    "_": 41,
                    "source": "\n        /**\n         * Definition of the symbols used to indicate a quantifier in the mask.\n         *\n         * @default { start: \"{\", end: \"}\" }\n         */\n        quantifiermarker?: Range | undefined;",
                    "name": "quantifiermarker",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 41,
                          "source": " Range"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 41,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 41,
                      "source": " Range | undefined"
                    }
                  },
                  {
                    "doc": "Definition of the symbols used to indicate a group in the mask.\n\n @default { start: \"(\", end: \")\" }",
                    "isMethod": false,
                    "_": 47,
                    "source": "\n        /**\n         * Definition of the symbols used to indicate a group in the mask.\n         *\n         * @default { start: \"(\", end: \")\" }\n         */\n        groupmarker?: Range | undefined;",
                    "name": "groupmarker",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 47,
                          "source": " Range"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 47,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 47,
                      "source": " Range | undefined"
                    }
                  },
                  {
                    "doc": "Definition of the symbols used to indicate an alternator part in the mask.\n\n @default \"|\"",
                    "isMethod": false,
                    "_": 53,
                    "source": "\n        /**\n         * Definition of the symbols used to indicate an alternator part in the mask.\n         *\n         * @default \"|\"\n         */\n        alternatormarker?: string | undefined;",
                    "name": "alternatormarker",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 53,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 53,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 53,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "Definition of the symbols used to escape a part in the mask.\n\n @default \"\\\\\"",
                    "isMethod": false,
                    "_": 59,
                    "source": "\n        /**\n         * Definition of the symbols used to escape a part in the mask.\n         *\n         * @default \"\\\\\"\n         */\n        escapeChar?: string | undefined;",
                    "name": "escapeChar",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 59,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 59,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 59,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "The mask to use.",
                    "isMethod": false,
                    "_": 63,
                    "source": "\n        /**\n         * The mask to use.\n         */\n        mask?: string | string[] | ((opts: Options) => string | string[]) | undefined;",
                    "name": "mask",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 63,
                          "source": " string"
                        },
                        {
                          "core": "array",
                          "targs": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 63,
                              "source": " string"
                            }
                          ],
                          "isNullable": false,
                          "_": 63,
                          "source": " string[]"
                        },
                        {
                          "ctor": false,
                          "generics": [],
                          "returns": {
                            "union": [
                              {
                                "core": "string",
                                "isNullable": false,
                                "_": 63,
                                "source": " string"
                              },
                              {
                                "core": "array",
                                "targs": [
                                  {
                                    "core": "string",
                                    "isNullable": false,
                                    "_": 63,
                                    "source": " string"
                                  }
                                ],
                                "isNullable": false,
                                "_": 63,
                                "source": " string[]"
                              }
                            ],
                            "isNullable": false,
                            "_": 63,
                            "source": " string | string[]"
                          },
                          "params": [
                            {
                              "name": "opts",
                              "type": {
                                "ref": "Options",
                                "targs": [],
                                "isNullable": false,
                                "_": 63,
                                "source": " Options"
                              },
                              "varargs": false,
                              "isNullable": false
                            }
                          ],
                          "isNullable": false,
                          "_": 63,
                          "source": " ((opts: Options) => string | string[])"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 63,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 63,
                      "source": " string | string[] | ((opts: Options) => string | string[]) | undefined"
                    }
                  },
                  {
                    "doc": "Use a regular expression as a mask. When using shorthands be aware that you need to double escape or use\n String.raw with a string literal.",
                    "isMethod": false,
                    "_": 68,
                    "source": "\n        /**\n         * Use a regular expression as a mask. When using shorthands be aware that you need to double escape or use\n         * String.raw with a string literal.\n         */\n        regex?: string | undefined;",
                    "name": "regex",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 68,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 68,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 68,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "Execute a function when the mask is completed.",
                    "isMethod": false,
                    "_": 72,
                    "source": "\n        /**\n         * Execute a function when the mask is completed.\n         */\n        oncomplete?: (() => void) | undefined;",
                    "name": "oncomplete",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ctor": false,
                          "generics": [],
                          "returns": {
                            "core": "void",
                            "isNullable": false,
                            "_": 72,
                            "source": " void"
                          },
                          "params": [],
                          "isNullable": false,
                          "_": 72,
                          "source": " (() => void)"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 72,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 72,
                      "source": " (() => void) | undefined"
                    }
                  },
                  {
                    "doc": "Execute a function when the mask is cleared.",
                    "isMethod": false,
                    "_": 76,
                    "source": "\n        /**\n         * Execute a function when the mask is cleared.\n         */\n        onincomplete?: (() => void) | undefined;",
                    "name": "onincomplete",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ctor": false,
                          "generics": [],
                          "returns": {
                            "core": "void",
                            "isNullable": false,
                            "_": 76,
                            "source": " void"
                          },
                          "params": [],
                          "isNullable": false,
                          "_": 76,
                          "source": " (() => void)"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 76,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 76,
                      "source": " (() => void) | undefined"
                    }
                  },
                  {
                    "doc": "Execute a function when the mask is cleared.",
                    "isMethod": false,
                    "_": 80,
                    "source": "\n        /**\n         * Execute a function when the mask is cleared.\n         */\n        oncleared?: (() => void) | undefined;",
                    "name": "oncleared",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ctor": false,
                          "generics": [],
                          "returns": {
                            "core": "void",
                            "isNullable": false,
                            "_": 80,
                            "source": " void"
                          },
                          "params": [],
                          "isNullable": false,
                          "_": 80,
                          "source": " (() => void)"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 80,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 80,
                      "source": " (() => void) | undefined"
                    }
                  },
                  {
                    "doc": "Mask repeat function. Repeat the mask definition x-times.\n `*` ~ forever, otherwise specify an integer\n\n @default 0",
                    "isMethod": false,
                    "_": 87,
                    "source": "\n        /**\n         * Mask repeat function. Repeat the mask definition x-times.\n         * `*` ~ forever, otherwise specify an integer\n         *\n         * @default 0\n         */\n        repeat?: number | string | undefined;",
                    "name": "repeat",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 87,
                          "source": " number"
                        },
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 87,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 87,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 87,
                      "source": " number | string | undefined"
                    }
                  },
                  {
                    "doc": "Toggle to allocate as much possible or the opposite. Non-greedy repeat function. With the non-greedy option\n set to `false`, you can specify `*` as repeat. This makes an endless repeat.\n\n @default false",
                    "isMethod": false,
                    "_": 94,
                    "source": "\n        /**\n         * Toggle to allocate as much possible or the opposite. Non-greedy repeat function. With the non-greedy option\n         * set to `false`, you can specify `*` as repeat. This makes an endless repeat.\n         *\n         * @default false\n         */\n        greedy?: boolean | undefined;",
                    "name": "greedy",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 94,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 94,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 94,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Automatically unmask the value when retrieved.\n\n When setting this option to true the plugin also expects the initial value from the server to be unmasked.\n\n @default false",
                    "isMethod": false,
                    "_": 102,
                    "source": "\n        /**\n         * Automatically unmask the value when retrieved.\n         *\n         * When setting this option to true the plugin also expects the initial value from the server to be unmasked.\n         *\n         * @default false\n         */\n        autoUnmask?: boolean | undefined;",
                    "name": "autoUnmask",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 102,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 102,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 102,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Remove the mask before submitting the form.\n\n @default false",
                    "isMethod": false,
                    "_": 108,
                    "source": "\n        /**\n         * Remove the mask before submitting the form.\n         *\n         * @default false\n         */\n        removeMaskOnSubmit?: boolean | undefined;",
                    "name": "removeMaskOnSubmit",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 108,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 108,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 108,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Remove the empty mask on blur or when not empty remove the optional trailing part.\n\n @default true",
                    "isMethod": false,
                    "_": 114,
                    "source": "\n        /**\n         * Remove the empty mask on blur or when not empty remove the optional trailing part.\n         *\n         * @default true\n         */\n        clearMaskOnLostFocus?: boolean | undefined;",
                    "name": "clearMaskOnLostFocus",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 114,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 114,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 114,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Toggle to insert or overwrite input. This option can be altered by pressing the Insert key.\n\n @default true",
                    "isMethod": false,
                    "_": 120,
                    "source": "\n        /**\n         * Toggle to insert or overwrite input. This option can be altered by pressing the Insert key.\n         *\n         * @default true\n         */\n        insertMode?: boolean | undefined;",
                    "name": "insertMode",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 120,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 120,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 120,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Show selected caret when `insertMode = false`.\n\n @default true",
                    "isMethod": false,
                    "_": 126,
                    "source": "\n        /**\n         * Show selected caret when `insertMode = false`.\n         *\n         * @default true\n         */\n        insertModeVisual?: boolean | undefined;",
                    "name": "insertModeVisual",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 126,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 126,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 126,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Clear the incomplete input on blur.\n\n @default false",
                    "isMethod": false,
                    "_": 132,
                    "source": "\n        /**\n         * Clear the incomplete input on blur.\n         *\n         * @default false\n         */\n        clearIncomplete?: boolean | undefined;",
                    "name": "clearIncomplete",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 132,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 132,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 132,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "The alias to use.\n\n @default null",
                    "isMethod": false,
                    "_": 138,
                    "source": "\n        /**\n         * The alias to use.\n         *\n         * @default null\n         */\n        alias?: string | undefined;",
                    "name": "alias",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 138,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 138,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 138,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "Callback to implement autocomplete on certain keys for example.",
                    "isMethod": false,
                    "_": 142,
                    "source": "\n        /**\n         * Callback to implement autocomplete on certain keys for example.\n         */\n        onKeyDown?:\n            | ((\n                event: KeyboardEvent,\n                buffer: string[],\n                caretPos: { begin: number; end: number },\n                opts: Options,\n            ) => void)\n            | undefined;",
                    "name": "onKeyDown",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ctor": false,
                          "generics": [],
                          "returns": {
                            "core": "void",
                            "isNullable": false,
                            "_": 148,
                            "source": " void"
                          },
                          "params": [
                            {
                              "name": "event",
                              "type": {
                                "ref": "KeyboardEvent",
                                "targs": [],
                                "isNullable": false,
                                "_": 144,
                                "source": " KeyboardEvent"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "buffer",
                              "type": {
                                "core": "array",
                                "targs": [
                                  {
                                    "core": "string",
                                    "isNullable": false,
                                    "_": 145,
                                    "source": " string"
                                  }
                                ],
                                "isNullable": false,
                                "_": 145,
                                "source": " string[]"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "caretPos",
                              "type": {
                                "ref": "IInline1",
                                "targs": [],
                                "isNullable": false,
                                "_": 146,
                                "source": " { begin: number; end: number }"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "opts",
                              "type": {
                                "ref": "Options",
                                "targs": [],
                                "isNullable": false,
                                "_": 147,
                                "source": " Options"
                              },
                              "varargs": false,
                              "isNullable": false
                            }
                          ],
                          "isNullable": false,
                          "_": 143,
                          "source": " ((\n                event: KeyboardEvent,\n                buffer: string[],\n                caretPos: { begin: number; end: number },\n                opts: Options,\n            ) => void)"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 149,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 143,
                      "source": "\n            | ((\n                event: KeyboardEvent,\n                buffer: string[],\n                caretPos: { begin: number; end: number },\n                opts: Options,\n            ) => void)\n            | undefined"
                    }
                  },
                  {
                    "doc": "Executes before masking the initial value to allow preprocessing of the initial value.",
                    "isMethod": false,
                    "_": 153,
                    "source": "\n        /**\n         * Executes before masking the initial value to allow preprocessing of the initial value.\n         */\n        onBeforeMask?: ((initialValue: string, opts: Options) => string) | undefined;",
                    "name": "onBeforeMask",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ctor": false,
                          "generics": [],
                          "returns": {
                            "core": "string",
                            "isNullable": false,
                            "_": 153,
                            "source": " string"
                          },
                          "params": [
                            {
                              "name": "initialValue",
                              "type": {
                                "core": "string",
                                "isNullable": false,
                                "_": 153,
                                "source": " string"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "opts",
                              "type": {
                                "ref": "Options",
                                "targs": [],
                                "isNullable": false,
                                "_": 153,
                                "source": " Options"
                              },
                              "varargs": false,
                              "isNullable": false
                            }
                          ],
                          "isNullable": false,
                          "_": 153,
                          "source": " ((initialValue: string, opts: Options) => string)"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 153,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 153,
                      "source": " ((initialValue: string, opts: Options) => string) | undefined"
                    }
                  },
                  {
                    "doc": "This callback allows for preprocessing the pasted value before actually handling the value for masking.\n This can be useful for stripping away some characters before processing. You can also disable pasting\n a value by returning false in the `onBeforePaste` call.",
                    "isMethod": false,
                    "_": 159,
                    "source": "\n        /**\n         * This callback allows for preprocessing the pasted value before actually handling the value for masking.\n         * This can be useful for stripping away some characters before processing. You can also disable pasting\n         * a value by returning false in the `onBeforePaste` call.\n         */\n        onBeforePaste?: ((pastedValue: string, opts: Options) => string) | undefined;",
                    "name": "onBeforePaste",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ctor": false,
                          "generics": [],
                          "returns": {
                            "core": "string",
                            "isNullable": false,
                            "_": 159,
                            "source": " string"
                          },
                          "params": [
                            {
                              "name": "pastedValue",
                              "type": {
                                "core": "string",
                                "isNullable": false,
                                "_": 159,
                                "source": " string"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "opts",
                              "type": {
                                "ref": "Options",
                                "targs": [],
                                "isNullable": false,
                                "_": 159,
                                "source": " Options"
                              },
                              "varargs": false,
                              "isNullable": false
                            }
                          ],
                          "isNullable": false,
                          "_": 159,
                          "source": " ((pastedValue: string, opts: Options) => string)"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 159,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 159,
                      "source": " ((pastedValue: string, opts: Options) => string) | undefined"
                    }
                  },
                  {
                    "doc": "Executes before writing to the masked element. Use this to do some extra processing of the input. This can\n be useful when implementing an alias, ex. decimal alias, autofill the digits when leaving the inputfield.",
                    "isMethod": false,
                    "_": 164,
                    "source": "\n        /**\n         * Executes before writing to the masked element. Use this to do some extra processing of the input. This can\n         * be useful when implementing an alias, ex. decimal alias, autofill the digits when leaving the inputfield.\n         */\n        onBeforeWrite?:\n            | ((event: KeyboardEvent, buffer: string[], caretPos: number, opts: Options) => CommandObject)\n            | undefined;",
                    "name": "onBeforeWrite",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ctor": false,
                          "generics": [],
                          "returns": {
                            "ref": "CommandObject",
                            "targs": [],
                            "isNullable": false,
                            "_": 165,
                            "source": " CommandObject"
                          },
                          "params": [
                            {
                              "name": "event",
                              "type": {
                                "ref": "KeyboardEvent",
                                "targs": [],
                                "isNullable": false,
                                "_": 165,
                                "source": " KeyboardEvent"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "buffer",
                              "type": {
                                "core": "array",
                                "targs": [
                                  {
                                    "core": "string",
                                    "isNullable": false,
                                    "_": 165,
                                    "source": " string"
                                  }
                                ],
                                "isNullable": false,
                                "_": 165,
                                "source": " string[]"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "caretPos",
                              "type": {
                                "core": "number",
                                "isNullable": false,
                                "_": 165,
                                "source": " number"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "opts",
                              "type": {
                                "ref": "Options",
                                "targs": [],
                                "isNullable": false,
                                "_": 165,
                                "source": " Options"
                              },
                              "varargs": false,
                              "isNullable": false
                            }
                          ],
                          "isNullable": false,
                          "_": 165,
                          "source": " ((event: KeyboardEvent, buffer: string[], caretPos: number, opts: Options) => CommandObject)"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 166,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 165,
                      "source": "\n            | ((event: KeyboardEvent, buffer: string[], caretPos: number, opts: Options) => CommandObject)\n            | undefined"
                    }
                  },
                  {
                    "doc": "Executes after unmasking to allow post-processing of the unmaskedvalue.\n\n @returns New unmasked value",
                    "isMethod": false,
                    "_": 172,
                    "source": "\n        /**\n         * Executes after unmasking to allow post-processing of the unmaskedvalue.\n         *\n         * @returns New unmasked value\n         */\n        onUnMask?: ((maskedValue: string, unmaskedValue: string) => string) | undefined;",
                    "name": "onUnMask",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ctor": false,
                          "generics": [],
                          "returns": {
                            "core": "string",
                            "isNullable": false,
                            "_": 172,
                            "source": " string"
                          },
                          "params": [
                            {
                              "name": "maskedValue",
                              "type": {
                                "core": "string",
                                "isNullable": false,
                                "_": 172,
                                "source": " string"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "unmaskedValue",
                              "type": {
                                "core": "string",
                                "isNullable": false,
                                "_": 172,
                                "source": " string"
                              },
                              "varargs": false,
                              "isNullable": false
                            }
                          ],
                          "isNullable": false,
                          "_": 172,
                          "source": " ((maskedValue: string, unmaskedValue: string) => string)"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 172,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 172,
                      "source": " ((maskedValue: string, unmaskedValue: string) => string) | undefined"
                    }
                  },
                  {
                    "doc": "Shows the mask when the input gets focus.\n\n @default true",
                    "isMethod": false,
                    "_": 178,
                    "source": "\n        /**\n         * Shows the mask when the input gets focus.\n         *\n         * @default true\n         */\n        showMaskOnFocus?: boolean | undefined;",
                    "name": "showMaskOnFocus",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 178,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 178,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 178,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Shows the mask when the input is hevered by the mouse cursor.\n\n @default true",
                    "isMethod": false,
                    "_": 184,
                    "source": "\n        /**\n         * Shows the mask when the input is hevered by the mouse cursor.\n         *\n         * @default true\n         */\n        showMaskOnHover?: boolean | undefined;",
                    "name": "showMaskOnHover",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 184,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 184,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 184,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Callback function is executed on every keyvalidation with the key, result as the parameter.",
                    "isMethod": false,
                    "_": 188,
                    "source": "\n        /**\n         * Callback function is executed on every keyvalidation with the key, result as the parameter.\n         */\n        onKeyValidation?: ((key: number, result: boolean) => void) | undefined;",
                    "name": "onKeyValidation",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ctor": false,
                          "generics": [],
                          "returns": {
                            "core": "void",
                            "isNullable": false,
                            "_": 188,
                            "source": " void"
                          },
                          "params": [
                            {
                              "name": "key",
                              "type": {
                                "core": "number",
                                "isNullable": false,
                                "_": 188,
                                "source": " number"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "result",
                              "type": {
                                "core": "boolean",
                                "isNullable": false,
                                "_": 188,
                                "source": " boolean"
                              },
                              "varargs": false,
                              "isNullable": false
                            }
                          ],
                          "isNullable": false,
                          "_": 188,
                          "source": " ((key: number, result: boolean) => void)"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 188,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 188,
                      "source": " ((key: number, result: boolean) => void) | undefined"
                    }
                  },
                  {
                    "doc": "A character which can be used to skip an optional part of a mask.\n\n @default \" \"",
                    "isMethod": false,
                    "_": 194,
                    "source": "\n        /**\n         * A character which can be used to skip an optional part of a mask.\n         *\n         * @default \" \"\n         */\n        skipOptionalPartCharacter?: string | undefined;",
                    "name": "skipOptionalPartCharacter",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 194,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 194,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 194,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "Numeric input direction. Keeps the caret at the end.\n\n @default false",
                    "isMethod": false,
                    "_": 200,
                    "source": "\n        /**\n         * Numeric input direction. Keeps the caret at the end.\n         *\n         * @default false\n         */\n        numericInput?: boolean | undefined;",
                    "name": "numericInput",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 200,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 200,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 200,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Align the input to the right\n\n By setting the rightAlign you can specify to right-align an inputmask. This is only applied in combination of\n the `numericInput` option or the `dir-attribute`.\n\n @default true",
                    "isMethod": false,
                    "_": 209,
                    "source": "\n        /**\n         * Align the input to the right\n         *\n         * By setting the rightAlign you can specify to right-align an inputmask. This is only applied in combination of\n         * the `numericInput` option or the `dir-attribute`.\n         *\n         * @default true\n         */\n        rightAlign?: boolean | undefined;",
                    "name": "rightAlign",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 209,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 209,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 209,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Make escape behave like undo. (ctrl-Z) Pressing escape reverts the value to the value before focus.\n\n @default true",
                    "isMethod": false,
                    "_": 215,
                    "source": "\n        /**\n         * Make escape behave like undo. (ctrl-Z) Pressing escape reverts the value to the value before focus.\n         *\n         * @default true\n         */\n        undoOnEscape?: boolean | undefined;",
                    "name": "undoOnEscape",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 215,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 215,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 215,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Define the radixpoint (decimal separator)\n\n @default \"\"",
                    "isMethod": false,
                    "_": 221,
                    "source": "\n        /**\n         * Define the radixpoint (decimal separator)\n         *\n         * @default \"\"\n         */\n        radixPoint?: string | undefined;",
                    "name": "radixPoint",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 221,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 221,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 221,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "Define the groupseparator.\n\n @default \"\"",
                    "isMethod": false,
                    "_": 227,
                    "source": "\n        /**\n         * Define the groupseparator.\n         *\n         * @default \"\"\n         */\n        groupSeparator?: string | undefined;",
                    "name": "groupSeparator",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 227,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 227,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 227,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "Use in combination with the alternator syntax Try to keep the mask static while typing. Decisions to alter the\n mask will be postponed if possible.\n\n ex. $(selector).inputmask({ mask: [\"+55-99-9999-9999\", \"+55-99-99999-9999\", ], keepStatic: true });\n\n typing 1212345123 => should result in +55-12-1234-5123 type extra 4 => switch to +55-12-12345-1234\n\n When the option is not set, it will default to `false`, except for multiple masks it will default to `true`!",
                    "isMethod": false,
                    "_": 238,
                    "source": "\n        /**\n         * Use in combination with the alternator syntax Try to keep the mask static while typing. Decisions to alter the\n         * mask will be postponed if possible.\n         *\n         * ex. $(selector).inputmask({ mask: [\"+55-99-9999-9999\", \"+55-99-99999-9999\", ], keepStatic: true });\n         *\n         * typing 1212345123 => should result in +55-12-1234-5123 type extra 4 => switch to +55-12-12345-1234\n         *\n         * When the option is not set, it will default to `false`, except for multiple masks it will default to `true`!\n         */\n        keepStatic?: boolean | null | undefined;",
                    "name": "keepStatic",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 238,
                          "source": " boolean"
                        },
                        {
                          "core": "null",
                          "isNullable": false,
                          "_": 238,
                          "source": " null"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 238,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 238,
                      "source": " boolean | null | undefined"
                    }
                  },
                  {
                    "doc": "When enabled the caret position is set after the latest valid position on TAB.\n\n @default true",
                    "isMethod": false,
                    "_": 244,
                    "source": "\n        /**\n         * When enabled the caret position is set after the latest valid position on TAB.\n         *\n         * @default true\n         */\n        positionCaretOnTab?: boolean | undefined;",
                    "name": "positionCaretOnTab",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 244,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 244,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 244,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Allows for tabbing through the different parts of the masked field.\n\n @default false",
                    "isMethod": false,
                    "_": 250,
                    "source": "\n        /**\n         * Allows for tabbing through the different parts of the masked field.\n         *\n         * @default false\n         */\n        tabThrough?: boolean | undefined;",
                    "name": "tabThrough",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 250,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 250,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 250,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "List with the supported input types\n\n @default [\"text\", \"tel\", \"url\", \"password\", \"search\"]",
                    "isMethod": false,
                    "_": 256,
                    "source": "\n        /**\n         * List with the supported input types\n         *\n         * @default [\"text\", \"tel\", \"url\", \"password\", \"search\"]\n         */\n        supportsInputType?: string[] | undefined;",
                    "name": "supportsInputType",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "array",
                          "targs": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 256,
                              "source": " string"
                            }
                          ],
                          "isNullable": false,
                          "_": 256,
                          "source": " string[]"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 256,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 256,
                      "source": " string[] | undefined"
                    }
                  },
                  {
                    "doc": "Specify keyCodes which should not be considered in the keypress event, otherwise the `preventDefault` will\n stop their default behavior especially in FF.",
                    "isMethod": false,
                    "_": 261,
                    "source": "\n        /**\n         * Specify keyCodes which should not be considered in the keypress event, otherwise the `preventDefault` will\n         * stop their default behavior especially in FF.\n         */\n        ignorables?: number[] | undefined;",
                    "name": "ignorables",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "array",
                          "targs": [
                            {
                              "core": "number",
                              "isNullable": false,
                              "_": 261,
                              "source": " number"
                            }
                          ],
                          "isNullable": false,
                          "_": 261,
                          "source": " number[]"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 261,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 261,
                      "source": " number[] | undefined"
                    }
                  },
                  {
                    "doc": "With this call-in (hook) you can override the default implementation of the isComplete function.",
                    "isMethod": false,
                    "_": 265,
                    "source": "\n        /**\n         * With this call-in (hook) you can override the default implementation of the isComplete function.\n         */\n        isComplete?: ((buffer: string[], opts: Options) => boolean) | undefined;",
                    "name": "isComplete",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ctor": false,
                          "generics": [],
                          "returns": {
                            "core": "boolean",
                            "isNullable": false,
                            "_": 265,
                            "source": " boolean"
                          },
                          "params": [
                            {
                              "name": "buffer",
                              "type": {
                                "core": "array",
                                "targs": [
                                  {
                                    "core": "string",
                                    "isNullable": false,
                                    "_": 265,
                                    "source": " string"
                                  }
                                ],
                                "isNullable": false,
                                "_": 265,
                                "source": " string[]"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "opts",
                              "type": {
                                "ref": "Options",
                                "targs": [],
                                "isNullable": false,
                                "_": 265,
                                "source": " Options"
                              },
                              "varargs": false,
                              "isNullable": false
                            }
                          ],
                          "isNullable": false,
                          "_": 265,
                          "source": " ((buffer: string[], opts: Options) => boolean)"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 265,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 265,
                      "source": " ((buffer: string[], opts: Options) => boolean) | undefined"
                    }
                  },
                  {
                    "doc": "Hook to postValidate the result from `isValid`. Useful for validating the entry as a whole.",
                    "isMethod": false,
                    "_": 269,
                    "source": "\n        /**\n         * Hook to postValidate the result from `isValid`. Useful for validating the entry as a whole.\n         */\n        postValidation?:\n            | ((\n                buffer: string[],\n                pos: number,\n                char: string,\n                currentResult: boolean,\n                opts: Options,\n                maskset: any,\n                strict: boolean,\n                fromCheckval: boolean,\n            ) => boolean | CommandObject)\n            | undefined;",
                    "name": "postValidation",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ctor": false,
                          "generics": [],
                          "returns": {
                            "union": [
                              {
                                "core": "boolean",
                                "isNullable": false,
                                "_": 279,
                                "source": " boolean"
                              },
                              {
                                "ref": "CommandObject",
                                "targs": [],
                                "isNullable": false,
                                "_": 279,
                                "source": " CommandObject"
                              }
                            ],
                            "isNullable": false,
                            "_": 279,
                            "source": " boolean | CommandObject"
                          },
                          "params": [
                            {
                              "name": "buffer",
                              "type": {
                                "core": "array",
                                "targs": [
                                  {
                                    "core": "string",
                                    "isNullable": false,
                                    "_": 271,
                                    "source": " string"
                                  }
                                ],
                                "isNullable": false,
                                "_": 271,
                                "source": " string[]"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "pos",
                              "type": {
                                "core": "number",
                                "isNullable": false,
                                "_": 272,
                                "source": " number"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "char",
                              "type": {
                                "core": "string",
                                "isNullable": false,
                                "_": 273,
                                "source": " string"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "currentResult",
                              "type": {
                                "core": "boolean",
                                "isNullable": false,
                                "_": 274,
                                "source": " boolean"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "opts",
                              "type": {
                                "ref": "Options",
                                "targs": [],
                                "isNullable": false,
                                "_": 275,
                                "source": " Options"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "maskset",
                              "type": {
                                "core": "any",
                                "isNullable": false,
                                "_": 276,
                                "source": " any"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "strict",
                              "type": {
                                "core": "boolean",
                                "isNullable": false,
                                "_": 277,
                                "source": " boolean"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "fromCheckval",
                              "type": {
                                "core": "boolean",
                                "isNullable": false,
                                "_": 278,
                                "source": " boolean"
                              },
                              "varargs": false,
                              "isNullable": false
                            }
                          ],
                          "isNullable": false,
                          "_": 270,
                          "source": " ((\n                buffer: string[],\n                pos: number,\n                char: string,\n                currentResult: boolean,\n                opts: Options,\n                maskset: any,\n                strict: boolean,\n                fromCheckval: boolean,\n            ) => boolean | CommandObject)"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 280,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 270,
                      "source": "\n            | ((\n                buffer: string[],\n                pos: number,\n                char: string,\n                currentResult: boolean,\n                opts: Options,\n                maskset: any,\n                strict: boolean,\n                fromCheckval: boolean,\n            ) => boolean | CommandObject)\n            | undefined"
                    }
                  },
                  {
                    "doc": "Hook to preValidate the input. Useful for validating regardless of the definition.\n\n When returning `true`, the normal validation kicks in, otherwise, it is skipped.\n\n When returning a command object the actions are executed and further validation is stopped. If you want to\n continue further validation, you need to add the `rewritePosition` action.",
                    "isMethod": false,
                    "_": 289,
                    "source": "\n        /**\n         * Hook to preValidate the input. Useful for validating regardless of the definition.\n         *\n         * When returning `true`, the normal validation kicks in, otherwise, it is skipped.\n         *\n         * When returning a command object the actions are executed and further validation is stopped. If you want to\n         * continue further validation, you need to add the `rewritePosition` action.\n         */\n        preValidation?:\n            | ((\n                buffer: string[],\n                pos: number,\n                char: string,\n                isSelection: boolean,\n                opts: Options,\n                maskset: any,\n                caretPos: { begin: number; end: number },\n                strict: boolean,\n            ) => boolean | CommandObject)\n            | undefined;",
                    "name": "preValidation",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ctor": false,
                          "generics": [],
                          "returns": {
                            "union": [
                              {
                                "core": "boolean",
                                "isNullable": false,
                                "_": 299,
                                "source": " boolean"
                              },
                              {
                                "ref": "CommandObject",
                                "targs": [],
                                "isNullable": false,
                                "_": 299,
                                "source": " CommandObject"
                              }
                            ],
                            "isNullable": false,
                            "_": 299,
                            "source": " boolean | CommandObject"
                          },
                          "params": [
                            {
                              "name": "buffer",
                              "type": {
                                "core": "array",
                                "targs": [
                                  {
                                    "core": "string",
                                    "isNullable": false,
                                    "_": 291,
                                    "source": " string"
                                  }
                                ],
                                "isNullable": false,
                                "_": 291,
                                "source": " string[]"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "pos",
                              "type": {
                                "core": "number",
                                "isNullable": false,
                                "_": 292,
                                "source": " number"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "char",
                              "type": {
                                "core": "string",
                                "isNullable": false,
                                "_": 293,
                                "source": " string"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "isSelection",
                              "type": {
                                "core": "boolean",
                                "isNullable": false,
                                "_": 294,
                                "source": " boolean"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "opts",
                              "type": {
                                "ref": "Options",
                                "targs": [],
                                "isNullable": false,
                                "_": 295,
                                "source": " Options"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "maskset",
                              "type": {
                                "core": "any",
                                "isNullable": false,
                                "_": 296,
                                "source": " any"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "caretPos",
                              "type": {
                                "ref": "IInline2",
                                "targs": [],
                                "isNullable": false,
                                "_": 297,
                                "source": " { begin: number; end: number }"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "strict",
                              "type": {
                                "core": "boolean",
                                "isNullable": false,
                                "_": 298,
                                "source": " boolean"
                              },
                              "varargs": false,
                              "isNullable": false
                            }
                          ],
                          "isNullable": false,
                          "_": 290,
                          "source": " ((\n                buffer: string[],\n                pos: number,\n                char: string,\n                isSelection: boolean,\n                opts: Options,\n                maskset: any,\n                caretPos: { begin: number; end: number },\n                strict: boolean,\n            ) => boolean | CommandObject)"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 300,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 290,
                      "source": "\n            | ((\n                buffer: string[],\n                pos: number,\n                char: string,\n                isSelection: boolean,\n                opts: Options,\n                maskset: any,\n                caretPos: { begin: number; end: number },\n                strict: boolean,\n            ) => boolean | CommandObject)\n            | undefined"
                    }
                  },
                  {
                    "doc": "The `staticDefinitionSymbol` option is used to indicate that the static entries in the mask can match a\n certain definition. Especially useful with alternators so that static element in the mask can match\n another alternation.\n\n @default undefined",
                    "isMethod": false,
                    "_": 308,
                    "source": "\n        /**\n         * The `staticDefinitionSymbol` option is used to indicate that the static entries in the mask can match a\n         * certain definition. Especially useful with alternators so that static element in the mask can match\n         * another alternation.\n         *\n         * @default undefined\n         */\n        staticDefinitionSymbol?: string | undefined;",
                    "name": "staticDefinitionSymbol",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 308,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 308,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 308,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "Just in time masking. With the `jitMasking` option you can enable jit masking. The mask will only be\n visible for the user entered characters.\n\n @default false",
                    "isMethod": false,
                    "_": 315,
                    "source": "\n        /**\n         * Just in time masking. With the `jitMasking` option you can enable jit masking. The mask will only be\n         * visible for the user entered characters.\n         *\n         * @default false\n         */\n        jitMasking?: boolean | undefined;",
                    "name": "jitMasking",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 315,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 315,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 315,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Return nothing from the input `value` property when the user hasn't entered anything. If this is false,\n the mask might be returned.\n\n @default true",
                    "isMethod": false,
                    "_": 322,
                    "source": "\n        /**\n         * Return nothing from the input `value` property when the user hasn't entered anything. If this is false,\n         * the mask might be returned.\n         *\n         * @default true\n         */\n        nullable?: boolean | undefined;",
                    "name": "nullable",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 322,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 322,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 322,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Disable value property patching\n\n @default false",
                    "isMethod": false,
                    "_": 328,
                    "source": "\n        /**\n         * Disable value property patching\n         *\n         * @default false\n         */\n        noValuePatching?: boolean | undefined;",
                    "name": "noValuePatching",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 328,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 328,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 328,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Positioning of the caret on click.\n\n Options:\n\n * `none`\n * `lvp` - based on the last valid position (default)\n * `radixFocus` - position caret to radixpoint on initial click\n * `select` - select the whole input\n * `ignore` - ignore the click and continue the mask\n\n @default \"lvp\"",
                    "isMethod": false,
                    "_": 342,
                    "source": "\n        /**\n         * Positioning of the caret on click.\n         *\n         * Options:\n         *\n         * * `none`\n         * * `lvp` - based on the last valid position (default)\n         * * `radixFocus` - position caret to radixpoint on initial click\n         * * `select` - select the whole input\n         * * `ignore` - ignore the click and continue the mask\n         *\n         * @default \"lvp\"\n         */\n        positionCaretOnClick?: PositionCaretOnClick | undefined;",
                    "name": "positionCaretOnClick",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "PositionCaretOnClick",
                          "targs": [],
                          "isNullable": false,
                          "_": 342,
                          "source": " PositionCaretOnClick"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 342,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 342,
                      "source": " PositionCaretOnClick | undefined"
                    }
                  },
                  {
                    "doc": "Apply casing at the mask-level.\n\n @default undefined",
                    "isMethod": false,
                    "_": 348,
                    "source": "\n        /**\n         * Apply casing at the mask-level.\n         *\n         * @default undefined\n         */\n        casing?: Casing | undefined;",
                    "name": "casing",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "Casing",
                          "targs": [],
                          "isNullable": false,
                          "_": 348,
                          "source": " Casing"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 348,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 348,
                      "source": " Casing | undefined"
                    }
                  },
                  {
                    "doc": "Specify the inputmode - already in place for when browsers start to support them\n https://html.spec.whatwg.org/#input-modalities:-the-inputmode-attribute\n\n @default \"verbatim\"",
                    "isMethod": false,
                    "_": 355,
                    "source": "\n        /**\n         * Specify the inputmode - already in place for when browsers start to support them\n         * https://html.spec.whatwg.org/#input-modalities:-the-inputmode-attribute\n         *\n         * @default \"verbatim\"\n         */\n        inputmode?: InputMode | undefined;",
                    "name": "inputmode",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "InputMode",
                          "targs": [],
                          "isNullable": false,
                          "_": 355,
                          "source": " InputMode"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 355,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 355,
                      "source": " InputMode | undefined"
                    }
                  },
                  {
                    "doc": "Specify to use the `data-inputmask` attributes or to ignore them.\n\n If you don't use data attributes you can disable the import by specifying `importDataAttributes: false`.\n\n @default true",
                    "isMethod": false,
                    "_": 363,
                    "source": "\n        /**\n         * Specify to use the `data-inputmask` attributes or to ignore them.\n         *\n         * If you don't use data attributes you can disable the import by specifying `importDataAttributes: false`.\n         *\n         * @default true\n         */\n        importDataAttributes?: boolean | undefined;",
                    "name": "importDataAttributes",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 363,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 363,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 363,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Alter the behavior of the char shifting on entry or deletion.\n\n In some cases shifting the mask entries or deletion should be more restrictive.\n\n Ex. date masks. Shifting month to day makes no sense\n\n @default true",
                    "isMethod": false,
                    "_": 373,
                    "source": "\n        /**\n         * Alter the behavior of the char shifting on entry or deletion.\n         *\n         * In some cases shifting the mask entries or deletion should be more restrictive.\n         *\n         * Ex. date masks. Shifting month to day makes no sense\n         *\n         * @default true\n         */\n        shiftPositions?: boolean | undefined;",
                    "name": "shiftPositions",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 373,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 373,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 373,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Use the default defined definitions from the prototype.\n\n @default true",
                    "isMethod": false,
                    "_": 379,
                    "source": "\n        /**\n         * Use the default defined definitions from the prototype.\n         *\n         * @default true\n         */\n        usePrototypeDefinitions?: boolean | undefined;",
                    "name": "usePrototypeDefinitions",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 379,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 379,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 379,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Minimum value. This needs to be in the same format as the `inputFormat` when used with the datetime alias.",
                    "isMethod": false,
                    "_": 383,
                    "source": "\n        /**\n         * Minimum value. This needs to be in the same format as the `inputFormat` when used with the datetime alias.\n         */\n        min?: string | number | undefined;",
                    "name": "min",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 383,
                          "source": " string"
                        },
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 383,
                          "source": " number"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 383,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 383,
                      "source": " string | number | undefined"
                    }
                  },
                  {
                    "doc": "Maximum value. This needs to be in the same format as the `inputFormat` when used with the datetime alias.",
                    "isMethod": false,
                    "_": 387,
                    "source": "\n        /**\n         * Maximum value. This needs to be in the same format as the `inputFormat` when used with the datetime alias.\n         */\n        max?: string | number | undefined;",
                    "name": "max",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 387,
                          "source": " string"
                        },
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 387,
                          "source": " number"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 387,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 387,
                      "source": " string | number | undefined"
                    }
                  },
                  {
                    "doc": "Number of fractionalDigits.\n\n Possible values:\n\n * A number describing the number of fractional digits.\n * `*`\n * Quantifier syntax like `2,4`. When the quantifier syntax is used, the `digitsOptional` option is ignored\n\n @default \"*\"",
                    "isMethod": false,
                    "_": 400,
                    "source": "\n\n        /**\n         * Number of fractionalDigits.\n         *\n         * Possible values:\n         *\n         * * A number describing the number of fractional digits.\n         * * `*`\n         * * Quantifier syntax like `2,4`. When the quantifier syntax is used, the `digitsOptional` option is ignored\n         *\n         * @default \"*\"\n         */\n        digits?: string | number | undefined;",
                    "name": "digits",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 400,
                          "source": " string"
                        },
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 400,
                          "source": " number"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 400,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 400,
                      "source": " string | number | undefined"
                    }
                  },
                  {
                    "doc": "Specify wheter the digits are optional.\n\n @default true",
                    "isMethod": false,
                    "_": 406,
                    "source": "\n        /**\n         * Specify wheter the digits are optional.\n         *\n         * @default true\n         */\n        digitsOptional?: boolean | undefined;",
                    "name": "digitsOptional",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 406,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 406,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 406,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Enforces the decimal part when leaving the input field.\n\n @default false",
                    "isMethod": false,
                    "_": 412,
                    "source": "\n        /**\n         * Enforces the decimal part when leaving the input field.\n         *\n         * @default false\n         */\n        enforceDigitsOnBlur?: boolean | undefined;",
                    "name": "enforceDigitsOnBlur",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 412,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 412,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 412,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Allow to enter -.\n\n @default true",
                    "isMethod": false,
                    "_": 418,
                    "source": "\n        /**\n         * Allow to enter -.\n         *\n         * @default true\n         */\n        allowMinus?: boolean | undefined;",
                    "name": "allowMinus",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 418,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 418,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 418,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Define your negationSymbol.\n\n @default { front: \"-\", back: \"\" }",
                    "isMethod": false,
                    "_": 424,
                    "source": "\n        /**\n         * Define your negationSymbol.\n         *\n         * @default { front: \"-\", back: \"\" }\n         */\n        negationSymbol?: { front: string; back: string } | undefined;",
                    "name": "negationSymbol",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "IInline3",
                          "targs": [],
                          "isNullable": false,
                          "_": 424,
                          "source": " { front: string; back: string }"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 424,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 424,
                      "source": " { front: string; back: string } | undefined"
                    }
                  },
                  {
                    "doc": "Define a prefix.\n\n @default \"\"",
                    "isMethod": false,
                    "_": 430,
                    "source": "\n        /**\n         * Define a prefix.\n         *\n         * @default \"\"\n         */\n        prefix?: string | undefined;",
                    "name": "prefix",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 430,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 430,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 430,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "Define a suffix.\n\n @default \"\"",
                    "isMethod": false,
                    "_": 436,
                    "source": "\n        /**\n         * Define a suffix.\n         *\n         * @default \"\"\n         */\n        suffix?: string | undefined;",
                    "name": "suffix",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 436,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 436,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 436,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "Set the maximum value when the user types a number which is greater that the value of max.\n\n @default false",
                    "isMethod": false,
                    "_": 442,
                    "source": "\n        /**\n         * Set the maximum value when the user types a number which is greater that the value of max.\n         *\n         * @default false\n         */\n        SetMaxOnOverflow?: boolean | undefined;",
                    "name": "SetMaxOnOverflow",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 442,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 442,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 442,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Define the step the ctrl-up & ctrl-down must take.\n\n @default 1",
                    "isMethod": false,
                    "_": 448,
                    "source": "\n        /**\n         * Define the step the ctrl-up & ctrl-down must take.\n         *\n         * @default 1\n         */\n        step?: number | undefined;",
                    "name": "step",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 448,
                          "source": " number"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 448,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 448,
                      "source": " number | undefined"
                    }
                  },
                  {
                    "doc": "Make unmasking returning a number instead of a string.\n\n Be warned that using the unmaskAsNumber option together with jQuery.serialize will fail as serialize expects a string. (See issue #1288)\n\n @default false",
                    "isMethod": false,
                    "_": 456,
                    "source": "\n        /**\n         * Make unmasking returning a number instead of a string.\n         *\n         * Be warned that using the unmaskAsNumber option together with jQuery.serialize will fail as serialize expects a string. (See issue #1288)\n         *\n         * @default false\n         */\n        unmaskAsNumber?: boolean | undefined;",
                    "name": "unmaskAsNumber",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 456,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 456,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 456,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Indicates whether the value passed for initialization is text or a number.\n\n * `text` - radixpoint should be the same as in the options\n * `number` - radixpoint should be a . as the default for a number in js\n\n @default \"text\"",
                    "isMethod": false,
                    "_": 465,
                    "source": "\n        /**\n         * Indicates whether the value passed for initialization is text or a number.\n         *\n         * * `text` - radixpoint should be the same as in the options\n         * * `number` - radixpoint should be a . as the default for a number in js\n         *\n         * @default \"text\"\n         */\n        inputType?: \"text\" | \"number\" | undefined;",
                    "name": "inputType",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "\"text\"",
                          "isNullable": false,
                          "_": 465,
                          "source": " \"text\""
                        },
                        {
                          "core": "\"number\"",
                          "isNullable": false,
                          "_": 465,
                          "source": " \"number\""
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 465,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 465,
                      "source": " \"text\" | \"number\" | undefined"
                    }
                  },
                  {
                    "doc": "Set the function for rounding the values when set.\n\n Other examples:\n * `Math.floor`\n * `fn(x) { // do your own rounding logic // return x; }`\n\n @default Math.round",
                    "isMethod": false,
                    "_": 475,
                    "source": "\n        /**\n         * Set the function for rounding the values when set.\n         *\n         * Other examples:\n         * * `Math.floor`\n         * * `fn(x) { // do your own rounding logic // return x; }`\n         *\n         * @default Math.round\n         */\n        roundingFN?: ((input: number) => number) | undefined;",
                    "name": "roundingFN",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ctor": false,
                          "generics": [],
                          "returns": {
                            "core": "number",
                            "isNullable": false,
                            "_": 475,
                            "source": " number"
                          },
                          "params": [
                            {
                              "name": "input",
                              "type": {
                                "core": "number",
                                "isNullable": false,
                                "_": 475,
                                "source": " number"
                              },
                              "varargs": false,
                              "isNullable": false
                            }
                          ],
                          "isNullable": false,
                          "_": 475,
                          "source": " ((input: number) => number)"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 475,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 475,
                      "source": " ((input: number) => number) | undefined"
                    }
                  },
                  {
                    "doc": "Define shortcuts. This will allow typing 1k => 1000, 2m => 2000000\n\n To disable just pass shortcuts: `null` as option\n\n @default {k: \"000\", m: \"000000\"}",
                    "isMethod": false,
                    "_": 483,
                    "source": "\n        /**\n         * Define shortcuts. This will allow typing 1k => 1000, 2m => 2000000\n         *\n         * To disable just pass shortcuts: `null` as option\n         *\n         * @default {k: \"000\", m: \"000000\"}\n         */\n        shortcuts?: { [shortcut: string]: string } | null | undefined;",
                    "name": "shortcuts",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "IInline4",
                          "targs": [],
                          "isNullable": false,
                          "_": 483,
                          "source": " { [shortcut: string]: string }"
                        },
                        {
                          "core": "null",
                          "isNullable": false,
                          "_": 483,
                          "source": " null"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 483,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 483,
                      "source": " { [shortcut: string]: string } | null | undefined"
                    }
                  },
                  {
                    "doc": "Format used to input a date. This option is only effective for the datetime alias.\n\n Supported symbols\n\n * `d` - Day of the month as digits; no leading zero for single-digit days.\n * `dd` - Day of the month as digits; leading zero for single-digit days.\n * `ddd` - Day of the week as a three-letter abbreviation.\n * `dddd` - Day of the week as its full name.\n * `m` - Month as digits; no leading zero for single-digit months.\n * `mm` - Month as digits; leading zero for single-digit months.\n * `mmm` - Month as a three-letter abbreviation.\n * `mmmm` - Month as its full name.\n * `yy` - Year as last two digits; leading zero for years less than 10.\n * `yyyy` - Year as 4 digits.\n * `h` - Hours; no leading zero for single-digit hours (12-hour clock).\n * `hh` - Hours; leading zero for single-digit hours (12-hour clock).\n * `hx` - Hours; no limit; `x` = number of digits ~ use as h2, h3, ...\n * `H` - Hours; no leading zero for single-digit hours (24-hour clock).\n * `HH` - Hours; leading zero for single-digit hours (24-hour clock).\n * `Hx` - Hours; no limit; `x` = number of digits ~ use as H2, H3, ...\n * `M` - Minutes; no leading zero for single-digit minutes. Uppercase M unlike CF timeFormat's m to avoid\n         conflict with months.\n * `MM` - Minutes; leading zero for single-digit minutes. Uppercase MM unlike CF timeFormat's mm to avoid\n          conflict with months.\n * `s` - Seconds; no leading zero for single-digit seconds.\n * `ss` - Seconds; leading zero for single-digit seconds.\n * `l` - Milliseconds. 3 digits.\n * `L` - Milliseconds. 2 digits.\n * `t` - Lowercase, single-character time marker string: a or p.\n * `tt` - Two-character time marker string: am or pm.\n * `T` - Single-character time marker string: A or P.\n * `TT` - Two-character time marker string: AM or PM.\n * `Z` - US timezone abbreviation, e.g. EST or MDT. With non-US timezones or in the Opera browser, the\n         GMT/UTC offset is returned, e.g. GMT-0500\n * `o` - GMT/UTC timezone offset, e.g. -0500 or +0230.\n * `S` - The date's ordinal suffix (st, nd, rd, or th). Works well with d.\n\n @default \"isoDateTime\"",
                    "isMethod": false,
                    "_": 524,
                    "source": "\n        /**\n         * Format used to input a date. This option is only effective for the datetime alias.\n         *\n         * Supported symbols\n         *\n         * * `d` - Day of the month as digits; no leading zero for single-digit days.\n         * * `dd` - Day of the month as digits; leading zero for single-digit days.\n         * * `ddd` - Day of the week as a three-letter abbreviation.\n         * * `dddd` - Day of the week as its full name.\n         * * `m` - Month as digits; no leading zero for single-digit months.\n         * * `mm` - Month as digits; leading zero for single-digit months.\n         * * `mmm` - Month as a three-letter abbreviation.\n         * * `mmmm` - Month as its full name.\n         * * `yy` - Year as last two digits; leading zero for years less than 10.\n         * * `yyyy` - Year as 4 digits.\n         * * `h` - Hours; no leading zero for single-digit hours (12-hour clock).\n         * * `hh` - Hours; leading zero for single-digit hours (12-hour clock).\n         * * `hx` - Hours; no limit; `x` = number of digits ~ use as h2, h3, ...\n         * * `H` - Hours; no leading zero for single-digit hours (24-hour clock).\n         * * `HH` - Hours; leading zero for single-digit hours (24-hour clock).\n         * * `Hx` - Hours; no limit; `x` = number of digits ~ use as H2, H3, ...\n         * * `M` - Minutes; no leading zero for single-digit minutes. Uppercase M unlike CF timeFormat's m to avoid\n         *         conflict with months.\n         * * `MM` - Minutes; leading zero for single-digit minutes. Uppercase MM unlike CF timeFormat's mm to avoid\n         *          conflict with months.\n         * * `s` - Seconds; no leading zero for single-digit seconds.\n         * * `ss` - Seconds; leading zero for single-digit seconds.\n         * * `l` - Milliseconds. 3 digits.\n         * * `L` - Milliseconds. 2 digits.\n         * * `t` - Lowercase, single-character time marker string: a or p.\n         * * `tt` - Two-character time marker string: am or pm.\n         * * `T` - Single-character time marker string: A or P.\n         * * `TT` - Two-character time marker string: AM or PM.\n         * * `Z` - US timezone abbreviation, e.g. EST or MDT. With non-US timezones or in the Opera browser, the\n         *         GMT/UTC offset is returned, e.g. GMT-0500\n         * * `o` - GMT/UTC timezone offset, e.g. -0500 or +0230.\n         * * `S` - The date's ordinal suffix (st, nd, rd, or th). Works well with d.\n         *\n         * @default \"isoDateTime\"\n         */\n        inputFormat?: string | undefined;",
                    "name": "inputFormat",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 524,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 524,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 524,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "Format of the unmasked value. This is only effective when used with the datetime alias.",
                    "isMethod": false,
                    "_": 528,
                    "source": "\n        /**\n         * Format of the unmasked value. This is only effective when used with the datetime alias.\n         */\n        outputFormat?: string | undefined;",
                    "name": "outputFormat",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 528,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 528,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 528,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "Visual format when the input looses focus",
                    "isMethod": false,
                    "_": 532,
                    "source": "\n        /**\n         * Visual format when the input looses focus\n         */\n        displayFormat?: string | undefined;",
                    "name": "displayFormat",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 532,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 532,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 532,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "Add new definitions to this inputmask.",
                    "isMethod": false,
                    "_": 536,
                    "source": "\n        /**\n         * Add new definitions to this inputmask.\n         */\n        definitions?:\n            | {\n                [key: string]: Definition;\n            }\n            | undefined;",
                    "name": "definitions",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "IInline5",
                          "targs": [],
                          "isNullable": false,
                          "_": 537,
                          "source": " {\n                [key: string]: Definition;\n            }"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 540,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 537,
                      "source": "\n            | {\n                [key: string]: Definition;\n            }\n            | undefined"
                    }
                  },
                  {
                    "doc": "Enable/disable prefilling of the year.\n Although you can just over type the proposed value without deleting, many seems to see a problem with the year prediction.\n This options is to disable this feature.\n\n @default true",
                    "isMethod": false,
                    "_": 548,
                    "source": "\n        /**\n         * Enable/disable prefilling of the year.\n         * Although you can just over type the proposed value without deleting, many seems to see a problem with the year prediction.\n         * This options is to disable this feature.\n         *\n         * @default true\n         */\n        prefillYear?: boolean | undefined;",
                    "name": "prefillYear",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 548,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 548,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 548,
                      "source": " boolean | undefined"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 551,
                "name": "Instance",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Return the default (empty) mask value.",
                    "isMethod": true,
                    "_": 555,
                    "source": "\n        /**\n         * Return the default (empty) mask value.\n         */\n        getemptymask(): string;",
                    "name": "getemptymask",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 555,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The metadata of the actual mask provided in the mask definitions can be obtained by calling getmetadata. If\n only a mask is provided the mask definition will be returned by the getmetadata.",
                    "isMethod": true,
                    "_": 560,
                    "source": "\n        /**\n         * The metadata of the actual mask provided in the mask definitions can be obtained by calling getmetadata. If\n         * only a mask is provided the mask definition will be returned by the getmetadata.\n         */\n        getmetadata(): any;",
                    "name": "getmetadata",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "any",
                      "isNullable": false,
                      "_": 560,
                      "source": " any"
                    }
                  },
                  {
                    "doc": "Check whether the returned value is masked or not; currently only works reliably when using `jquery.val` fn\n to retrieve the value",
                    "isMethod": true,
                    "_": 565,
                    "source": "\n        /**\n         * Check whether the returned value is masked or not; currently only works reliably when using `jquery.val` fn\n         * to retrieve the value\n         */\n        hasMaskedValue(): boolean;",
                    "name": "hasMaskedValue",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 565,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Verify whether the current value is complete or not.",
                    "isMethod": true,
                    "_": 569,
                    "source": "\n        /**\n         * Verify whether the current value is complete or not.\n         */\n        isComplete(): boolean;",
                    "name": "isComplete",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 569,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Validate a given value against the mask.",
                    "isMethod": true,
                    "_": 573,
                    "source": "\n        /**\n         * Validate a given value against the mask.\n         */\n        isValid(): boolean;",
                    "name": "isValid",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 573,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Create a mask for the input.\n\n @param el Element selector, a single element or an array of elements.",
                    "isMethod": true,
                    "_": 579,
                    "source": "\n        /**\n         * Create a mask for the input.\n         *\n         * @param el Element selector, a single element or an array of elements.\n         */\n        mask(selectorOrElement: string | HTMLElement | ArrayLike<HTMLElement>): Instance;",
                    "name": "mask",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "selectorOrElement",
                        "type": {
                          "union": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 579,
                              "source": " string"
                            },
                            {
                              "ref": "HTMLElement",
                              "targs": [],
                              "isNullable": false,
                              "_": 579,
                              "source": " HTMLElement"
                            },
                            {
                              "ref": "ArrayLike",
                              "targs": [
                                {
                                  "ref": "HTMLElement",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 579,
                                  "source": "HTMLElement"
                                }
                              ],
                              "isNullable": false,
                              "_": 579,
                              "source": " ArrayLike<HTMLElement>"
                            }
                          ],
                          "isNullable": false,
                          "_": 579,
                          "source": " string | HTMLElement | ArrayLike<HTMLElement>"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Instance",
                      "targs": [],
                      "isNullable": false,
                      "_": 579,
                      "source": " Instance"
                    }
                  },
                  {
                    "doc": "Get an option on an existing inputmask.\n\n @param key Name of option to retrieve.",
                    "isMethod": true,
                    "_": 585,
                    "source": "\n        /**\n         * Get an option on an existing inputmask.\n         *\n         * @param key Name of option to retrieve.\n         */\n        option(key: string): any;",
                    "name": "option",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "key",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 585,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "any",
                      "isNullable": false,
                      "_": 585,
                      "source": " any"
                    }
                  },
                  {
                    "doc": "Set an option on an existing inputmask. The option method is intented for adding extra options like\n callbacks, etc at a later time to the mask.\n\n When extra options are set the mask is automatically reapplied, unless you pas true for the `noremask`\n argument.",
                    "isMethod": true,
                    "_": 593,
                    "source": "\n        /**\n         * Set an option on an existing inputmask. The option method is intented for adding extra options like\n         * callbacks, etc at a later time to the mask.\n         *\n         * When extra options are set the mask is automatically reapplied, unless you pas true for the `noremask`\n         * argument.\n         */\n        option(opts: Options, noremask?: boolean): Instance;",
                    "name": "option",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "opts",
                        "type": {
                          "ref": "Options",
                          "targs": [],
                          "isNullable": false,
                          "_": 593,
                          "source": " Options"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "noremask",
                        "type": {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 593,
                          "source": " boolean"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "Instance",
                      "targs": [],
                      "isNullable": false,
                      "_": 593,
                      "source": " Instance"
                    }
                  },
                  {
                    "doc": "Remove the inputmask.",
                    "isMethod": true,
                    "_": 597,
                    "source": "\n        /**\n         * Remove the inputmask.\n         */\n        remove(): void;",
                    "name": "remove",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 597,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "The `setvalue` functionality is to set a value to the inputmask like you would do with `jQuery.val`, BUT it\n will trigger the internal event used by the inputmask always, whatever the case. This is particular useful\n when cloning an inputmask with jQuery.clone. Cloning an inputmask is not a fully functional clone. On the\n first event (`mouseenter`, `focus`, ...) the inputmask can detect if it where cloned and can reactivate the\n masking. However when setting the value with jQuery.val there is none of the events triggered in that case.\n The `setvalue` functionality does this for you.",
                    "isMethod": true,
                    "_": 606,
                    "source": "\n        /**\n         * The `setvalue` functionality is to set a value to the inputmask like you would do with `jQuery.val`, BUT it\n         * will trigger the internal event used by the inputmask always, whatever the case. This is particular useful\n         * when cloning an inputmask with jQuery.clone. Cloning an inputmask is not a fully functional clone. On the\n         * first event (`mouseenter`, `focus`, ...) the inputmask can detect if it where cloned and can reactivate the\n         * masking. However when setting the value with jQuery.val there is none of the events triggered in that case.\n         * The `setvalue` functionality does this for you.\n         */\n        setValue(value: string): void;",
                    "name": "setValue",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "value",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 606,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 606,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Gets the unmasked value.",
                    "isMethod": true,
                    "_": 610,
                    "source": "\n        /**\n         * Gets the unmasked value.\n         */\n        unmaskedvalue(): string;",
                    "name": "unmaskedvalue",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 610,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 613,
                "name": "Definition",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 614,
                    "source": "\n        validator: string | DefinitionValidator;",
                    "name": "validator",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 614,
                          "source": " string"
                        },
                        {
                          "ref": "DefinitionValidator",
                          "targs": [],
                          "isNullable": false,
                          "_": 614,
                          "source": " DefinitionValidator"
                        }
                      ],
                      "isNullable": false,
                      "_": 614,
                      "source": " string | DefinitionValidator"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 615,
                    "source": "\n        casing?: Casing | undefined;",
                    "name": "casing",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "Casing",
                          "targs": [],
                          "isNullable": false,
                          "_": 615,
                          "source": " Casing"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 615,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 615,
                      "source": " Casing | undefined"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 616,
                    "source": "\n        cardinality?: number | undefined;",
                    "name": "cardinality",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 616,
                          "source": " number"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 616,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 616,
                      "source": " number | undefined"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 617,
                    "source": "\n        placeholder?: string | undefined;",
                    "name": "placeholder",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 617,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 617,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 617,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 618,
                    "source": "\n        definitionSymbol?: string | undefined;",
                    "name": "definitionSymbol",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 618,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 618,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 618,
                      "source": " string | undefined"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 621,
                "name": "InsertPosition",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Position to insert.",
                    "isMethod": false,
                    "_": 625,
                    "source": "\n        /**\n         * Position to insert.\n         */\n        pos: number;",
                    "name": "pos",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 625,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "Character to insert.",
                    "isMethod": false,
                    "_": 629,
                    "source": "\n        /**\n         * Character to insert.\n         */\n        c: string;",
                    "name": "c",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 629,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "@default true",
                    "isMethod": false,
                    "_": 633,
                    "source": "\n        /**\n         * @default true\n         */\n        fromIsValid?: boolean | undefined;",
                    "name": "fromIsValid",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 633,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 633,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 633,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "@default true",
                    "isMethod": false,
                    "_": 637,
                    "source": "\n        /**\n         * @default true\n         */\n        strict?: boolean | undefined;",
                    "name": "strict",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 637,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 637,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 637,
                      "source": " boolean | undefined"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline6",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "CommandObject",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 665,
                    "source": " start: number;",
                    "name": "start",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 665,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 665,
                    "source": " end: number",
                    "name": "end",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 665,
                      "source": " number"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 640,
                "name": "CommandObject",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Position to insert.",
                    "isMethod": false,
                    "_": 644,
                    "source": "\n        /**\n         * Position to insert.\n         */\n        pos?: number | undefined;",
                    "name": "pos",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 644,
                          "source": " number"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 644,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 644,
                      "source": " number | undefined"
                    }
                  },
                  {
                    "doc": "Character to insert.",
                    "isMethod": false,
                    "_": 648,
                    "source": "\n        /**\n         * Character to insert.\n         */\n        c?: string | undefined;",
                    "name": "c",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 648,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 648,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 648,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "Position of the caret.",
                    "isMethod": false,
                    "_": 652,
                    "source": "\n        /**\n         * Position of the caret.\n         */\n        caret?: number | undefined;",
                    "name": "caret",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 652,
                          "source": " number"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 652,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 652,
                      "source": " number | undefined"
                    }
                  },
                  {
                    "doc": "Position(s) to remove.",
                    "isMethod": false,
                    "_": 656,
                    "source": "\n        /**\n         * Position(s) to remove.\n         */\n        remove?: number | number[] | undefined;",
                    "name": "remove",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 656,
                          "source": " number"
                        },
                        {
                          "core": "array",
                          "targs": [
                            {
                              "core": "number",
                              "isNullable": false,
                              "_": 656,
                              "source": " number"
                            }
                          ],
                          "isNullable": false,
                          "_": 656,
                          "source": " number[]"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 656,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 656,
                      "source": " number | number[] | undefined"
                    }
                  },
                  {
                    "doc": "Position(s) to add.",
                    "isMethod": false,
                    "_": 660,
                    "source": "\n        /**\n         * Position(s) to add.\n         */\n        insert?: InsertPosition | InsertPosition[] | undefined;",
                    "name": "insert",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "InsertPosition",
                          "targs": [],
                          "isNullable": false,
                          "_": 660,
                          "source": " InsertPosition"
                        },
                        {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "InsertPosition",
                              "targs": [],
                              "isNullable": false,
                              "_": 660,
                              "source": " InsertPosition"
                            }
                          ],
                          "isNullable": false,
                          "_": 660,
                          "source": " InsertPosition[]"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 660,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 660,
                      "source": " InsertPosition | InsertPosition[] | undefined"
                    }
                  },
                  {
                    "doc": "* `true` => refresh validPositions from the complete buffer .\n * `{ start: , end: }` => refresh from start to end.",
                    "isMethod": false,
                    "_": 665,
                    "source": "\n        /**\n         * * `true` => refresh validPositions from the complete buffer .\n         * * `{ start: , end: }` => refresh from start to end.\n         */\n        refreshFromBuffer?: true | { start: number; end: number } | undefined;",
                    "name": "refreshFromBuffer",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "true",
                          "isNullable": false,
                          "_": 665,
                          "source": " true"
                        },
                        {
                          "ref": "IInline6",
                          "targs": [],
                          "isNullable": false,
                          "_": 665,
                          "source": " { start: number; end: number }"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 665,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 665,
                      "source": " true | { start: number; end: number } | undefined"
                    }
                  },
                  {
                    "doc": "Rewrite the maskPos within the isvalid function.",
                    "isMethod": false,
                    "_": 669,
                    "source": "\n        /**\n         * Rewrite the maskPos within the isvalid function.\n         */\n        rewritePosition?: number | undefined;",
                    "name": "rewritePosition",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 669,
                          "source": " number"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 669,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 669,
                      "source": " number | undefined"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline7",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "Static",
                "source": "",
                "indexes": [
                  {
                    "key": {
                      "core": "string",
                      "isNullable": false,
                      "_": 708,
                      "source": " string"
                    },
                    "value": {
                      "ref": "Definition",
                      "targs": [],
                      "isNullable": false,
                      "_": 708,
                      "source": " Definition"
                    },
                    "doc": "",
                    "_": 708,
                    "source": " [key: string]: Definition",
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false
                  }
                ],
                "ctors": [],
                "members": [],
                "calls": []
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline8",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "Static",
                "source": "",
                "indexes": [
                  {
                    "key": {
                      "core": "string",
                      "isNullable": false,
                      "_": 712,
                      "source": " string"
                    },
                    "value": {
                      "ref": "Options",
                      "targs": [],
                      "isNullable": false,
                      "_": 712,
                      "source": " Options"
                    },
                    "doc": "",
                    "_": 712,
                    "source": " [key: string]: Options",
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false
                  }
                ],
                "ctors": [],
                "members": [],
                "calls": []
              },
              {
                "_": 672,
                "name": "Static",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 693,
                    "source": "\n\n        /**\n         * Creates a new Inputmask instance.\n         *\n         * @param maskOrAlias A mask pattern or a reference to a predefined alias.\n         * @param opts Mask options.\n         */\n        new(maskOrAlias: string, opts?: Options): Instance;",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "maskOrAlias",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 693,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "opts",
                        "type": {
                          "ref": "Options",
                          "targs": [],
                          "isNullable": false,
                          "_": 693,
                          "source": " Options"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "Instance",
                      "targs": [],
                      "isNullable": false,
                      "_": 693,
                      "source": " Instance"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 699,
                    "source": "\n        /**\n         * Creates a new Inputmask instance.\n         *\n         * @param opts Mask options.\n         */\n        new(opts?: Options): Instance;",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "opts",
                        "type": {
                          "ref": "Options",
                          "targs": [],
                          "isNullable": false,
                          "_": 699,
                          "source": " Options"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "Instance",
                      "targs": [],
                      "isNullable": false,
                      "_": 699,
                      "source": " Instance"
                    }
                  }
                ],
                "members": [
                  {
                    "doc": "Extends the default inputmask options.",
                    "isMethod": true,
                    "_": 704,
                    "source": "\n\n        /**\n         * Extends the default inputmask options.\n         */\n        extendDefaults(opts: Options): void;",
                    "name": "extendDefaults",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "opts",
                        "type": {
                          "ref": "Options",
                          "targs": [],
                          "isNullable": false,
                          "_": 704,
                          "source": " Options"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 704,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Extends the set of available definitions.",
                    "isMethod": true,
                    "_": 708,
                    "source": "\n        /**\n         * Extends the set of available definitions.\n         */\n        extendDefinitions(definitions: { [key: string]: Definition }): void;",
                    "name": "extendDefinitions",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "definitions",
                        "type": {
                          "ref": "IInline7",
                          "targs": [],
                          "isNullable": false,
                          "_": 708,
                          "source": " { [key: string]: Definition }"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 708,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Extends the set of available mask aliases.",
                    "isMethod": true,
                    "_": 712,
                    "source": "\n        /**\n         * Extends the set of available mask aliases.\n         */\n        extendAliases(aliases: { [key: string]: Options }): void;",
                    "name": "extendAliases",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "aliases",
                        "type": {
                          "ref": "IInline8",
                          "targs": [],
                          "isNullable": false,
                          "_": 712,
                          "source": " { [key: string]: Options }"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 712,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Instead of masking an input element it is also possible to use the inputmask for formatting given values.\n Think of formatting values to show in jqGrid or on other elements then inputs.\n\n @param value Value to format.\n @param opts Mask options.",
                    "isMethod": true,
                    "_": 720,
                    "source": "\n        /**\n         * Instead of masking an input element it is also possible to use the inputmask for formatting given values.\n         * Think of formatting values to show in jqGrid or on other elements then inputs.\n         *\n         * @param value Value to format.\n         * @param opts Mask options.\n         */\n        format(value: string, opts: Options): string;",
                    "name": "format",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "value",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 720,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "opts",
                        "type": {
                          "ref": "Options",
                          "targs": [],
                          "isNullable": false,
                          "_": 720,
                          "source": " Options"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 720,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Validate a given value against the mask.\n\n @param value Value to validate.\n @param opts Mask options.",
                    "isMethod": true,
                    "_": 727,
                    "source": "\n        /**\n         * Validate a given value against the mask.\n         *\n         * @param value Value to validate.\n         * @param opts Mask options.\n         */\n        isValid(value: string, opts: Options): boolean;",
                    "name": "isValid",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "value",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 727,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "opts",
                        "type": {
                          "ref": "Options",
                          "targs": [],
                          "isNullable": false,
                          "_": 727,
                          "source": " Options"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 727,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Remove the inputmask.",
                    "isMethod": true,
                    "_": 731,
                    "source": "\n        /**\n         * Remove the inputmask.\n         */\n        remove(selectorOrElement: string | HTMLElement | ArrayLike<HTMLElement>): void;",
                    "name": "remove",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "selectorOrElement",
                        "type": {
                          "union": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 731,
                              "source": " string"
                            },
                            {
                              "ref": "HTMLElement",
                              "targs": [],
                              "isNullable": false,
                              "_": 731,
                              "source": " HTMLElement"
                            },
                            {
                              "ref": "ArrayLike",
                              "targs": [
                                {
                                  "ref": "HTMLElement",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 731,
                                  "source": "HTMLElement"
                                }
                              ],
                              "isNullable": false,
                              "_": 731,
                              "source": " ArrayLike<HTMLElement>"
                            }
                          ],
                          "isNullable": false,
                          "_": 731,
                          "source": " string | HTMLElement | ArrayLike<HTMLElement>"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 731,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "The setvalue functionality is to set a value to the inputmask like you would do with jQuery.val, BUT it will\n trigger the internal event used by the inputmask always, whatever the case. This is particular usefull when\n cloning an inputmask with jQuery.clone. Cloning an inputmask is not a fully functional clone. On the first\n event (mouseenter, focus, ...) the inputmask can detect if it where cloned and can reactivate the masking.\n However when setting the value with jQuery.val there is none of the events triggered in that case. The\n setvalue functionality does this for you.",
                    "isMethod": true,
                    "_": 740,
                    "source": "\n        /**\n         * The setvalue functionality is to set a value to the inputmask like you would do with jQuery.val, BUT it will\n         * trigger the internal event used by the inputmask always, whatever the case. This is particular usefull when\n         * cloning an inputmask with jQuery.clone. Cloning an inputmask is not a fully functional clone. On the first\n         * event (mouseenter, focus, ...) the inputmask can detect if it where cloned and can reactivate the masking.\n         * However when setting the value with jQuery.val there is none of the events triggered in that case. The\n         * setvalue functionality does this for you.\n         */\n        setValue(selectorOrElement: string | HTMLElement | ArrayLike<HTMLElement>, value: string): void;",
                    "name": "setValue",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "selectorOrElement",
                        "type": {
                          "union": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 740,
                              "source": " string"
                            },
                            {
                              "ref": "HTMLElement",
                              "targs": [],
                              "isNullable": false,
                              "_": 740,
                              "source": " HTMLElement"
                            },
                            {
                              "ref": "ArrayLike",
                              "targs": [
                                {
                                  "ref": "HTMLElement",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 740,
                                  "source": "HTMLElement"
                                }
                              ],
                              "isNullable": false,
                              "_": 740,
                              "source": " ArrayLike<HTMLElement>"
                            }
                          ],
                          "isNullable": false,
                          "_": 740,
                          "source": " string | HTMLElement | ArrayLike<HTMLElement>"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "value",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 740,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 740,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Unmask a given value against the mask.\n\n @param value Value to be unmasked.\n @param opts Mask options.",
                    "isMethod": true,
                    "_": 747,
                    "source": "\n        /**\n         * Unmask a given value against the mask.\n         *\n         * @param value Value to be unmasked.\n         * @param opts Mask options.\n         */\n        unmask(value: string, opts: Options): string;",
                    "name": "unmask",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "value",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 747,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "opts",
                        "type": {
                          "ref": "Options",
                          "targs": [],
                          "isNullable": false,
                          "_": 747,
                          "source": " Options"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 747,
                      "source": " string"
                    }
                  }
                ],
                "calls": [
                  {
                    "params": [
                      {
                        "name": "maskOrAlias",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 679,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "opts",
                        "type": {
                          "ref": "Options",
                          "targs": [],
                          "isNullable": false,
                          "_": 679,
                          "source": " Options"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "Instance",
                      "targs": [],
                      "isNullable": false,
                      "_": 679,
                      "source": " Instance"
                    },
                    "generics": [],
                    "doc": "",
                    "_": 679,
                    "source": "\n        /**\n         * Creates a new Inputmask instance.\n         *\n         * @param maskOrAlias A mask pattern or a reference to a predefined alias.\n         * @param opts Mask options.\n         */\n        (maskOrAlias: string, opts?: Options): Instance;"
                  },
                  {
                    "params": [
                      {
                        "name": "opts",
                        "type": {
                          "ref": "Options",
                          "targs": [],
                          "isNullable": false,
                          "_": 685,
                          "source": " Options"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "Instance",
                      "targs": [],
                      "isNullable": false,
                      "_": 685,
                      "source": " Instance"
                    },
                    "generics": [],
                    "doc": "",
                    "_": 685,
                    "source": "\n        /**\n         * Creates a new Inputmask instance.\n         *\n         * @param opts Mask options.\n         */\n        (opts?: Options): Instance;"
                  }
                ],
                "isClass": false
              }
            ],
            "typedefs": [
              {
                "name": "Range",
                "generics": [],
                "type": {
                  "union": [
                    {
                      "ref": "IInline0",
                      "targs": [],
                      "isNullable": false,
                      "_": 4,
                      "source": " { start: string; end: string }"
                    },
                    {
                      "tuple": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 4,
                          "source": "string"
                        },
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 4,
                          "source": " string"
                        }
                      ],
                      "isNullable": false,
                      "_": 4,
                      "source": " [string, string]"
                    }
                  ],
                  "isNullable": false,
                  "_": 4,
                  "source": " { start: string; end: string } | [string, string]",
                  "parent": "Range"
                },
                "doc": "",
                "_": 4,
                "source": "\n    type Range = { start: string; end: string } | [string, string];"
              },
              {
                "name": "PositionCaretOnClick",
                "generics": [],
                "type": {
                  "union": [
                    {
                      "core": "\"none\"",
                      "isNullable": false,
                      "_": 6,
                      "source": " \"none\""
                    },
                    {
                      "core": "\"lvp\"",
                      "isNullable": false,
                      "_": 6,
                      "source": " \"lvp\""
                    },
                    {
                      "core": "\"radixFocus\"",
                      "isNullable": false,
                      "_": 6,
                      "source": " \"radixFocus\""
                    },
                    {
                      "core": "\"select\"",
                      "isNullable": false,
                      "_": 6,
                      "source": " \"select\""
                    },
                    {
                      "core": "\"ignore\"",
                      "isNullable": false,
                      "_": 6,
                      "source": " \"ignore\""
                    }
                  ],
                  "isNullable": false,
                  "_": 6,
                  "source": " \"none\" | \"lvp\" | \"radixFocus\" | \"select\" | \"ignore\"",
                  "parent": "PositionCaretOnClick"
                },
                "doc": "",
                "_": 6,
                "source": "\n\n    type PositionCaretOnClick = \"none\" | \"lvp\" | \"radixFocus\" | \"select\" | \"ignore\";"
              },
              {
                "name": "InputMode",
                "generics": [],
                "type": {
                  "union": [
                    {
                      "core": "\"verbatim\"",
                      "isNullable": false,
                      "_": 8,
                      "source": " \"verbatim\""
                    },
                    {
                      "core": "\"none\"",
                      "isNullable": false,
                      "_": 8,
                      "source": " \"none\""
                    },
                    {
                      "core": "\"text\"",
                      "isNullable": false,
                      "_": 8,
                      "source": " \"text\""
                    },
                    {
                      "core": "\"decimal\"",
                      "isNullable": false,
                      "_": 8,
                      "source": " \"decimal\""
                    },
                    {
                      "core": "\"numeric\"",
                      "isNullable": false,
                      "_": 8,
                      "source": " \"numeric\""
                    },
                    {
                      "core": "\"tel\"",
                      "isNullable": false,
                      "_": 8,
                      "source": " \"tel\""
                    },
                    {
                      "core": "\"search\"",
                      "isNullable": false,
                      "_": 8,
                      "source": " \"search\""
                    },
                    {
                      "core": "\"email\"",
                      "isNullable": false,
                      "_": 8,
                      "source": " \"email\""
                    },
                    {
                      "core": "\"url\"",
                      "isNullable": false,
                      "_": 8,
                      "source": " \"url\""
                    }
                  ],
                  "isNullable": false,
                  "_": 8,
                  "source": " \"verbatim\" | \"none\" | \"text\" | \"decimal\" | \"numeric\" | \"tel\" | \"search\" | \"email\" | \"url\"",
                  "parent": "InputMode"
                },
                "doc": "",
                "_": 8,
                "source": "\n\n    type InputMode = \"verbatim\" | \"none\" | \"text\" | \"decimal\" | \"numeric\" | \"tel\" | \"search\" | \"email\" | \"url\";"
              },
              {
                "name": "Casing",
                "generics": [],
                "type": {
                  "union": [
                    {
                      "core": "\"upper\"",
                      "isNullable": false,
                      "_": 10,
                      "source": " \"upper\""
                    },
                    {
                      "core": "\"lower\"",
                      "isNullable": false,
                      "_": 10,
                      "source": " \"lower\""
                    },
                    {
                      "core": "\"title\"",
                      "isNullable": false,
                      "_": 10,
                      "source": " \"title\""
                    }
                  ],
                  "isNullable": false,
                  "_": 10,
                  "source": " \"upper\" | \"lower\" | \"title\"",
                  "parent": "Casing"
                },
                "doc": "",
                "_": 10,
                "source": "\n\n    type Casing = \"upper\" | \"lower\" | \"title\";"
              },
              {
                "name": "DefinitionValidator",
                "generics": [],
                "type": {
                  "ctor": false,
                  "generics": [],
                  "returns": {
                    "union": [
                      {
                        "core": "boolean",
                        "isNullable": false,
                        "_": 19,
                        "source": " boolean"
                      },
                      {
                        "ref": "CommandObject",
                        "targs": [],
                        "isNullable": false,
                        "_": 19,
                        "source": " CommandObject"
                      }
                    ],
                    "isNullable": false,
                    "_": 19,
                    "source": " boolean | CommandObject"
                  },
                  "params": [
                    {
                      "name": "chrs",
                      "type": {
                        "core": "string",
                        "isNullable": false,
                        "_": 14,
                        "source": " string"
                      },
                      "varargs": false,
                      "isNullable": false
                    },
                    {
                      "name": "maskset",
                      "type": {
                        "core": "any",
                        "isNullable": false,
                        "_": 15,
                        "source": " any"
                      },
                      "varargs": false,
                      "isNullable": false
                    },
                    {
                      "name": "pos",
                      "type": {
                        "core": "number",
                        "isNullable": false,
                        "_": 16,
                        "source": " number"
                      },
                      "varargs": false,
                      "isNullable": false
                    },
                    {
                      "name": "strict",
                      "type": {
                        "core": "boolean",
                        "isNullable": false,
                        "_": 17,
                        "source": " boolean"
                      },
                      "varargs": false,
                      "isNullable": false
                    },
                    {
                      "name": "opts",
                      "type": {
                        "ref": "Options",
                        "targs": [],
                        "isNullable": false,
                        "_": 18,
                        "source": " Options"
                      },
                      "varargs": false,
                      "isNullable": false
                    }
                  ],
                  "isNullable": false,
                  "_": 13,
                  "source": " (\n        chrs: string,\n        maskset: any,\n        pos: number,\n        strict: boolean,\n        opts: Options,\n    ) => boolean | CommandObject",
                  "parent": "DefinitionValidator"
                },
                "doc": "",
                "_": 13,
                "source": "\n\n    // `maskset` typed as `any`, since its content is not described in the documentation\n    type DefinitionValidator = (\n        chrs: string,\n        maskset: any,\n        pos: number,\n        strict: boolean,\n        opts: Options,\n    ) => boolean | CommandObject;"
              }
            ],
            "modules": [],
            "funcs": [],
            "vars": [],
            "enums": []
          }
        },
        {
          "_": 752,
          "namespace": "Inputmask_",
          "from": "submodule ",
          "items": {
            "structs": [],
            "typedefs": [],
            "modules": [],
            "funcs": [],
            "vars": [],
            "enums": []
          }
        }
      ],
      "funcs": [],
      "vars": [
        {
          "_": 847,
          "name": "Inputmask",
          "isReadonly": true,
          "isStatic": false,
          "isNullable": false,
          "doc": "",
          "type": {
            "core": "any",
            "isNullable": true,
            "_": 847,
            "source": " Inputmask.Static"
          },
          "source": " Inputmask: Inputmask.Static"
        }
      ],
      "enums": []
    }
  }
]