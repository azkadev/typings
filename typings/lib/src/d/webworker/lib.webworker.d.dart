@_i1.JS()
library typings.webworker.interop; // ignore_for_file: no_leading_underscores_for_library_prefixes

import 'package:js/js.dart' as _i1;
import 'dart:core' as _i2;
import 'lib.webworker.d.dart' as _i3;
import 'dart:js_util' as _i4;
import 'dart:typed_data' as _i5;
import '/d/core.dart' as _i6;
import 'dart:async' as _i7;
import 'webworker_comon.d.dart' as _i8;
import '/src/d/typescript/lib.es5.d.dart' as _i9;
import '/src/d/typescript/lib.es2015.iterable.d.dart' as _i10;

@_i1.JS('self')
external _i2.Object _self;

enum GenerateKey {
  sign(r'sign'),
  verify(r'verify');

  const GenerateKey(this.value);

  final _i2.String value;
}

enum AlphaOptionOptions {
  discard(r'discard'),
  keep(r'keep');

  const AlphaOptionOptions(this.value);

  final _i2.String value;
}

enum AvcBitstreamFormatOptions {
  annexb(r'annexb'),
  avc(r'avc');

  const AvcBitstreamFormatOptions(this.value);

  final _i2.String value;
}

enum BinaryTypeOptions {
  arraybuffer(r'arraybuffer'),
  blob(r'blob');

  const BinaryTypeOptions(this.value);

  final _i2.String value;
}

enum CSSMathOperatorOptions {
  clamp(r'clamp'),
  invert(r'invert'),
  max(r'max'),
  min(r'min'),
  negate(r'negate'),
  product(r'product'),
  sum(r'sum');

  const CSSMathOperatorOptions(this.value);

  final _i2.String value;
}

enum CSSNumericBaseTypeOptions {
  angle(r'angle'),
  flex(r'flex'),
  frequency(r'frequency'),
  length(r'length'),
  percent(r'percent'),
  resolution(r'resolution'),
  time(r'time');

  const CSSNumericBaseTypeOptions(this.value);

  final _i2.String value;
}

enum CanvasDirectionOptions {
  inherit(r'inherit'),
  ltr(r'ltr'),
  rtl(r'rtl');

  const CanvasDirectionOptions(this.value);

  final _i2.String value;
}

enum CanvasFillRuleOptions {
  evenodd(r'evenodd'),
  nonzero(r'nonzero');

  const CanvasFillRuleOptions(this.value);

  final _i2.String value;
}

enum CanvasFontKerningOptions {
  auto(r'auto'),
  none(r'none'),
  normal(r'normal');

  const CanvasFontKerningOptions(this.value);

  final _i2.String value;
}

enum CanvasFontStretchOptions {
  condensed(r'condensed'),
  expanded(r'expanded'),
  extraCondensed(r'extra-condensed'),
  extraExpanded(r'extra-expanded'),
  normal(r'normal'),
  semiCondensed(r'semi-condensed'),
  semiExpanded(r'semi-expanded'),
  ultraCondensed(r'ultra-condensed'),
  ultraExpanded(r'ultra-expanded');

  const CanvasFontStretchOptions(this.value);

  final _i2.String value;
}

enum CanvasFontVariantCapsOptions {
  allPetiteCaps(r'all-petite-caps'),
  allSmallCaps(r'all-small-caps'),
  normal(r'normal'),
  petiteCaps(r'petite-caps'),
  smallCaps(r'small-caps'),
  titlingCaps(r'titling-caps'),
  unicase(r'unicase');

  const CanvasFontVariantCapsOptions(this.value);

  final _i2.String value;
}

enum CanvasLineCapOptions {
  butt(r'butt'),
  round(r'round'),
  square(r'square');

  const CanvasLineCapOptions(this.value);

  final _i2.String value;
}

enum CanvasLineJoinOptions {
  bevel(r'bevel'),
  miter(r'miter'),
  round(r'round');

  const CanvasLineJoinOptions(this.value);

  final _i2.String value;
}

enum CanvasTextAlignOptions {
  center(r'center'),
  end(r'end'),
  left(r'left'),
  right(r'right'),
  start(r'start');

  const CanvasTextAlignOptions(this.value);

  final _i2.String value;
}

enum CanvasTextBaselineOptions {
  alphabetic(r'alphabetic'),
  bottom(r'bottom'),
  hanging(r'hanging'),
  ideographic(r'ideographic'),
  middle(r'middle'),
  top(r'top');

  const CanvasTextBaselineOptions(this.value);

  final _i2.String value;
}

enum CanvasTextRenderingOptions {
  auto(r'auto'),
  geometricPrecision(r'geometricPrecision'),
  optimizeLegibility(r'optimizeLegibility'),
  optimizeSpeed(r'optimizeSpeed');

  const CanvasTextRenderingOptions(this.value);

  final _i2.String value;
}

enum ClientTypesOptions {
  all(r'all'),
  sharedworker(r'sharedworker'),
  window(r'window'),
  worker(r'worker');

  const ClientTypesOptions(this.value);

  final _i2.String value;
}

enum CodecStateOptions {
  closed(r'closed'),
  configured(r'configured'),
  unconfigured(r'unconfigured');

  const CodecStateOptions(this.value);

  final _i2.String value;
}

enum ColorGamutOptions {
  p3(r'p3'),
  rec2020(r'rec2020'),
  srgb(r'srgb');

  const ColorGamutOptions(this.value);

  final _i2.String value;
}

enum ColorSpaceConversionOptions {
  default$(r'default'),
  none(r'none');

  const ColorSpaceConversionOptions(this.value);

  final _i2.String value;
}

enum CompressionFormatOptions {
  deflate(r'deflate'),
  deflateRaw(r'deflate-raw'),
  gzip(r'gzip');

  const CompressionFormatOptions(this.value);

  final _i2.String value;
}

enum DocumentVisibilityStateOptions {
  hidden(r'hidden'),
  visible(r'visible');

  const DocumentVisibilityStateOptions(this.value);

  final _i2.String value;
}

enum EncodedVideoChunkTypeOptions {
  delta(r'delta'),
  key(r'key');

  const EncodedVideoChunkTypeOptions(this.value);

  final _i2.String value;
}

enum EndingTypeOptions {
  native(r'native'),
  transparent(r'transparent');

  const EndingTypeOptions(this.value);

  final _i2.String value;
}

enum FileSystemHandleKindOptions {
  directory(r'directory'),
  file(r'file');

  const FileSystemHandleKindOptions(this.value);

  final _i2.String value;
}

enum FontDisplayOptions {
  auto(r'auto'),
  block(r'block'),
  fallback(r'fallback'),
  optional(r'optional'),
  swap(r'swap');

  const FontDisplayOptions(this.value);

  final _i2.String value;
}

enum FontFaceLoadStatusOptions {
  error(r'error'),
  loaded(r'loaded'),
  loading(r'loading'),
  unloaded(r'unloaded');

  const FontFaceLoadStatusOptions(this.value);

  final _i2.String value;
}

enum FontFaceSetLoadStatusOptions {
  loaded(r'loaded'),
  loading(r'loading');

  const FontFaceSetLoadStatusOptions(this.value);

  final _i2.String value;
}

enum FrameTypeOptions {
  auxiliary(r'auxiliary'),
  nested(r'nested'),
  none(r'none'),
  topLevel(r'top-level');

  const FrameTypeOptions(this.value);

  final _i2.String value;
}

enum GlobalCompositeOperationOptions {
  color(r'color'),
  colorBurn(r'color-burn'),
  colorDodge(r'color-dodge'),
  copy(r'copy'),
  darken(r'darken'),
  destinationAtop(r'destination-atop'),
  destinationIn(r'destination-in'),
  destinationOut(r'destination-out'),
  destinationOver(r'destination-over'),
  difference(r'difference'),
  exclusion(r'exclusion'),
  hardLight(r'hard-light'),
  hue(r'hue'),
  lighten(r'lighten'),
  lighter(r'lighter'),
  luminosity(r'luminosity'),
  multiply(r'multiply'),
  overlay(r'overlay'),
  saturation(r'saturation'),
  screen(r'screen'),
  softLight(r'soft-light'),
  sourceAtop(r'source-atop'),
  sourceIn(r'source-in'),
  sourceOut(r'source-out'),
  sourceOver(r'source-over'),
  xor(r'xor');

  const GlobalCompositeOperationOptions(this.value);

  final _i2.String value;
}

enum HardwareAccelerationOptions {
  noPreference(r'no-preference'),
  preferHardware(r'prefer-hardware'),
  preferSoftware(r'prefer-software');

  const HardwareAccelerationOptions(this.value);

  final _i2.String value;
}

enum HdrMetadataTypeOptions {
  smpteSt2086(r'smpteSt2086'),
  smpteSt209410(r'smpteSt2094-10'),
  smpteSt209440(r'smpteSt2094-40');

  const HdrMetadataTypeOptions(this.value);

  final _i2.String value;
}

enum IDBCursorDirectionOptions {
  next(r'next'),
  nextunique(r'nextunique'),
  prev(r'prev'),
  prevunique(r'prevunique');

  const IDBCursorDirectionOptions(this.value);

  final _i2.String value;
}

enum IDBRequestReadyStateOptions {
  done(r'done'),
  pending(r'pending');

  const IDBRequestReadyStateOptions(this.value);

  final _i2.String value;
}

enum IDBTransactionDurabilityOptions {
  default$(r'default'),
  relaxed(r'relaxed'),
  strict(r'strict');

  const IDBTransactionDurabilityOptions(this.value);

  final _i2.String value;
}

enum IDBTransactionModeOptions {
  readonly(r'readonly'),
  readwrite(r'readwrite'),
  versionchange(r'versionchange');

  const IDBTransactionModeOptions(this.value);

  final _i2.String value;
}

enum ImageOrientationOptions {
  flipY(r'flipY'),
  fromImage(r'from-image'),
  none(r'none');

  const ImageOrientationOptions(this.value);

  final _i2.String value;
}

enum ImageSmoothingQualityOptions {
  high(r'high'),
  low(r'low'),
  medium(r'medium');

  const ImageSmoothingQualityOptions(this.value);

  final _i2.String value;
}

enum KeyFormatOptions {
  jwk(r'jwk'),
  pkcs8(r'pkcs8'),
  raw(r'raw'),
  spki(r'spki');

  const KeyFormatOptions(this.value);

  final _i2.String value;
}

enum KeyTypeOptions {
  private(r'private'),
  public(r'public'),
  secret(r'secret');

  const KeyTypeOptions(this.value);

  final _i2.String value;
}

enum KeyUsageOptions {
  decrypt(r'decrypt'),
  deriveBits(r'deriveBits'),
  deriveKey(r'deriveKey'),
  encrypt(r'encrypt'),
  sign(r'sign'),
  unwrapKey(r'unwrapKey'),
  verify(r'verify'),
  wrapKey(r'wrapKey');

  const KeyUsageOptions(this.value);

  final _i2.String value;
}

enum LatencyModeOptions {
  quality(r'quality'),
  realtime(r'realtime');

  const LatencyModeOptions(this.value);

  final _i2.String value;
}

enum LockModeOptions {
  exclusive(r'exclusive'),
  shared(r'shared');

  const LockModeOptions(this.value);

  final _i2.String value;
}

enum MediaDecodingTypeOptions {
  file(r'file'),
  mediaSource(r'media-source'),
  webrtc(r'webrtc');

  const MediaDecodingTypeOptions(this.value);

  final _i2.String value;
}

enum MediaEncodingTypeOptions {
  record(r'record'),
  webrtc(r'webrtc');

  const MediaEncodingTypeOptions(this.value);

  final _i2.String value;
}

enum NotificationDirectionOptions {
  auto(r'auto'),
  ltr(r'ltr'),
  rtl(r'rtl');

  const NotificationDirectionOptions(this.value);

  final _i2.String value;
}

enum NotificationPermissionOptions {
  default$(r'default'),
  denied(r'denied'),
  granted(r'granted');

  const NotificationPermissionOptions(this.value);

  final _i2.String value;
}

enum OffscreenRenderingContextIdOptions {
  n2d(r'2d'),
  bitmaprenderer(r'bitmaprenderer'),
  webgl(r'webgl'),
  webgl2(r'webgl2'),
  webgpu(r'webgpu');

  const OffscreenRenderingContextIdOptions(this.value);

  final _i2.String value;
}

enum PermissionNameOptions {
  geolocation(r'geolocation'),
  notifications(r'notifications'),
  persistentStorage(r'persistent-storage'),
  push(r'push'),
  screenWakeLock(r'screen-wake-lock'),
  xrSpatialTracking(r'xr-spatial-tracking');

  const PermissionNameOptions(this.value);

  final _i2.String value;
}

enum PermissionStateOptions {
  denied(r'denied'),
  granted(r'granted'),
  prompt(r'prompt');

  const PermissionStateOptions(this.value);

  final _i2.String value;
}

enum PredefinedColorSpaceOptions {
  displayP3(r'display-p3'),
  srgb(r'srgb');

  const PredefinedColorSpaceOptions(this.value);

  final _i2.String value;
}

enum PremultiplyAlphaOptions {
  default$(r'default'),
  none(r'none'),
  premultiply(r'premultiply');

  const PremultiplyAlphaOptions(this.value);

  final _i2.String value;
}

enum PushEncryptionKeyNameOptions {
  auth(r'auth'),
  p256dh(r'p256dh');

  const PushEncryptionKeyNameOptions(this.value);

  final _i2.String value;
}

enum RTCEncodedVideoFrameTypeOptions {
  delta(r'delta'),
  empty(r'empty'),
  key(r'key');

  const RTCEncodedVideoFrameTypeOptions(this.value);

  final _i2.String value;
}

enum ReferrerPolicyOptions {
  empty(r''),
  noReferrer(r'no-referrer'),
  noReferrerWhenDowngrade(r'no-referrer-when-downgrade'),
  origin(r'origin'),
  originWhenCrossOrigin(r'origin-when-cross-origin'),
  sameOrigin(r'same-origin'),
  strictOrigin(r'strict-origin'),
  strictOriginWhenCrossOrigin(r'strict-origin-when-cross-origin'),
  unsafeUrl(r'unsafe-url');

  const ReferrerPolicyOptions(this.value);

  final _i2.String value;
}

enum RequestCacheOptions {
  default$(r'default'),
  forceCache(r'force-cache'),
  noCache(r'no-cache'),
  noStore(r'no-store'),
  onlyIfCached(r'only-if-cached'),
  reload(r'reload');

  const RequestCacheOptions(this.value);

  final _i2.String value;
}

enum RequestCredentialsOptions {
  include(r'include'),
  omit(r'omit'),
  sameOrigin(r'same-origin');

  const RequestCredentialsOptions(this.value);

  final _i2.String value;
}

enum RequestDestinationOptions {
  empty(r''),
  audio(r'audio'),
  audioworklet(r'audioworklet'),
  document(r'document'),
  embed(r'embed'),
  font(r'font'),
  frame(r'frame'),
  iframe(r'iframe'),
  image(r'image'),
  manifest(r'manifest'),
  object(r'object'),
  paintworklet(r'paintworklet'),
  report(r'report'),
  script(r'script'),
  sharedworker(r'sharedworker'),
  style(r'style'),
  track(r'track'),
  video(r'video'),
  worker(r'worker'),
  xslt(r'xslt');

  const RequestDestinationOptions(this.value);

  final _i2.String value;
}

enum RequestModeOptions {
  cors(r'cors'),
  navigate(r'navigate'),
  noCors(r'no-cors'),
  sameOrigin(r'same-origin');

  const RequestModeOptions(this.value);

  final _i2.String value;
}

enum RequestRedirectOptions {
  error(r'error'),
  follow(r'follow'),
  manual(r'manual');

  const RequestRedirectOptions(this.value);

  final _i2.String value;
}

enum ResizeQualityOptions {
  high(r'high'),
  low(r'low'),
  medium(r'medium'),
  pixelated(r'pixelated');

  const ResizeQualityOptions(this.value);

  final _i2.String value;
}

enum ResponseTypeOptions {
  basic(r'basic'),
  cors(r'cors'),
  default$(r'default'),
  error(r'error'),
  opaque(r'opaque'),
  opaqueredirect(r'opaqueredirect');

  const ResponseTypeOptions(this.value);

  final _i2.String value;
}

enum SecurityPolicyViolationEventDispositionOptions {
  enforce(r'enforce'),
  report(r'report');

  const SecurityPolicyViolationEventDispositionOptions(this.value);

  final _i2.String value;
}

enum ServiceWorkerStateOptions {
  activated(r'activated'),
  activating(r'activating'),
  installed(r'installed'),
  installing(r'installing'),
  parsed(r'parsed'),
  redundant(r'redundant');

  const ServiceWorkerStateOptions(this.value);

  final _i2.String value;
}

enum ServiceWorkerUpdateViaCacheOptions {
  all(r'all'),
  imports(r'imports'),
  none(r'none');

  const ServiceWorkerUpdateViaCacheOptions(this.value);

  final _i2.String value;
}

enum TransferFunctionOptions {
  hlg(r'hlg'),
  pq(r'pq'),
  srgb(r'srgb');

  const TransferFunctionOptions(this.value);

  final _i2.String value;
}

enum VideoColorPrimariesOptions {
  bt470bg(r'bt470bg'),
  bt709(r'bt709'),
  smpte170m(r'smpte170m');

  const VideoColorPrimariesOptions(this.value);

  final _i2.String value;
}

enum VideoEncoderBitrateModeOptions {
  constant(r'constant'),
  quantizer(r'quantizer'),
  variable(r'variable');

  const VideoEncoderBitrateModeOptions(this.value);

  final _i2.String value;
}

enum VideoMatrixCoefficientsOptions {
  bt470bg(r'bt470bg'),
  bt709(r'bt709'),
  rgb(r'rgb'),
  smpte170m(r'smpte170m');

  const VideoMatrixCoefficientsOptions(this.value);

  final _i2.String value;
}

enum VideoPixelFormatOptions {
  bgra(r'BGRA'),
  bgrx(r'BGRX'),
  i420(r'I420'),
  i420a(r'I420A'),
  i422(r'I422'),
  i444(r'I444'),
  nv12(r'NV12'),
  rgba(r'RGBA'),
  rgbx(r'RGBX');

  const VideoPixelFormatOptions(this.value);

  final _i2.String value;
}

enum VideoTransferCharacteristicsOptions {
  bt709(r'bt709'),
  iec6196621(r'iec61966-2-1'),
  smpte170m(r'smpte170m');

  const VideoTransferCharacteristicsOptions(this.value);

  final _i2.String value;
}

enum WebGLPowerPreferenceOptions {
  default$(r'default'),
  highPerformance(r'high-performance'),
  lowPower(r'low-power');

  const WebGLPowerPreferenceOptions(this.value);

  final _i2.String value;
}

enum WebTransportCongestionControlOptions {
  default$(r'default'),
  lowLatency(r'low-latency'),
  throughput(r'throughput');

  const WebTransportCongestionControlOptions(this.value);

  final _i2.String value;
}

enum WebTransportErrorSourceOptions {
  session(r'session'),
  stream(r'stream');

  const WebTransportErrorSourceOptions(this.value);

  final _i2.String value;
}

enum WorkerTypeOptions {
  classic(r'classic'),
  module(r'module');

  const WorkerTypeOptions(this.value);

  final _i2.String value;
}

enum WriteCommandTypeOptions {
  seek(r'seek'),
  truncate(r'truncate'),
  write(r'write');

  const WriteCommandTypeOptions(this.value);

  final _i2.String value;
}

enum XMLHttpRequestResponseTypeOptions {
  empty(r''),
  arraybuffer(r'arraybuffer'),
  blob(r'blob'),
  document(r'document'),
  json(r'json'),
  text(r'text');

  const XMLHttpRequestResponseTypeOptions(this.value);

  final _i2.String value;
}

/* Source:  WorkerGlobalScope & typeof globalThis */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class _Intersection7 implements _i3.WorkerGlobalScope, _GlobalThis {}

/* Source: ForcedCommon from  ReadableStreamReadValueResult<T> | ReadableStreamReadDoneResult<T> */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class ReadableStreamReadResultCommon<T> {}

extension ReadableStreamReadResultCommon$Typings<T>
    on ReadableStreamReadResultCommon<T> {
  _i2.bool get done => _i4.getProperty(
        this,
        'done',
      );
  set done(_i2.bool value) {
    _i4.setProperty(
      this,
      'done',
      value,
    );
  }

  T get value => _i4.getProperty(
        this,
        'value',
      );
  set value(T value) {
    _i4.setProperty(
      this,
      'value',
      value,
    );
  }
}

/* Source:  WorkerGlobalScope & typeof globalThis */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class _Intersection8 implements _i3.WorkerGlobalScope, _GlobalThis {}

typedef AlgorithmIdentifier = _i2.Object;
typedef AllowSharedBufferSource = _i2.Object;
typedef BigInteger = _i5.Uint8List;
typedef BinaryData = _i2.Object;
typedef BlobPart = _i2.Object;
typedef BodyInit = _i2.Object;
typedef BufferSource = _i2.Object;
typedef CSSKeywordish = _i2.Object;
typedef CSSNumberish = _i2.Object;
typedef CSSPerspectiveValue = _i2.Object;
typedef CSSUnparsedSegment = _i2.Object;
typedef CanvasImageSource = _i2.Object;
typedef DOMHighResTimeStamp = _i2.num;
typedef EpochTimeStamp = _i2.num;
typedef EventListenerOrEventListenerObject = _i2.Object;
typedef FileSystemWriteChunkType = _i2.Object;
typedef Float32List = _i2.Object;
typedef FormDataEntryValue = _i2.Object;
typedef GLbitfield = _i2.num;
typedef GLboolean = _i2.bool;
typedef GLclampf = _i2.num;
typedef GLenum = _i2.num;
typedef GLfloat = _i2.num;
typedef GLint = _i2.num;
typedef GLint64 = _i2.num;
typedef GLintptr = _i2.num;
typedef GLsizei = _i2.num;
typedef GLsizeiptr = _i2.num;
typedef GLuint = _i2.num;
typedef GLuint64 = _i2.num;
typedef HashAlgorithmIdentifier = _i2.Object;
typedef HeadersInit = _i2.Object;
typedef IDBValidKey = _i2.Object;
typedef ImageBitmapSource = _i2.Object;
typedef Int32List = _i2.Object;
typedef MessageEventSource = _i3.EventTarget;
typedef NamedCurve = _i2.String;
typedef OffscreenRenderingContext = _i2.Object;
typedef OnErrorEventHandler = _i3.OnErrorEventHandlerNonNull?;
typedef PerformanceEntryList = _i2.List<_i3.PerformanceEntry>;
typedef PushMessageDataInit = _i2.Object;
typedef ReadableStreamController<T> = _i2.Object;
typedef ReadableStreamReadResult<T>
    = _i3.ReadableStreamReadResultCommon<_i2.dynamic>;
typedef ReadableStreamReader<T> = _i3.ReadableStreamGenericReader;
typedef ReportList = _i2.List<_i3.Report>;
typedef RequestInfo = _i2.Object;
typedef TexImageSource = _i2.Object;
typedef TimerHandler = _i2.Object;
typedef Transferable = _i2.Object;
typedef Uint32List = _i2.Object;
typedef VibratePattern = _i2.Object;
typedef XMLHttpRequestBodyInit = _i2.Object;
typedef AlphaOption = _i3.AlphaOptionOptions;
typedef AvcBitstreamFormat = _i3.AvcBitstreamFormatOptions;
typedef BinaryType = _i3.BinaryTypeOptions;
typedef CSSMathOperator = _i3.CSSMathOperatorOptions;
typedef CSSNumericBaseType = _i3.CSSNumericBaseTypeOptions;
typedef CanvasDirection = _i3.CanvasDirectionOptions;
typedef CanvasFillRule = _i3.CanvasFillRuleOptions;
typedef CanvasFontKerning = _i3.CanvasFontKerningOptions;
typedef CanvasFontStretch = _i3.CanvasFontStretchOptions;
typedef CanvasFontVariantCaps = _i3.CanvasFontVariantCapsOptions;
typedef CanvasLineCap = _i3.CanvasLineCapOptions;
typedef CanvasLineJoin = _i3.CanvasLineJoinOptions;
typedef CanvasTextAlign = _i3.CanvasTextAlignOptions;
typedef CanvasTextBaseline = _i3.CanvasTextBaselineOptions;
typedef CanvasTextRendering = _i3.CanvasTextRenderingOptions;
typedef ClientTypes = _i3.ClientTypesOptions;
typedef CodecState = _i3.CodecStateOptions;
typedef ColorGamut = _i3.ColorGamutOptions;
typedef ColorSpaceConversion = _i3.ColorSpaceConversionOptions;
typedef CompressionFormat = _i3.CompressionFormatOptions;
typedef DocumentVisibilityState = _i3.DocumentVisibilityStateOptions;
typedef EncodedVideoChunkType = _i3.EncodedVideoChunkTypeOptions;
typedef EndingType = _i3.EndingTypeOptions;
typedef FileSystemHandleKind = _i3.FileSystemHandleKindOptions;
typedef FontDisplay = _i3.FontDisplayOptions;
typedef FontFaceLoadStatus = _i3.FontFaceLoadStatusOptions;
typedef FontFaceSetLoadStatus = _i3.FontFaceSetLoadStatusOptions;
typedef FrameType = _i3.FrameTypeOptions;
typedef GlobalCompositeOperation = _i3.GlobalCompositeOperationOptions;
typedef HardwareAcceleration = _i3.HardwareAccelerationOptions;
typedef HdrMetadataType = _i3.HdrMetadataTypeOptions;
typedef IDBCursorDirection = _i3.IDBCursorDirectionOptions;
typedef IDBRequestReadyState = _i3.IDBRequestReadyStateOptions;
typedef IDBTransactionDurability = _i3.IDBTransactionDurabilityOptions;
typedef IDBTransactionMode = _i3.IDBTransactionModeOptions;
typedef ImageOrientation = _i3.ImageOrientationOptions;
typedef ImageSmoothingQuality = _i3.ImageSmoothingQualityOptions;
typedef KeyFormat = _i3.KeyFormatOptions;
typedef KeyType = _i3.KeyTypeOptions;
typedef KeyUsage = _i3.KeyUsageOptions;
typedef LatencyMode = _i3.LatencyModeOptions;
typedef LockMode = _i3.LockModeOptions;
typedef MediaDecodingType = _i3.MediaDecodingTypeOptions;
typedef MediaEncodingType = _i3.MediaEncodingTypeOptions;
typedef NotificationDirection = _i3.NotificationDirectionOptions;
typedef NotificationPermission = _i3.NotificationPermissionOptions;
typedef OffscreenRenderingContextId = _i3.OffscreenRenderingContextIdOptions;
typedef PermissionName = _i3.PermissionNameOptions;
typedef PermissionState = _i3.PermissionStateOptions;
typedef PredefinedColorSpace = _i3.PredefinedColorSpaceOptions;
typedef PremultiplyAlpha = _i3.PremultiplyAlphaOptions;
typedef PushEncryptionKeyName = _i3.PushEncryptionKeyNameOptions;
typedef RTCEncodedVideoFrameType = _i3.RTCEncodedVideoFrameTypeOptions;
typedef ReadableStreamReaderMode = _i2.String;
typedef ReadableStreamType = _i2.String;
typedef ReferrerPolicy = _i3.ReferrerPolicyOptions;
typedef RequestCache = _i3.RequestCacheOptions;
typedef RequestCredentials = _i3.RequestCredentialsOptions;
typedef RequestDestination = _i3.RequestDestinationOptions;
typedef RequestMode = _i3.RequestModeOptions;
typedef RequestRedirect = _i3.RequestRedirectOptions;
typedef ResizeQuality = _i3.ResizeQualityOptions;
typedef ResponseType = _i3.ResponseTypeOptions;
typedef SecurityPolicyViolationEventDisposition
    = _i3.SecurityPolicyViolationEventDispositionOptions;
typedef ServiceWorkerState = _i3.ServiceWorkerStateOptions;
typedef ServiceWorkerUpdateViaCache = _i3.ServiceWorkerUpdateViaCacheOptions;
typedef TransferFunction = _i3.TransferFunctionOptions;
typedef VideoColorPrimaries = _i3.VideoColorPrimariesOptions;
typedef VideoEncoderBitrateMode = _i3.VideoEncoderBitrateModeOptions;
typedef VideoMatrixCoefficients = _i3.VideoMatrixCoefficientsOptions;
typedef VideoPixelFormat = _i3.VideoPixelFormatOptions;
typedef VideoTransferCharacteristics = _i3.VideoTransferCharacteristicsOptions;
typedef WebGLPowerPreference = _i3.WebGLPowerPreferenceOptions;
typedef WebTransportCongestionControl
    = _i3.WebTransportCongestionControlOptions;
typedef WebTransportErrorSource = _i3.WebTransportErrorSourceOptions;
typedef WorkerType = _i3.WorkerTypeOptions;
typedef WriteCommandType = _i3.WriteCommandTypeOptions;
typedef XMLHttpRequestResponseType = _i3.XMLHttpRequestResponseTypeOptions;

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class AddEventListenerOptions implements _i3.EventListenerOptions {
  external factory AddEventListenerOptions._({
    _i2.dynamic once,
    _i2.dynamic passive,
    _i2.dynamic signal,
    _i2.dynamic capture,
  });

  factory AddEventListenerOptions({
    _i2.bool? once,
    _i2.bool? passive,
    _i3.AbortSignal? signal,
    _i2.bool? capture,
  }) =>
      AddEventListenerOptions._(
        once: once,
        passive: passive,
        signal: signal ?? _i6.undefined,
        capture: capture,
      );
}

extension AddEventListenerOptions$Typings on AddEventListenerOptions {
  _i2.bool? get once => _i4.getProperty(
        this,
        'once',
      );
  set once(_i2.bool? value) {
    _i4.setProperty(
      this,
      'once',
      value ?? _i6.undefined,
    );
  }

  _i2.bool? get passive => _i4.getProperty(
        this,
        'passive',
      );
  set passive(_i2.bool? value) {
    _i4.setProperty(
      this,
      'passive',
      value ?? _i6.undefined,
    );
  }

  _i3.AbortSignal? get signal => _i4.getProperty(
        this,
        'signal',
      );
  set signal(_i3.AbortSignal? value) {
    _i4.setProperty(
      this,
      'signal',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class AesCbcParams implements _i3.Algorithm {
  external factory AesCbcParams._({
    _i2.dynamic iv,
    _i2.dynamic name,
  });

  factory AesCbcParams({
    _i2.Object? iv,
    _i2.String? name,
  }) =>
      AesCbcParams._(
        iv: iv ?? _i6.undefined,
        name: name,
      );
}

extension AesCbcParams$Typings on AesCbcParams {
  _i2.Object get iv => _i4.getProperty(
        this,
        'iv',
      );
  set iv(_i2.Object value) {
    _i4.setProperty(
      this,
      'iv',
      value,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class AesCtrParams implements _i3.Algorithm {
  external factory AesCtrParams._({
    _i2.dynamic counter,
    _i2.dynamic length,
    _i2.dynamic name,
  });

  factory AesCtrParams({
    _i2.Object? counter,
    _i2.num? length,
    _i2.String? name,
  }) =>
      AesCtrParams._(
        counter: counter ?? _i6.undefined,
        length: length,
        name: name,
      );
}

extension AesCtrParams$Typings on AesCtrParams {
  _i2.Object get counter => _i4.getProperty(
        this,
        'counter',
      );
  set counter(_i2.Object value) {
    _i4.setProperty(
      this,
      'counter',
      value,
    );
  }

  _i2.num get length => _i4.getProperty(
        this,
        'length',
      );
  set length(_i2.num value) {
    _i4.setProperty(
      this,
      'length',
      value,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class AesDerivedKeyParams implements _i3.Algorithm {
  external factory AesDerivedKeyParams._({
    _i2.dynamic length,
    _i2.dynamic name,
  });

  factory AesDerivedKeyParams({
    _i2.num? length,
    _i2.String? name,
  }) =>
      AesDerivedKeyParams._(
        length: length,
        name: name,
      );
}

extension AesDerivedKeyParams$Typings on AesDerivedKeyParams {
  _i2.num get length => _i4.getProperty(
        this,
        'length',
      );
  set length(_i2.num value) {
    _i4.setProperty(
      this,
      'length',
      value,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class AesGcmParams implements _i3.Algorithm {
  external factory AesGcmParams._({
    _i2.dynamic additionalData,
    _i2.dynamic iv,
    _i2.dynamic tagLength,
    _i2.dynamic name,
  });

  factory AesGcmParams({
    _i2.Object? additionalData,
    _i2.Object? iv,
    _i2.num? tagLength,
    _i2.String? name,
  }) =>
      AesGcmParams._(
        additionalData: additionalData ?? _i6.undefined,
        iv: iv ?? _i6.undefined,
        tagLength: tagLength,
        name: name,
      );
}

extension AesGcmParams$Typings on AesGcmParams {
  _i2.Object? get additionalData => _i4.getProperty(
        this,
        'additionalData',
      );
  set additionalData(_i2.Object? value) {
    _i4.setProperty(
      this,
      'additionalData',
      value ?? _i6.undefined ?? _i6.undefined,
    );
  }

  _i2.Object get iv => _i4.getProperty(
        this,
        'iv',
      );
  set iv(_i2.Object value) {
    _i4.setProperty(
      this,
      'iv',
      value,
    );
  }

  _i2.num? get tagLength => _i4.getProperty(
        this,
        'tagLength',
      );
  set tagLength(_i2.num? value) {
    _i4.setProperty(
      this,
      'tagLength',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class AesKeyAlgorithm implements _i3.KeyAlgorithm {
  external factory AesKeyAlgorithm._({
    _i2.dynamic length,
    _i2.dynamic name,
  });

  factory AesKeyAlgorithm({
    _i2.num? length,
    _i2.String? name,
  }) =>
      AesKeyAlgorithm._(
        length: length,
        name: name,
      );
}

extension AesKeyAlgorithm$Typings on AesKeyAlgorithm {
  _i2.num get length => _i4.getProperty(
        this,
        'length',
      );
  set length(_i2.num value) {
    _i4.setProperty(
      this,
      'length',
      value,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class AesKeyGenParams implements _i3.Algorithm {
  external factory AesKeyGenParams._({
    _i2.dynamic length,
    _i2.dynamic name,
  });

  factory AesKeyGenParams({
    _i2.num? length,
    _i2.String? name,
  }) =>
      AesKeyGenParams._(
        length: length,
        name: name,
      );
}

extension AesKeyGenParams$Typings on AesKeyGenParams {
  _i2.num get length => _i4.getProperty(
        this,
        'length',
      );
  set length(_i2.num value) {
    _i4.setProperty(
      this,
      'length',
      value,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class Algorithm {
  external factory Algorithm._({_i2.dynamic name});

  factory Algorithm({_i2.String? name}) => Algorithm._(name: name);
}

extension Algorithm$Typings on Algorithm {
  _i2.String get name => _i4.getProperty(
        this,
        'name',
      );
  set name(_i2.String value) {
    _i4.setProperty(
      this,
      'name',
      value,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class AudioConfiguration {
  external factory AudioConfiguration._({
    _i2.dynamic bitrate,
    _i2.dynamic channels,
    _i2.dynamic contentType,
    _i2.dynamic samplerate,
    _i2.dynamic spatialRendering,
  });

  factory AudioConfiguration({
    _i2.num? bitrate,
    _i2.String? channels,
    _i2.String? contentType,
    _i2.num? samplerate,
    _i2.bool? spatialRendering,
  }) =>
      AudioConfiguration._(
        bitrate: bitrate,
        channels: channels,
        contentType: contentType,
        samplerate: samplerate,
        spatialRendering: spatialRendering,
      );
}

extension AudioConfiguration$Typings on AudioConfiguration {
  _i2.num? get bitrate => _i4.getProperty(
        this,
        'bitrate',
      );
  set bitrate(_i2.num? value) {
    _i4.setProperty(
      this,
      'bitrate',
      value ?? _i6.undefined,
    );
  }

  _i2.String? get channels => _i4.getProperty(
        this,
        'channels',
      );
  set channels(_i2.String? value) {
    _i4.setProperty(
      this,
      'channels',
      value ?? _i6.undefined,
    );
  }

  _i2.String get contentType => _i4.getProperty(
        this,
        'contentType',
      );
  set contentType(_i2.String value) {
    _i4.setProperty(
      this,
      'contentType',
      value,
    );
  }

  _i2.num? get samplerate => _i4.getProperty(
        this,
        'samplerate',
      );
  set samplerate(_i2.num? value) {
    _i4.setProperty(
      this,
      'samplerate',
      value ?? _i6.undefined,
    );
  }

  _i2.bool? get spatialRendering => _i4.getProperty(
        this,
        'spatialRendering',
      );
  set spatialRendering(_i2.bool? value) {
    _i4.setProperty(
      this,
      'spatialRendering',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class AvcEncoderConfig {
  external factory AvcEncoderConfig._({_i2.dynamic format});

  factory AvcEncoderConfig({_i3.AvcBitstreamFormat? format}) =>
      AvcEncoderConfig._(format: format?.name ?? _i6.undefined);
}

extension AvcEncoderConfig$Typings on AvcEncoderConfig {
  _i3.AvcBitstreamFormat? get format => switch (_i4.getProperty(
        this,
        'format',
      )) {
        _i2.String name => _i3.AvcBitstreamFormatOptions.values.byName(name),
        _ => null
      };
  set format(_i3.AvcBitstreamFormat? value) {
    _i4.setProperty(
      this,
      'format',
      value?.name ?? _i6.undefined ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class BlobPropertyBag {
  external factory BlobPropertyBag._({
    _i2.dynamic endings,
    _i2.dynamic type,
  });

  factory BlobPropertyBag({
    _i3.EndingType? endings,
    _i2.String? type,
  }) =>
      BlobPropertyBag._(
        endings: endings?.name ?? _i6.undefined,
        type: type,
      );
}

extension BlobPropertyBag$Typings on BlobPropertyBag {
  _i3.EndingType? get endings => switch (_i4.getProperty(
        this,
        'endings',
      )) {
        _i2.String name => _i3.EndingTypeOptions.values.byName(name),
        _ => null
      };
  set endings(_i3.EndingType? value) {
    _i4.setProperty(
      this,
      'endings',
      value?.name ?? _i6.undefined ?? _i6.undefined,
    );
  }

  _i2.String? get type => _i4.getProperty(
        this,
        'type',
      );
  set type(_i2.String? value) {
    _i4.setProperty(
      this,
      'type',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class CSSMatrixComponentOptions {
  external factory CSSMatrixComponentOptions._({_i2.dynamic is2D});

  factory CSSMatrixComponentOptions({_i2.bool? is2D}) =>
      CSSMatrixComponentOptions._(is2D: is2D);
}

extension CSSMatrixComponentOptions$Typings on CSSMatrixComponentOptions {
  _i2.bool? get is2D => _i4.getProperty(
        this,
        'is2D',
      );
  set is2D(_i2.bool? value) {
    _i4.setProperty(
      this,
      'is2D',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class CSSNumericType {
  external factory CSSNumericType._({
    _i2.dynamic angle,
    _i2.dynamic flex,
    _i2.dynamic frequency,
    _i2.dynamic length,
    _i2.dynamic percent,
    _i2.dynamic percentHint,
    _i2.dynamic resolution,
    _i2.dynamic time,
  });

  factory CSSNumericType({
    _i2.num? angle,
    _i2.num? flex,
    _i2.num? frequency,
    _i2.num? length,
    _i2.num? percent,
    _i3.CSSNumericBaseType? percentHint,
    _i2.num? resolution,
    _i2.num? time,
  }) =>
      CSSNumericType._(
        angle: angle,
        flex: flex,
        frequency: frequency,
        length: length,
        percent: percent,
        percentHint: percentHint?.name ?? _i6.undefined,
        resolution: resolution,
        time: time,
      );
}

extension CSSNumericType$Typings on CSSNumericType {
  _i2.num? get angle => _i4.getProperty(
        this,
        'angle',
      );
  set angle(_i2.num? value) {
    _i4.setProperty(
      this,
      'angle',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get flex => _i4.getProperty(
        this,
        'flex',
      );
  set flex(_i2.num? value) {
    _i4.setProperty(
      this,
      'flex',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get frequency => _i4.getProperty(
        this,
        'frequency',
      );
  set frequency(_i2.num? value) {
    _i4.setProperty(
      this,
      'frequency',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get length => _i4.getProperty(
        this,
        'length',
      );
  set length(_i2.num? value) {
    _i4.setProperty(
      this,
      'length',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get percent => _i4.getProperty(
        this,
        'percent',
      );
  set percent(_i2.num? value) {
    _i4.setProperty(
      this,
      'percent',
      value ?? _i6.undefined,
    );
  }

  _i3.CSSNumericBaseType? get percentHint => switch (_i4.getProperty(
        this,
        'percentHint',
      )) {
        _i2.String name => _i3.CSSNumericBaseTypeOptions.values.byName(name),
        _ => null
      };
  set percentHint(_i3.CSSNumericBaseType? value) {
    _i4.setProperty(
      this,
      'percentHint',
      value?.name ?? _i6.undefined ?? _i6.undefined,
    );
  }

  _i2.num? get resolution => _i4.getProperty(
        this,
        'resolution',
      );
  set resolution(_i2.num? value) {
    _i4.setProperty(
      this,
      'resolution',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get time => _i4.getProperty(
        this,
        'time',
      );
  set time(_i2.num? value) {
    _i4.setProperty(
      this,
      'time',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class CacheQueryOptions {
  external factory CacheQueryOptions._({
    _i2.dynamic ignoreMethod,
    _i2.dynamic ignoreSearch,
    _i2.dynamic ignoreVary,
  });

  factory CacheQueryOptions({
    _i2.bool? ignoreMethod,
    _i2.bool? ignoreSearch,
    _i2.bool? ignoreVary,
  }) =>
      CacheQueryOptions._(
        ignoreMethod: ignoreMethod,
        ignoreSearch: ignoreSearch,
        ignoreVary: ignoreVary,
      );
}

extension CacheQueryOptions$Typings on CacheQueryOptions {
  _i2.bool? get ignoreMethod => _i4.getProperty(
        this,
        'ignoreMethod',
      );
  set ignoreMethod(_i2.bool? value) {
    _i4.setProperty(
      this,
      'ignoreMethod',
      value ?? _i6.undefined,
    );
  }

  _i2.bool? get ignoreSearch => _i4.getProperty(
        this,
        'ignoreSearch',
      );
  set ignoreSearch(_i2.bool? value) {
    _i4.setProperty(
      this,
      'ignoreSearch',
      value ?? _i6.undefined,
    );
  }

  _i2.bool? get ignoreVary => _i4.getProperty(
        this,
        'ignoreVary',
      );
  set ignoreVary(_i2.bool? value) {
    _i4.setProperty(
      this,
      'ignoreVary',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class ClientQueryOptions {
  external factory ClientQueryOptions._({
    _i2.dynamic includeUncontrolled,
    _i2.dynamic type,
  });

  factory ClientQueryOptions({
    _i2.bool? includeUncontrolled,
    _i3.ClientTypes? type,
  }) =>
      ClientQueryOptions._(
        includeUncontrolled: includeUncontrolled,
        type: type?.name ?? _i6.undefined,
      );
}

extension ClientQueryOptions$Typings on ClientQueryOptions {
  _i2.bool? get includeUncontrolled => _i4.getProperty(
        this,
        'includeUncontrolled',
      );
  set includeUncontrolled(_i2.bool? value) {
    _i4.setProperty(
      this,
      'includeUncontrolled',
      value ?? _i6.undefined,
    );
  }

  _i3.ClientTypes? get type => switch (_i4.getProperty(
        this,
        'type',
      )) {
        _i2.String name => _i3.ClientTypesOptions.values.byName(name),
        _ => null
      };
  set type(_i3.ClientTypes? value) {
    _i4.setProperty(
      this,
      'type',
      value?.name ?? _i6.undefined ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class CloseEventInit implements _i3.EventInit {
  external factory CloseEventInit._({
    _i2.dynamic code,
    _i2.dynamic reason,
    _i2.dynamic wasClean,
    _i2.dynamic bubbles,
    _i2.dynamic cancelable,
    _i2.dynamic composed,
  });

  factory CloseEventInit({
    _i2.num? code,
    _i2.String? reason,
    _i2.bool? wasClean,
    _i2.bool? bubbles,
    _i2.bool? cancelable,
    _i2.bool? composed,
  }) =>
      CloseEventInit._(
        code: code,
        reason: reason,
        wasClean: wasClean,
        bubbles: bubbles,
        cancelable: cancelable,
        composed: composed,
      );
}

extension CloseEventInit$Typings on CloseEventInit {
  _i2.num? get code => _i4.getProperty(
        this,
        'code',
      );
  set code(_i2.num? value) {
    _i4.setProperty(
      this,
      'code',
      value ?? _i6.undefined,
    );
  }

  _i2.String? get reason => _i4.getProperty(
        this,
        'reason',
      );
  set reason(_i2.String? value) {
    _i4.setProperty(
      this,
      'reason',
      value ?? _i6.undefined,
    );
  }

  _i2.bool? get wasClean => _i4.getProperty(
        this,
        'wasClean',
      );
  set wasClean(_i2.bool? value) {
    _i4.setProperty(
      this,
      'wasClean',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class CryptoKeyPair {
  external factory CryptoKeyPair._({
    _i2.dynamic privateKey,
    _i2.dynamic publicKey,
  });

  factory CryptoKeyPair({
    _i3.CryptoKey? privateKey,
    _i3.CryptoKey? publicKey,
  }) =>
      CryptoKeyPair._(
        privateKey: privateKey ?? _i6.undefined,
        publicKey: publicKey ?? _i6.undefined,
      );
}

extension CryptoKeyPair$Typings on CryptoKeyPair {
  _i3.CryptoKey get privateKey => _i4.getProperty(
        this,
        'privateKey',
      );
  set privateKey(_i3.CryptoKey value) {
    _i4.setProperty(
      this,
      'privateKey',
      value,
    );
  }

  _i3.CryptoKey get publicKey => _i4.getProperty(
        this,
        'publicKey',
      );
  set publicKey(_i3.CryptoKey value) {
    _i4.setProperty(
      this,
      'publicKey',
      value,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class CustomEventInit<T> implements _i3.EventInit {
  external factory CustomEventInit._({
    _i2.dynamic detail,
    _i2.dynamic bubbles,
    _i2.dynamic cancelable,
    _i2.dynamic composed,
  });

  factory CustomEventInit({
    _i2.dynamic detail,
    _i2.bool? bubbles,
    _i2.bool? cancelable,
    _i2.bool? composed,
  }) =>
      CustomEventInit._(
        detail: detail,
        bubbles: bubbles,
        cancelable: cancelable,
        composed: composed,
      );
}

extension CustomEventInit$Typings<T> on CustomEventInit<T> {
  T? get detail => _i4.getProperty(
        this,
        'detail',
      );
  set detail(T? value) {
    _i4.setProperty(
      this,
      'detail',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class DOMMatrix2DInit {
  external factory DOMMatrix2DInit._({
    _i2.dynamic a,
    _i2.dynamic b,
    _i2.dynamic c,
    _i2.dynamic d,
    _i2.dynamic e,
    _i2.dynamic f,
    _i2.dynamic m11,
    _i2.dynamic m12,
    _i2.dynamic m21,
    _i2.dynamic m22,
    _i2.dynamic m41,
    _i2.dynamic m42,
  });

  factory DOMMatrix2DInit({
    _i2.num? a,
    _i2.num? b,
    _i2.num? c,
    _i2.num? d,
    _i2.num? e,
    _i2.num? f,
    _i2.num? m11,
    _i2.num? m12,
    _i2.num? m21,
    _i2.num? m22,
    _i2.num? m41,
    _i2.num? m42,
  }) =>
      DOMMatrix2DInit._(
        a: a,
        b: b,
        c: c,
        d: d,
        e: e,
        f: f,
        m11: m11,
        m12: m12,
        m21: m21,
        m22: m22,
        m41: m41,
        m42: m42,
      );
}

extension DOMMatrix2DInit$Typings on DOMMatrix2DInit {
  _i2.num? get a => _i4.getProperty(
        this,
        'a',
      );
  set a(_i2.num? value) {
    _i4.setProperty(
      this,
      'a',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get b => _i4.getProperty(
        this,
        'b',
      );
  set b(_i2.num? value) {
    _i4.setProperty(
      this,
      'b',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get c => _i4.getProperty(
        this,
        'c',
      );
  set c(_i2.num? value) {
    _i4.setProperty(
      this,
      'c',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get d => _i4.getProperty(
        this,
        'd',
      );
  set d(_i2.num? value) {
    _i4.setProperty(
      this,
      'd',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get e => _i4.getProperty(
        this,
        'e',
      );
  set e(_i2.num? value) {
    _i4.setProperty(
      this,
      'e',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get f => _i4.getProperty(
        this,
        'f',
      );
  set f(_i2.num? value) {
    _i4.setProperty(
      this,
      'f',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get m11 => _i4.getProperty(
        this,
        'm11',
      );
  set m11(_i2.num? value) {
    _i4.setProperty(
      this,
      'm11',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get m12 => _i4.getProperty(
        this,
        'm12',
      );
  set m12(_i2.num? value) {
    _i4.setProperty(
      this,
      'm12',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get m21 => _i4.getProperty(
        this,
        'm21',
      );
  set m21(_i2.num? value) {
    _i4.setProperty(
      this,
      'm21',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get m22 => _i4.getProperty(
        this,
        'm22',
      );
  set m22(_i2.num? value) {
    _i4.setProperty(
      this,
      'm22',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get m41 => _i4.getProperty(
        this,
        'm41',
      );
  set m41(_i2.num? value) {
    _i4.setProperty(
      this,
      'm41',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get m42 => _i4.getProperty(
        this,
        'm42',
      );
  set m42(_i2.num? value) {
    _i4.setProperty(
      this,
      'm42',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class DOMMatrixInit implements _i3.DOMMatrix2DInit {
  external factory DOMMatrixInit._({
    _i2.dynamic is2D,
    _i2.dynamic m13,
    _i2.dynamic m14,
    _i2.dynamic m23,
    _i2.dynamic m24,
    _i2.dynamic m31,
    _i2.dynamic m32,
    _i2.dynamic m33,
    _i2.dynamic m34,
    _i2.dynamic m43,
    _i2.dynamic m44,
    _i2.dynamic a,
    _i2.dynamic b,
    _i2.dynamic c,
    _i2.dynamic d,
    _i2.dynamic e,
    _i2.dynamic f,
    _i2.dynamic m11,
    _i2.dynamic m12,
    _i2.dynamic m21,
    _i2.dynamic m22,
    _i2.dynamic m41,
    _i2.dynamic m42,
  });

  factory DOMMatrixInit({
    _i2.bool? is2D,
    _i2.num? m13,
    _i2.num? m14,
    _i2.num? m23,
    _i2.num? m24,
    _i2.num? m31,
    _i2.num? m32,
    _i2.num? m33,
    _i2.num? m34,
    _i2.num? m43,
    _i2.num? m44,
    _i2.num? a,
    _i2.num? b,
    _i2.num? c,
    _i2.num? d,
    _i2.num? e,
    _i2.num? f,
    _i2.num? m11,
    _i2.num? m12,
    _i2.num? m21,
    _i2.num? m22,
    _i2.num? m41,
    _i2.num? m42,
  }) =>
      DOMMatrixInit._(
        is2D: is2D,
        m13: m13,
        m14: m14,
        m23: m23,
        m24: m24,
        m31: m31,
        m32: m32,
        m33: m33,
        m34: m34,
        m43: m43,
        m44: m44,
        a: a,
        b: b,
        c: c,
        d: d,
        e: e,
        f: f,
        m11: m11,
        m12: m12,
        m21: m21,
        m22: m22,
        m41: m41,
        m42: m42,
      );
}

extension DOMMatrixInit$Typings on DOMMatrixInit {
  _i2.bool? get is2D => _i4.getProperty(
        this,
        'is2D',
      );
  set is2D(_i2.bool? value) {
    _i4.setProperty(
      this,
      'is2D',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get m13 => _i4.getProperty(
        this,
        'm13',
      );
  set m13(_i2.num? value) {
    _i4.setProperty(
      this,
      'm13',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get m14 => _i4.getProperty(
        this,
        'm14',
      );
  set m14(_i2.num? value) {
    _i4.setProperty(
      this,
      'm14',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get m23 => _i4.getProperty(
        this,
        'm23',
      );
  set m23(_i2.num? value) {
    _i4.setProperty(
      this,
      'm23',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get m24 => _i4.getProperty(
        this,
        'm24',
      );
  set m24(_i2.num? value) {
    _i4.setProperty(
      this,
      'm24',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get m31 => _i4.getProperty(
        this,
        'm31',
      );
  set m31(_i2.num? value) {
    _i4.setProperty(
      this,
      'm31',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get m32 => _i4.getProperty(
        this,
        'm32',
      );
  set m32(_i2.num? value) {
    _i4.setProperty(
      this,
      'm32',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get m33 => _i4.getProperty(
        this,
        'm33',
      );
  set m33(_i2.num? value) {
    _i4.setProperty(
      this,
      'm33',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get m34 => _i4.getProperty(
        this,
        'm34',
      );
  set m34(_i2.num? value) {
    _i4.setProperty(
      this,
      'm34',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get m43 => _i4.getProperty(
        this,
        'm43',
      );
  set m43(_i2.num? value) {
    _i4.setProperty(
      this,
      'm43',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get m44 => _i4.getProperty(
        this,
        'm44',
      );
  set m44(_i2.num? value) {
    _i4.setProperty(
      this,
      'm44',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class DOMPointInit {
  external factory DOMPointInit._({
    _i2.dynamic w,
    _i2.dynamic x,
    _i2.dynamic y,
    _i2.dynamic z,
  });

  factory DOMPointInit({
    _i2.num? w,
    _i2.num? x,
    _i2.num? y,
    _i2.num? z,
  }) =>
      DOMPointInit._(
        w: w,
        x: x,
        y: y,
        z: z,
      );
}

extension DOMPointInit$Typings on DOMPointInit {
  _i2.num? get w => _i4.getProperty(
        this,
        'w',
      );
  set w(_i2.num? value) {
    _i4.setProperty(
      this,
      'w',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get x => _i4.getProperty(
        this,
        'x',
      );
  set x(_i2.num? value) {
    _i4.setProperty(
      this,
      'x',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get y => _i4.getProperty(
        this,
        'y',
      );
  set y(_i2.num? value) {
    _i4.setProperty(
      this,
      'y',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get z => _i4.getProperty(
        this,
        'z',
      );
  set z(_i2.num? value) {
    _i4.setProperty(
      this,
      'z',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class DOMQuadInit {
  external factory DOMQuadInit._({
    _i2.dynamic p1,
    _i2.dynamic p2,
    _i2.dynamic p3,
    _i2.dynamic p4,
  });

  factory DOMQuadInit({
    _i3.DOMPointInit? p1,
    _i3.DOMPointInit? p2,
    _i3.DOMPointInit? p3,
    _i3.DOMPointInit? p4,
  }) =>
      DOMQuadInit._(
        p1: p1 ?? _i6.undefined,
        p2: p2 ?? _i6.undefined,
        p3: p3 ?? _i6.undefined,
        p4: p4 ?? _i6.undefined,
      );
}

extension DOMQuadInit$Typings on DOMQuadInit {
  _i3.DOMPointInit? get p1 => _i4.getProperty(
        this,
        'p1',
      );
  set p1(_i3.DOMPointInit? value) {
    _i4.setProperty(
      this,
      'p1',
      value ?? _i6.undefined,
    );
  }

  _i3.DOMPointInit? get p2 => _i4.getProperty(
        this,
        'p2',
      );
  set p2(_i3.DOMPointInit? value) {
    _i4.setProperty(
      this,
      'p2',
      value ?? _i6.undefined,
    );
  }

  _i3.DOMPointInit? get p3 => _i4.getProperty(
        this,
        'p3',
      );
  set p3(_i3.DOMPointInit? value) {
    _i4.setProperty(
      this,
      'p3',
      value ?? _i6.undefined,
    );
  }

  _i3.DOMPointInit? get p4 => _i4.getProperty(
        this,
        'p4',
      );
  set p4(_i3.DOMPointInit? value) {
    _i4.setProperty(
      this,
      'p4',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class DOMRectInit {
  external factory DOMRectInit._({
    _i2.dynamic height,
    _i2.dynamic width,
    _i2.dynamic x,
    _i2.dynamic y,
  });

  factory DOMRectInit({
    _i2.num? height,
    _i2.num? width,
    _i2.num? x,
    _i2.num? y,
  }) =>
      DOMRectInit._(
        height: height,
        width: width,
        x: x,
        y: y,
      );
}

extension DOMRectInit$Typings on DOMRectInit {
  _i2.num? get height => _i4.getProperty(
        this,
        'height',
      );
  set height(_i2.num? value) {
    _i4.setProperty(
      this,
      'height',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get width => _i4.getProperty(
        this,
        'width',
      );
  set width(_i2.num? value) {
    _i4.setProperty(
      this,
      'width',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get x => _i4.getProperty(
        this,
        'x',
      );
  set x(_i2.num? value) {
    _i4.setProperty(
      this,
      'x',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get y => _i4.getProperty(
        this,
        'y',
      );
  set y(_i2.num? value) {
    _i4.setProperty(
      this,
      'y',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class EcKeyGenParams implements _i3.Algorithm {
  external factory EcKeyGenParams._({
    _i2.dynamic namedCurve,
    _i2.dynamic name,
  });

  factory EcKeyGenParams({
    _i2.String? namedCurve,
    _i2.String? name,
  }) =>
      EcKeyGenParams._(
        namedCurve: namedCurve,
        name: name,
      );
}

extension EcKeyGenParams$Typings on EcKeyGenParams {
  _i2.String get namedCurve => _i4.getProperty(
        this,
        'namedCurve',
      );
  set namedCurve(_i2.String value) {
    _i4.setProperty(
      this,
      'namedCurve',
      value,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class EcKeyImportParams implements _i3.Algorithm {
  external factory EcKeyImportParams._({
    _i2.dynamic namedCurve,
    _i2.dynamic name,
  });

  factory EcKeyImportParams({
    _i2.String? namedCurve,
    _i2.String? name,
  }) =>
      EcKeyImportParams._(
        namedCurve: namedCurve,
        name: name,
      );
}

extension EcKeyImportParams$Typings on EcKeyImportParams {
  _i2.String get namedCurve => _i4.getProperty(
        this,
        'namedCurve',
      );
  set namedCurve(_i2.String value) {
    _i4.setProperty(
      this,
      'namedCurve',
      value,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class EcdhKeyDeriveParams implements _i3.Algorithm {
  external factory EcdhKeyDeriveParams._({
    _i2.dynamic public,
    _i2.dynamic name,
  });

  factory EcdhKeyDeriveParams({
    _i3.CryptoKey? public,
    _i2.String? name,
  }) =>
      EcdhKeyDeriveParams._(
        public: public ?? _i6.undefined,
        name: name,
      );
}

extension EcdhKeyDeriveParams$Typings on EcdhKeyDeriveParams {
  _i3.CryptoKey get public => _i4.getProperty(
        this,
        'public',
      );
  set public(_i3.CryptoKey value) {
    _i4.setProperty(
      this,
      'public',
      value,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class EcdsaParams implements _i3.Algorithm {
  external factory EcdsaParams._({
    _i2.dynamic hash,
    _i2.dynamic name,
  });

  factory EcdsaParams({
    _i3.HashAlgorithmIdentifier? hash,
    _i2.String? name,
  }) =>
      EcdsaParams._(
        hash: hash ?? _i6.undefined,
        name: name,
      );
}

extension EcdsaParams$Typings on EcdsaParams {
  _i3.HashAlgorithmIdentifier get hash => _i4.getProperty(
        this,
        'hash',
      );
  set hash(_i3.HashAlgorithmIdentifier value) {
    _i4.setProperty(
      this,
      'hash',
      value,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class EncodedVideoChunkInit {
  external factory EncodedVideoChunkInit._({
    _i2.dynamic data,
    _i2.dynamic duration,
    _i2.dynamic timestamp,
    _i2.dynamic type,
  });

  factory EncodedVideoChunkInit({
    _i2.Object? data,
    _i2.num? duration,
    _i2.num? timestamp,
    _i3.EncodedVideoChunkType? type,
  }) =>
      EncodedVideoChunkInit._(
        data: data ?? _i6.undefined,
        duration: duration,
        timestamp: timestamp,
        type: type?.name ?? _i6.undefined,
      );
}

extension EncodedVideoChunkInit$Typings on EncodedVideoChunkInit {
  _i2.Object get data => _i4.getProperty(
        this,
        'data',
      );
  set data(_i2.Object value) {
    _i4.setProperty(
      this,
      'data',
      value,
    );
  }

  _i2.num? get duration => _i4.getProperty(
        this,
        'duration',
      );
  set duration(_i2.num? value) {
    _i4.setProperty(
      this,
      'duration',
      value ?? _i6.undefined,
    );
  }

  _i2.num get timestamp => _i4.getProperty(
        this,
        'timestamp',
      );
  set timestamp(_i2.num value) {
    _i4.setProperty(
      this,
      'timestamp',
      value,
    );
  }

  _i3.EncodedVideoChunkType get type =>
      _i3.EncodedVideoChunkTypeOptions.values.byName(_i4.getProperty(
        this,
        'type',
      ));
  set type(_i3.EncodedVideoChunkType value) {
    _i4.setProperty(
      this,
      'type',
      value.name,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class EncodedVideoChunkMetadata {
  external factory EncodedVideoChunkMetadata._({_i2.dynamic decoderConfig});

  factory EncodedVideoChunkMetadata({_i3.VideoDecoderConfig? decoderConfig}) =>
      EncodedVideoChunkMetadata._(
          decoderConfig: decoderConfig ?? _i6.undefined);
}

extension EncodedVideoChunkMetadata$Typings on EncodedVideoChunkMetadata {
  _i3.VideoDecoderConfig? get decoderConfig => _i4.getProperty(
        this,
        'decoderConfig',
      );
  set decoderConfig(_i3.VideoDecoderConfig? value) {
    _i4.setProperty(
      this,
      'decoderConfig',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class ErrorEventInit implements _i3.EventInit {
  external factory ErrorEventInit._({
    _i2.dynamic colno,
    _i2.dynamic error,
    _i2.dynamic filename,
    _i2.dynamic lineno,
    _i2.dynamic message,
    _i2.dynamic bubbles,
    _i2.dynamic cancelable,
    _i2.dynamic composed,
  });

  factory ErrorEventInit({
    _i2.num? colno,
    _i2.dynamic error,
    _i2.String? filename,
    _i2.num? lineno,
    _i2.String? message,
    _i2.bool? bubbles,
    _i2.bool? cancelable,
    _i2.bool? composed,
  }) =>
      ErrorEventInit._(
        colno: colno,
        error: error,
        filename: filename,
        lineno: lineno,
        message: message,
        bubbles: bubbles,
        cancelable: cancelable,
        composed: composed,
      );
}

extension ErrorEventInit$Typings on ErrorEventInit {
  _i2.num? get colno => _i4.getProperty(
        this,
        'colno',
      );
  set colno(_i2.num? value) {
    _i4.setProperty(
      this,
      'colno',
      value ?? _i6.undefined,
    );
  }

  _i2.dynamic get error => _i4.getProperty(
        this,
        'error',
      );
  set error(_i2.dynamic value) {
    _i4.setProperty(
      this,
      'error',
      value,
    );
  }

  _i2.String? get filename => _i4.getProperty(
        this,
        'filename',
      );
  set filename(_i2.String? value) {
    _i4.setProperty(
      this,
      'filename',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get lineno => _i4.getProperty(
        this,
        'lineno',
      );
  set lineno(_i2.num? value) {
    _i4.setProperty(
      this,
      'lineno',
      value ?? _i6.undefined,
    );
  }

  _i2.String? get message => _i4.getProperty(
        this,
        'message',
      );
  set message(_i2.String? value) {
    _i4.setProperty(
      this,
      'message',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class EventInit {
  external factory EventInit._({
    _i2.dynamic bubbles,
    _i2.dynamic cancelable,
    _i2.dynamic composed,
  });

  factory EventInit({
    _i2.bool? bubbles,
    _i2.bool? cancelable,
    _i2.bool? composed,
  }) =>
      EventInit._(
        bubbles: bubbles,
        cancelable: cancelable,
        composed: composed,
      );
}

extension EventInit$Typings on EventInit {
  _i2.bool? get bubbles => _i4.getProperty(
        this,
        'bubbles',
      );
  set bubbles(_i2.bool? value) {
    _i4.setProperty(
      this,
      'bubbles',
      value ?? _i6.undefined,
    );
  }

  _i2.bool? get cancelable => _i4.getProperty(
        this,
        'cancelable',
      );
  set cancelable(_i2.bool? value) {
    _i4.setProperty(
      this,
      'cancelable',
      value ?? _i6.undefined,
    );
  }

  _i2.bool? get composed => _i4.getProperty(
        this,
        'composed',
      );
  set composed(_i2.bool? value) {
    _i4.setProperty(
      this,
      'composed',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class EventListenerOptions {
  external factory EventListenerOptions._({_i2.dynamic capture});

  factory EventListenerOptions({_i2.bool? capture}) =>
      EventListenerOptions._(capture: capture);
}

extension EventListenerOptions$Typings on EventListenerOptions {
  _i2.bool? get capture => _i4.getProperty(
        this,
        'capture',
      );
  set capture(_i2.bool? value) {
    _i4.setProperty(
      this,
      'capture',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class EventSourceInit {
  external factory EventSourceInit._({_i2.dynamic withCredentials});

  factory EventSourceInit({_i2.bool? withCredentials}) =>
      EventSourceInit._(withCredentials: withCredentials);
}

extension EventSourceInit$Typings on EventSourceInit {
  _i2.bool? get withCredentials => _i4.getProperty(
        this,
        'withCredentials',
      );
  set withCredentials(_i2.bool? value) {
    _i4.setProperty(
      this,
      'withCredentials',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class ExtendableEventInit implements _i3.EventInit {
  external factory ExtendableEventInit._({
    _i2.dynamic bubbles,
    _i2.dynamic cancelable,
    _i2.dynamic composed,
  });

  factory ExtendableEventInit({
    _i2.bool? bubbles,
    _i2.bool? cancelable,
    _i2.bool? composed,
  }) =>
      ExtendableEventInit._(
        bubbles: bubbles,
        cancelable: cancelable,
        composed: composed,
      );
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class ExtendableMessageEventInit implements _i3.ExtendableEventInit {
  external factory ExtendableMessageEventInit._({
    _i2.dynamic data,
    _i2.dynamic lastEventId,
    _i2.dynamic origin,
    _i2.dynamic ports,
    _i2.dynamic source,
  });

  factory ExtendableMessageEventInit({
    _i2.dynamic data,
    _i2.String? lastEventId,
    _i2.String? origin,
    _i2.List<_i3.MessagePort>? ports,
    _i2.dynamic source,
  }) =>
      ExtendableMessageEventInit._(
        data: data,
        lastEventId: lastEventId,
        origin: origin,
        ports: ports,
        source: source,
      );
}

extension ExtendableMessageEventInit$Typings on ExtendableMessageEventInit {
  _i2.dynamic get data => _i4.getProperty(
        this,
        'data',
      );
  set data(_i2.dynamic value) {
    _i4.setProperty(
      this,
      'data',
      value,
    );
  }

  _i2.String? get lastEventId => _i4.getProperty(
        this,
        'lastEventId',
      );
  set lastEventId(_i2.String? value) {
    _i4.setProperty(
      this,
      'lastEventId',
      value ?? _i6.undefined,
    );
  }

  _i2.String? get origin => _i4.getProperty(
        this,
        'origin',
      );
  set origin(_i2.String? value) {
    _i4.setProperty(
      this,
      'origin',
      value ?? _i6.undefined,
    );
  }

  _i2.List<_i3.MessagePort>? get ports => ((_i4.getProperty(
        this,
        'ports',
      )) as _i2.List?)
          ?.cast();
  set ports(_i2.List<_i3.MessagePort>? value) {
    _i4.setProperty(
      this,
      'ports',
      value ?? _i6.undefined,
    );
  }

  _i2.dynamic get source => _i4.getProperty(
        this,
        'source',
      );
  set source(_i2.dynamic value) {
    _i4.setProperty(
      this,
      'source',
      value,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class FetchEventInit implements _i3.ExtendableEventInit {
  external factory FetchEventInit._({
    _i2.dynamic clientId,
    _i2.dynamic handled,
    _i2.dynamic preloadResponse,
    _i2.dynamic replacesClientId,
    _i2.dynamic request,
    _i2.dynamic resultingClientId,
  });

  factory FetchEventInit({
    _i2.String? clientId,
    _i2.Future<_i2.dynamic>? handled,
    _i2.Future<_i2.dynamic>? preloadResponse,
    _i2.String? replacesClientId,
    _i3.Request? request,
    _i2.String? resultingClientId,
  }) =>
      FetchEventInit._(
        clientId: clientId,
        handled: handled,
        preloadResponse: preloadResponse,
        replacesClientId: replacesClientId,
        request: request ?? _i6.undefined,
        resultingClientId: resultingClientId,
      );
}

extension FetchEventInit$Typings on FetchEventInit {
  _i2.String? get clientId => _i4.getProperty(
        this,
        'clientId',
      );
  set clientId(_i2.String? value) {
    _i4.setProperty(
      this,
      'clientId',
      value ?? _i6.undefined,
    );
  }

  _i2.Future<_i2.dynamic>? get handled => _i4.promiseToFuture(_i4.getProperty(
        this,
        'handled',
      ));
  set handled(_i2.Future<_i2.dynamic>? value) {
    _i4.setProperty(
      this,
      'handled',
      value ?? _i6.undefined,
    );
  }

  _i2.Future<_i2.dynamic>? get preloadResponse =>
      _i4.promiseToFuture(_i4.getProperty(
        this,
        'preloadResponse',
      ));
  set preloadResponse(_i2.Future<_i2.dynamic>? value) {
    _i4.setProperty(
      this,
      'preloadResponse',
      value ?? _i6.undefined,
    );
  }

  _i2.String? get replacesClientId => _i4.getProperty(
        this,
        'replacesClientId',
      );
  set replacesClientId(_i2.String? value) {
    _i4.setProperty(
      this,
      'replacesClientId',
      value ?? _i6.undefined,
    );
  }

  _i3.Request get request => _i4.getProperty(
        this,
        'request',
      );
  set request(_i3.Request value) {
    _i4.setProperty(
      this,
      'request',
      value,
    );
  }

  _i2.String? get resultingClientId => _i4.getProperty(
        this,
        'resultingClientId',
      );
  set resultingClientId(_i2.String? value) {
    _i4.setProperty(
      this,
      'resultingClientId',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class FilePropertyBag implements _i3.BlobPropertyBag {
  external factory FilePropertyBag._({
    _i2.dynamic lastModified,
    _i2.dynamic endings,
    _i2.dynamic type,
  });

  factory FilePropertyBag({
    _i2.num? lastModified,
    _i3.EndingType? endings,
    _i2.String? type,
  }) =>
      FilePropertyBag._(
        lastModified: lastModified,
        endings: endings?.name ?? _i6.undefined,
        type: type,
      );
}

extension FilePropertyBag$Typings on FilePropertyBag {
  _i2.num? get lastModified => _i4.getProperty(
        this,
        'lastModified',
      );
  set lastModified(_i2.num? value) {
    _i4.setProperty(
      this,
      'lastModified',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class FileSystemCreateWritableOptions {
  external factory FileSystemCreateWritableOptions._(
      {_i2.dynamic keepExistingData});

  factory FileSystemCreateWritableOptions({_i2.bool? keepExistingData}) =>
      FileSystemCreateWritableOptions._(keepExistingData: keepExistingData);
}

extension FileSystemCreateWritableOptions$Typings
    on FileSystemCreateWritableOptions {
  _i2.bool? get keepExistingData => _i4.getProperty(
        this,
        'keepExistingData',
      );
  set keepExistingData(_i2.bool? value) {
    _i4.setProperty(
      this,
      'keepExistingData',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class FileSystemGetDirectoryOptions {
  external factory FileSystemGetDirectoryOptions._({_i2.dynamic create});

  factory FileSystemGetDirectoryOptions({_i2.bool? create}) =>
      FileSystemGetDirectoryOptions._(create: create);
}

extension FileSystemGetDirectoryOptions$Typings
    on FileSystemGetDirectoryOptions {
  _i2.bool? get create => _i4.getProperty(
        this,
        'create',
      );
  set create(_i2.bool? value) {
    _i4.setProperty(
      this,
      'create',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class FileSystemGetFileOptions {
  external factory FileSystemGetFileOptions._({_i2.dynamic create});

  factory FileSystemGetFileOptions({_i2.bool? create}) =>
      FileSystemGetFileOptions._(create: create);
}

extension FileSystemGetFileOptions$Typings on FileSystemGetFileOptions {
  _i2.bool? get create => _i4.getProperty(
        this,
        'create',
      );
  set create(_i2.bool? value) {
    _i4.setProperty(
      this,
      'create',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class FileSystemReadWriteOptions {
  external factory FileSystemReadWriteOptions._({_i2.dynamic at});

  factory FileSystemReadWriteOptions({_i2.num? at}) =>
      FileSystemReadWriteOptions._(at: at);
}

extension FileSystemReadWriteOptions$Typings on FileSystemReadWriteOptions {
  _i2.num? get at => _i4.getProperty(
        this,
        'at',
      );
  set at(_i2.num? value) {
    _i4.setProperty(
      this,
      'at',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class FileSystemRemoveOptions {
  external factory FileSystemRemoveOptions._({_i2.dynamic recursive});

  factory FileSystemRemoveOptions({_i2.bool? recursive}) =>
      FileSystemRemoveOptions._(recursive: recursive);
}

extension FileSystemRemoveOptions$Typings on FileSystemRemoveOptions {
  _i2.bool? get recursive => _i4.getProperty(
        this,
        'recursive',
      );
  set recursive(_i2.bool? value) {
    _i4.setProperty(
      this,
      'recursive',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class FontFaceDescriptors {
  external factory FontFaceDescriptors._({
    _i2.dynamic ascentOverride,
    _i2.dynamic descentOverride,
    _i2.dynamic display,
    _i2.dynamic featureSettings,
    _i2.dynamic lineGapOverride,
    _i2.dynamic stretch,
    _i2.dynamic style,
    _i2.dynamic unicodeRange,
    _i2.dynamic variant,
    _i2.dynamic weight,
  });

  factory FontFaceDescriptors({
    _i2.String? ascentOverride,
    _i2.String? descentOverride,
    _i3.FontDisplay? display,
    _i2.String? featureSettings,
    _i2.String? lineGapOverride,
    _i2.String? stretch,
    _i2.String? style,
    _i2.String? unicodeRange,
    _i2.String? variant,
    _i2.String? weight,
  }) =>
      FontFaceDescriptors._(
        ascentOverride: ascentOverride,
        descentOverride: descentOverride,
        display: display?.name ?? _i6.undefined,
        featureSettings: featureSettings,
        lineGapOverride: lineGapOverride,
        stretch: stretch,
        style: style,
        unicodeRange: unicodeRange,
        variant: variant,
        weight: weight,
      );
}

extension FontFaceDescriptors$Typings on FontFaceDescriptors {
  _i2.String? get ascentOverride => _i4.getProperty(
        this,
        'ascentOverride',
      );
  set ascentOverride(_i2.String? value) {
    _i4.setProperty(
      this,
      'ascentOverride',
      value ?? _i6.undefined,
    );
  }

  _i2.String? get descentOverride => _i4.getProperty(
        this,
        'descentOverride',
      );
  set descentOverride(_i2.String? value) {
    _i4.setProperty(
      this,
      'descentOverride',
      value ?? _i6.undefined,
    );
  }

  _i3.FontDisplay? get display => switch (_i4.getProperty(
        this,
        'display',
      )) {
        _i2.String name => _i3.FontDisplayOptions.values.byName(name),
        _ => null
      };
  set display(_i3.FontDisplay? value) {
    _i4.setProperty(
      this,
      'display',
      value?.name ?? _i6.undefined ?? _i6.undefined,
    );
  }

  _i2.String? get featureSettings => _i4.getProperty(
        this,
        'featureSettings',
      );
  set featureSettings(_i2.String? value) {
    _i4.setProperty(
      this,
      'featureSettings',
      value ?? _i6.undefined,
    );
  }

  _i2.String? get lineGapOverride => _i4.getProperty(
        this,
        'lineGapOverride',
      );
  set lineGapOverride(_i2.String? value) {
    _i4.setProperty(
      this,
      'lineGapOverride',
      value ?? _i6.undefined,
    );
  }

  _i2.String? get stretch => _i4.getProperty(
        this,
        'stretch',
      );
  set stretch(_i2.String? value) {
    _i4.setProperty(
      this,
      'stretch',
      value ?? _i6.undefined,
    );
  }

  _i2.String? get style => _i4.getProperty(
        this,
        'style',
      );
  set style(_i2.String? value) {
    _i4.setProperty(
      this,
      'style',
      value ?? _i6.undefined,
    );
  }

  _i2.String? get unicodeRange => _i4.getProperty(
        this,
        'unicodeRange',
      );
  set unicodeRange(_i2.String? value) {
    _i4.setProperty(
      this,
      'unicodeRange',
      value ?? _i6.undefined,
    );
  }

  _i2.String? get variant => _i4.getProperty(
        this,
        'variant',
      );
  set variant(_i2.String? value) {
    _i4.setProperty(
      this,
      'variant',
      value ?? _i6.undefined,
    );
  }

  _i2.String? get weight => _i4.getProperty(
        this,
        'weight',
      );
  set weight(_i2.String? value) {
    _i4.setProperty(
      this,
      'weight',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class FontFaceSetLoadEventInit implements _i3.EventInit {
  external factory FontFaceSetLoadEventInit._({
    _i2.dynamic fontfaces,
    _i2.dynamic bubbles,
    _i2.dynamic cancelable,
    _i2.dynamic composed,
  });

  factory FontFaceSetLoadEventInit({
    _i2.List<_i3.FontFace>? fontfaces,
    _i2.bool? bubbles,
    _i2.bool? cancelable,
    _i2.bool? composed,
  }) =>
      FontFaceSetLoadEventInit._(
        fontfaces: fontfaces,
        bubbles: bubbles,
        cancelable: cancelable,
        composed: composed,
      );
}

extension FontFaceSetLoadEventInit$Typings on FontFaceSetLoadEventInit {
  _i2.List<_i3.FontFace>? get fontfaces => ((_i4.getProperty(
        this,
        'fontfaces',
      )) as _i2.List?)
          ?.cast();
  set fontfaces(_i2.List<_i3.FontFace>? value) {
    _i4.setProperty(
      this,
      'fontfaces',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class GetNotificationOptions {
  external factory GetNotificationOptions._({_i2.dynamic tag});

  factory GetNotificationOptions({_i2.String? tag}) =>
      GetNotificationOptions._(tag: tag);
}

extension GetNotificationOptions$Typings on GetNotificationOptions {
  _i2.String? get tag => _i4.getProperty(
        this,
        'tag',
      );
  set tag(_i2.String? value) {
    _i4.setProperty(
      this,
      'tag',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class HkdfParams implements _i3.Algorithm {
  external factory HkdfParams._({
    _i2.dynamic hash,
    _i2.dynamic info,
    _i2.dynamic salt,
    _i2.dynamic name,
  });

  factory HkdfParams({
    _i3.HashAlgorithmIdentifier? hash,
    _i2.Object? info,
    _i2.Object? salt,
    _i2.String? name,
  }) =>
      HkdfParams._(
        hash: hash ?? _i6.undefined,
        info: info ?? _i6.undefined,
        salt: salt ?? _i6.undefined,
        name: name,
      );
}

extension HkdfParams$Typings on HkdfParams {
  _i3.HashAlgorithmIdentifier get hash => _i4.getProperty(
        this,
        'hash',
      );
  set hash(_i3.HashAlgorithmIdentifier value) {
    _i4.setProperty(
      this,
      'hash',
      value,
    );
  }

  _i2.Object get info => _i4.getProperty(
        this,
        'info',
      );
  set info(_i2.Object value) {
    _i4.setProperty(
      this,
      'info',
      value,
    );
  }

  _i2.Object get salt => _i4.getProperty(
        this,
        'salt',
      );
  set salt(_i2.Object value) {
    _i4.setProperty(
      this,
      'salt',
      value,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class HmacImportParams implements _i3.Algorithm {
  external factory HmacImportParams._({
    _i2.dynamic hash,
    _i2.dynamic length,
    _i2.dynamic name,
  });

  factory HmacImportParams({
    _i3.HashAlgorithmIdentifier? hash,
    _i2.num? length,
    _i2.String? name,
  }) =>
      HmacImportParams._(
        hash: hash ?? _i6.undefined,
        length: length,
        name: name,
      );
}

extension HmacImportParams$Typings on HmacImportParams {
  _i3.HashAlgorithmIdentifier get hash => _i4.getProperty(
        this,
        'hash',
      );
  set hash(_i3.HashAlgorithmIdentifier value) {
    _i4.setProperty(
      this,
      'hash',
      value,
    );
  }

  _i2.num? get length => _i4.getProperty(
        this,
        'length',
      );
  set length(_i2.num? value) {
    _i4.setProperty(
      this,
      'length',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class HmacKeyGenParams implements _i3.Algorithm {
  external factory HmacKeyGenParams._({
    _i2.dynamic hash,
    _i2.dynamic length,
    _i2.dynamic name,
  });

  factory HmacKeyGenParams({
    _i3.HashAlgorithmIdentifier? hash,
    _i2.num? length,
    _i2.String? name,
  }) =>
      HmacKeyGenParams._(
        hash: hash ?? _i6.undefined,
        length: length,
        name: name,
      );
}

extension HmacKeyGenParams$Typings on HmacKeyGenParams {
  _i3.HashAlgorithmIdentifier get hash => _i4.getProperty(
        this,
        'hash',
      );
  set hash(_i3.HashAlgorithmIdentifier value) {
    _i4.setProperty(
      this,
      'hash',
      value,
    );
  }

  _i2.num? get length => _i4.getProperty(
        this,
        'length',
      );
  set length(_i2.num? value) {
    _i4.setProperty(
      this,
      'length',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class IDBDatabaseInfo {
  external factory IDBDatabaseInfo._({
    _i2.dynamic name,
    _i2.dynamic version,
  });

  factory IDBDatabaseInfo({
    _i2.String? name,
    _i2.num? version,
  }) =>
      IDBDatabaseInfo._(
        name: name,
        version: version,
      );
}

extension IDBDatabaseInfo$Typings on IDBDatabaseInfo {
  _i2.String? get name => _i4.getProperty(
        this,
        'name',
      );
  set name(_i2.String? value) {
    _i4.setProperty(
      this,
      'name',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get version => _i4.getProperty(
        this,
        'version',
      );
  set version(_i2.num? value) {
    _i4.setProperty(
      this,
      'version',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class IDBIndexParameters {
  external factory IDBIndexParameters._({
    _i2.dynamic multiEntry,
    _i2.dynamic unique,
  });

  factory IDBIndexParameters({
    _i2.bool? multiEntry,
    _i2.bool? unique,
  }) =>
      IDBIndexParameters._(
        multiEntry: multiEntry,
        unique: unique,
      );
}

extension IDBIndexParameters$Typings on IDBIndexParameters {
  _i2.bool? get multiEntry => _i4.getProperty(
        this,
        'multiEntry',
      );
  set multiEntry(_i2.bool? value) {
    _i4.setProperty(
      this,
      'multiEntry',
      value ?? _i6.undefined,
    );
  }

  _i2.bool? get unique => _i4.getProperty(
        this,
        'unique',
      );
  set unique(_i2.bool? value) {
    _i4.setProperty(
      this,
      'unique',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class IDBObjectStoreParameters {
  external factory IDBObjectStoreParameters._({
    _i2.dynamic autoIncrement,
    _i2.dynamic keyPath,
  });

  factory IDBObjectStoreParameters({
    _i2.bool? autoIncrement,
    _i2.dynamic keyPath,
  }) =>
      IDBObjectStoreParameters._(
        autoIncrement: autoIncrement,
        keyPath: keyPath,
      );
}

extension IDBObjectStoreParameters$Typings on IDBObjectStoreParameters {
  _i2.bool? get autoIncrement => _i4.getProperty(
        this,
        'autoIncrement',
      );
  set autoIncrement(_i2.bool? value) {
    _i4.setProperty(
      this,
      'autoIncrement',
      value ?? _i6.undefined,
    );
  }

  _i2.dynamic get keyPath => _i4.getProperty(
        this,
        'keyPath',
      );
  set keyPath(_i2.dynamic value) {
    _i4.setProperty(
      this,
      'keyPath',
      value,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class IDBTransactionOptions {
  external factory IDBTransactionOptions._({_i2.dynamic durability});

  factory IDBTransactionOptions({_i3.IDBTransactionDurability? durability}) =>
      IDBTransactionOptions._(durability: durability?.name ?? _i6.undefined);
}

extension IDBTransactionOptions$Typings on IDBTransactionOptions {
  _i3.IDBTransactionDurability? get durability => switch (_i4.getProperty(
        this,
        'durability',
      )) {
        _i2.String name =>
          _i3.IDBTransactionDurabilityOptions.values.byName(name),
        _ => null
      };
  set durability(_i3.IDBTransactionDurability? value) {
    _i4.setProperty(
      this,
      'durability',
      value?.name ?? _i6.undefined ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class IDBVersionChangeEventInit implements _i3.EventInit {
  external factory IDBVersionChangeEventInit._({
    _i2.dynamic newVersion,
    _i2.dynamic oldVersion,
    _i2.dynamic bubbles,
    _i2.dynamic cancelable,
    _i2.dynamic composed,
  });

  factory IDBVersionChangeEventInit({
    _i2.num? newVersion,
    _i2.num? oldVersion,
    _i2.bool? bubbles,
    _i2.bool? cancelable,
    _i2.bool? composed,
  }) =>
      IDBVersionChangeEventInit._(
        newVersion: newVersion ?? _i6.undefined,
        oldVersion: oldVersion,
        bubbles: bubbles,
        cancelable: cancelable,
        composed: composed,
      );
}

extension IDBVersionChangeEventInit$Typings on IDBVersionChangeEventInit {
  _i2.num? get newVersion => _i4.getProperty(
        this,
        'newVersion',
      );
  set newVersion(_i2.num? value) {
    _i4.setProperty(
      this,
      'newVersion',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get oldVersion => _i4.getProperty(
        this,
        'oldVersion',
      );
  set oldVersion(_i2.num? value) {
    _i4.setProperty(
      this,
      'oldVersion',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class ImageBitmapOptions {
  external factory ImageBitmapOptions._({
    _i2.dynamic colorSpaceConversion,
    _i2.dynamic imageOrientation,
    _i2.dynamic premultiplyAlpha,
    _i2.dynamic resizeHeight,
    _i2.dynamic resizeQuality,
    _i2.dynamic resizeWidth,
  });

  factory ImageBitmapOptions({
    _i3.ColorSpaceConversion? colorSpaceConversion,
    _i3.ImageOrientation? imageOrientation,
    _i3.PremultiplyAlpha? premultiplyAlpha,
    _i2.num? resizeHeight,
    _i3.ResizeQuality? resizeQuality,
    _i2.num? resizeWidth,
  }) =>
      ImageBitmapOptions._(
        colorSpaceConversion: colorSpaceConversion?.name ?? _i6.undefined,
        imageOrientation: imageOrientation?.name ?? _i6.undefined,
        premultiplyAlpha: premultiplyAlpha?.name ?? _i6.undefined,
        resizeHeight: resizeHeight,
        resizeQuality: resizeQuality?.name ?? _i6.undefined,
        resizeWidth: resizeWidth,
      );
}

extension ImageBitmapOptions$Typings on ImageBitmapOptions {
  _i3.ColorSpaceConversion? get colorSpaceConversion => switch (_i4.getProperty(
        this,
        'colorSpaceConversion',
      )) {
        _i2.String name => _i3.ColorSpaceConversionOptions.values.byName(name),
        _ => null
      };
  set colorSpaceConversion(_i3.ColorSpaceConversion? value) {
    _i4.setProperty(
      this,
      'colorSpaceConversion',
      value?.name ?? _i6.undefined ?? _i6.undefined,
    );
  }

  _i3.ImageOrientation? get imageOrientation => switch (_i4.getProperty(
        this,
        'imageOrientation',
      )) {
        _i2.String name => _i3.ImageOrientationOptions.values.byName(name),
        _ => null
      };
  set imageOrientation(_i3.ImageOrientation? value) {
    _i4.setProperty(
      this,
      'imageOrientation',
      value?.name ?? _i6.undefined ?? _i6.undefined,
    );
  }

  _i3.PremultiplyAlpha? get premultiplyAlpha => switch (_i4.getProperty(
        this,
        'premultiplyAlpha',
      )) {
        _i2.String name => _i3.PremultiplyAlphaOptions.values.byName(name),
        _ => null
      };
  set premultiplyAlpha(_i3.PremultiplyAlpha? value) {
    _i4.setProperty(
      this,
      'premultiplyAlpha',
      value?.name ?? _i6.undefined ?? _i6.undefined,
    );
  }

  _i2.num? get resizeHeight => _i4.getProperty(
        this,
        'resizeHeight',
      );
  set resizeHeight(_i2.num? value) {
    _i4.setProperty(
      this,
      'resizeHeight',
      value ?? _i6.undefined,
    );
  }

  _i3.ResizeQuality? get resizeQuality => switch (_i4.getProperty(
        this,
        'resizeQuality',
      )) {
        _i2.String name => _i3.ResizeQualityOptions.values.byName(name),
        _ => null
      };
  set resizeQuality(_i3.ResizeQuality? value) {
    _i4.setProperty(
      this,
      'resizeQuality',
      value?.name ?? _i6.undefined ?? _i6.undefined,
    );
  }

  _i2.num? get resizeWidth => _i4.getProperty(
        this,
        'resizeWidth',
      );
  set resizeWidth(_i2.num? value) {
    _i4.setProperty(
      this,
      'resizeWidth',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class ImageBitmapRenderingContextSettings {
  external factory ImageBitmapRenderingContextSettings._({_i2.dynamic alpha});

  factory ImageBitmapRenderingContextSettings({_i2.bool? alpha}) =>
      ImageBitmapRenderingContextSettings._(alpha: alpha);
}

extension ImageBitmapRenderingContextSettings$Typings
    on ImageBitmapRenderingContextSettings {
  _i2.bool? get alpha => _i4.getProperty(
        this,
        'alpha',
      );
  set alpha(_i2.bool? value) {
    _i4.setProperty(
      this,
      'alpha',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class ImageDataSettings {
  external factory ImageDataSettings._({_i2.dynamic colorSpace});

  factory ImageDataSettings({_i3.PredefinedColorSpace? colorSpace}) =>
      ImageDataSettings._(colorSpace: colorSpace?.name ?? _i6.undefined);
}

extension ImageDataSettings$Typings on ImageDataSettings {
  _i3.PredefinedColorSpace? get colorSpace => switch (_i4.getProperty(
        this,
        'colorSpace',
      )) {
        _i2.String name => _i3.PredefinedColorSpaceOptions.values.byName(name),
        _ => null
      };
  set colorSpace(_i3.PredefinedColorSpace? value) {
    _i4.setProperty(
      this,
      'colorSpace',
      value?.name ?? _i6.undefined ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class ImageEncodeOptions {
  external factory ImageEncodeOptions._({
    _i2.dynamic quality,
    _i2.dynamic type,
  });

  factory ImageEncodeOptions({
    _i2.num? quality,
    _i2.String? type,
  }) =>
      ImageEncodeOptions._(
        quality: quality,
        type: type,
      );
}

extension ImageEncodeOptions$Typings on ImageEncodeOptions {
  _i2.num? get quality => _i4.getProperty(
        this,
        'quality',
      );
  set quality(_i2.num? value) {
    _i4.setProperty(
      this,
      'quality',
      value ?? _i6.undefined,
    );
  }

  _i2.String? get type => _i4.getProperty(
        this,
        'type',
      );
  set type(_i2.String? value) {
    _i4.setProperty(
      this,
      'type',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class ImportMeta {
  external factory ImportMeta._({_i2.dynamic url});

  factory ImportMeta({_i2.String? url}) => ImportMeta._(url: url);
}

extension ImportMeta$Typings on ImportMeta {
  _i2.String get url => _i4.getProperty(
        this,
        'url',
      );
  set url(_i2.String value) {
    _i4.setProperty(
      this,
      'url',
      value,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class JsonWebKey {
  external factory JsonWebKey._({
    _i2.dynamic alg,
    _i2.dynamic crv,
    _i2.dynamic d,
    _i2.dynamic dp,
    _i2.dynamic dq,
    _i2.dynamic e,
    _i2.dynamic ext,
    _i2.dynamic k,
    _i2.dynamic keyOps,
    _i2.dynamic kty,
    _i2.dynamic n,
    _i2.dynamic oth,
    _i2.dynamic p,
    _i2.dynamic q,
    _i2.dynamic qi,
    _i2.dynamic use,
    _i2.dynamic x,
    _i2.dynamic y,
  });

  factory JsonWebKey({
    _i2.String? alg,
    _i2.String? crv,
    _i2.String? d,
    _i2.String? dp,
    _i2.String? dq,
    _i2.String? e,
    _i2.bool? ext,
    _i2.String? k,
    _i2.List<_i2.String>? keyOps,
    _i2.String? kty,
    _i2.String? n,
    _i2.List<_i3.RsaOtherPrimesInfo>? oth,
    _i2.String? p,
    _i2.String? q,
    _i2.String? qi,
    _i2.String? use,
    _i2.String? x,
    _i2.String? y,
  }) =>
      JsonWebKey._(
        alg: alg,
        crv: crv,
        d: d,
        dp: dp,
        dq: dq,
        e: e,
        ext: ext,
        k: k,
        keyOps: keyOps,
        kty: kty,
        n: n,
        oth: oth,
        p: p,
        q: q,
        qi: qi,
        use: use,
        x: x,
        y: y,
      );
}

extension JsonWebKey$Typings on JsonWebKey {
  _i2.String? get alg => _i4.getProperty(
        this,
        'alg',
      );
  set alg(_i2.String? value) {
    _i4.setProperty(
      this,
      'alg',
      value ?? _i6.undefined,
    );
  }

  _i2.String? get crv => _i4.getProperty(
        this,
        'crv',
      );
  set crv(_i2.String? value) {
    _i4.setProperty(
      this,
      'crv',
      value ?? _i6.undefined,
    );
  }

  _i2.String? get d => _i4.getProperty(
        this,
        'd',
      );
  set d(_i2.String? value) {
    _i4.setProperty(
      this,
      'd',
      value ?? _i6.undefined,
    );
  }

  _i2.String? get dp => _i4.getProperty(
        this,
        'dp',
      );
  set dp(_i2.String? value) {
    _i4.setProperty(
      this,
      'dp',
      value ?? _i6.undefined,
    );
  }

  _i2.String? get dq => _i4.getProperty(
        this,
        'dq',
      );
  set dq(_i2.String? value) {
    _i4.setProperty(
      this,
      'dq',
      value ?? _i6.undefined,
    );
  }

  _i2.String? get e => _i4.getProperty(
        this,
        'e',
      );
  set e(_i2.String? value) {
    _i4.setProperty(
      this,
      'e',
      value ?? _i6.undefined,
    );
  }

  _i2.bool? get ext => _i4.getProperty(
        this,
        'ext',
      );
  set ext(_i2.bool? value) {
    _i4.setProperty(
      this,
      'ext',
      value ?? _i6.undefined,
    );
  }

  _i2.String? get k => _i4.getProperty(
        this,
        'k',
      );
  set k(_i2.String? value) {
    _i4.setProperty(
      this,
      'k',
      value ?? _i6.undefined,
    );
  }

  _i2.List<_i2.String>? get keyOps => ((_i4.getProperty(
        this,
        'key_ops',
      )) as _i2.List?)
          ?.cast();
  set keyOps(_i2.List<_i2.String>? value) {
    _i4.setProperty(
      this,
      'key_ops',
      value ?? _i6.undefined,
    );
  }

  _i2.String? get kty => _i4.getProperty(
        this,
        'kty',
      );
  set kty(_i2.String? value) {
    _i4.setProperty(
      this,
      'kty',
      value ?? _i6.undefined,
    );
  }

  _i2.String? get n => _i4.getProperty(
        this,
        'n',
      );
  set n(_i2.String? value) {
    _i4.setProperty(
      this,
      'n',
      value ?? _i6.undefined,
    );
  }

  _i2.List<_i3.RsaOtherPrimesInfo>? get oth => ((_i4.getProperty(
        this,
        'oth',
      )) as _i2.List?)
          ?.cast();
  set oth(_i2.List<_i3.RsaOtherPrimesInfo>? value) {
    _i4.setProperty(
      this,
      'oth',
      value ?? _i6.undefined,
    );
  }

  _i2.String? get p => _i4.getProperty(
        this,
        'p',
      );
  set p(_i2.String? value) {
    _i4.setProperty(
      this,
      'p',
      value ?? _i6.undefined,
    );
  }

  _i2.String? get q => _i4.getProperty(
        this,
        'q',
      );
  set q(_i2.String? value) {
    _i4.setProperty(
      this,
      'q',
      value ?? _i6.undefined,
    );
  }

  _i2.String? get qi => _i4.getProperty(
        this,
        'qi',
      );
  set qi(_i2.String? value) {
    _i4.setProperty(
      this,
      'qi',
      value ?? _i6.undefined,
    );
  }

  _i2.String? get use => _i4.getProperty(
        this,
        'use',
      );
  set use(_i2.String? value) {
    _i4.setProperty(
      this,
      'use',
      value ?? _i6.undefined,
    );
  }

  _i2.String? get x => _i4.getProperty(
        this,
        'x',
      );
  set x(_i2.String? value) {
    _i4.setProperty(
      this,
      'x',
      value ?? _i6.undefined,
    );
  }

  _i2.String? get y => _i4.getProperty(
        this,
        'y',
      );
  set y(_i2.String? value) {
    _i4.setProperty(
      this,
      'y',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class KeyAlgorithm {
  external factory KeyAlgorithm._({_i2.dynamic name});

  factory KeyAlgorithm({_i2.String? name}) => KeyAlgorithm._(name: name);
}

extension KeyAlgorithm$Typings on KeyAlgorithm {
  _i2.String get name => _i4.getProperty(
        this,
        'name',
      );
  set name(_i2.String value) {
    _i4.setProperty(
      this,
      'name',
      value,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class LockInfo {
  external factory LockInfo._({
    _i2.dynamic clientId,
    _i2.dynamic mode,
    _i2.dynamic name,
  });

  factory LockInfo({
    _i2.String? clientId,
    _i3.LockMode? mode,
    _i2.String? name,
  }) =>
      LockInfo._(
        clientId: clientId,
        mode: mode?.name ?? _i6.undefined,
        name: name,
      );
}

extension LockInfo$Typings on LockInfo {
  _i2.String? get clientId => _i4.getProperty(
        this,
        'clientId',
      );
  set clientId(_i2.String? value) {
    _i4.setProperty(
      this,
      'clientId',
      value ?? _i6.undefined,
    );
  }

  _i3.LockMode? get mode => switch (_i4.getProperty(
        this,
        'mode',
      )) {
        _i2.String name => _i3.LockModeOptions.values.byName(name),
        _ => null
      };
  set mode(_i3.LockMode? value) {
    _i4.setProperty(
      this,
      'mode',
      value?.name ?? _i6.undefined ?? _i6.undefined,
    );
  }

  _i2.String? get name => _i4.getProperty(
        this,
        'name',
      );
  set name(_i2.String? value) {
    _i4.setProperty(
      this,
      'name',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class LockManagerSnapshot {
  external factory LockManagerSnapshot._({
    _i2.dynamic held,
    _i2.dynamic pending,
  });

  factory LockManagerSnapshot({
    _i2.List<_i3.LockInfo>? held,
    _i2.List<_i3.LockInfo>? pending,
  }) =>
      LockManagerSnapshot._(
        held: held,
        pending: pending,
      );
}

extension LockManagerSnapshot$Typings on LockManagerSnapshot {
  _i2.List<_i3.LockInfo>? get held => ((_i4.getProperty(
        this,
        'held',
      )) as _i2.List?)
          ?.cast();
  set held(_i2.List<_i3.LockInfo>? value) {
    _i4.setProperty(
      this,
      'held',
      value ?? _i6.undefined,
    );
  }

  _i2.List<_i3.LockInfo>? get pending => ((_i4.getProperty(
        this,
        'pending',
      )) as _i2.List?)
          ?.cast();
  set pending(_i2.List<_i3.LockInfo>? value) {
    _i4.setProperty(
      this,
      'pending',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class LockOptions {
  external factory LockOptions._({
    _i2.dynamic ifAvailable,
    _i2.dynamic mode,
    _i2.dynamic signal,
    _i2.dynamic steal,
  });

  factory LockOptions({
    _i2.bool? ifAvailable,
    _i3.LockMode? mode,
    _i3.AbortSignal? signal,
    _i2.bool? steal,
  }) =>
      LockOptions._(
        ifAvailable: ifAvailable,
        mode: mode?.name ?? _i6.undefined,
        signal: signal ?? _i6.undefined,
        steal: steal,
      );
}

extension LockOptions$Typings on LockOptions {
  _i2.bool? get ifAvailable => _i4.getProperty(
        this,
        'ifAvailable',
      );
  set ifAvailable(_i2.bool? value) {
    _i4.setProperty(
      this,
      'ifAvailable',
      value ?? _i6.undefined,
    );
  }

  _i3.LockMode? get mode => switch (_i4.getProperty(
        this,
        'mode',
      )) {
        _i2.String name => _i3.LockModeOptions.values.byName(name),
        _ => null
      };
  set mode(_i3.LockMode? value) {
    _i4.setProperty(
      this,
      'mode',
      value?.name ?? _i6.undefined ?? _i6.undefined,
    );
  }

  _i3.AbortSignal? get signal => _i4.getProperty(
        this,
        'signal',
      );
  set signal(_i3.AbortSignal? value) {
    _i4.setProperty(
      this,
      'signal',
      value ?? _i6.undefined,
    );
  }

  _i2.bool? get steal => _i4.getProperty(
        this,
        'steal',
      );
  set steal(_i2.bool? value) {
    _i4.setProperty(
      this,
      'steal',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class MediaCapabilitiesDecodingInfo implements _i3.MediaCapabilitiesInfo {
  external factory MediaCapabilitiesDecodingInfo._({
    _i2.dynamic configuration,
    _i2.dynamic powerEfficient,
    _i2.dynamic smooth,
    _i2.dynamic supported,
  });

  factory MediaCapabilitiesDecodingInfo({
    _i3.MediaDecodingConfiguration? configuration,
    _i2.bool? powerEfficient,
    _i2.bool? smooth,
    _i2.bool? supported,
  }) =>
      MediaCapabilitiesDecodingInfo._(
        configuration: configuration ?? _i6.undefined,
        powerEfficient: powerEfficient,
        smooth: smooth,
        supported: supported,
      );
}

extension MediaCapabilitiesDecodingInfo$Typings
    on MediaCapabilitiesDecodingInfo {
  _i3.MediaDecodingConfiguration? get configuration => _i4.getProperty(
        this,
        'configuration',
      );
  set configuration(_i3.MediaDecodingConfiguration? value) {
    _i4.setProperty(
      this,
      'configuration',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class MediaCapabilitiesEncodingInfo implements _i3.MediaCapabilitiesInfo {
  external factory MediaCapabilitiesEncodingInfo._({
    _i2.dynamic configuration,
    _i2.dynamic powerEfficient,
    _i2.dynamic smooth,
    _i2.dynamic supported,
  });

  factory MediaCapabilitiesEncodingInfo({
    _i3.MediaEncodingConfiguration? configuration,
    _i2.bool? powerEfficient,
    _i2.bool? smooth,
    _i2.bool? supported,
  }) =>
      MediaCapabilitiesEncodingInfo._(
        configuration: configuration ?? _i6.undefined,
        powerEfficient: powerEfficient,
        smooth: smooth,
        supported: supported,
      );
}

extension MediaCapabilitiesEncodingInfo$Typings
    on MediaCapabilitiesEncodingInfo {
  _i3.MediaEncodingConfiguration? get configuration => _i4.getProperty(
        this,
        'configuration',
      );
  set configuration(_i3.MediaEncodingConfiguration? value) {
    _i4.setProperty(
      this,
      'configuration',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class MediaCapabilitiesInfo {
  external factory MediaCapabilitiesInfo._({
    _i2.dynamic powerEfficient,
    _i2.dynamic smooth,
    _i2.dynamic supported,
  });

  factory MediaCapabilitiesInfo({
    _i2.bool? powerEfficient,
    _i2.bool? smooth,
    _i2.bool? supported,
  }) =>
      MediaCapabilitiesInfo._(
        powerEfficient: powerEfficient,
        smooth: smooth,
        supported: supported,
      );
}

extension MediaCapabilitiesInfo$Typings on MediaCapabilitiesInfo {
  _i2.bool get powerEfficient => _i4.getProperty(
        this,
        'powerEfficient',
      );
  set powerEfficient(_i2.bool value) {
    _i4.setProperty(
      this,
      'powerEfficient',
      value,
    );
  }

  _i2.bool get smooth => _i4.getProperty(
        this,
        'smooth',
      );
  set smooth(_i2.bool value) {
    _i4.setProperty(
      this,
      'smooth',
      value,
    );
  }

  _i2.bool get supported => _i4.getProperty(
        this,
        'supported',
      );
  set supported(_i2.bool value) {
    _i4.setProperty(
      this,
      'supported',
      value,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class MediaConfiguration {
  external factory MediaConfiguration._({
    _i2.dynamic audio,
    _i2.dynamic video,
  });

  factory MediaConfiguration({
    _i3.AudioConfiguration? audio,
    _i3.VideoConfiguration? video,
  }) =>
      MediaConfiguration._(
        audio: audio ?? _i6.undefined,
        video: video ?? _i6.undefined,
      );
}

extension MediaConfiguration$Typings on MediaConfiguration {
  _i3.AudioConfiguration? get audio => _i4.getProperty(
        this,
        'audio',
      );
  set audio(_i3.AudioConfiguration? value) {
    _i4.setProperty(
      this,
      'audio',
      value ?? _i6.undefined,
    );
  }

  _i3.VideoConfiguration? get video => _i4.getProperty(
        this,
        'video',
      );
  set video(_i3.VideoConfiguration? value) {
    _i4.setProperty(
      this,
      'video',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class MediaDecodingConfiguration implements _i3.MediaConfiguration {
  external factory MediaDecodingConfiguration._({
    _i2.dynamic type,
    _i2.dynamic audio,
    _i2.dynamic video,
  });

  factory MediaDecodingConfiguration({
    _i3.MediaDecodingType? type,
    _i3.AudioConfiguration? audio,
    _i3.VideoConfiguration? video,
  }) =>
      MediaDecodingConfiguration._(
        type: type?.name ?? _i6.undefined,
        audio: audio ?? _i6.undefined,
        video: video ?? _i6.undefined,
      );
}

extension MediaDecodingConfiguration$Typings on MediaDecodingConfiguration {
  _i3.MediaDecodingType get type =>
      _i3.MediaDecodingTypeOptions.values.byName(_i4.getProperty(
        this,
        'type',
      ));
  set type(_i3.MediaDecodingType value) {
    _i4.setProperty(
      this,
      'type',
      value.name,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class MediaEncodingConfiguration implements _i3.MediaConfiguration {
  external factory MediaEncodingConfiguration._({
    _i2.dynamic type,
    _i2.dynamic audio,
    _i2.dynamic video,
  });

  factory MediaEncodingConfiguration({
    _i3.MediaEncodingType? type,
    _i3.AudioConfiguration? audio,
    _i3.VideoConfiguration? video,
  }) =>
      MediaEncodingConfiguration._(
        type: type?.name ?? _i6.undefined,
        audio: audio ?? _i6.undefined,
        video: video ?? _i6.undefined,
      );
}

extension MediaEncodingConfiguration$Typings on MediaEncodingConfiguration {
  _i3.MediaEncodingType get type =>
      _i3.MediaEncodingTypeOptions.values.byName(_i4.getProperty(
        this,
        'type',
      ));
  set type(_i3.MediaEncodingType value) {
    _i4.setProperty(
      this,
      'type',
      value.name,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class MessageEventInit<T> implements _i3.EventInit {
  external factory MessageEventInit._({
    _i2.dynamic data,
    _i2.dynamic lastEventId,
    _i2.dynamic origin,
    _i2.dynamic ports,
    _i2.dynamic source,
    _i2.dynamic bubbles,
    _i2.dynamic cancelable,
    _i2.dynamic composed,
  });

  factory MessageEventInit({
    _i2.dynamic data,
    _i2.String? lastEventId,
    _i2.String? origin,
    _i2.List<_i3.MessagePort>? ports,
    _i3.MessageEventSource? source,
    _i2.bool? bubbles,
    _i2.bool? cancelable,
    _i2.bool? composed,
  }) =>
      MessageEventInit._(
        data: data,
        lastEventId: lastEventId,
        origin: origin,
        ports: ports,
        source: source ?? _i6.undefined ?? _i6.undefined,
        bubbles: bubbles,
        cancelable: cancelable,
        composed: composed,
      );
}

extension MessageEventInit$Typings<T> on MessageEventInit<T> {
  T? get data => _i4.getProperty(
        this,
        'data',
      );
  set data(T? value) {
    _i4.setProperty(
      this,
      'data',
      value ?? _i6.undefined,
    );
  }

  _i2.String? get lastEventId => _i4.getProperty(
        this,
        'lastEventId',
      );
  set lastEventId(_i2.String? value) {
    _i4.setProperty(
      this,
      'lastEventId',
      value ?? _i6.undefined,
    );
  }

  _i2.String? get origin => _i4.getProperty(
        this,
        'origin',
      );
  set origin(_i2.String? value) {
    _i4.setProperty(
      this,
      'origin',
      value ?? _i6.undefined,
    );
  }

  _i2.List<_i3.MessagePort>? get ports => ((_i4.getProperty(
        this,
        'ports',
      )) as _i2.List?)
          ?.cast();
  set ports(_i2.List<_i3.MessagePort>? value) {
    _i4.setProperty(
      this,
      'ports',
      value ?? _i6.undefined,
    );
  }

  _i3.MessageEventSource? get source => _i4.getProperty(
        this,
        'source',
      );
  set source(_i3.MessageEventSource? value) {
    _i4.setProperty(
      this,
      'source',
      value ?? _i6.undefined ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class MultiCacheQueryOptions implements _i3.CacheQueryOptions {
  external factory MultiCacheQueryOptions._({
    _i2.dynamic cacheName,
    _i2.dynamic ignoreMethod,
    _i2.dynamic ignoreSearch,
    _i2.dynamic ignoreVary,
  });

  factory MultiCacheQueryOptions({
    _i2.String? cacheName,
    _i2.bool? ignoreMethod,
    _i2.bool? ignoreSearch,
    _i2.bool? ignoreVary,
  }) =>
      MultiCacheQueryOptions._(
        cacheName: cacheName,
        ignoreMethod: ignoreMethod,
        ignoreSearch: ignoreSearch,
        ignoreVary: ignoreVary,
      );
}

extension MultiCacheQueryOptions$Typings on MultiCacheQueryOptions {
  _i2.String? get cacheName => _i4.getProperty(
        this,
        'cacheName',
      );
  set cacheName(_i2.String? value) {
    _i4.setProperty(
      this,
      'cacheName',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class NavigationPreloadState {
  external factory NavigationPreloadState._({
    _i2.dynamic enabled,
    _i2.dynamic headerValue,
  });

  factory NavigationPreloadState({
    _i2.bool? enabled,
    _i2.String? headerValue,
  }) =>
      NavigationPreloadState._(
        enabled: enabled,
        headerValue: headerValue,
      );
}

extension NavigationPreloadState$Typings on NavigationPreloadState {
  _i2.bool? get enabled => _i4.getProperty(
        this,
        'enabled',
      );
  set enabled(_i2.bool? value) {
    _i4.setProperty(
      this,
      'enabled',
      value ?? _i6.undefined,
    );
  }

  _i2.String? get headerValue => _i4.getProperty(
        this,
        'headerValue',
      );
  set headerValue(_i2.String? value) {
    _i4.setProperty(
      this,
      'headerValue',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class NotificationAction {
  external factory NotificationAction._({
    _i2.dynamic action,
    _i2.dynamic icon,
    _i2.dynamic title,
  });

  factory NotificationAction({
    _i2.String? action,
    _i2.String? icon,
    _i2.String? title,
  }) =>
      NotificationAction._(
        action: action,
        icon: icon,
        title: title,
      );
}

extension NotificationAction$Typings on NotificationAction {
  _i2.String get action => _i4.getProperty(
        this,
        'action',
      );
  set action(_i2.String value) {
    _i4.setProperty(
      this,
      'action',
      value,
    );
  }

  _i2.String? get icon => _i4.getProperty(
        this,
        'icon',
      );
  set icon(_i2.String? value) {
    _i4.setProperty(
      this,
      'icon',
      value ?? _i6.undefined,
    );
  }

  _i2.String get title => _i4.getProperty(
        this,
        'title',
      );
  set title(_i2.String value) {
    _i4.setProperty(
      this,
      'title',
      value,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class NotificationEventInit implements _i3.ExtendableEventInit {
  external factory NotificationEventInit._({
    _i2.dynamic action,
    _i2.dynamic notification,
  });

  factory NotificationEventInit({
    _i2.String? action,
    _i3.Notification? notification,
  }) =>
      NotificationEventInit._(
        action: action,
        notification: notification ?? _i6.undefined,
      );
}

extension NotificationEventInit$Typings on NotificationEventInit {
  _i2.String? get action => _i4.getProperty(
        this,
        'action',
      );
  set action(_i2.String? value) {
    _i4.setProperty(
      this,
      'action',
      value ?? _i6.undefined,
    );
  }

  _i3.Notification get notification => _i4.getProperty(
        this,
        'notification',
      );
  set notification(_i3.Notification value) {
    _i4.setProperty(
      this,
      'notification',
      value,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class NotificationOptions {
  external factory NotificationOptions._({
    _i2.dynamic actions,
    _i2.dynamic badge,
    _i2.dynamic body,
    _i2.dynamic data,
    _i2.dynamic dir,
    _i2.dynamic icon,
    _i2.dynamic image,
    _i2.dynamic lang,
    _i2.dynamic renotify,
    _i2.dynamic requireInteraction,
    _i2.dynamic silent,
    _i2.dynamic tag,
    _i2.dynamic timestamp,
    _i2.dynamic vibrate,
  });

  factory NotificationOptions({
    _i2.List<_i3.NotificationAction>? actions,
    _i2.String? badge,
    _i2.String? body,
    _i2.dynamic data,
    _i3.NotificationDirection? dir,
    _i2.String? icon,
    _i2.String? image,
    _i2.String? lang,
    _i2.bool? renotify,
    _i2.bool? requireInteraction,
    _i2.bool? silent,
    _i2.String? tag,
    _i2.int? timestamp,
    _i2.Object? vibrate,
  }) =>
      NotificationOptions._(
        actions: actions,
        badge: badge,
        body: body,
        data: data,
        dir: dir?.name ?? _i6.undefined,
        icon: icon,
        image: image,
        lang: lang,
        renotify: renotify,
        requireInteraction: requireInteraction,
        silent: silent ?? _i6.undefined,
        tag: tag,
        timestamp: timestamp,
        vibrate: vibrate ?? _i6.undefined,
      );
}

extension NotificationOptions$Typings on NotificationOptions {
  _i2.List<_i3.NotificationAction>? get actions => ((_i4.getProperty(
        this,
        'actions',
      )) as _i2.List?)
          ?.cast();
  set actions(_i2.List<_i3.NotificationAction>? value) {
    _i4.setProperty(
      this,
      'actions',
      value ?? _i6.undefined,
    );
  }

  _i2.String? get badge => _i4.getProperty(
        this,
        'badge',
      );
  set badge(_i2.String? value) {
    _i4.setProperty(
      this,
      'badge',
      value ?? _i6.undefined,
    );
  }

  _i2.String? get body => _i4.getProperty(
        this,
        'body',
      );
  set body(_i2.String? value) {
    _i4.setProperty(
      this,
      'body',
      value ?? _i6.undefined,
    );
  }

  _i2.dynamic get data => _i4.getProperty(
        this,
        'data',
      );
  set data(_i2.dynamic value) {
    _i4.setProperty(
      this,
      'data',
      value,
    );
  }

  _i3.NotificationDirection? get dir => switch (_i4.getProperty(
        this,
        'dir',
      )) {
        _i2.String name => _i3.NotificationDirectionOptions.values.byName(name),
        _ => null
      };
  set dir(_i3.NotificationDirection? value) {
    _i4.setProperty(
      this,
      'dir',
      value?.name ?? _i6.undefined ?? _i6.undefined,
    );
  }

  _i2.String? get icon => _i4.getProperty(
        this,
        'icon',
      );
  set icon(_i2.String? value) {
    _i4.setProperty(
      this,
      'icon',
      value ?? _i6.undefined,
    );
  }

  _i2.String? get image => _i4.getProperty(
        this,
        'image',
      );
  set image(_i2.String? value) {
    _i4.setProperty(
      this,
      'image',
      value ?? _i6.undefined,
    );
  }

  _i2.String? get lang => _i4.getProperty(
        this,
        'lang',
      );
  set lang(_i2.String? value) {
    _i4.setProperty(
      this,
      'lang',
      value ?? _i6.undefined,
    );
  }

  _i2.bool? get renotify => _i4.getProperty(
        this,
        'renotify',
      );
  set renotify(_i2.bool? value) {
    _i4.setProperty(
      this,
      'renotify',
      value ?? _i6.undefined,
    );
  }

  _i2.bool? get requireInteraction => _i4.getProperty(
        this,
        'requireInteraction',
      );
  set requireInteraction(_i2.bool? value) {
    _i4.setProperty(
      this,
      'requireInteraction',
      value ?? _i6.undefined,
    );
  }

  _i2.bool? get silent => _i4.getProperty(
        this,
        'silent',
      );
  set silent(_i2.bool? value) {
    _i4.setProperty(
      this,
      'silent',
      value ?? _i6.undefined,
    );
  }

  _i2.String? get tag => _i4.getProperty(
        this,
        'tag',
      );
  set tag(_i2.String? value) {
    _i4.setProperty(
      this,
      'tag',
      value ?? _i6.undefined,
    );
  }

  _i2.int? get timestamp => _i4.getProperty(
        this,
        'timestamp',
      );
  set timestamp(_i2.int? value) {
    _i4.setProperty(
      this,
      'timestamp',
      value ?? _i6.undefined,
    );
  }

  _i2.Object? get vibrate => _i4.getProperty(
        this,
        'vibrate',
      );
  set vibrate(_i2.Object? value) {
    _i4.setProperty(
      this,
      'vibrate',
      value ?? _i6.undefined ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class Pbkdf2Params implements _i3.Algorithm {
  external factory Pbkdf2Params._({
    _i2.dynamic hash,
    _i2.dynamic iterations,
    _i2.dynamic salt,
    _i2.dynamic name,
  });

  factory Pbkdf2Params({
    _i3.HashAlgorithmIdentifier? hash,
    _i2.num? iterations,
    _i2.Object? salt,
    _i2.String? name,
  }) =>
      Pbkdf2Params._(
        hash: hash ?? _i6.undefined,
        iterations: iterations,
        salt: salt ?? _i6.undefined,
        name: name,
      );
}

extension Pbkdf2Params$Typings on Pbkdf2Params {
  _i3.HashAlgorithmIdentifier get hash => _i4.getProperty(
        this,
        'hash',
      );
  set hash(_i3.HashAlgorithmIdentifier value) {
    _i4.setProperty(
      this,
      'hash',
      value,
    );
  }

  _i2.num get iterations => _i4.getProperty(
        this,
        'iterations',
      );
  set iterations(_i2.num value) {
    _i4.setProperty(
      this,
      'iterations',
      value,
    );
  }

  _i2.Object get salt => _i4.getProperty(
        this,
        'salt',
      );
  set salt(_i2.Object value) {
    _i4.setProperty(
      this,
      'salt',
      value,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class PerformanceMarkOptions {
  external factory PerformanceMarkOptions._({
    _i2.dynamic detail,
    _i2.dynamic startTime,
  });

  factory PerformanceMarkOptions({
    _i2.dynamic detail,
    _i2.num? startTime,
  }) =>
      PerformanceMarkOptions._(
        detail: detail,
        startTime: startTime,
      );
}

extension PerformanceMarkOptions$Typings on PerformanceMarkOptions {
  _i2.dynamic get detail => _i4.getProperty(
        this,
        'detail',
      );
  set detail(_i2.dynamic value) {
    _i4.setProperty(
      this,
      'detail',
      value,
    );
  }

  _i2.num? get startTime => _i4.getProperty(
        this,
        'startTime',
      );
  set startTime(_i2.num? value) {
    _i4.setProperty(
      this,
      'startTime',
      value ?? _i6.undefined ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class PerformanceMeasureOptions {
  external factory PerformanceMeasureOptions._({
    _i2.dynamic detail,
    _i2.dynamic duration,
    _i2.dynamic end,
    _i2.dynamic start,
  });

  factory PerformanceMeasureOptions({
    _i2.dynamic detail,
    _i2.num? duration,
    _i2.Object? end,
    _i2.Object? start,
  }) =>
      PerformanceMeasureOptions._(
        detail: detail,
        duration: duration,
        end: end ?? _i6.undefined,
        start: start ?? _i6.undefined,
      );
}

extension PerformanceMeasureOptions$Typings on PerformanceMeasureOptions {
  _i2.dynamic get detail => _i4.getProperty(
        this,
        'detail',
      );
  set detail(_i2.dynamic value) {
    _i4.setProperty(
      this,
      'detail',
      value,
    );
  }

  _i2.num? get duration => _i4.getProperty(
        this,
        'duration',
      );
  set duration(_i2.num? value) {
    _i4.setProperty(
      this,
      'duration',
      value ?? _i6.undefined ?? _i6.undefined,
    );
  }

  _i2.Object? get end => _i4.getProperty(
        this,
        'end',
      );
  set end(_i2.Object? value) {
    _i4.setProperty(
      this,
      'end',
      value ?? _i6.undefined,
    );
  }

  _i2.Object? get start => _i4.getProperty(
        this,
        'start',
      );
  set start(_i2.Object? value) {
    _i4.setProperty(
      this,
      'start',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class PerformanceObserverInit {
  external factory PerformanceObserverInit._({
    _i2.dynamic buffered,
    _i2.dynamic entryTypes,
    _i2.dynamic type,
  });

  factory PerformanceObserverInit({
    _i2.bool? buffered,
    _i2.List<_i2.String>? entryTypes,
    _i2.String? type,
  }) =>
      PerformanceObserverInit._(
        buffered: buffered,
        entryTypes: entryTypes,
        type: type,
      );
}

extension PerformanceObserverInit$Typings on PerformanceObserverInit {
  _i2.bool? get buffered => _i4.getProperty(
        this,
        'buffered',
      );
  set buffered(_i2.bool? value) {
    _i4.setProperty(
      this,
      'buffered',
      value ?? _i6.undefined,
    );
  }

  _i2.List<_i2.String>? get entryTypes => ((_i4.getProperty(
        this,
        'entryTypes',
      )) as _i2.List?)
          ?.cast();
  set entryTypes(_i2.List<_i2.String>? value) {
    _i4.setProperty(
      this,
      'entryTypes',
      value ?? _i6.undefined,
    );
  }

  _i2.String? get type => _i4.getProperty(
        this,
        'type',
      );
  set type(_i2.String? value) {
    _i4.setProperty(
      this,
      'type',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class PermissionDescriptor {
  external factory PermissionDescriptor._({_i2.dynamic name});

  factory PermissionDescriptor({_i3.PermissionName? name}) =>
      PermissionDescriptor._(name: name?.name ?? _i6.undefined);
}

extension PermissionDescriptor$Typings on PermissionDescriptor {
  _i3.PermissionName get name =>
      _i3.PermissionNameOptions.values.byName(_i4.getProperty(
        this,
        'name',
      ));
  set name(_i3.PermissionName value) {
    _i4.setProperty(
      this,
      'name',
      value.name,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class PlaneLayout {
  external factory PlaneLayout._({
    _i2.dynamic offset,
    _i2.dynamic stride,
  });

  factory PlaneLayout({
    _i2.num? offset,
    _i2.num? stride,
  }) =>
      PlaneLayout._(
        offset: offset,
        stride: stride,
      );
}

extension PlaneLayout$Typings on PlaneLayout {
  _i2.num get offset => _i4.getProperty(
        this,
        'offset',
      );
  set offset(_i2.num value) {
    _i4.setProperty(
      this,
      'offset',
      value,
    );
  }

  _i2.num get stride => _i4.getProperty(
        this,
        'stride',
      );
  set stride(_i2.num value) {
    _i4.setProperty(
      this,
      'stride',
      value,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class ProgressEventInit implements _i3.EventInit {
  external factory ProgressEventInit._({
    _i2.dynamic lengthComputable,
    _i2.dynamic loaded,
    _i2.dynamic total,
    _i2.dynamic bubbles,
    _i2.dynamic cancelable,
    _i2.dynamic composed,
  });

  factory ProgressEventInit({
    _i2.bool? lengthComputable,
    _i2.num? loaded,
    _i2.num? total,
    _i2.bool? bubbles,
    _i2.bool? cancelable,
    _i2.bool? composed,
  }) =>
      ProgressEventInit._(
        lengthComputable: lengthComputable,
        loaded: loaded,
        total: total,
        bubbles: bubbles,
        cancelable: cancelable,
        composed: composed,
      );
}

extension ProgressEventInit$Typings on ProgressEventInit {
  _i2.bool? get lengthComputable => _i4.getProperty(
        this,
        'lengthComputable',
      );
  set lengthComputable(_i2.bool? value) {
    _i4.setProperty(
      this,
      'lengthComputable',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get loaded => _i4.getProperty(
        this,
        'loaded',
      );
  set loaded(_i2.num? value) {
    _i4.setProperty(
      this,
      'loaded',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get total => _i4.getProperty(
        this,
        'total',
      );
  set total(_i2.num? value) {
    _i4.setProperty(
      this,
      'total',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class PromiseRejectionEventInit implements _i3.EventInit {
  external factory PromiseRejectionEventInit._({
    _i2.dynamic promise,
    _i2.dynamic reason,
    _i2.dynamic bubbles,
    _i2.dynamic cancelable,
    _i2.dynamic composed,
  });

  factory PromiseRejectionEventInit({
    _i2.Future<_i2.dynamic>? promise,
    _i2.dynamic reason,
    _i2.bool? bubbles,
    _i2.bool? cancelable,
    _i2.bool? composed,
  }) =>
      PromiseRejectionEventInit._(
        promise: promise,
        reason: reason,
        bubbles: bubbles,
        cancelable: cancelable,
        composed: composed,
      );
}

extension PromiseRejectionEventInit$Typings on PromiseRejectionEventInit {
  _i2.Future<_i2.dynamic> get promise => _i4.promiseToFuture(_i4.getProperty(
        this,
        'promise',
      ));
  set promise(_i2.Future<_i2.dynamic> value) {
    _i4.setProperty(
      this,
      'promise',
      value,
    );
  }

  _i2.dynamic get reason => _i4.getProperty(
        this,
        'reason',
      );
  set reason(_i2.dynamic value) {
    _i4.setProperty(
      this,
      'reason',
      value,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class PushEventInit implements _i3.ExtendableEventInit {
  external factory PushEventInit._({_i2.dynamic data});

  factory PushEventInit({_i2.Object? data}) =>
      PushEventInit._(data: data ?? _i6.undefined);
}

extension PushEventInit$Typings on PushEventInit {
  _i2.Object? get data => _i4.getProperty(
        this,
        'data',
      );
  set data(_i2.Object? value) {
    _i4.setProperty(
      this,
      'data',
      value ?? _i6.undefined ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class PushSubscriptionJSON {
  external factory PushSubscriptionJSON._({
    _i2.dynamic endpoint,
    _i2.dynamic expirationTime,
    _i2.dynamic keys,
  });

  factory PushSubscriptionJSON({
    _i2.String? endpoint,
    _i2.int? expirationTime,
    _i2.dynamic keys,
  }) =>
      PushSubscriptionJSON._(
        endpoint: endpoint,
        expirationTime: expirationTime ?? _i6.undefined,
        keys: keys,
      );
}

extension PushSubscriptionJSON$Typings on PushSubscriptionJSON {
  _i2.String? get endpoint => _i4.getProperty(
        this,
        'endpoint',
      );
  set endpoint(_i2.String? value) {
    _i4.setProperty(
      this,
      'endpoint',
      value ?? _i6.undefined,
    );
  }

  _i2.int? get expirationTime => _i4.getProperty(
        this,
        'expirationTime',
      );
  set expirationTime(_i2.int? value) {
    _i4.setProperty(
      this,
      'expirationTime',
      value ?? _i6.undefined,
    );
  }

  _i2.dynamic get keys => _i4.getProperty(
        this,
        'keys',
      );
  set keys(_i2.dynamic value) {
    _i4.setProperty(
      this,
      'keys',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class PushSubscriptionOptionsInit {
  external factory PushSubscriptionOptionsInit._({
    _i2.dynamic applicationServerKey,
    _i2.dynamic userVisibleOnly,
  });

  factory PushSubscriptionOptionsInit({
    _i2.dynamic applicationServerKey,
    _i2.bool? userVisibleOnly,
  }) =>
      PushSubscriptionOptionsInit._(
        applicationServerKey: applicationServerKey,
        userVisibleOnly: userVisibleOnly,
      );
}

extension PushSubscriptionOptionsInit$Typings on PushSubscriptionOptionsInit {
  _i2.dynamic get applicationServerKey => _i4.getProperty(
        this,
        'applicationServerKey',
      );
  set applicationServerKey(_i2.dynamic value) {
    _i4.setProperty(
      this,
      'applicationServerKey',
      value,
    );
  }

  _i2.bool? get userVisibleOnly => _i4.getProperty(
        this,
        'userVisibleOnly',
      );
  set userVisibleOnly(_i2.bool? value) {
    _i4.setProperty(
      this,
      'userVisibleOnly',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class QueuingStrategy<T> {
  external factory QueuingStrategy._({
    _i2.dynamic highWaterMark,
    _i2.dynamic size,
  });

  factory QueuingStrategy({
    _i2.num? highWaterMark,
    _i3.QueuingStrategySize<_i2.dynamic>? size,
  }) =>
      QueuingStrategy._(
        highWaterMark: highWaterMark,
        size: size ?? _i6.undefined,
      );
}

extension QueuingStrategy$Typings<T> on QueuingStrategy<T> {
  _i2.num? get highWaterMark => _i4.getProperty(
        this,
        'highWaterMark',
      );
  set highWaterMark(_i2.num? value) {
    _i4.setProperty(
      this,
      'highWaterMark',
      value ?? _i6.undefined,
    );
  }

  _i3.QueuingStrategySize<T>? get size => _i4.getProperty(
        this,
        'size',
      );
  set size(_i3.QueuingStrategySize<T>? value) {
    _i4.setProperty(
      this,
      'size',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class QueuingStrategyInit {
  external factory QueuingStrategyInit._({_i2.dynamic highWaterMark});

  factory QueuingStrategyInit({_i2.num? highWaterMark}) =>
      QueuingStrategyInit._(highWaterMark: highWaterMark);
}

extension QueuingStrategyInit$Typings on QueuingStrategyInit {
  /// Creates a new ByteLengthQueuingStrategy with the provided high water mark.
  ///
  ///  Note that the provided high water mark will not be validated ahead of time. Instead, if it is negative, NaN, or not a number, the resulting ByteLengthQueuingStrategy will cause the corresponding stream constructor to throw.
  _i2.num get highWaterMark => _i4.getProperty(
        this,
        'highWaterMark',
      );
  set highWaterMark(_i2.num value) {
    _i4.setProperty(
      this,
      'highWaterMark',
      value,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class RTCEncodedAudioFrameMetadata {
  external factory RTCEncodedAudioFrameMetadata._({
    _i2.dynamic contributingSources,
    _i2.dynamic synchronizationSource,
  });

  factory RTCEncodedAudioFrameMetadata({
    _i2.List<_i2.num>? contributingSources,
    _i2.num? synchronizationSource,
  }) =>
      RTCEncodedAudioFrameMetadata._(
        contributingSources: contributingSources,
        synchronizationSource: synchronizationSource,
      );
}

extension RTCEncodedAudioFrameMetadata$Typings on RTCEncodedAudioFrameMetadata {
  _i2.List<_i2.num>? get contributingSources => ((_i4.getProperty(
        this,
        'contributingSources',
      )) as _i2.List?)
          ?.cast();
  set contributingSources(_i2.List<_i2.num>? value) {
    _i4.setProperty(
      this,
      'contributingSources',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get synchronizationSource => _i4.getProperty(
        this,
        'synchronizationSource',
      );
  set synchronizationSource(_i2.num? value) {
    _i4.setProperty(
      this,
      'synchronizationSource',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class RTCEncodedVideoFrameMetadata {
  external factory RTCEncodedVideoFrameMetadata._({
    _i2.dynamic dependencies,
    _i2.dynamic frameId,
    _i2.dynamic height,
    _i2.dynamic spatialIndex,
    _i2.dynamic synchronizationSource,
    _i2.dynamic temporalIndex,
    _i2.dynamic width,
  });

  factory RTCEncodedVideoFrameMetadata({
    _i2.List<_i2.num>? dependencies,
    _i2.num? frameId,
    _i2.num? height,
    _i2.num? spatialIndex,
    _i2.num? synchronizationSource,
    _i2.num? temporalIndex,
    _i2.num? width,
  }) =>
      RTCEncodedVideoFrameMetadata._(
        dependencies: dependencies,
        frameId: frameId,
        height: height,
        spatialIndex: spatialIndex,
        synchronizationSource: synchronizationSource,
        temporalIndex: temporalIndex,
        width: width,
      );
}

extension RTCEncodedVideoFrameMetadata$Typings on RTCEncodedVideoFrameMetadata {
  _i2.List<_i2.num>? get dependencies => ((_i4.getProperty(
        this,
        'dependencies',
      )) as _i2.List?)
          ?.cast();
  set dependencies(_i2.List<_i2.num>? value) {
    _i4.setProperty(
      this,
      'dependencies',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get frameId => _i4.getProperty(
        this,
        'frameId',
      );
  set frameId(_i2.num? value) {
    _i4.setProperty(
      this,
      'frameId',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get height => _i4.getProperty(
        this,
        'height',
      );
  set height(_i2.num? value) {
    _i4.setProperty(
      this,
      'height',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get spatialIndex => _i4.getProperty(
        this,
        'spatialIndex',
      );
  set spatialIndex(_i2.num? value) {
    _i4.setProperty(
      this,
      'spatialIndex',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get synchronizationSource => _i4.getProperty(
        this,
        'synchronizationSource',
      );
  set synchronizationSource(_i2.num? value) {
    _i4.setProperty(
      this,
      'synchronizationSource',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get temporalIndex => _i4.getProperty(
        this,
        'temporalIndex',
      );
  set temporalIndex(_i2.num? value) {
    _i4.setProperty(
      this,
      'temporalIndex',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get width => _i4.getProperty(
        this,
        'width',
      );
  set width(_i2.num? value) {
    _i4.setProperty(
      this,
      'width',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class ReadableStreamGetReaderOptions {
  external factory ReadableStreamGetReaderOptions._({_i2.dynamic mode});

  factory ReadableStreamGetReaderOptions(
          {_i3.ReadableStreamReaderMode? mode}) =>
      ReadableStreamGetReaderOptions._(mode: mode);
}

extension ReadableStreamGetReaderOptions$Typings
    on ReadableStreamGetReaderOptions {
  /// Creates a ReadableStreamBYOBReader and locks the stream to the new reader.
  ///
  ///  This call behaves the same way as the no-argument variant, except that it only works on readable byte streams, i.e. streams which were constructed specifically with the ability to handle "bring your own buffer" reading. The returned BYOB reader provides the ability to directly read individual chunks from the stream via its read() method, into developer-supplied buffers, allowing more precise control over allocation.
  _i3.ReadableStreamReaderMode? get mode => _i4.getProperty(
        this,
        'mode',
      );
  set mode(_i3.ReadableStreamReaderMode? value) {
    _i4.setProperty(
      this,
      'mode',
      value ?? _i6.undefined ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class ReadableStreamReadDoneResult<T> {
  external factory ReadableStreamReadDoneResult._({
    _i2.dynamic done,
    _i2.dynamic value,
  });

  factory ReadableStreamReadDoneResult({
    _i2.bool? done,
    _i2.dynamic value,
  }) =>
      ReadableStreamReadDoneResult._(
        done: done,
        value: value,
      );
}

extension ReadableStreamReadDoneResult$Typings<T>
    on ReadableStreamReadDoneResult<T> {
  _i2.bool get done => _i4.getProperty(
        this,
        'done',
      );
  set done(_i2.bool value) {
    _i4.setProperty(
      this,
      'done',
      value,
    );
  }

  T? get value => _i4.getProperty(
        this,
        'value',
      );
  set value(T? value) {
    _i4.setProperty(
      this,
      'value',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class ReadableStreamReadValueResult<T> {
  external factory ReadableStreamReadValueResult._({
    _i2.dynamic done,
    _i2.dynamic value,
  });

  factory ReadableStreamReadValueResult({
    _i2.bool? done,
    _i2.dynamic value,
  }) =>
      ReadableStreamReadValueResult._(
        done: done,
        value: value,
      );
}

extension ReadableStreamReadValueResult$Typings<T>
    on ReadableStreamReadValueResult<T> {
  _i2.bool get done => _i4.getProperty(
        this,
        'done',
      );
  set done(_i2.bool value) {
    _i4.setProperty(
      this,
      'done',
      value,
    );
  }

  T get value => _i4.getProperty(
        this,
        'value',
      );
  set value(T value) {
    _i4.setProperty(
      this,
      'value',
      value,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class ReadableWritablePair<R, W> {
  external factory ReadableWritablePair._({
    _i2.dynamic readable,
    _i2.dynamic writable,
  });

  factory ReadableWritablePair({
    _i3.ReadableStream<_i2.dynamic>? readable,
    _i3.WritableStream<_i2.dynamic>? writable,
  }) =>
      ReadableWritablePair._(
        readable: readable ?? _i6.undefined,
        writable: writable ?? _i6.undefined,
      );
}

extension ReadableWritablePair$Typings<R, W> on ReadableWritablePair<R, W> {
  _i3.ReadableStream<R> get readable => _i4.getProperty(
        this,
        'readable',
      );
  set readable(_i3.ReadableStream<R> value) {
    _i4.setProperty(
      this,
      'readable',
      value,
    );
  }

  /// Provides a convenient, chainable way of piping this readable stream through a transform stream (or any other { writable, readable } pair). It simply pipes the stream into the writable side of the supplied pair, and returns the readable side for further use.
  ///
  ///  Piping a stream will lock it for the duration of the pipe, preventing any other consumer from acquiring a reader.
  _i3.WritableStream<W> get writable => _i4.getProperty(
        this,
        'writable',
      );
  set writable(_i3.WritableStream<W> value) {
    _i4.setProperty(
      this,
      'writable',
      value,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class RegistrationOptions {
  external factory RegistrationOptions._({
    _i2.dynamic scope,
    _i2.dynamic type,
    _i2.dynamic updateViaCache,
  });

  factory RegistrationOptions({
    _i2.String? scope,
    _i3.WorkerType? type,
    _i3.ServiceWorkerUpdateViaCache? updateViaCache,
  }) =>
      RegistrationOptions._(
        scope: scope,
        type: type?.name ?? _i6.undefined,
        updateViaCache: updateViaCache?.name ?? _i6.undefined,
      );
}

extension RegistrationOptions$Typings on RegistrationOptions {
  _i2.String? get scope => _i4.getProperty(
        this,
        'scope',
      );
  set scope(_i2.String? value) {
    _i4.setProperty(
      this,
      'scope',
      value ?? _i6.undefined,
    );
  }

  _i3.WorkerType? get type => switch (_i4.getProperty(
        this,
        'type',
      )) {
        _i2.String name => _i3.WorkerTypeOptions.values.byName(name),
        _ => null
      };
  set type(_i3.WorkerType? value) {
    _i4.setProperty(
      this,
      'type',
      value?.name ?? _i6.undefined ?? _i6.undefined,
    );
  }

  _i3.ServiceWorkerUpdateViaCache? get updateViaCache =>
      switch (_i4.getProperty(
        this,
        'updateViaCache',
      )) {
        _i2.String name =>
          _i3.ServiceWorkerUpdateViaCacheOptions.values.byName(name),
        _ => null
      };
  set updateViaCache(_i3.ServiceWorkerUpdateViaCache? value) {
    _i4.setProperty(
      this,
      'updateViaCache',
      value?.name ?? _i6.undefined ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class ReportingObserverOptions {
  external factory ReportingObserverOptions._({
    _i2.dynamic buffered,
    _i2.dynamic types,
  });

  factory ReportingObserverOptions({
    _i2.bool? buffered,
    _i2.List<_i2.String>? types,
  }) =>
      ReportingObserverOptions._(
        buffered: buffered,
        types: types,
      );
}

extension ReportingObserverOptions$Typings on ReportingObserverOptions {
  _i2.bool? get buffered => _i4.getProperty(
        this,
        'buffered',
      );
  set buffered(_i2.bool? value) {
    _i4.setProperty(
      this,
      'buffered',
      value ?? _i6.undefined,
    );
  }

  _i2.List<_i2.String>? get types => ((_i4.getProperty(
        this,
        'types',
      )) as _i2.List?)
          ?.cast();
  set types(_i2.List<_i2.String>? value) {
    _i4.setProperty(
      this,
      'types',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class RequestInit {
  external factory RequestInit._({
    _i2.dynamic body,
    _i2.dynamic cache,
    _i2.dynamic credentials,
    _i2.dynamic headers,
    _i2.dynamic integrity,
    _i2.dynamic keepalive,
    _i2.dynamic method,
    _i2.dynamic mode,
    _i2.dynamic redirect,
    _i2.dynamic referrer,
    _i2.dynamic referrerPolicy,
    _i2.dynamic signal,
    _i2.dynamic window,
  });

  factory RequestInit({
    _i2.Object? body,
    _i3.RequestCache? cache,
    _i3.RequestCredentials? credentials,
    _i2.Object? headers,
    _i2.String? integrity,
    _i2.bool? keepalive,
    _i2.String? method,
    _i3.RequestMode? mode,
    _i3.RequestRedirect? redirect,
    _i2.String? referrer,
    _i3.ReferrerPolicy? referrerPolicy,
    _i3.AbortSignal? signal,
    _i2.dynamic window,
  }) =>
      RequestInit._(
        body: body ?? _i6.undefined ?? _i6.undefined,
        cache: cache?.name ?? _i6.undefined,
        credentials: credentials?.name ?? _i6.undefined,
        headers: headers ?? _i6.undefined,
        integrity: integrity,
        keepalive: keepalive,
        method: method,
        mode: mode?.name ?? _i6.undefined,
        redirect: redirect?.name ?? _i6.undefined,
        referrer: referrer,
        referrerPolicy: referrerPolicy?.name ?? _i6.undefined,
        signal: signal ?? _i6.undefined,
        window: window,
      );
}

extension RequestInit$Typings on RequestInit {
  /// A BodyInit object or null to set request's body.
  _i2.Object? get body => _i4.getProperty(
        this,
        'body',
      );
  set body(_i2.Object? value) {
    _i4.setProperty(
      this,
      'body',
      value ?? _i6.undefined ?? _i6.undefined,
    );
  }

  /// A string indicating how the request will interact with the browser's cache to set request's cache.
  _i3.RequestCache? get cache => switch (_i4.getProperty(
        this,
        'cache',
      )) {
        _i2.String name => _i3.RequestCacheOptions.values.byName(name),
        _ => null
      };
  set cache(_i3.RequestCache? value) {
    _i4.setProperty(
      this,
      'cache',
      value?.name ?? _i6.undefined ?? _i6.undefined,
    );
  }

  /// A string indicating whether credentials will be sent with the request always, never, or only when sent to a same-origin URL. Sets request's credentials.
  _i3.RequestCredentials? get credentials => switch (_i4.getProperty(
        this,
        'credentials',
      )) {
        _i2.String name => _i3.RequestCredentialsOptions.values.byName(name),
        _ => null
      };
  set credentials(_i3.RequestCredentials? value) {
    _i4.setProperty(
      this,
      'credentials',
      value?.name ?? _i6.undefined ?? _i6.undefined,
    );
  }

  /// A Headers object, an object literal, or an array of two-item arrays to set request's headers.
  _i2.Object? get headers => _i4.getProperty(
        this,
        'headers',
      );
  set headers(_i2.Object? value) {
    _i4.setProperty(
      this,
      'headers',
      value ?? _i6.undefined ?? _i6.undefined,
    );
  }

  /// A cryptographic hash of the resource to be fetched by request. Sets request's integrity.
  _i2.String? get integrity => _i4.getProperty(
        this,
        'integrity',
      );
  set integrity(_i2.String? value) {
    _i4.setProperty(
      this,
      'integrity',
      value ?? _i6.undefined,
    );
  }

  /// A boolean to set request's keepalive.
  _i2.bool? get keepalive => _i4.getProperty(
        this,
        'keepalive',
      );
  set keepalive(_i2.bool? value) {
    _i4.setProperty(
      this,
      'keepalive',
      value ?? _i6.undefined,
    );
  }

  /// A string to set request's method.
  _i2.String? get method => _i4.getProperty(
        this,
        'method',
      );
  set method(_i2.String? value) {
    _i4.setProperty(
      this,
      'method',
      value ?? _i6.undefined,
    );
  }

  /// A string to indicate whether the request will use CORS, or will be restricted to same-origin URLs. Sets request's mode.
  _i3.RequestMode? get mode => switch (_i4.getProperty(
        this,
        'mode',
      )) {
        _i2.String name => _i3.RequestModeOptions.values.byName(name),
        _ => null
      };
  set mode(_i3.RequestMode? value) {
    _i4.setProperty(
      this,
      'mode',
      value?.name ?? _i6.undefined ?? _i6.undefined,
    );
  }

  /// A string indicating whether request follows redirects, results in an error upon encountering a redirect, or returns the redirect (in an opaque fashion). Sets request's redirect.
  _i3.RequestRedirect? get redirect => switch (_i4.getProperty(
        this,
        'redirect',
      )) {
        _i2.String name => _i3.RequestRedirectOptions.values.byName(name),
        _ => null
      };
  set redirect(_i3.RequestRedirect? value) {
    _i4.setProperty(
      this,
      'redirect',
      value?.name ?? _i6.undefined ?? _i6.undefined,
    );
  }

  /// A string whose value is a same-origin URL, "about:client", or the empty string, to set request's referrer.
  _i2.String? get referrer => _i4.getProperty(
        this,
        'referrer',
      );
  set referrer(_i2.String? value) {
    _i4.setProperty(
      this,
      'referrer',
      value ?? _i6.undefined,
    );
  }

  /// A referrer policy to set request's referrerPolicy.
  _i3.ReferrerPolicy? get referrerPolicy => switch (_i4.getProperty(
        this,
        'referrerPolicy',
      )) {
        _i2.String name => _i3.ReferrerPolicyOptions.values.byName(name),
        _ => null
      };
  set referrerPolicy(_i3.ReferrerPolicy? value) {
    _i4.setProperty(
      this,
      'referrerPolicy',
      value?.name ?? _i6.undefined ?? _i6.undefined,
    );
  }

  /// An AbortSignal to set request's signal.
  _i3.AbortSignal? get signal => _i4.getProperty(
        this,
        'signal',
      );
  set signal(_i3.AbortSignal? value) {
    _i4.setProperty(
      this,
      'signal',
      value ?? _i6.undefined,
    );
  }

  /// Can only be null. Used to disassociate request from any Window.
  _i2.dynamic get window => _i4.getProperty(
        this,
        'window',
      );
  set window(_i2.dynamic value) {
    _i4.setProperty(
      this,
      'window',
      value,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class ResponseInit {
  external factory ResponseInit._({
    _i2.dynamic headers,
    _i2.dynamic status,
    _i2.dynamic statusText,
  });

  factory ResponseInit({
    _i2.Object? headers,
    _i2.num? status,
    _i2.String? statusText,
  }) =>
      ResponseInit._(
        headers: headers ?? _i6.undefined,
        status: status,
        statusText: statusText,
      );
}

extension ResponseInit$Typings on ResponseInit {
  _i2.Object? get headers => _i4.getProperty(
        this,
        'headers',
      );
  set headers(_i2.Object? value) {
    _i4.setProperty(
      this,
      'headers',
      value ?? _i6.undefined ?? _i6.undefined,
    );
  }

  _i2.num? get status => _i4.getProperty(
        this,
        'status',
      );
  set status(_i2.num? value) {
    _i4.setProperty(
      this,
      'status',
      value ?? _i6.undefined,
    );
  }

  _i2.String? get statusText => _i4.getProperty(
        this,
        'statusText',
      );
  set statusText(_i2.String? value) {
    _i4.setProperty(
      this,
      'statusText',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class RsaHashedImportParams implements _i3.Algorithm {
  external factory RsaHashedImportParams._({
    _i2.dynamic hash,
    _i2.dynamic name,
  });

  factory RsaHashedImportParams({
    _i3.HashAlgorithmIdentifier? hash,
    _i2.String? name,
  }) =>
      RsaHashedImportParams._(
        hash: hash ?? _i6.undefined,
        name: name,
      );
}

extension RsaHashedImportParams$Typings on RsaHashedImportParams {
  _i3.HashAlgorithmIdentifier get hash => _i4.getProperty(
        this,
        'hash',
      );
  set hash(_i3.HashAlgorithmIdentifier value) {
    _i4.setProperty(
      this,
      'hash',
      value,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class RsaHashedKeyGenParams implements _i3.RsaKeyGenParams {
  external factory RsaHashedKeyGenParams._({
    _i2.dynamic hash,
    _i2.dynamic modulusLength,
    _i2.dynamic publicExponent,
  });

  factory RsaHashedKeyGenParams({
    _i3.HashAlgorithmIdentifier? hash,
    _i2.num? modulusLength,
    _i5.Uint8List? publicExponent,
  }) =>
      RsaHashedKeyGenParams._(
        hash: hash ?? _i6.undefined,
        modulusLength: modulusLength,
        publicExponent: publicExponent,
      );
}

extension RsaHashedKeyGenParams$Typings on RsaHashedKeyGenParams {
  _i3.HashAlgorithmIdentifier get hash => _i4.getProperty(
        this,
        'hash',
      );
  set hash(_i3.HashAlgorithmIdentifier value) {
    _i4.setProperty(
      this,
      'hash',
      value,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class RsaKeyGenParams implements _i3.Algorithm {
  external factory RsaKeyGenParams._({
    _i2.dynamic modulusLength,
    _i2.dynamic publicExponent,
    _i2.dynamic name,
  });

  factory RsaKeyGenParams({
    _i2.num? modulusLength,
    _i5.Uint8List? publicExponent,
    _i2.String? name,
  }) =>
      RsaKeyGenParams._(
        modulusLength: modulusLength,
        publicExponent: publicExponent,
        name: name,
      );
}

extension RsaKeyGenParams$Typings on RsaKeyGenParams {
  _i2.num get modulusLength => _i4.getProperty(
        this,
        'modulusLength',
      );
  set modulusLength(_i2.num value) {
    _i4.setProperty(
      this,
      'modulusLength',
      value,
    );
  }

  _i5.Uint8List get publicExponent => _i4.getProperty(
        this,
        'publicExponent',
      );
  set publicExponent(_i5.Uint8List value) {
    _i4.setProperty(
      this,
      'publicExponent',
      value,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class RsaOaepParams implements _i3.Algorithm {
  external factory RsaOaepParams._({
    _i2.dynamic label,
    _i2.dynamic name,
  });

  factory RsaOaepParams({
    _i2.Object? label,
    _i2.String? name,
  }) =>
      RsaOaepParams._(
        label: label ?? _i6.undefined,
        name: name,
      );
}

extension RsaOaepParams$Typings on RsaOaepParams {
  _i2.Object? get label => _i4.getProperty(
        this,
        'label',
      );
  set label(_i2.Object? value) {
    _i4.setProperty(
      this,
      'label',
      value ?? _i6.undefined ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class RsaOtherPrimesInfo {
  external factory RsaOtherPrimesInfo._({
    _i2.dynamic d,
    _i2.dynamic r,
    _i2.dynamic t,
  });

  factory RsaOtherPrimesInfo({
    _i2.String? d,
    _i2.String? r,
    _i2.String? t,
  }) =>
      RsaOtherPrimesInfo._(
        d: d,
        r: r,
        t: t,
      );
}

extension RsaOtherPrimesInfo$Typings on RsaOtherPrimesInfo {
  _i2.String? get d => _i4.getProperty(
        this,
        'd',
      );
  set d(_i2.String? value) {
    _i4.setProperty(
      this,
      'd',
      value ?? _i6.undefined,
    );
  }

  _i2.String? get r => _i4.getProperty(
        this,
        'r',
      );
  set r(_i2.String? value) {
    _i4.setProperty(
      this,
      'r',
      value ?? _i6.undefined,
    );
  }

  _i2.String? get t => _i4.getProperty(
        this,
        't',
      );
  set t(_i2.String? value) {
    _i4.setProperty(
      this,
      't',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class RsaPssParams implements _i3.Algorithm {
  external factory RsaPssParams._({
    _i2.dynamic saltLength,
    _i2.dynamic name,
  });

  factory RsaPssParams({
    _i2.num? saltLength,
    _i2.String? name,
  }) =>
      RsaPssParams._(
        saltLength: saltLength,
        name: name,
      );
}

extension RsaPssParams$Typings on RsaPssParams {
  _i2.num get saltLength => _i4.getProperty(
        this,
        'saltLength',
      );
  set saltLength(_i2.num value) {
    _i4.setProperty(
      this,
      'saltLength',
      value,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class SecurityPolicyViolationEventInit implements _i3.EventInit {
  external factory SecurityPolicyViolationEventInit._({
    _i2.dynamic blockedURI,
    _i2.dynamic columnNumber,
    _i2.dynamic disposition,
    _i2.dynamic documentURI,
    _i2.dynamic effectiveDirective,
    _i2.dynamic lineNumber,
    _i2.dynamic originalPolicy,
    _i2.dynamic referrer,
    _i2.dynamic sample,
    _i2.dynamic sourceFile,
    _i2.dynamic statusCode,
    _i2.dynamic violatedDirective,
    _i2.dynamic bubbles,
    _i2.dynamic cancelable,
    _i2.dynamic composed,
  });

  factory SecurityPolicyViolationEventInit({
    _i2.String? blockedURI,
    _i2.num? columnNumber,
    _i3.SecurityPolicyViolationEventDisposition? disposition,
    _i2.String? documentURI,
    _i2.String? effectiveDirective,
    _i2.num? lineNumber,
    _i2.String? originalPolicy,
    _i2.String? referrer,
    _i2.String? sample,
    _i2.String? sourceFile,
    _i2.num? statusCode,
    _i2.String? violatedDirective,
    _i2.bool? bubbles,
    _i2.bool? cancelable,
    _i2.bool? composed,
  }) =>
      SecurityPolicyViolationEventInit._(
        blockedURI: blockedURI,
        columnNumber: columnNumber,
        disposition: disposition?.name ?? _i6.undefined,
        documentURI: documentURI,
        effectiveDirective: effectiveDirective,
        lineNumber: lineNumber,
        originalPolicy: originalPolicy,
        referrer: referrer,
        sample: sample,
        sourceFile: sourceFile,
        statusCode: statusCode,
        violatedDirective: violatedDirective,
        bubbles: bubbles,
        cancelable: cancelable,
        composed: composed,
      );
}

extension SecurityPolicyViolationEventInit$Typings
    on SecurityPolicyViolationEventInit {
  _i2.String? get blockedURI => _i4.getProperty(
        this,
        'blockedURI',
      );
  set blockedURI(_i2.String? value) {
    _i4.setProperty(
      this,
      'blockedURI',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get columnNumber => _i4.getProperty(
        this,
        'columnNumber',
      );
  set columnNumber(_i2.num? value) {
    _i4.setProperty(
      this,
      'columnNumber',
      value ?? _i6.undefined,
    );
  }

  _i3.SecurityPolicyViolationEventDisposition get disposition =>
      _i3.SecurityPolicyViolationEventDispositionOptions.values
          .byName(_i4.getProperty(
        this,
        'disposition',
      ));
  set disposition(_i3.SecurityPolicyViolationEventDisposition value) {
    _i4.setProperty(
      this,
      'disposition',
      value.name,
    );
  }

  _i2.String get documentURI => _i4.getProperty(
        this,
        'documentURI',
      );
  set documentURI(_i2.String value) {
    _i4.setProperty(
      this,
      'documentURI',
      value,
    );
  }

  _i2.String get effectiveDirective => _i4.getProperty(
        this,
        'effectiveDirective',
      );
  set effectiveDirective(_i2.String value) {
    _i4.setProperty(
      this,
      'effectiveDirective',
      value,
    );
  }

  _i2.num? get lineNumber => _i4.getProperty(
        this,
        'lineNumber',
      );
  set lineNumber(_i2.num? value) {
    _i4.setProperty(
      this,
      'lineNumber',
      value ?? _i6.undefined,
    );
  }

  _i2.String get originalPolicy => _i4.getProperty(
        this,
        'originalPolicy',
      );
  set originalPolicy(_i2.String value) {
    _i4.setProperty(
      this,
      'originalPolicy',
      value,
    );
  }

  _i2.String? get referrer => _i4.getProperty(
        this,
        'referrer',
      );
  set referrer(_i2.String? value) {
    _i4.setProperty(
      this,
      'referrer',
      value ?? _i6.undefined,
    );
  }

  _i2.String? get sample => _i4.getProperty(
        this,
        'sample',
      );
  set sample(_i2.String? value) {
    _i4.setProperty(
      this,
      'sample',
      value ?? _i6.undefined,
    );
  }

  _i2.String? get sourceFile => _i4.getProperty(
        this,
        'sourceFile',
      );
  set sourceFile(_i2.String? value) {
    _i4.setProperty(
      this,
      'sourceFile',
      value ?? _i6.undefined,
    );
  }

  _i2.num get statusCode => _i4.getProperty(
        this,
        'statusCode',
      );
  set statusCode(_i2.num value) {
    _i4.setProperty(
      this,
      'statusCode',
      value,
    );
  }

  _i2.String get violatedDirective => _i4.getProperty(
        this,
        'violatedDirective',
      );
  set violatedDirective(_i2.String value) {
    _i4.setProperty(
      this,
      'violatedDirective',
      value,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class StorageEstimate {
  external factory StorageEstimate._({
    _i2.dynamic quota,
    _i2.dynamic usage,
  });

  factory StorageEstimate({
    _i2.num? quota,
    _i2.num? usage,
  }) =>
      StorageEstimate._(
        quota: quota,
        usage: usage,
      );
}

extension StorageEstimate$Typings on StorageEstimate {
  _i2.num? get quota => _i4.getProperty(
        this,
        'quota',
      );
  set quota(_i2.num? value) {
    _i4.setProperty(
      this,
      'quota',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get usage => _i4.getProperty(
        this,
        'usage',
      );
  set usage(_i2.num? value) {
    _i4.setProperty(
      this,
      'usage',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class StreamPipeOptions {
  external factory StreamPipeOptions._({
    _i2.dynamic preventAbort,
    _i2.dynamic preventCancel,
    _i2.dynamic preventClose,
    _i2.dynamic signal,
  });

  factory StreamPipeOptions({
    _i2.bool? preventAbort,
    _i2.bool? preventCancel,
    _i2.bool? preventClose,
    _i3.AbortSignal? signal,
  }) =>
      StreamPipeOptions._(
        preventAbort: preventAbort,
        preventCancel: preventCancel,
        preventClose: preventClose,
        signal: signal ?? _i6.undefined,
      );
}

extension StreamPipeOptions$Typings on StreamPipeOptions {
  _i2.bool? get preventAbort => _i4.getProperty(
        this,
        'preventAbort',
      );
  set preventAbort(_i2.bool? value) {
    _i4.setProperty(
      this,
      'preventAbort',
      value ?? _i6.undefined,
    );
  }

  _i2.bool? get preventCancel => _i4.getProperty(
        this,
        'preventCancel',
      );
  set preventCancel(_i2.bool? value) {
    _i4.setProperty(
      this,
      'preventCancel',
      value ?? _i6.undefined,
    );
  }

  /// Pipes this readable stream to a given writable stream destination. The way in which the piping process behaves under various error conditions can be customized with a number of passed options. It returns a promise that fulfills when the piping process completes successfully, or rejects if any errors were encountered.
  ///
  ///  Piping a stream will lock it for the duration of the pipe, preventing any other consumer from acquiring a reader.
  ///
  ///  Errors and closures of the source and destination streams propagate as follows:
  ///
  ///  An error in this source readable stream will abort destination, unless preventAbort is truthy. The returned promise will be rejected with the source's error, or with any error that occurs during aborting the destination.
  ///
  ///  An error in destination will cancel this source readable stream, unless preventCancel is truthy. The returned promise will be rejected with the destination's error, or with any error that occurs during canceling the source.
  ///
  ///  When this source readable stream closes, destination will be closed, unless preventClose is truthy. The returned promise will be fulfilled once this process completes, unless an error is encountered while closing the destination, in which case it will be rejected with that error.
  ///
  ///  If destination starts out closed or closing, this source readable stream will be canceled, unless preventCancel is true. The returned promise will be rejected with an error indicating piping to a closed stream failed, or with any error that occurs during canceling the source.
  ///
  ///  The signal option can be set to an AbortSignal to allow aborting an ongoing pipe operation via the corresponding AbortController. In this case, this source readable stream will be canceled, and destination aborted, unless the respective options preventCancel or preventAbort are set.
  _i2.bool? get preventClose => _i4.getProperty(
        this,
        'preventClose',
      );
  set preventClose(_i2.bool? value) {
    _i4.setProperty(
      this,
      'preventClose',
      value ?? _i6.undefined,
    );
  }

  _i3.AbortSignal? get signal => _i4.getProperty(
        this,
        'signal',
      );
  set signal(_i3.AbortSignal? value) {
    _i4.setProperty(
      this,
      'signal',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class StructuredSerializeOptions {
  external factory StructuredSerializeOptions._({_i2.dynamic transfer});

  factory StructuredSerializeOptions({_i2.List<_i2.Object>? transfer}) =>
      StructuredSerializeOptions._(transfer: transfer);
}

extension StructuredSerializeOptions$Typings on StructuredSerializeOptions {
  _i2.List<_i2.Object>? get transfer => ((_i4.getProperty(
        this,
        'transfer',
      )) as _i2.List?)
          ?.cast();
  set transfer(_i2.List<_i2.Object>? value) {
    _i4.setProperty(
      this,
      'transfer',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class TextDecodeOptions {
  external factory TextDecodeOptions._({_i2.dynamic stream});

  factory TextDecodeOptions({_i2.bool? stream}) =>
      TextDecodeOptions._(stream: stream);
}

extension TextDecodeOptions$Typings on TextDecodeOptions {
  _i2.bool? get stream => _i4.getProperty(
        this,
        'stream',
      );
  set stream(_i2.bool? value) {
    _i4.setProperty(
      this,
      'stream',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class TextDecoderOptions {
  external factory TextDecoderOptions._({
    _i2.dynamic fatal,
    _i2.dynamic ignoreBOM,
  });

  factory TextDecoderOptions({
    _i2.bool? fatal,
    _i2.bool? ignoreBOM,
  }) =>
      TextDecoderOptions._(
        fatal: fatal,
        ignoreBOM: ignoreBOM,
      );
}

extension TextDecoderOptions$Typings on TextDecoderOptions {
  _i2.bool? get fatal => _i4.getProperty(
        this,
        'fatal',
      );
  set fatal(_i2.bool? value) {
    _i4.setProperty(
      this,
      'fatal',
      value ?? _i6.undefined,
    );
  }

  _i2.bool? get ignoreBOM => _i4.getProperty(
        this,
        'ignoreBOM',
      );
  set ignoreBOM(_i2.bool? value) {
    _i4.setProperty(
      this,
      'ignoreBOM',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class TextEncoderEncodeIntoResult {
  external factory TextEncoderEncodeIntoResult._({
    _i2.dynamic read,
    _i2.dynamic written,
  });

  factory TextEncoderEncodeIntoResult({
    _i2.num? read,
    _i2.num? written,
  }) =>
      TextEncoderEncodeIntoResult._(
        read: read,
        written: written,
      );
}

extension TextEncoderEncodeIntoResult$Typings on TextEncoderEncodeIntoResult {
  _i2.num get read => _i4.getProperty(
        this,
        'read',
      );
  set read(_i2.num value) {
    _i4.setProperty(
      this,
      'read',
      value,
    );
  }

  _i2.num get written => _i4.getProperty(
        this,
        'written',
      );
  set written(_i2.num value) {
    _i4.setProperty(
      this,
      'written',
      value,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class Transformer<I, O> {
  external factory Transformer._({
    _i2.dynamic flush,
    _i2.dynamic readableType,
    _i2.dynamic start,
    _i2.dynamic transform,
    _i2.dynamic writableType,
  });

  factory Transformer({
    _i3.TransformerFlushCallback<_i2.dynamic>? flush,
    _i2.dynamic readableType,
    _i3.TransformerStartCallback<_i2.dynamic>? start,
    _i3.TransformerTransformCallback<_i2.dynamic, _i2.dynamic>? transform,
    _i2.dynamic writableType,
  }) =>
      Transformer._(
        flush: flush ?? _i6.undefined,
        readableType: readableType,
        start: start ?? _i6.undefined,
        transform: transform ?? _i6.undefined,
        writableType: writableType,
      );
}

extension Transformer$Typings<I, O> on Transformer<I, O> {
  _i3.TransformerFlushCallback<O>? get flush => _i4.getProperty(
        this,
        'flush',
      );
  set flush(_i3.TransformerFlushCallback<O>? value) {
    _i4.setProperty(
      this,
      'flush',
      value ?? _i6.undefined,
    );
  }

  _i2.dynamic get readableType => _i4.getProperty(
        this,
        'readableType',
      );
  set readableType(_i2.dynamic value) {
    _i4.setProperty(
      this,
      'readableType',
      value,
    );
  }

  _i3.TransformerStartCallback<O>? get start => _i4.getProperty(
        this,
        'start',
      );
  set start(_i3.TransformerStartCallback<O>? value) {
    _i4.setProperty(
      this,
      'start',
      value ?? _i6.undefined,
    );
  }

  _i3.TransformerTransformCallback<I, O>? get transform => _i4.getProperty(
        this,
        'transform',
      );
  set transform(_i3.TransformerTransformCallback<I, O>? value) {
    _i4.setProperty(
      this,
      'transform',
      value ?? _i6.undefined,
    );
  }

  _i2.dynamic get writableType => _i4.getProperty(
        this,
        'writableType',
      );
  set writableType(_i2.dynamic value) {
    _i4.setProperty(
      this,
      'writableType',
      value,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class UnderlyingByteSource {
  external factory UnderlyingByteSource._({
    _i2.dynamic autoAllocateChunkSize,
    _i2.dynamic cancel,
    _i2.dynamic pull,
    _i2.dynamic start,
    _i2.dynamic type,
  });

  factory UnderlyingByteSource({
    _i2.num? autoAllocateChunkSize,
    _i3.UnderlyingSourceCancelCallback? cancel,
    _i7.FutureOr<void> Function(_i3.ReadableByteStreamController)? pull,
    _i2.dynamic Function(_i3.ReadableByteStreamController)? start,
    _i2.String? type,
  }) =>
      UnderlyingByteSource._(
        autoAllocateChunkSize: autoAllocateChunkSize,
        cancel: cancel ?? _i6.undefined,
        pull: pull == null
            ? null
            : _i4.allowInterop((p0) => _i6.Promise.futureOr(() => pull(p0))),
        start: start == null ? null : _i4.allowInterop(start),
        type: type,
      );
}

extension UnderlyingByteSource$Typings on UnderlyingByteSource {
  _i2.num? get autoAllocateChunkSize => _i4.getProperty(
        this,
        'autoAllocateChunkSize',
      );
  set autoAllocateChunkSize(_i2.num? value) {
    _i4.setProperty(
      this,
      'autoAllocateChunkSize',
      value ?? _i6.undefined,
    );
  }

  _i3.UnderlyingSourceCancelCallback? get cancel => _i4.getProperty(
        this,
        'cancel',
      );
  set cancel(_i3.UnderlyingSourceCancelCallback? value) {
    _i4.setProperty(
      this,
      'cancel',
      value ?? _i6.undefined,
    );
  }

  _i7.FutureOr<void> Function(_i3.ReadableByteStreamController)? get pull =>
      (_i3.ReadableByteStreamController p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'pull',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set pull(
      _i7.FutureOr<void> Function(_i3.ReadableByteStreamController)? value) {
    _i4.setProperty(
      this,
      'pull',
      value == null
          ? _i6.undefined
          : _i4.allowInterop((p0) => _i6.Promise.futureOr(() => value(p0))),
    );
  }

  _i2.dynamic Function(_i3.ReadableByteStreamController)? get start =>
      (_i3.ReadableByteStreamController p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'start',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set start(_i2.dynamic Function(_i3.ReadableByteStreamController)? value) {
    _i4.setProperty(
      this,
      'start',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  _i2.String get type => _i4.getProperty(
        this,
        'type',
      );
  set type(_i2.String value) {
    _i4.setProperty(
      this,
      'type',
      value,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class UnderlyingDefaultSource<R> {
  external factory UnderlyingDefaultSource._({
    _i2.dynamic cancel,
    _i2.dynamic pull,
    _i2.dynamic start,
    _i2.dynamic type,
  });

  factory UnderlyingDefaultSource({
    _i3.UnderlyingSourceCancelCallback? cancel,
    _i7.FutureOr<void> Function(
            _i3.ReadableStreamDefaultController<_i2.dynamic>)?
        pull,
    _i2.dynamic Function(_i3.ReadableStreamDefaultController<_i2.dynamic>)?
        start,
    _i2.dynamic type,
  }) =>
      UnderlyingDefaultSource._(
        cancel: cancel ?? _i6.undefined,
        pull: pull == null
            ? null
            : _i4.allowInterop((p0) => _i6.Promise.futureOr(() => pull(p0))),
        start: start == null ? null : _i4.allowInterop(start),
        type: type,
      );
}

extension UnderlyingDefaultSource$Typings<R> on UnderlyingDefaultSource<R> {
  _i3.UnderlyingSourceCancelCallback? get cancel => _i4.getProperty(
        this,
        'cancel',
      );
  set cancel(_i3.UnderlyingSourceCancelCallback? value) {
    _i4.setProperty(
      this,
      'cancel',
      value ?? _i6.undefined,
    );
  }

  _i7.FutureOr<void> Function(_i3.ReadableStreamDefaultController<R>)?
      get pull => (_i3.ReadableStreamDefaultController<R> p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'pull',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set pull(
      _i7.FutureOr<void> Function(_i3.ReadableStreamDefaultController<R>)?
          value) {
    _i4.setProperty(
      this,
      'pull',
      value == null
          ? _i6.undefined
          : _i4.allowInterop((p0) => _i6.Promise.futureOr(() => value(p0))),
    );
  }

  _i2.dynamic Function(_i3.ReadableStreamDefaultController<R>)? get start =>
      (_i3.ReadableStreamDefaultController<R> p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'start',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set start(
      _i2.dynamic Function(_i3.ReadableStreamDefaultController<R>)? value) {
    _i4.setProperty(
      this,
      'start',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  _i2.dynamic get type => _i4.getProperty(
        this,
        'type',
      );
  set type(_i2.dynamic value) {
    _i4.setProperty(
      this,
      'type',
      value,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class UnderlyingSink<W> {
  external factory UnderlyingSink._({
    _i2.dynamic abort,
    _i2.dynamic close,
    _i2.dynamic start,
    _i2.dynamic type,
    _i2.dynamic write,
  });

  factory UnderlyingSink({
    _i3.UnderlyingSinkAbortCallback? abort,
    _i3.UnderlyingSinkCloseCallback? close,
    _i3.UnderlyingSinkStartCallback? start,
    _i2.dynamic type,
    _i3.UnderlyingSinkWriteCallback<_i2.dynamic>? write,
  }) =>
      UnderlyingSink._(
        abort: abort ?? _i6.undefined,
        close: close ?? _i6.undefined,
        start: start ?? _i6.undefined,
        type: type,
        write: write ?? _i6.undefined,
      );
}

extension UnderlyingSink$Typings<W> on UnderlyingSink<W> {
  _i3.UnderlyingSinkAbortCallback? get abort => _i4.getProperty(
        this,
        'abort',
      );
  set abort(_i3.UnderlyingSinkAbortCallback? value) {
    _i4.setProperty(
      this,
      'abort',
      value ?? _i6.undefined,
    );
  }

  _i3.UnderlyingSinkCloseCallback? get close => _i4.getProperty(
        this,
        'close',
      );
  set close(_i3.UnderlyingSinkCloseCallback? value) {
    _i4.setProperty(
      this,
      'close',
      value ?? _i6.undefined,
    );
  }

  _i3.UnderlyingSinkStartCallback? get start => _i4.getProperty(
        this,
        'start',
      );
  set start(_i3.UnderlyingSinkStartCallback? value) {
    _i4.setProperty(
      this,
      'start',
      value ?? _i6.undefined,
    );
  }

  _i2.dynamic get type => _i4.getProperty(
        this,
        'type',
      );
  set type(_i2.dynamic value) {
    _i4.setProperty(
      this,
      'type',
      value,
    );
  }

  _i3.UnderlyingSinkWriteCallback<W>? get write => _i4.getProperty(
        this,
        'write',
      );
  set write(_i3.UnderlyingSinkWriteCallback<W>? value) {
    _i4.setProperty(
      this,
      'write',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class UnderlyingSource<R> {
  external factory UnderlyingSource._({
    _i2.dynamic autoAllocateChunkSize,
    _i2.dynamic cancel,
    _i2.dynamic pull,
    _i2.dynamic start,
    _i2.dynamic type,
  });

  factory UnderlyingSource({
    _i2.num? autoAllocateChunkSize,
    _i3.UnderlyingSourceCancelCallback? cancel,
    _i3.UnderlyingSourcePullCallback<_i2.dynamic>? pull,
    _i3.UnderlyingSourceStartCallback<_i2.dynamic>? start,
    _i3.ReadableStreamType? type,
  }) =>
      UnderlyingSource._(
        autoAllocateChunkSize: autoAllocateChunkSize,
        cancel: cancel ?? _i6.undefined,
        pull: pull ?? _i6.undefined,
        start: start ?? _i6.undefined,
        type: type,
      );
}

extension UnderlyingSource$Typings<R> on UnderlyingSource<R> {
  _i2.num? get autoAllocateChunkSize => _i4.getProperty(
        this,
        'autoAllocateChunkSize',
      );
  set autoAllocateChunkSize(_i2.num? value) {
    _i4.setProperty(
      this,
      'autoAllocateChunkSize',
      value ?? _i6.undefined,
    );
  }

  _i3.UnderlyingSourceCancelCallback? get cancel => _i4.getProperty(
        this,
        'cancel',
      );
  set cancel(_i3.UnderlyingSourceCancelCallback? value) {
    _i4.setProperty(
      this,
      'cancel',
      value ?? _i6.undefined,
    );
  }

  _i3.UnderlyingSourcePullCallback<R>? get pull => _i4.getProperty(
        this,
        'pull',
      );
  set pull(_i3.UnderlyingSourcePullCallback<R>? value) {
    _i4.setProperty(
      this,
      'pull',
      value ?? _i6.undefined,
    );
  }

  _i3.UnderlyingSourceStartCallback<R>? get start => _i4.getProperty(
        this,
        'start',
      );
  set start(_i3.UnderlyingSourceStartCallback<R>? value) {
    _i4.setProperty(
      this,
      'start',
      value ?? _i6.undefined,
    );
  }

  _i3.ReadableStreamType? get type => _i4.getProperty(
        this,
        'type',
      );
  set type(_i3.ReadableStreamType? value) {
    _i4.setProperty(
      this,
      'type',
      value ?? _i6.undefined ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class VideoColorSpaceInit {
  external factory VideoColorSpaceInit._({
    _i2.dynamic fullRange,
    _i2.dynamic matrix,
    _i2.dynamic primaries,
    _i2.dynamic transfer,
  });

  factory VideoColorSpaceInit({
    _i2.bool? fullRange,
    _i3.VideoMatrixCoefficients? matrix,
    _i3.VideoColorPrimaries? primaries,
    _i3.VideoTransferCharacteristics? transfer,
  }) =>
      VideoColorSpaceInit._(
        fullRange: fullRange ?? _i6.undefined,
        matrix: matrix?.name ?? _i6.undefined ?? _i6.undefined,
        primaries: primaries?.name ?? _i6.undefined ?? _i6.undefined,
        transfer: transfer?.name ?? _i6.undefined ?? _i6.undefined,
      );
}

extension VideoColorSpaceInit$Typings on VideoColorSpaceInit {
  _i2.bool? get fullRange => _i4.getProperty(
        this,
        'fullRange',
      );
  set fullRange(_i2.bool? value) {
    _i4.setProperty(
      this,
      'fullRange',
      value ?? _i6.undefined,
    );
  }

  _i3.VideoMatrixCoefficients? get matrix => switch (_i4.getProperty(
        this,
        'matrix',
      )) {
        _i2.String name =>
          _i3.VideoMatrixCoefficientsOptions.values.byName(name),
        _ => null
      };
  set matrix(_i3.VideoMatrixCoefficients? value) {
    _i4.setProperty(
      this,
      'matrix',
      value?.name ?? _i6.undefined ?? _i6.undefined,
    );
  }

  _i3.VideoColorPrimaries? get primaries => switch (_i4.getProperty(
        this,
        'primaries',
      )) {
        _i2.String name => _i3.VideoColorPrimariesOptions.values.byName(name),
        _ => null
      };
  set primaries(_i3.VideoColorPrimaries? value) {
    _i4.setProperty(
      this,
      'primaries',
      value?.name ?? _i6.undefined ?? _i6.undefined,
    );
  }

  _i3.VideoTransferCharacteristics? get transfer => switch (_i4.getProperty(
        this,
        'transfer',
      )) {
        _i2.String name =>
          _i3.VideoTransferCharacteristicsOptions.values.byName(name),
        _ => null
      };
  set transfer(_i3.VideoTransferCharacteristics? value) {
    _i4.setProperty(
      this,
      'transfer',
      value?.name ?? _i6.undefined ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class VideoConfiguration {
  external factory VideoConfiguration._({
    _i2.dynamic bitrate,
    _i2.dynamic colorGamut,
    _i2.dynamic contentType,
    _i2.dynamic framerate,
    _i2.dynamic hdrMetadataType,
    _i2.dynamic height,
    _i2.dynamic scalabilityMode,
    _i2.dynamic transferFunction,
    _i2.dynamic width,
  });

  factory VideoConfiguration({
    _i2.num? bitrate,
    _i3.ColorGamut? colorGamut,
    _i2.String? contentType,
    _i2.num? framerate,
    _i3.HdrMetadataType? hdrMetadataType,
    _i2.num? height,
    _i2.String? scalabilityMode,
    _i3.TransferFunction? transferFunction,
    _i2.num? width,
  }) =>
      VideoConfiguration._(
        bitrate: bitrate,
        colorGamut: colorGamut?.name ?? _i6.undefined,
        contentType: contentType,
        framerate: framerate,
        hdrMetadataType: hdrMetadataType?.name ?? _i6.undefined,
        height: height,
        scalabilityMode: scalabilityMode,
        transferFunction: transferFunction?.name ?? _i6.undefined,
        width: width,
      );
}

extension VideoConfiguration$Typings on VideoConfiguration {
  _i2.num get bitrate => _i4.getProperty(
        this,
        'bitrate',
      );
  set bitrate(_i2.num value) {
    _i4.setProperty(
      this,
      'bitrate',
      value,
    );
  }

  _i3.ColorGamut? get colorGamut => switch (_i4.getProperty(
        this,
        'colorGamut',
      )) {
        _i2.String name => _i3.ColorGamutOptions.values.byName(name),
        _ => null
      };
  set colorGamut(_i3.ColorGamut? value) {
    _i4.setProperty(
      this,
      'colorGamut',
      value?.name ?? _i6.undefined ?? _i6.undefined,
    );
  }

  _i2.String get contentType => _i4.getProperty(
        this,
        'contentType',
      );
  set contentType(_i2.String value) {
    _i4.setProperty(
      this,
      'contentType',
      value,
    );
  }

  _i2.num get framerate => _i4.getProperty(
        this,
        'framerate',
      );
  set framerate(_i2.num value) {
    _i4.setProperty(
      this,
      'framerate',
      value,
    );
  }

  _i3.HdrMetadataType? get hdrMetadataType => switch (_i4.getProperty(
        this,
        'hdrMetadataType',
      )) {
        _i2.String name => _i3.HdrMetadataTypeOptions.values.byName(name),
        _ => null
      };
  set hdrMetadataType(_i3.HdrMetadataType? value) {
    _i4.setProperty(
      this,
      'hdrMetadataType',
      value?.name ?? _i6.undefined ?? _i6.undefined,
    );
  }

  _i2.num get height => _i4.getProperty(
        this,
        'height',
      );
  set height(_i2.num value) {
    _i4.setProperty(
      this,
      'height',
      value,
    );
  }

  _i2.String? get scalabilityMode => _i4.getProperty(
        this,
        'scalabilityMode',
      );
  set scalabilityMode(_i2.String? value) {
    _i4.setProperty(
      this,
      'scalabilityMode',
      value ?? _i6.undefined,
    );
  }

  _i3.TransferFunction? get transferFunction => switch (_i4.getProperty(
        this,
        'transferFunction',
      )) {
        _i2.String name => _i3.TransferFunctionOptions.values.byName(name),
        _ => null
      };
  set transferFunction(_i3.TransferFunction? value) {
    _i4.setProperty(
      this,
      'transferFunction',
      value?.name ?? _i6.undefined ?? _i6.undefined,
    );
  }

  _i2.num get width => _i4.getProperty(
        this,
        'width',
      );
  set width(_i2.num value) {
    _i4.setProperty(
      this,
      'width',
      value,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class VideoDecoderConfig {
  external factory VideoDecoderConfig._({
    _i2.dynamic codec,
    _i2.dynamic codedHeight,
    _i2.dynamic codedWidth,
    _i2.dynamic colorSpace,
    _i2.dynamic description,
    _i2.dynamic displayAspectHeight,
    _i2.dynamic displayAspectWidth,
    _i2.dynamic hardwareAcceleration,
    _i2.dynamic optimizeForLatency,
  });

  factory VideoDecoderConfig({
    _i2.String? codec,
    _i2.num? codedHeight,
    _i2.num? codedWidth,
    _i3.VideoColorSpaceInit? colorSpace,
    _i2.Object? description,
    _i2.num? displayAspectHeight,
    _i2.num? displayAspectWidth,
    _i3.HardwareAcceleration? hardwareAcceleration,
    _i2.bool? optimizeForLatency,
  }) =>
      VideoDecoderConfig._(
        codec: codec,
        codedHeight: codedHeight,
        codedWidth: codedWidth,
        colorSpace: colorSpace ?? _i6.undefined,
        description: description ?? _i6.undefined,
        displayAspectHeight: displayAspectHeight,
        displayAspectWidth: displayAspectWidth,
        hardwareAcceleration: hardwareAcceleration?.name ?? _i6.undefined,
        optimizeForLatency: optimizeForLatency,
      );
}

extension VideoDecoderConfig$Typings on VideoDecoderConfig {
  _i2.String get codec => _i4.getProperty(
        this,
        'codec',
      );
  set codec(_i2.String value) {
    _i4.setProperty(
      this,
      'codec',
      value,
    );
  }

  _i2.num? get codedHeight => _i4.getProperty(
        this,
        'codedHeight',
      );
  set codedHeight(_i2.num? value) {
    _i4.setProperty(
      this,
      'codedHeight',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get codedWidth => _i4.getProperty(
        this,
        'codedWidth',
      );
  set codedWidth(_i2.num? value) {
    _i4.setProperty(
      this,
      'codedWidth',
      value ?? _i6.undefined,
    );
  }

  _i3.VideoColorSpaceInit? get colorSpace => _i4.getProperty(
        this,
        'colorSpace',
      );
  set colorSpace(_i3.VideoColorSpaceInit? value) {
    _i4.setProperty(
      this,
      'colorSpace',
      value ?? _i6.undefined,
    );
  }

  _i2.Object? get description => _i4.getProperty(
        this,
        'description',
      );
  set description(_i2.Object? value) {
    _i4.setProperty(
      this,
      'description',
      value ?? _i6.undefined ?? _i6.undefined,
    );
  }

  _i2.num? get displayAspectHeight => _i4.getProperty(
        this,
        'displayAspectHeight',
      );
  set displayAspectHeight(_i2.num? value) {
    _i4.setProperty(
      this,
      'displayAspectHeight',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get displayAspectWidth => _i4.getProperty(
        this,
        'displayAspectWidth',
      );
  set displayAspectWidth(_i2.num? value) {
    _i4.setProperty(
      this,
      'displayAspectWidth',
      value ?? _i6.undefined,
    );
  }

  _i3.HardwareAcceleration? get hardwareAcceleration => switch (_i4.getProperty(
        this,
        'hardwareAcceleration',
      )) {
        _i2.String name => _i3.HardwareAccelerationOptions.values.byName(name),
        _ => null
      };
  set hardwareAcceleration(_i3.HardwareAcceleration? value) {
    _i4.setProperty(
      this,
      'hardwareAcceleration',
      value?.name ?? _i6.undefined ?? _i6.undefined,
    );
  }

  _i2.bool? get optimizeForLatency => _i4.getProperty(
        this,
        'optimizeForLatency',
      );
  set optimizeForLatency(_i2.bool? value) {
    _i4.setProperty(
      this,
      'optimizeForLatency',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class VideoDecoderInit {
  external factory VideoDecoderInit._({
    _i2.dynamic error,
    _i2.dynamic output,
  });

  factory VideoDecoderInit({
    _i3.WebCodecsErrorCallback? error,
    _i3.VideoFrameOutputCallback? output,
  }) =>
      VideoDecoderInit._(
        error: error ?? _i6.undefined,
        output: output ?? _i6.undefined,
      );
}

extension VideoDecoderInit$Typings on VideoDecoderInit {
  _i3.WebCodecsErrorCallback get error => _i4.getProperty(
        this,
        'error',
      );
  set error(_i3.WebCodecsErrorCallback value) {
    _i4.setProperty(
      this,
      'error',
      value,
    );
  }

  _i3.VideoFrameOutputCallback get output => _i4.getProperty(
        this,
        'output',
      );
  set output(_i3.VideoFrameOutputCallback value) {
    _i4.setProperty(
      this,
      'output',
      value,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class VideoDecoderSupport {
  external factory VideoDecoderSupport._({
    _i2.dynamic config,
    _i2.dynamic supported,
  });

  factory VideoDecoderSupport({
    _i3.VideoDecoderConfig? config,
    _i2.bool? supported,
  }) =>
      VideoDecoderSupport._(
        config: config ?? _i6.undefined,
        supported: supported,
      );
}

extension VideoDecoderSupport$Typings on VideoDecoderSupport {
  _i3.VideoDecoderConfig? get config => _i4.getProperty(
        this,
        'config',
      );
  set config(_i3.VideoDecoderConfig? value) {
    _i4.setProperty(
      this,
      'config',
      value ?? _i6.undefined,
    );
  }

  _i2.bool? get supported => _i4.getProperty(
        this,
        'supported',
      );
  set supported(_i2.bool? value) {
    _i4.setProperty(
      this,
      'supported',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class VideoEncoderConfig {
  external factory VideoEncoderConfig._({
    _i2.dynamic alpha,
    _i2.dynamic avc,
    _i2.dynamic bitrate,
    _i2.dynamic bitrateMode,
    _i2.dynamic codec,
    _i2.dynamic displayHeight,
    _i2.dynamic displayWidth,
    _i2.dynamic framerate,
    _i2.dynamic hardwareAcceleration,
    _i2.dynamic height,
    _i2.dynamic latencyMode,
    _i2.dynamic scalabilityMode,
    _i2.dynamic width,
  });

  factory VideoEncoderConfig({
    _i3.AlphaOption? alpha,
    _i3.AvcEncoderConfig? avc,
    _i2.num? bitrate,
    _i3.VideoEncoderBitrateMode? bitrateMode,
    _i2.String? codec,
    _i2.num? displayHeight,
    _i2.num? displayWidth,
    _i2.num? framerate,
    _i3.HardwareAcceleration? hardwareAcceleration,
    _i2.num? height,
    _i3.LatencyMode? latencyMode,
    _i2.String? scalabilityMode,
    _i2.num? width,
  }) =>
      VideoEncoderConfig._(
        alpha: alpha?.name ?? _i6.undefined,
        avc: avc ?? _i6.undefined,
        bitrate: bitrate,
        bitrateMode: bitrateMode?.name ?? _i6.undefined,
        codec: codec,
        displayHeight: displayHeight,
        displayWidth: displayWidth,
        framerate: framerate,
        hardwareAcceleration: hardwareAcceleration?.name ?? _i6.undefined,
        height: height,
        latencyMode: latencyMode?.name ?? _i6.undefined,
        scalabilityMode: scalabilityMode,
        width: width,
      );
}

extension VideoEncoderConfig$Typings on VideoEncoderConfig {
  _i3.AlphaOption? get alpha => switch (_i4.getProperty(
        this,
        'alpha',
      )) {
        _i2.String name => _i3.AlphaOptionOptions.values.byName(name),
        _ => null
      };
  set alpha(_i3.AlphaOption? value) {
    _i4.setProperty(
      this,
      'alpha',
      value?.name ?? _i6.undefined ?? _i6.undefined,
    );
  }

  _i3.AvcEncoderConfig? get avc => _i4.getProperty(
        this,
        'avc',
      );
  set avc(_i3.AvcEncoderConfig? value) {
    _i4.setProperty(
      this,
      'avc',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get bitrate => _i4.getProperty(
        this,
        'bitrate',
      );
  set bitrate(_i2.num? value) {
    _i4.setProperty(
      this,
      'bitrate',
      value ?? _i6.undefined,
    );
  }

  _i3.VideoEncoderBitrateMode? get bitrateMode => switch (_i4.getProperty(
        this,
        'bitrateMode',
      )) {
        _i2.String name =>
          _i3.VideoEncoderBitrateModeOptions.values.byName(name),
        _ => null
      };
  set bitrateMode(_i3.VideoEncoderBitrateMode? value) {
    _i4.setProperty(
      this,
      'bitrateMode',
      value?.name ?? _i6.undefined ?? _i6.undefined,
    );
  }

  _i2.String get codec => _i4.getProperty(
        this,
        'codec',
      );
  set codec(_i2.String value) {
    _i4.setProperty(
      this,
      'codec',
      value,
    );
  }

  _i2.num? get displayHeight => _i4.getProperty(
        this,
        'displayHeight',
      );
  set displayHeight(_i2.num? value) {
    _i4.setProperty(
      this,
      'displayHeight',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get displayWidth => _i4.getProperty(
        this,
        'displayWidth',
      );
  set displayWidth(_i2.num? value) {
    _i4.setProperty(
      this,
      'displayWidth',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get framerate => _i4.getProperty(
        this,
        'framerate',
      );
  set framerate(_i2.num? value) {
    _i4.setProperty(
      this,
      'framerate',
      value ?? _i6.undefined,
    );
  }

  _i3.HardwareAcceleration? get hardwareAcceleration => switch (_i4.getProperty(
        this,
        'hardwareAcceleration',
      )) {
        _i2.String name => _i3.HardwareAccelerationOptions.values.byName(name),
        _ => null
      };
  set hardwareAcceleration(_i3.HardwareAcceleration? value) {
    _i4.setProperty(
      this,
      'hardwareAcceleration',
      value?.name ?? _i6.undefined ?? _i6.undefined,
    );
  }

  _i2.num get height => _i4.getProperty(
        this,
        'height',
      );
  set height(_i2.num value) {
    _i4.setProperty(
      this,
      'height',
      value,
    );
  }

  _i3.LatencyMode? get latencyMode => switch (_i4.getProperty(
        this,
        'latencyMode',
      )) {
        _i2.String name => _i3.LatencyModeOptions.values.byName(name),
        _ => null
      };
  set latencyMode(_i3.LatencyMode? value) {
    _i4.setProperty(
      this,
      'latencyMode',
      value?.name ?? _i6.undefined ?? _i6.undefined,
    );
  }

  _i2.String? get scalabilityMode => _i4.getProperty(
        this,
        'scalabilityMode',
      );
  set scalabilityMode(_i2.String? value) {
    _i4.setProperty(
      this,
      'scalabilityMode',
      value ?? _i6.undefined,
    );
  }

  _i2.num get width => _i4.getProperty(
        this,
        'width',
      );
  set width(_i2.num value) {
    _i4.setProperty(
      this,
      'width',
      value,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class VideoEncoderEncodeOptions {
  external factory VideoEncoderEncodeOptions._({_i2.dynamic keyFrame});

  factory VideoEncoderEncodeOptions({_i2.bool? keyFrame}) =>
      VideoEncoderEncodeOptions._(keyFrame: keyFrame);
}

extension VideoEncoderEncodeOptions$Typings on VideoEncoderEncodeOptions {
  _i2.bool? get keyFrame => _i4.getProperty(
        this,
        'keyFrame',
      );
  set keyFrame(_i2.bool? value) {
    _i4.setProperty(
      this,
      'keyFrame',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class VideoEncoderInit {
  external factory VideoEncoderInit._({
    _i2.dynamic error,
    _i2.dynamic output,
  });

  factory VideoEncoderInit({
    _i3.WebCodecsErrorCallback? error,
    _i3.EncodedVideoChunkOutputCallback? output,
  }) =>
      VideoEncoderInit._(
        error: error ?? _i6.undefined,
        output: output ?? _i6.undefined,
      );
}

extension VideoEncoderInit$Typings on VideoEncoderInit {
  _i3.WebCodecsErrorCallback get error => _i4.getProperty(
        this,
        'error',
      );
  set error(_i3.WebCodecsErrorCallback value) {
    _i4.setProperty(
      this,
      'error',
      value,
    );
  }

  _i3.EncodedVideoChunkOutputCallback get output => _i4.getProperty(
        this,
        'output',
      );
  set output(_i3.EncodedVideoChunkOutputCallback value) {
    _i4.setProperty(
      this,
      'output',
      value,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class VideoEncoderSupport {
  external factory VideoEncoderSupport._({
    _i2.dynamic config,
    _i2.dynamic supported,
  });

  factory VideoEncoderSupport({
    _i3.VideoEncoderConfig? config,
    _i2.bool? supported,
  }) =>
      VideoEncoderSupport._(
        config: config ?? _i6.undefined,
        supported: supported,
      );
}

extension VideoEncoderSupport$Typings on VideoEncoderSupport {
  _i3.VideoEncoderConfig? get config => _i4.getProperty(
        this,
        'config',
      );
  set config(_i3.VideoEncoderConfig? value) {
    _i4.setProperty(
      this,
      'config',
      value ?? _i6.undefined,
    );
  }

  _i2.bool? get supported => _i4.getProperty(
        this,
        'supported',
      );
  set supported(_i2.bool? value) {
    _i4.setProperty(
      this,
      'supported',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class VideoFrameBufferInit {
  external factory VideoFrameBufferInit._({
    _i2.dynamic codedHeight,
    _i2.dynamic codedWidth,
    _i2.dynamic colorSpace,
    _i2.dynamic displayHeight,
    _i2.dynamic displayWidth,
    _i2.dynamic duration,
    _i2.dynamic format,
    _i2.dynamic layout,
    _i2.dynamic timestamp,
    _i2.dynamic visibleRect,
  });

  factory VideoFrameBufferInit({
    _i2.num? codedHeight,
    _i2.num? codedWidth,
    _i3.VideoColorSpaceInit? colorSpace,
    _i2.num? displayHeight,
    _i2.num? displayWidth,
    _i2.num? duration,
    _i3.VideoPixelFormat? format,
    _i2.List<_i3.PlaneLayout>? layout,
    _i2.num? timestamp,
    _i3.DOMRectInit? visibleRect,
  }) =>
      VideoFrameBufferInit._(
        codedHeight: codedHeight,
        codedWidth: codedWidth,
        colorSpace: colorSpace ?? _i6.undefined,
        displayHeight: displayHeight,
        displayWidth: displayWidth,
        duration: duration,
        format: format?.name ?? _i6.undefined,
        layout: layout,
        timestamp: timestamp,
        visibleRect: visibleRect ?? _i6.undefined,
      );
}

extension VideoFrameBufferInit$Typings on VideoFrameBufferInit {
  _i2.num get codedHeight => _i4.getProperty(
        this,
        'codedHeight',
      );
  set codedHeight(_i2.num value) {
    _i4.setProperty(
      this,
      'codedHeight',
      value,
    );
  }

  _i2.num get codedWidth => _i4.getProperty(
        this,
        'codedWidth',
      );
  set codedWidth(_i2.num value) {
    _i4.setProperty(
      this,
      'codedWidth',
      value,
    );
  }

  _i3.VideoColorSpaceInit? get colorSpace => _i4.getProperty(
        this,
        'colorSpace',
      );
  set colorSpace(_i3.VideoColorSpaceInit? value) {
    _i4.setProperty(
      this,
      'colorSpace',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get displayHeight => _i4.getProperty(
        this,
        'displayHeight',
      );
  set displayHeight(_i2.num? value) {
    _i4.setProperty(
      this,
      'displayHeight',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get displayWidth => _i4.getProperty(
        this,
        'displayWidth',
      );
  set displayWidth(_i2.num? value) {
    _i4.setProperty(
      this,
      'displayWidth',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get duration => _i4.getProperty(
        this,
        'duration',
      );
  set duration(_i2.num? value) {
    _i4.setProperty(
      this,
      'duration',
      value ?? _i6.undefined,
    );
  }

  _i3.VideoPixelFormat get format =>
      _i3.VideoPixelFormatOptions.values.byName(_i4.getProperty(
        this,
        'format',
      ));
  set format(_i3.VideoPixelFormat value) {
    _i4.setProperty(
      this,
      'format',
      value.name,
    );
  }

  _i2.List<_i3.PlaneLayout>? get layout => ((_i4.getProperty(
        this,
        'layout',
      )) as _i2.List?)
          ?.cast();
  set layout(_i2.List<_i3.PlaneLayout>? value) {
    _i4.setProperty(
      this,
      'layout',
      value ?? _i6.undefined,
    );
  }

  _i2.num get timestamp => _i4.getProperty(
        this,
        'timestamp',
      );
  set timestamp(_i2.num value) {
    _i4.setProperty(
      this,
      'timestamp',
      value,
    );
  }

  _i3.DOMRectInit? get visibleRect => _i4.getProperty(
        this,
        'visibleRect',
      );
  set visibleRect(_i3.DOMRectInit? value) {
    _i4.setProperty(
      this,
      'visibleRect',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class VideoFrameCopyToOptions {
  external factory VideoFrameCopyToOptions._({
    _i2.dynamic layout,
    _i2.dynamic rect,
  });

  factory VideoFrameCopyToOptions({
    _i2.List<_i3.PlaneLayout>? layout,
    _i3.DOMRectInit? rect,
  }) =>
      VideoFrameCopyToOptions._(
        layout: layout,
        rect: rect ?? _i6.undefined,
      );
}

extension VideoFrameCopyToOptions$Typings on VideoFrameCopyToOptions {
  _i2.List<_i3.PlaneLayout>? get layout => ((_i4.getProperty(
        this,
        'layout',
      )) as _i2.List?)
          ?.cast();
  set layout(_i2.List<_i3.PlaneLayout>? value) {
    _i4.setProperty(
      this,
      'layout',
      value ?? _i6.undefined,
    );
  }

  _i3.DOMRectInit? get rect => _i4.getProperty(
        this,
        'rect',
      );
  set rect(_i3.DOMRectInit? value) {
    _i4.setProperty(
      this,
      'rect',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class VideoFrameInit {
  external factory VideoFrameInit._({
    _i2.dynamic alpha,
    _i2.dynamic displayHeight,
    _i2.dynamic displayWidth,
    _i2.dynamic duration,
    _i2.dynamic timestamp,
    _i2.dynamic visibleRect,
  });

  factory VideoFrameInit({
    _i3.AlphaOption? alpha,
    _i2.num? displayHeight,
    _i2.num? displayWidth,
    _i2.num? duration,
    _i2.num? timestamp,
    _i3.DOMRectInit? visibleRect,
  }) =>
      VideoFrameInit._(
        alpha: alpha?.name ?? _i6.undefined,
        displayHeight: displayHeight,
        displayWidth: displayWidth,
        duration: duration,
        timestamp: timestamp,
        visibleRect: visibleRect ?? _i6.undefined,
      );
}

extension VideoFrameInit$Typings on VideoFrameInit {
  _i3.AlphaOption? get alpha => switch (_i4.getProperty(
        this,
        'alpha',
      )) {
        _i2.String name => _i3.AlphaOptionOptions.values.byName(name),
        _ => null
      };
  set alpha(_i3.AlphaOption? value) {
    _i4.setProperty(
      this,
      'alpha',
      value?.name ?? _i6.undefined ?? _i6.undefined,
    );
  }

  _i2.num? get displayHeight => _i4.getProperty(
        this,
        'displayHeight',
      );
  set displayHeight(_i2.num? value) {
    _i4.setProperty(
      this,
      'displayHeight',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get displayWidth => _i4.getProperty(
        this,
        'displayWidth',
      );
  set displayWidth(_i2.num? value) {
    _i4.setProperty(
      this,
      'displayWidth',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get duration => _i4.getProperty(
        this,
        'duration',
      );
  set duration(_i2.num? value) {
    _i4.setProperty(
      this,
      'duration',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get timestamp => _i4.getProperty(
        this,
        'timestamp',
      );
  set timestamp(_i2.num? value) {
    _i4.setProperty(
      this,
      'timestamp',
      value ?? _i6.undefined,
    );
  }

  _i3.DOMRectInit? get visibleRect => _i4.getProperty(
        this,
        'visibleRect',
      );
  set visibleRect(_i3.DOMRectInit? value) {
    _i4.setProperty(
      this,
      'visibleRect',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class WebGLContextAttributes {
  external factory WebGLContextAttributes._({
    _i2.dynamic alpha,
    _i2.dynamic antialias,
    _i2.dynamic depth,
    _i2.dynamic desynchronized,
    _i2.dynamic failIfMajorPerformanceCaveat,
    _i2.dynamic powerPreference,
    _i2.dynamic premultipliedAlpha,
    _i2.dynamic preserveDrawingBuffer,
    _i2.dynamic stencil,
  });

  factory WebGLContextAttributes({
    _i2.bool? alpha,
    _i2.bool? antialias,
    _i2.bool? depth,
    _i2.bool? desynchronized,
    _i2.bool? failIfMajorPerformanceCaveat,
    _i3.WebGLPowerPreference? powerPreference,
    _i2.bool? premultipliedAlpha,
    _i2.bool? preserveDrawingBuffer,
    _i2.bool? stencil,
  }) =>
      WebGLContextAttributes._(
        alpha: alpha,
        antialias: antialias,
        depth: depth,
        desynchronized: desynchronized,
        failIfMajorPerformanceCaveat: failIfMajorPerformanceCaveat,
        powerPreference: powerPreference?.name ?? _i6.undefined,
        premultipliedAlpha: premultipliedAlpha,
        preserveDrawingBuffer: preserveDrawingBuffer,
        stencil: stencil,
      );
}

extension WebGLContextAttributes$Typings on WebGLContextAttributes {
  _i2.bool? get alpha => _i4.getProperty(
        this,
        'alpha',
      );
  set alpha(_i2.bool? value) {
    _i4.setProperty(
      this,
      'alpha',
      value ?? _i6.undefined,
    );
  }

  _i2.bool? get antialias => _i4.getProperty(
        this,
        'antialias',
      );
  set antialias(_i2.bool? value) {
    _i4.setProperty(
      this,
      'antialias',
      value ?? _i6.undefined,
    );
  }

  _i2.bool? get depth => _i4.getProperty(
        this,
        'depth',
      );
  set depth(_i2.bool? value) {
    _i4.setProperty(
      this,
      'depth',
      value ?? _i6.undefined,
    );
  }

  _i2.bool? get desynchronized => _i4.getProperty(
        this,
        'desynchronized',
      );
  set desynchronized(_i2.bool? value) {
    _i4.setProperty(
      this,
      'desynchronized',
      value ?? _i6.undefined,
    );
  }

  _i2.bool? get failIfMajorPerformanceCaveat => _i4.getProperty(
        this,
        'failIfMajorPerformanceCaveat',
      );
  set failIfMajorPerformanceCaveat(_i2.bool? value) {
    _i4.setProperty(
      this,
      'failIfMajorPerformanceCaveat',
      value ?? _i6.undefined,
    );
  }

  _i3.WebGLPowerPreference? get powerPreference => switch (_i4.getProperty(
        this,
        'powerPreference',
      )) {
        _i2.String name => _i3.WebGLPowerPreferenceOptions.values.byName(name),
        _ => null
      };
  set powerPreference(_i3.WebGLPowerPreference? value) {
    _i4.setProperty(
      this,
      'powerPreference',
      value?.name ?? _i6.undefined ?? _i6.undefined,
    );
  }

  _i2.bool? get premultipliedAlpha => _i4.getProperty(
        this,
        'premultipliedAlpha',
      );
  set premultipliedAlpha(_i2.bool? value) {
    _i4.setProperty(
      this,
      'premultipliedAlpha',
      value ?? _i6.undefined,
    );
  }

  _i2.bool? get preserveDrawingBuffer => _i4.getProperty(
        this,
        'preserveDrawingBuffer',
      );
  set preserveDrawingBuffer(_i2.bool? value) {
    _i4.setProperty(
      this,
      'preserveDrawingBuffer',
      value ?? _i6.undefined,
    );
  }

  _i2.bool? get stencil => _i4.getProperty(
        this,
        'stencil',
      );
  set stencil(_i2.bool? value) {
    _i4.setProperty(
      this,
      'stencil',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class WebGLContextEventInit implements _i3.EventInit {
  external factory WebGLContextEventInit._({
    _i2.dynamic statusMessage,
    _i2.dynamic bubbles,
    _i2.dynamic cancelable,
    _i2.dynamic composed,
  });

  factory WebGLContextEventInit({
    _i2.String? statusMessage,
    _i2.bool? bubbles,
    _i2.bool? cancelable,
    _i2.bool? composed,
  }) =>
      WebGLContextEventInit._(
        statusMessage: statusMessage,
        bubbles: bubbles,
        cancelable: cancelable,
        composed: composed,
      );
}

extension WebGLContextEventInit$Typings on WebGLContextEventInit {
  _i2.String? get statusMessage => _i4.getProperty(
        this,
        'statusMessage',
      );
  set statusMessage(_i2.String? value) {
    _i4.setProperty(
      this,
      'statusMessage',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class WebTransportCloseInfo {
  external factory WebTransportCloseInfo._({
    _i2.dynamic closeCode,
    _i2.dynamic reason,
  });

  factory WebTransportCloseInfo({
    _i2.num? closeCode,
    _i2.String? reason,
  }) =>
      WebTransportCloseInfo._(
        closeCode: closeCode,
        reason: reason,
      );
}

extension WebTransportCloseInfo$Typings on WebTransportCloseInfo {
  _i2.num? get closeCode => _i4.getProperty(
        this,
        'closeCode',
      );
  set closeCode(_i2.num? value) {
    _i4.setProperty(
      this,
      'closeCode',
      value ?? _i6.undefined,
    );
  }

  _i2.String? get reason => _i4.getProperty(
        this,
        'reason',
      );
  set reason(_i2.String? value) {
    _i4.setProperty(
      this,
      'reason',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class WebTransportErrorOptions {
  external factory WebTransportErrorOptions._({
    _i2.dynamic source,
    _i2.dynamic streamErrorCode,
  });

  factory WebTransportErrorOptions({
    _i3.WebTransportErrorSource? source,
    _i2.num? streamErrorCode,
  }) =>
      WebTransportErrorOptions._(
        source: source?.name ?? _i6.undefined,
        streamErrorCode: streamErrorCode ?? _i6.undefined,
      );
}

extension WebTransportErrorOptions$Typings on WebTransportErrorOptions {
  _i3.WebTransportErrorSource? get source => switch (_i4.getProperty(
        this,
        'source',
      )) {
        _i2.String name =>
          _i3.WebTransportErrorSourceOptions.values.byName(name),
        _ => null
      };
  set source(_i3.WebTransportErrorSource? value) {
    _i4.setProperty(
      this,
      'source',
      value?.name ?? _i6.undefined ?? _i6.undefined,
    );
  }

  _i2.num? get streamErrorCode => _i4.getProperty(
        this,
        'streamErrorCode',
      );
  set streamErrorCode(_i2.num? value) {
    _i4.setProperty(
      this,
      'streamErrorCode',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class WebTransportHash {
  external factory WebTransportHash._({
    _i2.dynamic algorithm,
    _i2.dynamic value,
  });

  factory WebTransportHash({
    _i2.String? algorithm,
    _i2.Object? value,
  }) =>
      WebTransportHash._(
        algorithm: algorithm,
        value: value ?? _i6.undefined,
      );
}

extension WebTransportHash$Typings on WebTransportHash {
  _i2.String? get algorithm => _i4.getProperty(
        this,
        'algorithm',
      );
  set algorithm(_i2.String? value) {
    _i4.setProperty(
      this,
      'algorithm',
      value ?? _i6.undefined,
    );
  }

  _i2.Object? get value => _i4.getProperty(
        this,
        'value',
      );
  set value(_i2.Object? value) {
    _i4.setProperty(
      this,
      'value',
      value ?? _i6.undefined ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class WebTransportOptions {
  external factory WebTransportOptions._({
    _i2.dynamic allowPooling,
    _i2.dynamic congestionControl,
    _i2.dynamic requireUnreliable,
    _i2.dynamic serverCertificateHashes,
  });

  factory WebTransportOptions({
    _i2.bool? allowPooling,
    _i3.WebTransportCongestionControl? congestionControl,
    _i2.bool? requireUnreliable,
    _i2.List<_i3.WebTransportHash>? serverCertificateHashes,
  }) =>
      WebTransportOptions._(
        allowPooling: allowPooling,
        congestionControl: congestionControl?.name ?? _i6.undefined,
        requireUnreliable: requireUnreliable,
        serverCertificateHashes: serverCertificateHashes,
      );
}

extension WebTransportOptions$Typings on WebTransportOptions {
  _i2.bool? get allowPooling => _i4.getProperty(
        this,
        'allowPooling',
      );
  set allowPooling(_i2.bool? value) {
    _i4.setProperty(
      this,
      'allowPooling',
      value ?? _i6.undefined,
    );
  }

  _i3.WebTransportCongestionControl? get congestionControl =>
      switch (_i4.getProperty(
        this,
        'congestionControl',
      )) {
        _i2.String name =>
          _i3.WebTransportCongestionControlOptions.values.byName(name),
        _ => null
      };
  set congestionControl(_i3.WebTransportCongestionControl? value) {
    _i4.setProperty(
      this,
      'congestionControl',
      value?.name ?? _i6.undefined ?? _i6.undefined,
    );
  }

  _i2.bool? get requireUnreliable => _i4.getProperty(
        this,
        'requireUnreliable',
      );
  set requireUnreliable(_i2.bool? value) {
    _i4.setProperty(
      this,
      'requireUnreliable',
      value ?? _i6.undefined,
    );
  }

  _i2.List<_i3.WebTransportHash>? get serverCertificateHashes =>
      ((_i4.getProperty(
        this,
        'serverCertificateHashes',
      )) as _i2.List?)
          ?.cast();
  set serverCertificateHashes(_i2.List<_i3.WebTransportHash>? value) {
    _i4.setProperty(
      this,
      'serverCertificateHashes',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class WebTransportSendStreamOptions {
  external factory WebTransportSendStreamOptions._({_i2.dynamic sendOrder});

  factory WebTransportSendStreamOptions({_i2.num? sendOrder}) =>
      WebTransportSendStreamOptions._(sendOrder: sendOrder ?? _i6.undefined);
}

extension WebTransportSendStreamOptions$Typings
    on WebTransportSendStreamOptions {
  _i2.num? get sendOrder => _i4.getProperty(
        this,
        'sendOrder',
      );
  set sendOrder(_i2.num? value) {
    _i4.setProperty(
      this,
      'sendOrder',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class WorkerOptions {
  external factory WorkerOptions._({
    _i2.dynamic credentials,
    _i2.dynamic name,
    _i2.dynamic type,
  });

  factory WorkerOptions({
    _i3.RequestCredentials? credentials,
    _i2.String? name,
    _i3.WorkerType? type,
  }) =>
      WorkerOptions._(
        credentials: credentials?.name ?? _i6.undefined,
        name: name,
        type: type?.name ?? _i6.undefined,
      );
}

extension WorkerOptions$Typings on WorkerOptions {
  _i3.RequestCredentials? get credentials => switch (_i4.getProperty(
        this,
        'credentials',
      )) {
        _i2.String name => _i3.RequestCredentialsOptions.values.byName(name),
        _ => null
      };
  set credentials(_i3.RequestCredentials? value) {
    _i4.setProperty(
      this,
      'credentials',
      value?.name ?? _i6.undefined ?? _i6.undefined,
    );
  }

  _i2.String? get name => _i4.getProperty(
        this,
        'name',
      );
  set name(_i2.String? value) {
    _i4.setProperty(
      this,
      'name',
      value ?? _i6.undefined,
    );
  }

  _i3.WorkerType? get type => switch (_i4.getProperty(
        this,
        'type',
      )) {
        _i2.String name => _i3.WorkerTypeOptions.values.byName(name),
        _ => null
      };
  set type(_i3.WorkerType? value) {
    _i4.setProperty(
      this,
      'type',
      value?.name ?? _i6.undefined ?? _i6.undefined,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class WriteParams {
  external factory WriteParams._({
    _i2.dynamic data,
    _i2.dynamic position,
    _i2.dynamic size,
    _i2.dynamic type,
  });

  factory WriteParams({
    _i2.dynamic data,
    _i2.num? position,
    _i2.num? size,
    _i3.WriteCommandType? type,
  }) =>
      WriteParams._(
        data: data,
        position: position ?? _i6.undefined,
        size: size ?? _i6.undefined,
        type: type?.name ?? _i6.undefined,
      );
}

extension WriteParams$Typings on WriteParams {
  _i2.dynamic get data => _i4.getProperty(
        this,
        'data',
      );
  set data(_i2.dynamic value) {
    _i4.setProperty(
      this,
      'data',
      value,
    );
  }

  _i2.num? get position => _i4.getProperty(
        this,
        'position',
      );
  set position(_i2.num? value) {
    _i4.setProperty(
      this,
      'position',
      value ?? _i6.undefined,
    );
  }

  _i2.num? get size => _i4.getProperty(
        this,
        'size',
      );
  set size(_i2.num? value) {
    _i4.setProperty(
      this,
      'size',
      value ?? _i6.undefined,
    );
  }

  _i3.WriteCommandType get type =>
      _i3.WriteCommandTypeOptions.values.byName(_i4.getProperty(
        this,
        'type',
      ));
  set type(_i3.WriteCommandType value) {
    _i4.setProperty(
      this,
      'type',
      value.name,
    );
  }
}

/* Source:  */
/// The ANGLE_instanced_arrays extension is part of the WebGL API and allows to draw the same object, or groups of similar objects multiple times, if they share the same vertex data, primitive count and type.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ANGLE_instanced_arrays)
@_i1.JS('ANGLE_instanced_arrays')
@_i1.staticInterop
@_i1.anonymous
class ANGLEInstancedArrays {
  external factory ANGLEInstancedArrays._({
    _i2.dynamic vertexAttribArrayDivisorAngle,
    _i2.dynamic drawArraysInstancedANGLE,
    _i2.dynamic drawElementsInstancedANGLE,
    _i2.dynamic vertexAttribDivisorANGLE,
  });

  factory ANGLEInstancedArrays({
    _i2.num? vertexAttribArrayDivisorAngle,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
    )? drawArraysInstancedANGLE,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
    )? drawElementsInstancedANGLE,
    void Function(
      _i2.num,
      _i2.num,
    )? vertexAttribDivisorANGLE,
  }) =>
      ANGLEInstancedArrays._(
        vertexAttribArrayDivisorAngle: vertexAttribArrayDivisorAngle,
        drawArraysInstancedANGLE: drawArraysInstancedANGLE == null
            ? null
            : _i4.allowInterop(drawArraysInstancedANGLE),
        drawElementsInstancedANGLE: drawElementsInstancedANGLE == null
            ? null
            : _i4.allowInterop(drawElementsInstancedANGLE),
        vertexAttribDivisorANGLE: vertexAttribDivisorANGLE == null
            ? null
            : _i4.allowInterop(vertexAttribDivisorANGLE),
      );

  static _i2.num get vertexAttribArrayDivisorAngle => _i4.getProperty(
        _declaredANGLEInstancedArrays,
        'VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE',
      );
}

_i2.Object get _declaredANGLEInstancedArrays => _i4.getProperty(
      _self,
      'ANGLE_instanced_arrays',
    );

extension ANGLEInstancedArrays$Typings on ANGLEInstancedArrays {
  _i2.num get vertexAttribArrayDivisorAngle => _i4.getProperty(
        this,
        'VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE',
      );
  set drawArraysInstancedANGLE(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'drawArraysInstancedANGLE',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
  ) get drawArraysInstancedANGLE => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'drawArraysInstancedANGLE',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
            ],
          );
  set drawElementsInstancedANGLE(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'drawElementsInstancedANGLE',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
  ) get drawElementsInstancedANGLE => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
        _i2.num p4,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'drawElementsInstancedANGLE',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
              p4,
            ],
          );
  set vertexAttribDivisorANGLE(
      void Function(
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'vertexAttribDivisorANGLE',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
  ) get vertexAttribDivisorANGLE => (
        _i2.num p0,
        _i2.num p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'vertexAttribDivisorANGLE',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
}

/* Source:  */
/// A controller object that allows you to abort one or more DOM requests as and when desired.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortController)
@_i1.JS()
@_i1.staticInterop
class AbortController {
  factory AbortController() => _i4.callConstructor(
        _declaredAbortController,
        [],
      );
}

_i2.Object get _declaredAbortController => _i4.getProperty(
      _self,
      'AbortController',
    );

extension AbortController$Typings on AbortController {
  /// Returns the AbortSignal object associated with this object.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortController/signal)
  _i3.AbortSignal get signal => _i4.getProperty(
        this,
        'signal',
      );
  set abort(void Function([_i2.dynamic]) value) {
    _i4.setProperty(
      this,
      'abort',
      _i4.allowInterop(value),
    );
  }

  void Function([_i2.dynamic]) get abort =>
      ([_i2.dynamic p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'abort',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
}

enum AbortSignalEventMap<T$> {
  abort<_i3.Event>(r'abort');

  const AbortSignalEventMap(this.value);

  final _i2.String value;
}

/* Source:  */
/// A signal object that allows you to communicate with a DOM request (such as a Fetch) and abort it if required via an AbortController object.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal)
@_i1.JS()
@_i1.staticInterop
class AbortSignal implements _i3.EventTarget {
  factory AbortSignal() => _i4.callConstructor(
        _declaredAbortSignal,
        [],
      );

  static set abort(_i3.AbortSignal Function([_i2.dynamic]) value) {
    _i4.setProperty(
      _i8.target648,
      'abort',
      _i4.allowInterop(value),
    );
  }

  static _i3.AbortSignal Function([_i2.dynamic]) get abort =>
      ([_i2.dynamic p0]) => _i4.callMethod(
            _i4.getProperty(
              _i8.target648,
              'abort',
            ),
            r'call',
            [
              _i8.target648,
              p0,
            ],
          );
  static set timeout(_i3.AbortSignal Function(_i2.num) value) {
    _i4.setProperty(
      _i8.target648,
      'timeout',
      _i4.allowInterop(value),
    );
  }

  static _i3.AbortSignal Function(_i2.num) get timeout =>
      (_i2.num p0) => _i4.callMethod(
            _i4.getProperty(
              _i8.target648,
              'timeout',
            ),
            r'call',
            [
              _i8.target648,
              p0,
            ],
          );
}

_i2.Object get _declaredAbortSignal => _i4.getProperty(
      _self,
      'AbortSignal',
    );

extension AbortSignal$Typings on AbortSignal {
  /// Returns true if this AbortSignal's AbortController has signaled to abort, and false otherwise.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal/aborted)
  _i2.bool get aborted => _i4.getProperty(
        this,
        'aborted',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal/abort_event)
  _i2.dynamic Function(_i3.Event)? get onabort =>
      (_i3.Event p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onabort',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onabort(_i2.dynamic Function(_i3.Event)? value) {
    _i4.setProperty(
      this,
      'onabort',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal/reason)
  _i2.dynamic get reason => _i4.getProperty(
        this,
        'reason',
      );
  set throwIfAborted(void Function() value) {
    _i4.setProperty(
      this,
      'throwIfAborted',
      _i4.allowInterop(value),
    );
  }

  void Function() get throwIfAborted => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'throwIfAborted',
        ),
        r'call',
        [this],
      );

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$1<K$>(
    _i3.AbortSignalEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function<K$>(
      _i3.AbortSignalEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get addEventListener => (
        $1: _addEventListener$1,
        $2: _addEventListener$2,
      );

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$1<K$>(
    _i3.AbortSignalEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function<K$>(
      _i3.AbortSignalEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get removeEventListener => (
        $1: _removeEventListener$1,
        $2: _removeEventListener$2,
      );
}

enum AbstractWorkerEventMap<T$ extends _i3.Event> {
  error<_i3.ErrorEvent>(r'error');

  const AbstractWorkerEventMap(this.value);

  final _i2.String value;
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class AbstractWorker {
  external factory AbstractWorker._({_i2.dynamic onerror});

  factory AbstractWorker({_i2.dynamic Function(_i3.ErrorEvent)? onerror}) =>
      AbstractWorker._(
          onerror: onerror == null ? _i6.undefined : _i4.allowInterop(onerror));
}

extension AbstractWorker$Typings on AbstractWorker {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorker/error_event)
  _i2.dynamic Function(_i3.ErrorEvent)? get onerror =>
      (_i3.ErrorEvent p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onerror',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onerror(_i2.dynamic Function(_i3.ErrorEvent)? value) {
    _i4.setProperty(
      this,
      'onerror',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  void _addEventListener$1<K$ extends _i3.Event>(
    _i3.AbstractWorkerEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  void _addEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    void Function<K$ extends _i3.Event>(
      _i3.AbstractWorkerEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get addEventListener => (
        $1: _addEventListener$1,
        $2: _addEventListener$2,
      );
  void _removeEventListener$1<K$ extends _i3.Event>(
    _i3.AbstractWorkerEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  void _removeEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    void Function<K$ extends _i3.Event>(
      _i3.AbstractWorkerEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get removeEventListener => (
        $1: _removeEventListener$1,
        $2: _removeEventListener$2,
      );
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class AnimationFrameProvider {
  external factory AnimationFrameProvider._({
    _i2.dynamic cancelAnimationFrame,
    _i2.dynamic requestAnimationFrame,
  });

  factory AnimationFrameProvider({
    void Function(_i2.num)? cancelAnimationFrame,
    _i2.num Function(_i3.FrameRequestCallback)? requestAnimationFrame,
  }) =>
      AnimationFrameProvider._(
        cancelAnimationFrame: cancelAnimationFrame == null
            ? null
            : _i4.allowInterop(cancelAnimationFrame),
        requestAnimationFrame: requestAnimationFrame == null
            ? null
            : _i4.allowInterop(requestAnimationFrame),
      );
}

extension AnimationFrameProvider$Typings on AnimationFrameProvider {
  set cancelAnimationFrame(void Function(_i2.num) value) {
    _i4.setProperty(
      this,
      'cancelAnimationFrame',
      _i4.allowInterop(value),
    );
  }

  void Function(_i2.num) get cancelAnimationFrame =>
      (_i2.num p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'cancelAnimationFrame',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set requestAnimationFrame(_i2.num Function(_i3.FrameRequestCallback) value) {
    _i4.setProperty(
      this,
      'requestAnimationFrame',
      _i4.allowInterop(value),
    );
  }

  _i2.num Function(_i3.FrameRequestCallback) get requestAnimationFrame =>
      (_i3.FrameRequestCallback p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'requestAnimationFrame',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
}

/* Source:  */
/// A file-like object of immutable, raw data. Blobs represent data that isn't necessarily in a JavaScript-native format. The File interface is based on Blob, inheriting blob functionality and expanding it to support files on the user's system.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob)
@_i1.JS()
@_i1.staticInterop
class Blob {
  factory Blob([
    _i2.List<_i2.Object>? blobParts,
    _i3.BlobPropertyBag? options,
  ]) =>
      _i4.callConstructor(
        _declaredBlob,
        [
          blobParts ?? _i6.undefined,
          options ?? _i6.undefined,
        ],
      );
}

_i2.Object get _declaredBlob => _i4.getProperty(
      _self,
      'Blob',
    );

extension Blob$Typings on Blob {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/size)
  _i2.num get size => _i4.getProperty(
        this,
        'size',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/type)
  _i2.String get type => _i4.getProperty(
        this,
        'type',
      );
  set arrayBuffer(_i2.Future<_i5.ByteBuffer> Function() value) {
    _i4.setProperty(
      this,
      'arrayBuffer',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i5.ByteBuffer> Function() get arrayBuffer =>
      () => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'arrayBuffer',
            ),
            r'call',
            [this],
          ));
  set slice(
      _i3.Blob Function([
        _i2.num?,
        _i2.num?,
        _i2.String?,
      ]) value) {
    _i4.setProperty(
      this,
      'slice',
      _i4.allowInterop(value),
    );
  }

  _i3.Blob Function([
    _i2.num?,
    _i2.num?,
    _i2.String?,
  ]) get slice => ([
        _i2.num? p0,
        _i2.num? p1,
        _i2.String? p2,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'slice',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
              p1 ?? _i6.undefined,
              p2 ?? _i6.undefined,
            ],
          );
  set stream(_i3.ReadableStream<_i5.Uint8List> Function() value) {
    _i4.setProperty(
      this,
      'stream',
      _i4.allowInterop(value),
    );
  }

  _i3.ReadableStream<_i5.Uint8List> Function() get stream =>
      () => _i4.callMethod(
            _i4.getProperty(
              this,
              'stream',
            ),
            r'call',
            [this],
          );
  set text(_i2.Future<_i2.String> Function() value) {
    _i4.setProperty(
      this,
      'text',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i2.String> Function() get text =>
      () => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'text',
            ),
            r'call',
            [this],
          ));
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class Body {
  external factory Body._({
    _i2.dynamic body,
    _i2.dynamic bodyUsed,
    _i2.dynamic arrayBuffer,
    _i2.dynamic blob,
    _i2.dynamic formData,
    _i2.dynamic json,
    _i2.dynamic text,
  });

  factory Body({
    _i3.ReadableStream<_i5.Uint8List>? body,
    _i2.bool? bodyUsed,
    _i2.Future<_i5.ByteBuffer> Function()? arrayBuffer,
    _i2.Future<_i3.Blob> Function()? blob,
    _i2.Future<_i3.FormData> Function()? formData,
    _i2.Future<_i2.dynamic> Function()? json,
    _i2.Future<_i2.String> Function()? text,
  }) =>
      Body._(
        body: body ?? _i6.undefined,
        bodyUsed: bodyUsed,
        arrayBuffer: arrayBuffer == null ? null : _i4.allowInterop(arrayBuffer),
        blob: blob == null ? null : _i4.allowInterop(blob),
        formData: formData == null ? null : _i4.allowInterop(formData),
        json: json == null ? null : _i4.allowInterop(json),
        text: text == null ? null : _i4.allowInterop(text),
      );
}

extension Body$Typings on Body {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/body)
  _i3.ReadableStream<_i5.Uint8List>? get body => _i4.getProperty(
        this,
        'body',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/bodyUsed)
  _i2.bool get bodyUsed => _i4.getProperty(
        this,
        'bodyUsed',
      );
  set arrayBuffer(_i2.Future<_i5.ByteBuffer> Function() value) {
    _i4.setProperty(
      this,
      'arrayBuffer',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i5.ByteBuffer> Function() get arrayBuffer =>
      () => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'arrayBuffer',
            ),
            r'call',
            [this],
          ));
  set blob(_i2.Future<_i3.Blob> Function() value) {
    _i4.setProperty(
      this,
      'blob',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i3.Blob> Function() get blob =>
      () => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'blob',
            ),
            r'call',
            [this],
          ));
  set formData(_i2.Future<_i3.FormData> Function() value) {
    _i4.setProperty(
      this,
      'formData',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i3.FormData> Function() get formData =>
      () => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'formData',
            ),
            r'call',
            [this],
          ));
  set json(_i2.Future<_i2.dynamic> Function() value) {
    _i4.setProperty(
      this,
      'json',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i2.dynamic> Function() get json =>
      () => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'json',
            ),
            r'call',
            [this],
          ));
  set text(_i2.Future<_i2.String> Function() value) {
    _i4.setProperty(
      this,
      'text',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i2.String> Function() get text =>
      () => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'text',
            ),
            r'call',
            [this],
          ));
}

enum BroadcastChannelEventMap<T$ extends _i3.Event> {
  message<_i3.MessageEvent<_i2.dynamic>>(r'message'),
  messageerror<_i3.MessageEvent<_i2.dynamic>>(r'messageerror');

  const BroadcastChannelEventMap(this.value);

  final _i2.String value;
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/BroadcastChannel)
@_i1.JS()
@_i1.staticInterop
class BroadcastChannel implements _i3.EventTarget {
  factory BroadcastChannel(_i2.String name) => _i4.callConstructor(
        _declaredBroadcastChannel,
        [name],
      );
}

_i2.Object get _declaredBroadcastChannel => _i4.getProperty(
      _self,
      'BroadcastChannel',
    );

extension BroadcastChannel$Typings on BroadcastChannel {
  /// Returns the channel name (as passed to the constructor).
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/BroadcastChannel/name)
  _i2.String get name => _i4.getProperty(
        this,
        'name',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/BroadcastChannel/message_event)
  _i2.dynamic Function(_i3.MessageEvent<_i2.dynamic>)? get onmessage =>
      (_i3.MessageEvent<_i2.dynamic> p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onmessage',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onmessage(_i2.dynamic Function(_i3.MessageEvent<_i2.dynamic>)? value) {
    _i4.setProperty(
      this,
      'onmessage',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/BroadcastChannel/messageerror_event)
  _i2.dynamic Function(_i3.MessageEvent<_i2.dynamic>)? get onmessageerror =>
      (_i3.MessageEvent<_i2.dynamic> p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onmessageerror',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onmessageerror(
      _i2.dynamic Function(_i3.MessageEvent<_i2.dynamic>)? value) {
    _i4.setProperty(
      this,
      'onmessageerror',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  set close(void Function() value) {
    _i4.setProperty(
      this,
      'close',
      _i4.allowInterop(value),
    );
  }

  void Function() get close => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'close',
        ),
        r'call',
        [this],
      );
  set postMessage(void Function([_i2.dynamic]) value) {
    _i4.setProperty(
      this,
      'postMessage',
      _i4.allowInterop(value),
    );
  }

  void Function([_i2.dynamic]) get postMessage =>
      ([_i2.dynamic p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'postMessage',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$1<K$ extends _i3.Event>(
    _i3.BroadcastChannelEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function<K$ extends _i3.Event>(
      _i3.BroadcastChannelEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get addEventListener => (
        $1: _addEventListener$1,
        $2: _addEventListener$2,
      );

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$1<K$ extends _i3.Event>(
    _i3.BroadcastChannelEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function<K$ extends _i3.Event>(
      _i3.BroadcastChannelEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get removeEventListener => (
        $1: _removeEventListener$1,
        $2: _removeEventListener$2,
      );
}

/* Source:  */
/// This Streams API interface provides a built-in byte length queuing strategy that can be used when constructing streams.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ByteLengthQueuingStrategy)
@_i1.JS()
@_i1.staticInterop
class ByteLengthQueuingStrategy
    implements _i3.QueuingStrategy<_i9.ArrayBufferView> {
  factory ByteLengthQueuingStrategy(_i3.QueuingStrategyInit init) =>
      _i4.callConstructor(
        _declaredByteLengthQueuingStrategy,
        [init],
      );
}

_i2.Object get _declaredByteLengthQueuingStrategy => _i4.getProperty(
      _self,
      'ByteLengthQueuingStrategy',
    );

extension ByteLengthQueuingStrategy$Typings on ByteLengthQueuingStrategy {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ByteLengthQueuingStrategy/highWaterMark)
  _i2.num get highWaterMark => _i4.getProperty(
        this,
        'highWaterMark',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ByteLengthQueuingStrategy/size)
  _i3.QueuingStrategySize<_i9.ArrayBufferView> get size => _i4.getProperty(
        this,
        'size',
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSImageValue)
@_i1.JS()
@_i1.staticInterop
class CSSImageValue implements _i3.CSSStyleValue {
  factory CSSImageValue() => _i4.callConstructor(
        _declaredCSSImageValue,
        [],
      );
}

_i2.Object get _declaredCSSImageValue => _i4.getProperty(
      _self,
      'CSSImageValue',
    ); /* Source:  */

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeywordValue)
@_i1.JS()
@_i1.staticInterop
class CSSKeywordValue implements _i3.CSSStyleValue {
  factory CSSKeywordValue(_i2.String value) => _i4.callConstructor(
        _declaredCSSKeywordValue,
        [value],
      );
}

_i2.Object get _declaredCSSKeywordValue => _i4.getProperty(
      _self,
      'CSSKeywordValue',
    );

extension CSSKeywordValue$Typings on CSSKeywordValue {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeywordValue/value)
  _i2.String get value => _i4.getProperty(
        this,
        'value',
      );
  set value(_i2.String value) {
    _i4.setProperty(
      this,
      'value',
      value,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
class CSSMathClamp implements _i3.CSSMathValue {
  factory CSSMathClamp(
    _i2.Object lower,
    _i2.Object value,
    _i2.Object upper,
  ) =>
      _i4.callConstructor(
        _declaredCSSMathClamp,
        [
          lower,
          value,
          upper,
        ],
      );
}

_i2.Object get _declaredCSSMathClamp => _i4.getProperty(
      _self,
      'CSSMathClamp',
    );

extension CSSMathClamp$Typings on CSSMathClamp {
  _i3.CSSNumericValue get lower => _i4.getProperty(
        this,
        'lower',
      );
  _i3.CSSNumericValue get upper => _i4.getProperty(
        this,
        'upper',
      );
  _i3.CSSNumericValue get value => _i4.getProperty(
        this,
        'value',
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathInvert)
@_i1.JS()
@_i1.staticInterop
class CSSMathInvert implements _i3.CSSMathValue {
  factory CSSMathInvert(_i2.Object arg) => _i4.callConstructor(
        _declaredCSSMathInvert,
        [arg],
      );
}

_i2.Object get _declaredCSSMathInvert => _i4.getProperty(
      _self,
      'CSSMathInvert',
    );

extension CSSMathInvert$Typings on CSSMathInvert {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathInvert/value)
  _i3.CSSNumericValue get value => _i4.getProperty(
        this,
        'value',
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathMax)
@_i1.JS()
@_i1.staticInterop
class CSSMathMax implements _i3.CSSMathValue {
  factory CSSMathMax([_i2.Iterable<_i2.dynamic>? args]) => _i4.callConstructor(
        _declaredCSSMathMax,
        [args ?? _i6.undefined],
      );
}

_i2.Object get _declaredCSSMathMax => _i4.getProperty(
      _self,
      'CSSMathMax',
    );

extension CSSMathMax$Typings on CSSMathMax {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathMax/values)
  _i3.CSSNumericArray get values => _i4.getProperty(
        this,
        'values',
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathMin)
@_i1.JS()
@_i1.staticInterop
class CSSMathMin implements _i3.CSSMathValue {
  factory CSSMathMin([_i2.Iterable<_i2.dynamic>? args]) => _i4.callConstructor(
        _declaredCSSMathMin,
        [args ?? _i6.undefined],
      );
}

_i2.Object get _declaredCSSMathMin => _i4.getProperty(
      _self,
      'CSSMathMin',
    );

extension CSSMathMin$Typings on CSSMathMin {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathMin/values)
  _i3.CSSNumericArray get values => _i4.getProperty(
        this,
        'values',
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathNegate)
@_i1.JS()
@_i1.staticInterop
class CSSMathNegate implements _i3.CSSMathValue {
  factory CSSMathNegate(_i2.Object arg) => _i4.callConstructor(
        _declaredCSSMathNegate,
        [arg],
      );
}

_i2.Object get _declaredCSSMathNegate => _i4.getProperty(
      _self,
      'CSSMathNegate',
    );

extension CSSMathNegate$Typings on CSSMathNegate {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathNegate/value)
  _i3.CSSNumericValue get value => _i4.getProperty(
        this,
        'value',
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathProduct)
@_i1.JS()
@_i1.staticInterop
class CSSMathProduct implements _i3.CSSMathValue {
  factory CSSMathProduct([_i2.Iterable<_i2.dynamic>? args]) =>
      _i4.callConstructor(
        _declaredCSSMathProduct,
        [args ?? _i6.undefined],
      );
}

_i2.Object get _declaredCSSMathProduct => _i4.getProperty(
      _self,
      'CSSMathProduct',
    );

extension CSSMathProduct$Typings on CSSMathProduct {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathProduct/values)
  _i3.CSSNumericArray get values => _i4.getProperty(
        this,
        'values',
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathSum)
@_i1.JS()
@_i1.staticInterop
class CSSMathSum implements _i3.CSSMathValue {
  factory CSSMathSum([_i2.Iterable<_i2.dynamic>? args]) => _i4.callConstructor(
        _declaredCSSMathSum,
        [args ?? _i6.undefined],
      );
}

_i2.Object get _declaredCSSMathSum => _i4.getProperty(
      _self,
      'CSSMathSum',
    );

extension CSSMathSum$Typings on CSSMathSum {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathSum/values)
  _i3.CSSNumericArray get values => _i4.getProperty(
        this,
        'values',
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathValue)
@_i1.JS()
@_i1.staticInterop
class CSSMathValue implements _i3.CSSNumericValue {
  factory CSSMathValue() => _i4.callConstructor(
        _declaredCSSMathValue,
        [],
      );
}

_i2.Object get _declaredCSSMathValue => _i4.getProperty(
      _self,
      'CSSMathValue',
    );

extension CSSMathValue$Typings on CSSMathValue {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathValue/operator)
  _i3.CSSMathOperator get operator =>
      _i3.CSSMathOperatorOptions.values.byName(_i4.getProperty(
        this,
        'operator',
      ));
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMatrixComponent)
@_i1.JS()
@_i1.staticInterop
class CSSMatrixComponent implements _i3.CSSTransformComponent {
  factory CSSMatrixComponent(
    _i3.DOMMatrixReadOnly matrix, [
    _i3.CSSMatrixComponentOptions? options,
  ]) =>
      _i4.callConstructor(
        _declaredCSSMatrixComponent,
        [
          matrix,
          options ?? _i6.undefined,
        ],
      );
}

_i2.Object get _declaredCSSMatrixComponent => _i4.getProperty(
      _self,
      'CSSMatrixComponent',
    );

extension CSSMatrixComponent$Typings on CSSMatrixComponent {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMatrixComponent/matrix)
  _i3.DOMMatrix get matrix => _i4.getProperty(
        this,
        'matrix',
      );
  set matrix(_i3.DOMMatrix value) {
    _i4.setProperty(
      this,
      'matrix',
      value,
    );
  }
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericArray)
@_i1.JS()
@_i1.staticInterop
class CSSNumericArray
    implements _IterableLike$<_i10.IterableIterator<_i3.CSSNumericValue>> {
  factory CSSNumericArray() => _i4.callConstructor(
        _declaredCSSNumericArray,
        [],
      );
}

_i2.Object get _declaredCSSNumericArray => _i4.getProperty(
      _self,
      'CSSNumericArray',
    );

extension CSSNumericArray$Typings on CSSNumericArray {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericArray/length)
  _i2.num get length => _i4.getProperty(
        this,
        'length',
      );
  set forEach(
      void Function(
        void Function(
          _i3.CSSNumericValue,
          _i2.num,
          _i3.CSSNumericArray,
        ), [
        _i2.dynamic,
      ]) value) {
    _i4.setProperty(
      this,
      'forEach',
      _i4.allowInterop(value),
    );
  }

  void Function(
    void Function(
      _i3.CSSNumericValue,
      _i2.num,
      _i3.CSSNumericArray,
    ), [
    _i2.dynamic,
  ]) get forEach => (
        void Function(
          _i3.CSSNumericValue,
          _i2.num,
          _i3.CSSNumericArray,
        ) p0, [
        _i2.dynamic p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'forEach',
            ),
            r'call',
            [
              this,
              _i4.allowInterop(p0),
              p1,
            ],
          );
  set entries(
      _i10.IterableIterator<
                  (
                    _i2.num,
                    _i3.CSSNumericValue,
                  )>
              Function()
          value) {
    _i4.setProperty(
      this,
      'entries',
      _i4.allowInterop(value),
    );
  }

  _i10.IterableIterator<
          (
            _i2.num,
            _i3.CSSNumericValue,
          )>
      Function() get entries => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'entries',
        ),
        r'call',
        [this],
      );
  set keys(_i10.IterableIterator<_i2.num> Function() value) {
    _i4.setProperty(
      this,
      'keys',
      _i4.allowInterop(value),
    );
  }

  _i10.IterableIterator<_i2.num> Function() get keys => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'keys',
        ),
        r'call',
        [this],
      );
  set values(_i10.IterableIterator<_i3.CSSNumericValue> Function() value) {
    _i4.setProperty(
      this,
      'values',
      _i4.allowInterop(value),
    );
  }

  _i10.IterableIterator<_i3.CSSNumericValue> Function() get values =>
      () => _i4.callMethod(
            _i4.getProperty(
              this,
              'values',
            ),
            r'call',
            [this],
          );
  _i3.CSSNumericValue operator [](_i2.num index) => _i4.getProperty(
        this,
        index,
      );
  void operator []=(
    _i2.num index,
    _i3.CSSNumericValue value,
  ) {
    _i4.setProperty(
      this,
      index,
      value,
    );
  }
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericValue)
@_i1.JS()
@_i1.staticInterop
class CSSNumericValue implements _i3.CSSStyleValue {
  factory CSSNumericValue() => _i4.callConstructor(
        _declaredCSSNumericValue,
        [],
      );
}

_i2.Object get _declaredCSSNumericValue => _i4.getProperty(
      _self,
      'CSSNumericValue',
    );

extension CSSNumericValue$Typings on CSSNumericValue {
  set add(_i3.CSSNumericValue Function([_i2.Iterable<_i2.dynamic>?]) value) {
    _i4.setProperty(
      this,
      'add',
      _i4.allowInterop(([
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
        a6,
        a7,
        a8,
        a9,
      ]) =>
          value([
            a0,
            a1,
            a2,
            a3,
            a4,
            a5,
            a6,
            a7,
            a8,
            a9,
          ])),
    );
  }

  _i3.CSSNumericValue Function([_i2.Iterable<_i2.dynamic>?]) get add =>
      ([_i2.Iterable<_i2.dynamic>? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'add',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set div(_i3.CSSNumericValue Function([_i2.Iterable<_i2.dynamic>?]) value) {
    _i4.setProperty(
      this,
      'div',
      _i4.allowInterop(([
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
        a6,
        a7,
        a8,
        a9,
      ]) =>
          value([
            a0,
            a1,
            a2,
            a3,
            a4,
            a5,
            a6,
            a7,
            a8,
            a9,
          ])),
    );
  }

  _i3.CSSNumericValue Function([_i2.Iterable<_i2.dynamic>?]) get div =>
      ([_i2.Iterable<_i2.dynamic>? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'div',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set equals(_i2.bool Function([_i2.Iterable<_i2.dynamic>?]) value) {
    _i4.setProperty(
      this,
      'equals',
      _i4.allowInterop(([
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
        a6,
        a7,
        a8,
        a9,
      ]) =>
          value([
            a0,
            a1,
            a2,
            a3,
            a4,
            a5,
            a6,
            a7,
            a8,
            a9,
          ])),
    );
  }

  _i2.bool Function([_i2.Iterable<_i2.dynamic>?]) get equals =>
      ([_i2.Iterable<_i2.dynamic>? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'equals',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set max(_i3.CSSNumericValue Function([_i2.Iterable<_i2.dynamic>?]) value) {
    _i4.setProperty(
      this,
      'max',
      _i4.allowInterop(([
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
        a6,
        a7,
        a8,
        a9,
      ]) =>
          value([
            a0,
            a1,
            a2,
            a3,
            a4,
            a5,
            a6,
            a7,
            a8,
            a9,
          ])),
    );
  }

  _i3.CSSNumericValue Function([_i2.Iterable<_i2.dynamic>?]) get max =>
      ([_i2.Iterable<_i2.dynamic>? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'max',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set min(_i3.CSSNumericValue Function([_i2.Iterable<_i2.dynamic>?]) value) {
    _i4.setProperty(
      this,
      'min',
      _i4.allowInterop(([
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
        a6,
        a7,
        a8,
        a9,
      ]) =>
          value([
            a0,
            a1,
            a2,
            a3,
            a4,
            a5,
            a6,
            a7,
            a8,
            a9,
          ])),
    );
  }

  _i3.CSSNumericValue Function([_i2.Iterable<_i2.dynamic>?]) get min =>
      ([_i2.Iterable<_i2.dynamic>? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'min',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set mul(_i3.CSSNumericValue Function([_i2.Iterable<_i2.dynamic>?]) value) {
    _i4.setProperty(
      this,
      'mul',
      _i4.allowInterop(([
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
        a6,
        a7,
        a8,
        a9,
      ]) =>
          value([
            a0,
            a1,
            a2,
            a3,
            a4,
            a5,
            a6,
            a7,
            a8,
            a9,
          ])),
    );
  }

  _i3.CSSNumericValue Function([_i2.Iterable<_i2.dynamic>?]) get mul =>
      ([_i2.Iterable<_i2.dynamic>? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'mul',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set sub(_i3.CSSNumericValue Function([_i2.Iterable<_i2.dynamic>?]) value) {
    _i4.setProperty(
      this,
      'sub',
      _i4.allowInterop(([
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
        a6,
        a7,
        a8,
        a9,
      ]) =>
          value([
            a0,
            a1,
            a2,
            a3,
            a4,
            a5,
            a6,
            a7,
            a8,
            a9,
          ])),
    );
  }

  _i3.CSSNumericValue Function([_i2.Iterable<_i2.dynamic>?]) get sub =>
      ([_i2.Iterable<_i2.dynamic>? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'sub',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set to(_i3.CSSUnitValue Function(_i2.String) value) {
    _i4.setProperty(
      this,
      'to',
      _i4.allowInterop(value),
    );
  }

  _i3.CSSUnitValue Function(_i2.String) get to =>
      (_i2.String p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'to',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set toSum(_i3.CSSMathSum Function([_i2.Iterable<_i2.dynamic>?]) value) {
    _i4.setProperty(
      this,
      'toSum',
      _i4.allowInterop(([
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
        a6,
        a7,
        a8,
        a9,
      ]) =>
          value([
            a0,
            a1,
            a2,
            a3,
            a4,
            a5,
            a6,
            a7,
            a8,
            a9,
          ])),
    );
  }

  _i3.CSSMathSum Function([_i2.Iterable<_i2.dynamic>?]) get toSum =>
      ([_i2.Iterable<_i2.dynamic>? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'toSum',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set type(_i3.CSSNumericType Function() value) {
    _i4.setProperty(
      this,
      'type',
      _i4.allowInterop(value),
    );
  }

  _i3.CSSNumericType Function() get type => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'type',
        ),
        r'call',
        [this],
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSPerspective)
@_i1.JS()
@_i1.staticInterop
class CSSPerspective implements _i3.CSSTransformComponent {
  factory CSSPerspective(_i2.Object length) => _i4.callConstructor(
        _declaredCSSPerspective,
        [length],
      );
}

_i2.Object get _declaredCSSPerspective => _i4.getProperty(
      _self,
      'CSSPerspective',
    );

extension CSSPerspective$Typings on CSSPerspective {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSPerspective/length)
  _i2.Object get length => _i4.getProperty(
        this,
        'length',
      );
  set length(_i2.Object value) {
    _i4.setProperty(
      this,
      'length',
      value,
    );
  }
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRotate)
@_i1.JS()
@_i1.staticInterop
class CSSRotate implements _i3.CSSTransformComponent {
  factory CSSRotate.$1() => _i4.callConstructor(
        _declaredCSSRotate,
        [],
      );

  factory CSSRotate.$2(_i3.CSSNumericValue angle) => _i4.callConstructor(
        _declaredCSSRotate,
        [angle],
      );

  factory CSSRotate.$3(
    _i2.Object x,
    _i2.Object y,
    _i2.Object z,
    _i3.CSSNumericValue angle,
  ) =>
      _i4.callConstructor(
        _declaredCSSRotate,
        [
          x,
          y,
          z,
          angle,
        ],
      );
}

_i2.Object get _declaredCSSRotate => _i4.getProperty(
      _self,
      'CSSRotate',
    );

extension CSSRotate$Typings on CSSRotate {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRotate/angle)
  _i3.CSSNumericValue get angle => _i4.getProperty(
        this,
        'angle',
      );
  set angle(_i3.CSSNumericValue value) {
    _i4.setProperty(
      this,
      'angle',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRotate/x)
  _i2.Object get x => _i4.getProperty(
        this,
        'x',
      );
  set x(_i2.Object value) {
    _i4.setProperty(
      this,
      'x',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRotate/y)
  _i2.Object get y => _i4.getProperty(
        this,
        'y',
      );
  set y(_i2.Object value) {
    _i4.setProperty(
      this,
      'y',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRotate/z)
  _i2.Object get z => _i4.getProperty(
        this,
        'z',
      );
  set z(_i2.Object value) {
    _i4.setProperty(
      this,
      'z',
      value,
    );
  }
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSScale)
@_i1.JS()
@_i1.staticInterop
class CSSScale implements _i3.CSSTransformComponent {
  factory CSSScale(
    _i2.Object x,
    _i2.Object y, [
    _i2.Object? z,
  ]) =>
      _i4.callConstructor(
        _declaredCSSScale,
        [
          x,
          y,
          z ?? _i6.undefined ?? _i6.undefined,
        ],
      );
}

_i2.Object get _declaredCSSScale => _i4.getProperty(
      _self,
      'CSSScale',
    );

extension CSSScale$Typings on CSSScale {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSScale/x)
  _i2.Object get x => _i4.getProperty(
        this,
        'x',
      );
  set x(_i2.Object value) {
    _i4.setProperty(
      this,
      'x',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSScale/y)
  _i2.Object get y => _i4.getProperty(
        this,
        'y',
      );
  set y(_i2.Object value) {
    _i4.setProperty(
      this,
      'y',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSScale/z)
  _i2.Object get z => _i4.getProperty(
        this,
        'z',
      );
  set z(_i2.Object value) {
    _i4.setProperty(
      this,
      'z',
      value,
    );
  }
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkew)
@_i1.JS()
@_i1.staticInterop
class CSSSkew implements _i3.CSSTransformComponent {
  factory CSSSkew(
    _i3.CSSNumericValue ax,
    _i3.CSSNumericValue ay,
  ) =>
      _i4.callConstructor(
        _declaredCSSSkew,
        [
          ax,
          ay,
        ],
      );
}

_i2.Object get _declaredCSSSkew => _i4.getProperty(
      _self,
      'CSSSkew',
    );

extension CSSSkew$Typings on CSSSkew {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkew/ax)
  _i3.CSSNumericValue get ax => _i4.getProperty(
        this,
        'ax',
      );
  set ax(_i3.CSSNumericValue value) {
    _i4.setProperty(
      this,
      'ax',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkew/ay)
  _i3.CSSNumericValue get ay => _i4.getProperty(
        this,
        'ay',
      );
  set ay(_i3.CSSNumericValue value) {
    _i4.setProperty(
      this,
      'ay',
      value,
    );
  }
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkewX)
@_i1.JS()
@_i1.staticInterop
class CSSSkewX implements _i3.CSSTransformComponent {
  factory CSSSkewX(_i3.CSSNumericValue ax) => _i4.callConstructor(
        _declaredCSSSkewX,
        [ax],
      );
}

_i2.Object get _declaredCSSSkewX => _i4.getProperty(
      _self,
      'CSSSkewX',
    );

extension CSSSkewX$Typings on CSSSkewX {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkewX/ax)
  _i3.CSSNumericValue get ax => _i4.getProperty(
        this,
        'ax',
      );
  set ax(_i3.CSSNumericValue value) {
    _i4.setProperty(
      this,
      'ax',
      value,
    );
  }
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkewY)
@_i1.JS()
@_i1.staticInterop
class CSSSkewY implements _i3.CSSTransformComponent {
  factory CSSSkewY(_i3.CSSNumericValue ay) => _i4.callConstructor(
        _declaredCSSSkewY,
        [ay],
      );
}

_i2.Object get _declaredCSSSkewY => _i4.getProperty(
      _self,
      'CSSSkewY',
    );

extension CSSSkewY$Typings on CSSSkewY {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkewY/ay)
  _i3.CSSNumericValue get ay => _i4.getProperty(
        this,
        'ay',
      );
  set ay(_i3.CSSNumericValue value) {
    _i4.setProperty(
      this,
      'ay',
      value,
    );
  }
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleValue)
@_i1.JS()
@_i1.staticInterop
class CSSStyleValue {
  factory CSSStyleValue() => _i4.callConstructor(
        _declaredCSSStyleValue,
        [],
      );
}

_i2.Object get _declaredCSSStyleValue => _i4.getProperty(
      _self,
      'CSSStyleValue',
    );

extension CSSStyleValue$Typings on CSSStyleValue {
  set toString$(_i2.String Function() value) {
    _i4.setProperty(
      this,
      'toString',
      _i4.allowInterop(value),
    );
  }

  _i2.String Function() get toString$ => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'toString',
        ),
        r'call',
        [this],
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTransformComponent)
@_i1.JS()
@_i1.staticInterop
class CSSTransformComponent {
  factory CSSTransformComponent() => _i4.callConstructor(
        _declaredCSSTransformComponent,
        [],
      );
}

_i2.Object get _declaredCSSTransformComponent => _i4.getProperty(
      _self,
      'CSSTransformComponent',
    );

extension CSSTransformComponent$Typings on CSSTransformComponent {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTransformComponent/is2D)
  _i2.bool get is2D => _i4.getProperty(
        this,
        'is2D',
      );
  set is2D(_i2.bool value) {
    _i4.setProperty(
      this,
      'is2D',
      value,
    );
  }

  set toMatrix(_i3.DOMMatrix Function() value) {
    _i4.setProperty(
      this,
      'toMatrix',
      _i4.allowInterop(value),
    );
  }

  _i3.DOMMatrix Function() get toMatrix => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'toMatrix',
        ),
        r'call',
        [this],
      );
  set toString$(_i2.String Function() value) {
    _i4.setProperty(
      this,
      'toString',
      _i4.allowInterop(value),
    );
  }

  _i2.String Function() get toString$ => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'toString',
        ),
        r'call',
        [this],
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTransformValue)
@_i1.JS()
@_i1.staticInterop
class CSSTransformValue
    implements
        _i3.CSSStyleValue,
        _IterableLike$<_i10.IterableIterator<_i3.CSSTransformComponent>> {
  factory CSSTransformValue(_i2.List<_i3.CSSTransformComponent> transforms) =>
      _i4.callConstructor(
        _declaredCSSTransformValue,
        [transforms],
      );
}

_i2.Object get _declaredCSSTransformValue => _i4.getProperty(
      _self,
      'CSSTransformValue',
    );

extension CSSTransformValue$Typings on CSSTransformValue {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTransformValue/is2D)
  _i2.bool get is2D => _i4.getProperty(
        this,
        'is2D',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTransformValue/length)
  _i2.num get length => _i4.getProperty(
        this,
        'length',
      );
  set toMatrix(_i3.DOMMatrix Function() value) {
    _i4.setProperty(
      this,
      'toMatrix',
      _i4.allowInterop(value),
    );
  }

  _i3.DOMMatrix Function() get toMatrix => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'toMatrix',
        ),
        r'call',
        [this],
      );
  set forEach(
      void Function(
        void Function(
          _i3.CSSTransformComponent,
          _i2.num,
          _i3.CSSTransformValue,
        ), [
        _i2.dynamic,
      ]) value) {
    _i4.setProperty(
      this,
      'forEach',
      _i4.allowInterop(value),
    );
  }

  void Function(
    void Function(
      _i3.CSSTransformComponent,
      _i2.num,
      _i3.CSSTransformValue,
    ), [
    _i2.dynamic,
  ]) get forEach => (
        void Function(
          _i3.CSSTransformComponent,
          _i2.num,
          _i3.CSSTransformValue,
        ) p0, [
        _i2.dynamic p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'forEach',
            ),
            r'call',
            [
              this,
              _i4.allowInterop(p0),
              p1,
            ],
          );
  set entries(
      _i10.IterableIterator<
                  (
                    _i2.num,
                    _i3.CSSTransformComponent,
                  )>
              Function()
          value) {
    _i4.setProperty(
      this,
      'entries',
      _i4.allowInterop(value),
    );
  }

  _i10.IterableIterator<
          (
            _i2.num,
            _i3.CSSTransformComponent,
          )>
      Function() get entries => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'entries',
        ),
        r'call',
        [this],
      );
  set keys(_i10.IterableIterator<_i2.num> Function() value) {
    _i4.setProperty(
      this,
      'keys',
      _i4.allowInterop(value),
    );
  }

  _i10.IterableIterator<_i2.num> Function() get keys => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'keys',
        ),
        r'call',
        [this],
      );
  set values(
      _i10.IterableIterator<_i3.CSSTransformComponent> Function() value) {
    _i4.setProperty(
      this,
      'values',
      _i4.allowInterop(value),
    );
  }

  _i10.IterableIterator<_i3.CSSTransformComponent> Function() get values =>
      () => _i4.callMethod(
            _i4.getProperty(
              this,
              'values',
            ),
            r'call',
            [this],
          );
  _i3.CSSTransformComponent operator [](_i2.num index) => _i4.getProperty(
        this,
        index,
      );
  void operator []=(
    _i2.num index,
    _i3.CSSTransformComponent value,
  ) {
    _i4.setProperty(
      this,
      index,
      value,
    );
  }
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTranslate)
@_i1.JS()
@_i1.staticInterop
class CSSTranslate implements _i3.CSSTransformComponent {
  factory CSSTranslate(
    _i3.CSSNumericValue x,
    _i3.CSSNumericValue y, [
    _i3.CSSNumericValue? z,
  ]) =>
      _i4.callConstructor(
        _declaredCSSTranslate,
        [
          x,
          y,
          z ?? _i6.undefined,
        ],
      );
}

_i2.Object get _declaredCSSTranslate => _i4.getProperty(
      _self,
      'CSSTranslate',
    );

extension CSSTranslate$Typings on CSSTranslate {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTranslate/x)
  _i3.CSSNumericValue get x => _i4.getProperty(
        this,
        'x',
      );
  set x(_i3.CSSNumericValue value) {
    _i4.setProperty(
      this,
      'x',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTranslate/y)
  _i3.CSSNumericValue get y => _i4.getProperty(
        this,
        'y',
      );
  set y(_i3.CSSNumericValue value) {
    _i4.setProperty(
      this,
      'y',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTranslate/z)
  _i3.CSSNumericValue get z => _i4.getProperty(
        this,
        'z',
      );
  set z(_i3.CSSNumericValue value) {
    _i4.setProperty(
      this,
      'z',
      value,
    );
  }
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSUnitValue)
@_i1.JS()
@_i1.staticInterop
class CSSUnitValue implements _i3.CSSNumericValue {
  factory CSSUnitValue(
    _i2.num value,
    _i2.String unit,
  ) =>
      _i4.callConstructor(
        _declaredCSSUnitValue,
        [
          value,
          unit,
        ],
      );
}

_i2.Object get _declaredCSSUnitValue => _i4.getProperty(
      _self,
      'CSSUnitValue',
    );

extension CSSUnitValue$Typings on CSSUnitValue {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSUnitValue/unit)
  _i2.String get unit => _i4.getProperty(
        this,
        'unit',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSUnitValue/value)
  _i2.num get value => _i4.getProperty(
        this,
        'value',
      );
  set value(_i2.num value) {
    _i4.setProperty(
      this,
      'value',
      value,
    );
  }
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSUnparsedValue)
@_i1.JS()
@_i1.staticInterop
class CSSUnparsedValue
    implements
        _i3.CSSStyleValue,
        _IterableLike$<_i10.IterableIterator<_i2.Object>> {
  factory CSSUnparsedValue(_i2.List<_i2.Object> members) => _i4.callConstructor(
        _declaredCSSUnparsedValue,
        [members],
      );
}

_i2.Object get _declaredCSSUnparsedValue => _i4.getProperty(
      _self,
      'CSSUnparsedValue',
    );

extension CSSUnparsedValue$Typings on CSSUnparsedValue {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSUnparsedValue/length)
  _i2.num get length => _i4.getProperty(
        this,
        'length',
      );
  set forEach(
      void Function(
        void Function(
          _i2.Object,
          _i2.num,
          _i3.CSSUnparsedValue,
        ), [
        _i2.dynamic,
      ]) value) {
    _i4.setProperty(
      this,
      'forEach',
      _i4.allowInterop(value),
    );
  }

  void Function(
    void Function(
      _i2.Object,
      _i2.num,
      _i3.CSSUnparsedValue,
    ), [
    _i2.dynamic,
  ]) get forEach => (
        void Function(
          _i2.Object,
          _i2.num,
          _i3.CSSUnparsedValue,
        ) p0, [
        _i2.dynamic p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'forEach',
            ),
            r'call',
            [
              this,
              _i4.allowInterop(p0),
              p1,
            ],
          );
  set entries(
      _i10.IterableIterator<
                  (
                    _i2.num,
                    _i2.Object,
                  )>
              Function()
          value) {
    _i4.setProperty(
      this,
      'entries',
      _i4.allowInterop(value),
    );
  }

  _i10.IterableIterator<
          (
            _i2.num,
            _i2.Object,
          )>
      Function() get entries => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'entries',
        ),
        r'call',
        [this],
      );
  set keys(_i10.IterableIterator<_i2.num> Function() value) {
    _i4.setProperty(
      this,
      'keys',
      _i4.allowInterop(value),
    );
  }

  _i10.IterableIterator<_i2.num> Function() get keys => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'keys',
        ),
        r'call',
        [this],
      );
  set values(_i10.IterableIterator<_i2.Object> Function() value) {
    _i4.setProperty(
      this,
      'values',
      _i4.allowInterop(value),
    );
  }

  _i10.IterableIterator<_i2.Object> Function() get values =>
      () => _i4.callMethod(
            _i4.getProperty(
              this,
              'values',
            ),
            r'call',
            [this],
          );
  _i2.Object operator [](_i2.num index) => _i4.getProperty(
        this,
        index,
      );
  void operator []=(
    _i2.num index,
    _i2.Object value,
  ) {
    _i4.setProperty(
      this,
      index,
      value,
    );
  }
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSVariableReferenceValue)
@_i1.JS()
@_i1.staticInterop
class CSSVariableReferenceValue {
  factory CSSVariableReferenceValue(
    _i2.String variable, [
    _i3.CSSUnparsedValue? fallback,
  ]) =>
      _i4.callConstructor(
        _declaredCSSVariableReferenceValue,
        [
          variable,
          fallback ?? _i6.undefined,
        ],
      );
}

_i2.Object get _declaredCSSVariableReferenceValue => _i4.getProperty(
      _self,
      'CSSVariableReferenceValue',
    );

extension CSSVariableReferenceValue$Typings on CSSVariableReferenceValue {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSVariableReferenceValue/fallback)
  _i3.CSSUnparsedValue? get fallback => _i4.getProperty(
        this,
        'fallback',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSVariableReferenceValue/variable)
  _i2.String get variable => _i4.getProperty(
        this,
        'variable',
      );
  set variable(_i2.String value) {
    _i4.setProperty(
      this,
      'variable',
      value,
    );
  }
}

/* Source:  */
/// Provides a storage mechanism for Request / Response object pairs that are cached, for example as part of the ServiceWorker life cycle. Note that the Cache interface is exposed to windowed scopes as well as workers. You don't have to use it in conjunction with service workers, even though it is defined in the service worker spec.
/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Cache)
@_i1.JS()
@_i1.staticInterop
class Cache {
  factory Cache() => _i4.callConstructor(
        _declaredCache,
        [],
      );
}

_i2.Object get _declaredCache => _i4.getProperty(
      _self,
      'Cache',
    );

extension Cache$Typings on Cache {
  set add(_i2.Future<void> Function(_i2.Object) value) {
    _i4.setProperty(
      this,
      'add',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<void> Function(_i2.Object) get add =>
      (_i2.Object p0) => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'add',
            ),
            r'call',
            [
              this,
              p0,
            ],
          ));
  set delete(
      _i2.Future<_i2.bool> Function(
        _i2.Object, [
        _i3.CacheQueryOptions?,
      ]) value) {
    _i4.setProperty(
      this,
      'delete',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i2.bool> Function(
    _i2.Object, [
    _i3.CacheQueryOptions?,
  ]) get delete => (
        _i2.Object p0, [
        _i3.CacheQueryOptions? p1,
      ]) =>
          _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'delete',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
            ],
          ));
  set keys(
      _i2.Future<_i9.ReadonlyArray<_i3.Request>> Function([
        _i2.Object?,
        _i3.CacheQueryOptions?,
      ]) value) {
    _i4.setProperty(
      this,
      'keys',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i9.ReadonlyArray<_i3.Request>> Function([
    _i2.Object?,
    _i3.CacheQueryOptions?,
  ]) get keys => ([
        _i2.Object? p0,
        _i3.CacheQueryOptions? p1,
      ]) =>
          _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'keys',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
              p1 ?? _i6.undefined,
            ],
          ));
  set match(
      _i2.Future<_i3.Response?> Function(
        _i2.Object, [
        _i3.CacheQueryOptions?,
      ]) value) {
    _i4.setProperty(
      this,
      'match',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i3.Response?> Function(
    _i2.Object, [
    _i3.CacheQueryOptions?,
  ]) get match => (
        _i2.Object p0, [
        _i3.CacheQueryOptions? p1,
      ]) =>
          _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'match',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
            ],
          ));
  set matchAll(
      _i2.Future<_i9.ReadonlyArray<_i3.Response>> Function([
        _i2.Object?,
        _i3.CacheQueryOptions?,
      ]) value) {
    _i4.setProperty(
      this,
      'matchAll',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i9.ReadonlyArray<_i3.Response>> Function([
    _i2.Object?,
    _i3.CacheQueryOptions?,
  ]) get matchAll => ([
        _i2.Object? p0,
        _i3.CacheQueryOptions? p1,
      ]) =>
          _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'matchAll',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
              p1 ?? _i6.undefined,
            ],
          ));
  set put(
      _i2.Future<void> Function(
        _i2.Object,
        _i3.Response,
      ) value) {
    _i4.setProperty(
      this,
      'put',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<void> Function(
    _i2.Object,
    _i3.Response,
  ) get put => (
        _i2.Object p0,
        _i3.Response p1,
      ) =>
          _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'put',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          ));

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Cache/addAll)
  _i2.Future<void> _addAll$1(_i2.List<_i2.Object> requests) =>
      _i4.promiseToFuture(_i4.callMethod(
        this,
        'addAll',
        [requests],
      ));

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Cache/addAll)
  _i2.Future<void> _addAll$2(_i10.Iterable<_i2.Object> requests) =>
      _i4.promiseToFuture(_i4.callMethod(
        this,
        'addAll',
        [requests],
      ));

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Cache/addAll)
    _i2.Future<void> Function(_i2.List<_i2.Object> requests) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Cache/addAll)
    _i2.Future<void> Function(_i10.Iterable<_i2.Object> requests) $2,
  }) get addAll => (
        $1: _addAll$1,
        $2: _addAll$2,
      );
}

/* Source:  */
/// The storage for Cache objects.
/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CacheStorage)
@_i1.JS()
@_i1.staticInterop
class CacheStorage {
  factory CacheStorage() => _i4.callConstructor(
        _declaredCacheStorage,
        [],
      );
}

_i2.Object get _declaredCacheStorage => _i4.getProperty(
      _self,
      'CacheStorage',
    );

extension CacheStorage$Typings on CacheStorage {
  set delete(_i2.Future<_i2.bool> Function(_i2.String) value) {
    _i4.setProperty(
      this,
      'delete',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i2.bool> Function(_i2.String) get delete =>
      (_i2.String p0) => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'delete',
            ),
            r'call',
            [
              this,
              p0,
            ],
          ));
  set has(_i2.Future<_i2.bool> Function(_i2.String) value) {
    _i4.setProperty(
      this,
      'has',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i2.bool> Function(_i2.String) get has =>
      (_i2.String p0) => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'has',
            ),
            r'call',
            [
              this,
              p0,
            ],
          ));
  set keys(_i2.Future<_i2.List<_i2.String>> Function() value) {
    _i4.setProperty(
      this,
      'keys',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i2.List<_i2.String>> Function() get keys =>
      () => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'keys',
            ),
            r'call',
            [this],
          ));
  set match(
      _i2.Future<_i3.Response?> Function(
        _i2.Object, [
        _i3.MultiCacheQueryOptions?,
      ]) value) {
    _i4.setProperty(
      this,
      'match',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i3.Response?> Function(
    _i2.Object, [
    _i3.MultiCacheQueryOptions?,
  ]) get match => (
        _i2.Object p0, [
        _i3.MultiCacheQueryOptions? p1,
      ]) =>
          _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'match',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
            ],
          ));
  set open(_i2.Future<_i3.Cache> Function(_i2.String) value) {
    _i4.setProperty(
      this,
      'open',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i3.Cache> Function(_i2.String) get open =>
      (_i2.String p0) => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'open',
            ),
            r'call',
            [
              this,
              p0,
            ],
          ));
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class CanvasCompositing {
  external factory CanvasCompositing._({
    _i2.dynamic globalAlpha,
    _i2.dynamic globalCompositeOperation,
  });

  factory CanvasCompositing({
    _i2.num? globalAlpha,
    _i3.GlobalCompositeOperation? globalCompositeOperation,
  }) =>
      CanvasCompositing._(
        globalAlpha: globalAlpha,
        globalCompositeOperation:
            globalCompositeOperation?.name ?? _i6.undefined,
      );
}

extension CanvasCompositing$Typings on CanvasCompositing {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/globalAlpha)
  _i2.num get globalAlpha => _i4.getProperty(
        this,
        'globalAlpha',
      );
  set globalAlpha(_i2.num value) {
    _i4.setProperty(
      this,
      'globalAlpha',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation)
  _i3.GlobalCompositeOperation get globalCompositeOperation =>
      _i3.GlobalCompositeOperationOptions.values.byName(_i4.getProperty(
        this,
        'globalCompositeOperation',
      ));
  set globalCompositeOperation(_i3.GlobalCompositeOperation value) {
    _i4.setProperty(
      this,
      'globalCompositeOperation',
      value.name,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class CanvasDrawImage {
  external factory CanvasDrawImage._();

  factory CanvasDrawImage() => CanvasDrawImage._();
}

extension CanvasDrawImage$Typings on CanvasDrawImage {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/drawImage)
  void drawImage(
    _i2.Object image,
    _i2.num sx,
    _i2.num sy,
    _i2.num sw,
    _i2.num sh,
    _i2.num dx,
    _i2.num dy,
    _i2.num dw,
    _i2.num dh,
  ) {
    _i4.callMethod(
      this,
      'drawImage',
      [
        image,
        sx,
        sy,
        sw,
        sh,
        dx,
        dy,
        dw,
        dh,
      ],
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class CanvasDrawPath {
  external factory CanvasDrawPath._({_i2.dynamic beginPath});

  factory CanvasDrawPath({void Function()? beginPath}) => CanvasDrawPath._(
      beginPath: beginPath == null ? null : _i4.allowInterop(beginPath));
}

extension CanvasDrawPath$Typings on CanvasDrawPath {
  set beginPath(void Function() value) {
    _i4.setProperty(
      this,
      'beginPath',
      _i4.allowInterop(value),
    );
  }

  void Function() get beginPath => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'beginPath',
        ),
        r'call',
        [this],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/clip)
  void _clip$1([_i3.CanvasFillRule? fillRule]) {
    _i4.callMethod(
      this,
      'clip',
      [fillRule?.name ?? _i6.undefined ?? _i6.undefined],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/clip)
  void _clip$2(
    _i3.Path2D path, [
    _i3.CanvasFillRule? fillRule,
  ]) {
    _i4.callMethod(
      this,
      'clip',
      [
        path,
        fillRule?.name ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/clip)
    void Function([_i3.CanvasFillRule? fillRule]) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/clip)
    void Function(
      _i3.Path2D path, [
      _i3.CanvasFillRule? fillRule,
    ]) $2,
  }) get clip => (
        $1: _clip$1,
        $2: _clip$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fill)
  void _fill$1([_i3.CanvasFillRule? fillRule]) {
    _i4.callMethod(
      this,
      'fill',
      [fillRule?.name ?? _i6.undefined ?? _i6.undefined],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fill)
  void _fill$2(
    _i3.Path2D path, [
    _i3.CanvasFillRule? fillRule,
  ]) {
    _i4.callMethod(
      this,
      'fill',
      [
        path,
        fillRule?.name ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fill)
    void Function([_i3.CanvasFillRule? fillRule]) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fill)
    void Function(
      _i3.Path2D path, [
      _i3.CanvasFillRule? fillRule,
    ]) $2,
  }) get fill => (
        $1: _fill$1,
        $2: _fill$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/isPointInPath)
  _i2.bool _isPointInPath$1(
    _i2.num x,
    _i2.num y, [
    _i3.CanvasFillRule? fillRule,
  ]) =>
      _i4.callMethod(
        this,
        'isPointInPath',
        [
          x,
          y,
          fillRule?.name ?? _i6.undefined ?? _i6.undefined,
        ],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/isPointInPath)
  _i2.bool _isPointInPath$2(
    _i3.Path2D path,
    _i2.num x,
    _i2.num y, [
    _i3.CanvasFillRule? fillRule,
  ]) =>
      _i4.callMethod(
        this,
        'isPointInPath',
        [
          path,
          x,
          y,
          fillRule?.name ?? _i6.undefined ?? _i6.undefined,
        ],
      );

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/isPointInPath)
    _i2.bool Function(
      _i2.num x,
      _i2.num y, [
      _i3.CanvasFillRule? fillRule,
    ]) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/isPointInPath)
    _i2.bool Function(
      _i3.Path2D path,
      _i2.num x,
      _i2.num y, [
      _i3.CanvasFillRule? fillRule,
    ]) $2,
  }) get isPointInPath => (
        $1: _isPointInPath$1,
        $2: _isPointInPath$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/isPointInStroke)
  _i2.bool _isPointInStroke$1(
    _i2.num x,
    _i2.num y,
  ) =>
      _i4.callMethod(
        this,
        'isPointInStroke',
        [
          x,
          y,
        ],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/isPointInStroke)
  _i2.bool _isPointInStroke$2(
    _i3.Path2D path,
    _i2.num x,
    _i2.num y,
  ) =>
      _i4.callMethod(
        this,
        'isPointInStroke',
        [
          path,
          x,
          y,
        ],
      );

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/isPointInStroke)
    _i2.bool Function(
      _i2.num x,
      _i2.num y,
    ) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/isPointInStroke)
    _i2.bool Function(
      _i3.Path2D path,
      _i2.num x,
      _i2.num y,
    ) $2,
  }) get isPointInStroke => (
        $1: _isPointInStroke$1,
        $2: _isPointInStroke$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/stroke)
  void _stroke$1() {
    _i4.callMethod(
      this,
      'stroke',
      [],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/stroke)
  void _stroke$2(_i3.Path2D path) {
    _i4.callMethod(
      this,
      'stroke',
      [path],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/stroke)
    void Function() $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/stroke)
    void Function(_i3.Path2D path) $2,
  }) get stroke => (
        $1: _stroke$1,
        $2: _stroke$2,
      );
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class CanvasFillStrokeStyles {
  external factory CanvasFillStrokeStyles._({
    _i2.dynamic fillStyle,
    _i2.dynamic strokeStyle,
    _i2.dynamic createConicGradient,
    _i2.dynamic createLinearGradient,
    _i2.dynamic createPattern,
    _i2.dynamic createRadialGradient,
  });

  factory CanvasFillStrokeStyles({
    _i2.Object? fillStyle,
    _i2.Object? strokeStyle,
    _i3.CanvasGradient Function(
      _i2.num,
      _i2.num,
      _i2.num,
    )? createConicGradient,
    _i3.CanvasGradient Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
    )? createLinearGradient,
    _i3.CanvasPattern? Function(
      _i2.Object, [
      _i2.String?,
    ])? createPattern,
    _i3.CanvasGradient Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
    )? createRadialGradient,
  }) =>
      CanvasFillStrokeStyles._(
        fillStyle: fillStyle ?? _i6.undefined,
        strokeStyle: strokeStyle ?? _i6.undefined,
        createConicGradient: createConicGradient == null
            ? null
            : _i4.allowInterop(createConicGradient),
        createLinearGradient: createLinearGradient == null
            ? null
            : _i4.allowInterop(createLinearGradient),
        createPattern: createPattern == null
            ? null
            : _i4.allowInterop((
                p0,
                p1,
              ) =>
                () =>
                    createPattern(
                      p0,
                      p1,
                    ) ??
                    _i6.undefined),
        createRadialGradient: createRadialGradient == null
            ? null
            : _i4.allowInterop(createRadialGradient),
      );
}

extension CanvasFillStrokeStyles$Typings on CanvasFillStrokeStyles {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fillStyle)
  _i2.Object get fillStyle => _i4.getProperty(
        this,
        'fillStyle',
      );
  set fillStyle(_i2.Object value) {
    _i4.setProperty(
      this,
      'fillStyle',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/strokeStyle)
  _i2.Object get strokeStyle => _i4.getProperty(
        this,
        'strokeStyle',
      );
  set strokeStyle(_i2.Object value) {
    _i4.setProperty(
      this,
      'strokeStyle',
      value,
    );
  }

  set createConicGradient(
      _i3.CanvasGradient Function(
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'createConicGradient',
      _i4.allowInterop(value),
    );
  }

  _i3.CanvasGradient Function(
    _i2.num,
    _i2.num,
    _i2.num,
  ) get createConicGradient => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'createConicGradient',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
            ],
          );
  set createLinearGradient(
      _i3.CanvasGradient Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'createLinearGradient',
      _i4.allowInterop(value),
    );
  }

  _i3.CanvasGradient Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
  ) get createLinearGradient => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'createLinearGradient',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
            ],
          );
  set createPattern(
      _i3.CanvasPattern? Function(
        _i2.Object, [
        _i2.String?,
      ]) value) {
    _i4.setProperty(
      this,
      'createPattern',
      _i4.allowInterop((
        p0,
        p1,
      ) =>
          () =>
              value(
                p0,
                p1,
              ) ??
              _i6.undefined),
    );
  }

  _i3.CanvasPattern? Function(
    _i2.Object, [
    _i2.String?,
  ]) get createPattern => (
        _i2.Object p0, [
        _i2.String? p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'createPattern',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
            ],
          );
  set createRadialGradient(
      _i3.CanvasGradient Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'createRadialGradient',
      _i4.allowInterop(value),
    );
  }

  _i3.CanvasGradient Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
  ) get createRadialGradient => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
        _i2.num p4,
        _i2.num p5,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'createRadialGradient',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
              p4,
              p5,
            ],
          );
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class CanvasFilters {
  external factory CanvasFilters._({_i2.dynamic filter});

  factory CanvasFilters({_i2.String? filter}) =>
      CanvasFilters._(filter: filter);
}

extension CanvasFilters$Typings on CanvasFilters {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/filter)
  _i2.String get filter => _i4.getProperty(
        this,
        'filter',
      );
  set filter(_i2.String value) {
    _i4.setProperty(
      this,
      'filter',
      value,
    );
  }
}

/* Source:  */
/// An opaque object describing a gradient. It is returned by the methods CanvasRenderingContext2D.createLinearGradient() or CanvasRenderingContext2D.createRadialGradient().
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasGradient)
@_i1.JS()
@_i1.staticInterop
class CanvasGradient {
  factory CanvasGradient() => _i4.callConstructor(
        _declaredCanvasGradient,
        [],
      );
}

_i2.Object get _declaredCanvasGradient => _i4.getProperty(
      _self,
      'CanvasGradient',
    );

extension CanvasGradient$Typings on CanvasGradient {
  set addColorStop(
      void Function(
        _i2.num,
        _i2.String,
      ) value) {
    _i4.setProperty(
      this,
      'addColorStop',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.String,
  ) get addColorStop => (
        _i2.num p0,
        _i2.String p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'addColorStop',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class CanvasImageData {
  external factory CanvasImageData._({_i2.dynamic getImageData});

  factory CanvasImageData(
          {_i3.ImageData Function(
            _i2.num,
            _i2.num,
            _i2.num,
            _i2.num, [
            _i3.ImageDataSettings?,
          ])? getImageData}) =>
      CanvasImageData._(
          getImageData:
              getImageData == null ? null : _i4.allowInterop(getImageData));
}

extension CanvasImageData$Typings on CanvasImageData {
  set getImageData(
      _i3.ImageData Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num, [
        _i3.ImageDataSettings?,
      ]) value) {
    _i4.setProperty(
      this,
      'getImageData',
      _i4.allowInterop(value),
    );
  }

  _i3.ImageData Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num, [
    _i3.ImageDataSettings?,
  ]) get getImageData => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3, [
        _i3.ImageDataSettings? p4,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'getImageData',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
              p4 ?? _i6.undefined,
            ],
          );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/createImageData)
  _i3.ImageData _createImageData$1(_i3.ImageData imagedata) => _i4.callMethod(
        this,
        'createImageData',
        [imagedata],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/createImageData)
  _i3.ImageData _createImageData$2(
    _i2.num sw,
    _i2.num sh, [
    _i3.ImageDataSettings? settings,
  ]) =>
      _i4.callMethod(
        this,
        'createImageData',
        [
          sw,
          sh,
          settings ?? _i6.undefined,
        ],
      );

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/createImageData)
    _i3.ImageData Function(_i3.ImageData imagedata) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/createImageData)
    _i3.ImageData Function(
      _i2.num sw,
      _i2.num sh, [
      _i3.ImageDataSettings? settings,
    ]) $2,
  }) get createImageData => (
        $1: _createImageData$1,
        $2: _createImageData$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/putImageData)
  void _putImageData$1(
    _i3.ImageData imagedata,
    _i2.num dx,
    _i2.num dy,
  ) {
    _i4.callMethod(
      this,
      'putImageData',
      [
        imagedata,
        dx,
        dy,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/putImageData)
  void _putImageData$2(
    _i3.ImageData imagedata,
    _i2.num dx,
    _i2.num dy,
    _i2.num dirtyX,
    _i2.num dirtyY,
    _i2.num dirtyWidth,
    _i2.num dirtyHeight,
  ) {
    _i4.callMethod(
      this,
      'putImageData',
      [
        imagedata,
        dx,
        dy,
        dirtyX,
        dirtyY,
        dirtyWidth,
        dirtyHeight,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/putImageData)
    void Function(
      _i3.ImageData imagedata,
      _i2.num dx,
      _i2.num dy,
    ) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/putImageData)
    void Function(
      _i3.ImageData imagedata,
      _i2.num dx,
      _i2.num dy,
      _i2.num dirtyX,
      _i2.num dirtyY,
      _i2.num dirtyWidth,
      _i2.num dirtyHeight,
    ) $2,
  }) get putImageData => (
        $1: _putImageData$1,
        $2: _putImageData$2,
      );
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class CanvasImageSmoothing {
  external factory CanvasImageSmoothing._({
    _i2.dynamic imageSmoothingEnabled,
    _i2.dynamic imageSmoothingQuality,
  });

  factory CanvasImageSmoothing({
    _i2.bool? imageSmoothingEnabled,
    _i3.ImageSmoothingQuality? imageSmoothingQuality,
  }) =>
      CanvasImageSmoothing._(
        imageSmoothingEnabled: imageSmoothingEnabled,
        imageSmoothingQuality: imageSmoothingQuality?.name ?? _i6.undefined,
      );
}

extension CanvasImageSmoothing$Typings on CanvasImageSmoothing {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/imageSmoothingEnabled)
  _i2.bool get imageSmoothingEnabled => _i4.getProperty(
        this,
        'imageSmoothingEnabled',
      );
  set imageSmoothingEnabled(_i2.bool value) {
    _i4.setProperty(
      this,
      'imageSmoothingEnabled',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/imageSmoothingQuality)
  _i3.ImageSmoothingQuality get imageSmoothingQuality =>
      _i3.ImageSmoothingQualityOptions.values.byName(_i4.getProperty(
        this,
        'imageSmoothingQuality',
      ));
  set imageSmoothingQuality(_i3.ImageSmoothingQuality value) {
    _i4.setProperty(
      this,
      'imageSmoothingQuality',
      value.name,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class CanvasPath {
  external factory CanvasPath._({
    _i2.dynamic arc,
    _i2.dynamic arcTo,
    _i2.dynamic bezierCurveTo,
    _i2.dynamic closePath,
    _i2.dynamic ellipse,
    _i2.dynamic lineTo,
    _i2.dynamic moveTo,
    _i2.dynamic quadraticCurveTo,
    _i2.dynamic rect,
  });

  factory CanvasPath({
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num, [
      _i2.bool?,
    ])? arc,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
    )? arcTo,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
    )? bezierCurveTo,
    void Function()? closePath,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num, [
      _i2.bool?,
    ])? ellipse,
    void Function(
      _i2.num,
      _i2.num,
    )? lineTo,
    void Function(
      _i2.num,
      _i2.num,
    )? moveTo,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
    )? quadraticCurveTo,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
    )? rect,
  }) =>
      CanvasPath._(
        arc: arc == null ? null : _i4.allowInterop(arc),
        arcTo: arcTo == null ? null : _i4.allowInterop(arcTo),
        bezierCurveTo:
            bezierCurveTo == null ? null : _i4.allowInterop(bezierCurveTo),
        closePath: closePath == null ? null : _i4.allowInterop(closePath),
        ellipse: ellipse == null ? null : _i4.allowInterop(ellipse),
        lineTo: lineTo == null ? null : _i4.allowInterop(lineTo),
        moveTo: moveTo == null ? null : _i4.allowInterop(moveTo),
        quadraticCurveTo: quadraticCurveTo == null
            ? null
            : _i4.allowInterop(quadraticCurveTo),
        rect: rect == null ? null : _i4.allowInterop(rect),
      );
}

extension CanvasPath$Typings on CanvasPath {
  set arc(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num, [
        _i2.bool?,
      ]) value) {
    _i4.setProperty(
      this,
      'arc',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num, [
    _i2.bool?,
  ]) get arc => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
        _i2.num p4, [
        _i2.bool? p5,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'arc',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
              p4,
              p5 ?? _i6.undefined,
            ],
          );
  set arcTo(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'arcTo',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
  ) get arcTo => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
        _i2.num p4,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'arcTo',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
              p4,
            ],
          );
  set bezierCurveTo(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'bezierCurveTo',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
  ) get bezierCurveTo => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
        _i2.num p4,
        _i2.num p5,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'bezierCurveTo',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
              p4,
              p5,
            ],
          );
  set closePath(void Function() value) {
    _i4.setProperty(
      this,
      'closePath',
      _i4.allowInterop(value),
    );
  }

  void Function() get closePath => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'closePath',
        ),
        r'call',
        [this],
      );
  set ellipse(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num, [
        _i2.bool?,
      ]) value) {
    _i4.setProperty(
      this,
      'ellipse',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num, [
    _i2.bool?,
  ]) get ellipse => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
        _i2.num p4,
        _i2.num p5,
        _i2.num p6, [
        _i2.bool? p7,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'ellipse',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
              p4,
              p5,
              p6,
              p7 ?? _i6.undefined,
            ],
          );
  set lineTo(
      void Function(
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'lineTo',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
  ) get lineTo => (
        _i2.num p0,
        _i2.num p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'lineTo',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set moveTo(
      void Function(
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'moveTo',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
  ) get moveTo => (
        _i2.num p0,
        _i2.num p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'moveTo',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set quadraticCurveTo(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'quadraticCurveTo',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
  ) get quadraticCurveTo => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'quadraticCurveTo',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
            ],
          );
  set rect(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'rect',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
  ) get rect => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'rect',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
            ],
          );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/roundRect)
  void _roundRect$1(
    _i2.num x,
    _i2.num y,
    _i2.num w,
    _i2.num h, [
    _i2.Object? radii,
  ]) {
    _i4.callMethod(
      this,
      'roundRect',
      [
        x,
        y,
        w,
        h,
        radii ?? _i6.undefined,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/roundRect)
  void _roundRect$2(
    _i2.num x,
    _i2.num y,
    _i2.num w,
    _i2.num h, [
    _i2.Object? radii,
  ]) {
    _i4.callMethod(
      this,
      'roundRect',
      [
        x,
        y,
        w,
        h,
        radii ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/roundRect)
    void Function(
      _i2.num x,
      _i2.num y,
      _i2.num w,
      _i2.num h, [
      _i2.Object? radii,
    ]) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/roundRect)
    void Function(
      _i2.num x,
      _i2.num y,
      _i2.num w,
      _i2.num h, [
      _i2.Object? radii,
    ]) $2,
  }) get roundRect => (
        $1: _roundRect$1,
        $2: _roundRect$2,
      );
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class CanvasPathDrawingStyles {
  external factory CanvasPathDrawingStyles._({
    _i2.dynamic lineCap,
    _i2.dynamic lineDashOffset,
    _i2.dynamic lineJoin,
    _i2.dynamic lineWidth,
    _i2.dynamic miterLimit,
    _i2.dynamic getLineDash,
  });

  factory CanvasPathDrawingStyles({
    _i3.CanvasLineCap? lineCap,
    _i2.num? lineDashOffset,
    _i3.CanvasLineJoin? lineJoin,
    _i2.num? lineWidth,
    _i2.num? miterLimit,
    _i2.List<_i2.num> Function()? getLineDash,
  }) =>
      CanvasPathDrawingStyles._(
        lineCap: lineCap?.name ?? _i6.undefined,
        lineDashOffset: lineDashOffset,
        lineJoin: lineJoin?.name ?? _i6.undefined,
        lineWidth: lineWidth,
        miterLimit: miterLimit,
        getLineDash: getLineDash == null ? null : _i4.allowInterop(getLineDash),
      );
}

extension CanvasPathDrawingStyles$Typings on CanvasPathDrawingStyles {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineCap)
  _i3.CanvasLineCap get lineCap =>
      _i3.CanvasLineCapOptions.values.byName(_i4.getProperty(
        this,
        'lineCap',
      ));
  set lineCap(_i3.CanvasLineCap value) {
    _i4.setProperty(
      this,
      'lineCap',
      value.name,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineDashOffset)
  _i2.num get lineDashOffset => _i4.getProperty(
        this,
        'lineDashOffset',
      );
  set lineDashOffset(_i2.num value) {
    _i4.setProperty(
      this,
      'lineDashOffset',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineJoin)
  _i3.CanvasLineJoin get lineJoin =>
      _i3.CanvasLineJoinOptions.values.byName(_i4.getProperty(
        this,
        'lineJoin',
      ));
  set lineJoin(_i3.CanvasLineJoin value) {
    _i4.setProperty(
      this,
      'lineJoin',
      value.name,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineWidth)
  _i2.num get lineWidth => _i4.getProperty(
        this,
        'lineWidth',
      );
  set lineWidth(_i2.num value) {
    _i4.setProperty(
      this,
      'lineWidth',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/miterLimit)
  _i2.num get miterLimit => _i4.getProperty(
        this,
        'miterLimit',
      );
  set miterLimit(_i2.num value) {
    _i4.setProperty(
      this,
      'miterLimit',
      value,
    );
  }

  set getLineDash(_i2.List<_i2.num> Function() value) {
    _i4.setProperty(
      this,
      'getLineDash',
      _i4.allowInterop(value),
    );
  }

  _i2.List<_i2.num> Function() get getLineDash => () => ((_i4.callMethod(
        _i4.getProperty(
          this,
          'getLineDash',
        ),
        r'call',
        [this],
      )) as _i2.List)
          .cast();

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setLineDash)
  void _setLineDash$1(_i2.List<_i2.num> segments) {
    _i4.callMethod(
      this,
      'setLineDash',
      [segments],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setLineDash)
  void _setLineDash$2(_i10.Iterable<_i2.num> segments) {
    _i4.callMethod(
      this,
      'setLineDash',
      [segments],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setLineDash)
    void Function(_i2.List<_i2.num> segments) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setLineDash)
    void Function(_i10.Iterable<_i2.num> segments) $2,
  }) get setLineDash => (
        $1: _setLineDash$1,
        $2: _setLineDash$2,
      );
}

/* Source:  */
/// An opaque object describing a pattern, based on an image, a canvas, or a video, created by the CanvasRenderingContext2D.createPattern() method.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasPattern)
@_i1.JS()
@_i1.staticInterop
class CanvasPattern {
  factory CanvasPattern() => _i4.callConstructor(
        _declaredCanvasPattern,
        [],
      );
}

_i2.Object get _declaredCanvasPattern => _i4.getProperty(
      _self,
      'CanvasPattern',
    );

extension CanvasPattern$Typings on CanvasPattern {
  set setTransform(void Function([_i3.DOMMatrix2DInit?]) value) {
    _i4.setProperty(
      this,
      'setTransform',
      _i4.allowInterop(value),
    );
  }

  void Function([_i3.DOMMatrix2DInit?]) get setTransform =>
      ([_i3.DOMMatrix2DInit? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'setTransform',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class CanvasRect {
  external factory CanvasRect._({
    _i2.dynamic clearRect,
    _i2.dynamic fillRect,
    _i2.dynamic strokeRect,
  });

  factory CanvasRect({
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
    )? clearRect,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
    )? fillRect,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
    )? strokeRect,
  }) =>
      CanvasRect._(
        clearRect: clearRect == null ? null : _i4.allowInterop(clearRect),
        fillRect: fillRect == null ? null : _i4.allowInterop(fillRect),
        strokeRect: strokeRect == null ? null : _i4.allowInterop(strokeRect),
      );
}

extension CanvasRect$Typings on CanvasRect {
  set clearRect(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'clearRect',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
  ) get clearRect => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'clearRect',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
            ],
          );
  set fillRect(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'fillRect',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
  ) get fillRect => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'fillRect',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
            ],
          );
  set strokeRect(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'strokeRect',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
  ) get strokeRect => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'strokeRect',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
            ],
          );
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class CanvasShadowStyles {
  external factory CanvasShadowStyles._({
    _i2.dynamic shadowBlur,
    _i2.dynamic shadowColor,
    _i2.dynamic shadowOffsetX,
    _i2.dynamic shadowOffsetY,
  });

  factory CanvasShadowStyles({
    _i2.num? shadowBlur,
    _i2.String? shadowColor,
    _i2.num? shadowOffsetX,
    _i2.num? shadowOffsetY,
  }) =>
      CanvasShadowStyles._(
        shadowBlur: shadowBlur,
        shadowColor: shadowColor,
        shadowOffsetX: shadowOffsetX,
        shadowOffsetY: shadowOffsetY,
      );
}

extension CanvasShadowStyles$Typings on CanvasShadowStyles {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/shadowBlur)
  _i2.num get shadowBlur => _i4.getProperty(
        this,
        'shadowBlur',
      );
  set shadowBlur(_i2.num value) {
    _i4.setProperty(
      this,
      'shadowBlur',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/shadowColor)
  _i2.String get shadowColor => _i4.getProperty(
        this,
        'shadowColor',
      );
  set shadowColor(_i2.String value) {
    _i4.setProperty(
      this,
      'shadowColor',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/shadowOffsetX)
  _i2.num get shadowOffsetX => _i4.getProperty(
        this,
        'shadowOffsetX',
      );
  set shadowOffsetX(_i2.num value) {
    _i4.setProperty(
      this,
      'shadowOffsetX',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/shadowOffsetY)
  _i2.num get shadowOffsetY => _i4.getProperty(
        this,
        'shadowOffsetY',
      );
  set shadowOffsetY(_i2.num value) {
    _i4.setProperty(
      this,
      'shadowOffsetY',
      value,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class CanvasState {
  external factory CanvasState._({
    _i2.dynamic reset,
    _i2.dynamic restore,
    _i2.dynamic save,
  });

  factory CanvasState({
    void Function()? reset,
    void Function()? restore,
    void Function()? save,
  }) =>
      CanvasState._(
        reset: reset == null ? null : _i4.allowInterop(reset),
        restore: restore == null ? null : _i4.allowInterop(restore),
        save: save == null ? null : _i4.allowInterop(save),
      );
}

extension CanvasState$Typings on CanvasState {
  set reset(void Function() value) {
    _i4.setProperty(
      this,
      'reset',
      _i4.allowInterop(value),
    );
  }

  void Function() get reset => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'reset',
        ),
        r'call',
        [this],
      );
  set restore(void Function() value) {
    _i4.setProperty(
      this,
      'restore',
      _i4.allowInterop(value),
    );
  }

  void Function() get restore => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'restore',
        ),
        r'call',
        [this],
      );
  set save(void Function() value) {
    _i4.setProperty(
      this,
      'save',
      _i4.allowInterop(value),
    );
  }

  void Function() get save => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'save',
        ),
        r'call',
        [this],
      );
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class CanvasText {
  external factory CanvasText._({
    _i2.dynamic fillText,
    _i2.dynamic measureText,
    _i2.dynamic strokeText,
  });

  factory CanvasText({
    void Function(
      _i2.String,
      _i2.num,
      _i2.num, [
      _i2.num?,
    ])? fillText,
    _i3.TextMetrics Function(_i2.String)? measureText,
    void Function(
      _i2.String,
      _i2.num,
      _i2.num, [
      _i2.num?,
    ])? strokeText,
  }) =>
      CanvasText._(
        fillText: fillText == null ? null : _i4.allowInterop(fillText),
        measureText: measureText == null ? null : _i4.allowInterop(measureText),
        strokeText: strokeText == null ? null : _i4.allowInterop(strokeText),
      );
}

extension CanvasText$Typings on CanvasText {
  set fillText(
      void Function(
        _i2.String,
        _i2.num,
        _i2.num, [
        _i2.num?,
      ]) value) {
    _i4.setProperty(
      this,
      'fillText',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.String,
    _i2.num,
    _i2.num, [
    _i2.num?,
  ]) get fillText => (
        _i2.String p0,
        _i2.num p1,
        _i2.num p2, [
        _i2.num? p3,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'fillText',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3 ?? _i6.undefined,
            ],
          );
  set measureText(_i3.TextMetrics Function(_i2.String) value) {
    _i4.setProperty(
      this,
      'measureText',
      _i4.allowInterop(value),
    );
  }

  _i3.TextMetrics Function(_i2.String) get measureText =>
      (_i2.String p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'measureText',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set strokeText(
      void Function(
        _i2.String,
        _i2.num,
        _i2.num, [
        _i2.num?,
      ]) value) {
    _i4.setProperty(
      this,
      'strokeText',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.String,
    _i2.num,
    _i2.num, [
    _i2.num?,
  ]) get strokeText => (
        _i2.String p0,
        _i2.num p1,
        _i2.num p2, [
        _i2.num? p3,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'strokeText',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3 ?? _i6.undefined,
            ],
          );
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class CanvasTextDrawingStyles {
  external factory CanvasTextDrawingStyles._({
    _i2.dynamic direction,
    _i2.dynamic font,
    _i2.dynamic fontKerning,
    _i2.dynamic textAlign,
    _i2.dynamic textBaseline,
  });

  factory CanvasTextDrawingStyles({
    _i3.CanvasDirection? direction,
    _i2.String? font,
    _i3.CanvasFontKerning? fontKerning,
    _i3.CanvasTextAlign? textAlign,
    _i3.CanvasTextBaseline? textBaseline,
  }) =>
      CanvasTextDrawingStyles._(
        direction: direction?.name ?? _i6.undefined,
        font: font,
        fontKerning: fontKerning?.name ?? _i6.undefined,
        textAlign: textAlign?.name ?? _i6.undefined,
        textBaseline: textBaseline?.name ?? _i6.undefined,
      );
}

extension CanvasTextDrawingStyles$Typings on CanvasTextDrawingStyles {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/direction)
  _i3.CanvasDirection get direction =>
      _i3.CanvasDirectionOptions.values.byName(_i4.getProperty(
        this,
        'direction',
      ));
  set direction(_i3.CanvasDirection value) {
    _i4.setProperty(
      this,
      'direction',
      value.name,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/font)
  _i2.String get font => _i4.getProperty(
        this,
        'font',
      );
  set font(_i2.String value) {
    _i4.setProperty(
      this,
      'font',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fontKerning)
  _i3.CanvasFontKerning get fontKerning =>
      _i3.CanvasFontKerningOptions.values.byName(_i4.getProperty(
        this,
        'fontKerning',
      ));
  set fontKerning(_i3.CanvasFontKerning value) {
    _i4.setProperty(
      this,
      'fontKerning',
      value.name,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/textAlign)
  _i3.CanvasTextAlign get textAlign =>
      _i3.CanvasTextAlignOptions.values.byName(_i4.getProperty(
        this,
        'textAlign',
      ));
  set textAlign(_i3.CanvasTextAlign value) {
    _i4.setProperty(
      this,
      'textAlign',
      value.name,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/textBaseline)
  _i3.CanvasTextBaseline get textBaseline =>
      _i3.CanvasTextBaselineOptions.values.byName(_i4.getProperty(
        this,
        'textBaseline',
      ));
  set textBaseline(_i3.CanvasTextBaseline value) {
    _i4.setProperty(
      this,
      'textBaseline',
      value.name,
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class CanvasTransform {
  external factory CanvasTransform._({
    _i2.dynamic getTransform,
    _i2.dynamic resetTransform,
    _i2.dynamic rotate,
    _i2.dynamic scale,
    _i2.dynamic transform,
    _i2.dynamic translate,
  });

  factory CanvasTransform({
    _i3.DOMMatrix Function()? getTransform,
    void Function()? resetTransform,
    void Function(_i2.num)? rotate,
    void Function(
      _i2.num,
      _i2.num,
    )? scale,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
    )? transform,
    void Function(
      _i2.num,
      _i2.num,
    )? translate,
  }) =>
      CanvasTransform._(
        getTransform:
            getTransform == null ? null : _i4.allowInterop(getTransform),
        resetTransform:
            resetTransform == null ? null : _i4.allowInterop(resetTransform),
        rotate: rotate == null ? null : _i4.allowInterop(rotate),
        scale: scale == null ? null : _i4.allowInterop(scale),
        transform: transform == null ? null : _i4.allowInterop(transform),
        translate: translate == null ? null : _i4.allowInterop(translate),
      );
}

extension CanvasTransform$Typings on CanvasTransform {
  set getTransform(_i3.DOMMatrix Function() value) {
    _i4.setProperty(
      this,
      'getTransform',
      _i4.allowInterop(value),
    );
  }

  _i3.DOMMatrix Function() get getTransform => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'getTransform',
        ),
        r'call',
        [this],
      );
  set resetTransform(void Function() value) {
    _i4.setProperty(
      this,
      'resetTransform',
      _i4.allowInterop(value),
    );
  }

  void Function() get resetTransform => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'resetTransform',
        ),
        r'call',
        [this],
      );
  set rotate(void Function(_i2.num) value) {
    _i4.setProperty(
      this,
      'rotate',
      _i4.allowInterop(value),
    );
  }

  void Function(_i2.num) get rotate => (_i2.num p0) => _i4.callMethod(
        _i4.getProperty(
          this,
          'rotate',
        ),
        r'call',
        [
          this,
          p0,
        ],
      );
  set scale(
      void Function(
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'scale',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
  ) get scale => (
        _i2.num p0,
        _i2.num p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'scale',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set transform(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'transform',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
  ) get transform => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
        _i2.num p4,
        _i2.num p5,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'transform',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
              p4,
              p5,
            ],
          );
  set translate(
      void Function(
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'translate',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
  ) get translate => (
        _i2.num p0,
        _i2.num p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'translate',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setTransform)
  void _setTransform$1([_i3.DOMMatrix2DInit? transform]) {
    _i4.callMethod(
      this,
      'setTransform',
      [transform ?? _i6.undefined],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setTransform)
  void _setTransform$2(
    _i2.num a,
    _i2.num b,
    _i2.num c,
    _i2.num d,
    _i2.num e,
    _i2.num f,
  ) {
    _i4.callMethod(
      this,
      'setTransform',
      [
        a,
        b,
        c,
        d,
        e,
        f,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setTransform)
    void Function([_i3.DOMMatrix2DInit? transform]) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setTransform)
    void Function(
      _i2.num a,
      _i2.num b,
      _i2.num c,
      _i2.num d,
      _i2.num e,
      _i2.num f,
    ) $2,
  }) get setTransform => (
        $1: _setTransform$1,
        $2: _setTransform$2,
      );
}

/* Source:  */
/// The Client interface represents an executable context such as a Worker, or a SharedWorker. Window clients are represented by the more-specific WindowClient. You can get Client/WindowClient objects from methods such as Clients.matchAll() and Clients.get().
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Client)
@_i1.JS()
@_i1.staticInterop
class Client {
  factory Client() => _i4.callConstructor(
        _declaredClient,
        [],
      );
}

_i2.Object get _declaredClient => _i4.getProperty(
      _self,
      'Client',
    );

extension Client$Typings on Client {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Client/frameType)
  _i3.FrameType get frameType =>
      _i3.FrameTypeOptions.values.byName(_i4.getProperty(
        this,
        'frameType',
      ));

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Client/id)
  _i2.String get id => _i4.getProperty(
        this,
        'id',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Client/type)
  _i3.ClientTypes get type =>
      _i3.ClientTypesOptions.values.byName(_i4.getProperty(
        this,
        'type',
      ));

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Client/url)
  _i2.String get url => _i4.getProperty(
        this,
        'url',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Client/postMessage)
  void _postMessage$1(
    _i2.List<_i2.Object> transfer, [
    _i2.dynamic message,
  ]) {
    _i4.callMethod(
      this,
      'postMessage',
      [
        message,
        transfer,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Client/postMessage)
  void _postMessage$2([
    _i2.dynamic message,
    _i3.StructuredSerializeOptions? options,
  ]) {
    _i4.callMethod(
      this,
      'postMessage',
      [
        message,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Client/postMessage)
    void Function(
      _i2.List<_i2.Object> transfer, [
      _i2.dynamic message,
    ]) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Client/postMessage)
    void Function([
      _i2.dynamic message,
      _i3.StructuredSerializeOptions? options,
    ]) $2,
  }) get postMessage => (
        $1: _postMessage$1,
        $2: _postMessage$2,
      );
}

/* Source:  */
/// Provides access to Client objects. Access it via self.clients within a service worker.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Clients)
@_i1.JS()
@_i1.staticInterop
class Clients {
  factory Clients() => _i4.callConstructor(
        _declaredClients,
        [],
      );
}

_i2.Object get _declaredClients => _i4.getProperty(
      _self,
      'Clients',
    );

extension Clients$Typings on Clients {
  set claim(_i2.Future<void> Function() value) {
    _i4.setProperty(
      this,
      'claim',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<void> Function() get claim =>
      () => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'claim',
            ),
            r'call',
            [this],
          ));
  set get(_i2.Future<_i3.Client?> Function(_i2.String) value) {
    _i4.setProperty(
      this,
      'get',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i3.Client?> Function(_i2.String) get get =>
      (_i2.String p0) => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'get',
            ),
            r'call',
            [
              this,
              p0,
            ],
          ));
  set matchAll(
      _i2.Future<_i9.ReadonlyArray<_i2.dynamic>>
              Function<T extends _i3.ClientQueryOptions>([T?])
          value) {
    _i4.setProperty(
      this,
      'matchAll',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i9.ReadonlyArray<_i2.dynamic>>
          Function<T extends _i3.ClientQueryOptions>([T?])
      get matchAll => <T extends _i3.ClientQueryOptions>([T? p0]) =>
          _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'matchAll',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          ));
  set openWindow(_i2.Future<_i3.WindowClient?> Function(_i2.Object) value) {
    _i4.setProperty(
      this,
      'openWindow',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i3.WindowClient?> Function(_i2.Object) get openWindow =>
      (_i2.Object p0) => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'openWindow',
            ),
            r'call',
            [
              this,
              p0,
            ],
          ));
}

/* Source:  */
/// A CloseEvent is sent to clients using WebSockets when the connection is closed. This is delivered to the listener indicated by the WebSocket object's onclose attribute.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CloseEvent)
@_i1.JS()
@_i1.staticInterop
class CloseEvent implements _i3.Event {
  factory CloseEvent(
    _i2.String type, [
    _i3.CloseEventInit? eventInitDict,
  ]) =>
      _i4.callConstructor(
        _declaredCloseEvent,
        [
          type,
          eventInitDict ?? _i6.undefined,
        ],
      );
}

_i2.Object get _declaredCloseEvent => _i4.getProperty(
      _self,
      'CloseEvent',
    );

extension CloseEvent$Typings on CloseEvent {
  /// Returns the WebSocket connection close code provided by the server.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CloseEvent/code)
  _i2.num get code => _i4.getProperty(
        this,
        'code',
      );

  /// Returns the WebSocket connection close reason provided by the server.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CloseEvent/reason)
  _i2.String get reason => _i4.getProperty(
        this,
        'reason',
      );

  /// Returns true if the connection closed cleanly; false otherwise.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CloseEvent/wasClean)
  _i2.bool get wasClean => _i4.getProperty(
        this,
        'wasClean',
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CompressionStream)
@_i1.JS()
@_i1.staticInterop
class CompressionStream implements _i3.GenericTransformStream {
  factory CompressionStream(_i3.CompressionFormat format) =>
      _i4.callConstructor(
        _declaredCompressionStream,
        [format.name],
      );
}

_i2.Object get _declaredCompressionStream => _i4.getProperty(
      _self,
      'CompressionStream',
    ); /* Source:  */

/// This Streams API interface provides a built-in byte length queuing strategy that can be used when constructing streams.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CountQueuingStrategy)
@_i1.JS()
@_i1.staticInterop
class CountQueuingStrategy implements _i3.QueuingStrategy<_i2.dynamic> {
  factory CountQueuingStrategy(_i3.QueuingStrategyInit init) =>
      _i4.callConstructor(
        _declaredCountQueuingStrategy,
        [init],
      );
}

_i2.Object get _declaredCountQueuingStrategy => _i4.getProperty(
      _self,
      'CountQueuingStrategy',
    );

extension CountQueuingStrategy$Typings on CountQueuingStrategy {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CountQueuingStrategy/highWaterMark)
  _i2.num get highWaterMark => _i4.getProperty(
        this,
        'highWaterMark',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CountQueuingStrategy/size)
  _i3.QueuingStrategySize<_i2.dynamic> get size => _i4.getProperty(
        this,
        'size',
      );
}

/* Source:  */
/// Basic cryptography features available in the current context. It allows access to a cryptographically strong random number generator and to cryptographic primitives.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Crypto)
@_i1.JS()
@_i1.staticInterop
class Crypto {
  factory Crypto() => _i4.callConstructor(
        _declaredCrypto,
        [],
      );
}

_i2.Object get _declaredCrypto => _i4.getProperty(
      _self,
      'Crypto',
    );

extension Crypto$Typings on Crypto {
  /// Available only in secure contexts.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Crypto/subtle)
  _i3.SubtleCrypto get subtle => _i4.getProperty(
        this,
        'subtle',
      );
  set getRandomValues(T Function<T extends _i9.ArrayBufferView?>(T) value) {
    _i4.setProperty(
      this,
      'getRandomValues',
      _i4.allowInterop(value),
    );
  }

  T Function<T extends _i9.ArrayBufferView?>(T) get getRandomValues =>
      <T extends _i9.ArrayBufferView?>(T p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'getRandomValues',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set randomUUID(_i2.String Function() value) {
    _i4.setProperty(
      this,
      'randomUUID',
      _i4.allowInterop(value),
    );
  }

  _i2.String Function() get randomUUID => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'randomUUID',
        ),
        r'call',
        [this],
      );
}

/* Source:  */
/// The CryptoKey dictionary of the Web Crypto API represents a cryptographic key.
/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CryptoKey)
@_i1.JS()
@_i1.staticInterop
class CryptoKey {
  factory CryptoKey() => _i4.callConstructor(
        _declaredCryptoKey,
        [],
      );
}

_i2.Object get _declaredCryptoKey => _i4.getProperty(
      _self,
      'CryptoKey',
    );

extension CryptoKey$Typings on CryptoKey {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CryptoKey/algorithm)
  _i3.KeyAlgorithm get algorithm => _i4.getProperty(
        this,
        'algorithm',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CryptoKey/extractable)
  _i2.bool get extractable => _i4.getProperty(
        this,
        'extractable',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CryptoKey/type)
  _i3.KeyType get type => _i3.KeyTypeOptions.values.byName(_i4.getProperty(
        this,
        'type',
      ));

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CryptoKey/usages)
  _i2.List<_i3.KeyUsage> get usages => ((_i4.getProperty(
        this,
        'usages',
      )) as _i2.List)
          .cast()
          .map((i) => _i3.KeyUsageOptions.values.byName(i))
          .toList();
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CustomEvent)
@_i1.JS()
@_i1.staticInterop
class CustomEvent<T> implements _i3.Event {
  factory CustomEvent(
    _i2.String type, [
    _i3.CustomEventInit<T>? eventInitDict,
  ]) =>
      _i4.callConstructor(
        _declaredCustomEvent,
        [
          type,
          eventInitDict ?? _i6.undefined,
        ],
      );
}

_i2.Object get _declaredCustomEvent => _i4.getProperty(
      _self,
      'CustomEvent',
    );

extension CustomEvent$Typings<T> on CustomEvent<T> {
  /// Returns any custom data event was created with. Typically used for synthetic events.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CustomEvent/detail)
  T get detail => _i4.getProperty(
        this,
        'detail',
      );
  set initCustomEvent(
      void Function(
        _i2.String, [
        _i2.bool?,
        _i2.bool?,
        T?,
      ]) value) {
    _i4.setProperty(
      this,
      'initCustomEvent',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.String, [
    _i2.bool?,
    _i2.bool?,
    T?,
  ]) get initCustomEvent => (
        _i2.String p0, [
        _i2.bool? p1,
        _i2.bool? p2,
        T? p3,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'initCustomEvent',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
              p2 ?? _i6.undefined,
              p3 ?? _i6.undefined,
            ],
          );
}

/* Source:  */
/// An abnormal event (called an exception) which occurs as a result of calling a method or accessing a property of a web API.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMException)
@_i1.JS()
@_i1.staticInterop
class DOMException implements _i9.Error {
  factory DOMException([
    _i2.String? message,
    _i2.String? name,
  ]) =>
      _i4.callConstructor(
        _declaredDOMException,
        [
          message ?? _i6.undefined,
          name ?? _i6.undefined,
        ],
      );

  static _i2.num get indexSizeErr => _i4.getProperty(
        _declaredDOMException,
        'INDEX_SIZE_ERR',
      );
  static _i2.num get domstringSizeErr => _i4.getProperty(
        _declaredDOMException,
        'DOMSTRING_SIZE_ERR',
      );
  static _i2.num get hierarchyRequestErr => _i4.getProperty(
        _declaredDOMException,
        'HIERARCHY_REQUEST_ERR',
      );
  static _i2.num get wrongDocumentErr => _i4.getProperty(
        _declaredDOMException,
        'WRONG_DOCUMENT_ERR',
      );
  static _i2.num get invalidCharacterErr => _i4.getProperty(
        _declaredDOMException,
        'INVALID_CHARACTER_ERR',
      );
  static _i2.num get noDataAllowedErr => _i4.getProperty(
        _declaredDOMException,
        'NO_DATA_ALLOWED_ERR',
      );
  static _i2.num get noModificationAllowedErr => _i4.getProperty(
        _declaredDOMException,
        'NO_MODIFICATION_ALLOWED_ERR',
      );
  static _i2.num get notFoundErr => _i4.getProperty(
        _declaredDOMException,
        'NOT_FOUND_ERR',
      );
  static _i2.num get notSupportedErr => _i4.getProperty(
        _declaredDOMException,
        'NOT_SUPPORTED_ERR',
      );
  static _i2.num get inuseAttributeErr => _i4.getProperty(
        _declaredDOMException,
        'INUSE_ATTRIBUTE_ERR',
      );
  static _i2.num get invalidStateErr => _i4.getProperty(
        _declaredDOMException,
        'INVALID_STATE_ERR',
      );
  static _i2.num get syntaxErr => _i4.getProperty(
        _declaredDOMException,
        'SYNTAX_ERR',
      );
  static _i2.num get invalidModificationErr => _i4.getProperty(
        _declaredDOMException,
        'INVALID_MODIFICATION_ERR',
      );
  static _i2.num get namespaceErr => _i4.getProperty(
        _declaredDOMException,
        'NAMESPACE_ERR',
      );
  static _i2.num get invalidAccessErr => _i4.getProperty(
        _declaredDOMException,
        'INVALID_ACCESS_ERR',
      );
  static _i2.num get validationErr => _i4.getProperty(
        _declaredDOMException,
        'VALIDATION_ERR',
      );
  static _i2.num get typeMismatchErr => _i4.getProperty(
        _declaredDOMException,
        'TYPE_MISMATCH_ERR',
      );
  static _i2.num get securityErr => _i4.getProperty(
        _declaredDOMException,
        'SECURITY_ERR',
      );
  static _i2.num get networkErr => _i4.getProperty(
        _declaredDOMException,
        'NETWORK_ERR',
      );
  static _i2.num get abortErr => _i4.getProperty(
        _declaredDOMException,
        'ABORT_ERR',
      );
  static _i2.num get urlMismatchErr => _i4.getProperty(
        _declaredDOMException,
        'URL_MISMATCH_ERR',
      );
  static _i2.num get quotaExceededErr => _i4.getProperty(
        _declaredDOMException,
        'QUOTA_EXCEEDED_ERR',
      );
  static _i2.num get timeoutErr => _i4.getProperty(
        _declaredDOMException,
        'TIMEOUT_ERR',
      );
  static _i2.num get invalidNodeTypeErr => _i4.getProperty(
        _declaredDOMException,
        'INVALID_NODE_TYPE_ERR',
      );
  static _i2.num get dataCloneErr => _i4.getProperty(
        _declaredDOMException,
        'DATA_CLONE_ERR',
      );
}

_i2.Object get _declaredDOMException => _i4.getProperty(
      _self,
      'DOMException',
    );

extension DOMException$Typings on DOMException {
  _i2.num get code => _i4.getProperty(
        this,
        'code',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMException/message)
  _i2.String get message => _i4.getProperty(
        this,
        'message',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMException/name)
  _i2.String get name => _i4.getProperty(
        this,
        'name',
      );
  _i2.num get indexSizeErr => _i4.getProperty(
        this,
        'INDEX_SIZE_ERR',
      );
  _i2.num get domstringSizeErr => _i4.getProperty(
        this,
        'DOMSTRING_SIZE_ERR',
      );
  _i2.num get hierarchyRequestErr => _i4.getProperty(
        this,
        'HIERARCHY_REQUEST_ERR',
      );
  _i2.num get wrongDocumentErr => _i4.getProperty(
        this,
        'WRONG_DOCUMENT_ERR',
      );
  _i2.num get invalidCharacterErr => _i4.getProperty(
        this,
        'INVALID_CHARACTER_ERR',
      );
  _i2.num get noDataAllowedErr => _i4.getProperty(
        this,
        'NO_DATA_ALLOWED_ERR',
      );
  _i2.num get noModificationAllowedErr => _i4.getProperty(
        this,
        'NO_MODIFICATION_ALLOWED_ERR',
      );
  _i2.num get notFoundErr => _i4.getProperty(
        this,
        'NOT_FOUND_ERR',
      );
  _i2.num get notSupportedErr => _i4.getProperty(
        this,
        'NOT_SUPPORTED_ERR',
      );
  _i2.num get inuseAttributeErr => _i4.getProperty(
        this,
        'INUSE_ATTRIBUTE_ERR',
      );
  _i2.num get invalidStateErr => _i4.getProperty(
        this,
        'INVALID_STATE_ERR',
      );
  _i2.num get syntaxErr => _i4.getProperty(
        this,
        'SYNTAX_ERR',
      );
  _i2.num get invalidModificationErr => _i4.getProperty(
        this,
        'INVALID_MODIFICATION_ERR',
      );
  _i2.num get namespaceErr => _i4.getProperty(
        this,
        'NAMESPACE_ERR',
      );
  _i2.num get invalidAccessErr => _i4.getProperty(
        this,
        'INVALID_ACCESS_ERR',
      );
  _i2.num get validationErr => _i4.getProperty(
        this,
        'VALIDATION_ERR',
      );
  _i2.num get typeMismatchErr => _i4.getProperty(
        this,
        'TYPE_MISMATCH_ERR',
      );
  _i2.num get securityErr => _i4.getProperty(
        this,
        'SECURITY_ERR',
      );
  _i2.num get networkErr => _i4.getProperty(
        this,
        'NETWORK_ERR',
      );
  _i2.num get abortErr => _i4.getProperty(
        this,
        'ABORT_ERR',
      );
  _i2.num get urlMismatchErr => _i4.getProperty(
        this,
        'URL_MISMATCH_ERR',
      );
  _i2.num get quotaExceededErr => _i4.getProperty(
        this,
        'QUOTA_EXCEEDED_ERR',
      );
  _i2.num get timeoutErr => _i4.getProperty(
        this,
        'TIMEOUT_ERR',
      );
  _i2.num get invalidNodeTypeErr => _i4.getProperty(
        this,
        'INVALID_NODE_TYPE_ERR',
      );
  _i2.num get dataCloneErr => _i4.getProperty(
        this,
        'DATA_CLONE_ERR',
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix)
@_i1.JS()
@_i1.staticInterop
class DOMMatrix implements _i3.DOMMatrixReadOnly {
  factory DOMMatrix([_i2.Object? init]) => _i4.callConstructor(
        _declaredDOMMatrix,
        [init ?? _i6.undefined],
      );

  static set fromFloat32Array(_i3.DOMMatrix Function(_i5.Float32List) value) {
    _i4.setProperty(
      _i8.target691,
      'fromFloat32Array',
      _i4.allowInterop(value),
    );
  }

  static _i3.DOMMatrix Function(_i5.Float32List) get fromFloat32Array =>
      (_i5.Float32List p0) => _i4.callMethod(
            _i4.getProperty(
              _i8.target691,
              'fromFloat32Array',
            ),
            r'call',
            [
              _i8.target691,
              p0,
            ],
          );
  static set fromFloat64Array(_i3.DOMMatrix Function(_i5.Float64List) value) {
    _i4.setProperty(
      _i8.target691,
      'fromFloat64Array',
      _i4.allowInterop(value),
    );
  }

  static _i3.DOMMatrix Function(_i5.Float64List) get fromFloat64Array =>
      (_i5.Float64List p0) => _i4.callMethod(
            _i4.getProperty(
              _i8.target691,
              'fromFloat64Array',
            ),
            r'call',
            [
              _i8.target691,
              p0,
            ],
          );
  static set fromMatrix(_i3.DOMMatrix Function([_i3.DOMMatrixInit?]) value) {
    _i4.setProperty(
      _i8.target691,
      'fromMatrix',
      _i4.allowInterop(value),
    );
  }

  static _i3.DOMMatrix Function([_i3.DOMMatrixInit?]) get fromMatrix =>
      ([_i3.DOMMatrixInit? p0]) => _i4.callMethod(
            _i4.getProperty(
              _i8.target691,
              'fromMatrix',
            ),
            r'call',
            [
              _i8.target691,
              p0 ?? _i6.undefined,
            ],
          );
}

_i2.Object get _declaredDOMMatrix => _i4.getProperty(
      _self,
      'DOMMatrix',
    );

extension DOMMatrix$Typings on DOMMatrix {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/a)
  _i2.num get a => _i4.getProperty(
        this,
        'a',
      );
  set a(_i2.num value) {
    _i4.setProperty(
      this,
      'a',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/b)
  _i2.num get b => _i4.getProperty(
        this,
        'b',
      );
  set b(_i2.num value) {
    _i4.setProperty(
      this,
      'b',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/c)
  _i2.num get c => _i4.getProperty(
        this,
        'c',
      );
  set c(_i2.num value) {
    _i4.setProperty(
      this,
      'c',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/d)
  _i2.num get d => _i4.getProperty(
        this,
        'd',
      );
  set d(_i2.num value) {
    _i4.setProperty(
      this,
      'd',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/e)
  _i2.num get e => _i4.getProperty(
        this,
        'e',
      );
  set e(_i2.num value) {
    _i4.setProperty(
      this,
      'e',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/f)
  _i2.num get f => _i4.getProperty(
        this,
        'f',
      );
  set f(_i2.num value) {
    _i4.setProperty(
      this,
      'f',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m11)
  _i2.num get m11 => _i4.getProperty(
        this,
        'm11',
      );
  set m11(_i2.num value) {
    _i4.setProperty(
      this,
      'm11',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m12)
  _i2.num get m12 => _i4.getProperty(
        this,
        'm12',
      );
  set m12(_i2.num value) {
    _i4.setProperty(
      this,
      'm12',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m13)
  _i2.num get m13 => _i4.getProperty(
        this,
        'm13',
      );
  set m13(_i2.num value) {
    _i4.setProperty(
      this,
      'm13',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m14)
  _i2.num get m14 => _i4.getProperty(
        this,
        'm14',
      );
  set m14(_i2.num value) {
    _i4.setProperty(
      this,
      'm14',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m21)
  _i2.num get m21 => _i4.getProperty(
        this,
        'm21',
      );
  set m21(_i2.num value) {
    _i4.setProperty(
      this,
      'm21',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m22)
  _i2.num get m22 => _i4.getProperty(
        this,
        'm22',
      );
  set m22(_i2.num value) {
    _i4.setProperty(
      this,
      'm22',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m23)
  _i2.num get m23 => _i4.getProperty(
        this,
        'm23',
      );
  set m23(_i2.num value) {
    _i4.setProperty(
      this,
      'm23',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m24)
  _i2.num get m24 => _i4.getProperty(
        this,
        'm24',
      );
  set m24(_i2.num value) {
    _i4.setProperty(
      this,
      'm24',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m31)
  _i2.num get m31 => _i4.getProperty(
        this,
        'm31',
      );
  set m31(_i2.num value) {
    _i4.setProperty(
      this,
      'm31',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m32)
  _i2.num get m32 => _i4.getProperty(
        this,
        'm32',
      );
  set m32(_i2.num value) {
    _i4.setProperty(
      this,
      'm32',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m33)
  _i2.num get m33 => _i4.getProperty(
        this,
        'm33',
      );
  set m33(_i2.num value) {
    _i4.setProperty(
      this,
      'm33',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m34)
  _i2.num get m34 => _i4.getProperty(
        this,
        'm34',
      );
  set m34(_i2.num value) {
    _i4.setProperty(
      this,
      'm34',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m41)
  _i2.num get m41 => _i4.getProperty(
        this,
        'm41',
      );
  set m41(_i2.num value) {
    _i4.setProperty(
      this,
      'm41',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m42)
  _i2.num get m42 => _i4.getProperty(
        this,
        'm42',
      );
  set m42(_i2.num value) {
    _i4.setProperty(
      this,
      'm42',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m43)
  _i2.num get m43 => _i4.getProperty(
        this,
        'm43',
      );
  set m43(_i2.num value) {
    _i4.setProperty(
      this,
      'm43',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m44)
  _i2.num get m44 => _i4.getProperty(
        this,
        'm44',
      );
  set m44(_i2.num value) {
    _i4.setProperty(
      this,
      'm44',
      value,
    );
  }

  set invertSelf(_i3.DOMMatrix Function() value) {
    _i4.setProperty(
      this,
      'invertSelf',
      _i4.allowInterop(value),
    );
  }

  _i3.DOMMatrix Function() get invertSelf => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'invertSelf',
        ),
        r'call',
        [this],
      );
  set multiplySelf(_i3.DOMMatrix Function([_i3.DOMMatrixInit?]) value) {
    _i4.setProperty(
      this,
      'multiplySelf',
      _i4.allowInterop(value),
    );
  }

  _i3.DOMMatrix Function([_i3.DOMMatrixInit?]) get multiplySelf =>
      ([_i3.DOMMatrixInit? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'multiplySelf',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set preMultiplySelf(_i3.DOMMatrix Function([_i3.DOMMatrixInit?]) value) {
    _i4.setProperty(
      this,
      'preMultiplySelf',
      _i4.allowInterop(value),
    );
  }

  _i3.DOMMatrix Function([_i3.DOMMatrixInit?]) get preMultiplySelf =>
      ([_i3.DOMMatrixInit? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'preMultiplySelf',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set rotateAxisAngleSelf(
      _i3.DOMMatrix Function([
        _i2.num?,
        _i2.num?,
        _i2.num?,
        _i2.num?,
      ]) value) {
    _i4.setProperty(
      this,
      'rotateAxisAngleSelf',
      _i4.allowInterop(value),
    );
  }

  _i3.DOMMatrix Function([
    _i2.num?,
    _i2.num?,
    _i2.num?,
    _i2.num?,
  ]) get rotateAxisAngleSelf => ([
        _i2.num? p0,
        _i2.num? p1,
        _i2.num? p2,
        _i2.num? p3,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'rotateAxisAngleSelf',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
              p1 ?? _i6.undefined,
              p2 ?? _i6.undefined,
              p3 ?? _i6.undefined,
            ],
          );
  set rotateFromVectorSelf(
      _i3.DOMMatrix Function([
        _i2.num?,
        _i2.num?,
      ]) value) {
    _i4.setProperty(
      this,
      'rotateFromVectorSelf',
      _i4.allowInterop(value),
    );
  }

  _i3.DOMMatrix Function([
    _i2.num?,
    _i2.num?,
  ]) get rotateFromVectorSelf => ([
        _i2.num? p0,
        _i2.num? p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'rotateFromVectorSelf',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
              p1 ?? _i6.undefined,
            ],
          );
  set rotateSelf(
      _i3.DOMMatrix Function([
        _i2.num?,
        _i2.num?,
        _i2.num?,
      ]) value) {
    _i4.setProperty(
      this,
      'rotateSelf',
      _i4.allowInterop(value),
    );
  }

  _i3.DOMMatrix Function([
    _i2.num?,
    _i2.num?,
    _i2.num?,
  ]) get rotateSelf => ([
        _i2.num? p0,
        _i2.num? p1,
        _i2.num? p2,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'rotateSelf',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
              p1 ?? _i6.undefined,
              p2 ?? _i6.undefined,
            ],
          );
  set scale3dSelf(
      _i3.DOMMatrix Function([
        _i2.num?,
        _i2.num?,
        _i2.num?,
        _i2.num?,
      ]) value) {
    _i4.setProperty(
      this,
      'scale3dSelf',
      _i4.allowInterop(value),
    );
  }

  _i3.DOMMatrix Function([
    _i2.num?,
    _i2.num?,
    _i2.num?,
    _i2.num?,
  ]) get scale3dSelf => ([
        _i2.num? p0,
        _i2.num? p1,
        _i2.num? p2,
        _i2.num? p3,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'scale3dSelf',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
              p1 ?? _i6.undefined,
              p2 ?? _i6.undefined,
              p3 ?? _i6.undefined,
            ],
          );
  set scaleSelf(
      _i3.DOMMatrix Function([
        _i2.num?,
        _i2.num?,
        _i2.num?,
        _i2.num?,
        _i2.num?,
        _i2.num?,
      ]) value) {
    _i4.setProperty(
      this,
      'scaleSelf',
      _i4.allowInterop(value),
    );
  }

  _i3.DOMMatrix Function([
    _i2.num?,
    _i2.num?,
    _i2.num?,
    _i2.num?,
    _i2.num?,
    _i2.num?,
  ]) get scaleSelf => ([
        _i2.num? p0,
        _i2.num? p1,
        _i2.num? p2,
        _i2.num? p3,
        _i2.num? p4,
        _i2.num? p5,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'scaleSelf',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
              p1 ?? _i6.undefined,
              p2 ?? _i6.undefined,
              p3 ?? _i6.undefined,
              p4 ?? _i6.undefined,
              p5 ?? _i6.undefined,
            ],
          );
  set skewXSelf(_i3.DOMMatrix Function([_i2.num?]) value) {
    _i4.setProperty(
      this,
      'skewXSelf',
      _i4.allowInterop(value),
    );
  }

  _i3.DOMMatrix Function([_i2.num?]) get skewXSelf =>
      ([_i2.num? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'skewXSelf',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set skewYSelf(_i3.DOMMatrix Function([_i2.num?]) value) {
    _i4.setProperty(
      this,
      'skewYSelf',
      _i4.allowInterop(value),
    );
  }

  _i3.DOMMatrix Function([_i2.num?]) get skewYSelf =>
      ([_i2.num? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'skewYSelf',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set translateSelf(
      _i3.DOMMatrix Function([
        _i2.num?,
        _i2.num?,
        _i2.num?,
      ]) value) {
    _i4.setProperty(
      this,
      'translateSelf',
      _i4.allowInterop(value),
    );
  }

  _i3.DOMMatrix Function([
    _i2.num?,
    _i2.num?,
    _i2.num?,
  ]) get translateSelf => ([
        _i2.num? p0,
        _i2.num? p1,
        _i2.num? p2,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'translateSelf',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
              p1 ?? _i6.undefined,
              p2 ?? _i6.undefined,
            ],
          );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly)
@_i1.JS()
@_i1.staticInterop
class DOMMatrixReadOnly {
  factory DOMMatrixReadOnly([_i2.Object? init]) => _i4.callConstructor(
        _declaredDOMMatrixReadOnly,
        [init ?? _i6.undefined],
      );

  static set fromFloat32Array(
      _i3.DOMMatrixReadOnly Function(_i5.Float32List) value) {
    _i4.setProperty(
      _i8.target692,
      'fromFloat32Array',
      _i4.allowInterop(value),
    );
  }

  static _i3.DOMMatrixReadOnly Function(_i5.Float32List) get fromFloat32Array =>
      (_i5.Float32List p0) => _i4.callMethod(
            _i4.getProperty(
              _i8.target692,
              'fromFloat32Array',
            ),
            r'call',
            [
              _i8.target692,
              p0,
            ],
          );
  static set fromFloat64Array(
      _i3.DOMMatrixReadOnly Function(_i5.Float64List) value) {
    _i4.setProperty(
      _i8.target692,
      'fromFloat64Array',
      _i4.allowInterop(value),
    );
  }

  static _i3.DOMMatrixReadOnly Function(_i5.Float64List) get fromFloat64Array =>
      (_i5.Float64List p0) => _i4.callMethod(
            _i4.getProperty(
              _i8.target692,
              'fromFloat64Array',
            ),
            r'call',
            [
              _i8.target692,
              p0,
            ],
          );
  static set fromMatrix(
      _i3.DOMMatrixReadOnly Function([_i3.DOMMatrixInit?]) value) {
    _i4.setProperty(
      _i8.target692,
      'fromMatrix',
      _i4.allowInterop(value),
    );
  }

  static _i3.DOMMatrixReadOnly Function([_i3.DOMMatrixInit?]) get fromMatrix =>
      ([_i3.DOMMatrixInit? p0]) => _i4.callMethod(
            _i4.getProperty(
              _i8.target692,
              'fromMatrix',
            ),
            r'call',
            [
              _i8.target692,
              p0 ?? _i6.undefined,
            ],
          );
}

_i2.Object get _declaredDOMMatrixReadOnly => _i4.getProperty(
      _self,
      'DOMMatrixReadOnly',
    );

extension DOMMatrixReadOnly$Typings on DOMMatrixReadOnly {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/a)
  _i2.num get a => _i4.getProperty(
        this,
        'a',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/b)
  _i2.num get b => _i4.getProperty(
        this,
        'b',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/c)
  _i2.num get c => _i4.getProperty(
        this,
        'c',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/d)
  _i2.num get d => _i4.getProperty(
        this,
        'd',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/e)
  _i2.num get e => _i4.getProperty(
        this,
        'e',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/f)
  _i2.num get f => _i4.getProperty(
        this,
        'f',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/is2D)
  _i2.bool get is2D => _i4.getProperty(
        this,
        'is2D',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/isIdentity)
  _i2.bool get isIdentity => _i4.getProperty(
        this,
        'isIdentity',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m11)
  _i2.num get m11 => _i4.getProperty(
        this,
        'm11',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m12)
  _i2.num get m12 => _i4.getProperty(
        this,
        'm12',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m13)
  _i2.num get m13 => _i4.getProperty(
        this,
        'm13',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m14)
  _i2.num get m14 => _i4.getProperty(
        this,
        'm14',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m21)
  _i2.num get m21 => _i4.getProperty(
        this,
        'm21',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m22)
  _i2.num get m22 => _i4.getProperty(
        this,
        'm22',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m23)
  _i2.num get m23 => _i4.getProperty(
        this,
        'm23',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m24)
  _i2.num get m24 => _i4.getProperty(
        this,
        'm24',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m31)
  _i2.num get m31 => _i4.getProperty(
        this,
        'm31',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m32)
  _i2.num get m32 => _i4.getProperty(
        this,
        'm32',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m33)
  _i2.num get m33 => _i4.getProperty(
        this,
        'm33',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m34)
  _i2.num get m34 => _i4.getProperty(
        this,
        'm34',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m41)
  _i2.num get m41 => _i4.getProperty(
        this,
        'm41',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m42)
  _i2.num get m42 => _i4.getProperty(
        this,
        'm42',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m43)
  _i2.num get m43 => _i4.getProperty(
        this,
        'm43',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/m44)
  _i2.num get m44 => _i4.getProperty(
        this,
        'm44',
      );
  set flipX(_i3.DOMMatrix Function() value) {
    _i4.setProperty(
      this,
      'flipX',
      _i4.allowInterop(value),
    );
  }

  _i3.DOMMatrix Function() get flipX => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'flipX',
        ),
        r'call',
        [this],
      );
  set flipY(_i3.DOMMatrix Function() value) {
    _i4.setProperty(
      this,
      'flipY',
      _i4.allowInterop(value),
    );
  }

  _i3.DOMMatrix Function() get flipY => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'flipY',
        ),
        r'call',
        [this],
      );
  set inverse(_i3.DOMMatrix Function() value) {
    _i4.setProperty(
      this,
      'inverse',
      _i4.allowInterop(value),
    );
  }

  _i3.DOMMatrix Function() get inverse => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'inverse',
        ),
        r'call',
        [this],
      );
  set multiply(_i3.DOMMatrix Function([_i3.DOMMatrixInit?]) value) {
    _i4.setProperty(
      this,
      'multiply',
      _i4.allowInterop(value),
    );
  }

  _i3.DOMMatrix Function([_i3.DOMMatrixInit?]) get multiply =>
      ([_i3.DOMMatrixInit? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'multiply',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set rotate(
      _i3.DOMMatrix Function([
        _i2.num?,
        _i2.num?,
        _i2.num?,
      ]) value) {
    _i4.setProperty(
      this,
      'rotate',
      _i4.allowInterop(value),
    );
  }

  _i3.DOMMatrix Function([
    _i2.num?,
    _i2.num?,
    _i2.num?,
  ]) get rotate => ([
        _i2.num? p0,
        _i2.num? p1,
        _i2.num? p2,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'rotate',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
              p1 ?? _i6.undefined,
              p2 ?? _i6.undefined,
            ],
          );
  set rotateAxisAngle(
      _i3.DOMMatrix Function([
        _i2.num?,
        _i2.num?,
        _i2.num?,
        _i2.num?,
      ]) value) {
    _i4.setProperty(
      this,
      'rotateAxisAngle',
      _i4.allowInterop(value),
    );
  }

  _i3.DOMMatrix Function([
    _i2.num?,
    _i2.num?,
    _i2.num?,
    _i2.num?,
  ]) get rotateAxisAngle => ([
        _i2.num? p0,
        _i2.num? p1,
        _i2.num? p2,
        _i2.num? p3,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'rotateAxisAngle',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
              p1 ?? _i6.undefined,
              p2 ?? _i6.undefined,
              p3 ?? _i6.undefined,
            ],
          );
  set rotateFromVector(
      _i3.DOMMatrix Function([
        _i2.num?,
        _i2.num?,
      ]) value) {
    _i4.setProperty(
      this,
      'rotateFromVector',
      _i4.allowInterop(value),
    );
  }

  _i3.DOMMatrix Function([
    _i2.num?,
    _i2.num?,
  ]) get rotateFromVector => ([
        _i2.num? p0,
        _i2.num? p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'rotateFromVector',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
              p1 ?? _i6.undefined,
            ],
          );
  set scale(
      _i3.DOMMatrix Function([
        _i2.num?,
        _i2.num?,
        _i2.num?,
        _i2.num?,
        _i2.num?,
        _i2.num?,
      ]) value) {
    _i4.setProperty(
      this,
      'scale',
      _i4.allowInterop(value),
    );
  }

  _i3.DOMMatrix Function([
    _i2.num?,
    _i2.num?,
    _i2.num?,
    _i2.num?,
    _i2.num?,
    _i2.num?,
  ]) get scale => ([
        _i2.num? p0,
        _i2.num? p1,
        _i2.num? p2,
        _i2.num? p3,
        _i2.num? p4,
        _i2.num? p5,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'scale',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
              p1 ?? _i6.undefined,
              p2 ?? _i6.undefined,
              p3 ?? _i6.undefined,
              p4 ?? _i6.undefined,
              p5 ?? _i6.undefined,
            ],
          );
  set scale3d(
      _i3.DOMMatrix Function([
        _i2.num?,
        _i2.num?,
        _i2.num?,
        _i2.num?,
      ]) value) {
    _i4.setProperty(
      this,
      'scale3d',
      _i4.allowInterop(value),
    );
  }

  _i3.DOMMatrix Function([
    _i2.num?,
    _i2.num?,
    _i2.num?,
    _i2.num?,
  ]) get scale3d => ([
        _i2.num? p0,
        _i2.num? p1,
        _i2.num? p2,
        _i2.num? p3,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'scale3d',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
              p1 ?? _i6.undefined,
              p2 ?? _i6.undefined,
              p3 ?? _i6.undefined,
            ],
          );
  set scaleNonUniform(
      _i3.DOMMatrix Function([
        _i2.num?,
        _i2.num?,
      ]) value) {
    _i4.setProperty(
      this,
      'scaleNonUniform',
      _i4.allowInterop(value),
    );
  }

  _i3.DOMMatrix Function([
    _i2.num?,
    _i2.num?,
  ]) get scaleNonUniform => ([
        _i2.num? p0,
        _i2.num? p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'scaleNonUniform',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
              p1 ?? _i6.undefined,
            ],
          );
  set skewX(_i3.DOMMatrix Function([_i2.num?]) value) {
    _i4.setProperty(
      this,
      'skewX',
      _i4.allowInterop(value),
    );
  }

  _i3.DOMMatrix Function([_i2.num?]) get skewX =>
      ([_i2.num? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'skewX',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set skewY(_i3.DOMMatrix Function([_i2.num?]) value) {
    _i4.setProperty(
      this,
      'skewY',
      _i4.allowInterop(value),
    );
  }

  _i3.DOMMatrix Function([_i2.num?]) get skewY =>
      ([_i2.num? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'skewY',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set toFloat32Array(_i5.Float32List Function() value) {
    _i4.setProperty(
      this,
      'toFloat32Array',
      _i4.allowInterop(value),
    );
  }

  _i5.Float32List Function() get toFloat32Array => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'toFloat32Array',
        ),
        r'call',
        [this],
      );
  set toFloat64Array(_i5.Float64List Function() value) {
    _i4.setProperty(
      this,
      'toFloat64Array',
      _i4.allowInterop(value),
    );
  }

  _i5.Float64List Function() get toFloat64Array => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'toFloat64Array',
        ),
        r'call',
        [this],
      );
  set toJSON(_i2.dynamic Function() value) {
    _i4.setProperty(
      this,
      'toJSON',
      _i4.allowInterop(value),
    );
  }

  _i2.dynamic Function() get toJSON => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'toJSON',
        ),
        r'call',
        [this],
      );
  set transformPoint(_i3.DOMPoint Function([_i3.DOMPointInit?]) value) {
    _i4.setProperty(
      this,
      'transformPoint',
      _i4.allowInterop(value),
    );
  }

  _i3.DOMPoint Function([_i3.DOMPointInit?]) get transformPoint =>
      ([_i3.DOMPointInit? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'transformPoint',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set translate(
      _i3.DOMMatrix Function([
        _i2.num?,
        _i2.num?,
        _i2.num?,
      ]) value) {
    _i4.setProperty(
      this,
      'translate',
      _i4.allowInterop(value),
    );
  }

  _i3.DOMMatrix Function([
    _i2.num?,
    _i2.num?,
    _i2.num?,
  ]) get translate => ([
        _i2.num? p0,
        _i2.num? p1,
        _i2.num? p2,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'translate',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
              p1 ?? _i6.undefined,
              p2 ?? _i6.undefined,
            ],
          );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPoint)
@_i1.JS()
@_i1.staticInterop
class DOMPoint implements _i3.DOMPointReadOnly {
  factory DOMPoint([
    _i2.num? x,
    _i2.num? y,
    _i2.num? z,
    _i2.num? w,
  ]) =>
      _i4.callConstructor(
        _declaredDOMPoint,
        [
          x ?? _i6.undefined,
          y ?? _i6.undefined,
          z ?? _i6.undefined,
          w ?? _i6.undefined,
        ],
      );

  static set fromPoint(_i3.DOMPoint Function([_i3.DOMPointInit?]) value) {
    _i4.setProperty(
      _i8.target693,
      'fromPoint',
      _i4.allowInterop(value),
    );
  }

  static _i3.DOMPoint Function([_i3.DOMPointInit?]) get fromPoint =>
      ([_i3.DOMPointInit? p0]) => _i4.callMethod(
            _i4.getProperty(
              _i8.target693,
              'fromPoint',
            ),
            r'call',
            [
              _i8.target693,
              p0 ?? _i6.undefined,
            ],
          );
}

_i2.Object get _declaredDOMPoint => _i4.getProperty(
      _self,
      'DOMPoint',
    );

extension DOMPoint$Typings on DOMPoint {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPoint/w)
  _i2.num get w => _i4.getProperty(
        this,
        'w',
      );
  set w(_i2.num value) {
    _i4.setProperty(
      this,
      'w',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPoint/x)
  _i2.num get x => _i4.getProperty(
        this,
        'x',
      );
  set x(_i2.num value) {
    _i4.setProperty(
      this,
      'x',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPoint/y)
  _i2.num get y => _i4.getProperty(
        this,
        'y',
      );
  set y(_i2.num value) {
    _i4.setProperty(
      this,
      'y',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPoint/z)
  _i2.num get z => _i4.getProperty(
        this,
        'z',
      );
  set z(_i2.num value) {
    _i4.setProperty(
      this,
      'z',
      value,
    );
  }
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly)
@_i1.JS()
@_i1.staticInterop
class DOMPointReadOnly {
  factory DOMPointReadOnly([
    _i2.num? x,
    _i2.num? y,
    _i2.num? z,
    _i2.num? w,
  ]) =>
      _i4.callConstructor(
        _declaredDOMPointReadOnly,
        [
          x ?? _i6.undefined,
          y ?? _i6.undefined,
          z ?? _i6.undefined,
          w ?? _i6.undefined,
        ],
      );

  static set fromPoint(
      _i3.DOMPointReadOnly Function([_i3.DOMPointInit?]) value) {
    _i4.setProperty(
      _i8.target694,
      'fromPoint',
      _i4.allowInterop(value),
    );
  }

  static _i3.DOMPointReadOnly Function([_i3.DOMPointInit?]) get fromPoint =>
      ([_i3.DOMPointInit? p0]) => _i4.callMethod(
            _i4.getProperty(
              _i8.target694,
              'fromPoint',
            ),
            r'call',
            [
              _i8.target694,
              p0 ?? _i6.undefined,
            ],
          );
}

_i2.Object get _declaredDOMPointReadOnly => _i4.getProperty(
      _self,
      'DOMPointReadOnly',
    );

extension DOMPointReadOnly$Typings on DOMPointReadOnly {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/w)
  _i2.num get w => _i4.getProperty(
        this,
        'w',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/x)
  _i2.num get x => _i4.getProperty(
        this,
        'x',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/y)
  _i2.num get y => _i4.getProperty(
        this,
        'y',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/z)
  _i2.num get z => _i4.getProperty(
        this,
        'z',
      );
  set matrixTransform(_i3.DOMPoint Function([_i3.DOMMatrixInit?]) value) {
    _i4.setProperty(
      this,
      'matrixTransform',
      _i4.allowInterop(value),
    );
  }

  _i3.DOMPoint Function([_i3.DOMMatrixInit?]) get matrixTransform =>
      ([_i3.DOMMatrixInit? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'matrixTransform',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set toJSON(_i2.dynamic Function() value) {
    _i4.setProperty(
      this,
      'toJSON',
      _i4.allowInterop(value),
    );
  }

  _i2.dynamic Function() get toJSON => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'toJSON',
        ),
        r'call',
        [this],
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMQuad)
@_i1.JS()
@_i1.staticInterop
class DOMQuad {
  factory DOMQuad([
    _i3.DOMPointInit? p1,
    _i3.DOMPointInit? p2,
    _i3.DOMPointInit? p3,
    _i3.DOMPointInit? p4,
  ]) =>
      _i4.callConstructor(
        _declaredDOMQuad,
        [
          p1 ?? _i6.undefined,
          p2 ?? _i6.undefined,
          p3 ?? _i6.undefined,
          p4 ?? _i6.undefined,
        ],
      );

  static set fromQuad(_i3.DOMQuad Function([_i3.DOMQuadInit?]) value) {
    _i4.setProperty(
      _i8.target695,
      'fromQuad',
      _i4.allowInterop(value),
    );
  }

  static _i3.DOMQuad Function([_i3.DOMQuadInit?]) get fromQuad =>
      ([_i3.DOMQuadInit? p0]) => _i4.callMethod(
            _i4.getProperty(
              _i8.target695,
              'fromQuad',
            ),
            r'call',
            [
              _i8.target695,
              p0 ?? _i6.undefined,
            ],
          );
  static set fromRect(_i3.DOMQuad Function([_i3.DOMRectInit?]) value) {
    _i4.setProperty(
      _i8.target695,
      'fromRect',
      _i4.allowInterop(value),
    );
  }

  static _i3.DOMQuad Function([_i3.DOMRectInit?]) get fromRect =>
      ([_i3.DOMRectInit? p0]) => _i4.callMethod(
            _i4.getProperty(
              _i8.target695,
              'fromRect',
            ),
            r'call',
            [
              _i8.target695,
              p0 ?? _i6.undefined,
            ],
          );
}

_i2.Object get _declaredDOMQuad => _i4.getProperty(
      _self,
      'DOMQuad',
    );

extension DOMQuad$Typings on DOMQuad {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMQuad/p1)
  _i3.DOMPoint get p1 => _i4.getProperty(
        this,
        'p1',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMQuad/p2)
  _i3.DOMPoint get p2 => _i4.getProperty(
        this,
        'p2',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMQuad/p3)
  _i3.DOMPoint get p3 => _i4.getProperty(
        this,
        'p3',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMQuad/p4)
  _i3.DOMPoint get p4 => _i4.getProperty(
        this,
        'p4',
      );
  set getBounds(_i3.DOMRect Function() value) {
    _i4.setProperty(
      this,
      'getBounds',
      _i4.allowInterop(value),
    );
  }

  _i3.DOMRect Function() get getBounds => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'getBounds',
        ),
        r'call',
        [this],
      );
  set toJSON(_i2.dynamic Function() value) {
    _i4.setProperty(
      this,
      'toJSON',
      _i4.allowInterop(value),
    );
  }

  _i2.dynamic Function() get toJSON => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'toJSON',
        ),
        r'call',
        [this],
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRect)
@_i1.JS()
@_i1.staticInterop
class DOMRect implements _i3.DOMRectReadOnly {
  factory DOMRect([
    _i2.num? x,
    _i2.num? y,
    _i2.num? width,
    _i2.num? height,
  ]) =>
      _i4.callConstructor(
        _declaredDOMRect,
        [
          x ?? _i6.undefined,
          y ?? _i6.undefined,
          width ?? _i6.undefined,
          height ?? _i6.undefined,
        ],
      );

  static set fromRect(_i3.DOMRect Function([_i3.DOMRectInit?]) value) {
    _i4.setProperty(
      _i8.target696,
      'fromRect',
      _i4.allowInterop(value),
    );
  }

  static _i3.DOMRect Function([_i3.DOMRectInit?]) get fromRect =>
      ([_i3.DOMRectInit? p0]) => _i4.callMethod(
            _i4.getProperty(
              _i8.target696,
              'fromRect',
            ),
            r'call',
            [
              _i8.target696,
              p0 ?? _i6.undefined,
            ],
          );
}

_i2.Object get _declaredDOMRect => _i4.getProperty(
      _self,
      'DOMRect',
    );

extension DOMRect$Typings on DOMRect {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/height)
  _i2.num get height => _i4.getProperty(
        this,
        'height',
      );
  set height(_i2.num value) {
    _i4.setProperty(
      this,
      'height',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/width)
  _i2.num get width => _i4.getProperty(
        this,
        'width',
      );
  set width(_i2.num value) {
    _i4.setProperty(
      this,
      'width',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/x)
  _i2.num get x => _i4.getProperty(
        this,
        'x',
      );
  set x(_i2.num value) {
    _i4.setProperty(
      this,
      'x',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/y)
  _i2.num get y => _i4.getProperty(
        this,
        'y',
      );
  set y(_i2.num value) {
    _i4.setProperty(
      this,
      'y',
      value,
    );
  }
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly)
@_i1.JS()
@_i1.staticInterop
class DOMRectReadOnly {
  factory DOMRectReadOnly([
    _i2.num? x,
    _i2.num? y,
    _i2.num? width,
    _i2.num? height,
  ]) =>
      _i4.callConstructor(
        _declaredDOMRectReadOnly,
        [
          x ?? _i6.undefined,
          y ?? _i6.undefined,
          width ?? _i6.undefined,
          height ?? _i6.undefined,
        ],
      );

  static set fromRect(_i3.DOMRectReadOnly Function([_i3.DOMRectInit?]) value) {
    _i4.setProperty(
      _i8.target697,
      'fromRect',
      _i4.allowInterop(value),
    );
  }

  static _i3.DOMRectReadOnly Function([_i3.DOMRectInit?]) get fromRect =>
      ([_i3.DOMRectInit? p0]) => _i4.callMethod(
            _i4.getProperty(
              _i8.target697,
              'fromRect',
            ),
            r'call',
            [
              _i8.target697,
              p0 ?? _i6.undefined,
            ],
          );
}

_i2.Object get _declaredDOMRectReadOnly => _i4.getProperty(
      _self,
      'DOMRectReadOnly',
    );

extension DOMRectReadOnly$Typings on DOMRectReadOnly {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/bottom)
  _i2.num get bottom => _i4.getProperty(
        this,
        'bottom',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/height)
  _i2.num get height => _i4.getProperty(
        this,
        'height',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/left)
  _i2.num get left => _i4.getProperty(
        this,
        'left',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/right)
  _i2.num get right => _i4.getProperty(
        this,
        'right',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/top)
  _i2.num get top => _i4.getProperty(
        this,
        'top',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/width)
  _i2.num get width => _i4.getProperty(
        this,
        'width',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/x)
  _i2.num get x => _i4.getProperty(
        this,
        'x',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/y)
  _i2.num get y => _i4.getProperty(
        this,
        'y',
      );
  set toJSON(_i2.dynamic Function() value) {
    _i4.setProperty(
      this,
      'toJSON',
      _i4.allowInterop(value),
    );
  }

  _i2.dynamic Function() get toJSON => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'toJSON',
        ),
        r'call',
        [this],
      );
}

/* Source:  */
/// A type returned by some APIs which contains a list of DOMString (strings).
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMStringList)
@_i1.JS()
@_i1.staticInterop
class DOMStringList
    implements _IterableLike$<_i10.IterableIterator<_i2.String>> {
  factory DOMStringList() => _i4.callConstructor(
        _declaredDOMStringList,
        [],
      );
}

_i2.Object get _declaredDOMStringList => _i4.getProperty(
      _self,
      'DOMStringList',
    );

extension DOMStringList$Typings on DOMStringList {
  /// Returns the number of strings in strings.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMStringList/length)
  _i2.num get length => _i4.getProperty(
        this,
        'length',
      );
  set contains(_i2.bool Function(_i2.String) value) {
    _i4.setProperty(
      this,
      'contains',
      _i4.allowInterop(value),
    );
  }

  _i2.bool Function(_i2.String) get contains =>
      (_i2.String p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'contains',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set item(_i2.String? Function(_i2.num) value) {
    _i4.setProperty(
      this,
      'item',
      _i4.allowInterop((p0) => () => value(p0) ?? _i6.undefined),
    );
  }

  _i2.String? Function(_i2.num) get item => (_i2.num p0) => _i4.callMethod(
        _i4.getProperty(
          this,
          'item',
        ),
        r'call',
        [
          this,
          p0,
        ],
      );
  _i2.String operator [](_i2.num index) => _i4.getProperty(
        this,
        index,
      );
  void operator []=(
    _i2.num index,
    _i2.String value,
  ) {
    _i4.setProperty(
      this,
      index,
      value,
    );
  }
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DecompressionStream)
@_i1.JS()
@_i1.staticInterop
class DecompressionStream implements _i3.GenericTransformStream {
  factory DecompressionStream(_i3.CompressionFormat format) =>
      _i4.callConstructor(
        _declaredDecompressionStream,
        [format.name],
      );
}

_i2.Object get _declaredDecompressionStream => _i4.getProperty(
      _self,
      'DecompressionStream',
    );

enum DedicatedWorkerGlobalScopeEventMap<T$> {
  message<_i3.MessageEvent<_i2.dynamic>>(r'message'),
  messageerror<_i3.MessageEvent<_i2.dynamic>>(r'messageerror'),
  error<_i3.ErrorEvent>(r'error'),
  languagechange<_i3.Event>(r'languagechange'),
  offline<_i3.Event>(r'offline'),
  online<_i3.Event>(r'online'),
  rejectionhandled<_i3.PromiseRejectionEvent>(r'rejectionhandled'),
  unhandledrejection<_i3.PromiseRejectionEvent>(r'unhandledrejection');

  const DedicatedWorkerGlobalScopeEventMap(this.value);

  final _i2.String value;
}

/* Source:  */
/// (the Worker global scope) is accessible through the self keyword. Some additional global functions, namespaces objects, and constructors, not typically associated with the worker global scope, but available on it, are listed in the JavaScript Reference. See also: Functions available to workers.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope)
@_i1.JS()
@_i1.staticInterop
class DedicatedWorkerGlobalScope
    implements _i3.WorkerGlobalScope, _i3.AnimationFrameProvider {
  factory DedicatedWorkerGlobalScope() => _i4.callConstructor(
        _declaredDedicatedWorkerGlobalScope,
        [],
      );
}

_i2.Object get _declaredDedicatedWorkerGlobalScope => _i4.getProperty(
      _self,
      'DedicatedWorkerGlobalScope',
    );

extension DedicatedWorkerGlobalScope$Typings on DedicatedWorkerGlobalScope {
  /// Returns dedicatedWorkerGlobal's name, i.e. the value given to the Worker constructor. Primarily useful for debugging.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/name)
  _i2.String get name => _i4.getProperty(
        this,
        'name',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/message_event)
  _i2.dynamic Function(_i3.MessageEvent<_i2.dynamic>)? get onmessage =>
      (_i3.MessageEvent<_i2.dynamic> p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onmessage',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onmessage(_i2.dynamic Function(_i3.MessageEvent<_i2.dynamic>)? value) {
    _i4.setProperty(
      this,
      'onmessage',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/messageerror_event)
  _i2.dynamic Function(_i3.MessageEvent<_i2.dynamic>)? get onmessageerror =>
      (_i3.MessageEvent<_i2.dynamic> p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onmessageerror',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onmessageerror(
      _i2.dynamic Function(_i3.MessageEvent<_i2.dynamic>)? value) {
    _i4.setProperty(
      this,
      'onmessageerror',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  set close(void Function() value) {
    _i4.setProperty(
      this,
      'close',
      _i4.allowInterop(value),
    );
  }

  void Function() get close => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'close',
        ),
        r'call',
        [this],
      );

  /// Clones message and transmits it to the Worker object associated with dedicatedWorkerGlobal. transfer can be passed as a list of objects that are to be transferred rather than cloned.
  ///
  ///  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/postMessage)
  void _postMessage$1(
    _i2.List<_i2.Object> transfer, [
    _i2.dynamic message,
  ]) {
    _i4.callMethod(
      this,
      'postMessage',
      [
        message,
        transfer,
      ],
    );
  }

  /// Clones message and transmits it to the Worker object associated with dedicatedWorkerGlobal. transfer can be passed as a list of objects that are to be transferred rather than cloned.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/postMessage)
  void _postMessage$2([
    _i2.dynamic message,
    _i3.StructuredSerializeOptions? options,
  ]) {
    _i4.callMethod(
      this,
      'postMessage',
      [
        message,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Clones message and transmits it to the Worker object associated with dedicatedWorkerGlobal. transfer can be passed as a list of objects that are to be transferred rather than cloned.
    ///
    ///  [MDN Reference](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/postMessage)
    void Function(
      _i2.List<_i2.Object> transfer, [
      _i2.dynamic message,
    ]) $1,

    /// Clones message and transmits it to the Worker object associated with dedicatedWorkerGlobal. transfer can be passed as a list of objects that are to be transferred rather than cloned.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/postMessage)
    void Function([
      _i2.dynamic message,
      _i3.StructuredSerializeOptions? options,
    ]) $2,
  }) get postMessage => (
        $1: _postMessage$1,
        $2: _postMessage$2,
      );

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$1<K$>(
    _i3.DedicatedWorkerGlobalScopeEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function<K$>(
      _i3.DedicatedWorkerGlobalScopeEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get addEventListener => (
        $1: _addEventListener$1,
        $2: _addEventListener$2,
      );

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$1<K$>(
    _i3.DedicatedWorkerGlobalScopeEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function<K$>(
      _i3.DedicatedWorkerGlobalScopeEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get removeEventListener => (
        $1: _removeEventListener$1,
        $2: _removeEventListener$2,
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_blend_minmax)
@_i1.JS('EXT_blend_minmax')
@_i1.staticInterop
@_i1.anonymous
class EXTBlendMinmax {
  external factory EXTBlendMinmax._({
    _i2.dynamic minExt,
    _i2.dynamic maxExt,
  });

  factory EXTBlendMinmax({
    _i2.num? minExt,
    _i2.num? maxExt,
  }) =>
      EXTBlendMinmax._(
        minExt: minExt,
        maxExt: maxExt,
      );

  static _i2.num get minExt => _i4.getProperty(
        _declaredEXTBlendMinmax,
        'MIN_EXT',
      );
  static _i2.num get maxExt => _i4.getProperty(
        _declaredEXTBlendMinmax,
        'MAX_EXT',
      );
}

_i2.Object get _declaredEXTBlendMinmax => _i4.getProperty(
      _self,
      'EXT_blend_minmax',
    );

extension EXTBlendMinmax$Typings on EXTBlendMinmax {
  _i2.num get minExt => _i4.getProperty(
        this,
        'MIN_EXT',
      );
  _i2.num get maxExt => _i4.getProperty(
        this,
        'MAX_EXT',
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_color_buffer_float)
@_i1.JS('EXT_color_buffer_float')
@_i1.staticInterop
@_i1.anonymous
class EXTColorBufferFloat {
  external factory EXTColorBufferFloat._();

  factory EXTColorBufferFloat() => EXTColorBufferFloat._();
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_color_buffer_half_float)
@_i1.JS('EXT_color_buffer_half_float')
@_i1.staticInterop
@_i1.anonymous
class EXTColorBufferHalfFloat {
  external factory EXTColorBufferHalfFloat._({
    _i2.dynamic rgba16fExt,
    _i2.dynamic rgb16fExt,
    _i2.dynamic framebufferAttachmentComponentTypeExt,
    _i2.dynamic unsignedNormalizedExt,
  });

  factory EXTColorBufferHalfFloat({
    _i2.num? rgba16fExt,
    _i2.num? rgb16fExt,
    _i2.num? framebufferAttachmentComponentTypeExt,
    _i2.num? unsignedNormalizedExt,
  }) =>
      EXTColorBufferHalfFloat._(
        rgba16fExt: rgba16fExt,
        rgb16fExt: rgb16fExt,
        framebufferAttachmentComponentTypeExt:
            framebufferAttachmentComponentTypeExt,
        unsignedNormalizedExt: unsignedNormalizedExt,
      );

  static _i2.num get rgba16fExt => _i4.getProperty(
        _declaredEXTColorBufferHalfFloat,
        'RGBA16F_EXT',
      );
  static _i2.num get rgb16fExt => _i4.getProperty(
        _declaredEXTColorBufferHalfFloat,
        'RGB16F_EXT',
      );
  static _i2.num get framebufferAttachmentComponentTypeExt => _i4.getProperty(
        _declaredEXTColorBufferHalfFloat,
        'FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT',
      );
  static _i2.num get unsignedNormalizedExt => _i4.getProperty(
        _declaredEXTColorBufferHalfFloat,
        'UNSIGNED_NORMALIZED_EXT',
      );
}

_i2.Object get _declaredEXTColorBufferHalfFloat => _i4.getProperty(
      _self,
      'EXT_color_buffer_half_float',
    );

extension EXTColorBufferHalfFloat$Typings on EXTColorBufferHalfFloat {
  _i2.num get rgba16fExt => _i4.getProperty(
        this,
        'RGBA16F_EXT',
      );
  _i2.num get rgb16fExt => _i4.getProperty(
        this,
        'RGB16F_EXT',
      );
  _i2.num get framebufferAttachmentComponentTypeExt => _i4.getProperty(
        this,
        'FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT',
      );
  _i2.num get unsignedNormalizedExt => _i4.getProperty(
        this,
        'UNSIGNED_NORMALIZED_EXT',
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_float_blend)
@_i1.JS('EXT_float_blend')
@_i1.staticInterop
@_i1.anonymous
class EXTFloatBlend {
  external factory EXTFloatBlend._();

  factory EXTFloatBlend() => EXTFloatBlend._();
}

/* Source:  */
/// The EXT_frag_depth extension is part of the WebGL API and enables to set a depth value of a fragment from within the fragment shader.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_frag_depth)
@_i1.JS('EXT_frag_depth')
@_i1.staticInterop
@_i1.anonymous
class EXTFragDepth {
  external factory EXTFragDepth._();

  factory EXTFragDepth() => EXTFragDepth._();
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_sRGB)
@_i1.JS('EXT_sRGB')
@_i1.staticInterop
@_i1.anonymous
class EXTSRGB {
  external factory EXTSRGB._({
    _i2.dynamic srgbExt,
    _i2.dynamic srgbAlphaExt,
    _i2.dynamic srgb8Alpha8Ext,
    _i2.dynamic framebufferAttachmentColorEncodingExt,
  });

  factory EXTSRGB({
    _i2.num? srgbExt,
    _i2.num? srgbAlphaExt,
    _i2.num? srgb8Alpha8Ext,
    _i2.num? framebufferAttachmentColorEncodingExt,
  }) =>
      EXTSRGB._(
        srgbExt: srgbExt,
        srgbAlphaExt: srgbAlphaExt,
        srgb8Alpha8Ext: srgb8Alpha8Ext,
        framebufferAttachmentColorEncodingExt:
            framebufferAttachmentColorEncodingExt,
      );

  static _i2.num get srgbExt => _i4.getProperty(
        _declaredEXTSRGB,
        'SRGB_EXT',
      );
  static _i2.num get srgbAlphaExt => _i4.getProperty(
        _declaredEXTSRGB,
        'SRGB_ALPHA_EXT',
      );
  static _i2.num get srgb8Alpha8Ext => _i4.getProperty(
        _declaredEXTSRGB,
        'SRGB8_ALPHA8_EXT',
      );
  static _i2.num get framebufferAttachmentColorEncodingExt => _i4.getProperty(
        _declaredEXTSRGB,
        'FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT',
      );
}

_i2.Object get _declaredEXTSRGB => _i4.getProperty(
      _self,
      'EXT_sRGB',
    );

extension EXTSRGB$Typings on EXTSRGB {
  _i2.num get srgbExt => _i4.getProperty(
        this,
        'SRGB_EXT',
      );
  _i2.num get srgbAlphaExt => _i4.getProperty(
        this,
        'SRGB_ALPHA_EXT',
      );
  _i2.num get srgb8Alpha8Ext => _i4.getProperty(
        this,
        'SRGB8_ALPHA8_EXT',
      );
  _i2.num get framebufferAttachmentColorEncodingExt => _i4.getProperty(
        this,
        'FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT',
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_shader_texture_lod)
@_i1.JS('EXT_shader_texture_lod')
@_i1.staticInterop
@_i1.anonymous
class EXTShaderTextureLod {
  external factory EXTShaderTextureLod._();

  factory EXTShaderTextureLod() => EXTShaderTextureLod._();
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_texture_compression_bptc)
@_i1.JS('EXT_texture_compression_bptc')
@_i1.staticInterop
@_i1.anonymous
class EXTTextureCompressionBptc {
  external factory EXTTextureCompressionBptc._({
    _i2.dynamic compressedRgbaBptcUnormExt,
    _i2.dynamic compressedSrgbAlphaBptcUnormExt,
    _i2.dynamic compressedRgbBptcSignedFloatExt,
    _i2.dynamic compressedRgbBptcUnsignedFloatExt,
  });

  factory EXTTextureCompressionBptc({
    _i2.num? compressedRgbaBptcUnormExt,
    _i2.num? compressedSrgbAlphaBptcUnormExt,
    _i2.num? compressedRgbBptcSignedFloatExt,
    _i2.num? compressedRgbBptcUnsignedFloatExt,
  }) =>
      EXTTextureCompressionBptc._(
        compressedRgbaBptcUnormExt: compressedRgbaBptcUnormExt,
        compressedSrgbAlphaBptcUnormExt: compressedSrgbAlphaBptcUnormExt,
        compressedRgbBptcSignedFloatExt: compressedRgbBptcSignedFloatExt,
        compressedRgbBptcUnsignedFloatExt: compressedRgbBptcUnsignedFloatExt,
      );

  static _i2.num get compressedRgbaBptcUnormExt => _i4.getProperty(
        _declaredEXTTextureCompressionBptc,
        'COMPRESSED_RGBA_BPTC_UNORM_EXT',
      );
  static _i2.num get compressedSrgbAlphaBptcUnormExt => _i4.getProperty(
        _declaredEXTTextureCompressionBptc,
        'COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT',
      );
  static _i2.num get compressedRgbBptcSignedFloatExt => _i4.getProperty(
        _declaredEXTTextureCompressionBptc,
        'COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT',
      );
  static _i2.num get compressedRgbBptcUnsignedFloatExt => _i4.getProperty(
        _declaredEXTTextureCompressionBptc,
        'COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT',
      );
}

_i2.Object get _declaredEXTTextureCompressionBptc => _i4.getProperty(
      _self,
      'EXT_texture_compression_bptc',
    );

extension EXTTextureCompressionBptc$Typings on EXTTextureCompressionBptc {
  _i2.num get compressedRgbaBptcUnormExt => _i4.getProperty(
        this,
        'COMPRESSED_RGBA_BPTC_UNORM_EXT',
      );
  _i2.num get compressedSrgbAlphaBptcUnormExt => _i4.getProperty(
        this,
        'COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT',
      );
  _i2.num get compressedRgbBptcSignedFloatExt => _i4.getProperty(
        this,
        'COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT',
      );
  _i2.num get compressedRgbBptcUnsignedFloatExt => _i4.getProperty(
        this,
        'COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT',
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_texture_compression_rgtc)
@_i1.JS('EXT_texture_compression_rgtc')
@_i1.staticInterop
@_i1.anonymous
class EXTTextureCompressionRgtc {
  external factory EXTTextureCompressionRgtc._({
    _i2.dynamic compressedRedRgtc1Ext,
    _i2.dynamic compressedSignedRedRgtc1Ext,
    _i2.dynamic compressedRedGreenRgtc2Ext,
    _i2.dynamic compressedSignedRedGreenRgtc2Ext,
  });

  factory EXTTextureCompressionRgtc({
    _i2.num? compressedRedRgtc1Ext,
    _i2.num? compressedSignedRedRgtc1Ext,
    _i2.num? compressedRedGreenRgtc2Ext,
    _i2.num? compressedSignedRedGreenRgtc2Ext,
  }) =>
      EXTTextureCompressionRgtc._(
        compressedRedRgtc1Ext: compressedRedRgtc1Ext,
        compressedSignedRedRgtc1Ext: compressedSignedRedRgtc1Ext,
        compressedRedGreenRgtc2Ext: compressedRedGreenRgtc2Ext,
        compressedSignedRedGreenRgtc2Ext: compressedSignedRedGreenRgtc2Ext,
      );

  static _i2.num get compressedRedRgtc1Ext => _i4.getProperty(
        _declaredEXTTextureCompressionRgtc,
        'COMPRESSED_RED_RGTC1_EXT',
      );
  static _i2.num get compressedSignedRedRgtc1Ext => _i4.getProperty(
        _declaredEXTTextureCompressionRgtc,
        'COMPRESSED_SIGNED_RED_RGTC1_EXT',
      );
  static _i2.num get compressedRedGreenRgtc2Ext => _i4.getProperty(
        _declaredEXTTextureCompressionRgtc,
        'COMPRESSED_RED_GREEN_RGTC2_EXT',
      );
  static _i2.num get compressedSignedRedGreenRgtc2Ext => _i4.getProperty(
        _declaredEXTTextureCompressionRgtc,
        'COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT',
      );
}

_i2.Object get _declaredEXTTextureCompressionRgtc => _i4.getProperty(
      _self,
      'EXT_texture_compression_rgtc',
    );

extension EXTTextureCompressionRgtc$Typings on EXTTextureCompressionRgtc {
  _i2.num get compressedRedRgtc1Ext => _i4.getProperty(
        this,
        'COMPRESSED_RED_RGTC1_EXT',
      );
  _i2.num get compressedSignedRedRgtc1Ext => _i4.getProperty(
        this,
        'COMPRESSED_SIGNED_RED_RGTC1_EXT',
      );
  _i2.num get compressedRedGreenRgtc2Ext => _i4.getProperty(
        this,
        'COMPRESSED_RED_GREEN_RGTC2_EXT',
      );
  _i2.num get compressedSignedRedGreenRgtc2Ext => _i4.getProperty(
        this,
        'COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT',
      );
}

/* Source:  */
/// The EXT_texture_filter_anisotropic extension is part of the WebGL API and exposes two constants for anisotropic filtering (AF).
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_texture_filter_anisotropic)
@_i1.JS('EXT_texture_filter_anisotropic')
@_i1.staticInterop
@_i1.anonymous
class EXTTextureFilterAnisotropic {
  external factory EXTTextureFilterAnisotropic._({
    _i2.dynamic textureMaxAnisotropyExt,
    _i2.dynamic maxTextureMaxAnisotropyExt,
  });

  factory EXTTextureFilterAnisotropic({
    _i2.num? textureMaxAnisotropyExt,
    _i2.num? maxTextureMaxAnisotropyExt,
  }) =>
      EXTTextureFilterAnisotropic._(
        textureMaxAnisotropyExt: textureMaxAnisotropyExt,
        maxTextureMaxAnisotropyExt: maxTextureMaxAnisotropyExt,
      );

  static _i2.num get textureMaxAnisotropyExt => _i4.getProperty(
        _declaredEXTTextureFilterAnisotropic,
        'TEXTURE_MAX_ANISOTROPY_EXT',
      );
  static _i2.num get maxTextureMaxAnisotropyExt => _i4.getProperty(
        _declaredEXTTextureFilterAnisotropic,
        'MAX_TEXTURE_MAX_ANISOTROPY_EXT',
      );
}

_i2.Object get _declaredEXTTextureFilterAnisotropic => _i4.getProperty(
      _self,
      'EXT_texture_filter_anisotropic',
    );

extension EXTTextureFilterAnisotropic$Typings on EXTTextureFilterAnisotropic {
  _i2.num get textureMaxAnisotropyExt => _i4.getProperty(
        this,
        'TEXTURE_MAX_ANISOTROPY_EXT',
      );
  _i2.num get maxTextureMaxAnisotropyExt => _i4.getProperty(
        this,
        'MAX_TEXTURE_MAX_ANISOTROPY_EXT',
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_texture_norm16)
@_i1.JS('EXT_texture_norm16')
@_i1.staticInterop
@_i1.anonymous
class EXTTextureNorm16 {
  external factory EXTTextureNorm16._({
    _i2.dynamic r16Ext,
    _i2.dynamic rg16Ext,
    _i2.dynamic rgb16Ext,
    _i2.dynamic rgba16Ext,
    _i2.dynamic r16SnormExt,
    _i2.dynamic rg16SnormExt,
    _i2.dynamic rgb16SnormExt,
    _i2.dynamic rgba16SnormExt,
  });

  factory EXTTextureNorm16({
    _i2.num? r16Ext,
    _i2.num? rg16Ext,
    _i2.num? rgb16Ext,
    _i2.num? rgba16Ext,
    _i2.num? r16SnormExt,
    _i2.num? rg16SnormExt,
    _i2.num? rgb16SnormExt,
    _i2.num? rgba16SnormExt,
  }) =>
      EXTTextureNorm16._(
        r16Ext: r16Ext,
        rg16Ext: rg16Ext,
        rgb16Ext: rgb16Ext,
        rgba16Ext: rgba16Ext,
        r16SnormExt: r16SnormExt,
        rg16SnormExt: rg16SnormExt,
        rgb16SnormExt: rgb16SnormExt,
        rgba16SnormExt: rgba16SnormExt,
      );

  static _i2.num get r16Ext => _i4.getProperty(
        _declaredEXTTextureNorm16,
        'R16_EXT',
      );
  static _i2.num get rg16Ext => _i4.getProperty(
        _declaredEXTTextureNorm16,
        'RG16_EXT',
      );
  static _i2.num get rgb16Ext => _i4.getProperty(
        _declaredEXTTextureNorm16,
        'RGB16_EXT',
      );
  static _i2.num get rgba16Ext => _i4.getProperty(
        _declaredEXTTextureNorm16,
        'RGBA16_EXT',
      );
  static _i2.num get r16SnormExt => _i4.getProperty(
        _declaredEXTTextureNorm16,
        'R16_SNORM_EXT',
      );
  static _i2.num get rg16SnormExt => _i4.getProperty(
        _declaredEXTTextureNorm16,
        'RG16_SNORM_EXT',
      );
  static _i2.num get rgb16SnormExt => _i4.getProperty(
        _declaredEXTTextureNorm16,
        'RGB16_SNORM_EXT',
      );
  static _i2.num get rgba16SnormExt => _i4.getProperty(
        _declaredEXTTextureNorm16,
        'RGBA16_SNORM_EXT',
      );
}

_i2.Object get _declaredEXTTextureNorm16 => _i4.getProperty(
      _self,
      'EXT_texture_norm16',
    );

extension EXTTextureNorm16$Typings on EXTTextureNorm16 {
  _i2.num get r16Ext => _i4.getProperty(
        this,
        'R16_EXT',
      );
  _i2.num get rg16Ext => _i4.getProperty(
        this,
        'RG16_EXT',
      );
  _i2.num get rgb16Ext => _i4.getProperty(
        this,
        'RGB16_EXT',
      );
  _i2.num get rgba16Ext => _i4.getProperty(
        this,
        'RGBA16_EXT',
      );
  _i2.num get r16SnormExt => _i4.getProperty(
        this,
        'R16_SNORM_EXT',
      );
  _i2.num get rg16SnormExt => _i4.getProperty(
        this,
        'RG16_SNORM_EXT',
      );
  _i2.num get rgb16SnormExt => _i4.getProperty(
        this,
        'RGB16_SNORM_EXT',
      );
  _i2.num get rgba16SnormExt => _i4.getProperty(
        this,
        'RGBA16_SNORM_EXT',
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk)
@_i1.JS()
@_i1.staticInterop
class EncodedVideoChunk {
  factory EncodedVideoChunk(_i3.EncodedVideoChunkInit init) =>
      _i4.callConstructor(
        _declaredEncodedVideoChunk,
        [init],
      );
}

_i2.Object get _declaredEncodedVideoChunk => _i4.getProperty(
      _self,
      'EncodedVideoChunk',
    );

extension EncodedVideoChunk$Typings on EncodedVideoChunk {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk/byteLength)
  _i2.num get byteLength => _i4.getProperty(
        this,
        'byteLength',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk/duration)
  _i2.num? get duration => _i4.getProperty(
        this,
        'duration',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk/timestamp)
  _i2.num get timestamp => _i4.getProperty(
        this,
        'timestamp',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk/type)
  _i3.EncodedVideoChunkType get type =>
      _i3.EncodedVideoChunkTypeOptions.values.byName(_i4.getProperty(
        this,
        'type',
      ));
  set copyTo(void Function(_i2.Object) value) {
    _i4.setProperty(
      this,
      'copyTo',
      _i4.allowInterop(value),
    );
  }

  void Function(_i2.Object) get copyTo => (_i2.Object p0) => _i4.callMethod(
        _i4.getProperty(
          this,
          'copyTo',
        ),
        r'call',
        [
          this,
          p0,
        ],
      );
}

/* Source:  */
/// Events providing information related to errors in scripts or in files.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ErrorEvent)
@_i1.JS()
@_i1.staticInterop
class ErrorEvent implements _i3.Event {
  factory ErrorEvent(
    _i2.String type, [
    _i3.ErrorEventInit? eventInitDict,
  ]) =>
      _i4.callConstructor(
        _declaredErrorEvent,
        [
          type,
          eventInitDict ?? _i6.undefined,
        ],
      );
}

_i2.Object get _declaredErrorEvent => _i4.getProperty(
      _self,
      'ErrorEvent',
    );

extension ErrorEvent$Typings on ErrorEvent {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ErrorEvent/colno)
  _i2.num get colno => _i4.getProperty(
        this,
        'colno',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ErrorEvent/error)
  _i2.dynamic get error => _i4.getProperty(
        this,
        'error',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ErrorEvent/filename)
  _i2.String get filename => _i4.getProperty(
        this,
        'filename',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ErrorEvent/lineno)
  _i2.num get lineno => _i4.getProperty(
        this,
        'lineno',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ErrorEvent/message)
  _i2.String get message => _i4.getProperty(
        this,
        'message',
      );
}

/* Source:  */
/// An event which takes place in the DOM.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event)
@_i1.JS()
@_i1.staticInterop
class Event {
  factory Event(
    _i2.String type, [
    _i3.EventInit? eventInitDict,
  ]) =>
      _i4.callConstructor(
        _declaredEvent,
        [
          type,
          eventInitDict ?? _i6.undefined,
        ],
      );

  static _i2.num get none => _i4.getProperty(
        _declaredEvent,
        'NONE',
      );
  static _i2.num get capturingPhase => _i4.getProperty(
        _declaredEvent,
        'CAPTURING_PHASE',
      );
  static _i2.num get atTarget => _i4.getProperty(
        _declaredEvent,
        'AT_TARGET',
      );
  static _i2.num get bubblingPhase => _i4.getProperty(
        _declaredEvent,
        'BUBBLING_PHASE',
      );
}

_i2.Object get _declaredEvent => _i4.getProperty(
      _self,
      'Event',
    );

extension Event$Typings on Event {
  /// Returns true or false depending on how event was initialized. True if event goes through its target's ancestors in reverse tree order, and false otherwise.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/bubbles)
  _i2.bool get bubbles => _i4.getProperty(
        this,
        'bubbles',
      );

  /// @deprecated
  ///
  ///  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/cancelBubble)
  _i2.bool get cancelBubble => _i4.getProperty(
        this,
        'cancelBubble',
      );
  set cancelBubble(_i2.bool value) {
    _i4.setProperty(
      this,
      'cancelBubble',
      value,
    );
  }

  /// Returns true or false depending on how event was initialized. Its return value does not always carry meaning, but true can indicate that part of the operation during which event was dispatched, can be canceled by invoking the preventDefault() method.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/cancelable)
  _i2.bool get cancelable => _i4.getProperty(
        this,
        'cancelable',
      );

  /// Returns true or false depending on how event was initialized. True if event invokes listeners past a ShadowRoot node that is the root of its target, and false otherwise.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/composed)
  _i2.bool get composed => _i4.getProperty(
        this,
        'composed',
      );

  /// Returns the object whose event listener's callback is currently being invoked.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/currentTarget)
  _i3.EventTarget? get currentTarget => _i4.getProperty(
        this,
        'currentTarget',
      );

  /// Returns true if preventDefault() was invoked successfully to indicate cancelation, and false otherwise.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/defaultPrevented)
  _i2.bool get defaultPrevented => _i4.getProperty(
        this,
        'defaultPrevented',
      );

  /// Returns the event's phase, which is one of NONE, CAPTURING_PHASE, AT_TARGET, and BUBBLING_PHASE.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/eventPhase)
  _i2.num get eventPhase => _i4.getProperty(
        this,
        'eventPhase',
      );

  /// Returns true if event was dispatched by the user agent, and false otherwise.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/isTrusted)
  _i2.bool get isTrusted => _i4.getProperty(
        this,
        'isTrusted',
      );

  /// @deprecated
  ///
  ///  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/returnValue)
  _i2.bool get returnValue => _i4.getProperty(
        this,
        'returnValue',
      );
  set returnValue(_i2.bool value) {
    _i4.setProperty(
      this,
      'returnValue',
      value,
    );
  }

  _i3.EventTarget? get srcElement => _i4.getProperty(
        this,
        'srcElement',
      );

  /// Returns the object to which event is dispatched (its target).
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/target)
  _i3.EventTarget? get target => _i4.getProperty(
        this,
        'target',
      );

  /// Returns the event's timestamp as the number of milliseconds measured relative to the time origin.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/timeStamp)
  _i2.num get timeStamp => _i4.getProperty(
        this,
        'timeStamp',
      );

  /// Returns the type of event, e.g. "click", "hashchange", or "submit".
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/type)
  _i2.String get type => _i4.getProperty(
        this,
        'type',
      );
  _i2.num get none => _i4.getProperty(
        this,
        'NONE',
      );
  _i2.num get capturingPhase => _i4.getProperty(
        this,
        'CAPTURING_PHASE',
      );
  _i2.num get atTarget => _i4.getProperty(
        this,
        'AT_TARGET',
      );
  _i2.num get bubblingPhase => _i4.getProperty(
        this,
        'BUBBLING_PHASE',
      );
  set composedPath(_i2.List<_i3.EventTarget> Function() value) {
    _i4.setProperty(
      this,
      'composedPath',
      _i4.allowInterop(value),
    );
  }

  _i2.List<_i3.EventTarget> Function() get composedPath =>
      () => ((_i4.callMethod(
            _i4.getProperty(
              this,
              'composedPath',
            ),
            r'call',
            [this],
          )) as _i2.List)
              .cast();
  set initEvent(
      void Function(
        _i2.String, [
        _i2.bool?,
        _i2.bool?,
      ]) value) {
    _i4.setProperty(
      this,
      'initEvent',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.String, [
    _i2.bool?,
    _i2.bool?,
  ]) get initEvent => (
        _i2.String p0, [
        _i2.bool? p1,
        _i2.bool? p2,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'initEvent',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
              p2 ?? _i6.undefined,
            ],
          );
  set preventDefault(void Function() value) {
    _i4.setProperty(
      this,
      'preventDefault',
      _i4.allowInterop(value),
    );
  }

  void Function() get preventDefault => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'preventDefault',
        ),
        r'call',
        [this],
      );
  set stopImmediatePropagation(void Function() value) {
    _i4.setProperty(
      this,
      'stopImmediatePropagation',
      _i4.allowInterop(value),
    );
  }

  void Function() get stopImmediatePropagation => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'stopImmediatePropagation',
        ),
        r'call',
        [this],
      );
  set stopPropagation(void Function() value) {
    _i4.setProperty(
      this,
      'stopPropagation',
      _i4.allowInterop(value),
    );
  }

  void Function() get stopPropagation => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'stopPropagation',
        ),
        r'call',
        [this],
      );
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class EventListener {
  external factory EventListener._();

  factory EventListener() => EventListener._();
}

extension EventListener$Typings on EventListener {
  void call(_i3.Event evt) {
    _i4.callMethod(
      this,
      'call',
      [
        this,
        evt,
      ],
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class EventListenerObject {
  external factory EventListenerObject._({_i2.dynamic handleEvent});

  factory EventListenerObject({void Function(_i3.Event)? handleEvent}) =>
      EventListenerObject._(
          handleEvent:
              handleEvent == null ? null : _i4.allowInterop(handleEvent));
}

extension EventListenerObject$Typings on EventListenerObject {
  set handleEvent(void Function(_i3.Event) value) {
    _i4.setProperty(
      this,
      'handleEvent',
      _i4.allowInterop(value),
    );
  }

  void Function(_i3.Event) get handleEvent => (_i3.Event p0) => _i4.callMethod(
        _i4.getProperty(
          this,
          'handleEvent',
        ),
        r'call',
        [
          this,
          p0,
        ],
      );
}

enum EventSourceEventMap<T$> {
  error<_i3.Event>(r'error'),
  message<_i3.MessageEvent<_i2.dynamic>>(r'message'),
  open<_i3.Event>(r'open');

  const EventSourceEventMap(this.value);

  final _i2.String value;
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventSource)
@_i1.JS()
@_i1.staticInterop
class EventSource implements _i3.EventTarget {
  factory EventSource(
    _i2.Object url, [
    _i3.EventSourceInit? eventSourceInitDict,
  ]) =>
      _i4.callConstructor(
        _declaredEventSource,
        [
          url,
          eventSourceInitDict ?? _i6.undefined,
        ],
      );

  static _i2.num get connecting => _i4.getProperty(
        _declaredEventSource,
        'CONNECTING',
      );
  static _i2.num get open => _i4.getProperty(
        _declaredEventSource,
        'OPEN',
      );
  static _i2.num get closed => _i4.getProperty(
        _declaredEventSource,
        'CLOSED',
      );
}

_i2.Object get _declaredEventSource => _i4.getProperty(
      _self,
      'EventSource',
    );

extension EventSource$Typings on EventSource {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventSource/error_event)
  _i2.dynamic Function(_i3.Event)? get onerror =>
      (_i3.Event p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onerror',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onerror(_i2.dynamic Function(_i3.Event)? value) {
    _i4.setProperty(
      this,
      'onerror',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventSource/message_event)
  _i2.dynamic Function(_i3.MessageEvent<_i2.dynamic>)? get onmessage =>
      (_i3.MessageEvent<_i2.dynamic> p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onmessage',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onmessage(_i2.dynamic Function(_i3.MessageEvent<_i2.dynamic>)? value) {
    _i4.setProperty(
      this,
      'onmessage',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventSource/open_event)
  _i2.dynamic Function(_i3.Event)? get onopen =>
      (_i3.Event p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onopen',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onopen(_i2.dynamic Function(_i3.Event)? value) {
    _i4.setProperty(
      this,
      'onopen',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// Returns the state of this EventSource object's connection. It can have the values described below.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventSource/readyState)
  _i2.num get readyState => _i4.getProperty(
        this,
        'readyState',
      );

  /// Returns the URL providing the event stream.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventSource/url)
  _i2.String get url => _i4.getProperty(
        this,
        'url',
      );

  /// Returns true if the credentials mode for connection requests to the URL providing the event stream is set to "include", and false otherwise.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventSource/withCredentials)
  _i2.bool get withCredentials => _i4.getProperty(
        this,
        'withCredentials',
      );
  _i2.num get connecting => _i4.getProperty(
        this,
        'CONNECTING',
      );
  _i2.num get open => _i4.getProperty(
        this,
        'OPEN',
      );
  _i2.num get closed => _i4.getProperty(
        this,
        'CLOSED',
      );
  set close(void Function() value) {
    _i4.setProperty(
      this,
      'close',
      _i4.allowInterop(value),
    );
  }

  void Function() get close => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'close',
        ),
        r'call',
        [this],
      );

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$1<K$>(
    _i3.EventSourceEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$2(
    _i2.String type,
    _i2.dynamic Function(_i3.MessageEvent<_i2.dynamic>) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$3(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2, $3
  ({
    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function<K$>(
      _i3.EventSourceEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function(
      _i2.String type,
      _i2.dynamic Function(_i3.MessageEvent<_i2.dynamic>) listener, [
      _i2.Object? options,
    ]) $2,

    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $3,
  }) get addEventListener => (
        $1: _addEventListener$1,
        $2: _addEventListener$2,
        $3: _addEventListener$3,
      );

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$1<K$>(
    _i3.EventSourceEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$2(
    _i2.String type,
    _i2.dynamic Function(_i3.MessageEvent<_i2.dynamic>) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$3(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2, $3
  ({
    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function<K$>(
      _i3.EventSourceEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function(
      _i2.String type,
      _i2.dynamic Function(_i3.MessageEvent<_i2.dynamic>) listener, [
      _i2.Object? options,
    ]) $2,

    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $3,
  }) get removeEventListener => (
        $1: _removeEventListener$1,
        $2: _removeEventListener$2,
        $3: _removeEventListener$3,
      );
}

/* Source:  */
/// EventTarget is a DOM interface implemented by objects that can receive events and may have listeners for them.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget)
@_i1.JS()
@_i1.staticInterop
class EventTarget {
  factory EventTarget() => _i4.callConstructor(
        _declaredEventTarget,
        [],
      );
}

_i2.Object get _declaredEventTarget => _i4.getProperty(
      _self,
      'EventTarget',
    );

extension EventTarget$Typings on EventTarget {
  set addEventListener(
      void Function(
        _i2.String, [
        _i2.Object?,
        _i2.Object?,
      ]) value) {
    _i4.setProperty(
      this,
      'addEventListener',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.String, [
    _i2.Object?,
    _i2.Object?,
  ]) get addEventListener => (
        _i2.String p0, [
        _i2.Object? p1,
        _i2.Object? p2,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'addEventListener',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined ?? _i6.undefined,
              p2 ?? _i6.undefined,
            ],
          );
  set dispatchEvent(_i2.bool Function(_i3.Event) value) {
    _i4.setProperty(
      this,
      'dispatchEvent',
      _i4.allowInterop(value),
    );
  }

  _i2.bool Function(_i3.Event) get dispatchEvent =>
      (_i3.Event p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'dispatchEvent',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set removeEventListener(
      void Function(
        _i2.String, [
        _i2.Object?,
        _i2.Object?,
      ]) value) {
    _i4.setProperty(
      this,
      'removeEventListener',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.String, [
    _i2.Object?,
    _i2.Object?,
  ]) get removeEventListener => (
        _i2.String p0, [
        _i2.Object? p1,
        _i2.Object? p2,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'removeEventListener',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined ?? _i6.undefined,
              p2 ?? _i6.undefined,
            ],
          );
}

/* Source:  */
/// Extends the lifetime of the install and activate events dispatched on the global scope as part of the service worker lifecycle. This ensures that any functional events (like FetchEvent) are not dispatched until it upgrades database schemas and deletes the outdated cache entries.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ExtendableEvent)
@_i1.JS()
@_i1.staticInterop
class ExtendableEvent implements _i3.Event {
  factory ExtendableEvent(
    _i2.String type, [
    _i3.ExtendableEventInit? eventInitDict,
  ]) =>
      _i4.callConstructor(
        _declaredExtendableEvent,
        [
          type,
          eventInitDict ?? _i6.undefined,
        ],
      );
}

_i2.Object get _declaredExtendableEvent => _i4.getProperty(
      _self,
      'ExtendableEvent',
    );

extension ExtendableEvent$Typings on ExtendableEvent {
  set waitUntil(void Function(_i2.Future<_i2.dynamic>) value) {
    _i4.setProperty(
      this,
      'waitUntil',
      _i4.allowInterop(value),
    );
  }

  void Function(_i2.Future<_i2.dynamic>) get waitUntil =>
      (_i2.Future<_i2.dynamic> p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'waitUntil',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
}

/* Source:  */
/// This ServiceWorker API interface represents the event object of a message event fired on a service worker (when a channel message is received on the ServiceWorkerGlobalScope from another context) — extends the lifetime of such events.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ExtendableMessageEvent)
@_i1.JS()
@_i1.staticInterop
class ExtendableMessageEvent implements _i3.ExtendableEvent {
  factory ExtendableMessageEvent(
    _i2.String type, [
    _i3.ExtendableMessageEventInit? eventInitDict,
  ]) =>
      _i4.callConstructor(
        _declaredExtendableMessageEvent,
        [
          type,
          eventInitDict ?? _i6.undefined,
        ],
      );
}

_i2.Object get _declaredExtendableMessageEvent => _i4.getProperty(
      _self,
      'ExtendableMessageEvent',
    );

extension ExtendableMessageEvent$Typings on ExtendableMessageEvent {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ExtendableMessageEvent/data)
  _i2.dynamic get data => _i4.getProperty(
        this,
        'data',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ExtendableMessageEvent/lastEventId)
  _i2.String get lastEventId => _i4.getProperty(
        this,
        'lastEventId',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ExtendableMessageEvent/origin)
  _i2.String get origin => _i4.getProperty(
        this,
        'origin',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ExtendableMessageEvent/ports)
  _i9.ReadonlyArray<_i3.MessagePort> get ports => _i4.getProperty(
        this,
        'ports',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ExtendableMessageEvent/source)
  _i2.dynamic get source => _i4.getProperty(
        this,
        'source',
      );
}

/* Source:  */
/// This is the event type for fetch events dispatched on the service worker global scope. It contains information about the fetch, including the request and how the receiver will treat the response. It provides the event.respondWith() method, which allows us to provide a response to this fetch.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FetchEvent)
@_i1.JS()
@_i1.staticInterop
class FetchEvent implements _i3.ExtendableEvent {
  factory FetchEvent(
    _i2.String type,
    _i3.FetchEventInit eventInitDict,
  ) =>
      _i4.callConstructor(
        _declaredFetchEvent,
        [
          type,
          eventInitDict,
        ],
      );
}

_i2.Object get _declaredFetchEvent => _i4.getProperty(
      _self,
      'FetchEvent',
    );

extension FetchEvent$Typings on FetchEvent {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FetchEvent/clientId)
  _i2.String get clientId => _i4.getProperty(
        this,
        'clientId',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FetchEvent/handled)
  _i2.Future<_i2.dynamic> get handled => _i4.promiseToFuture(_i4.getProperty(
        this,
        'handled',
      ));

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FetchEvent/preloadResponse)
  _i2.Future<_i2.dynamic> get preloadResponse =>
      _i4.promiseToFuture(_i4.getProperty(
        this,
        'preloadResponse',
      ));

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FetchEvent/request)
  _i3.Request get request => _i4.getProperty(
        this,
        'request',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FetchEvent/resultingClientId)
  _i2.String get resultingClientId => _i4.getProperty(
        this,
        'resultingClientId',
      );
  set respondWith(void Function(_i2.Object) value) {
    _i4.setProperty(
      this,
      'respondWith',
      _i4.allowInterop(value),
    );
  }

  void Function(_i2.Object) get respondWith =>
      (_i2.Object p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'respondWith',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
}

/* Source:  */
/// Provides information about files and allows JavaScript in a web page to access their content.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/File)
@_i1.JS()
@_i1.staticInterop
class File implements _i3.Blob {
  factory File(
    _i2.List<_i2.Object> fileBits,
    _i2.String fileName, [
    _i3.FilePropertyBag? options,
  ]) =>
      _i4.callConstructor(
        _declaredFile,
        [
          fileBits,
          fileName,
          options ?? _i6.undefined,
        ],
      );
}

_i2.Object get _declaredFile => _i4.getProperty(
      _self,
      'File',
    );

extension File$Typings on File {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/File/lastModified)
  _i2.num get lastModified => _i4.getProperty(
        this,
        'lastModified',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/File/name)
  _i2.String get name => _i4.getProperty(
        this,
        'name',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/File/webkitRelativePath)
  _i2.String get webkitRelativePath => _i4.getProperty(
        this,
        'webkitRelativePath',
      );
}

/* Source:  */
/// An object of this type is returned by the files property of the HTML <input> element; this lets you access the list of files selected with the <input type="file"> element. It's also used for a list of files dropped into web content when using the drag and drop API; see the DataTransfer object for details on this usage.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileList)
@_i1.JS()
@_i1.staticInterop
class FileList implements _IterableLike$<_i10.IterableIterator<_i3.File>> {
  factory FileList() => _i4.callConstructor(
        _declaredFileList,
        [],
      );
}

_i2.Object get _declaredFileList => _i4.getProperty(
      _self,
      'FileList',
    );

extension FileList$Typings on FileList {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileList/length)
  _i2.num get length => _i4.getProperty(
        this,
        'length',
      );
  set item(_i3.File? Function(_i2.num) value) {
    _i4.setProperty(
      this,
      'item',
      _i4.allowInterop((p0) => () => value(p0) ?? _i6.undefined),
    );
  }

  _i3.File? Function(_i2.num) get item => (_i2.num p0) => _i4.callMethod(
        _i4.getProperty(
          this,
          'item',
        ),
        r'call',
        [
          this,
          p0,
        ],
      );
  _i3.File operator [](_i2.num index) => _i4.getProperty(
        this,
        index,
      );
  void operator []=(
    _i2.num index,
    _i3.File value,
  ) {
    _i4.setProperty(
      this,
      index,
      value,
    );
  }
}

enum FileReaderEventMap<T$ extends _i3.Event> {
  abort<_i3.ProgressEvent<_i3.FileReader>>(r'abort'),
  error<_i3.ProgressEvent<_i3.FileReader>>(r'error'),
  load<_i3.ProgressEvent<_i3.FileReader>>(r'load'),
  loadend<_i3.ProgressEvent<_i3.FileReader>>(r'loadend'),
  loadstart<_i3.ProgressEvent<_i3.FileReader>>(r'loadstart'),
  progress<_i3.ProgressEvent<_i3.FileReader>>(r'progress');

  const FileReaderEventMap(this.value);

  final _i2.String value;
}

/* Source:  */
/// Lets web applications asynchronously read the contents of files (or raw data buffers) stored on the user's computer, using File or Blob objects to specify the file or data to read.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader)
@_i1.JS()
@_i1.staticInterop
class FileReader implements _i3.EventTarget {
  factory FileReader() => _i4.callConstructor(
        _declaredFileReader,
        [],
      );

  static _i2.num get empty => _i4.getProperty(
        _declaredFileReader,
        'EMPTY',
      );
  static _i2.num get loading => _i4.getProperty(
        _declaredFileReader,
        'LOADING',
      );
  static _i2.num get done => _i4.getProperty(
        _declaredFileReader,
        'DONE',
      );
}

_i2.Object get _declaredFileReader => _i4.getProperty(
      _self,
      'FileReader',
    );

extension FileReader$Typings on FileReader {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/error)
  _i3.DOMException? get error => _i4.getProperty(
        this,
        'error',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/abort_event)
  _i2.dynamic Function(_i3.ProgressEvent<_i3.FileReader>)? get onabort =>
      (_i3.ProgressEvent<_i3.FileReader> p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onabort',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onabort(_i2.dynamic Function(_i3.ProgressEvent<_i3.FileReader>)? value) {
    _i4.setProperty(
      this,
      'onabort',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/error_event)
  _i2.dynamic Function(_i3.ProgressEvent<_i3.FileReader>)? get onerror =>
      (_i3.ProgressEvent<_i3.FileReader> p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onerror',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onerror(_i2.dynamic Function(_i3.ProgressEvent<_i3.FileReader>)? value) {
    _i4.setProperty(
      this,
      'onerror',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/load_event)
  _i2.dynamic Function(_i3.ProgressEvent<_i3.FileReader>)? get onload =>
      (_i3.ProgressEvent<_i3.FileReader> p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onload',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onload(_i2.dynamic Function(_i3.ProgressEvent<_i3.FileReader>)? value) {
    _i4.setProperty(
      this,
      'onload',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/loadend_event)
  _i2.dynamic Function(_i3.ProgressEvent<_i3.FileReader>)? get onloadend =>
      (_i3.ProgressEvent<_i3.FileReader> p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onloadend',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onloadend(
      _i2.dynamic Function(_i3.ProgressEvent<_i3.FileReader>)? value) {
    _i4.setProperty(
      this,
      'onloadend',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/loadstart_event)
  _i2.dynamic Function(_i3.ProgressEvent<_i3.FileReader>)? get onloadstart =>
      (_i3.ProgressEvent<_i3.FileReader> p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onloadstart',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onloadstart(
      _i2.dynamic Function(_i3.ProgressEvent<_i3.FileReader>)? value) {
    _i4.setProperty(
      this,
      'onloadstart',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/progress_event)
  _i2.dynamic Function(_i3.ProgressEvent<_i3.FileReader>)? get onprogress =>
      (_i3.ProgressEvent<_i3.FileReader> p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onprogress',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onprogress(
      _i2.dynamic Function(_i3.ProgressEvent<_i3.FileReader>)? value) {
    _i4.setProperty(
      this,
      'onprogress',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/readyState)
  _i2.Object get readyState => _i4.getProperty(
        this,
        'readyState',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/result)
  _i2.dynamic get result => _i4.getProperty(
        this,
        'result',
      );
  _i2.num get empty => _i4.getProperty(
        this,
        'EMPTY',
      );
  _i2.num get loading => _i4.getProperty(
        this,
        'LOADING',
      );
  _i2.num get done => _i4.getProperty(
        this,
        'DONE',
      );
  set abort(void Function() value) {
    _i4.setProperty(
      this,
      'abort',
      _i4.allowInterop(value),
    );
  }

  void Function() get abort => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'abort',
        ),
        r'call',
        [this],
      );
  set readAsArrayBuffer(void Function(_i3.Blob) value) {
    _i4.setProperty(
      this,
      'readAsArrayBuffer',
      _i4.allowInterop(value),
    );
  }

  void Function(_i3.Blob) get readAsArrayBuffer =>
      (_i3.Blob p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'readAsArrayBuffer',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set readAsBinaryString(void Function(_i3.Blob) value) {
    _i4.setProperty(
      this,
      'readAsBinaryString',
      _i4.allowInterop(value),
    );
  }

  void Function(_i3.Blob) get readAsBinaryString =>
      (_i3.Blob p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'readAsBinaryString',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set readAsDataURL(void Function(_i3.Blob) value) {
    _i4.setProperty(
      this,
      'readAsDataURL',
      _i4.allowInterop(value),
    );
  }

  void Function(_i3.Blob) get readAsDataURL => (_i3.Blob p0) => _i4.callMethod(
        _i4.getProperty(
          this,
          'readAsDataURL',
        ),
        r'call',
        [
          this,
          p0,
        ],
      );
  set readAsText(
      void Function(
        _i3.Blob, [
        _i2.String?,
      ]) value) {
    _i4.setProperty(
      this,
      'readAsText',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i3.Blob, [
    _i2.String?,
  ]) get readAsText => (
        _i3.Blob p0, [
        _i2.String? p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'readAsText',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
            ],
          );

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$1<K$ extends _i3.Event>(
    _i3.FileReaderEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function<K$ extends _i3.Event>(
      _i3.FileReaderEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get addEventListener => (
        $1: _addEventListener$1,
        $2: _addEventListener$2,
      );

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$1<K$ extends _i3.Event>(
    _i3.FileReaderEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function<K$ extends _i3.Event>(
      _i3.FileReaderEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get removeEventListener => (
        $1: _removeEventListener$1,
        $2: _removeEventListener$2,
      );
}

/* Source:  */
/// Allows to read File or Blob objects in a synchronous way.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReaderSync)
@_i1.JS()
@_i1.staticInterop
class FileReaderSync {
  factory FileReaderSync() => _i4.callConstructor(
        _declaredFileReaderSync,
        [],
      );
}

_i2.Object get _declaredFileReaderSync => _i4.getProperty(
      _self,
      'FileReaderSync',
    );

extension FileReaderSync$Typings on FileReaderSync {
  set readAsArrayBuffer(_i5.ByteBuffer Function(_i3.Blob) value) {
    _i4.setProperty(
      this,
      'readAsArrayBuffer',
      _i4.allowInterop(value),
    );
  }

  _i5.ByteBuffer Function(_i3.Blob) get readAsArrayBuffer =>
      (_i3.Blob p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'readAsArrayBuffer',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set readAsBinaryString(_i2.String Function(_i3.Blob) value) {
    _i4.setProperty(
      this,
      'readAsBinaryString',
      _i4.allowInterop(value),
    );
  }

  _i2.String Function(_i3.Blob) get readAsBinaryString =>
      (_i3.Blob p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'readAsBinaryString',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set readAsDataURL(_i2.String Function(_i3.Blob) value) {
    _i4.setProperty(
      this,
      'readAsDataURL',
      _i4.allowInterop(value),
    );
  }

  _i2.String Function(_i3.Blob) get readAsDataURL =>
      (_i3.Blob p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'readAsDataURL',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set readAsText(
      _i2.String Function(
        _i3.Blob, [
        _i2.String?,
      ]) value) {
    _i4.setProperty(
      this,
      'readAsText',
      _i4.allowInterop(value),
    );
  }

  _i2.String Function(
    _i3.Blob, [
    _i2.String?,
  ]) get readAsText => (
        _i3.Blob p0, [
        _i2.String? p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'readAsText',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
            ],
          );
}

/* Source:  */
/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryHandle)
@_i1.JS()
@_i1.staticInterop
class FileSystemDirectoryHandle implements _i3.FileSystemHandle {
  factory FileSystemDirectoryHandle() => _i4.callConstructor(
        _declaredFileSystemDirectoryHandle,
        [],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemHandle/kind)
  static _i2.String get kind => _i4.getProperty(
        _declaredFileSystemDirectoryHandle,
        'kind',
      );
}

_i2.Object get _declaredFileSystemDirectoryHandle => _i4.getProperty(
      _self,
      'FileSystemDirectoryHandle',
    );

extension FileSystemDirectoryHandle$Typings on FileSystemDirectoryHandle {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemHandle/kind)
  _i2.String get kind => _i4.getProperty(
        this,
        'kind',
      );
  set getDirectoryHandle(
      _i2.Future<_i3.FileSystemDirectoryHandle> Function(
        _i2.String, [
        _i3.FileSystemGetDirectoryOptions?,
      ]) value) {
    _i4.setProperty(
      this,
      'getDirectoryHandle',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i3.FileSystemDirectoryHandle> Function(
    _i2.String, [
    _i3.FileSystemGetDirectoryOptions?,
  ]) get getDirectoryHandle => (
        _i2.String p0, [
        _i3.FileSystemGetDirectoryOptions? p1,
      ]) =>
          _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'getDirectoryHandle',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
            ],
          ));
  set getFileHandle(
      _i2.Future<_i3.FileSystemFileHandle> Function(
        _i2.String, [
        _i3.FileSystemGetFileOptions?,
      ]) value) {
    _i4.setProperty(
      this,
      'getFileHandle',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i3.FileSystemFileHandle> Function(
    _i2.String, [
    _i3.FileSystemGetFileOptions?,
  ]) get getFileHandle => (
        _i2.String p0, [
        _i3.FileSystemGetFileOptions? p1,
      ]) =>
          _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'getFileHandle',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
            ],
          ));
  set removeEntry(
      _i2.Future<void> Function(
        _i2.String, [
        _i3.FileSystemRemoveOptions?,
      ]) value) {
    _i4.setProperty(
      this,
      'removeEntry',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<void> Function(
    _i2.String, [
    _i3.FileSystemRemoveOptions?,
  ]) get removeEntry => (
        _i2.String p0, [
        _i3.FileSystemRemoveOptions? p1,
      ]) =>
          _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'removeEntry',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
            ],
          ));
  set resolve(
      _i2.Future<_i2.List<_i2.String>?> Function(_i3.FileSystemHandle) value) {
    _i4.setProperty(
      this,
      'resolve',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i2.List<_i2.String>?> Function(_i3.FileSystemHandle)
      get resolve =>
          (_i3.FileSystemHandle p0) => _i4.promiseToFuture(_i4.callMethod(
                _i4.getProperty(
                  this,
                  'resolve',
                ),
                r'call',
                [
                  this,
                  p0,
                ],
              ));
}

/* Source:  */
/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemFileHandle)
@_i1.JS()
@_i1.staticInterop
class FileSystemFileHandle implements _i3.FileSystemHandle {
  factory FileSystemFileHandle() => _i4.callConstructor(
        _declaredFileSystemFileHandle,
        [],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemHandle/kind)
  static _i2.String get kind => _i4.getProperty(
        _declaredFileSystemFileHandle,
        'kind',
      );
}

_i2.Object get _declaredFileSystemFileHandle => _i4.getProperty(
      _self,
      'FileSystemFileHandle',
    );

extension FileSystemFileHandle$Typings on FileSystemFileHandle {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemHandle/kind)
  _i2.String get kind => _i4.getProperty(
        this,
        'kind',
      );
  set createSyncAccessHandle(
      _i2.Future<_i3.FileSystemSyncAccessHandle> Function() value) {
    _i4.setProperty(
      this,
      'createSyncAccessHandle',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i3.FileSystemSyncAccessHandle> Function()
      get createSyncAccessHandle => () => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'createSyncAccessHandle',
            ),
            r'call',
            [this],
          ));
  set createWritable(
      _i2.Future<_i3.FileSystemWritableFileStream> Function(
              [_i3.FileSystemCreateWritableOptions?])
          value) {
    _i4.setProperty(
      this,
      'createWritable',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i3.FileSystemWritableFileStream> Function(
      [_i3.FileSystemCreateWritableOptions?]) get createWritable => (
          [_i3.FileSystemCreateWritableOptions? p0]) =>
      _i4.promiseToFuture(_i4.callMethod(
        _i4.getProperty(
          this,
          'createWritable',
        ),
        r'call',
        [
          this,
          p0 ?? _i6.undefined,
        ],
      ));
  set getFile(_i2.Future<_i3.File> Function() value) {
    _i4.setProperty(
      this,
      'getFile',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i3.File> Function() get getFile =>
      () => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'getFile',
            ),
            r'call',
            [this],
          ));
}

/* Source:  */
/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemHandle)
@_i1.JS()
@_i1.staticInterop
class FileSystemHandle {
  factory FileSystemHandle() => _i4.callConstructor(
        _declaredFileSystemHandle,
        [],
      );
}

_i2.Object get _declaredFileSystemHandle => _i4.getProperty(
      _self,
      'FileSystemHandle',
    );

extension FileSystemHandle$Typings on FileSystemHandle {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemHandle/kind)
  _i3.FileSystemHandleKind get kind =>
      _i3.FileSystemHandleKindOptions.values.byName(_i4.getProperty(
        this,
        'kind',
      ));

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemHandle/name)
  _i2.String get name => _i4.getProperty(
        this,
        'name',
      );
  set isSameEntry(_i2.Future<_i2.bool> Function(_i3.FileSystemHandle) value) {
    _i4.setProperty(
      this,
      'isSameEntry',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i2.bool> Function(_i3.FileSystemHandle) get isSameEntry =>
      (_i3.FileSystemHandle p0) => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'isSameEntry',
            ),
            r'call',
            [
              this,
              p0,
            ],
          ));
}

/* Source:  */
/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemSyncAccessHandle)
@_i1.JS()
@_i1.staticInterop
class FileSystemSyncAccessHandle {
  factory FileSystemSyncAccessHandle() => _i4.callConstructor(
        _declaredFileSystemSyncAccessHandle,
        [],
      );
}

_i2.Object get _declaredFileSystemSyncAccessHandle => _i4.getProperty(
      _self,
      'FileSystemSyncAccessHandle',
    );

extension FileSystemSyncAccessHandle$Typings on FileSystemSyncAccessHandle {
  set close(void Function() value) {
    _i4.setProperty(
      this,
      'close',
      _i4.allowInterop(value),
    );
  }

  void Function() get close => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'close',
        ),
        r'call',
        [this],
      );
  set flush(void Function() value) {
    _i4.setProperty(
      this,
      'flush',
      _i4.allowInterop(value),
    );
  }

  void Function() get flush => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'flush',
        ),
        r'call',
        [this],
      );
  set getSize(_i2.num Function() value) {
    _i4.setProperty(
      this,
      'getSize',
      _i4.allowInterop(value),
    );
  }

  _i2.num Function() get getSize => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'getSize',
        ),
        r'call',
        [this],
      );
  set read(
      _i2.num Function(
        _i2.Object, [
        _i3.FileSystemReadWriteOptions?,
      ]) value) {
    _i4.setProperty(
      this,
      'read',
      _i4.allowInterop(value),
    );
  }

  _i2.num Function(
    _i2.Object, [
    _i3.FileSystemReadWriteOptions?,
  ]) get read => (
        _i2.Object p0, [
        _i3.FileSystemReadWriteOptions? p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'read',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
            ],
          );
  set truncate(void Function(_i2.num) value) {
    _i4.setProperty(
      this,
      'truncate',
      _i4.allowInterop(value),
    );
  }

  void Function(_i2.num) get truncate => (_i2.num p0) => _i4.callMethod(
        _i4.getProperty(
          this,
          'truncate',
        ),
        r'call',
        [
          this,
          p0,
        ],
      );
  set write(
      _i2.num Function(
        _i2.Object, [
        _i3.FileSystemReadWriteOptions?,
      ]) value) {
    _i4.setProperty(
      this,
      'write',
      _i4.allowInterop(value),
    );
  }

  _i2.num Function(
    _i2.Object, [
    _i3.FileSystemReadWriteOptions?,
  ]) get write => (
        _i2.Object p0, [
        _i3.FileSystemReadWriteOptions? p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'write',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
            ],
          );
}

/* Source:  */
/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemWritableFileStream)
@_i1.JS()
@_i1.staticInterop
class FileSystemWritableFileStream implements _i3.WritableStream<_i2.dynamic> {
  factory FileSystemWritableFileStream() => _i4.callConstructor(
        _declaredFileSystemWritableFileStream,
        [],
      );
}

_i2.Object get _declaredFileSystemWritableFileStream => _i4.getProperty(
      _self,
      'FileSystemWritableFileStream',
    );

extension FileSystemWritableFileStream$Typings on FileSystemWritableFileStream {
  set seek(_i2.Future<void> Function(_i2.num) value) {
    _i4.setProperty(
      this,
      'seek',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<void> Function(_i2.num) get seek =>
      (_i2.num p0) => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'seek',
            ),
            r'call',
            [
              this,
              p0,
            ],
          ));
  set truncate(_i2.Future<void> Function(_i2.num) value) {
    _i4.setProperty(
      this,
      'truncate',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<void> Function(_i2.num) get truncate =>
      (_i2.num p0) => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'truncate',
            ),
            r'call',
            [
              this,
              p0,
            ],
          ));
  set write(_i2.Future<void> Function(_i2.Object) value) {
    _i4.setProperty(
      this,
      'write',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<void> Function(_i2.Object) get write =>
      (_i2.Object p0) => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'write',
            ),
            r'call',
            [
              this,
              p0,
            ],
          ));
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace)
@_i1.JS()
@_i1.staticInterop
class FontFace {
  factory FontFace(
    _i2.String family,
    _i2.Object source, [
    _i3.FontFaceDescriptors? descriptors,
  ]) =>
      _i4.callConstructor(
        _declaredFontFace,
        [
          family,
          source,
          descriptors ?? _i6.undefined,
        ],
      );
}

_i2.Object get _declaredFontFace => _i4.getProperty(
      _self,
      'FontFace',
    );

extension FontFace$Typings on FontFace {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/ascentOverride)
  _i2.String get ascentOverride => _i4.getProperty(
        this,
        'ascentOverride',
      );
  set ascentOverride(_i2.String value) {
    _i4.setProperty(
      this,
      'ascentOverride',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/descentOverride)
  _i2.String get descentOverride => _i4.getProperty(
        this,
        'descentOverride',
      );
  set descentOverride(_i2.String value) {
    _i4.setProperty(
      this,
      'descentOverride',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/display)
  _i3.FontDisplay get display =>
      _i3.FontDisplayOptions.values.byName(_i4.getProperty(
        this,
        'display',
      ));
  set display(_i3.FontDisplay value) {
    _i4.setProperty(
      this,
      'display',
      value.name,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/family)
  _i2.String get family => _i4.getProperty(
        this,
        'family',
      );
  set family(_i2.String value) {
    _i4.setProperty(
      this,
      'family',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/featureSettings)
  _i2.String get featureSettings => _i4.getProperty(
        this,
        'featureSettings',
      );
  set featureSettings(_i2.String value) {
    _i4.setProperty(
      this,
      'featureSettings',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/lineGapOverride)
  _i2.String get lineGapOverride => _i4.getProperty(
        this,
        'lineGapOverride',
      );
  set lineGapOverride(_i2.String value) {
    _i4.setProperty(
      this,
      'lineGapOverride',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/loaded)
  _i2.Future<_i3.FontFace> get loaded => _i4.promiseToFuture(_i4.getProperty(
        this,
        'loaded',
      ));

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/status)
  _i3.FontFaceLoadStatus get status =>
      _i3.FontFaceLoadStatusOptions.values.byName(_i4.getProperty(
        this,
        'status',
      ));

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/stretch)
  _i2.String get stretch => _i4.getProperty(
        this,
        'stretch',
      );
  set stretch(_i2.String value) {
    _i4.setProperty(
      this,
      'stretch',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/style)
  _i2.String get style => _i4.getProperty(
        this,
        'style',
      );
  set style(_i2.String value) {
    _i4.setProperty(
      this,
      'style',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/unicodeRange)
  _i2.String get unicodeRange => _i4.getProperty(
        this,
        'unicodeRange',
      );
  set unicodeRange(_i2.String value) {
    _i4.setProperty(
      this,
      'unicodeRange',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/variant)
  _i2.String get variant => _i4.getProperty(
        this,
        'variant',
      );
  set variant(_i2.String value) {
    _i4.setProperty(
      this,
      'variant',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/weight)
  _i2.String get weight => _i4.getProperty(
        this,
        'weight',
      );
  set weight(_i2.String value) {
    _i4.setProperty(
      this,
      'weight',
      value,
    );
  }

  set load(_i2.Future<_i3.FontFace> Function() value) {
    _i4.setProperty(
      this,
      'load',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i3.FontFace> Function() get load =>
      () => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'load',
            ),
            r'call',
            [this],
          ));
}

enum FontFaceSetEventMap<T$> {
  loading<_i3.Event>(r'loading'),
  loadingdone<_i3.Event>(r'loadingdone'),
  loadingerror<_i3.Event>(r'loadingerror');

  const FontFaceSetEventMap(this.value);

  final _i2.String value;
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSet)
@_i1.JS()
@_i1.staticInterop
class FontFaceSet implements _i3.EventTarget {
  factory FontFaceSet(_i2.List<_i3.FontFace> initialFaces) =>
      _i4.callConstructor(
        _declaredFontFaceSet,
        [initialFaces],
      );
}

_i2.Object get _declaredFontFaceSet => _i4.getProperty(
      _self,
      'FontFaceSet',
    );

extension FontFaceSet$Typings on FontFaceSet {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSet/loading_event)
  _i2.dynamic Function(_i3.Event)? get onloading =>
      (_i3.Event p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onloading',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onloading(_i2.dynamic Function(_i3.Event)? value) {
    _i4.setProperty(
      this,
      'onloading',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSet/loadingdone_event)
  _i2.dynamic Function(_i3.Event)? get onloadingdone =>
      (_i3.Event p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onloadingdone',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onloadingdone(_i2.dynamic Function(_i3.Event)? value) {
    _i4.setProperty(
      this,
      'onloadingdone',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSet/loadingerror_event)
  _i2.dynamic Function(_i3.Event)? get onloadingerror =>
      (_i3.Event p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onloadingerror',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onloadingerror(_i2.dynamic Function(_i3.Event)? value) {
    _i4.setProperty(
      this,
      'onloadingerror',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSet/ready)
  _i2.Future<_i3.FontFaceSet> get ready => _i4.promiseToFuture(_i4.getProperty(
        this,
        'ready',
      ));

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSet/status)
  _i3.FontFaceSetLoadStatus get status =>
      _i3.FontFaceSetLoadStatusOptions.values.byName(_i4.getProperty(
        this,
        'status',
      ));
  set check(
      _i2.bool Function(
        _i2.String, [
        _i2.String?,
      ]) value) {
    _i4.setProperty(
      this,
      'check',
      _i4.allowInterop(value),
    );
  }

  _i2.bool Function(
    _i2.String, [
    _i2.String?,
  ]) get check => (
        _i2.String p0, [
        _i2.String? p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'check',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
            ],
          );
  set load(
      _i2.Future<_i2.List<_i3.FontFace>> Function(
        _i2.String, [
        _i2.String?,
      ]) value) {
    _i4.setProperty(
      this,
      'load',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i2.List<_i3.FontFace>> Function(
    _i2.String, [
    _i2.String?,
  ]) get load => (
        _i2.String p0, [
        _i2.String? p1,
      ]) =>
          _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'load',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
            ],
          ));
  set forEach(
      void Function(
        void Function(
          _i3.FontFace,
          _i3.FontFace,
          _i3.FontFaceSet,
        ), [
        _i2.dynamic,
      ]) value) {
    _i4.setProperty(
      this,
      'forEach',
      _i4.allowInterop(value),
    );
  }

  void Function(
    void Function(
      _i3.FontFace,
      _i3.FontFace,
      _i3.FontFaceSet,
    ), [
    _i2.dynamic,
  ]) get forEach => (
        void Function(
          _i3.FontFace,
          _i3.FontFace,
          _i3.FontFaceSet,
        ) p0, [
        _i2.dynamic p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'forEach',
            ),
            r'call',
            [
              this,
              _i4.allowInterop(p0),
              p1,
            ],
          );

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$1<K$>(
    _i3.FontFaceSetEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function<K$>(
      _i3.FontFaceSetEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get addEventListener => (
        $1: _addEventListener$1,
        $2: _addEventListener$2,
      );

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$1<K$>(
    _i3.FontFaceSetEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function<K$>(
      _i3.FontFaceSetEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get removeEventListener => (
        $1: _removeEventListener$1,
        $2: _removeEventListener$2,
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSetLoadEvent)
@_i1.JS()
@_i1.staticInterop
class FontFaceSetLoadEvent implements _i3.Event {
  factory FontFaceSetLoadEvent(
    _i2.String type, [
    _i3.FontFaceSetLoadEventInit? eventInitDict,
  ]) =>
      _i4.callConstructor(
        _declaredFontFaceSetLoadEvent,
        [
          type,
          eventInitDict ?? _i6.undefined,
        ],
      );
}

_i2.Object get _declaredFontFaceSetLoadEvent => _i4.getProperty(
      _self,
      'FontFaceSetLoadEvent',
    );

extension FontFaceSetLoadEvent$Typings on FontFaceSetLoadEvent {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSetLoadEvent/fontfaces)
  _i9.ReadonlyArray<_i3.FontFace> get fontfaces => _i4.getProperty(
        this,
        'fontfaces',
      );
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class FontFaceSource {
  external factory FontFaceSource._({_i2.dynamic fonts});

  factory FontFaceSource({_i3.FontFaceSet? fonts}) =>
      FontFaceSource._(fonts: fonts ?? _i6.undefined);
}

extension FontFaceSource$Typings on FontFaceSource {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/fonts)
  _i3.FontFaceSet get fonts => _i4.getProperty(
        this,
        'fonts',
      );
}

/* Source:  */
/// Provides a way to easily construct a set of key/value pairs representing form fields and their values, which can then be easily sent using the XMLHttpRequest.send() method. It uses the same format a form would use if the encoding type were set to "multipart/form-data".
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData)
@_i1.JS()
@_i1.staticInterop
class FormData
    implements
        _IterableLike$<
            _i10.IterableIterator<
                (
                  _i2.String,
                  _i2.Object,
                )>> {
  factory FormData() => _i4.callConstructor(
        _declaredFormData,
        [],
      );
}

_i2.Object get _declaredFormData => _i4.getProperty(
      _self,
      'FormData',
    );

extension FormData$Typings on FormData {
  set delete(void Function(_i2.String) value) {
    _i4.setProperty(
      this,
      'delete',
      _i4.allowInterop(value),
    );
  }

  void Function(_i2.String) get delete => (_i2.String p0) => _i4.callMethod(
        _i4.getProperty(
          this,
          'delete',
        ),
        r'call',
        [
          this,
          p0,
        ],
      );
  set get(_i2.Object? Function(_i2.String) value) {
    _i4.setProperty(
      this,
      'get',
      _i4.allowInterop(
          (p0) => () => value(p0) ?? _i6.undefined ?? _i6.undefined),
    );
  }

  _i2.Object? Function(_i2.String) get get => (_i2.String p0) => _i4.callMethod(
        _i4.getProperty(
          this,
          'get',
        ),
        r'call',
        [
          this,
          p0,
        ],
      );
  set getAll(_i2.List<_i2.Object> Function(_i2.String) value) {
    _i4.setProperty(
      this,
      'getAll',
      _i4.allowInterop(value),
    );
  }

  _i2.List<_i2.Object> Function(_i2.String) get getAll =>
      (_i2.String p0) => ((_i4.callMethod(
            _i4.getProperty(
              this,
              'getAll',
            ),
            r'call',
            [
              this,
              p0,
            ],
          )) as _i2.List)
              .cast();
  set has(_i2.bool Function(_i2.String) value) {
    _i4.setProperty(
      this,
      'has',
      _i4.allowInterop(value),
    );
  }

  _i2.bool Function(_i2.String) get has => (_i2.String p0) => _i4.callMethod(
        _i4.getProperty(
          this,
          'has',
        ),
        r'call',
        [
          this,
          p0,
        ],
      );
  set forEach(
      void Function(
        void Function(
          _i2.Object,
          _i2.String,
          _i3.FormData,
        ), [
        _i2.dynamic,
      ]) value) {
    _i4.setProperty(
      this,
      'forEach',
      _i4.allowInterop(value),
    );
  }

  void Function(
    void Function(
      _i2.Object,
      _i2.String,
      _i3.FormData,
    ), [
    _i2.dynamic,
  ]) get forEach => (
        void Function(
          _i2.Object,
          _i2.String,
          _i3.FormData,
        ) p0, [
        _i2.dynamic p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'forEach',
            ),
            r'call',
            [
              this,
              _i4.allowInterop(p0),
              p1,
            ],
          );
  set entries(
      _i10.IterableIterator<
                  (
                    _i2.String,
                    _i2.Object,
                  )>
              Function()
          value) {
    _i4.setProperty(
      this,
      'entries',
      _i4.allowInterop(value),
    );
  }

  _i10.IterableIterator<
          (
            _i2.String,
            _i2.Object,
          )>
      Function() get entries => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'entries',
        ),
        r'call',
        [this],
      );
  set keys(_i10.IterableIterator<_i2.String> Function() value) {
    _i4.setProperty(
      this,
      'keys',
      _i4.allowInterop(value),
    );
  }

  _i10.IterableIterator<_i2.String> Function() get keys => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'keys',
        ),
        r'call',
        [this],
      );
  set values(_i10.IterableIterator<_i2.Object> Function() value) {
    _i4.setProperty(
      this,
      'values',
      _i4.allowInterop(value),
    );
  }

  _i10.IterableIterator<_i2.Object> Function() get values =>
      () => _i4.callMethod(
            _i4.getProperty(
              this,
              'values',
            ),
            r'call',
            [this],
          );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData/append)
  void _append$1(
    _i2.String name,
    _i2.Object value,
  ) {
    _i4.callMethod(
      this,
      'append',
      [
        name,
        value,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData/append)
  void _append$2(
    _i2.String name,
    _i2.String value,
  ) {
    _i4.callMethod(
      this,
      'append',
      [
        name,
        value,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData/append)
  void _append$3(
    _i2.String name,
    _i3.Blob blobValue, [
    _i2.String? filename,
  ]) {
    _i4.callMethod(
      this,
      'append',
      [
        name,
        blobValue,
        filename ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2, $3
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData/append)
    void Function(
      _i2.String name,
      _i2.Object value,
    ) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData/append)
    void Function(
      _i2.String name,
      _i2.String value,
    ) $2,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData/append)
    void Function(
      _i2.String name,
      _i3.Blob blobValue, [
      _i2.String? filename,
    ]) $3,
  }) get append => (
        $1: _append$1,
        $2: _append$2,
        $3: _append$3,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData/set)
  void _set$1(
    _i2.String name,
    _i2.Object value,
  ) {
    _i4.callMethod(
      this,
      'set',
      [
        name,
        value,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData/set)
  void _set$2(
    _i2.String name,
    _i2.String value,
  ) {
    _i4.callMethod(
      this,
      'set',
      [
        name,
        value,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData/set)
  void _set$3(
    _i2.String name,
    _i3.Blob blobValue, [
    _i2.String? filename,
  ]) {
    _i4.callMethod(
      this,
      'set',
      [
        name,
        blobValue,
        filename ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2, $3
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData/set)
    void Function(
      _i2.String name,
      _i2.Object value,
    ) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData/set)
    void Function(
      _i2.String name,
      _i2.String value,
    ) $2,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData/set)
    void Function(
      _i2.String name,
      _i3.Blob blobValue, [
      _i2.String? filename,
    ]) $3,
  }) get set => (
        $1: _set$1,
        $2: _set$2,
        $3: _set$3,
      );
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class GenericTransformStream {
  external factory GenericTransformStream._({
    _i2.dynamic readable,
    _i2.dynamic writable,
  });

  factory GenericTransformStream({
    _i3.ReadableStream<_i2.dynamic>? readable,
    _i3.WritableStream<_i2.dynamic>? writable,
  }) =>
      GenericTransformStream._(
        readable: readable ?? _i6.undefined,
        writable: writable ?? _i6.undefined,
      );
}

extension GenericTransformStream$Typings on GenericTransformStream {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CompressionStream/readable)
  _i3.ReadableStream<_i2.dynamic> get readable => _i4.getProperty(
        this,
        'readable',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CompressionStream/writable)
  _i3.WritableStream<_i2.dynamic> get writable => _i4.getProperty(
        this,
        'writable',
      );
}

/* Source:  */
/// This Fetch API interface allows you to perform various actions on HTTP request and response headers. These actions include retrieving, setting, adding to, and removing. A Headers object has an associated header list, which is initially empty and consists of zero or more name and value pairs.  You can add to this using methods like append() (see Examples.) In all methods of this interface, header names are matched by case-insensitive byte sequence.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Headers)
@_i1.JS()
@_i1.staticInterop
class Headers
    implements
        _IterableLike$<
            _i10.IterableIterator<
                (
                  _i2.String,
                  _i2.String,
                )>> {
  factory Headers([_i2.Object? init]) => _i4.callConstructor(
        _declaredHeaders,
        [init ?? _i6.undefined ?? _i6.undefined],
      );
}

_i2.Object get _declaredHeaders => _i4.getProperty(
      _self,
      'Headers',
    );

extension Headers$Typings on Headers {
  set append(
      void Function(
        _i2.String,
        _i2.String,
      ) value) {
    _i4.setProperty(
      this,
      'append',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.String,
    _i2.String,
  ) get append => (
        _i2.String p0,
        _i2.String p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'append',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set delete(void Function(_i2.String) value) {
    _i4.setProperty(
      this,
      'delete',
      _i4.allowInterop(value),
    );
  }

  void Function(_i2.String) get delete => (_i2.String p0) => _i4.callMethod(
        _i4.getProperty(
          this,
          'delete',
        ),
        r'call',
        [
          this,
          p0,
        ],
      );
  set get(_i2.String? Function(_i2.String) value) {
    _i4.setProperty(
      this,
      'get',
      _i4.allowInterop((p0) => () => value(p0) ?? _i6.undefined),
    );
  }

  _i2.String? Function(_i2.String) get get => (_i2.String p0) => _i4.callMethod(
        _i4.getProperty(
          this,
          'get',
        ),
        r'call',
        [
          this,
          p0,
        ],
      );
  set getSetCookie(_i2.List<_i2.String> Function() value) {
    _i4.setProperty(
      this,
      'getSetCookie',
      _i4.allowInterop(value),
    );
  }

  _i2.List<_i2.String> Function() get getSetCookie => () => ((_i4.callMethod(
        _i4.getProperty(
          this,
          'getSetCookie',
        ),
        r'call',
        [this],
      )) as _i2.List)
          .cast();
  set has(_i2.bool Function(_i2.String) value) {
    _i4.setProperty(
      this,
      'has',
      _i4.allowInterop(value),
    );
  }

  _i2.bool Function(_i2.String) get has => (_i2.String p0) => _i4.callMethod(
        _i4.getProperty(
          this,
          'has',
        ),
        r'call',
        [
          this,
          p0,
        ],
      );
  set set(
      void Function(
        _i2.String,
        _i2.String,
      ) value) {
    _i4.setProperty(
      this,
      'set',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.String,
    _i2.String,
  ) get set => (
        _i2.String p0,
        _i2.String p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'set',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set forEach(
      void Function(
        void Function(
          _i2.String,
          _i2.String,
          _i3.Headers,
        ), [
        _i2.dynamic,
      ]) value) {
    _i4.setProperty(
      this,
      'forEach',
      _i4.allowInterop(value),
    );
  }

  void Function(
    void Function(
      _i2.String,
      _i2.String,
      _i3.Headers,
    ), [
    _i2.dynamic,
  ]) get forEach => (
        void Function(
          _i2.String,
          _i2.String,
          _i3.Headers,
        ) p0, [
        _i2.dynamic p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'forEach',
            ),
            r'call',
            [
              this,
              _i4.allowInterop(p0),
              p1,
            ],
          );
  set entries(
      _i10.IterableIterator<
                  (
                    _i2.String,
                    _i2.String,
                  )>
              Function()
          value) {
    _i4.setProperty(
      this,
      'entries',
      _i4.allowInterop(value),
    );
  }

  _i10.IterableIterator<
          (
            _i2.String,
            _i2.String,
          )>
      Function() get entries => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'entries',
        ),
        r'call',
        [this],
      );
  set keys(_i10.IterableIterator<_i2.String> Function() value) {
    _i4.setProperty(
      this,
      'keys',
      _i4.allowInterop(value),
    );
  }

  _i10.IterableIterator<_i2.String> Function() get keys => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'keys',
        ),
        r'call',
        [this],
      );
  set values(_i10.IterableIterator<_i2.String> Function() value) {
    _i4.setProperty(
      this,
      'values',
      _i4.allowInterop(value),
    );
  }

  _i10.IterableIterator<_i2.String> Function() get values =>
      () => _i4.callMethod(
            _i4.getProperty(
              this,
              'values',
            ),
            r'call',
            [this],
          );
}

/* Source:  */
/// This IndexedDB API interface represents a cursor for traversing or iterating over multiple records in a database.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor)
@_i1.JS()
@_i1.staticInterop
class IDBCursor {
  factory IDBCursor() => _i4.callConstructor(
        _declaredIDBCursor,
        [],
      );
}

_i2.Object get _declaredIDBCursor => _i4.getProperty(
      _self,
      'IDBCursor',
    );

extension IDBCursor$Typings on IDBCursor {
  /// Returns the direction ("next", "nextunique", "prev" or "prevunique") of the cursor.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/direction)
  _i3.IDBCursorDirection get direction =>
      _i3.IDBCursorDirectionOptions.values.byName(_i4.getProperty(
        this,
        'direction',
      ));

  /// Returns the key of the cursor. Throws a "InvalidStateError" DOMException if the cursor is advancing or is finished.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/key)
  _i2.Object get key => _i4.getProperty(
        this,
        'key',
      );

  /// Returns the effective key of the cursor. Throws a "InvalidStateError" DOMException if the cursor is advancing or is finished.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/primaryKey)
  _i2.Object get primaryKey => _i4.getProperty(
        this,
        'primaryKey',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/request)
  _i3.IDBRequest<_i2.dynamic> get request => _i4.getProperty(
        this,
        'request',
      );

  /// Returns the IDBObjectStore or IDBIndex the cursor was opened from.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/source)
  _i2.Object get source => _i4.getProperty(
        this,
        'source',
      );
  set advance(void Function(_i2.num) value) {
    _i4.setProperty(
      this,
      'advance',
      _i4.allowInterop(value),
    );
  }

  void Function(_i2.num) get advance => (_i2.num p0) => _i4.callMethod(
        _i4.getProperty(
          this,
          'advance',
        ),
        r'call',
        [
          this,
          p0,
        ],
      );
  set continue$(void Function([_i2.Object?]) value) {
    _i4.setProperty(
      this,
      'continue',
      _i4.allowInterop(value),
    );
  }

  void Function([_i2.Object?]) get continue$ =>
      ([_i2.Object? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'continue',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined ?? _i6.undefined,
            ],
          );
  set continuePrimaryKey(
      void Function(
        _i2.Object,
        _i2.Object,
      ) value) {
    _i4.setProperty(
      this,
      'continuePrimaryKey',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.Object,
    _i2.Object,
  ) get continuePrimaryKey => (
        _i2.Object p0,
        _i2.Object p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'continuePrimaryKey',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set delete(_i3.IDBRequest<_i2.dynamic> Function() value) {
    _i4.setProperty(
      this,
      'delete',
      _i4.allowInterop(value),
    );
  }

  _i3.IDBRequest<_i2.dynamic> Function() get delete => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'delete',
        ),
        r'call',
        [this],
      );
  set update(_i3.IDBRequest<_i2.Object> Function([_i2.dynamic]) value) {
    _i4.setProperty(
      this,
      'update',
      _i4.allowInterop(value),
    );
  }

  _i3.IDBRequest<_i2.Object> Function([_i2.dynamic]) get update =>
      ([_i2.dynamic p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'update',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
}

/* Source:  */
/// This IndexedDB API interface represents a cursor for traversing or iterating over multiple records in a database. It is the same as the IDBCursor, except that it includes the value property.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursorWithValue)
@_i1.JS()
@_i1.staticInterop
class IDBCursorWithValue implements _i3.IDBCursor {
  factory IDBCursorWithValue() => _i4.callConstructor(
        _declaredIDBCursorWithValue,
        [],
      );
}

_i2.Object get _declaredIDBCursorWithValue => _i4.getProperty(
      _self,
      'IDBCursorWithValue',
    );

extension IDBCursorWithValue$Typings on IDBCursorWithValue {
  /// Returns the cursor's current value.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursorWithValue/value)
  _i2.dynamic get value => _i4.getProperty(
        this,
        'value',
      );
}

enum IDBDatabaseEventMap<T$> {
  abort<_i3.Event>(r'abort'),
  close<_i3.Event>(r'close'),
  error<_i3.Event>(r'error'),
  versionchange<_i3.IDBVersionChangeEvent>(r'versionchange');

  const IDBDatabaseEventMap(this.value);

  final _i2.String value;
}

/* Source:  */
/// This IndexedDB API interface provides a connection to a database; you can use an IDBDatabase object to open a transaction on your database then create, manipulate, and delete objects (data) in that database. The interface provides the only way to get and manage versions of the database.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase)
@_i1.JS()
@_i1.staticInterop
class IDBDatabase implements _i3.EventTarget {
  factory IDBDatabase() => _i4.callConstructor(
        _declaredIDBDatabase,
        [],
      );
}

_i2.Object get _declaredIDBDatabase => _i4.getProperty(
      _self,
      'IDBDatabase',
    );

extension IDBDatabase$Typings on IDBDatabase {
  /// Returns the name of the database.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/name)
  _i2.String get name => _i4.getProperty(
        this,
        'name',
      );

  /// Returns a list of the names of object stores in the database.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/objectStoreNames)
  _i3.DOMStringList get objectStoreNames => _i4.getProperty(
        this,
        'objectStoreNames',
      );
  _i2.dynamic Function(_i3.Event)? get onabort =>
      (_i3.Event p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onabort',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onabort(_i2.dynamic Function(_i3.Event)? value) {
    _i4.setProperty(
      this,
      'onabort',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/close_event)
  _i2.dynamic Function(_i3.Event)? get onclose =>
      (_i3.Event p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onclose',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onclose(_i2.dynamic Function(_i3.Event)? value) {
    _i4.setProperty(
      this,
      'onclose',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  _i2.dynamic Function(_i3.Event)? get onerror =>
      (_i3.Event p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onerror',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onerror(_i2.dynamic Function(_i3.Event)? value) {
    _i4.setProperty(
      this,
      'onerror',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/versionchange_event)
  _i2.dynamic Function(_i3.IDBVersionChangeEvent)? get onversionchange =>
      (_i3.IDBVersionChangeEvent p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onversionchange',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onversionchange(_i2.dynamic Function(_i3.IDBVersionChangeEvent)? value) {
    _i4.setProperty(
      this,
      'onversionchange',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// Returns the version of the database.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/version)
  _i2.num get version => _i4.getProperty(
        this,
        'version',
      );
  set close(void Function() value) {
    _i4.setProperty(
      this,
      'close',
      _i4.allowInterop(value),
    );
  }

  void Function() get close => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'close',
        ),
        r'call',
        [this],
      );
  set createObjectStore(
      _i3.IDBObjectStore Function(
        _i2.String, [
        _i3.IDBObjectStoreParameters?,
      ]) value) {
    _i4.setProperty(
      this,
      'createObjectStore',
      _i4.allowInterop(value),
    );
  }

  _i3.IDBObjectStore Function(
    _i2.String, [
    _i3.IDBObjectStoreParameters?,
  ]) get createObjectStore => (
        _i2.String p0, [
        _i3.IDBObjectStoreParameters? p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'createObjectStore',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
            ],
          );
  set deleteObjectStore(void Function(_i2.String) value) {
    _i4.setProperty(
      this,
      'deleteObjectStore',
      _i4.allowInterop(value),
    );
  }

  void Function(_i2.String) get deleteObjectStore =>
      (_i2.String p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'deleteObjectStore',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );

  /// Returns a new transaction with the given mode ("readonly" or "readwrite") and scope which can be a single object store name or an array of names.
  ///
  ///  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/transaction)
  _i3.IDBTransaction _transaction$1(
    _i2.Object storeNames, [
    _i3.IDBTransactionMode? mode,
    _i3.IDBTransactionOptions? options,
  ]) =>
      _i4.callMethod(
        this,
        'transaction',
        [
          storeNames,
          mode?.name ?? _i6.undefined ?? _i6.undefined,
          options ?? _i6.undefined,
        ],
      );

  /// Returns a new transaction with the given mode ("readonly" or "readwrite") and scope which can be a single object store name or an array of names.
  ///
  ///  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/transaction)
  _i3.IDBTransaction _transaction$2(
    _i2.Object storeNames, [
    _i3.IDBTransactionMode? mode,
    _i3.IDBTransactionOptions? options,
  ]) =>
      _i4.callMethod(
        this,
        'transaction',
        [
          storeNames,
          mode?.name ?? _i6.undefined ?? _i6.undefined,
          options ?? _i6.undefined,
        ],
      );

  /// Overload accessor: $1, $2
  ({
    /// Returns a new transaction with the given mode ("readonly" or "readwrite") and scope which can be a single object store name or an array of names.
    ///
    ///  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/transaction)
    _i3.IDBTransaction Function(
      _i2.Object storeNames, [
      _i3.IDBTransactionMode? mode,
      _i3.IDBTransactionOptions? options,
    ]) $1,

    /// Returns a new transaction with the given mode ("readonly" or "readwrite") and scope which can be a single object store name or an array of names.
    ///
    ///  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/transaction)
    _i3.IDBTransaction Function(
      _i2.Object storeNames, [
      _i3.IDBTransactionMode? mode,
      _i3.IDBTransactionOptions? options,
    ]) $2,
  }) get transaction => (
        $1: _transaction$1,
        $2: _transaction$2,
      );

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$1<K$>(
    _i3.IDBDatabaseEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function<K$>(
      _i3.IDBDatabaseEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get addEventListener => (
        $1: _addEventListener$1,
        $2: _addEventListener$2,
      );

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$1<K$>(
    _i3.IDBDatabaseEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function<K$>(
      _i3.IDBDatabaseEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get removeEventListener => (
        $1: _removeEventListener$1,
        $2: _removeEventListener$2,
      );
}

/* Source:  */
/// In the following code snippet, we make a request to open a database, and include handlers for the success and error cases. For a full working example, see our To-do Notifications app (view example live.)
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBFactory)
@_i1.JS()
@_i1.staticInterop
class IDBFactory {
  factory IDBFactory() => _i4.callConstructor(
        _declaredIDBFactory,
        [],
      );
}

_i2.Object get _declaredIDBFactory => _i4.getProperty(
      _self,
      'IDBFactory',
    );

extension IDBFactory$Typings on IDBFactory {
  set cmp(
      _i2.num Function([
        _i2.dynamic,
        _i2.dynamic,
      ]) value) {
    _i4.setProperty(
      this,
      'cmp',
      _i4.allowInterop(value),
    );
  }

  _i2.num Function([
    _i2.dynamic,
    _i2.dynamic,
  ]) get cmp => ([
        _i2.dynamic p0,
        _i2.dynamic p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'cmp',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set databases(_i2.Future<_i2.List<_i3.IDBDatabaseInfo>> Function() value) {
    _i4.setProperty(
      this,
      'databases',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i2.List<_i3.IDBDatabaseInfo>> Function() get databases =>
      () => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'databases',
            ),
            r'call',
            [this],
          ));
  set deleteDatabase(_i3.IDBOpenDBRequest Function(_i2.String) value) {
    _i4.setProperty(
      this,
      'deleteDatabase',
      _i4.allowInterop(value),
    );
  }

  _i3.IDBOpenDBRequest Function(_i2.String) get deleteDatabase =>
      (_i2.String p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'deleteDatabase',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set open(
      _i3.IDBOpenDBRequest Function(
        _i2.String, [
        _i2.num?,
      ]) value) {
    _i4.setProperty(
      this,
      'open',
      _i4.allowInterop(value),
    );
  }

  _i3.IDBOpenDBRequest Function(
    _i2.String, [
    _i2.num?,
  ]) get open => (
        _i2.String p0, [
        _i2.num? p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'open',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
            ],
          );
}

/* Source:  */
/// IDBIndex interface of the IndexedDB API provides asynchronous access to an index in a database. An index is a kind of object store for looking up records in another object store, called the referenced object store. You use this interface to retrieve data.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex)
@_i1.JS()
@_i1.staticInterop
class IDBIndex {
  factory IDBIndex() => _i4.callConstructor(
        _declaredIDBIndex,
        [],
      );
}

_i2.Object get _declaredIDBIndex => _i4.getProperty(
      _self,
      'IDBIndex',
    );

extension IDBIndex$Typings on IDBIndex {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/keyPath)
  _i2.Object get keyPath => _i4.getProperty(
        this,
        'keyPath',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/multiEntry)
  _i2.bool get multiEntry => _i4.getProperty(
        this,
        'multiEntry',
      );

  /// Returns the name of the index.
  ///
  ///  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/name)
  _i2.String get name => _i4.getProperty(
        this,
        'name',
      );
  set name(_i2.String value) {
    _i4.setProperty(
      this,
      'name',
      value,
    );
  }

  /// Returns the IDBObjectStore the index belongs to.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/objectStore)
  _i3.IDBObjectStore get objectStore => _i4.getProperty(
        this,
        'objectStore',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/unique)
  _i2.bool get unique => _i4.getProperty(
        this,
        'unique',
      );
  set count(_i3.IDBRequest<_i2.num> Function([_i2.Object?]) value) {
    _i4.setProperty(
      this,
      'count',
      _i4.allowInterop(value),
    );
  }

  _i3.IDBRequest<_i2.num> Function([_i2.Object?]) get count =>
      ([_i2.Object? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'count',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set get(_i3.IDBRequest<_i2.dynamic> Function(_i2.Object) value) {
    _i4.setProperty(
      this,
      'get',
      _i4.allowInterop(value),
    );
  }

  _i3.IDBRequest<_i2.dynamic> Function(_i2.Object) get get =>
      (_i2.Object p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'get',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set getAll(
      _i3.IDBRequest<_i2.List<_i2.dynamic>> Function([
        _i2.dynamic,
        _i2.num?,
      ]) value) {
    _i4.setProperty(
      this,
      'getAll',
      _i4.allowInterop(value),
    );
  }

  _i3.IDBRequest<_i2.List<_i2.dynamic>> Function([
    _i2.dynamic,
    _i2.num?,
  ]) get getAll => ([
        _i2.dynamic p0,
        _i2.num? p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'getAll',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
            ],
          );
  set getAllKeys(
      _i3.IDBRequest<_i2.List<_i2.Object>> Function([
        _i2.dynamic,
        _i2.num?,
      ]) value) {
    _i4.setProperty(
      this,
      'getAllKeys',
      _i4.allowInterop(value),
    );
  }

  _i3.IDBRequest<_i2.List<_i2.Object>> Function([
    _i2.dynamic,
    _i2.num?,
  ]) get getAllKeys => ([
        _i2.dynamic p0,
        _i2.num? p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'getAllKeys',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
            ],
          );
  set getKey(_i3.IDBRequest<_i2.Object?> Function(_i2.Object) value) {
    _i4.setProperty(
      this,
      'getKey',
      _i4.allowInterop(value),
    );
  }

  _i3.IDBRequest<_i2.Object?> Function(_i2.Object) get getKey =>
      (_i2.Object p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'getKey',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set openCursor(
      _i3.IDBRequest<_i3.IDBCursorWithValue?> Function([
        _i2.dynamic,
        _i3.IDBCursorDirection?,
      ]) value) {
    _i4.setProperty(
      this,
      'openCursor',
      _i4.allowInterop(value),
    );
  }

  _i3.IDBRequest<_i3.IDBCursorWithValue?> Function([
    _i2.dynamic,
    _i3.IDBCursorDirection?,
  ]) get openCursor => ([
        _i2.dynamic p0,
        _i3.IDBCursorDirection? p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'openCursor',
            ),
            r'call',
            [
              this,
              p0,
              p1?.name ?? _i6.undefined ?? _i6.undefined,
            ],
          );
  set openKeyCursor(
      _i3.IDBRequest<_i3.IDBCursor?> Function([
        _i2.dynamic,
        _i3.IDBCursorDirection?,
      ]) value) {
    _i4.setProperty(
      this,
      'openKeyCursor',
      _i4.allowInterop(value),
    );
  }

  _i3.IDBRequest<_i3.IDBCursor?> Function([
    _i2.dynamic,
    _i3.IDBCursorDirection?,
  ]) get openKeyCursor => ([
        _i2.dynamic p0,
        _i3.IDBCursorDirection? p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'openKeyCursor',
            ),
            r'call',
            [
              this,
              p0,
              p1?.name ?? _i6.undefined ?? _i6.undefined,
            ],
          );
}

/* Source:  */
/// A key range can be a single value or a range with upper and lower bounds or endpoints. If the key range has both upper and lower bounds, then it is bounded; if it has no bounds, it is unbounded. A bounded key range can either be open (the endpoints are excluded) or closed (the endpoints are included). To retrieve all keys within a certain range, you can use the following code constructs:
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange)
@_i1.JS()
@_i1.staticInterop
class IDBKeyRange {
  factory IDBKeyRange() => _i4.callConstructor(
        _declaredIDBKeyRange,
        [],
      );

  static set bound(
      _i3.IDBKeyRange Function([
        _i2.dynamic,
        _i2.dynamic,
        _i2.bool?,
        _i2.bool?,
      ]) value) {
    _i4.setProperty(
      _i8.target728,
      'bound',
      _i4.allowInterop(value),
    );
  }

  static _i3.IDBKeyRange Function([
    _i2.dynamic,
    _i2.dynamic,
    _i2.bool?,
    _i2.bool?,
  ]) get bound => ([
        _i2.dynamic p0,
        _i2.dynamic p1,
        _i2.bool? p2,
        _i2.bool? p3,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              _i8.target728,
              'bound',
            ),
            r'call',
            [
              _i8.target728,
              p0,
              p1,
              p2 ?? _i6.undefined,
              p3 ?? _i6.undefined,
            ],
          );
  static set lowerBound(
      _i3.IDBKeyRange Function([
        _i2.dynamic,
        _i2.bool?,
      ]) value) {
    _i4.setProperty(
      _i8.target728,
      'lowerBound',
      _i4.allowInterop(value),
    );
  }

  static _i3.IDBKeyRange Function([
    _i2.dynamic,
    _i2.bool?,
  ]) get lowerBound => ([
        _i2.dynamic p0,
        _i2.bool? p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              _i8.target728,
              'lowerBound',
            ),
            r'call',
            [
              _i8.target728,
              p0,
              p1 ?? _i6.undefined,
            ],
          );
  static set only(_i3.IDBKeyRange Function([_i2.dynamic]) value) {
    _i4.setProperty(
      _i8.target728,
      'only',
      _i4.allowInterop(value),
    );
  }

  static _i3.IDBKeyRange Function([_i2.dynamic]) get only =>
      ([_i2.dynamic p0]) => _i4.callMethod(
            _i4.getProperty(
              _i8.target728,
              'only',
            ),
            r'call',
            [
              _i8.target728,
              p0,
            ],
          );
  static set upperBound(
      _i3.IDBKeyRange Function([
        _i2.dynamic,
        _i2.bool?,
      ]) value) {
    _i4.setProperty(
      _i8.target728,
      'upperBound',
      _i4.allowInterop(value),
    );
  }

  static _i3.IDBKeyRange Function([
    _i2.dynamic,
    _i2.bool?,
  ]) get upperBound => ([
        _i2.dynamic p0,
        _i2.bool? p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              _i8.target728,
              'upperBound',
            ),
            r'call',
            [
              _i8.target728,
              p0,
              p1 ?? _i6.undefined,
            ],
          );
}

_i2.Object get _declaredIDBKeyRange => _i4.getProperty(
      _self,
      'IDBKeyRange',
    );

extension IDBKeyRange$Typings on IDBKeyRange {
  /// Returns lower bound, or undefined if none.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/lower)
  _i2.dynamic get lower => _i4.getProperty(
        this,
        'lower',
      );

  /// Returns true if the lower open flag is set, and false otherwise.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/lowerOpen)
  _i2.bool get lowerOpen => _i4.getProperty(
        this,
        'lowerOpen',
      );

  /// Returns upper bound, or undefined if none.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/upper)
  _i2.dynamic get upper => _i4.getProperty(
        this,
        'upper',
      );

  /// Returns true if the upper open flag is set, and false otherwise.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/upperOpen)
  _i2.bool get upperOpen => _i4.getProperty(
        this,
        'upperOpen',
      );
  set includes(_i2.bool Function([_i2.dynamic]) value) {
    _i4.setProperty(
      this,
      'includes',
      _i4.allowInterop(value),
    );
  }

  _i2.bool Function([_i2.dynamic]) get includes =>
      ([_i2.dynamic p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'includes',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
}

/* Source:  */
/// This example shows a variety of different uses of object stores, from updating the data structure with IDBObjectStore.createIndex inside an onupgradeneeded function, to adding a new item to our object store with IDBObjectStore.add. For a full working example, see our To-do Notifications app (view example live.)
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore)
@_i1.JS()
@_i1.staticInterop
class IDBObjectStore {
  factory IDBObjectStore() => _i4.callConstructor(
        _declaredIDBObjectStore,
        [],
      );
}

_i2.Object get _declaredIDBObjectStore => _i4.getProperty(
      _self,
      'IDBObjectStore',
    );

extension IDBObjectStore$Typings on IDBObjectStore {
  /// Returns true if the store has a key generator, and false otherwise.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/autoIncrement)
  _i2.bool get autoIncrement => _i4.getProperty(
        this,
        'autoIncrement',
      );

  /// Returns a list of the names of indexes in the store.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/indexNames)
  _i3.DOMStringList get indexNames => _i4.getProperty(
        this,
        'indexNames',
      );

  /// Returns the key path of the store, or null if none.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/keyPath)
  _i2.Object get keyPath => _i4.getProperty(
        this,
        'keyPath',
      );

  /// Returns the name of the store.
  ///
  ///  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/name)
  _i2.String get name => _i4.getProperty(
        this,
        'name',
      );
  set name(_i2.String value) {
    _i4.setProperty(
      this,
      'name',
      value,
    );
  }

  /// Returns the associated transaction.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/transaction)
  _i3.IDBTransaction get transaction => _i4.getProperty(
        this,
        'transaction',
      );
  set add(
      _i3.IDBRequest<_i2.Object> Function([
        _i2.dynamic,
        _i2.Object?,
      ]) value) {
    _i4.setProperty(
      this,
      'add',
      _i4.allowInterop(value),
    );
  }

  _i3.IDBRequest<_i2.Object> Function([
    _i2.dynamic,
    _i2.Object?,
  ]) get add => ([
        _i2.dynamic p0,
        _i2.Object? p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'add',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined ?? _i6.undefined,
            ],
          );
  set clear(_i3.IDBRequest<_i2.dynamic> Function() value) {
    _i4.setProperty(
      this,
      'clear',
      _i4.allowInterop(value),
    );
  }

  _i3.IDBRequest<_i2.dynamic> Function() get clear => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'clear',
        ),
        r'call',
        [this],
      );
  set count(_i3.IDBRequest<_i2.num> Function([_i2.Object?]) value) {
    _i4.setProperty(
      this,
      'count',
      _i4.allowInterop(value),
    );
  }

  _i3.IDBRequest<_i2.num> Function([_i2.Object?]) get count =>
      ([_i2.Object? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'count',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set delete(_i3.IDBRequest<_i2.dynamic> Function(_i2.Object) value) {
    _i4.setProperty(
      this,
      'delete',
      _i4.allowInterop(value),
    );
  }

  _i3.IDBRequest<_i2.dynamic> Function(_i2.Object) get delete =>
      (_i2.Object p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'delete',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set deleteIndex(void Function(_i2.String) value) {
    _i4.setProperty(
      this,
      'deleteIndex',
      _i4.allowInterop(value),
    );
  }

  void Function(_i2.String) get deleteIndex =>
      (_i2.String p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'deleteIndex',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set get(_i3.IDBRequest<_i2.dynamic> Function(_i2.Object) value) {
    _i4.setProperty(
      this,
      'get',
      _i4.allowInterop(value),
    );
  }

  _i3.IDBRequest<_i2.dynamic> Function(_i2.Object) get get =>
      (_i2.Object p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'get',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set getAll(
      _i3.IDBRequest<_i2.List<_i2.dynamic>> Function([
        _i2.dynamic,
        _i2.num?,
      ]) value) {
    _i4.setProperty(
      this,
      'getAll',
      _i4.allowInterop(value),
    );
  }

  _i3.IDBRequest<_i2.List<_i2.dynamic>> Function([
    _i2.dynamic,
    _i2.num?,
  ]) get getAll => ([
        _i2.dynamic p0,
        _i2.num? p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'getAll',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
            ],
          );
  set getAllKeys(
      _i3.IDBRequest<_i2.List<_i2.Object>> Function([
        _i2.dynamic,
        _i2.num?,
      ]) value) {
    _i4.setProperty(
      this,
      'getAllKeys',
      _i4.allowInterop(value),
    );
  }

  _i3.IDBRequest<_i2.List<_i2.Object>> Function([
    _i2.dynamic,
    _i2.num?,
  ]) get getAllKeys => ([
        _i2.dynamic p0,
        _i2.num? p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'getAllKeys',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
            ],
          );
  set getKey(_i3.IDBRequest<_i2.Object?> Function(_i2.Object) value) {
    _i4.setProperty(
      this,
      'getKey',
      _i4.allowInterop(value),
    );
  }

  _i3.IDBRequest<_i2.Object?> Function(_i2.Object) get getKey =>
      (_i2.Object p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'getKey',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set index(_i3.IDBIndex Function(_i2.String) value) {
    _i4.setProperty(
      this,
      'index',
      _i4.allowInterop(value),
    );
  }

  _i3.IDBIndex Function(_i2.String) get index =>
      (_i2.String p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'index',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set openCursor(
      _i3.IDBRequest<_i3.IDBCursorWithValue?> Function([
        _i2.dynamic,
        _i3.IDBCursorDirection?,
      ]) value) {
    _i4.setProperty(
      this,
      'openCursor',
      _i4.allowInterop(value),
    );
  }

  _i3.IDBRequest<_i3.IDBCursorWithValue?> Function([
    _i2.dynamic,
    _i3.IDBCursorDirection?,
  ]) get openCursor => ([
        _i2.dynamic p0,
        _i3.IDBCursorDirection? p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'openCursor',
            ),
            r'call',
            [
              this,
              p0,
              p1?.name ?? _i6.undefined ?? _i6.undefined,
            ],
          );
  set openKeyCursor(
      _i3.IDBRequest<_i3.IDBCursor?> Function([
        _i2.dynamic,
        _i3.IDBCursorDirection?,
      ]) value) {
    _i4.setProperty(
      this,
      'openKeyCursor',
      _i4.allowInterop(value),
    );
  }

  _i3.IDBRequest<_i3.IDBCursor?> Function([
    _i2.dynamic,
    _i3.IDBCursorDirection?,
  ]) get openKeyCursor => ([
        _i2.dynamic p0,
        _i3.IDBCursorDirection? p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'openKeyCursor',
            ),
            r'call',
            [
              this,
              p0,
              p1?.name ?? _i6.undefined ?? _i6.undefined,
            ],
          );
  set put(
      _i3.IDBRequest<_i2.Object> Function([
        _i2.dynamic,
        _i2.Object?,
      ]) value) {
    _i4.setProperty(
      this,
      'put',
      _i4.allowInterop(value),
    );
  }

  _i3.IDBRequest<_i2.Object> Function([
    _i2.dynamic,
    _i2.Object?,
  ]) get put => ([
        _i2.dynamic p0,
        _i2.Object? p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'put',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined ?? _i6.undefined,
            ],
          );

  /// Creates a new index in store with the given name, keyPath and options and returns a new IDBIndex. If the keyPath and options define constraints that cannot be satisfied with the data already in store the upgrade transaction will abort with a "ConstraintError" DOMException.
  ///
  ///  Throws an "InvalidStateError" DOMException if not called within an upgrade transaction.
  ///
  ///  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/createIndex)
  _i3.IDBIndex _createIndex$1(
    _i2.String name,
    _i2.Object keyPath, [
    _i3.IDBIndexParameters? options,
  ]) =>
      _i4.callMethod(
        this,
        'createIndex',
        [
          name,
          keyPath,
          options ?? _i6.undefined,
        ],
      );

  /// Creates a new index in store with the given name, keyPath and options and returns a new IDBIndex. If the keyPath and options define constraints that cannot be satisfied with the data already in store the upgrade transaction will abort with a "ConstraintError" DOMException.
  ///
  ///  Throws an "InvalidStateError" DOMException if not called within an upgrade transaction.
  ///
  ///  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/createIndex)
  _i3.IDBIndex _createIndex$2(
    _i2.String name,
    _i2.Object keyPath, [
    _i3.IDBIndexParameters? options,
  ]) =>
      _i4.callMethod(
        this,
        'createIndex',
        [
          name,
          keyPath,
          options ?? _i6.undefined,
        ],
      );

  /// Overload accessor: $1, $2
  ({
    /// Creates a new index in store with the given name, keyPath and options and returns a new IDBIndex. If the keyPath and options define constraints that cannot be satisfied with the data already in store the upgrade transaction will abort with a "ConstraintError" DOMException.
    ///
    ///  Throws an "InvalidStateError" DOMException if not called within an upgrade transaction.
    ///
    ///  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/createIndex)
    _i3.IDBIndex Function(
      _i2.String name,
      _i2.Object keyPath, [
      _i3.IDBIndexParameters? options,
    ]) $1,

    /// Creates a new index in store with the given name, keyPath and options and returns a new IDBIndex. If the keyPath and options define constraints that cannot be satisfied with the data already in store the upgrade transaction will abort with a "ConstraintError" DOMException.
    ///
    ///  Throws an "InvalidStateError" DOMException if not called within an upgrade transaction.
    ///
    ///  [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/createIndex)
    _i3.IDBIndex Function(
      _i2.String name,
      _i2.Object keyPath, [
      _i3.IDBIndexParameters? options,
    ]) $2,
  }) get createIndex => (
        $1: _createIndex$1,
        $2: _createIndex$2,
      );
}

enum IDBOpenDBRequestEventMap<T$> {
  blocked<_i3.IDBVersionChangeEvent>(r'blocked'),
  upgradeneeded<_i3.IDBVersionChangeEvent>(r'upgradeneeded'),
  error<_i3.Event>(r'error'),
  success<_i3.Event>(r'success');

  const IDBOpenDBRequestEventMap(this.value);

  final _i2.String value;
}

/* Source:  */
/// Also inherits methods from its parents IDBRequest and EventTarget.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBOpenDBRequest)
@_i1.JS()
@_i1.staticInterop
class IDBOpenDBRequest implements _i3.IDBRequest<_i3.IDBDatabase> {
  factory IDBOpenDBRequest() => _i4.callConstructor(
        _declaredIDBOpenDBRequest,
        [],
      );
}

_i2.Object get _declaredIDBOpenDBRequest => _i4.getProperty(
      _self,
      'IDBOpenDBRequest',
    );

extension IDBOpenDBRequest$Typings on IDBOpenDBRequest {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBOpenDBRequest/blocked_event)
  _i2.dynamic Function(_i3.IDBVersionChangeEvent)? get onblocked =>
      (_i3.IDBVersionChangeEvent p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onblocked',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onblocked(_i2.dynamic Function(_i3.IDBVersionChangeEvent)? value) {
    _i4.setProperty(
      this,
      'onblocked',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBOpenDBRequest/upgradeneeded_event)
  _i2.dynamic Function(_i3.IDBVersionChangeEvent)? get onupgradeneeded =>
      (_i3.IDBVersionChangeEvent p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onupgradeneeded',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onupgradeneeded(_i2.dynamic Function(_i3.IDBVersionChangeEvent)? value) {
    _i4.setProperty(
      this,
      'onupgradeneeded',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$1<K$>(
    _i3.IDBOpenDBRequestEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function<K$>(
      _i3.IDBOpenDBRequestEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get addEventListener => (
        $1: _addEventListener$1,
        $2: _addEventListener$2,
      );

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$1<K$>(
    _i3.IDBOpenDBRequestEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function<K$>(
      _i3.IDBOpenDBRequestEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get removeEventListener => (
        $1: _removeEventListener$1,
        $2: _removeEventListener$2,
      );
}

enum IDBRequestEventMap<T$> {
  error<_i3.Event>(r'error'),
  success<_i3.Event>(r'success');

  const IDBRequestEventMap(this.value);

  final _i2.String value;
}

/* Source:  */
/// The request object does not initially contain any information about the result of the operation, but once information becomes available, an event is fired on the request, and the information becomes available through the properties of the IDBRequest instance.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBRequest)
@_i1.JS()
@_i1.staticInterop
class IDBRequest<T> implements _i3.EventTarget {
  factory IDBRequest() => _i4.callConstructor(
        _declaredIDBRequest,
        [],
      );
}

_i2.Object get _declaredIDBRequest => _i4.getProperty(
      _self,
      'IDBRequest',
    );

extension IDBRequest$Typings<T> on IDBRequest<T> {
  /// When a request is completed, returns the error (a DOMException), or null if the request succeeded. Throws a "InvalidStateError" DOMException if the request is still pending.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBRequest/error)
  _i3.DOMException? get error => _i4.getProperty(
        this,
        'error',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBRequest/error_event)
  _i2.dynamic Function(_i3.Event)? get onerror =>
      (_i3.Event p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onerror',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onerror(_i2.dynamic Function(_i3.Event)? value) {
    _i4.setProperty(
      this,
      'onerror',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBRequest/success_event)
  _i2.dynamic Function(_i3.Event)? get onsuccess =>
      (_i3.Event p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onsuccess',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onsuccess(_i2.dynamic Function(_i3.Event)? value) {
    _i4.setProperty(
      this,
      'onsuccess',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// Returns "pending" until a request is complete, then returns "done".
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBRequest/readyState)
  _i3.IDBRequestReadyState get readyState =>
      _i3.IDBRequestReadyStateOptions.values.byName(_i4.getProperty(
        this,
        'readyState',
      ));

  /// When a request is completed, returns the result, or undefined if the request failed. Throws a "InvalidStateError" DOMException if the request is still pending.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBRequest/result)
  T get result => _i4.getProperty(
        this,
        'result',
      );

  /// Returns the IDBObjectStore, IDBIndex, or IDBCursor the request was made against, or null if is was an open request.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBRequest/source)
  _i2.Object get source => _i4.getProperty(
        this,
        'source',
      );

  /// Returns the IDBTransaction the request was made within. If this as an open request, then it returns an upgrade transaction while it is running, or null otherwise.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBRequest/transaction)
  _i3.IDBTransaction? get transaction => _i4.getProperty(
        this,
        'transaction',
      );

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$1<K$>(
    _i3.IDBRequestEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function<K$>(
      _i3.IDBRequestEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get addEventListener => (
        $1: _addEventListener$1,
        $2: _addEventListener$2,
      );

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$1<K$>(
    _i3.IDBRequestEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function<K$>(
      _i3.IDBRequestEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get removeEventListener => (
        $1: _removeEventListener$1,
        $2: _removeEventListener$2,
      );
}

enum IDBTransactionEventMap<T$> {
  abort<_i3.Event>(r'abort'),
  complete<_i3.Event>(r'complete'),
  error<_i3.Event>(r'error');

  const IDBTransactionEventMap(this.value);

  final _i2.String value;
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction)
@_i1.JS()
@_i1.staticInterop
class IDBTransaction implements _i3.EventTarget {
  factory IDBTransaction() => _i4.callConstructor(
        _declaredIDBTransaction,
        [],
      );
}

_i2.Object get _declaredIDBTransaction => _i4.getProperty(
      _self,
      'IDBTransaction',
    );

extension IDBTransaction$Typings on IDBTransaction {
  /// Returns the transaction's connection.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/db)
  _i3.IDBDatabase get db => _i4.getProperty(
        this,
        'db',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/durability)
  _i3.IDBTransactionDurability get durability =>
      _i3.IDBTransactionDurabilityOptions.values.byName(_i4.getProperty(
        this,
        'durability',
      ));

  /// If the transaction was aborted, returns the error (a DOMException) providing the reason.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/error)
  _i3.DOMException? get error => _i4.getProperty(
        this,
        'error',
      );

  /// Returns the mode the transaction was created with ("readonly" or "readwrite"), or "versionchange" for an upgrade transaction.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/mode)
  _i3.IDBTransactionMode get mode =>
      _i3.IDBTransactionModeOptions.values.byName(_i4.getProperty(
        this,
        'mode',
      ));

  /// Returns a list of the names of object stores in the transaction's scope. For an upgrade transaction this is all object stores in the database.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/objectStoreNames)
  _i3.DOMStringList get objectStoreNames => _i4.getProperty(
        this,
        'objectStoreNames',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/abort_event)
  _i2.dynamic Function(_i3.Event)? get onabort =>
      (_i3.Event p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onabort',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onabort(_i2.dynamic Function(_i3.Event)? value) {
    _i4.setProperty(
      this,
      'onabort',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/complete_event)
  _i2.dynamic Function(_i3.Event)? get oncomplete =>
      (_i3.Event p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'oncomplete',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set oncomplete(_i2.dynamic Function(_i3.Event)? value) {
    _i4.setProperty(
      this,
      'oncomplete',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/error_event)
  _i2.dynamic Function(_i3.Event)? get onerror =>
      (_i3.Event p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onerror',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onerror(_i2.dynamic Function(_i3.Event)? value) {
    _i4.setProperty(
      this,
      'onerror',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  set abort(void Function() value) {
    _i4.setProperty(
      this,
      'abort',
      _i4.allowInterop(value),
    );
  }

  void Function() get abort => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'abort',
        ),
        r'call',
        [this],
      );
  set commit(void Function() value) {
    _i4.setProperty(
      this,
      'commit',
      _i4.allowInterop(value),
    );
  }

  void Function() get commit => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'commit',
        ),
        r'call',
        [this],
      );
  set objectStore(_i3.IDBObjectStore Function(_i2.String) value) {
    _i4.setProperty(
      this,
      'objectStore',
      _i4.allowInterop(value),
    );
  }

  _i3.IDBObjectStore Function(_i2.String) get objectStore =>
      (_i2.String p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'objectStore',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$1<K$>(
    _i3.IDBTransactionEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function<K$>(
      _i3.IDBTransactionEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get addEventListener => (
        $1: _addEventListener$1,
        $2: _addEventListener$2,
      );

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$1<K$>(
    _i3.IDBTransactionEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function<K$>(
      _i3.IDBTransactionEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get removeEventListener => (
        $1: _removeEventListener$1,
        $2: _removeEventListener$2,
      );
}

/* Source:  */
/// This IndexedDB API interface indicates that the version of the database has changed, as the result of an IDBOpenDBRequest.onupgradeneeded event handler function.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBVersionChangeEvent)
@_i1.JS()
@_i1.staticInterop
class IDBVersionChangeEvent implements _i3.Event {
  factory IDBVersionChangeEvent(
    _i2.String type, [
    _i3.IDBVersionChangeEventInit? eventInitDict,
  ]) =>
      _i4.callConstructor(
        _declaredIDBVersionChangeEvent,
        [
          type,
          eventInitDict ?? _i6.undefined,
        ],
      );
}

_i2.Object get _declaredIDBVersionChangeEvent => _i4.getProperty(
      _self,
      'IDBVersionChangeEvent',
    );

extension IDBVersionChangeEvent$Typings on IDBVersionChangeEvent {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBVersionChangeEvent/newVersion)
  _i2.num? get newVersion => _i4.getProperty(
        this,
        'newVersion',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBVersionChangeEvent/oldVersion)
  _i2.num get oldVersion => _i4.getProperty(
        this,
        'oldVersion',
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageBitmap)
@_i1.JS()
@_i1.staticInterop
class ImageBitmap {
  factory ImageBitmap() => _i4.callConstructor(
        _declaredImageBitmap,
        [],
      );
}

_i2.Object get _declaredImageBitmap => _i4.getProperty(
      _self,
      'ImageBitmap',
    );

extension ImageBitmap$Typings on ImageBitmap {
  /// Returns the intrinsic height of the image, in CSS pixels.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageBitmap/height)
  _i2.num get height => _i4.getProperty(
        this,
        'height',
      );

  /// Returns the intrinsic width of the image, in CSS pixels.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageBitmap/width)
  _i2.num get width => _i4.getProperty(
        this,
        'width',
      );
  set close(void Function() value) {
    _i4.setProperty(
      this,
      'close',
      _i4.allowInterop(value),
    );
  }

  void Function() get close => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'close',
        ),
        r'call',
        [this],
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageBitmapRenderingContext)
@_i1.JS()
@_i1.staticInterop
class ImageBitmapRenderingContext {
  factory ImageBitmapRenderingContext() => _i4.callConstructor(
        _declaredImageBitmapRenderingContext,
        [],
      );
}

_i2.Object get _declaredImageBitmapRenderingContext => _i4.getProperty(
      _self,
      'ImageBitmapRenderingContext',
    );

extension ImageBitmapRenderingContext$Typings on ImageBitmapRenderingContext {
  set transferFromImageBitmap(void Function([_i3.ImageBitmap?]) value) {
    _i4.setProperty(
      this,
      'transferFromImageBitmap',
      _i4.allowInterop(value),
    );
  }

  void Function([_i3.ImageBitmap?]) get transferFromImageBitmap =>
      ([_i3.ImageBitmap? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'transferFromImageBitmap',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
}

/* Source:  */
/// The underlying pixel data of an area of a <canvas> element. It is created using the ImageData() constructor or creator methods on the CanvasRenderingContext2D object associated with a canvas: createImageData() and getImageData(). It can also be used to set a part of the canvas by using putImageData().
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageData)
@_i1.JS()
@_i1.staticInterop
class ImageData {
  factory ImageData.$1() => _i4.callConstructor(
        _declaredImageData,
        [],
      );

  factory ImageData.$2(
    _i2.num sw,
    _i2.num sh, [
    _i3.ImageDataSettings? settings,
  ]) =>
      _i4.callConstructor(
        _declaredImageData,
        [
          sw,
          sh,
          settings ?? _i6.undefined,
        ],
      );

  factory ImageData.$3(
    _i5.Uint8ClampedList data,
    _i2.num sw, [
    _i2.num? sh,
    _i3.ImageDataSettings? settings,
  ]) =>
      _i4.callConstructor(
        _declaredImageData,
        [
          data,
          sw,
          sh ?? _i6.undefined,
          settings ?? _i6.undefined,
        ],
      );
}

_i2.Object get _declaredImageData => _i4.getProperty(
      _self,
      'ImageData',
    );

extension ImageData$Typings on ImageData {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageData/colorSpace)
  _i3.PredefinedColorSpace get colorSpace =>
      _i3.PredefinedColorSpaceOptions.values.byName(_i4.getProperty(
        this,
        'colorSpace',
      ));

  /// Returns the one-dimensional array containing the data in RGBA order, as integers in the range 0 to 255.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageData/data)
  _i5.Uint8ClampedList get data => _i4.getProperty(
        this,
        'data',
      );

  /// Returns the actual dimensions of the data in the ImageData object, in pixels.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageData/height)
  _i2.num get height => _i4.getProperty(
        this,
        'height',
      );

  /// Returns the actual dimensions of the data in the ImageData object, in pixels.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageData/width)
  _i2.num get width => _i4.getProperty(
        this,
        'width',
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/KHR_parallel_shader_compile)
@_i1.JS('KHR_parallel_shader_compile')
@_i1.staticInterop
@_i1.anonymous
class KHRParallelShaderCompile {
  external factory KHRParallelShaderCompile._(
      {_i2.dynamic completionStatusKhr});

  factory KHRParallelShaderCompile({_i2.num? completionStatusKhr}) =>
      KHRParallelShaderCompile._(completionStatusKhr: completionStatusKhr);

  static _i2.num get completionStatusKhr => _i4.getProperty(
        _declaredKHRParallelShaderCompile,
        'COMPLETION_STATUS_KHR',
      );
}

_i2.Object get _declaredKHRParallelShaderCompile => _i4.getProperty(
      _self,
      'KHR_parallel_shader_compile',
    );

extension KHRParallelShaderCompile$Typings on KHRParallelShaderCompile {
  _i2.num get completionStatusKhr => _i4.getProperty(
        this,
        'COMPLETION_STATUS_KHR',
      );
}

/* Source:  */
/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Lock)
@_i1.JS()
@_i1.staticInterop
class Lock {
  factory Lock() => _i4.callConstructor(
        _declaredLock,
        [],
      );
}

_i2.Object get _declaredLock => _i4.getProperty(
      _self,
      'Lock',
    );

extension Lock$Typings on Lock {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Lock/mode)
  _i3.LockMode get mode => _i3.LockModeOptions.values.byName(_i4.getProperty(
        this,
        'mode',
      ));

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Lock/name)
  _i2.String get name => _i4.getProperty(
        this,
        'name',
      );
}

/* Source:  */
/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/LockManager)
@_i1.JS()
@_i1.staticInterop
class LockManager {
  factory LockManager() => _i4.callConstructor(
        _declaredLockManager,
        [],
      );
}

_i2.Object get _declaredLockManager => _i4.getProperty(
      _self,
      'LockManager',
    );

extension LockManager$Typings on LockManager {
  set query(_i2.Future<_i3.LockManagerSnapshot> Function() value) {
    _i4.setProperty(
      this,
      'query',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i3.LockManagerSnapshot> Function() get query =>
      () => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'query',
            ),
            r'call',
            [this],
          ));

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/LockManager/request)
  _i2.Future<_i2.dynamic> _request$1(
    _i2.String name,
    _i3.LockGrantedCallback callback,
  ) =>
      _i4.promiseToFuture(_i4.callMethod(
        this,
        'request',
        [
          name,
          callback,
        ],
      ));

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/LockManager/request)
  _i2.Future<_i2.dynamic> _request$2(
    _i2.String name,
    _i3.LockOptions options,
    _i3.LockGrantedCallback callback,
  ) =>
      _i4.promiseToFuture(_i4.callMethod(
        this,
        'request',
        [
          name,
          options,
          callback,
        ],
      ));

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/LockManager/request)
    _i2.Future<_i2.dynamic> Function(
      _i2.String name,
      _i3.LockGrantedCallback callback,
    ) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/LockManager/request)
    _i2.Future<_i2.dynamic> Function(
      _i2.String name,
      _i3.LockOptions options,
      _i3.LockGrantedCallback callback,
    ) $2,
  }) get request => (
        $1: _request$1,
        $2: _request$2,
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaCapabilities)
@_i1.JS()
@_i1.staticInterop
class MediaCapabilities {
  factory MediaCapabilities() => _i4.callConstructor(
        _declaredMediaCapabilities,
        [],
      );
}

_i2.Object get _declaredMediaCapabilities => _i4.getProperty(
      _self,
      'MediaCapabilities',
    );

extension MediaCapabilities$Typings on MediaCapabilities {
  set decodingInfo(
      _i2.Future<_i3.MediaCapabilitiesDecodingInfo> Function(
              _i3.MediaDecodingConfiguration)
          value) {
    _i4.setProperty(
      this,
      'decodingInfo',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i3.MediaCapabilitiesDecodingInfo> Function(
          _i3.MediaDecodingConfiguration)
      get decodingInfo => (_i3.MediaDecodingConfiguration p0) =>
          _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'decodingInfo',
            ),
            r'call',
            [
              this,
              p0,
            ],
          ));
  set encodingInfo(
      _i2.Future<_i3.MediaCapabilitiesEncodingInfo> Function(
              _i3.MediaEncodingConfiguration)
          value) {
    _i4.setProperty(
      this,
      'encodingInfo',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i3.MediaCapabilitiesEncodingInfo> Function(
          _i3.MediaEncodingConfiguration)
      get encodingInfo => (_i3.MediaEncodingConfiguration p0) =>
          _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'encodingInfo',
            ),
            r'call',
            [
              this,
              p0,
            ],
          ));
}

/* Source:  */
/// This Channel Messaging API interface allows us to create a new message channel and send data through it via its two MessagePort properties.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageChannel)
@_i1.JS()
@_i1.staticInterop
class MessageChannel {
  factory MessageChannel() => _i4.callConstructor(
        _declaredMessageChannel,
        [],
      );
}

_i2.Object get _declaredMessageChannel => _i4.getProperty(
      _self,
      'MessageChannel',
    );

extension MessageChannel$Typings on MessageChannel {
  /// Returns the first MessagePort object.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageChannel/port1)
  _i3.MessagePort get port1 => _i4.getProperty(
        this,
        'port1',
      );

  /// Returns the second MessagePort object.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageChannel/port2)
  _i3.MessagePort get port2 => _i4.getProperty(
        this,
        'port2',
      );
}

/* Source:  */
/// A message received by a target object.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageEvent)
@_i1.JS()
@_i1.staticInterop
class MessageEvent<T> implements _i3.Event {
  factory MessageEvent(
    _i2.String type, [
    _i3.MessageEventInit<T>? eventInitDict,
  ]) =>
      _i4.callConstructor(
        _declaredMessageEvent,
        [
          type,
          eventInitDict ?? _i6.undefined,
        ],
      );
}

_i2.Object get _declaredMessageEvent => _i4.getProperty(
      _self,
      'MessageEvent',
    );

extension MessageEvent$Typings<T> on MessageEvent<T> {
  /// Returns the data of the message.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageEvent/data)
  T get data => _i4.getProperty(
        this,
        'data',
      );

  /// Returns the last event ID string, for server-sent events.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageEvent/lastEventId)
  _i2.String get lastEventId => _i4.getProperty(
        this,
        'lastEventId',
      );

  /// Returns the origin of the message, for server-sent events and cross-document messaging.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageEvent/origin)
  _i2.String get origin => _i4.getProperty(
        this,
        'origin',
      );

  /// Returns the MessagePort array sent with the message, for cross-document messaging and channel messaging.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageEvent/ports)
  _i9.ReadonlyArray<_i3.MessagePort> get ports => _i4.getProperty(
        this,
        'ports',
      );

  /// Returns the WindowProxy of the source window, for cross-document messaging, and the MessagePort being attached, in the connect event fired at SharedWorkerGlobalScope objects.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageEvent/source)
  _i3.MessageEventSource? get source => _i4.getProperty(
        this,
        'source',
      );

  /// @deprecated
  ///
  ///  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageEvent/initMessageEvent)
  void _initMessageEvent$1(
    _i2.String type, [
    _i2.bool? bubbles,
    _i2.bool? cancelable,
    _i2.dynamic data,
    _i2.String? origin,
    _i2.String? lastEventId,
    _i3.MessageEventSource? source,
    _i2.List<_i3.MessagePort>? ports,
  ]) {
    _i4.callMethod(
      this,
      'initMessageEvent',
      [
        type,
        bubbles ?? _i6.undefined,
        cancelable ?? _i6.undefined,
        data,
        origin ?? _i6.undefined,
        lastEventId ?? _i6.undefined,
        source ?? _i6.undefined ?? _i6.undefined,
        ports ?? _i6.undefined,
      ],
    );
  }

  /// @deprecated
  ///
  ///  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageEvent/initMessageEvent)
  void _initMessageEvent$2(
    _i2.String type, [
    _i2.bool? bubbles,
    _i2.bool? cancelable,
    _i2.dynamic data,
    _i2.String? origin,
    _i2.String? lastEventId,
    _i3.MessageEventSource? source,
    _i10.Iterable<_i3.MessagePort>? ports,
  ]) {
    _i4.callMethod(
      this,
      'initMessageEvent',
      [
        type,
        bubbles ?? _i6.undefined,
        cancelable ?? _i6.undefined,
        data,
        origin ?? _i6.undefined,
        lastEventId ?? _i6.undefined,
        source ?? _i6.undefined ?? _i6.undefined,
        ports ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// @deprecated
    ///
    ///  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageEvent/initMessageEvent)
    void Function(
      _i2.String type, [
      _i2.bool? bubbles,
      _i2.bool? cancelable,
      _i2.dynamic data,
      _i2.String? origin,
      _i2.String? lastEventId,
      _i3.MessageEventSource? source,
      _i2.List<_i3.MessagePort>? ports,
    ]) $1,

    /// @deprecated
    ///
    ///  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageEvent/initMessageEvent)
    void Function(
      _i2.String type, [
      _i2.bool? bubbles,
      _i2.bool? cancelable,
      _i2.dynamic data,
      _i2.String? origin,
      _i2.String? lastEventId,
      _i3.MessageEventSource? source,
      _i10.Iterable<_i3.MessagePort>? ports,
    ]) $2,
  }) get initMessageEvent => (
        $1: _initMessageEvent$1,
        $2: _initMessageEvent$2,
      );
}

enum MessagePortEventMap<T$ extends _i3.Event> {
  message<_i3.MessageEvent<_i2.dynamic>>(r'message'),
  messageerror<_i3.MessageEvent<_i2.dynamic>>(r'messageerror');

  const MessagePortEventMap(this.value);

  final _i2.String value;
}

/* Source:  */
/// This Channel Messaging API interface represents one of the two ports of a MessageChannel, allowing messages to be sent from one port and listening out for them arriving at the other.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessagePort)
@_i1.JS()
@_i1.staticInterop
class MessagePort implements _i3.EventTarget {
  factory MessagePort() => _i4.callConstructor(
        _declaredMessagePort,
        [],
      );
}

_i2.Object get _declaredMessagePort => _i4.getProperty(
      _self,
      'MessagePort',
    );

extension MessagePort$Typings on MessagePort {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessagePort/message_event)
  _i2.dynamic Function(_i3.MessageEvent<_i2.dynamic>)? get onmessage =>
      (_i3.MessageEvent<_i2.dynamic> p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onmessage',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onmessage(_i2.dynamic Function(_i3.MessageEvent<_i2.dynamic>)? value) {
    _i4.setProperty(
      this,
      'onmessage',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessagePort/messageerror_event)
  _i2.dynamic Function(_i3.MessageEvent<_i2.dynamic>)? get onmessageerror =>
      (_i3.MessageEvent<_i2.dynamic> p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onmessageerror',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onmessageerror(
      _i2.dynamic Function(_i3.MessageEvent<_i2.dynamic>)? value) {
    _i4.setProperty(
      this,
      'onmessageerror',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  set close(void Function() value) {
    _i4.setProperty(
      this,
      'close',
      _i4.allowInterop(value),
    );
  }

  void Function() get close => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'close',
        ),
        r'call',
        [this],
      );
  set start(void Function() value) {
    _i4.setProperty(
      this,
      'start',
      _i4.allowInterop(value),
    );
  }

  void Function() get start => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'start',
        ),
        r'call',
        [this],
      );

  /// Posts a message through the channel. Objects listed in transfer are transferred, not just cloned, meaning that they are no longer usable on the sending side.
  ///
  ///  Throws a "DataCloneError" DOMException if transfer contains duplicate objects or port, or if message could not be cloned.
  ///
  ///  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessagePort/postMessage)
  void _postMessage$1(
    _i2.List<_i2.Object> transfer, [
    _i2.dynamic message,
  ]) {
    _i4.callMethod(
      this,
      'postMessage',
      [
        message,
        transfer,
      ],
    );
  }

  /// Posts a message through the channel. Objects listed in transfer are transferred, not just cloned, meaning that they are no longer usable on the sending side.
  ///
  /// Throws a "DataCloneError" DOMException if transfer contains duplicate objects or port, or if message could not be cloned.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessagePort/postMessage)
  void _postMessage$2([
    _i2.dynamic message,
    _i3.StructuredSerializeOptions? options,
  ]) {
    _i4.callMethod(
      this,
      'postMessage',
      [
        message,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Posts a message through the channel. Objects listed in transfer are transferred, not just cloned, meaning that they are no longer usable on the sending side.
    ///
    ///  Throws a "DataCloneError" DOMException if transfer contains duplicate objects or port, or if message could not be cloned.
    ///
    ///  [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessagePort/postMessage)
    void Function(
      _i2.List<_i2.Object> transfer, [
      _i2.dynamic message,
    ]) $1,

    /// Posts a message through the channel. Objects listed in transfer are transferred, not just cloned, meaning that they are no longer usable on the sending side.
    ///
    /// Throws a "DataCloneError" DOMException if transfer contains duplicate objects or port, or if message could not be cloned.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessagePort/postMessage)
    void Function([
      _i2.dynamic message,
      _i3.StructuredSerializeOptions? options,
    ]) $2,
  }) get postMessage => (
        $1: _postMessage$1,
        $2: _postMessage$2,
      );

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$1<K$ extends _i3.Event>(
    _i3.MessagePortEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function<K$ extends _i3.Event>(
      _i3.MessagePortEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get addEventListener => (
        $1: _addEventListener$1,
        $2: _addEventListener$2,
      );

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$1<K$ extends _i3.Event>(
    _i3.MessagePortEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function<K$ extends _i3.Event>(
      _i3.MessagePortEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get removeEventListener => (
        $1: _removeEventListener$1,
        $2: _removeEventListener$2,
      );
}

/* Source:  */
/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationPreloadManager)
@_i1.JS()
@_i1.staticInterop
class NavigationPreloadManager {
  factory NavigationPreloadManager() => _i4.callConstructor(
        _declaredNavigationPreloadManager,
        [],
      );
}

_i2.Object get _declaredNavigationPreloadManager => _i4.getProperty(
      _self,
      'NavigationPreloadManager',
    );

extension NavigationPreloadManager$Typings on NavigationPreloadManager {
  set disable(_i2.Future<void> Function() value) {
    _i4.setProperty(
      this,
      'disable',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<void> Function() get disable =>
      () => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'disable',
            ),
            r'call',
            [this],
          ));
  set enable(_i2.Future<void> Function() value) {
    _i4.setProperty(
      this,
      'enable',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<void> Function() get enable =>
      () => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'enable',
            ),
            r'call',
            [this],
          ));
  set getState(_i2.Future<_i3.NavigationPreloadState> Function() value) {
    _i4.setProperty(
      this,
      'getState',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i3.NavigationPreloadState> Function() get getState =>
      () => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'getState',
            ),
            r'call',
            [this],
          ));
  set setHeaderValue(_i2.Future<void> Function(_i2.String) value) {
    _i4.setProperty(
      this,
      'setHeaderValue',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<void> Function(_i2.String) get setHeaderValue =>
      (_i2.String p0) => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'setHeaderValue',
            ),
            r'call',
            [
              this,
              p0,
            ],
          ));
}

/* Source:  */
/// Available only in secure contexts.
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class NavigatorBadge {
  external factory NavigatorBadge._({
    _i2.dynamic clearAppBadge,
    _i2.dynamic setAppBadge,
  });

  factory NavigatorBadge({
    _i2.Future<void> Function()? clearAppBadge,
    _i2.Future<void> Function([_i2.num?])? setAppBadge,
  }) =>
      NavigatorBadge._(
        clearAppBadge:
            clearAppBadge == null ? null : _i4.allowInterop(clearAppBadge),
        setAppBadge: setAppBadge == null ? null : _i4.allowInterop(setAppBadge),
      );
}

extension NavigatorBadge$Typings on NavigatorBadge {
  set clearAppBadge(_i2.Future<void> Function() value) {
    _i4.setProperty(
      this,
      'clearAppBadge',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<void> Function() get clearAppBadge =>
      () => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'clearAppBadge',
            ),
            r'call',
            [this],
          ));
  set setAppBadge(_i2.Future<void> Function([_i2.num?]) value) {
    _i4.setProperty(
      this,
      'setAppBadge',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<void> Function([_i2.num?]) get setAppBadge =>
      ([_i2.num? p0]) => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'setAppBadge',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          ));
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class NavigatorConcurrentHardware {
  external factory NavigatorConcurrentHardware._(
      {_i2.dynamic hardwareConcurrency});

  factory NavigatorConcurrentHardware({_i2.num? hardwareConcurrency}) =>
      NavigatorConcurrentHardware._(hardwareConcurrency: hardwareConcurrency);
}

extension NavigatorConcurrentHardware$Typings on NavigatorConcurrentHardware {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/hardwareConcurrency)
  _i2.num get hardwareConcurrency => _i4.getProperty(
        this,
        'hardwareConcurrency',
      );
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class NavigatorID {
  external factory NavigatorID._({
    _i2.dynamic appCodeName,
    _i2.dynamic appName,
    _i2.dynamic appVersion,
    _i2.dynamic platform,
    _i2.dynamic product,
    _i2.dynamic userAgent,
  });

  factory NavigatorID({
    _i2.String? appCodeName,
    _i2.String? appName,
    _i2.String? appVersion,
    _i2.String? platform,
    _i2.String? product,
    _i2.String? userAgent,
  }) =>
      NavigatorID._(
        appCodeName: appCodeName,
        appName: appName,
        appVersion: appVersion,
        platform: platform,
        product: product,
        userAgent: userAgent,
      );
}

extension NavigatorID$Typings on NavigatorID {
  _i2.String get appCodeName => _i4.getProperty(
        this,
        'appCodeName',
      );
  _i2.String get appName => _i4.getProperty(
        this,
        'appName',
      );
  _i2.String get appVersion => _i4.getProperty(
        this,
        'appVersion',
      );
  _i2.String get platform => _i4.getProperty(
        this,
        'platform',
      );
  _i2.String get product => _i4.getProperty(
        this,
        'product',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/userAgent)
  _i2.String get userAgent => _i4.getProperty(
        this,
        'userAgent',
      );
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class NavigatorLanguage {
  external factory NavigatorLanguage._({
    _i2.dynamic language,
    _i2.dynamic languages,
  });

  factory NavigatorLanguage({
    _i2.String? language,
    _i9.ReadonlyArray<_i2.String>? languages,
  }) =>
      NavigatorLanguage._(
        language: language,
        languages: languages ?? _i6.undefined,
      );
}

extension NavigatorLanguage$Typings on NavigatorLanguage {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/language)
  _i2.String get language => _i4.getProperty(
        this,
        'language',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/languages)
  _i9.ReadonlyArray<_i2.String> get languages => _i4.getProperty(
        this,
        'languages',
      );
}

/* Source:  */
/// Available only in secure contexts.
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class NavigatorLocks {
  external factory NavigatorLocks._({_i2.dynamic locks});

  factory NavigatorLocks({_i3.LockManager? locks}) =>
      NavigatorLocks._(locks: locks ?? _i6.undefined);
}

extension NavigatorLocks$Typings on NavigatorLocks {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/locks)
  _i3.LockManager get locks => _i4.getProperty(
        this,
        'locks',
      );
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class NavigatorOnLine {
  external factory NavigatorOnLine._({_i2.dynamic onLine});

  factory NavigatorOnLine({_i2.bool? onLine}) =>
      NavigatorOnLine._(onLine: onLine);
}

extension NavigatorOnLine$Typings on NavigatorOnLine {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/onLine)
  _i2.bool get onLine => _i4.getProperty(
        this,
        'onLine',
      );
}

/* Source:  */
/// Available only in secure contexts.
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class NavigatorStorage {
  external factory NavigatorStorage._({_i2.dynamic storage});

  factory NavigatorStorage({_i3.StorageManager? storage}) =>
      NavigatorStorage._(storage: storage ?? _i6.undefined);
}

extension NavigatorStorage$Typings on NavigatorStorage {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/storage)
  _i3.StorageManager get storage => _i4.getProperty(
        this,
        'storage',
      );
}

enum NotificationEventMap<T$> {
  click<_i3.Event>(r'click'),
  close<_i3.Event>(r'close'),
  error<_i3.Event>(r'error'),
  show<_i3.Event>(r'show');

  const NotificationEventMap(this.value);

  final _i2.String value;
}

/* Source:  */
/// This Notifications API interface is used to configure and display desktop notifications to the user.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification)
@_i1.JS()
@_i1.staticInterop
class Notification implements _i3.EventTarget {
  factory Notification(
    _i2.String title, [
    _i3.NotificationOptions? options,
  ]) =>
      _i4.callConstructor(
        _declaredNotification,
        [
          title,
          options ?? _i6.undefined,
        ],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/permission_static)
  static _i3.NotificationPermission get permission =>
      _i3.NotificationPermissionOptions.values.byName(_i4.getProperty(
        _i8.target744,
        'permission',
      ));
}

_i2.Object get _declaredNotification => _i4.getProperty(
      _self,
      'Notification',
    );

extension Notification$Typings on Notification {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/body)
  _i2.String get body => _i4.getProperty(
        this,
        'body',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/data)
  _i2.dynamic get data => _i4.getProperty(
        this,
        'data',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/dir)
  _i3.NotificationDirection get dir =>
      _i3.NotificationDirectionOptions.values.byName(_i4.getProperty(
        this,
        'dir',
      ));

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/icon)
  _i2.String get icon => _i4.getProperty(
        this,
        'icon',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/lang)
  _i2.String get lang => _i4.getProperty(
        this,
        'lang',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/click_event)
  _i2.dynamic Function(_i3.Event)? get onclick =>
      (_i3.Event p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onclick',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onclick(_i2.dynamic Function(_i3.Event)? value) {
    _i4.setProperty(
      this,
      'onclick',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/close_event)
  _i2.dynamic Function(_i3.Event)? get onclose =>
      (_i3.Event p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onclose',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onclose(_i2.dynamic Function(_i3.Event)? value) {
    _i4.setProperty(
      this,
      'onclose',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/error_event)
  _i2.dynamic Function(_i3.Event)? get onerror =>
      (_i3.Event p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onerror',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onerror(_i2.dynamic Function(_i3.Event)? value) {
    _i4.setProperty(
      this,
      'onerror',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/show_event)
  _i2.dynamic Function(_i3.Event)? get onshow =>
      (_i3.Event p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onshow',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onshow(_i2.dynamic Function(_i3.Event)? value) {
    _i4.setProperty(
      this,
      'onshow',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/silent)
  _i2.bool? get silent => _i4.getProperty(
        this,
        'silent',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/tag)
  _i2.String get tag => _i4.getProperty(
        this,
        'tag',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/title)
  _i2.String get title => _i4.getProperty(
        this,
        'title',
      );
  set close(void Function() value) {
    _i4.setProperty(
      this,
      'close',
      _i4.allowInterop(value),
    );
  }

  void Function() get close => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'close',
        ),
        r'call',
        [this],
      );

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$1<K$>(
    _i3.NotificationEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function<K$>(
      _i3.NotificationEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get addEventListener => (
        $1: _addEventListener$1,
        $2: _addEventListener$2,
      );

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$1<K$>(
    _i3.NotificationEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function<K$>(
      _i3.NotificationEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get removeEventListener => (
        $1: _removeEventListener$1,
        $2: _removeEventListener$2,
      );
}

/* Source:  */
/// The parameter passed into the onnotificationclick handler, the NotificationEvent interface represents a notification click event that is dispatched on the ServiceWorkerGlobalScope of a ServiceWorker.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/NotificationEvent)
@_i1.JS()
@_i1.staticInterop
class NotificationEvent implements _i3.ExtendableEvent {
  factory NotificationEvent(
    _i2.String type,
    _i3.NotificationEventInit eventInitDict,
  ) =>
      _i4.callConstructor(
        _declaredNotificationEvent,
        [
          type,
          eventInitDict,
        ],
      );
}

_i2.Object get _declaredNotificationEvent => _i4.getProperty(
      _self,
      'NotificationEvent',
    );

extension NotificationEvent$Typings on NotificationEvent {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/NotificationEvent/action)
  _i2.String get action => _i4.getProperty(
        this,
        'action',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/NotificationEvent/notification)
  _i3.Notification get notification => _i4.getProperty(
        this,
        'notification',
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_draw_buffers_indexed)
@_i1.JS('OES_draw_buffers_indexed')
@_i1.staticInterop
@_i1.anonymous
class OESDrawBuffersIndexed {
  external factory OESDrawBuffersIndexed._({
    _i2.dynamic blendEquationSeparateiOES,
    _i2.dynamic blendEquationiOES,
    _i2.dynamic blendFuncSeparateiOES,
    _i2.dynamic blendFunciOES,
    _i2.dynamic colorMaskiOES,
    _i2.dynamic disableiOES,
    _i2.dynamic enableiOES,
  });

  factory OESDrawBuffersIndexed({
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
    )? blendEquationSeparateiOES,
    void Function(
      _i2.num,
      _i2.num,
    )? blendEquationiOES,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
    )? blendFuncSeparateiOES,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
    )? blendFunciOES,
    void Function(
      _i2.num,
      _i2.bool,
      _i2.bool,
      _i2.bool,
      _i2.bool,
    )? colorMaskiOES,
    void Function(
      _i2.num,
      _i2.num,
    )? disableiOES,
    void Function(
      _i2.num,
      _i2.num,
    )? enableiOES,
  }) =>
      OESDrawBuffersIndexed._(
        blendEquationSeparateiOES: blendEquationSeparateiOES == null
            ? null
            : _i4.allowInterop(blendEquationSeparateiOES),
        blendEquationiOES: blendEquationiOES == null
            ? null
            : _i4.allowInterop(blendEquationiOES),
        blendFuncSeparateiOES: blendFuncSeparateiOES == null
            ? null
            : _i4.allowInterop(blendFuncSeparateiOES),
        blendFunciOES:
            blendFunciOES == null ? null : _i4.allowInterop(blendFunciOES),
        colorMaskiOES:
            colorMaskiOES == null ? null : _i4.allowInterop(colorMaskiOES),
        disableiOES: disableiOES == null ? null : _i4.allowInterop(disableiOES),
        enableiOES: enableiOES == null ? null : _i4.allowInterop(enableiOES),
      );
}

extension OESDrawBuffersIndexed$Typings on OESDrawBuffersIndexed {
  set blendEquationSeparateiOES(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'blendEquationSeparateiOES',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
  ) get blendEquationSeparateiOES => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'blendEquationSeparateiOES',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
            ],
          );
  set blendEquationiOES(
      void Function(
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'blendEquationiOES',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
  ) get blendEquationiOES => (
        _i2.num p0,
        _i2.num p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'blendEquationiOES',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set blendFuncSeparateiOES(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'blendFuncSeparateiOES',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
  ) get blendFuncSeparateiOES => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
        _i2.num p4,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'blendFuncSeparateiOES',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
              p4,
            ],
          );
  set blendFunciOES(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'blendFunciOES',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
  ) get blendFunciOES => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'blendFunciOES',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
            ],
          );
  set colorMaskiOES(
      void Function(
        _i2.num,
        _i2.bool,
        _i2.bool,
        _i2.bool,
        _i2.bool,
      ) value) {
    _i4.setProperty(
      this,
      'colorMaskiOES',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.bool,
    _i2.bool,
    _i2.bool,
    _i2.bool,
  ) get colorMaskiOES => (
        _i2.num p0,
        _i2.bool p1,
        _i2.bool p2,
        _i2.bool p3,
        _i2.bool p4,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'colorMaskiOES',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
              p4,
            ],
          );
  set disableiOES(
      void Function(
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'disableiOES',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
  ) get disableiOES => (
        _i2.num p0,
        _i2.num p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'disableiOES',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set enableiOES(
      void Function(
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'enableiOES',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
  ) get enableiOES => (
        _i2.num p0,
        _i2.num p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'enableiOES',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
}

/* Source:  */
/// The OES_element_index_uint extension is part of the WebGL API and adds support for gl.UNSIGNED_INT types to WebGLRenderingContext.drawElements().
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_element_index_uint)
@_i1.JS('OES_element_index_uint')
@_i1.staticInterop
@_i1.anonymous
class OESElementIndexUint {
  external factory OESElementIndexUint._();

  factory OESElementIndexUint() => OESElementIndexUint._();
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_fbo_render_mipmap)
@_i1.JS('OES_fbo_render_mipmap')
@_i1.staticInterop
@_i1.anonymous
class OESFboRenderMipmap {
  external factory OESFboRenderMipmap._();

  factory OESFboRenderMipmap() => OESFboRenderMipmap._();
}

/* Source:  */
/// The OES_standard_derivatives extension is part of the WebGL API and adds the GLSL derivative functions dFdx, dFdy, and fwidth.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_standard_derivatives)
@_i1.JS('OES_standard_derivatives')
@_i1.staticInterop
@_i1.anonymous
class OESStandardDerivatives {
  external factory OESStandardDerivatives._(
      {_i2.dynamic fragmentShaderDerivativeHintOes});

  factory OESStandardDerivatives({_i2.num? fragmentShaderDerivativeHintOes}) =>
      OESStandardDerivatives._(
          fragmentShaderDerivativeHintOes: fragmentShaderDerivativeHintOes);

  static _i2.num get fragmentShaderDerivativeHintOes => _i4.getProperty(
        _declaredOESStandardDerivatives,
        'FRAGMENT_SHADER_DERIVATIVE_HINT_OES',
      );
}

_i2.Object get _declaredOESStandardDerivatives => _i4.getProperty(
      _self,
      'OES_standard_derivatives',
    );

extension OESStandardDerivatives$Typings on OESStandardDerivatives {
  _i2.num get fragmentShaderDerivativeHintOes => _i4.getProperty(
        this,
        'FRAGMENT_SHADER_DERIVATIVE_HINT_OES',
      );
}

/* Source:  */
/// The OES_texture_float extension is part of the WebGL API and exposes floating-point pixel types for textures.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_texture_float)
@_i1.JS('OES_texture_float')
@_i1.staticInterop
@_i1.anonymous
class OESTextureFloat {
  external factory OESTextureFloat._();

  factory OESTextureFloat() => OESTextureFloat._();
}

/* Source:  */
/// The OES_texture_float_linear extension is part of the WebGL API and allows linear filtering with floating-point pixel types for textures.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_texture_float_linear)
@_i1.JS('OES_texture_float_linear')
@_i1.staticInterop
@_i1.anonymous
class OESTextureFloatLinear {
  external factory OESTextureFloatLinear._();

  factory OESTextureFloatLinear() => OESTextureFloatLinear._();
}

/* Source:  */
/// The OES_texture_half_float extension is part of the WebGL API and adds texture formats with 16- (aka half float) and 32-bit floating-point components.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_texture_half_float)
@_i1.JS('OES_texture_half_float')
@_i1.staticInterop
@_i1.anonymous
class OESTextureHalfFloat {
  external factory OESTextureHalfFloat._({_i2.dynamic halfFloatOes});

  factory OESTextureHalfFloat({_i2.num? halfFloatOes}) =>
      OESTextureHalfFloat._(halfFloatOes: halfFloatOes);

  static _i2.num get halfFloatOes => _i4.getProperty(
        _declaredOESTextureHalfFloat,
        'HALF_FLOAT_OES',
      );
}

_i2.Object get _declaredOESTextureHalfFloat => _i4.getProperty(
      _self,
      'OES_texture_half_float',
    );

extension OESTextureHalfFloat$Typings on OESTextureHalfFloat {
  _i2.num get halfFloatOes => _i4.getProperty(
        this,
        'HALF_FLOAT_OES',
      );
}

/* Source:  */
/// The OES_texture_half_float_linear extension is part of the WebGL API and allows linear filtering with half floating-point pixel types for textures.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_texture_half_float_linear)
@_i1.JS('OES_texture_half_float_linear')
@_i1.staticInterop
@_i1.anonymous
class OESTextureHalfFloatLinear {
  external factory OESTextureHalfFloatLinear._();

  factory OESTextureHalfFloatLinear() => OESTextureHalfFloatLinear._();
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_vertex_array_object)
@_i1.JS('OES_vertex_array_object')
@_i1.staticInterop
@_i1.anonymous
class OESVertexArrayObject {
  external factory OESVertexArrayObject._({
    _i2.dynamic vertexArrayBindingOes,
    _i2.dynamic bindVertexArrayOES,
    _i2.dynamic createVertexArrayOES,
    _i2.dynamic deleteVertexArrayOES,
    _i2.dynamic isVertexArrayOES,
  });

  factory OESVertexArrayObject({
    _i2.num? vertexArrayBindingOes,
    void Function([_i3.WebGLVertexArrayObjectOES?])? bindVertexArrayOES,
    _i3.WebGLVertexArrayObjectOES? Function()? createVertexArrayOES,
    void Function([_i3.WebGLVertexArrayObjectOES?])? deleteVertexArrayOES,
    _i2.bool Function([_i3.WebGLVertexArrayObjectOES?])? isVertexArrayOES,
  }) =>
      OESVertexArrayObject._(
        vertexArrayBindingOes: vertexArrayBindingOes,
        bindVertexArrayOES: bindVertexArrayOES == null
            ? null
            : _i4.allowInterop(bindVertexArrayOES),
        createVertexArrayOES: createVertexArrayOES == null
            ? null
            : _i4.allowInterop(
                () => () => createVertexArrayOES() ?? _i6.undefined),
        deleteVertexArrayOES: deleteVertexArrayOES == null
            ? null
            : _i4.allowInterop(deleteVertexArrayOES),
        isVertexArrayOES: isVertexArrayOES == null
            ? null
            : _i4.allowInterop(isVertexArrayOES),
      );

  static _i2.num get vertexArrayBindingOes => _i4.getProperty(
        _declaredOESVertexArrayObject,
        'VERTEX_ARRAY_BINDING_OES',
      );
}

_i2.Object get _declaredOESVertexArrayObject => _i4.getProperty(
      _self,
      'OES_vertex_array_object',
    );

extension OESVertexArrayObject$Typings on OESVertexArrayObject {
  _i2.num get vertexArrayBindingOes => _i4.getProperty(
        this,
        'VERTEX_ARRAY_BINDING_OES',
      );
  set bindVertexArrayOES(
      void Function([_i3.WebGLVertexArrayObjectOES?]) value) {
    _i4.setProperty(
      this,
      'bindVertexArrayOES',
      _i4.allowInterop(value),
    );
  }

  void Function([_i3.WebGLVertexArrayObjectOES?]) get bindVertexArrayOES =>
      ([_i3.WebGLVertexArrayObjectOES? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'bindVertexArrayOES',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set createVertexArrayOES(_i3.WebGLVertexArrayObjectOES? Function() value) {
    _i4.setProperty(
      this,
      'createVertexArrayOES',
      _i4.allowInterop(() => () => value() ?? _i6.undefined),
    );
  }

  _i3.WebGLVertexArrayObjectOES? Function() get createVertexArrayOES =>
      () => _i4.callMethod(
            _i4.getProperty(
              this,
              'createVertexArrayOES',
            ),
            r'call',
            [this],
          );
  set deleteVertexArrayOES(
      void Function([_i3.WebGLVertexArrayObjectOES?]) value) {
    _i4.setProperty(
      this,
      'deleteVertexArrayOES',
      _i4.allowInterop(value),
    );
  }

  void Function([_i3.WebGLVertexArrayObjectOES?]) get deleteVertexArrayOES =>
      ([_i3.WebGLVertexArrayObjectOES? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'deleteVertexArrayOES',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set isVertexArrayOES(
      _i2.bool Function([_i3.WebGLVertexArrayObjectOES?]) value) {
    _i4.setProperty(
      this,
      'isVertexArrayOES',
      _i4.allowInterop(value),
    );
  }

  _i2.bool Function([_i3.WebGLVertexArrayObjectOES?]) get isVertexArrayOES =>
      ([_i3.WebGLVertexArrayObjectOES? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'isVertexArrayOES',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/OVR_multiview2)
@_i1.JS('OVR_multiview2')
@_i1.staticInterop
@_i1.anonymous
class OVRMultiview2 {
  external factory OVRMultiview2._({
    _i2.dynamic framebufferAttachmentTextureNumViewsOvr,
    _i2.dynamic framebufferAttachmentTextureBaseViewIndexOvr,
    _i2.dynamic maxViewsOvr,
    _i2.dynamic framebufferIncompleteViewTargetsOvr,
    _i2.dynamic framebufferTextureMultiviewOVR,
  });

  factory OVRMultiview2({
    _i2.num? framebufferAttachmentTextureNumViewsOvr,
    _i2.num? framebufferAttachmentTextureBaseViewIndexOvr,
    _i2.num? maxViewsOvr,
    _i2.num? framebufferIncompleteViewTargetsOvr,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num, [
      _i3.WebGLTexture?,
    ])? framebufferTextureMultiviewOVR,
  }) =>
      OVRMultiview2._(
        framebufferAttachmentTextureNumViewsOvr:
            framebufferAttachmentTextureNumViewsOvr,
        framebufferAttachmentTextureBaseViewIndexOvr:
            framebufferAttachmentTextureBaseViewIndexOvr,
        maxViewsOvr: maxViewsOvr,
        framebufferIncompleteViewTargetsOvr:
            framebufferIncompleteViewTargetsOvr,
        framebufferTextureMultiviewOVR: framebufferTextureMultiviewOVR == null
            ? null
            : _i4.allowInterop(framebufferTextureMultiviewOVR),
      );

  static _i2.num get framebufferAttachmentTextureNumViewsOvr => _i4.getProperty(
        _declaredOVRMultiview2,
        'FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR',
      );
  static _i2.num get framebufferAttachmentTextureBaseViewIndexOvr =>
      _i4.getProperty(
        _declaredOVRMultiview2,
        'FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR',
      );
  static _i2.num get maxViewsOvr => _i4.getProperty(
        _declaredOVRMultiview2,
        'MAX_VIEWS_OVR',
      );
  static _i2.num get framebufferIncompleteViewTargetsOvr => _i4.getProperty(
        _declaredOVRMultiview2,
        'FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR',
      );
}

_i2.Object get _declaredOVRMultiview2 => _i4.getProperty(
      _self,
      'OVR_multiview2',
    );

extension OVRMultiview2$Typings on OVRMultiview2 {
  _i2.num get framebufferAttachmentTextureNumViewsOvr => _i4.getProperty(
        this,
        'FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR',
      );
  _i2.num get framebufferAttachmentTextureBaseViewIndexOvr => _i4.getProperty(
        this,
        'FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR',
      );
  _i2.num get maxViewsOvr => _i4.getProperty(
        this,
        'MAX_VIEWS_OVR',
      );
  _i2.num get framebufferIncompleteViewTargetsOvr => _i4.getProperty(
        this,
        'FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR',
      );
  set framebufferTextureMultiviewOVR(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num, [
        _i3.WebGLTexture?,
      ]) value) {
    _i4.setProperty(
      this,
      'framebufferTextureMultiviewOVR',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num, [
    _i3.WebGLTexture?,
  ]) get framebufferTextureMultiviewOVR => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p3,
        _i2.num p4,
        _i2.num p5, [
        _i3.WebGLTexture? p2,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'framebufferTextureMultiviewOVR',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2 ?? _i6.undefined,
              p3,
              p4,
              p5,
            ],
          );
}

enum OffscreenCanvasEventMap<T$> {
  contextlost<_i3.Event>(r'contextlost'),
  contextrestored<_i3.Event>(r'contextrestored');

  const OffscreenCanvasEventMap(this.value);

  final _i2.String value;
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas)
@_i1.JS()
@_i1.staticInterop
class OffscreenCanvas implements _i3.EventTarget {
  factory OffscreenCanvas(
    _i2.num width,
    _i2.num height,
  ) =>
      _i4.callConstructor(
        _declaredOffscreenCanvas,
        [
          width,
          height,
        ],
      );
}

_i2.Object get _declaredOffscreenCanvas => _i4.getProperty(
      _self,
      'OffscreenCanvas',
    );

extension OffscreenCanvas$Typings on OffscreenCanvas {
  /// These attributes return the dimensions of the OffscreenCanvas object's bitmap.
  ///
  ///  They can be set, to replace the bitmap with a new, transparent black bitmap of the specified dimensions (effectively resizing it).
  ///
  ///  [MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/height)
  _i2.num get height => _i4.getProperty(
        this,
        'height',
      );
  set height(_i2.num value) {
    _i4.setProperty(
      this,
      'height',
      value,
    );
  }

  _i2.dynamic Function(_i3.Event)? get oncontextlost =>
      (_i3.Event p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'oncontextlost',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set oncontextlost(_i2.dynamic Function(_i3.Event)? value) {
    _i4.setProperty(
      this,
      'oncontextlost',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  _i2.dynamic Function(_i3.Event)? get oncontextrestored =>
      (_i3.Event p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'oncontextrestored',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set oncontextrestored(_i2.dynamic Function(_i3.Event)? value) {
    _i4.setProperty(
      this,
      'oncontextrestored',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// These attributes return the dimensions of the OffscreenCanvas object's bitmap.
  ///
  ///  They can be set, to replace the bitmap with a new, transparent black bitmap of the specified dimensions (effectively resizing it).
  ///
  ///  [MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/width)
  _i2.num get width => _i4.getProperty(
        this,
        'width',
      );
  set width(_i2.num value) {
    _i4.setProperty(
      this,
      'width',
      value,
    );
  }

  set convertToBlob(
      _i2.Future<_i3.Blob> Function([_i3.ImageEncodeOptions?]) value) {
    _i4.setProperty(
      this,
      'convertToBlob',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i3.Blob> Function([_i3.ImageEncodeOptions?]) get convertToBlob =>
      ([_i3.ImageEncodeOptions? p0]) => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'convertToBlob',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          ));
  set transferToImageBitmap(_i3.ImageBitmap Function() value) {
    _i4.setProperty(
      this,
      'transferToImageBitmap',
      _i4.allowInterop(value),
    );
  }

  _i3.ImageBitmap Function() get transferToImageBitmap => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'transferToImageBitmap',
        ),
        r'call',
        [this],
      );

  /// Returns an object that exposes an API for drawing on the OffscreenCanvas object. contextId specifies the desired API: "2d", "bitmaprenderer", "webgl", or "webgl2". options is handled by that API.
  ///
  ///  This specification defines the "2d" context below, which is similar but distinct from the "2d" context that is created from a canvas element. The WebGL specifications define the "webgl" and "webgl2" contexts. [WEBGL]
  ///
  ///  Returns null if the canvas has already been initialized with another context type (e.g., trying to get a "2d" context after getting a "webgl" context).
  ///
  ///  [MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/getContext)
  _i3.OffscreenCanvasRenderingContext2D? _getContext$1(
    _i2.String contextId, [
    _i2.dynamic options,
  ]) =>
      _i4.callMethod(
        this,
        'getContext',
        [
          contextId,
          options,
        ],
      );

  /// Returns an object that exposes an API for drawing on the OffscreenCanvas object. contextId specifies the desired API: "2d", "bitmaprenderer", "webgl", or "webgl2". options is handled by that API.
  ///
  /// This specification defines the "2d" context below, which is similar but distinct from the "2d" context that is created from a canvas element. The WebGL specifications define the "webgl" and "webgl2" contexts. [WEBGL]
  ///
  /// Returns null if the canvas has already been initialized with another context type (e.g., trying to get a "2d" context after getting a "webgl" context).
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/getContext)
  _i3.ImageBitmapRenderingContext? _getContext$2(
    _i2.String contextId, [
    _i2.dynamic options,
  ]) =>
      _i4.callMethod(
        this,
        'getContext',
        [
          contextId,
          options,
        ],
      );

  /// Returns an object that exposes an API for drawing on the OffscreenCanvas object. contextId specifies the desired API: "2d", "bitmaprenderer", "webgl", or "webgl2". options is handled by that API.
  ///
  /// This specification defines the "2d" context below, which is similar but distinct from the "2d" context that is created from a canvas element. The WebGL specifications define the "webgl" and "webgl2" contexts. [WEBGL]
  ///
  /// Returns null if the canvas has already been initialized with another context type (e.g., trying to get a "2d" context after getting a "webgl" context).
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/getContext)
  _i3.WebGLRenderingContext? _getContext$3(
    _i2.String contextId, [
    _i2.dynamic options,
  ]) =>
      _i4.callMethod(
        this,
        'getContext',
        [
          contextId,
          options,
        ],
      );

  /// Returns an object that exposes an API for drawing on the OffscreenCanvas object. contextId specifies the desired API: "2d", "bitmaprenderer", "webgl", or "webgl2". options is handled by that API.
  ///
  /// This specification defines the "2d" context below, which is similar but distinct from the "2d" context that is created from a canvas element. The WebGL specifications define the "webgl" and "webgl2" contexts. [WEBGL]
  ///
  /// Returns null if the canvas has already been initialized with another context type (e.g., trying to get a "2d" context after getting a "webgl" context).
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/getContext)
  _i3.WebGL2RenderingContext? _getContext$4(
    _i2.String contextId, [
    _i2.dynamic options,
  ]) =>
      _i4.callMethod(
        this,
        'getContext',
        [
          contextId,
          options,
        ],
      );

  /// Returns an object that exposes an API for drawing on the OffscreenCanvas object. contextId specifies the desired API: "2d", "bitmaprenderer", "webgl", or "webgl2". options is handled by that API.
  ///
  /// This specification defines the "2d" context below, which is similar but distinct from the "2d" context that is created from a canvas element. The WebGL specifications define the "webgl" and "webgl2" contexts. [WEBGL]
  ///
  /// Returns null if the canvas has already been initialized with another context type (e.g., trying to get a "2d" context after getting a "webgl" context).
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/getContext)
  _i2.Object? _getContext$5(
    _i3.OffscreenRenderingContextId contextId, [
    _i2.dynamic options,
  ]) =>
      _i4.callMethod(
        this,
        'getContext',
        [
          contextId.name,
          options,
        ],
      );

  /// Overload accessor: $1, $2, $3, $4, $5
  ({
    /// Returns an object that exposes an API for drawing on the OffscreenCanvas object. contextId specifies the desired API: "2d", "bitmaprenderer", "webgl", or "webgl2". options is handled by that API.
    ///
    ///  This specification defines the "2d" context below, which is similar but distinct from the "2d" context that is created from a canvas element. The WebGL specifications define the "webgl" and "webgl2" contexts. [WEBGL]
    ///
    ///  Returns null if the canvas has already been initialized with another context type (e.g., trying to get a "2d" context after getting a "webgl" context).
    ///
    ///  [MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/getContext)
    _i3.OffscreenCanvasRenderingContext2D? Function(
      _i2.String contextId, [
      _i2.dynamic options,
    ]) $1,

    /// Returns an object that exposes an API for drawing on the OffscreenCanvas object. contextId specifies the desired API: "2d", "bitmaprenderer", "webgl", or "webgl2". options is handled by that API.
    ///
    /// This specification defines the "2d" context below, which is similar but distinct from the "2d" context that is created from a canvas element. The WebGL specifications define the "webgl" and "webgl2" contexts. [WEBGL]
    ///
    /// Returns null if the canvas has already been initialized with another context type (e.g., trying to get a "2d" context after getting a "webgl" context).
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/getContext)
    _i3.ImageBitmapRenderingContext? Function(
      _i2.String contextId, [
      _i2.dynamic options,
    ]) $2,

    /// Returns an object that exposes an API for drawing on the OffscreenCanvas object. contextId specifies the desired API: "2d", "bitmaprenderer", "webgl", or "webgl2". options is handled by that API.
    ///
    /// This specification defines the "2d" context below, which is similar but distinct from the "2d" context that is created from a canvas element. The WebGL specifications define the "webgl" and "webgl2" contexts. [WEBGL]
    ///
    /// Returns null if the canvas has already been initialized with another context type (e.g., trying to get a "2d" context after getting a "webgl" context).
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/getContext)
    _i3.WebGLRenderingContext? Function(
      _i2.String contextId, [
      _i2.dynamic options,
    ]) $3,

    /// Returns an object that exposes an API for drawing on the OffscreenCanvas object. contextId specifies the desired API: "2d", "bitmaprenderer", "webgl", or "webgl2". options is handled by that API.
    ///
    /// This specification defines the "2d" context below, which is similar but distinct from the "2d" context that is created from a canvas element. The WebGL specifications define the "webgl" and "webgl2" contexts. [WEBGL]
    ///
    /// Returns null if the canvas has already been initialized with another context type (e.g., trying to get a "2d" context after getting a "webgl" context).
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/getContext)
    _i3.WebGL2RenderingContext? Function(
      _i2.String contextId, [
      _i2.dynamic options,
    ]) $4,

    /// Returns an object that exposes an API for drawing on the OffscreenCanvas object. contextId specifies the desired API: "2d", "bitmaprenderer", "webgl", or "webgl2". options is handled by that API.
    ///
    /// This specification defines the "2d" context below, which is similar but distinct from the "2d" context that is created from a canvas element. The WebGL specifications define the "webgl" and "webgl2" contexts. [WEBGL]
    ///
    /// Returns null if the canvas has already been initialized with another context type (e.g., trying to get a "2d" context after getting a "webgl" context).
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/getContext)
    _i2.Object? Function(
      _i3.OffscreenRenderingContextId contextId, [
      _i2.dynamic options,
    ]) $5,
  }) get getContext => (
        $1: _getContext$1,
        $2: _getContext$2,
        $3: _getContext$3,
        $4: _getContext$4,
        $5: _getContext$5,
      );

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$1<K$>(
    _i3.OffscreenCanvasEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function<K$>(
      _i3.OffscreenCanvasEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get addEventListener => (
        $1: _addEventListener$1,
        $2: _addEventListener$2,
      );

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$1<K$>(
    _i3.OffscreenCanvasEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function<K$>(
      _i3.OffscreenCanvasEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get removeEventListener => (
        $1: _removeEventListener$1,
        $2: _removeEventListener$2,
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvasRenderingContext2D)
@_i1.JS()
@_i1.staticInterop
class OffscreenCanvasRenderingContext2D
    implements
        _i3.CanvasCompositing,
        _i3.CanvasDrawImage,
        _i3.CanvasDrawPath,
        _i3.CanvasFillStrokeStyles,
        _i3.CanvasFilters,
        _i3.CanvasImageData,
        _i3.CanvasImageSmoothing,
        _i3.CanvasPath,
        _i3.CanvasPathDrawingStyles,
        _i3.CanvasRect,
        _i3.CanvasShadowStyles,
        _i3.CanvasState,
        _i3.CanvasText,
        _i3.CanvasTextDrawingStyles,
        _i3.CanvasTransform {
  factory OffscreenCanvasRenderingContext2D() => _i4.callConstructor(
        _declaredOffscreenCanvasRenderingContext2D,
        [],
      );
}

_i2.Object get _declaredOffscreenCanvasRenderingContext2D => _i4.getProperty(
      _self,
      'OffscreenCanvasRenderingContext2D',
    );

extension OffscreenCanvasRenderingContext2D$Typings
    on OffscreenCanvasRenderingContext2D {
  _i3.OffscreenCanvas get canvas => _i4.getProperty(
        this,
        'canvas',
      );
  set commit(void Function() value) {
    _i4.setProperty(
      this,
      'commit',
      _i4.allowInterop(value),
    );
  }

  void Function() get commit => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'commit',
        ),
        r'call',
        [this],
      );
}

/* Source:  */
/// This Canvas 2D API interface is used to declare a path that can then be used on a CanvasRenderingContext2D object. The path methods of the CanvasRenderingContext2D interface are also present on this interface, which gives you the convenience of being able to retain and replay your path whenever desired.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Path2D)
@_i1.JS()
@_i1.staticInterop
class Path2D implements _i3.CanvasPath {
  factory Path2D([_i2.Object? path]) => _i4.callConstructor(
        _declaredPath2D,
        [path ?? _i6.undefined],
      );
}

_i2.Object get _declaredPath2D => _i4.getProperty(
      _self,
      'Path2D',
    );

extension Path2D$Typings on Path2D {
  set addPath(
      void Function(
        _i3.Path2D, [
        _i3.DOMMatrix2DInit?,
      ]) value) {
    _i4.setProperty(
      this,
      'addPath',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i3.Path2D, [
    _i3.DOMMatrix2DInit?,
  ]) get addPath => (
        _i3.Path2D p0, [
        _i3.DOMMatrix2DInit? p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'addPath',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
            ],
          );
}

enum PerformanceEventMap<T$> {
  resourcetimingbufferfull<_i3.Event>(r'resourcetimingbufferfull');

  const PerformanceEventMap(this.value);

  final _i2.String value;
}

/* Source:  */
/// Provides access to performance-related information for the current page. It's part of the High Resolution Time API, but is enhanced by the Performance Timeline API, the Navigation Timing API, the User Timing API, and the Resource Timing API.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance)
@_i1.JS()
@_i1.staticInterop
class Performance implements _i3.EventTarget {
  factory Performance() => _i4.callConstructor(
        _declaredPerformance,
        [],
      );
}

_i2.Object get _declaredPerformance => _i4.getProperty(
      _self,
      'Performance',
    );

extension Performance$Typings on Performance {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance/resourcetimingbufferfull_event)
  _i2.dynamic Function(_i3.Event)? get onresourcetimingbufferfull =>
      (_i3.Event p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onresourcetimingbufferfull',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onresourcetimingbufferfull(_i2.dynamic Function(_i3.Event)? value) {
    _i4.setProperty(
      this,
      'onresourcetimingbufferfull',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance/timeOrigin)
  _i2.num get timeOrigin => _i4.getProperty(
        this,
        'timeOrigin',
      );
  set clearMarks(void Function([_i2.String?]) value) {
    _i4.setProperty(
      this,
      'clearMarks',
      _i4.allowInterop(value),
    );
  }

  void Function([_i2.String?]) get clearMarks =>
      ([_i2.String? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'clearMarks',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set clearMeasures(void Function([_i2.String?]) value) {
    _i4.setProperty(
      this,
      'clearMeasures',
      _i4.allowInterop(value),
    );
  }

  void Function([_i2.String?]) get clearMeasures =>
      ([_i2.String? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'clearMeasures',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set clearResourceTimings(void Function() value) {
    _i4.setProperty(
      this,
      'clearResourceTimings',
      _i4.allowInterop(value),
    );
  }

  void Function() get clearResourceTimings => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'clearResourceTimings',
        ),
        r'call',
        [this],
      );
  set getEntries(_i2.List Function() value) {
    _i4.setProperty(
      this,
      'getEntries',
      _i4.allowInterop(value),
    );
  }

  _i2.List Function() get getEntries => () => ((_i4.callMethod(
        _i4.getProperty(
          this,
          'getEntries',
        ),
        r'call',
        [this],
      )) as _i2.List)
          .cast();
  set getEntriesByName(
      _i2.List Function(
        _i2.String, [
        _i2.String?,
      ]) value) {
    _i4.setProperty(
      this,
      'getEntriesByName',
      _i4.allowInterop(value),
    );
  }

  _i2.List Function(
    _i2.String, [
    _i2.String?,
  ]) get getEntriesByName => (
        _i2.String p0, [
        _i2.String? p1,
      ]) =>
          ((_i4.callMethod(
            _i4.getProperty(
              this,
              'getEntriesByName',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
            ],
          )) as _i2.List)
              .cast();
  set getEntriesByType(_i2.List Function(_i2.String) value) {
    _i4.setProperty(
      this,
      'getEntriesByType',
      _i4.allowInterop(value),
    );
  }

  _i2.List Function(_i2.String) get getEntriesByType =>
      (_i2.String p0) => ((_i4.callMethod(
            _i4.getProperty(
              this,
              'getEntriesByType',
            ),
            r'call',
            [
              this,
              p0,
            ],
          )) as _i2.List)
              .cast();
  set mark(
      _i3.PerformanceMark Function(
        _i2.String, [
        _i3.PerformanceMarkOptions?,
      ]) value) {
    _i4.setProperty(
      this,
      'mark',
      _i4.allowInterop(value),
    );
  }

  _i3.PerformanceMark Function(
    _i2.String, [
    _i3.PerformanceMarkOptions?,
  ]) get mark => (
        _i2.String p0, [
        _i3.PerformanceMarkOptions? p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'mark',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
            ],
          );
  set measure(
      _i3.PerformanceMeasure Function(
        _i2.String, [
        _i2.Object?,
        _i2.String?,
      ]) value) {
    _i4.setProperty(
      this,
      'measure',
      _i4.allowInterop(value),
    );
  }

  _i3.PerformanceMeasure Function(
    _i2.String, [
    _i2.Object?,
    _i2.String?,
  ]) get measure => (
        _i2.String p0, [
        _i2.Object? p1,
        _i2.String? p2,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'measure',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
              p2 ?? _i6.undefined,
            ],
          );
  set now(_i2.num Function() value) {
    _i4.setProperty(
      this,
      'now',
      _i4.allowInterop(value),
    );
  }

  _i2.num Function() get now => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'now',
        ),
        r'call',
        [this],
      );
  set setResourceTimingBufferSize(void Function(_i2.num) value) {
    _i4.setProperty(
      this,
      'setResourceTimingBufferSize',
      _i4.allowInterop(value),
    );
  }

  void Function(_i2.num) get setResourceTimingBufferSize =>
      (_i2.num p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'setResourceTimingBufferSize',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set toJSON(_i2.dynamic Function() value) {
    _i4.setProperty(
      this,
      'toJSON',
      _i4.allowInterop(value),
    );
  }

  _i2.dynamic Function() get toJSON => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'toJSON',
        ),
        r'call',
        [this],
      );

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$1<K$>(
    _i3.PerformanceEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function<K$>(
      _i3.PerformanceEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get addEventListener => (
        $1: _addEventListener$1,
        $2: _addEventListener$2,
      );

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$1<K$>(
    _i3.PerformanceEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function<K$>(
      _i3.PerformanceEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get removeEventListener => (
        $1: _removeEventListener$1,
        $2: _removeEventListener$2,
      );
}

/* Source:  */
/// Encapsulates a single performance metric that is part of the performance timeline. A performance entry can be directly created by making a performance mark or measure (for example by calling the mark() method) at an explicit point in an application. Performance entries are also created in indirect ways such as loading a resource (such as an image).
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEntry)
@_i1.JS()
@_i1.staticInterop
class PerformanceEntry {
  factory PerformanceEntry() => _i4.callConstructor(
        _declaredPerformanceEntry,
        [],
      );
}

_i2.Object get _declaredPerformanceEntry => _i4.getProperty(
      _self,
      'PerformanceEntry',
    );

extension PerformanceEntry$Typings on PerformanceEntry {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEntry/duration)
  _i2.num get duration => _i4.getProperty(
        this,
        'duration',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEntry/entryType)
  _i2.String get entryType => _i4.getProperty(
        this,
        'entryType',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEntry/name)
  _i2.String get name => _i4.getProperty(
        this,
        'name',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEntry/startTime)
  _i2.num get startTime => _i4.getProperty(
        this,
        'startTime',
      );
  set toJSON(_i2.dynamic Function() value) {
    _i4.setProperty(
      this,
      'toJSON',
      _i4.allowInterop(value),
    );
  }

  _i2.dynamic Function() get toJSON => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'toJSON',
        ),
        r'call',
        [this],
      );
}

/* Source:  */
/// PerformanceMark is an abstract interface for PerformanceEntry objects with an entryType of "mark". Entries of this type are created by calling performance.mark() to add a named DOMHighResTimeStamp (the mark) to the browser's performance timeline.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceMark)
@_i1.JS()
@_i1.staticInterop
class PerformanceMark implements _i3.PerformanceEntry {
  factory PerformanceMark(
    _i2.String markName, [
    _i3.PerformanceMarkOptions? markOptions,
  ]) =>
      _i4.callConstructor(
        _declaredPerformanceMark,
        [
          markName,
          markOptions ?? _i6.undefined,
        ],
      );
}

_i2.Object get _declaredPerformanceMark => _i4.getProperty(
      _self,
      'PerformanceMark',
    );

extension PerformanceMark$Typings on PerformanceMark {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceMark/detail)
  _i2.dynamic get detail => _i4.getProperty(
        this,
        'detail',
      );
}

/* Source:  */
/// PerformanceMeasure is an abstract interface for PerformanceEntry objects with an entryType of "measure". Entries of this type are created by calling performance.measure() to add a named DOMHighResTimeStamp (the measure) between two marks to the browser's performance timeline.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceMeasure)
@_i1.JS()
@_i1.staticInterop
class PerformanceMeasure implements _i3.PerformanceEntry {
  factory PerformanceMeasure() => _i4.callConstructor(
        _declaredPerformanceMeasure,
        [],
      );
}

_i2.Object get _declaredPerformanceMeasure => _i4.getProperty(
      _self,
      'PerformanceMeasure',
    );

extension PerformanceMeasure$Typings on PerformanceMeasure {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceMeasure/detail)
  _i2.dynamic get detail => _i4.getProperty(
        this,
        'detail',
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceObserver)
@_i1.JS()
@_i1.staticInterop
class PerformanceObserver {
  factory PerformanceObserver(_i3.PerformanceObserverCallback callback) =>
      _i4.callConstructor(
        _declaredPerformanceObserver,
        [callback],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceObserver/supportedEntryTypes_static)
  static _i9.ReadonlyArray<_i2.String> get supportedEntryTypes =>
      _i4.getProperty(
        _i8.target753,
        'supportedEntryTypes',
      );
}

_i2.Object get _declaredPerformanceObserver => _i4.getProperty(
      _self,
      'PerformanceObserver',
    );

extension PerformanceObserver$Typings on PerformanceObserver {
  set disconnect(void Function() value) {
    _i4.setProperty(
      this,
      'disconnect',
      _i4.allowInterop(value),
    );
  }

  void Function() get disconnect => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'disconnect',
        ),
        r'call',
        [this],
      );
  set observe(void Function([_i3.PerformanceObserverInit?]) value) {
    _i4.setProperty(
      this,
      'observe',
      _i4.allowInterop(value),
    );
  }

  void Function([_i3.PerformanceObserverInit?]) get observe =>
      ([_i3.PerformanceObserverInit? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'observe',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set takeRecords(_i2.List Function() value) {
    _i4.setProperty(
      this,
      'takeRecords',
      _i4.allowInterop(value),
    );
  }

  _i2.List Function() get takeRecords => () => ((_i4.callMethod(
        _i4.getProperty(
          this,
          'takeRecords',
        ),
        r'call',
        [this],
      )) as _i2.List)
          .cast();
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceObserverEntryList)
@_i1.JS()
@_i1.staticInterop
class PerformanceObserverEntryList {
  factory PerformanceObserverEntryList() => _i4.callConstructor(
        _declaredPerformanceObserverEntryList,
        [],
      );
}

_i2.Object get _declaredPerformanceObserverEntryList => _i4.getProperty(
      _self,
      'PerformanceObserverEntryList',
    );

extension PerformanceObserverEntryList$Typings on PerformanceObserverEntryList {
  set getEntries(_i2.List Function() value) {
    _i4.setProperty(
      this,
      'getEntries',
      _i4.allowInterop(value),
    );
  }

  _i2.List Function() get getEntries => () => ((_i4.callMethod(
        _i4.getProperty(
          this,
          'getEntries',
        ),
        r'call',
        [this],
      )) as _i2.List)
          .cast();
  set getEntriesByName(
      _i2.List Function(
        _i2.String, [
        _i2.String?,
      ]) value) {
    _i4.setProperty(
      this,
      'getEntriesByName',
      _i4.allowInterop(value),
    );
  }

  _i2.List Function(
    _i2.String, [
    _i2.String?,
  ]) get getEntriesByName => (
        _i2.String p0, [
        _i2.String? p1,
      ]) =>
          ((_i4.callMethod(
            _i4.getProperty(
              this,
              'getEntriesByName',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
            ],
          )) as _i2.List)
              .cast();
  set getEntriesByType(_i2.List Function(_i2.String) value) {
    _i4.setProperty(
      this,
      'getEntriesByType',
      _i4.allowInterop(value),
    );
  }

  _i2.List Function(_i2.String) get getEntriesByType =>
      (_i2.String p0) => ((_i4.callMethod(
            _i4.getProperty(
              this,
              'getEntriesByType',
            ),
            r'call',
            [
              this,
              p0,
            ],
          )) as _i2.List)
              .cast();
}

/* Source:  */
/// Enables retrieval and analysis of detailed network timing data regarding the loading of an application's resources. An application can use the timing metrics to determine, for example, the length of time it takes to fetch a specific resource, such as an XMLHttpRequest, <SVG>, image, or script.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming)
@_i1.JS()
@_i1.staticInterop
class PerformanceResourceTiming implements _i3.PerformanceEntry {
  factory PerformanceResourceTiming() => _i4.callConstructor(
        _declaredPerformanceResourceTiming,
        [],
      );
}

_i2.Object get _declaredPerformanceResourceTiming => _i4.getProperty(
      _self,
      'PerformanceResourceTiming',
    );

extension PerformanceResourceTiming$Typings on PerformanceResourceTiming {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/connectEnd)
  _i2.num get connectEnd => _i4.getProperty(
        this,
        'connectEnd',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/connectStart)
  _i2.num get connectStart => _i4.getProperty(
        this,
        'connectStart',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/decodedBodySize)
  _i2.num get decodedBodySize => _i4.getProperty(
        this,
        'decodedBodySize',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/domainLookupEnd)
  _i2.num get domainLookupEnd => _i4.getProperty(
        this,
        'domainLookupEnd',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/domainLookupStart)
  _i2.num get domainLookupStart => _i4.getProperty(
        this,
        'domainLookupStart',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/encodedBodySize)
  _i2.num get encodedBodySize => _i4.getProperty(
        this,
        'encodedBodySize',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/fetchStart)
  _i2.num get fetchStart => _i4.getProperty(
        this,
        'fetchStart',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/initiatorType)
  _i2.String get initiatorType => _i4.getProperty(
        this,
        'initiatorType',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/nextHopProtocol)
  _i2.String get nextHopProtocol => _i4.getProperty(
        this,
        'nextHopProtocol',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/redirectEnd)
  _i2.num get redirectEnd => _i4.getProperty(
        this,
        'redirectEnd',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/redirectStart)
  _i2.num get redirectStart => _i4.getProperty(
        this,
        'redirectStart',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/requestStart)
  _i2.num get requestStart => _i4.getProperty(
        this,
        'requestStart',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/responseEnd)
  _i2.num get responseEnd => _i4.getProperty(
        this,
        'responseEnd',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/responseStart)
  _i2.num get responseStart => _i4.getProperty(
        this,
        'responseStart',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/secureConnectionStart)
  _i2.num get secureConnectionStart => _i4.getProperty(
        this,
        'secureConnectionStart',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/serverTiming)
  _i9.ReadonlyArray<_i3.PerformanceServerTiming> get serverTiming =>
      _i4.getProperty(
        this,
        'serverTiming',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/transferSize)
  _i2.num get transferSize => _i4.getProperty(
        this,
        'transferSize',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/workerStart)
  _i2.num get workerStart => _i4.getProperty(
        this,
        'workerStart',
      );
  set toJSON(_i2.dynamic Function() value) {
    _i4.setProperty(
      this,
      'toJSON',
      _i4.allowInterop(value),
    );
  }

  _i2.dynamic Function() get toJSON => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'toJSON',
        ),
        r'call',
        [this],
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceServerTiming)
@_i1.JS()
@_i1.staticInterop
class PerformanceServerTiming {
  factory PerformanceServerTiming() => _i4.callConstructor(
        _declaredPerformanceServerTiming,
        [],
      );
}

_i2.Object get _declaredPerformanceServerTiming => _i4.getProperty(
      _self,
      'PerformanceServerTiming',
    );

extension PerformanceServerTiming$Typings on PerformanceServerTiming {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceServerTiming/description)
  _i2.String get description => _i4.getProperty(
        this,
        'description',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceServerTiming/duration)
  _i2.num get duration => _i4.getProperty(
        this,
        'duration',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceServerTiming/name)
  _i2.String get name => _i4.getProperty(
        this,
        'name',
      );
  set toJSON(_i2.dynamic Function() value) {
    _i4.setProperty(
      this,
      'toJSON',
      _i4.allowInterop(value),
    );
  }

  _i2.dynamic Function() get toJSON => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'toJSON',
        ),
        r'call',
        [this],
      );
}

enum PermissionStatusEventMap<T$> {
  change<_i3.Event>(r'change');

  const PermissionStatusEventMap(this.value);

  final _i2.String value;
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PermissionStatus)
@_i1.JS()
@_i1.staticInterop
class PermissionStatus implements _i3.EventTarget {
  factory PermissionStatus() => _i4.callConstructor(
        _declaredPermissionStatus,
        [],
      );
}

_i2.Object get _declaredPermissionStatus => _i4.getProperty(
      _self,
      'PermissionStatus',
    );

extension PermissionStatus$Typings on PermissionStatus {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PermissionStatus/name)
  _i2.String get name => _i4.getProperty(
        this,
        'name',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PermissionStatus/change_event)
  _i2.dynamic Function(_i3.Event)? get onchange =>
      (_i3.Event p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onchange',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onchange(_i2.dynamic Function(_i3.Event)? value) {
    _i4.setProperty(
      this,
      'onchange',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PermissionStatus/state)
  _i3.PermissionState get state =>
      _i3.PermissionStateOptions.values.byName(_i4.getProperty(
        this,
        'state',
      ));

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$1<K$>(
    _i3.PermissionStatusEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function<K$>(
      _i3.PermissionStatusEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get addEventListener => (
        $1: _addEventListener$1,
        $2: _addEventListener$2,
      );

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$1<K$>(
    _i3.PermissionStatusEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function<K$>(
      _i3.PermissionStatusEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get removeEventListener => (
        $1: _removeEventListener$1,
        $2: _removeEventListener$2,
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Permissions)
@_i1.JS()
@_i1.staticInterop
class Permissions {
  factory Permissions() => _i4.callConstructor(
        _declaredPermissions,
        [],
      );
}

_i2.Object get _declaredPermissions => _i4.getProperty(
      _self,
      'Permissions',
    );

extension Permissions$Typings on Permissions {
  set query(
      _i2.Future<_i3.PermissionStatus> Function(_i3.PermissionDescriptor)
          value) {
    _i4.setProperty(
      this,
      'query',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i3.PermissionStatus> Function(_i3.PermissionDescriptor)
      get query =>
          (_i3.PermissionDescriptor p0) => _i4.promiseToFuture(_i4.callMethod(
                _i4.getProperty(
                  this,
                  'query',
                ),
                r'call',
                [
                  this,
                  p0,
                ],
              ));
}

/* Source:  */
/// Events measuring progress of an underlying process, like an HTTP request (for an XMLHttpRequest, or the loading of the underlying resource of an <img>, <audio>, <video>, <style> or <link>).
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ProgressEvent)
@_i1.JS()
@_i1.staticInterop
class ProgressEvent<T extends _i3.EventTarget> implements _i3.Event {
  factory ProgressEvent(
    _i2.String type, [
    _i3.ProgressEventInit? eventInitDict,
  ]) =>
      _i4.callConstructor(
        _declaredProgressEvent,
        [
          type,
          eventInitDict ?? _i6.undefined,
        ],
      );
}

_i2.Object get _declaredProgressEvent => _i4.getProperty(
      _self,
      'ProgressEvent',
    );

extension ProgressEvent$Typings<T extends _i3.EventTarget> on ProgressEvent<T> {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ProgressEvent/lengthComputable)
  _i2.bool get lengthComputable => _i4.getProperty(
        this,
        'lengthComputable',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ProgressEvent/loaded)
  _i2.num get loaded => _i4.getProperty(
        this,
        'loaded',
      );

  /// Returns the object to which event is dispatched (its target).
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/target)
  T? get target => _i4.getProperty(
        this,
        'target',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ProgressEvent/total)
  _i2.num get total => _i4.getProperty(
        this,
        'total',
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PromiseRejectionEvent)
@_i1.JS()
@_i1.staticInterop
class PromiseRejectionEvent implements _i3.Event {
  factory PromiseRejectionEvent(
    _i2.String type,
    _i3.PromiseRejectionEventInit eventInitDict,
  ) =>
      _i4.callConstructor(
        _declaredPromiseRejectionEvent,
        [
          type,
          eventInitDict,
        ],
      );
}

_i2.Object get _declaredPromiseRejectionEvent => _i4.getProperty(
      _self,
      'PromiseRejectionEvent',
    );

extension PromiseRejectionEvent$Typings on PromiseRejectionEvent {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PromiseRejectionEvent/promise)
  _i2.Future<_i2.dynamic> get promise => _i4.promiseToFuture(_i4.getProperty(
        this,
        'promise',
      ));

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PromiseRejectionEvent/reason)
  _i2.dynamic get reason => _i4.getProperty(
        this,
        'reason',
      );
}

/* Source:  */
/// This Push API interface represents a push message that has been received. This event is sent to the global scope of a ServiceWorker. It contains the information sent from an application server to a PushSubscription.
/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushEvent)
@_i1.JS()
@_i1.staticInterop
class PushEvent implements _i3.ExtendableEvent {
  factory PushEvent(
    _i2.String type, [
    _i3.PushEventInit? eventInitDict,
  ]) =>
      _i4.callConstructor(
        _declaredPushEvent,
        [
          type,
          eventInitDict ?? _i6.undefined,
        ],
      );
}

_i2.Object get _declaredPushEvent => _i4.getProperty(
      _self,
      'PushEvent',
    );

extension PushEvent$Typings on PushEvent {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushEvent/data)
  _i3.PushMessageData? get data => _i4.getProperty(
        this,
        'data',
      );
}

/* Source:  */
/// This Push API interface provides a way to receive notifications from third-party servers as well as request URLs for push notifications.
/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushManager)
@_i1.JS()
@_i1.staticInterop
class PushManager {
  factory PushManager() => _i4.callConstructor(
        _declaredPushManager,
        [],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushManager/supportedContentEncodings_static)
  static _i9.ReadonlyArray<_i2.String> get supportedContentEncodings =>
      _i4.getProperty(
        _i8.target762,
        'supportedContentEncodings',
      );
}

_i2.Object get _declaredPushManager => _i4.getProperty(
      _self,
      'PushManager',
    );

extension PushManager$Typings on PushManager {
  set getSubscription(_i2.Future<_i3.PushSubscription?> Function() value) {
    _i4.setProperty(
      this,
      'getSubscription',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i3.PushSubscription?> Function() get getSubscription =>
      () => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'getSubscription',
            ),
            r'call',
            [this],
          ));
  set permissionState(
      _i2.Future<_i3.PermissionState> Function(
              [_i3.PushSubscriptionOptionsInit?])
          value) {
    _i4.setProperty(
      this,
      'permissionState',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i3.PermissionState> Function([_i3.PushSubscriptionOptionsInit?])
      get permissionState => ([_i3.PushSubscriptionOptionsInit? p0]) =>
          _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'permissionState',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          ));
  set subscribe(
      _i2.Future<_i3.PushSubscription> Function(
              [_i3.PushSubscriptionOptionsInit?])
          value) {
    _i4.setProperty(
      this,
      'subscribe',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i3.PushSubscription> Function([_i3.PushSubscriptionOptionsInit?])
      get subscribe => ([_i3.PushSubscriptionOptionsInit? p0]) =>
          _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'subscribe',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          ));
}

/* Source:  */
/// This Push API interface provides methods which let you retrieve the push data sent by a server in various formats.
/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushMessageData)
@_i1.JS()
@_i1.staticInterop
class PushMessageData {
  factory PushMessageData() => _i4.callConstructor(
        _declaredPushMessageData,
        [],
      );
}

_i2.Object get _declaredPushMessageData => _i4.getProperty(
      _self,
      'PushMessageData',
    );

extension PushMessageData$Typings on PushMessageData {
  set arrayBuffer(_i5.ByteBuffer Function() value) {
    _i4.setProperty(
      this,
      'arrayBuffer',
      _i4.allowInterop(value),
    );
  }

  _i5.ByteBuffer Function() get arrayBuffer => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'arrayBuffer',
        ),
        r'call',
        [this],
      );
  set blob(_i3.Blob Function() value) {
    _i4.setProperty(
      this,
      'blob',
      _i4.allowInterop(value),
    );
  }

  _i3.Blob Function() get blob => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'blob',
        ),
        r'call',
        [this],
      );
  set json(_i2.dynamic Function() value) {
    _i4.setProperty(
      this,
      'json',
      _i4.allowInterop(value),
    );
  }

  _i2.dynamic Function() get json => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'json',
        ),
        r'call',
        [this],
      );
  set text(_i2.String Function() value) {
    _i4.setProperty(
      this,
      'text',
      _i4.allowInterop(value),
    );
  }

  _i2.String Function() get text => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'text',
        ),
        r'call',
        [this],
      );
}

/* Source:  */
/// This Push API interface provides a subcription's URL endpoint and allows unsubscription from a push service.
/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushSubscription)
@_i1.JS()
@_i1.staticInterop
class PushSubscription {
  factory PushSubscription() => _i4.callConstructor(
        _declaredPushSubscription,
        [],
      );
}

_i2.Object get _declaredPushSubscription => _i4.getProperty(
      _self,
      'PushSubscription',
    );

extension PushSubscription$Typings on PushSubscription {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushSubscription/endpoint)
  _i2.String get endpoint => _i4.getProperty(
        this,
        'endpoint',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushSubscription/expirationTime)
  _i2.int? get expirationTime => _i4.getProperty(
        this,
        'expirationTime',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushSubscription/options)
  _i3.PushSubscriptionOptions get options => _i4.getProperty(
        this,
        'options',
      );
  set getKey(_i5.ByteBuffer? Function(_i3.PushEncryptionKeyName) value) {
    _i4.setProperty(
      this,
      'getKey',
      _i4.allowInterop((p0) => () => value(p0) ?? _i6.undefined),
    );
  }

  _i5.ByteBuffer? Function(_i3.PushEncryptionKeyName) get getKey =>
      (_i3.PushEncryptionKeyName p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'getKey',
            ),
            r'call',
            [
              this,
              p0.name,
            ],
          );
  set toJSON(_i3.PushSubscriptionJSON Function() value) {
    _i4.setProperty(
      this,
      'toJSON',
      _i4.allowInterop(value),
    );
  }

  _i3.PushSubscriptionJSON Function() get toJSON => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'toJSON',
        ),
        r'call',
        [this],
      );
  set unsubscribe(_i2.Future<_i2.bool> Function() value) {
    _i4.setProperty(
      this,
      'unsubscribe',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i2.bool> Function() get unsubscribe =>
      () => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'unsubscribe',
            ),
            r'call',
            [this],
          ));
}

/* Source:  */
/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushSubscriptionOptions)
@_i1.JS()
@_i1.staticInterop
class PushSubscriptionOptions {
  factory PushSubscriptionOptions() => _i4.callConstructor(
        _declaredPushSubscriptionOptions,
        [],
      );
}

_i2.Object get _declaredPushSubscriptionOptions => _i4.getProperty(
      _self,
      'PushSubscriptionOptions',
    );

extension PushSubscriptionOptions$Typings on PushSubscriptionOptions {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushSubscriptionOptions/applicationServerKey)
  _i5.ByteBuffer? get applicationServerKey => _i4.getProperty(
        this,
        'applicationServerKey',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushSubscriptionOptions/userVisibleOnly)
  _i2.bool get userVisibleOnly => _i4.getProperty(
        this,
        'userVisibleOnly',
      );
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
class RTCEncodedAudioFrame {
  factory RTCEncodedAudioFrame() => _i4.callConstructor(
        _declaredRTCEncodedAudioFrame,
        [],
      );
}

_i2.Object get _declaredRTCEncodedAudioFrame => _i4.getProperty(
      _self,
      'RTCEncodedAudioFrame',
    );

extension RTCEncodedAudioFrame$Typings on RTCEncodedAudioFrame {
  _i5.ByteBuffer get data => _i4.getProperty(
        this,
        'data',
      );
  set data(_i5.ByteBuffer value) {
    _i4.setProperty(
      this,
      'data',
      value,
    );
  }

  _i2.num get timestamp => _i4.getProperty(
        this,
        'timestamp',
      );
  set getMetadata(_i3.RTCEncodedAudioFrameMetadata Function() value) {
    _i4.setProperty(
      this,
      'getMetadata',
      _i4.allowInterop(value),
    );
  }

  _i3.RTCEncodedAudioFrameMetadata Function() get getMetadata =>
      () => _i4.callMethod(
            _i4.getProperty(
              this,
              'getMetadata',
            ),
            r'call',
            [this],
          );
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
class RTCEncodedVideoFrame {
  factory RTCEncodedVideoFrame() => _i4.callConstructor(
        _declaredRTCEncodedVideoFrame,
        [],
      );
}

_i2.Object get _declaredRTCEncodedVideoFrame => _i4.getProperty(
      _self,
      'RTCEncodedVideoFrame',
    );

extension RTCEncodedVideoFrame$Typings on RTCEncodedVideoFrame {
  _i5.ByteBuffer get data => _i4.getProperty(
        this,
        'data',
      );
  set data(_i5.ByteBuffer value) {
    _i4.setProperty(
      this,
      'data',
      value,
    );
  }

  _i2.num get timestamp => _i4.getProperty(
        this,
        'timestamp',
      );
  _i3.RTCEncodedVideoFrameType get type =>
      _i3.RTCEncodedVideoFrameTypeOptions.values.byName(_i4.getProperty(
        this,
        'type',
      ));
  set getMetadata(_i3.RTCEncodedVideoFrameMetadata Function() value) {
    _i4.setProperty(
      this,
      'getMetadata',
      _i4.allowInterop(value),
    );
  }

  _i3.RTCEncodedVideoFrameMetadata Function() get getMetadata =>
      () => _i4.callMethod(
            _i4.getProperty(
              this,
              'getMetadata',
            ),
            r'call',
            [this],
          );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController)
@_i1.JS()
@_i1.staticInterop
class ReadableByteStreamController {
  factory ReadableByteStreamController() => _i4.callConstructor(
        _declaredReadableByteStreamController,
        [],
      );
}

_i2.Object get _declaredReadableByteStreamController => _i4.getProperty(
      _self,
      'ReadableByteStreamController',
    );

extension ReadableByteStreamController$Typings on ReadableByteStreamController {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController/byobRequest)
  _i3.ReadableStreamBYOBRequest? get byobRequest => _i4.getProperty(
        this,
        'byobRequest',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController/desiredSize)
  _i2.num? get desiredSize => _i4.getProperty(
        this,
        'desiredSize',
      );
  set close(void Function() value) {
    _i4.setProperty(
      this,
      'close',
      _i4.allowInterop(value),
    );
  }

  void Function() get close => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'close',
        ),
        r'call',
        [this],
      );
  set enqueue(void Function(_i9.ArrayBufferView) value) {
    _i4.setProperty(
      this,
      'enqueue',
      _i4.allowInterop(value),
    );
  }

  void Function(_i9.ArrayBufferView) get enqueue =>
      (_i9.ArrayBufferView p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'enqueue',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set error(void Function([_i2.dynamic]) value) {
    _i4.setProperty(
      this,
      'error',
      _i4.allowInterop(value),
    );
  }

  void Function([_i2.dynamic]) get error =>
      ([_i2.dynamic p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'error',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class IInline122 {}

extension IInline122$Typings on IInline122 {
  _i2.String get mode => _i4.getProperty(
        this,
        'mode',
      );
  set mode(_i2.String value) {
    _i4.setProperty(
      this,
      'mode',
      value,
    );
  }
}

/* Source:  */
/// This Streams API interface represents a readable stream of byte data. The Fetch API offers a concrete instance of a ReadableStream through the body property of a Response object.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream)
@_i1.JS()
@_i1.staticInterop
class ReadableStream<R> {
  factory ReadableStream.$1() => _i4.callConstructor(
        _declaredReadableStream,
        [],
      );

  factory ReadableStream.$2(
    _i3.UnderlyingByteSource underlyingSource, [
    _i3.IInline124? strategy,
  ]) =>
      _i4.callConstructor(
        _declaredReadableStream,
        [
          underlyingSource,
          strategy ?? _i6.undefined,
        ],
      );

  factory ReadableStream.$3(
    _i3.UnderlyingDefaultSource<R> underlyingSource, [
    _i3.QueuingStrategy<R>? strategy,
  ]) =>
      _i4.callConstructor(
        _declaredReadableStream,
        [
          underlyingSource,
          strategy ?? _i6.undefined,
        ],
      );

  factory ReadableStream.$4([
    _i3.UnderlyingSource<R>? underlyingSource,
    _i3.QueuingStrategy<R>? strategy,
  ]) =>
      _i4.callConstructor(
        _declaredReadableStream,
        [
          underlyingSource ?? _i6.undefined,
          strategy ?? _i6.undefined,
        ],
      );
}

_i2.Object get _declaredReadableStream => _i4.getProperty(
      _self,
      'ReadableStream',
    );

extension ReadableStream$Typings<R> on ReadableStream<R> {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream/locked)
  _i2.bool get locked => _i4.getProperty(
        this,
        'locked',
      );
  set cancel(_i2.Future<void> Function([_i2.dynamic]) value) {
    _i4.setProperty(
      this,
      'cancel',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<void> Function([_i2.dynamic]) get cancel =>
      ([_i2.dynamic p0]) => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'cancel',
            ),
            r'call',
            [
              this,
              p0,
            ],
          ));
  set pipeThrough(
      _i3.ReadableStream<T> Function<T>(
        _i3.ReadableWritablePair<T, R>, [
        _i3.StreamPipeOptions?,
      ]) value) {
    _i4.setProperty(
      this,
      'pipeThrough',
      _i4.allowInterop(value),
    );
  }

  _i3.ReadableStream<T> Function<T>(
    _i3.ReadableWritablePair<T, R>, [
    _i3.StreamPipeOptions?,
  ]) get pipeThrough => <T>(
        _i3.ReadableWritablePair<T, R> p0, [
        _i3.StreamPipeOptions? p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'pipeThrough',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
            ],
          );
  set pipeTo(
      _i2.Future<void> Function(
        _i3.WritableStream<R>, [
        _i3.StreamPipeOptions?,
      ]) value) {
    _i4.setProperty(
      this,
      'pipeTo',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<void> Function(
    _i3.WritableStream<R>, [
    _i3.StreamPipeOptions?,
  ]) get pipeTo => (
        _i3.WritableStream<R> p0, [
        _i3.StreamPipeOptions? p1,
      ]) =>
          _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'pipeTo',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
            ],
          ));
  set tee(
      (
        _i3.ReadableStream<R>,
        _i3.ReadableStream<R>,
      )
              Function()
          value) {
    _i4.setProperty(
      this,
      'tee',
      _i4.allowInterop(() => [
            () => value().$1,
            () => value().$2,
          ]),
    );
  }

  (
    _i3.ReadableStream<R>,
    _i3.ReadableStream<R>,
  )
      Function() get tee => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'tee',
        ),
        r'call',
        [this],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream/getReader)
  _i3.ReadableStreamDefaultReader<R> _getReader$1() => _i4.callMethod(
        this,
        'getReader',
        [],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream/getReader)
  _i3.ReadableStreamBYOBReader _getReader$2(_i3.IInline122 options) =>
      _i4.callMethod(
        this,
        'getReader',
        [options],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream/getReader)
  _i3.ReadableStreamReader<R> _getReader$3(
          [_i3.ReadableStreamGetReaderOptions? options]) =>
      _i4.callMethod(
        this,
        'getReader',
        [options ?? _i6.undefined],
      );

  /// Overload accessor: $1, $2, $3
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream/getReader)
    _i3.ReadableStreamDefaultReader<R> Function() $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream/getReader)
    _i3.ReadableStreamBYOBReader Function(_i3.IInline122 options) $2,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream/getReader)
    _i3.ReadableStreamReader<R> Function(
        [_i3.ReadableStreamGetReaderOptions? options]) $3,
  }) get getReader => (
        $1: _getReader$1,
        $2: _getReader$2,
        $3: _getReader$3,
      );
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class IInline124 {}

extension IInline124$Typings on IInline124 {
  _i2.num? get highWaterMark => _i4.getProperty(
        this,
        'highWaterMark',
      );
  set highWaterMark(_i2.num? value) {
    _i4.setProperty(
      this,
      'highWaterMark',
      value ?? _i6.undefined,
    );
  }
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBReader)
@_i1.JS()
@_i1.staticInterop
class ReadableStreamBYOBReader implements _i3.ReadableStreamGenericReader {
  factory ReadableStreamBYOBReader(_i3.ReadableStream<_i2.dynamic> stream) =>
      _i4.callConstructor(
        _declaredReadableStreamBYOBReader,
        [stream],
      );
}

_i2.Object get _declaredReadableStreamBYOBReader => _i4.getProperty(
      _self,
      'ReadableStreamBYOBReader',
    );

extension ReadableStreamBYOBReader$Typings on ReadableStreamBYOBReader {
  set read(
      _i2.Future<_i3.ReadableStreamReadResult<T>>
              Function<T extends _i9.ArrayBufferView>(T)
          value) {
    _i4.setProperty(
      this,
      'read',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i3.ReadableStreamReadResult<T>>
          Function<T extends _i9.ArrayBufferView>(T)
      get read => <T extends _i9.ArrayBufferView>(T p0) =>
          _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'read',
            ),
            r'call',
            [
              this,
              p0,
            ],
          ));
  set releaseLock(void Function() value) {
    _i4.setProperty(
      this,
      'releaseLock',
      _i4.allowInterop(value),
    );
  }

  void Function() get releaseLock => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'releaseLock',
        ),
        r'call',
        [this],
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBRequest)
@_i1.JS()
@_i1.staticInterop
class ReadableStreamBYOBRequest {
  factory ReadableStreamBYOBRequest() => _i4.callConstructor(
        _declaredReadableStreamBYOBRequest,
        [],
      );
}

_i2.Object get _declaredReadableStreamBYOBRequest => _i4.getProperty(
      _self,
      'ReadableStreamBYOBRequest',
    );

extension ReadableStreamBYOBRequest$Typings on ReadableStreamBYOBRequest {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBRequest/view)
  _i9.ArrayBufferView? get view => _i4.getProperty(
        this,
        'view',
      );
  set respond(void Function(_i2.num) value) {
    _i4.setProperty(
      this,
      'respond',
      _i4.allowInterop(value),
    );
  }

  void Function(_i2.num) get respond => (_i2.num p0) => _i4.callMethod(
        _i4.getProperty(
          this,
          'respond',
        ),
        r'call',
        [
          this,
          p0,
        ],
      );
  set respondWithNewView(void Function(_i9.ArrayBufferView) value) {
    _i4.setProperty(
      this,
      'respondWithNewView',
      _i4.allowInterop(value),
    );
  }

  void Function(_i9.ArrayBufferView) get respondWithNewView =>
      (_i9.ArrayBufferView p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'respondWithNewView',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultController)
@_i1.JS()
@_i1.staticInterop
class ReadableStreamDefaultController<R> {
  factory ReadableStreamDefaultController() => _i4.callConstructor(
        _declaredReadableStreamDefaultController,
        [],
      );
}

_i2.Object get _declaredReadableStreamDefaultController => _i4.getProperty(
      _self,
      'ReadableStreamDefaultController',
    );

extension ReadableStreamDefaultController$Typings<R>
    on ReadableStreamDefaultController<R> {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultController/desiredSize)
  _i2.num? get desiredSize => _i4.getProperty(
        this,
        'desiredSize',
      );
  set close(void Function() value) {
    _i4.setProperty(
      this,
      'close',
      _i4.allowInterop(value),
    );
  }

  void Function() get close => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'close',
        ),
        r'call',
        [this],
      );
  set enqueue(void Function([R?]) value) {
    _i4.setProperty(
      this,
      'enqueue',
      _i4.allowInterop(value),
    );
  }

  void Function([R?]) get enqueue => ([R? p0]) => _i4.callMethod(
        _i4.getProperty(
          this,
          'enqueue',
        ),
        r'call',
        [
          this,
          p0 ?? _i6.undefined,
        ],
      );
  set error(void Function([_i2.dynamic]) value) {
    _i4.setProperty(
      this,
      'error',
      _i4.allowInterop(value),
    );
  }

  void Function([_i2.dynamic]) get error =>
      ([_i2.dynamic p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'error',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultReader)
@_i1.JS()
@_i1.staticInterop
class ReadableStreamDefaultReader<R>
    implements _i3.ReadableStreamGenericReader {
  factory ReadableStreamDefaultReader(_i3.ReadableStream<R> stream) =>
      _i4.callConstructor(
        _declaredReadableStreamDefaultReader,
        [stream],
      );
}

_i2.Object get _declaredReadableStreamDefaultReader => _i4.getProperty(
      _self,
      'ReadableStreamDefaultReader',
    );

extension ReadableStreamDefaultReader$Typings<R>
    on ReadableStreamDefaultReader<R> {
  set read(_i2.Future<_i3.ReadableStreamReadResult<R>> Function() value) {
    _i4.setProperty(
      this,
      'read',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i3.ReadableStreamReadResult<R>> Function() get read =>
      () => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'read',
            ),
            r'call',
            [this],
          ));
  set releaseLock(void Function() value) {
    _i4.setProperty(
      this,
      'releaseLock',
      _i4.allowInterop(value),
    );
  }

  void Function() get releaseLock => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'releaseLock',
        ),
        r'call',
        [this],
      );
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class ReadableStreamGenericReader {
  external factory ReadableStreamGenericReader._({
    _i2.dynamic closed,
    _i2.dynamic cancel,
  });

  factory ReadableStreamGenericReader({
    _i2.Future<_i2.dynamic>? closed,
    _i2.Future<void> Function([_i2.dynamic])? cancel,
  }) =>
      ReadableStreamGenericReader._(
        closed: closed,
        cancel: cancel == null ? null : _i4.allowInterop(cancel),
      );
}

extension ReadableStreamGenericReader$Typings on ReadableStreamGenericReader {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBReader/closed)
  _i2.Future<_i2.dynamic> get closed => _i4.promiseToFuture(_i4.getProperty(
        this,
        'closed',
      ));
  set cancel(_i2.Future<void> Function([_i2.dynamic]) value) {
    _i4.setProperty(
      this,
      'cancel',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<void> Function([_i2.dynamic]) get cancel =>
      ([_i2.dynamic p0]) => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'cancel',
            ),
            r'call',
            [
              this,
              p0,
            ],
          ));
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Report)
@_i1.JS()
@_i1.staticInterop
class Report {
  factory Report() => _i4.callConstructor(
        _declaredReport,
        [],
      );
}

_i2.Object get _declaredReport => _i4.getProperty(
      _self,
      'Report',
    );

extension Report$Typings on Report {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Report/body)
  _i3.ReportBody? get body => _i4.getProperty(
        this,
        'body',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Report/type)
  _i2.String get type => _i4.getProperty(
        this,
        'type',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Report/url)
  _i2.String get url => _i4.getProperty(
        this,
        'url',
      );
  set toJSON(_i2.dynamic Function() value) {
    _i4.setProperty(
      this,
      'toJSON',
      _i4.allowInterop(value),
    );
  }

  _i2.dynamic Function() get toJSON => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'toJSON',
        ),
        r'call',
        [this],
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReportBody)
@_i1.JS()
@_i1.staticInterop
class ReportBody {
  factory ReportBody() => _i4.callConstructor(
        _declaredReportBody,
        [],
      );
}

_i2.Object get _declaredReportBody => _i4.getProperty(
      _self,
      'ReportBody',
    );

extension ReportBody$Typings on ReportBody {
  set toJSON(_i2.dynamic Function() value) {
    _i4.setProperty(
      this,
      'toJSON',
      _i4.allowInterop(value),
    );
  }

  _i2.dynamic Function() get toJSON => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'toJSON',
        ),
        r'call',
        [this],
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReportingObserver)
@_i1.JS()
@_i1.staticInterop
class ReportingObserver {
  factory ReportingObserver(
    _i3.ReportingObserverCallback callback, [
    _i3.ReportingObserverOptions? options,
  ]) =>
      _i4.callConstructor(
        _declaredReportingObserver,
        [
          callback,
          options ?? _i6.undefined,
        ],
      );
}

_i2.Object get _declaredReportingObserver => _i4.getProperty(
      _self,
      'ReportingObserver',
    );

extension ReportingObserver$Typings on ReportingObserver {
  set disconnect(void Function() value) {
    _i4.setProperty(
      this,
      'disconnect',
      _i4.allowInterop(value),
    );
  }

  void Function() get disconnect => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'disconnect',
        ),
        r'call',
        [this],
      );
  set observe(void Function() value) {
    _i4.setProperty(
      this,
      'observe',
      _i4.allowInterop(value),
    );
  }

  void Function() get observe => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'observe',
        ),
        r'call',
        [this],
      );
  set takeRecords(_i2.List Function() value) {
    _i4.setProperty(
      this,
      'takeRecords',
      _i4.allowInterop(value),
    );
  }

  _i2.List Function() get takeRecords => () => ((_i4.callMethod(
        _i4.getProperty(
          this,
          'takeRecords',
        ),
        r'call',
        [this],
      )) as _i2.List)
          .cast();
}

/* Source:  */
/// This Fetch API interface represents a resource request.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request)
@_i1.JS()
@_i1.staticInterop
class Request implements _i3.Body {
  factory Request(
    _i2.Object input, [
    _i3.RequestInit? init,
  ]) =>
      _i4.callConstructor(
        _declaredRequest,
        [
          input,
          init ?? _i6.undefined,
        ],
      );
}

_i2.Object get _declaredRequest => _i4.getProperty(
      _self,
      'Request',
    );

extension Request$Typings on Request {
  /// Returns the cache mode associated with request, which is a string indicating how the request will interact with the browser's cache when fetching.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/cache)
  _i3.RequestCache get cache =>
      _i3.RequestCacheOptions.values.byName(_i4.getProperty(
        this,
        'cache',
      ));

  /// Returns the credentials mode associated with request, which is a string indicating whether credentials will be sent with the request always, never, or only when sent to a same-origin URL.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/credentials)
  _i3.RequestCredentials get credentials =>
      _i3.RequestCredentialsOptions.values.byName(_i4.getProperty(
        this,
        'credentials',
      ));

  /// Returns the kind of resource requested by request, e.g., "document" or "script".
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/destination)
  _i3.RequestDestination get destination =>
      _i3.RequestDestinationOptions.values.byName(_i4.getProperty(
        this,
        'destination',
      ));

  /// Returns a Headers object consisting of the headers associated with request. Note that headers added in the network layer by the user agent will not be accounted for in this object, e.g., the "Host" header.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/headers)
  _i3.Headers get headers => _i4.getProperty(
        this,
        'headers',
      );

  /// Returns request's subresource integrity metadata, which is a cryptographic hash of the resource being fetched. Its value consists of multiple hashes separated by whitespace. [SRI]
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/integrity)
  _i2.String get integrity => _i4.getProperty(
        this,
        'integrity',
      );

  /// Returns a boolean indicating whether or not request can outlive the global in which it was created.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/keepalive)
  _i2.bool get keepalive => _i4.getProperty(
        this,
        'keepalive',
      );

  /// Returns request's HTTP method, which is "GET" by default.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/method)
  _i2.String get method => _i4.getProperty(
        this,
        'method',
      );

  /// Returns the mode associated with request, which is a string indicating whether the request will use CORS, or will be restricted to same-origin URLs.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/mode)
  _i3.RequestMode get mode =>
      _i3.RequestModeOptions.values.byName(_i4.getProperty(
        this,
        'mode',
      ));

  /// Returns the redirect mode associated with request, which is a string indicating how redirects for the request will be handled during fetching. A request will follow redirects by default.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/redirect)
  _i3.RequestRedirect get redirect =>
      _i3.RequestRedirectOptions.values.byName(_i4.getProperty(
        this,
        'redirect',
      ));

  /// Returns the referrer of request. Its value can be a same-origin URL if explicitly set in init, the empty string to indicate no referrer, and "about:client" when defaulting to the global's default. This is used during fetching to determine the value of the `Referer` header of the request being made.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/referrer)
  _i2.String get referrer => _i4.getProperty(
        this,
        'referrer',
      );

  /// Returns the referrer policy associated with request. This is used during fetching to compute the value of the request's referrer.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/referrerPolicy)
  _i3.ReferrerPolicy get referrerPolicy =>
      _i3.ReferrerPolicyOptions.values.byName(_i4.getProperty(
        this,
        'referrerPolicy',
      ));

  /// Returns the signal associated with request, which is an AbortSignal object indicating whether or not request has been aborted, and its abort event handler.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/signal)
  _i3.AbortSignal get signal => _i4.getProperty(
        this,
        'signal',
      );

  /// Returns the URL of request as a string.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/url)
  _i2.String get url => _i4.getProperty(
        this,
        'url',
      );
  set clone(_i3.Request Function() value) {
    _i4.setProperty(
      this,
      'clone',
      _i4.allowInterop(value),
    );
  }

  _i3.Request Function() get clone => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'clone',
        ),
        r'call',
        [this],
      );
}

/* Source:  */
/// This Fetch API interface represents the response to a request.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Response)
@_i1.JS()
@_i1.staticInterop
class Response implements _i3.Body {
  factory Response([
    _i2.Object? body,
    _i3.ResponseInit? init,
  ]) =>
      _i4.callConstructor(
        _declaredResponse,
        [
          body ?? _i6.undefined ?? _i6.undefined,
          init ?? _i6.undefined,
        ],
      );

  static set error(_i3.Response Function() value) {
    _i4.setProperty(
      _i8.target778,
      'error',
      _i4.allowInterop(value),
    );
  }

  static _i3.Response Function() get error => () => _i4.callMethod(
        _i4.getProperty(
          _i8.target778,
          'error',
        ),
        r'call',
        [_i8.target778],
      );
  static set json(
      _i3.Response Function([
        _i2.dynamic,
        _i3.ResponseInit?,
      ]) value) {
    _i4.setProperty(
      _i8.target778,
      'json',
      _i4.allowInterop(value),
    );
  }

  static _i3.Response Function([
    _i2.dynamic,
    _i3.ResponseInit?,
  ]) get json => ([
        _i2.dynamic p0,
        _i3.ResponseInit? p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              _i8.target778,
              'json',
            ),
            r'call',
            [
              _i8.target778,
              p0,
              p1 ?? _i6.undefined,
            ],
          );
  static set redirect(
      _i3.Response Function(
        _i2.Object, [
        _i2.num?,
      ]) value) {
    _i4.setProperty(
      _i8.target778,
      'redirect',
      _i4.allowInterop(value),
    );
  }

  static _i3.Response Function(
    _i2.Object, [
    _i2.num?,
  ]) get redirect => (
        _i2.Object p0, [
        _i2.num? p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              _i8.target778,
              'redirect',
            ),
            r'call',
            [
              _i8.target778,
              p0,
              p1 ?? _i6.undefined,
            ],
          );
}

_i2.Object get _declaredResponse => _i4.getProperty(
      _self,
      'Response',
    );

extension Response$Typings on Response {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/headers)
  _i3.Headers get headers => _i4.getProperty(
        this,
        'headers',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/ok)
  _i2.bool get ok => _i4.getProperty(
        this,
        'ok',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/redirected)
  _i2.bool get redirected => _i4.getProperty(
        this,
        'redirected',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/status)
  _i2.num get status => _i4.getProperty(
        this,
        'status',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/statusText)
  _i2.String get statusText => _i4.getProperty(
        this,
        'statusText',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/type)
  _i3.ResponseType get type =>
      _i3.ResponseTypeOptions.values.byName(_i4.getProperty(
        this,
        'type',
      ));

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/url)
  _i2.String get url => _i4.getProperty(
        this,
        'url',
      );
  set clone(_i3.Response Function() value) {
    _i4.setProperty(
      this,
      'clone',
      _i4.allowInterop(value),
    );
  }

  _i3.Response Function() get clone => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'clone',
        ),
        r'call',
        [this],
      );
}

/* Source:  */
/// Inherits from Event, and represents the event object of an event sent on a document or worker when its content security policy is violated.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent)
@_i1.JS()
@_i1.staticInterop
class SecurityPolicyViolationEvent implements _i3.Event {
  factory SecurityPolicyViolationEvent(
    _i2.String type, [
    _i3.SecurityPolicyViolationEventInit? eventInitDict,
  ]) =>
      _i4.callConstructor(
        _declaredSecurityPolicyViolationEvent,
        [
          type,
          eventInitDict ?? _i6.undefined,
        ],
      );
}

_i2.Object get _declaredSecurityPolicyViolationEvent => _i4.getProperty(
      _self,
      'SecurityPolicyViolationEvent',
    );

extension SecurityPolicyViolationEvent$Typings on SecurityPolicyViolationEvent {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/blockedURI)
  _i2.String get blockedURI => _i4.getProperty(
        this,
        'blockedURI',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/columnNumber)
  _i2.num get columnNumber => _i4.getProperty(
        this,
        'columnNumber',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/disposition)
  _i3.SecurityPolicyViolationEventDisposition get disposition =>
      _i3.SecurityPolicyViolationEventDispositionOptions.values
          .byName(_i4.getProperty(
        this,
        'disposition',
      ));

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/documentURI)
  _i2.String get documentURI => _i4.getProperty(
        this,
        'documentURI',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/effectiveDirective)
  _i2.String get effectiveDirective => _i4.getProperty(
        this,
        'effectiveDirective',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/lineNumber)
  _i2.num get lineNumber => _i4.getProperty(
        this,
        'lineNumber',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/originalPolicy)
  _i2.String get originalPolicy => _i4.getProperty(
        this,
        'originalPolicy',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/referrer)
  _i2.String get referrer => _i4.getProperty(
        this,
        'referrer',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/sample)
  _i2.String get sample => _i4.getProperty(
        this,
        'sample',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/sourceFile)
  _i2.String get sourceFile => _i4.getProperty(
        this,
        'sourceFile',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/statusCode)
  _i2.num get statusCode => _i4.getProperty(
        this,
        'statusCode',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/violatedDirective)
  _i2.String get violatedDirective => _i4.getProperty(
        this,
        'violatedDirective',
      );
}

enum ServiceWorkerEventMap<T$> {
  statechange<_i3.Event>(r'statechange'),
  error<_i3.ErrorEvent>(r'error');

  const ServiceWorkerEventMap(this.value);

  final _i2.String value;
}

/* Source:  */
/// This ServiceWorker API interface provides a reference to a service worker. Multiple browsing contexts (e.g. pages, workers, etc.) can be associated with the same service worker, each through a unique ServiceWorker object.
/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorker)
@_i1.JS()
@_i1.staticInterop
class ServiceWorker implements _i3.EventTarget, _i3.AbstractWorker {
  factory ServiceWorker() => _i4.callConstructor(
        _declaredServiceWorker,
        [],
      );
}

_i2.Object get _declaredServiceWorker => _i4.getProperty(
      _self,
      'ServiceWorker',
    );

extension ServiceWorker$Typings on ServiceWorker {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorker/statechange_event)
  _i2.dynamic Function(_i3.Event)? get onstatechange =>
      (_i3.Event p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onstatechange',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onstatechange(_i2.dynamic Function(_i3.Event)? value) {
    _i4.setProperty(
      this,
      'onstatechange',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorker/scriptURL)
  _i2.String get scriptURL => _i4.getProperty(
        this,
        'scriptURL',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorker/state)
  _i3.ServiceWorkerState get state =>
      _i3.ServiceWorkerStateOptions.values.byName(_i4.getProperty(
        this,
        'state',
      ));

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorker/postMessage)
  void _postMessage$1(
    _i2.List<_i2.Object> transfer, [
    _i2.dynamic message,
  ]) {
    _i4.callMethod(
      this,
      'postMessage',
      [
        message,
        transfer,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorker/postMessage)
  void _postMessage$2([
    _i2.dynamic message,
    _i3.StructuredSerializeOptions? options,
  ]) {
    _i4.callMethod(
      this,
      'postMessage',
      [
        message,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorker/postMessage)
    void Function(
      _i2.List<_i2.Object> transfer, [
      _i2.dynamic message,
    ]) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorker/postMessage)
    void Function([
      _i2.dynamic message,
      _i3.StructuredSerializeOptions? options,
    ]) $2,
  }) get postMessage => (
        $1: _postMessage$1,
        $2: _postMessage$2,
      );

  ///
  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$1<K$>(
    _i3.ServiceWorkerEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  ///
  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    ///
    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function<K$>(
      _i3.ServiceWorkerEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    ///
    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get addEventListener => (
        $1: _addEventListener$1,
        $2: _addEventListener$2,
      );

  ///
  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$1<K$>(
    _i3.ServiceWorkerEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  ///
  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    ///
    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function<K$>(
      _i3.ServiceWorkerEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    ///
    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get removeEventListener => (
        $1: _removeEventListener$1,
        $2: _removeEventListener$2,
      );
}

enum ServiceWorkerContainerEventMap<T$> {
  controllerchange<_i3.Event>(r'controllerchange'),
  message<_i3.MessageEvent<_i2.dynamic>>(r'message'),
  messageerror<_i3.MessageEvent<_i2.dynamic>>(r'messageerror');

  const ServiceWorkerContainerEventMap(this.value);

  final _i2.String value;
}

/* Source:  */
/// The ServiceWorkerContainer interface of the ServiceWorker API provides an object representing the service worker as an overall unit in the network ecosystem, including facilities to register, unregister and update service workers, and access the state of service workers and their registrations.
/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer)
@_i1.JS()
@_i1.staticInterop
class ServiceWorkerContainer implements _i3.EventTarget {
  factory ServiceWorkerContainer() => _i4.callConstructor(
        _declaredServiceWorkerContainer,
        [],
      );
}

_i2.Object get _declaredServiceWorkerContainer => _i4.getProperty(
      _self,
      'ServiceWorkerContainer',
    );

extension ServiceWorkerContainer$Typings on ServiceWorkerContainer {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/controller)
  _i3.ServiceWorker? get controller => _i4.getProperty(
        this,
        'controller',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/controllerchange_event)
  _i2.dynamic Function(_i3.Event)? get oncontrollerchange =>
      (_i3.Event p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'oncontrollerchange',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set oncontrollerchange(_i2.dynamic Function(_i3.Event)? value) {
    _i4.setProperty(
      this,
      'oncontrollerchange',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/message_event)
  _i2.dynamic Function(_i3.MessageEvent<_i2.dynamic>)? get onmessage =>
      (_i3.MessageEvent<_i2.dynamic> p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onmessage',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onmessage(_i2.dynamic Function(_i3.MessageEvent<_i2.dynamic>)? value) {
    _i4.setProperty(
      this,
      'onmessage',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  _i2.dynamic Function(_i3.MessageEvent<_i2.dynamic>)? get onmessageerror =>
      (_i3.MessageEvent<_i2.dynamic> p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onmessageerror',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onmessageerror(
      _i2.dynamic Function(_i3.MessageEvent<_i2.dynamic>)? value) {
    _i4.setProperty(
      this,
      'onmessageerror',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/ready)
  _i2.Future<_i3.ServiceWorkerRegistration> get ready =>
      _i4.promiseToFuture(_i4.getProperty(
        this,
        'ready',
      ));
  set getRegistration(
      _i2.Future<_i3.ServiceWorkerRegistration?> Function([_i2.Object?])
          value) {
    _i4.setProperty(
      this,
      'getRegistration',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i3.ServiceWorkerRegistration?> Function([_i2.Object?])
      get getRegistration =>
          ([_i2.Object? p0]) => _i4.promiseToFuture(_i4.callMethod(
                _i4.getProperty(
                  this,
                  'getRegistration',
                ),
                r'call',
                [
                  this,
                  p0 ?? _i6.undefined,
                ],
              ));
  set getRegistrations(
      _i2.Future<_i9.ReadonlyArray<_i3.ServiceWorkerRegistration>> Function()
          value) {
    _i4.setProperty(
      this,
      'getRegistrations',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i9.ReadonlyArray<_i3.ServiceWorkerRegistration>> Function()
      get getRegistrations => () => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'getRegistrations',
            ),
            r'call',
            [this],
          ));
  set register(
      _i2.Future<_i3.ServiceWorkerRegistration> Function(
        _i2.Object, [
        _i3.RegistrationOptions?,
      ]) value) {
    _i4.setProperty(
      this,
      'register',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i3.ServiceWorkerRegistration> Function(
    _i2.Object, [
    _i3.RegistrationOptions?,
  ]) get register => (
        _i2.Object p0, [
        _i3.RegistrationOptions? p1,
      ]) =>
          _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'register',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
            ],
          ));
  set startMessages(void Function() value) {
    _i4.setProperty(
      this,
      'startMessages',
      _i4.allowInterop(value),
    );
  }

  void Function() get startMessages => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'startMessages',
        ),
        r'call',
        [this],
      );

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$1<K$>(
    _i3.ServiceWorkerContainerEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function<K$>(
      _i3.ServiceWorkerContainerEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get addEventListener => (
        $1: _addEventListener$1,
        $2: _addEventListener$2,
      );

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$1<K$>(
    _i3.ServiceWorkerContainerEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function<K$>(
      _i3.ServiceWorkerContainerEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get removeEventListener => (
        $1: _removeEventListener$1,
        $2: _removeEventListener$2,
      );
}

enum ServiceWorkerGlobalScopeEventMap<T$> {
  activate<_i3.ExtendableEvent>(r'activate'),
  fetch<_i3.FetchEvent>(r'fetch'),
  install<_i3.ExtendableEvent>(r'install'),
  message<_i3.ExtendableMessageEvent>(r'message'),
  messageerror<_i3.MessageEvent<_i2.dynamic>>(r'messageerror'),
  notificationclick<_i3.NotificationEvent>(r'notificationclick'),
  notificationclose<_i3.NotificationEvent>(r'notificationclose'),
  push<_i3.PushEvent>(r'push'),
  pushsubscriptionchange<_i3.Event>(r'pushsubscriptionchange'),
  error<_i3.ErrorEvent>(r'error'),
  languagechange<_i3.Event>(r'languagechange'),
  offline<_i3.Event>(r'offline'),
  online<_i3.Event>(r'online'),
  rejectionhandled<_i3.PromiseRejectionEvent>(r'rejectionhandled'),
  unhandledrejection<_i3.PromiseRejectionEvent>(r'unhandledrejection');

  const ServiceWorkerGlobalScopeEventMap(this.value);

  final _i2.String value;
}

/* Source:  */
/// This ServiceWorker API interface represents the global execution context of a service worker.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerGlobalScope)
@_i1.JS()
@_i1.staticInterop
class ServiceWorkerGlobalScope implements _i3.WorkerGlobalScope {
  factory ServiceWorkerGlobalScope() => _i4.callConstructor(
        _declaredServiceWorkerGlobalScope,
        [],
      );
}

_i2.Object get _declaredServiceWorkerGlobalScope => _i4.getProperty(
      _self,
      'ServiceWorkerGlobalScope',
    );

extension ServiceWorkerGlobalScope$Typings on ServiceWorkerGlobalScope {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerGlobalScope/clients)
  _i3.Clients get clients => _i4.getProperty(
        this,
        'clients',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerGlobalScope/activate_event)
  _i2.dynamic Function(_i3.ExtendableEvent)? get onactivate =>
      (_i3.ExtendableEvent p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onactivate',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onactivate(_i2.dynamic Function(_i3.ExtendableEvent)? value) {
    _i4.setProperty(
      this,
      'onactivate',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerGlobalScope/fetch_event)
  _i2.dynamic Function(_i3.FetchEvent)? get onfetch =>
      (_i3.FetchEvent p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onfetch',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onfetch(_i2.dynamic Function(_i3.FetchEvent)? value) {
    _i4.setProperty(
      this,
      'onfetch',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerGlobalScope/install_event)
  _i2.dynamic Function(_i3.ExtendableEvent)? get oninstall =>
      (_i3.ExtendableEvent p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'oninstall',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set oninstall(_i2.dynamic Function(_i3.ExtendableEvent)? value) {
    _i4.setProperty(
      this,
      'oninstall',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerGlobalScope/message_event)
  _i2.dynamic Function(_i3.ExtendableMessageEvent)? get onmessage =>
      (_i3.ExtendableMessageEvent p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onmessage',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onmessage(_i2.dynamic Function(_i3.ExtendableMessageEvent)? value) {
    _i4.setProperty(
      this,
      'onmessage',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerGlobalScope/messageerror_event)
  _i2.dynamic Function(_i3.MessageEvent<_i2.dynamic>)? get onmessageerror =>
      (_i3.MessageEvent<_i2.dynamic> p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onmessageerror',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onmessageerror(
      _i2.dynamic Function(_i3.MessageEvent<_i2.dynamic>)? value) {
    _i4.setProperty(
      this,
      'onmessageerror',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerGlobalScope/notificationclick_event)
  _i2.dynamic Function(_i3.NotificationEvent)? get onnotificationclick =>
      (_i3.NotificationEvent p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onnotificationclick',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onnotificationclick(_i2.dynamic Function(_i3.NotificationEvent)? value) {
    _i4.setProperty(
      this,
      'onnotificationclick',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerGlobalScope/notificationclose_event)
  _i2.dynamic Function(_i3.NotificationEvent)? get onnotificationclose =>
      (_i3.NotificationEvent p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onnotificationclose',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onnotificationclose(_i2.dynamic Function(_i3.NotificationEvent)? value) {
    _i4.setProperty(
      this,
      'onnotificationclose',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerGlobalScope/push_event)
  _i2.dynamic Function(_i3.PushEvent)? get onpush =>
      (_i3.PushEvent p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onpush',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onpush(_i2.dynamic Function(_i3.PushEvent)? value) {
    _i4.setProperty(
      this,
      'onpush',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerGlobalScope/pushsubscriptionchange_event)
  _i2.dynamic Function(_i3.Event)? get onpushsubscriptionchange =>
      (_i3.Event p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onpushsubscriptionchange',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onpushsubscriptionchange(_i2.dynamic Function(_i3.Event)? value) {
    _i4.setProperty(
      this,
      'onpushsubscriptionchange',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerGlobalScope/registration)
  _i3.ServiceWorkerRegistration get registration => _i4.getProperty(
        this,
        'registration',
      );
  _i3.ServiceWorker get serviceWorker => _i4.getProperty(
        this,
        'serviceWorker',
      );
  set skipWaiting(_i2.Future<void> Function() value) {
    _i4.setProperty(
      this,
      'skipWaiting',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<void> Function() get skipWaiting =>
      () => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'skipWaiting',
            ),
            r'call',
            [this],
          ));

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$1<K$>(
    _i3.ServiceWorkerGlobalScopeEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function<K$>(
      _i3.ServiceWorkerGlobalScopeEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get addEventListener => (
        $1: _addEventListener$1,
        $2: _addEventListener$2,
      );

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$1<K$>(
    _i3.ServiceWorkerGlobalScopeEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function<K$>(
      _i3.ServiceWorkerGlobalScopeEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get removeEventListener => (
        $1: _removeEventListener$1,
        $2: _removeEventListener$2,
      );
}

enum ServiceWorkerRegistrationEventMap<T$> {
  updatefound<_i3.Event>(r'updatefound');

  const ServiceWorkerRegistrationEventMap(this.value);

  final _i2.String value;
}

/* Source:  */
/// This ServiceWorker API interface represents the service worker registration. You register a service worker to control one or more pages that share the same origin.
/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration)
@_i1.JS()
@_i1.staticInterop
class ServiceWorkerRegistration implements _i3.EventTarget {
  factory ServiceWorkerRegistration() => _i4.callConstructor(
        _declaredServiceWorkerRegistration,
        [],
      );
}

_i2.Object get _declaredServiceWorkerRegistration => _i4.getProperty(
      _self,
      'ServiceWorkerRegistration',
    );

extension ServiceWorkerRegistration$Typings on ServiceWorkerRegistration {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/active)
  _i3.ServiceWorker? get active => _i4.getProperty(
        this,
        'active',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/installing)
  _i3.ServiceWorker? get installing => _i4.getProperty(
        this,
        'installing',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/navigationPreload)
  _i3.NavigationPreloadManager get navigationPreload => _i4.getProperty(
        this,
        'navigationPreload',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/updatefound_event)
  _i2.dynamic Function(_i3.Event)? get onupdatefound =>
      (_i3.Event p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onupdatefound',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onupdatefound(_i2.dynamic Function(_i3.Event)? value) {
    _i4.setProperty(
      this,
      'onupdatefound',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/pushManager)
  _i3.PushManager get pushManager => _i4.getProperty(
        this,
        'pushManager',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/scope)
  _i2.String get scope => _i4.getProperty(
        this,
        'scope',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/updateViaCache)
  _i3.ServiceWorkerUpdateViaCache get updateViaCache =>
      _i3.ServiceWorkerUpdateViaCacheOptions.values.byName(_i4.getProperty(
        this,
        'updateViaCache',
      ));

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/waiting)
  _i3.ServiceWorker? get waiting => _i4.getProperty(
        this,
        'waiting',
      );
  set getNotifications(
      _i2.Future<_i2.List<_i3.Notification>> Function(
              [_i3.GetNotificationOptions?])
          value) {
    _i4.setProperty(
      this,
      'getNotifications',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i2.List<_i3.Notification>> Function([_i3.GetNotificationOptions?])
      get getNotifications => ([_i3.GetNotificationOptions? p0]) =>
          _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'getNotifications',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          ));
  set showNotification(
      _i2.Future<void> Function(
        _i2.String, [
        _i3.NotificationOptions?,
      ]) value) {
    _i4.setProperty(
      this,
      'showNotification',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<void> Function(
    _i2.String, [
    _i3.NotificationOptions?,
  ]) get showNotification => (
        _i2.String p0, [
        _i3.NotificationOptions? p1,
      ]) =>
          _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'showNotification',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
            ],
          ));
  set unregister(_i2.Future<_i2.bool> Function() value) {
    _i4.setProperty(
      this,
      'unregister',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i2.bool> Function() get unregister =>
      () => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'unregister',
            ),
            r'call',
            [this],
          ));
  set update(_i2.Future<void> Function() value) {
    _i4.setProperty(
      this,
      'update',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<void> Function() get update =>
      () => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'update',
            ),
            r'call',
            [this],
          ));

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$1<K$>(
    _i3.ServiceWorkerRegistrationEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function<K$>(
      _i3.ServiceWorkerRegistrationEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get addEventListener => (
        $1: _addEventListener$1,
        $2: _addEventListener$2,
      );

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$1<K$>(
    _i3.ServiceWorkerRegistrationEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function<K$>(
      _i3.ServiceWorkerRegistrationEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get removeEventListener => (
        $1: _removeEventListener$1,
        $2: _removeEventListener$2,
      );
}

enum SharedWorkerGlobalScopeEventMap<T$> {
  connect<_i3.MessageEvent<_i2.dynamic>>(r'connect'),
  error<_i3.ErrorEvent>(r'error'),
  languagechange<_i3.Event>(r'languagechange'),
  offline<_i3.Event>(r'offline'),
  online<_i3.Event>(r'online'),
  rejectionhandled<_i3.PromiseRejectionEvent>(r'rejectionhandled'),
  unhandledrejection<_i3.PromiseRejectionEvent>(r'unhandledrejection');

  const SharedWorkerGlobalScopeEventMap(this.value);

  final _i2.String value;
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SharedWorkerGlobalScope)
@_i1.JS()
@_i1.staticInterop
class SharedWorkerGlobalScope implements _i3.WorkerGlobalScope {
  factory SharedWorkerGlobalScope() => _i4.callConstructor(
        _declaredSharedWorkerGlobalScope,
        [],
      );
}

_i2.Object get _declaredSharedWorkerGlobalScope => _i4.getProperty(
      _self,
      'SharedWorkerGlobalScope',
    );

extension SharedWorkerGlobalScope$Typings on SharedWorkerGlobalScope {
  /// Returns sharedWorkerGlobal's name, i.e. the value given to the SharedWorker constructor. Multiple SharedWorker objects can correspond to the same shared worker (and SharedWorkerGlobalScope), by reusing the same name.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SharedWorkerGlobalScope/name)
  _i2.String get name => _i4.getProperty(
        this,
        'name',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SharedWorkerGlobalScope/connect_event)
  _i2.dynamic Function(_i3.MessageEvent<_i2.dynamic>)? get onconnect =>
      (_i3.MessageEvent<_i2.dynamic> p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onconnect',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onconnect(_i2.dynamic Function(_i3.MessageEvent<_i2.dynamic>)? value) {
    _i4.setProperty(
      this,
      'onconnect',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  set close(void Function() value) {
    _i4.setProperty(
      this,
      'close',
      _i4.allowInterop(value),
    );
  }

  void Function() get close => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'close',
        ),
        r'call',
        [this],
      );

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$1<K$>(
    _i3.SharedWorkerGlobalScopeEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function<K$>(
      _i3.SharedWorkerGlobalScopeEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get addEventListener => (
        $1: _addEventListener$1,
        $2: _addEventListener$2,
      );

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$1<K$>(
    _i3.SharedWorkerGlobalScopeEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function<K$>(
      _i3.SharedWorkerGlobalScopeEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get removeEventListener => (
        $1: _removeEventListener$1,
        $2: _removeEventListener$2,
      );
}

/* Source:  */
/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/StorageManager)
@_i1.JS()
@_i1.staticInterop
class StorageManager {
  factory StorageManager() => _i4.callConstructor(
        _declaredStorageManager,
        [],
      );
}

_i2.Object get _declaredStorageManager => _i4.getProperty(
      _self,
      'StorageManager',
    );

extension StorageManager$Typings on StorageManager {
  set estimate(_i2.Future<_i3.StorageEstimate> Function() value) {
    _i4.setProperty(
      this,
      'estimate',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i3.StorageEstimate> Function() get estimate =>
      () => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'estimate',
            ),
            r'call',
            [this],
          ));
  set getDirectory(_i2.Future<_i3.FileSystemDirectoryHandle> Function() value) {
    _i4.setProperty(
      this,
      'getDirectory',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i3.FileSystemDirectoryHandle> Function() get getDirectory =>
      () => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'getDirectory',
            ),
            r'call',
            [this],
          ));
  set persisted(_i2.Future<_i2.bool> Function() value) {
    _i4.setProperty(
      this,
      'persisted',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i2.bool> Function() get persisted =>
      () => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'persisted',
            ),
            r'call',
            [this],
          ));
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/StylePropertyMapReadOnly)
@_i1.JS()
@_i1.staticInterop
class StylePropertyMapReadOnly
    implements
        _IterableLike$<
            _i10.IterableIterator<
                (
                  _i2.String,
                  _i10.Iterable<_i3.CSSStyleValue>,
                )>> {
  factory StylePropertyMapReadOnly() => _i4.callConstructor(
        _declaredStylePropertyMapReadOnly,
        [],
      );
}

_i2.Object get _declaredStylePropertyMapReadOnly => _i4.getProperty(
      _self,
      'StylePropertyMapReadOnly',
    );

extension StylePropertyMapReadOnly$Typings on StylePropertyMapReadOnly {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/StylePropertyMapReadOnly/size)
  _i2.num get size => _i4.getProperty(
        this,
        'size',
      );
  set get(_i3.CSSStyleValue? Function(_i2.String) value) {
    _i4.setProperty(
      this,
      'get',
      _i4.allowInterop((p0) => () => value(p0) ?? _i6.undefined),
    );
  }

  _i3.CSSStyleValue? Function(_i2.String) get get =>
      (_i2.String p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'get',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set getAll(_i2.List<_i3.CSSStyleValue> Function(_i2.String) value) {
    _i4.setProperty(
      this,
      'getAll',
      _i4.allowInterop(value),
    );
  }

  _i2.List<_i3.CSSStyleValue> Function(_i2.String) get getAll =>
      (_i2.String p0) => ((_i4.callMethod(
            _i4.getProperty(
              this,
              'getAll',
            ),
            r'call',
            [
              this,
              p0,
            ],
          )) as _i2.List)
              .cast();
  set has(_i2.bool Function(_i2.String) value) {
    _i4.setProperty(
      this,
      'has',
      _i4.allowInterop(value),
    );
  }

  _i2.bool Function(_i2.String) get has => (_i2.String p0) => _i4.callMethod(
        _i4.getProperty(
          this,
          'has',
        ),
        r'call',
        [
          this,
          p0,
        ],
      );
  set forEach(
      void Function(
        void Function(
          _i2.List<_i3.CSSStyleValue>,
          _i2.String,
          _i3.StylePropertyMapReadOnly,
        ), [
        _i2.dynamic,
      ]) value) {
    _i4.setProperty(
      this,
      'forEach',
      _i4.allowInterop(value),
    );
  }

  void Function(
    void Function(
      _i2.List<_i3.CSSStyleValue>,
      _i2.String,
      _i3.StylePropertyMapReadOnly,
    ), [
    _i2.dynamic,
  ]) get forEach => (
        void Function(
          _i2.List<_i3.CSSStyleValue>,
          _i2.String,
          _i3.StylePropertyMapReadOnly,
        ) p0, [
        _i2.dynamic p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'forEach',
            ),
            r'call',
            [
              this,
              _i4.allowInterop(p0),
              p1,
            ],
          );
  set entries(
      _i10.IterableIterator<
                  (
                    _i2.String,
                    _i10.Iterable<_i3.CSSStyleValue>,
                  )>
              Function()
          value) {
    _i4.setProperty(
      this,
      'entries',
      _i4.allowInterop(value),
    );
  }

  _i10.IterableIterator<
          (
            _i2.String,
            _i10.Iterable<_i3.CSSStyleValue>,
          )>
      Function() get entries => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'entries',
        ),
        r'call',
        [this],
      );
  set keys(_i10.IterableIterator<_i2.String> Function() value) {
    _i4.setProperty(
      this,
      'keys',
      _i4.allowInterop(value),
    );
  }

  _i10.IterableIterator<_i2.String> Function() get keys => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'keys',
        ),
        r'call',
        [this],
      );
  set values(
      _i10.IterableIterator<_i10.Iterable<_i3.CSSStyleValue>> Function()
          value) {
    _i4.setProperty(
      this,
      'values',
      _i4.allowInterop(value),
    );
  }

  _i10.IterableIterator<_i10.Iterable<_i3.CSSStyleValue>> Function()
      get values => () => _i4.callMethod(
            _i4.getProperty(
              this,
              'values',
            ),
            r'call',
            [this],
          );
}

/* Source:  */
/// This Web Crypto API interface provides a number of low-level cryptographic functions. It is accessed via the Crypto.subtle properties available in a window context (via Window.crypto).
/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto)
@_i1.JS()
@_i1.staticInterop
class SubtleCrypto {
  factory SubtleCrypto() => _i4.callConstructor(
        _declaredSubtleCrypto,
        [],
      );
}

_i2.Object get _declaredSubtleCrypto => _i4.getProperty(
      _self,
      'SubtleCrypto',
    );

extension SubtleCrypto$Typings on SubtleCrypto {
  set decrypt(
      _i2.Future<_i5.ByteBuffer> Function(
        _i2.Object,
        _i3.CryptoKey,
        _i2.Object,
      ) value) {
    _i4.setProperty(
      this,
      'decrypt',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i5.ByteBuffer> Function(
    _i2.Object,
    _i3.CryptoKey,
    _i2.Object,
  ) get decrypt => (
        _i2.Object p0,
        _i3.CryptoKey p1,
        _i2.Object p2,
      ) =>
          _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'decrypt',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
            ],
          ));
  set deriveBits(
      _i2.Future<_i5.ByteBuffer> Function(
        _i2.Object,
        _i3.CryptoKey,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'deriveBits',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i5.ByteBuffer> Function(
    _i2.Object,
    _i3.CryptoKey,
    _i2.num,
  ) get deriveBits => (
        _i2.Object p0,
        _i3.CryptoKey p1,
        _i2.num p2,
      ) =>
          _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'deriveBits',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
            ],
          ));
  set digest(
      _i2.Future<_i5.ByteBuffer> Function(
        _i2.Object,
        _i2.Object,
      ) value) {
    _i4.setProperty(
      this,
      'digest',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i5.ByteBuffer> Function(
    _i2.Object,
    _i2.Object,
  ) get digest => (
        _i2.Object p0,
        _i2.Object p1,
      ) =>
          _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'digest',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          ));
  set encrypt(
      _i2.Future<_i5.ByteBuffer> Function(
        _i2.Object,
        _i3.CryptoKey,
        _i2.Object,
      ) value) {
    _i4.setProperty(
      this,
      'encrypt',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i5.ByteBuffer> Function(
    _i2.Object,
    _i3.CryptoKey,
    _i2.Object,
  ) get encrypt => (
        _i2.Object p0,
        _i3.CryptoKey p1,
        _i2.Object p2,
      ) =>
          _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'encrypt',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
            ],
          ));
  set sign(
      _i2.Future<_i5.ByteBuffer> Function(
        _i2.Object,
        _i3.CryptoKey,
        _i2.Object,
      ) value) {
    _i4.setProperty(
      this,
      'sign',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i5.ByteBuffer> Function(
    _i2.Object,
    _i3.CryptoKey,
    _i2.Object,
  ) get sign => (
        _i2.Object p0,
        _i3.CryptoKey p1,
        _i2.Object p2,
      ) =>
          _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'sign',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
            ],
          ));
  set verify(
      _i2.Future<_i2.bool> Function(
        _i2.Object,
        _i3.CryptoKey,
        _i2.Object,
        _i2.Object,
      ) value) {
    _i4.setProperty(
      this,
      'verify',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i2.bool> Function(
    _i2.Object,
    _i3.CryptoKey,
    _i2.Object,
    _i2.Object,
  ) get verify => (
        _i2.Object p0,
        _i3.CryptoKey p1,
        _i2.Object p2,
        _i2.Object p3,
      ) =>
          _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'verify',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
            ],
          ));
  set wrapKey(
      _i2.Future<_i5.ByteBuffer> Function(
        _i3.KeyFormat,
        _i3.CryptoKey,
        _i3.CryptoKey,
        _i2.Object,
      ) value) {
    _i4.setProperty(
      this,
      'wrapKey',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i5.ByteBuffer> Function(
    _i3.KeyFormat,
    _i3.CryptoKey,
    _i3.CryptoKey,
    _i2.Object,
  ) get wrapKey => (
        _i3.KeyFormat p0,
        _i3.CryptoKey p1,
        _i3.CryptoKey p2,
        _i2.Object p3,
      ) =>
          _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'wrapKey',
            ),
            r'call',
            [
              this,
              p0.name,
              p1,
              p2,
              p3,
            ],
          ));

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/deriveKey)
  _i2.Future<_i3.CryptoKey> _deriveKey$1(
    _i2.Object algorithm,
    _i3.CryptoKey baseKey,
    _i2.Object derivedKeyType,
    _i2.bool extractable,
    _i2.List<_i3.KeyUsage> keyUsages,
  ) =>
      _i4.promiseToFuture(_i4.callMethod(
        this,
        'deriveKey',
        [
          algorithm,
          baseKey,
          derivedKeyType,
          extractable,
          keyUsages.map((i) => i.name).toList(),
        ],
      ));

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/deriveKey)
  _i2.Future<_i3.CryptoKey> _deriveKey$2(
    _i2.Object algorithm,
    _i3.CryptoKey baseKey,
    _i2.Object derivedKeyType,
    _i2.bool extractable,
    _i10.Iterable<_i3.KeyUsage> keyUsages,
  ) =>
      _i4.promiseToFuture(_i4.callMethod(
        this,
        'deriveKey',
        [
          algorithm,
          baseKey,
          derivedKeyType,
          extractable,
          keyUsages,
        ],
      ));

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/deriveKey)
    _i2.Future<_i3.CryptoKey> Function(
      _i2.Object algorithm,
      _i3.CryptoKey baseKey,
      _i2.Object derivedKeyType,
      _i2.bool extractable,
      _i2.List<_i3.KeyUsage> keyUsages,
    ) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/deriveKey)
    _i2.Future<_i3.CryptoKey> Function(
      _i2.Object algorithm,
      _i3.CryptoKey baseKey,
      _i2.Object derivedKeyType,
      _i2.bool extractable,
      _i10.Iterable<_i3.KeyUsage> keyUsages,
    ) $2,
  }) get deriveKey => (
        $1: _deriveKey$1,
        $2: _deriveKey$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/exportKey)
  _i2.Future<_i3.JsonWebKey> _exportKey$1(
    _i2.String format,
    _i3.CryptoKey key,
  ) =>
      _i4.promiseToFuture(_i4.callMethod(
        this,
        'exportKey',
        [
          format,
          key,
        ],
      ));

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/exportKey)
  _i2.Future<_i5.ByteBuffer> _exportKey$2(
    _i2.dynamic format,
    _i3.CryptoKey key,
  ) =>
      _i4.promiseToFuture(_i4.callMethod(
        this,
        'exportKey',
        [
          format,
          key,
        ],
      ));

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/exportKey)
  _i2.Future<_i2.Object> _exportKey$3(
    _i3.KeyFormat format,
    _i3.CryptoKey key,
  ) =>
      _i4.promiseToFuture(_i4.callMethod(
        this,
        'exportKey',
        [
          format.name,
          key,
        ],
      ));

  /// Overload accessor: $1, $2, $3
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/exportKey)
    _i2.Future<_i3.JsonWebKey> Function(
      _i2.String format,
      _i3.CryptoKey key,
    ) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/exportKey)
    _i2.Future<_i5.ByteBuffer> Function(
      _i2.dynamic format,
      _i3.CryptoKey key,
    ) $2,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/exportKey)
    _i2.Future<_i2.Object> Function(
      _i3.KeyFormat format,
      _i3.CryptoKey key,
    ) $3,
  }) get exportKey => (
        $1: _exportKey$1,
        $2: _exportKey$2,
        $3: _exportKey$3,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/generateKey)
  _i2.Future<_i3.CryptoKeyPair> _generateKey$1(
    _i2.String algorithm,
    _i2.bool extractable,
    _i9.ReadonlyArray<_i3.GenerateKey> keyUsages,
  ) =>
      _i4.promiseToFuture(_i4.callMethod(
        this,
        'generateKey',
        [
          algorithm,
          extractable,
          keyUsages,
        ],
      ));

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/generateKey)
  _i2.Future<_i3.CryptoKeyPair> _generateKey$2(
    _i3.Algorithm algorithm,
    _i2.bool extractable,
    _i9.ReadonlyArray<_i3.KeyUsage> keyUsages,
  ) =>
      _i4.promiseToFuture(_i4.callMethod(
        this,
        'generateKey',
        [
          algorithm,
          extractable,
          keyUsages,
        ],
      ));

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/generateKey)
  _i2.Future<_i3.CryptoKey> _generateKey$3(
    _i3.Algorithm algorithm,
    _i2.bool extractable,
    _i9.ReadonlyArray<_i3.KeyUsage> keyUsages,
  ) =>
      _i4.promiseToFuture(_i4.callMethod(
        this,
        'generateKey',
        [
          algorithm,
          extractable,
          keyUsages,
        ],
      ));

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/generateKey)
  _i2.Future<_i2.Object> _generateKey$4(
    _i2.Object algorithm,
    _i2.bool extractable,
    _i2.List<_i3.KeyUsage> keyUsages,
  ) =>
      _i4.promiseToFuture(_i4.callMethod(
        this,
        'generateKey',
        [
          algorithm,
          extractable,
          keyUsages.map((i) => i.name).toList(),
        ],
      ));

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/generateKey)
  _i2.Future<_i3.CryptoKeyPair> _generateKey$5(
    _i3.Algorithm algorithm,
    _i2.bool extractable,
    _i9.ReadonlyArray<_i3.KeyUsage> keyUsages,
  ) =>
      _i4.promiseToFuture(_i4.callMethod(
        this,
        'generateKey',
        [
          algorithm,
          extractable,
          keyUsages,
        ],
      ));

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/generateKey)
  _i2.Future<_i3.CryptoKey> _generateKey$6(
    _i3.Algorithm algorithm,
    _i2.bool extractable,
    _i9.ReadonlyArray<_i3.KeyUsage> keyUsages,
  ) =>
      _i4.promiseToFuture(_i4.callMethod(
        this,
        'generateKey',
        [
          algorithm,
          extractable,
          keyUsages,
        ],
      ));

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/generateKey)
  _i2.Future<_i2.Object> _generateKey$7(
    _i2.Object algorithm,
    _i2.bool extractable,
    _i10.Iterable<_i3.KeyUsage> keyUsages,
  ) =>
      _i4.promiseToFuture(_i4.callMethod(
        this,
        'generateKey',
        [
          algorithm,
          extractable,
          keyUsages,
        ],
      ));

  /// Overload accessor: $1, $2, $3, $4, $5, $6, $7
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/generateKey)
    _i2.Future<_i3.CryptoKeyPair> Function(
      _i2.String algorithm,
      _i2.bool extractable,
      _i9.ReadonlyArray<_i3.GenerateKey> keyUsages,
    ) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/generateKey)
    _i2.Future<_i3.CryptoKeyPair> Function(
      _i3.Algorithm algorithm,
      _i2.bool extractable,
      _i9.ReadonlyArray<_i3.KeyUsage> keyUsages,
    ) $2,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/generateKey)
    _i2.Future<_i3.CryptoKey> Function(
      _i3.Algorithm algorithm,
      _i2.bool extractable,
      _i9.ReadonlyArray<_i3.KeyUsage> keyUsages,
    ) $3,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/generateKey)
    _i2.Future<_i2.Object> Function(
      _i2.Object algorithm,
      _i2.bool extractable,
      _i2.List<_i3.KeyUsage> keyUsages,
    ) $4,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/generateKey)
    _i2.Future<_i3.CryptoKeyPair> Function(
      _i3.Algorithm algorithm,
      _i2.bool extractable,
      _i9.ReadonlyArray<_i3.KeyUsage> keyUsages,
    ) $5,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/generateKey)
    _i2.Future<_i3.CryptoKey> Function(
      _i3.Algorithm algorithm,
      _i2.bool extractable,
      _i9.ReadonlyArray<_i3.KeyUsage> keyUsages,
    ) $6,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/generateKey)
    _i2.Future<_i2.Object> Function(
      _i2.Object algorithm,
      _i2.bool extractable,
      _i10.Iterable<_i3.KeyUsage> keyUsages,
    ) $7,
  }) get generateKey => (
        $1: _generateKey$1,
        $2: _generateKey$2,
        $3: _generateKey$3,
        $4: _generateKey$4,
        $5: _generateKey$5,
        $6: _generateKey$6,
        $7: _generateKey$7,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/importKey)
  _i2.Future<_i3.CryptoKey> _importKey$1(
    _i2.String format,
    _i3.JsonWebKey keyData,
    _i2.Object algorithm,
    _i2.bool extractable,
    _i9.ReadonlyArray<_i3.KeyUsage> keyUsages,
  ) =>
      _i4.promiseToFuture(_i4.callMethod(
        this,
        'importKey',
        [
          format,
          keyData,
          algorithm,
          extractable,
          keyUsages,
        ],
      ));

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/importKey)
  _i2.Future<_i3.CryptoKey> _importKey$2(
    _i2.dynamic format,
    _i2.Object keyData,
    _i2.Object algorithm,
    _i2.bool extractable,
    _i2.List<_i3.KeyUsage> keyUsages,
  ) =>
      _i4.promiseToFuture(_i4.callMethod(
        this,
        'importKey',
        [
          format,
          keyData,
          algorithm,
          extractable,
          keyUsages.map((i) => i.name).toList(),
        ],
      ));

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/importKey)
  _i2.Future<_i3.CryptoKey> _importKey$3(
    _i2.String format,
    _i3.JsonWebKey keyData,
    _i2.Object algorithm,
    _i2.bool extractable,
    _i9.ReadonlyArray<_i3.KeyUsage> keyUsages,
  ) =>
      _i4.promiseToFuture(_i4.callMethod(
        this,
        'importKey',
        [
          format,
          keyData,
          algorithm,
          extractable,
          keyUsages,
        ],
      ));

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/importKey)
  _i2.Future<_i3.CryptoKey> _importKey$4(
    _i2.dynamic format,
    _i2.Object keyData,
    _i2.Object algorithm,
    _i2.bool extractable,
    _i10.Iterable<_i3.KeyUsage> keyUsages,
  ) =>
      _i4.promiseToFuture(_i4.callMethod(
        this,
        'importKey',
        [
          format,
          keyData,
          algorithm,
          extractable,
          keyUsages,
        ],
      ));

  /// Overload accessor: $1, $2, $3, $4
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/importKey)
    _i2.Future<_i3.CryptoKey> Function(
      _i2.String format,
      _i3.JsonWebKey keyData,
      _i2.Object algorithm,
      _i2.bool extractable,
      _i9.ReadonlyArray<_i3.KeyUsage> keyUsages,
    ) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/importKey)
    _i2.Future<_i3.CryptoKey> Function(
      _i2.dynamic format,
      _i2.Object keyData,
      _i2.Object algorithm,
      _i2.bool extractable,
      _i2.List<_i3.KeyUsage> keyUsages,
    ) $2,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/importKey)
    _i2.Future<_i3.CryptoKey> Function(
      _i2.String format,
      _i3.JsonWebKey keyData,
      _i2.Object algorithm,
      _i2.bool extractable,
      _i9.ReadonlyArray<_i3.KeyUsage> keyUsages,
    ) $3,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/importKey)
    _i2.Future<_i3.CryptoKey> Function(
      _i2.dynamic format,
      _i2.Object keyData,
      _i2.Object algorithm,
      _i2.bool extractable,
      _i10.Iterable<_i3.KeyUsage> keyUsages,
    ) $4,
  }) get importKey => (
        $1: _importKey$1,
        $2: _importKey$2,
        $3: _importKey$3,
        $4: _importKey$4,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/unwrapKey)
  _i2.Future<_i3.CryptoKey> _unwrapKey$1(
    _i3.KeyFormat format,
    _i2.Object wrappedKey,
    _i3.CryptoKey unwrappingKey,
    _i2.Object unwrapAlgorithm,
    _i2.Object unwrappedKeyAlgorithm,
    _i2.bool extractable,
    _i2.List<_i3.KeyUsage> keyUsages,
  ) =>
      _i4.promiseToFuture(_i4.callMethod(
        this,
        'unwrapKey',
        [
          format.name,
          wrappedKey,
          unwrappingKey,
          unwrapAlgorithm,
          unwrappedKeyAlgorithm,
          extractable,
          keyUsages.map((i) => i.name).toList(),
        ],
      ));

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/unwrapKey)
  _i2.Future<_i3.CryptoKey> _unwrapKey$2(
    _i3.KeyFormat format,
    _i2.Object wrappedKey,
    _i3.CryptoKey unwrappingKey,
    _i2.Object unwrapAlgorithm,
    _i2.Object unwrappedKeyAlgorithm,
    _i2.bool extractable,
    _i10.Iterable<_i3.KeyUsage> keyUsages,
  ) =>
      _i4.promiseToFuture(_i4.callMethod(
        this,
        'unwrapKey',
        [
          format.name,
          wrappedKey,
          unwrappingKey,
          unwrapAlgorithm,
          unwrappedKeyAlgorithm,
          extractable,
          keyUsages,
        ],
      ));

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/unwrapKey)
    _i2.Future<_i3.CryptoKey> Function(
      _i3.KeyFormat format,
      _i2.Object wrappedKey,
      _i3.CryptoKey unwrappingKey,
      _i2.Object unwrapAlgorithm,
      _i2.Object unwrappedKeyAlgorithm,
      _i2.bool extractable,
      _i2.List<_i3.KeyUsage> keyUsages,
    ) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/unwrapKey)
    _i2.Future<_i3.CryptoKey> Function(
      _i3.KeyFormat format,
      _i2.Object wrappedKey,
      _i3.CryptoKey unwrappingKey,
      _i2.Object unwrapAlgorithm,
      _i2.Object unwrappedKeyAlgorithm,
      _i2.bool extractable,
      _i10.Iterable<_i3.KeyUsage> keyUsages,
    ) $2,
  }) get unwrapKey => (
        $1: _unwrapKey$1,
        $2: _unwrapKey$2,
      );
}

/* Source:  */
/// A decoder for a specific method, that is a specific character encoding, like utf-8, iso-8859-2, koi8, cp1261, gbk, etc. A decoder takes a stream of bytes as input and emits a stream of code points. For a more scalable, non-native library, see StringView – a C-like representation of strings based on typed arrays.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextDecoder)
@_i1.JS()
@_i1.staticInterop
class TextDecoder implements _i3.TextDecoderCommon {
  factory TextDecoder([
    _i2.String? label,
    _i3.TextDecoderOptions? options,
  ]) =>
      _i4.callConstructor(
        _declaredTextDecoder,
        [
          label ?? _i6.undefined,
          options ?? _i6.undefined,
        ],
      );
}

_i2.Object get _declaredTextDecoder => _i4.getProperty(
      _self,
      'TextDecoder',
    );

extension TextDecoder$Typings on TextDecoder {
  set decode(
      _i2.String Function([
        _i2.Object?,
        _i3.TextDecodeOptions?,
      ]) value) {
    _i4.setProperty(
      this,
      'decode',
      _i4.allowInterop(value),
    );
  }

  _i2.String Function([
    _i2.Object?,
    _i3.TextDecodeOptions?,
  ]) get decode => ([
        _i2.Object? p0,
        _i3.TextDecodeOptions? p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'decode',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined ?? _i6.undefined,
              p1 ?? _i6.undefined,
            ],
          );
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class TextDecoderCommon {
  external factory TextDecoderCommon._({
    _i2.dynamic encoding,
    _i2.dynamic fatal,
    _i2.dynamic ignoreBOM,
  });

  factory TextDecoderCommon({
    _i2.String? encoding,
    _i2.bool? fatal,
    _i2.bool? ignoreBOM,
  }) =>
      TextDecoderCommon._(
        encoding: encoding,
        fatal: fatal,
        ignoreBOM: ignoreBOM,
      );
}

extension TextDecoderCommon$Typings on TextDecoderCommon {
  /// Returns encoding's name, lowercased.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextDecoder/encoding)
  _i2.String get encoding => _i4.getProperty(
        this,
        'encoding',
      );

  /// Returns true if error mode is "fatal", otherwise false.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextDecoder/fatal)
  _i2.bool get fatal => _i4.getProperty(
        this,
        'fatal',
      );

  /// Returns the value of ignore BOM.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextDecoder/ignoreBOM)
  _i2.bool get ignoreBOM => _i4.getProperty(
        this,
        'ignoreBOM',
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextDecoderStream)
@_i1.JS()
@_i1.staticInterop
class TextDecoderStream
    implements _i3.GenericTransformStream, _i3.TextDecoderCommon {
  factory TextDecoderStream([
    _i2.String? label,
    _i3.TextDecoderOptions? options,
  ]) =>
      _i4.callConstructor(
        _declaredTextDecoderStream,
        [
          label ?? _i6.undefined,
          options ?? _i6.undefined,
        ],
      );
}

_i2.Object get _declaredTextDecoderStream => _i4.getProperty(
      _self,
      'TextDecoderStream',
    );

extension TextDecoderStream$Typings on TextDecoderStream {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CompressionStream/readable)
  _i3.ReadableStream<_i2.String> get readable => _i4.getProperty(
        this,
        'readable',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CompressionStream/writable)
  _i3.WritableStream<_i2.Object> get writable => _i4.getProperty(
        this,
        'writable',
      );
}

/* Source:  */
/// TextEncoder takes a stream of code points as input and emits a stream of bytes. For a more scalable, non-native library, see StringView – a C-like representation of strings based on typed arrays.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextEncoder)
@_i1.JS()
@_i1.staticInterop
class TextEncoder implements _i3.TextEncoderCommon {
  factory TextEncoder() => _i4.callConstructor(
        _declaredTextEncoder,
        [],
      );
}

_i2.Object get _declaredTextEncoder => _i4.getProperty(
      _self,
      'TextEncoder',
    );

extension TextEncoder$Typings on TextEncoder {
  set encode(_i5.Uint8List Function([_i2.String?]) value) {
    _i4.setProperty(
      this,
      'encode',
      _i4.allowInterop(value),
    );
  }

  _i5.Uint8List Function([_i2.String?]) get encode =>
      ([_i2.String? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'encode',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set encodeInto(
      _i3.TextEncoderEncodeIntoResult Function(
        _i2.String,
        _i5.Uint8List,
      ) value) {
    _i4.setProperty(
      this,
      'encodeInto',
      _i4.allowInterop(value),
    );
  }

  _i3.TextEncoderEncodeIntoResult Function(
    _i2.String,
    _i5.Uint8List,
  ) get encodeInto => (
        _i2.String p0,
        _i5.Uint8List p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'encodeInto',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class TextEncoderCommon {
  external factory TextEncoderCommon._({_i2.dynamic encoding});

  factory TextEncoderCommon({_i2.String? encoding}) =>
      TextEncoderCommon._(encoding: encoding);
}

extension TextEncoderCommon$Typings on TextEncoderCommon {
  /// Returns "utf-8".
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextEncoder/encoding)
  _i2.String get encoding => _i4.getProperty(
        this,
        'encoding',
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextEncoderStream)
@_i1.JS()
@_i1.staticInterop
class TextEncoderStream
    implements _i3.GenericTransformStream, _i3.TextEncoderCommon {
  factory TextEncoderStream() => _i4.callConstructor(
        _declaredTextEncoderStream,
        [],
      );
}

_i2.Object get _declaredTextEncoderStream => _i4.getProperty(
      _self,
      'TextEncoderStream',
    );

extension TextEncoderStream$Typings on TextEncoderStream {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CompressionStream/readable)
  _i3.ReadableStream<_i5.Uint8List> get readable => _i4.getProperty(
        this,
        'readable',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CompressionStream/writable)
  _i3.WritableStream<_i2.String> get writable => _i4.getProperty(
        this,
        'writable',
      );
}

/* Source:  */
/// The dimensions of a piece of text in the canvas, as created by the CanvasRenderingContext2D.measureText() method.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics)
@_i1.JS()
@_i1.staticInterop
class TextMetrics {
  factory TextMetrics() => _i4.callConstructor(
        _declaredTextMetrics,
        [],
      );
}

_i2.Object get _declaredTextMetrics => _i4.getProperty(
      _self,
      'TextMetrics',
    );

extension TextMetrics$Typings on TextMetrics {
  /// Returns the measurement described below.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/actualBoundingBoxAscent)
  _i2.num get actualBoundingBoxAscent => _i4.getProperty(
        this,
        'actualBoundingBoxAscent',
      );

  /// Returns the measurement described below.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/actualBoundingBoxDescent)
  _i2.num get actualBoundingBoxDescent => _i4.getProperty(
        this,
        'actualBoundingBoxDescent',
      );

  /// Returns the measurement described below.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/actualBoundingBoxLeft)
  _i2.num get actualBoundingBoxLeft => _i4.getProperty(
        this,
        'actualBoundingBoxLeft',
      );

  /// Returns the measurement described below.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/actualBoundingBoxRight)
  _i2.num get actualBoundingBoxRight => _i4.getProperty(
        this,
        'actualBoundingBoxRight',
      );

  /// Returns the measurement described below.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/fontBoundingBoxAscent)
  _i2.num get fontBoundingBoxAscent => _i4.getProperty(
        this,
        'fontBoundingBoxAscent',
      );

  /// Returns the measurement described below.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/fontBoundingBoxDescent)
  _i2.num get fontBoundingBoxDescent => _i4.getProperty(
        this,
        'fontBoundingBoxDescent',
      );

  /// Returns the measurement described below.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/width)
  _i2.num get width => _i4.getProperty(
        this,
        'width',
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/TransformStream)
@_i1.JS()
@_i1.staticInterop
class TransformStream<I, O> {
  factory TransformStream([
    _i3.Transformer<I, O>? transformer,
    _i3.QueuingStrategy<I>? writableStrategy,
    _i3.QueuingStrategy<O>? readableStrategy,
  ]) =>
      _i4.callConstructor(
        _declaredTransformStream,
        [
          transformer ?? _i6.undefined,
          writableStrategy ?? _i6.undefined,
          readableStrategy ?? _i6.undefined,
        ],
      );
}

_i2.Object get _declaredTransformStream => _i4.getProperty(
      _self,
      'TransformStream',
    );

extension TransformStream$Typings<I, O> on TransformStream<I, O> {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/TransformStream/readable)
  _i3.ReadableStream<O> get readable => _i4.getProperty(
        this,
        'readable',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/TransformStream/writable)
  _i3.WritableStream<I> get writable => _i4.getProperty(
        this,
        'writable',
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/TransformStreamDefaultController)
@_i1.JS()
@_i1.staticInterop
class TransformStreamDefaultController<O> {
  factory TransformStreamDefaultController() => _i4.callConstructor(
        _declaredTransformStreamDefaultController,
        [],
      );
}

_i2.Object get _declaredTransformStreamDefaultController => _i4.getProperty(
      _self,
      'TransformStreamDefaultController',
    );

extension TransformStreamDefaultController$Typings<O>
    on TransformStreamDefaultController<O> {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/TransformStreamDefaultController/desiredSize)
  _i2.num? get desiredSize => _i4.getProperty(
        this,
        'desiredSize',
      );
  set enqueue(void Function([O?]) value) {
    _i4.setProperty(
      this,
      'enqueue',
      _i4.allowInterop(value),
    );
  }

  void Function([O?]) get enqueue => ([O? p0]) => _i4.callMethod(
        _i4.getProperty(
          this,
          'enqueue',
        ),
        r'call',
        [
          this,
          p0 ?? _i6.undefined,
        ],
      );
  set error(void Function([_i2.dynamic]) value) {
    _i4.setProperty(
      this,
      'error',
      _i4.allowInterop(value),
    );
  }

  void Function([_i2.dynamic]) get error =>
      ([_i2.dynamic p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'error',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set terminate(void Function() value) {
    _i4.setProperty(
      this,
      'terminate',
      _i4.allowInterop(value),
    );
  }

  void Function() get terminate => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'terminate',
        ),
        r'call',
        [this],
      );
}

/* Source:  */
/// The URL interface represents an object providing static methods used for creating object URLs.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL)
@_i1.JS('URL')
@_i1.staticInterop
class Url {
  factory Url(
    _i2.Object url, [
    _i2.Object? base,
  ]) =>
      _i4.callConstructor(
        _declaredUrl,
        [
          url,
          base ?? _i6.undefined,
        ],
      );

  static set canParse(
      _i2.bool Function(
        _i2.Object, [
        _i2.String?,
      ]) value) {
    _i4.setProperty(
      _i8.target795,
      'canParse',
      _i4.allowInterop(value),
    );
  }

  static _i2.bool Function(
    _i2.Object, [
    _i2.String?,
  ]) get canParse => (
        _i2.Object p0, [
        _i2.String? p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              _i8.target795,
              'canParse',
            ),
            r'call',
            [
              _i8.target795,
              p0,
              p1 ?? _i6.undefined,
            ],
          );
  static set createObjectURL(_i2.String Function(_i3.Blob) value) {
    _i4.setProperty(
      _i8.target795,
      'createObjectURL',
      _i4.allowInterop(value),
    );
  }

  static _i2.String Function(_i3.Blob) get createObjectURL =>
      (_i3.Blob p0) => _i4.callMethod(
            _i4.getProperty(
              _i8.target795,
              'createObjectURL',
            ),
            r'call',
            [
              _i8.target795,
              p0,
            ],
          );
  static set revokeObjectURL(void Function(_i2.String) value) {
    _i4.setProperty(
      _i8.target795,
      'revokeObjectURL',
      _i4.allowInterop(value),
    );
  }

  static void Function(_i2.String) get revokeObjectURL =>
      (_i2.String p0) => _i4.callMethod(
            _i4.getProperty(
              _i8.target795,
              'revokeObjectURL',
            ),
            r'call',
            [
              _i8.target795,
              p0,
            ],
          );
}

_i2.Object get _declaredUrl => _i4.getProperty(
      _self,
      'URL',
    );

extension Url$Typings on Url {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/hash)
  _i2.String get hash => _i4.getProperty(
        this,
        'hash',
      );
  set hash(_i2.String value) {
    _i4.setProperty(
      this,
      'hash',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/host)
  _i2.String get host => _i4.getProperty(
        this,
        'host',
      );
  set host(_i2.String value) {
    _i4.setProperty(
      this,
      'host',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/hostname)
  _i2.String get hostname => _i4.getProperty(
        this,
        'hostname',
      );
  set hostname(_i2.String value) {
    _i4.setProperty(
      this,
      'hostname',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/href)
  _i2.String get href => _i4.getProperty(
        this,
        'href',
      );
  set href(_i2.String value) {
    _i4.setProperty(
      this,
      'href',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/origin)
  _i2.String get origin => _i4.getProperty(
        this,
        'origin',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/password)
  _i2.String get password => _i4.getProperty(
        this,
        'password',
      );
  set password(_i2.String value) {
    _i4.setProperty(
      this,
      'password',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/pathname)
  _i2.String get pathname => _i4.getProperty(
        this,
        'pathname',
      );
  set pathname(_i2.String value) {
    _i4.setProperty(
      this,
      'pathname',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/port)
  _i2.String get port => _i4.getProperty(
        this,
        'port',
      );
  set port(_i2.String value) {
    _i4.setProperty(
      this,
      'port',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/protocol)
  _i2.String get protocol => _i4.getProperty(
        this,
        'protocol',
      );
  set protocol(_i2.String value) {
    _i4.setProperty(
      this,
      'protocol',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/search)
  _i2.String get search => _i4.getProperty(
        this,
        'search',
      );
  set search(_i2.String value) {
    _i4.setProperty(
      this,
      'search',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/searchParams)
  _i3.URLSearchParams get searchParams => _i4.getProperty(
        this,
        'searchParams',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/username)
  _i2.String get username => _i4.getProperty(
        this,
        'username',
      );
  set username(_i2.String value) {
    _i4.setProperty(
      this,
      'username',
      value,
    );
  }

  set toString$(_i2.String Function() value) {
    _i4.setProperty(
      this,
      'toString',
      _i4.allowInterop(value),
    );
  }

  _i2.String Function() get toString$ => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'toString',
        ),
        r'call',
        [this],
      );
  set toJSON(_i2.String Function() value) {
    _i4.setProperty(
      this,
      'toJSON',
      _i4.allowInterop(value),
    );
  }

  _i2.String Function() get toJSON => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'toJSON',
        ),
        r'call',
        [this],
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/URLSearchParams)
@_i1.JS()
@_i1.staticInterop
class URLSearchParams
    implements
        _IterableLike$<
            _i10.IterableIterator<
                (
                  _i2.String,
                  _i2.String,
                )>> {
  factory URLSearchParams([_i2.Object? init]) => _i4.callConstructor(
        _declaredURLSearchParams,
        [init ?? _i6.undefined],
      );
}

_i2.Object get _declaredURLSearchParams => _i4.getProperty(
      _self,
      'URLSearchParams',
    );

extension URLSearchParams$Typings on URLSearchParams {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/URLSearchParams/size)
  _i2.num get size => _i4.getProperty(
        this,
        'size',
      );
  set append(
      void Function(
        _i2.String,
        _i2.String,
      ) value) {
    _i4.setProperty(
      this,
      'append',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.String,
    _i2.String,
  ) get append => (
        _i2.String p0,
        _i2.String p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'append',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set delete(
      void Function(
        _i2.String, [
        _i2.String?,
      ]) value) {
    _i4.setProperty(
      this,
      'delete',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.String, [
    _i2.String?,
  ]) get delete => (
        _i2.String p0, [
        _i2.String? p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'delete',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
            ],
          );
  set get(_i2.String? Function(_i2.String) value) {
    _i4.setProperty(
      this,
      'get',
      _i4.allowInterop((p0) => () => value(p0) ?? _i6.undefined),
    );
  }

  _i2.String? Function(_i2.String) get get => (_i2.String p0) => _i4.callMethod(
        _i4.getProperty(
          this,
          'get',
        ),
        r'call',
        [
          this,
          p0,
        ],
      );
  set getAll(_i2.List<_i2.String> Function(_i2.String) value) {
    _i4.setProperty(
      this,
      'getAll',
      _i4.allowInterop(value),
    );
  }

  _i2.List<_i2.String> Function(_i2.String) get getAll =>
      (_i2.String p0) => ((_i4.callMethod(
            _i4.getProperty(
              this,
              'getAll',
            ),
            r'call',
            [
              this,
              p0,
            ],
          )) as _i2.List)
              .cast();
  set has(
      _i2.bool Function(
        _i2.String, [
        _i2.String?,
      ]) value) {
    _i4.setProperty(
      this,
      'has',
      _i4.allowInterop(value),
    );
  }

  _i2.bool Function(
    _i2.String, [
    _i2.String?,
  ]) get has => (
        _i2.String p0, [
        _i2.String? p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'has',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
            ],
          );
  set set(
      void Function(
        _i2.String,
        _i2.String,
      ) value) {
    _i4.setProperty(
      this,
      'set',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.String,
    _i2.String,
  ) get set => (
        _i2.String p0,
        _i2.String p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'set',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set sort(void Function() value) {
    _i4.setProperty(
      this,
      'sort',
      _i4.allowInterop(value),
    );
  }

  void Function() get sort => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'sort',
        ),
        r'call',
        [this],
      );
  set toString$(_i2.String Function() value) {
    _i4.setProperty(
      this,
      'toString',
      _i4.allowInterop(value),
    );
  }

  _i2.String Function() get toString$ => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'toString',
        ),
        r'call',
        [this],
      );
  set forEach(
      void Function(
        void Function(
          _i2.String,
          _i2.String,
          _i3.URLSearchParams,
        ), [
        _i2.dynamic,
      ]) value) {
    _i4.setProperty(
      this,
      'forEach',
      _i4.allowInterop(value),
    );
  }

  void Function(
    void Function(
      _i2.String,
      _i2.String,
      _i3.URLSearchParams,
    ), [
    _i2.dynamic,
  ]) get forEach => (
        void Function(
          _i2.String,
          _i2.String,
          _i3.URLSearchParams,
        ) p0, [
        _i2.dynamic p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'forEach',
            ),
            r'call',
            [
              this,
              _i4.allowInterop(p0),
              p1,
            ],
          );
  set entries(
      _i10.IterableIterator<
                  (
                    _i2.String,
                    _i2.String,
                  )>
              Function()
          value) {
    _i4.setProperty(
      this,
      'entries',
      _i4.allowInterop(value),
    );
  }

  _i10.IterableIterator<
          (
            _i2.String,
            _i2.String,
          )>
      Function() get entries => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'entries',
        ),
        r'call',
        [this],
      );
  set keys(_i10.IterableIterator<_i2.String> Function() value) {
    _i4.setProperty(
      this,
      'keys',
      _i4.allowInterop(value),
    );
  }

  _i10.IterableIterator<_i2.String> Function() get keys => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'keys',
        ),
        r'call',
        [this],
      );
  set values(_i10.IterableIterator<_i2.String> Function() value) {
    _i4.setProperty(
      this,
      'values',
      _i4.allowInterop(value),
    );
  }

  _i10.IterableIterator<_i2.String> Function() get values =>
      () => _i4.callMethod(
            _i4.getProperty(
              this,
              'values',
            ),
            r'call',
            [this],
          );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoColorSpace)
@_i1.JS()
@_i1.staticInterop
class VideoColorSpace {
  factory VideoColorSpace([_i3.VideoColorSpaceInit? init]) =>
      _i4.callConstructor(
        _declaredVideoColorSpace,
        [init ?? _i6.undefined],
      );
}

_i2.Object get _declaredVideoColorSpace => _i4.getProperty(
      _self,
      'VideoColorSpace',
    );

extension VideoColorSpace$Typings on VideoColorSpace {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoColorSpace/fullRange)
  _i2.bool? get fullRange => _i4.getProperty(
        this,
        'fullRange',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoColorSpace/matrix)
  _i3.VideoMatrixCoefficients? get matrix => switch (_i4.getProperty(
        this,
        'matrix',
      )) {
        _i2.String name =>
          _i3.VideoMatrixCoefficientsOptions.values.byName(name),
        _ => null
      };

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoColorSpace/primaries)
  _i3.VideoColorPrimaries? get primaries => switch (_i4.getProperty(
        this,
        'primaries',
      )) {
        _i2.String name => _i3.VideoColorPrimariesOptions.values.byName(name),
        _ => null
      };

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoColorSpace/transfer)
  _i3.VideoTransferCharacteristics? get transfer => switch (_i4.getProperty(
        this,
        'transfer',
      )) {
        _i2.String name =>
          _i3.VideoTransferCharacteristicsOptions.values.byName(name),
        _ => null
      };
  set toJSON(_i3.VideoColorSpaceInit Function() value) {
    _i4.setProperty(
      this,
      'toJSON',
      _i4.allowInterop(value),
    );
  }

  _i3.VideoColorSpaceInit Function() get toJSON => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'toJSON',
        ),
        r'call',
        [this],
      );
}

enum VideoDecoderEventMap<T$> {
  dequeue<_i3.Event>(r'dequeue');

  const VideoDecoderEventMap(this.value);

  final _i2.String value;
}

/* Source:  */
/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoDecoder)
@_i1.JS()
@_i1.staticInterop
class VideoDecoder implements _i3.EventTarget {
  factory VideoDecoder(_i3.VideoDecoderInit init) => _i4.callConstructor(
        _declaredVideoDecoder,
        [init],
      );

  static set isConfigSupported(
      _i2.Future<_i3.VideoDecoderSupport> Function(_i3.VideoDecoderConfig)
          value) {
    _i4.setProperty(
      _i8.target798,
      'isConfigSupported',
      _i4.allowInterop(value),
    );
  }

  static _i2.Future<_i3.VideoDecoderSupport> Function(_i3.VideoDecoderConfig)
      get isConfigSupported =>
          (_i3.VideoDecoderConfig p0) => _i4.promiseToFuture(_i4.callMethod(
                _i4.getProperty(
                  _i8.target798,
                  'isConfigSupported',
                ),
                r'call',
                [
                  _i8.target798,
                  p0,
                ],
              ));
}

_i2.Object get _declaredVideoDecoder => _i4.getProperty(
      _self,
      'VideoDecoder',
    );

extension VideoDecoder$Typings on VideoDecoder {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoDecoder/decodeQueueSize)
  _i2.num get decodeQueueSize => _i4.getProperty(
        this,
        'decodeQueueSize',
      );
  _i2.dynamic Function(_i3.Event)? get ondequeue =>
      (_i3.Event p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'ondequeue',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set ondequeue(_i2.dynamic Function(_i3.Event)? value) {
    _i4.setProperty(
      this,
      'ondequeue',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoDecoder/state)
  _i3.CodecState get state =>
      _i3.CodecStateOptions.values.byName(_i4.getProperty(
        this,
        'state',
      ));
  set close(void Function() value) {
    _i4.setProperty(
      this,
      'close',
      _i4.allowInterop(value),
    );
  }

  void Function() get close => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'close',
        ),
        r'call',
        [this],
      );
  set configure(void Function(_i3.VideoDecoderConfig) value) {
    _i4.setProperty(
      this,
      'configure',
      _i4.allowInterop(value),
    );
  }

  void Function(_i3.VideoDecoderConfig) get configure =>
      (_i3.VideoDecoderConfig p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'configure',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set decode(void Function(_i3.EncodedVideoChunk) value) {
    _i4.setProperty(
      this,
      'decode',
      _i4.allowInterop(value),
    );
  }

  void Function(_i3.EncodedVideoChunk) get decode =>
      (_i3.EncodedVideoChunk p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'decode',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set flush(_i2.Future<void> Function() value) {
    _i4.setProperty(
      this,
      'flush',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<void> Function() get flush =>
      () => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'flush',
            ),
            r'call',
            [this],
          ));
  set reset(void Function() value) {
    _i4.setProperty(
      this,
      'reset',
      _i4.allowInterop(value),
    );
  }

  void Function() get reset => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'reset',
        ),
        r'call',
        [this],
      );

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$1<K$>(
    _i3.VideoDecoderEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function<K$>(
      _i3.VideoDecoderEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get addEventListener => (
        $1: _addEventListener$1,
        $2: _addEventListener$2,
      );

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$1<K$>(
    _i3.VideoDecoderEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function<K$>(
      _i3.VideoDecoderEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get removeEventListener => (
        $1: _removeEventListener$1,
        $2: _removeEventListener$2,
      );
}

enum VideoEncoderEventMap<T$> {
  dequeue<_i3.Event>(r'dequeue');

  const VideoEncoderEventMap(this.value);

  final _i2.String value;
}

/* Source:  */
/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoEncoder)
@_i1.JS()
@_i1.staticInterop
class VideoEncoder implements _i3.EventTarget {
  factory VideoEncoder(_i3.VideoEncoderInit init) => _i4.callConstructor(
        _declaredVideoEncoder,
        [init],
      );

  static set isConfigSupported(
      _i2.Future<_i3.VideoEncoderSupport> Function(_i3.VideoEncoderConfig)
          value) {
    _i4.setProperty(
      _i8.target799,
      'isConfigSupported',
      _i4.allowInterop(value),
    );
  }

  static _i2.Future<_i3.VideoEncoderSupport> Function(_i3.VideoEncoderConfig)
      get isConfigSupported =>
          (_i3.VideoEncoderConfig p0) => _i4.promiseToFuture(_i4.callMethod(
                _i4.getProperty(
                  _i8.target799,
                  'isConfigSupported',
                ),
                r'call',
                [
                  _i8.target799,
                  p0,
                ],
              ));
}

_i2.Object get _declaredVideoEncoder => _i4.getProperty(
      _self,
      'VideoEncoder',
    );

extension VideoEncoder$Typings on VideoEncoder {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoEncoder/encodeQueueSize)
  _i2.num get encodeQueueSize => _i4.getProperty(
        this,
        'encodeQueueSize',
      );
  _i2.dynamic Function(_i3.Event)? get ondequeue =>
      (_i3.Event p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'ondequeue',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set ondequeue(_i2.dynamic Function(_i3.Event)? value) {
    _i4.setProperty(
      this,
      'ondequeue',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoEncoder/state)
  _i3.CodecState get state =>
      _i3.CodecStateOptions.values.byName(_i4.getProperty(
        this,
        'state',
      ));
  set close(void Function() value) {
    _i4.setProperty(
      this,
      'close',
      _i4.allowInterop(value),
    );
  }

  void Function() get close => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'close',
        ),
        r'call',
        [this],
      );
  set configure(void Function(_i3.VideoEncoderConfig) value) {
    _i4.setProperty(
      this,
      'configure',
      _i4.allowInterop(value),
    );
  }

  void Function(_i3.VideoEncoderConfig) get configure =>
      (_i3.VideoEncoderConfig p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'configure',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set encode(
      void Function(
        _i3.VideoFrame, [
        _i3.VideoEncoderEncodeOptions?,
      ]) value) {
    _i4.setProperty(
      this,
      'encode',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i3.VideoFrame, [
    _i3.VideoEncoderEncodeOptions?,
  ]) get encode => (
        _i3.VideoFrame p0, [
        _i3.VideoEncoderEncodeOptions? p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'encode',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
            ],
          );
  set flush(_i2.Future<void> Function() value) {
    _i4.setProperty(
      this,
      'flush',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<void> Function() get flush =>
      () => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'flush',
            ),
            r'call',
            [this],
          ));
  set reset(void Function() value) {
    _i4.setProperty(
      this,
      'reset',
      _i4.allowInterop(value),
    );
  }

  void Function() get reset => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'reset',
        ),
        r'call',
        [this],
      );

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$1<K$>(
    _i3.VideoEncoderEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function<K$>(
      _i3.VideoEncoderEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get addEventListener => (
        $1: _addEventListener$1,
        $2: _addEventListener$2,
      );

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$1<K$>(
    _i3.VideoEncoderEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function<K$>(
      _i3.VideoEncoderEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get removeEventListener => (
        $1: _removeEventListener$1,
        $2: _removeEventListener$2,
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame)
@_i1.JS()
@_i1.staticInterop
class VideoFrame {
  factory VideoFrame.$1() => _i4.callConstructor(
        _declaredVideoFrame,
        [],
      );

  factory VideoFrame.$2(
    _i2.Object image, [
    _i3.VideoFrameInit? init,
  ]) =>
      _i4.callConstructor(
        _declaredVideoFrame,
        [
          image,
          init ?? _i6.undefined,
        ],
      );

  factory VideoFrame.$3(
    _i2.Object data,
    _i3.VideoFrameBufferInit init,
  ) =>
      _i4.callConstructor(
        _declaredVideoFrame,
        [
          data,
          init,
        ],
      );
}

_i2.Object get _declaredVideoFrame => _i4.getProperty(
      _self,
      'VideoFrame',
    );

extension VideoFrame$Typings on VideoFrame {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/codedHeight)
  _i2.num get codedHeight => _i4.getProperty(
        this,
        'codedHeight',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/codedRect)
  _i3.DOMRectReadOnly? get codedRect => _i4.getProperty(
        this,
        'codedRect',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/codedWidth)
  _i2.num get codedWidth => _i4.getProperty(
        this,
        'codedWidth',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/colorSpace)
  _i3.VideoColorSpace get colorSpace => _i4.getProperty(
        this,
        'colorSpace',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/displayHeight)
  _i2.num get displayHeight => _i4.getProperty(
        this,
        'displayHeight',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/displayWidth)
  _i2.num get displayWidth => _i4.getProperty(
        this,
        'displayWidth',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/duration)
  _i2.num? get duration => _i4.getProperty(
        this,
        'duration',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/format)
  _i3.VideoPixelFormat? get format => switch (_i4.getProperty(
        this,
        'format',
      )) {
        _i2.String name => _i3.VideoPixelFormatOptions.values.byName(name),
        _ => null
      };

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/timestamp)
  _i2.num get timestamp => _i4.getProperty(
        this,
        'timestamp',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/visibleRect)
  _i3.DOMRectReadOnly? get visibleRect => _i4.getProperty(
        this,
        'visibleRect',
      );
  set allocationSize(_i2.num Function([_i3.VideoFrameCopyToOptions?]) value) {
    _i4.setProperty(
      this,
      'allocationSize',
      _i4.allowInterop(value),
    );
  }

  _i2.num Function([_i3.VideoFrameCopyToOptions?]) get allocationSize =>
      ([_i3.VideoFrameCopyToOptions? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'allocationSize',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set clone(_i3.VideoFrame Function() value) {
    _i4.setProperty(
      this,
      'clone',
      _i4.allowInterop(value),
    );
  }

  _i3.VideoFrame Function() get clone => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'clone',
        ),
        r'call',
        [this],
      );
  set close(void Function() value) {
    _i4.setProperty(
      this,
      'close',
      _i4.allowInterop(value),
    );
  }

  void Function() get close => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'close',
        ),
        r'call',
        [this],
      );
  set copyTo(
      _i2.Future<_i2.List<_i3.PlaneLayout>> Function(
        _i2.Object, [
        _i3.VideoFrameCopyToOptions?,
      ]) value) {
    _i4.setProperty(
      this,
      'copyTo',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i2.List<_i3.PlaneLayout>> Function(
    _i2.Object, [
    _i3.VideoFrameCopyToOptions?,
  ]) get copyTo => (
        _i2.Object p0, [
        _i3.VideoFrameCopyToOptions? p1,
      ]) =>
          _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'copyTo',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
            ],
          ));
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_color_buffer_float)
@_i1.JS('WEBGL_color_buffer_float')
@_i1.staticInterop
@_i1.anonymous
class WEBGLColorBufferFloat {
  external factory WEBGLColorBufferFloat._({
    _i2.dynamic rgba32fExt,
    _i2.dynamic framebufferAttachmentComponentTypeExt,
    _i2.dynamic unsignedNormalizedExt,
  });

  factory WEBGLColorBufferFloat({
    _i2.num? rgba32fExt,
    _i2.num? framebufferAttachmentComponentTypeExt,
    _i2.num? unsignedNormalizedExt,
  }) =>
      WEBGLColorBufferFloat._(
        rgba32fExt: rgba32fExt,
        framebufferAttachmentComponentTypeExt:
            framebufferAttachmentComponentTypeExt,
        unsignedNormalizedExt: unsignedNormalizedExt,
      );

  static _i2.num get rgba32fExt => _i4.getProperty(
        _declaredWEBGLColorBufferFloat,
        'RGBA32F_EXT',
      );
  static _i2.num get framebufferAttachmentComponentTypeExt => _i4.getProperty(
        _declaredWEBGLColorBufferFloat,
        'FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT',
      );
  static _i2.num get unsignedNormalizedExt => _i4.getProperty(
        _declaredWEBGLColorBufferFloat,
        'UNSIGNED_NORMALIZED_EXT',
      );
}

_i2.Object get _declaredWEBGLColorBufferFloat => _i4.getProperty(
      _self,
      'WEBGL_color_buffer_float',
    );

extension WEBGLColorBufferFloat$Typings on WEBGLColorBufferFloat {
  _i2.num get rgba32fExt => _i4.getProperty(
        this,
        'RGBA32F_EXT',
      );
  _i2.num get framebufferAttachmentComponentTypeExt => _i4.getProperty(
        this,
        'FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT',
      );
  _i2.num get unsignedNormalizedExt => _i4.getProperty(
        this,
        'UNSIGNED_NORMALIZED_EXT',
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_astc)
@_i1.JS('WEBGL_compressed_texture_astc')
@_i1.staticInterop
@_i1.anonymous
class WEBGLCompressedTextureAstc {
  external factory WEBGLCompressedTextureAstc._({
    _i2.dynamic compressedrgbaastC4x4KHR,
    _i2.dynamic compressedrgbaastC5x4KHR,
    _i2.dynamic compressedrgbaastC5x5KHR,
    _i2.dynamic compressedrgbaastC6x5KHR,
    _i2.dynamic compressedrgbaastC6x6KHR,
    _i2.dynamic compressedrgbaastC8x5KHR,
    _i2.dynamic compressedrgbaastC8x6KHR,
    _i2.dynamic compressedrgbaastC8x8KHR,
    _i2.dynamic compressedrgbaastC10x5KHR,
    _i2.dynamic compressedrgbaastC10x6KHR,
    _i2.dynamic compressedrgbaastC10x8KHR,
    _i2.dynamic compressedrgbaastC10x10KHR,
    _i2.dynamic compressedrgbaastC12x10KHR,
    _i2.dynamic compressedrgbaastC12x12KHR,
    _i2.dynamic compressedsrgB8ALPHA8ASTC4x4KHR,
    _i2.dynamic compressedsrgB8ALPHA8ASTC5x4KHR,
    _i2.dynamic compressedsrgB8ALPHA8ASTC5x5KHR,
    _i2.dynamic compressedsrgB8ALPHA8ASTC6x5KHR,
    _i2.dynamic compressedsrgB8ALPHA8ASTC6x6KHR,
    _i2.dynamic compressedsrgB8ALPHA8ASTC8x5KHR,
    _i2.dynamic compressedsrgB8ALPHA8ASTC8x6KHR,
    _i2.dynamic compressedsrgB8ALPHA8ASTC8x8KHR,
    _i2.dynamic compressedsrgB8ALPHA8ASTC10x5KHR,
    _i2.dynamic compressedsrgB8ALPHA8ASTC10x6KHR,
    _i2.dynamic compressedsrgB8ALPHA8ASTC10x8KHR,
    _i2.dynamic compressedsrgB8ALPHA8ASTC10x10KHR,
    _i2.dynamic compressedsrgB8ALPHA8ASTC12x10KHR,
    _i2.dynamic compressedsrgB8ALPHA8ASTC12x12KHR,
    _i2.dynamic getSupportedProfiles,
  });

  factory WEBGLCompressedTextureAstc({
    _i2.num? compressedrgbaastC4x4KHR,
    _i2.num? compressedrgbaastC5x4KHR,
    _i2.num? compressedrgbaastC5x5KHR,
    _i2.num? compressedrgbaastC6x5KHR,
    _i2.num? compressedrgbaastC6x6KHR,
    _i2.num? compressedrgbaastC8x5KHR,
    _i2.num? compressedrgbaastC8x6KHR,
    _i2.num? compressedrgbaastC8x8KHR,
    _i2.num? compressedrgbaastC10x5KHR,
    _i2.num? compressedrgbaastC10x6KHR,
    _i2.num? compressedrgbaastC10x8KHR,
    _i2.num? compressedrgbaastC10x10KHR,
    _i2.num? compressedrgbaastC12x10KHR,
    _i2.num? compressedrgbaastC12x12KHR,
    _i2.num? compressedsrgB8ALPHA8ASTC4x4KHR,
    _i2.num? compressedsrgB8ALPHA8ASTC5x4KHR,
    _i2.num? compressedsrgB8ALPHA8ASTC5x5KHR,
    _i2.num? compressedsrgB8ALPHA8ASTC6x5KHR,
    _i2.num? compressedsrgB8ALPHA8ASTC6x6KHR,
    _i2.num? compressedsrgB8ALPHA8ASTC8x5KHR,
    _i2.num? compressedsrgB8ALPHA8ASTC8x6KHR,
    _i2.num? compressedsrgB8ALPHA8ASTC8x8KHR,
    _i2.num? compressedsrgB8ALPHA8ASTC10x5KHR,
    _i2.num? compressedsrgB8ALPHA8ASTC10x6KHR,
    _i2.num? compressedsrgB8ALPHA8ASTC10x8KHR,
    _i2.num? compressedsrgB8ALPHA8ASTC10x10KHR,
    _i2.num? compressedsrgB8ALPHA8ASTC12x10KHR,
    _i2.num? compressedsrgB8ALPHA8ASTC12x12KHR,
    _i2.List<_i2.String> Function()? getSupportedProfiles,
  }) =>
      WEBGLCompressedTextureAstc._(
        compressedrgbaastC4x4KHR: compressedrgbaastC4x4KHR,
        compressedrgbaastC5x4KHR: compressedrgbaastC5x4KHR,
        compressedrgbaastC5x5KHR: compressedrgbaastC5x5KHR,
        compressedrgbaastC6x5KHR: compressedrgbaastC6x5KHR,
        compressedrgbaastC6x6KHR: compressedrgbaastC6x6KHR,
        compressedrgbaastC8x5KHR: compressedrgbaastC8x5KHR,
        compressedrgbaastC8x6KHR: compressedrgbaastC8x6KHR,
        compressedrgbaastC8x8KHR: compressedrgbaastC8x8KHR,
        compressedrgbaastC10x5KHR: compressedrgbaastC10x5KHR,
        compressedrgbaastC10x6KHR: compressedrgbaastC10x6KHR,
        compressedrgbaastC10x8KHR: compressedrgbaastC10x8KHR,
        compressedrgbaastC10x10KHR: compressedrgbaastC10x10KHR,
        compressedrgbaastC12x10KHR: compressedrgbaastC12x10KHR,
        compressedrgbaastC12x12KHR: compressedrgbaastC12x12KHR,
        compressedsrgB8ALPHA8ASTC4x4KHR: compressedsrgB8ALPHA8ASTC4x4KHR,
        compressedsrgB8ALPHA8ASTC5x4KHR: compressedsrgB8ALPHA8ASTC5x4KHR,
        compressedsrgB8ALPHA8ASTC5x5KHR: compressedsrgB8ALPHA8ASTC5x5KHR,
        compressedsrgB8ALPHA8ASTC6x5KHR: compressedsrgB8ALPHA8ASTC6x5KHR,
        compressedsrgB8ALPHA8ASTC6x6KHR: compressedsrgB8ALPHA8ASTC6x6KHR,
        compressedsrgB8ALPHA8ASTC8x5KHR: compressedsrgB8ALPHA8ASTC8x5KHR,
        compressedsrgB8ALPHA8ASTC8x6KHR: compressedsrgB8ALPHA8ASTC8x6KHR,
        compressedsrgB8ALPHA8ASTC8x8KHR: compressedsrgB8ALPHA8ASTC8x8KHR,
        compressedsrgB8ALPHA8ASTC10x5KHR: compressedsrgB8ALPHA8ASTC10x5KHR,
        compressedsrgB8ALPHA8ASTC10x6KHR: compressedsrgB8ALPHA8ASTC10x6KHR,
        compressedsrgB8ALPHA8ASTC10x8KHR: compressedsrgB8ALPHA8ASTC10x8KHR,
        compressedsrgB8ALPHA8ASTC10x10KHR: compressedsrgB8ALPHA8ASTC10x10KHR,
        compressedsrgB8ALPHA8ASTC12x10KHR: compressedsrgB8ALPHA8ASTC12x10KHR,
        compressedsrgB8ALPHA8ASTC12x12KHR: compressedsrgB8ALPHA8ASTC12x12KHR,
        getSupportedProfiles: getSupportedProfiles == null
            ? null
            : _i4.allowInterop(getSupportedProfiles),
      );

  static _i2.num get compressedrgbaastC4x4KHR => _i4.getProperty(
        _declaredWEBGLCompressedTextureAstc,
        'COMPRESSED_RGBA_ASTC_4x4_KHR',
      );
  static _i2.num get compressedrgbaastC5x4KHR => _i4.getProperty(
        _declaredWEBGLCompressedTextureAstc,
        'COMPRESSED_RGBA_ASTC_5x4_KHR',
      );
  static _i2.num get compressedrgbaastC5x5KHR => _i4.getProperty(
        _declaredWEBGLCompressedTextureAstc,
        'COMPRESSED_RGBA_ASTC_5x5_KHR',
      );
  static _i2.num get compressedrgbaastC6x5KHR => _i4.getProperty(
        _declaredWEBGLCompressedTextureAstc,
        'COMPRESSED_RGBA_ASTC_6x5_KHR',
      );
  static _i2.num get compressedrgbaastC6x6KHR => _i4.getProperty(
        _declaredWEBGLCompressedTextureAstc,
        'COMPRESSED_RGBA_ASTC_6x6_KHR',
      );
  static _i2.num get compressedrgbaastC8x5KHR => _i4.getProperty(
        _declaredWEBGLCompressedTextureAstc,
        'COMPRESSED_RGBA_ASTC_8x5_KHR',
      );
  static _i2.num get compressedrgbaastC8x6KHR => _i4.getProperty(
        _declaredWEBGLCompressedTextureAstc,
        'COMPRESSED_RGBA_ASTC_8x6_KHR',
      );
  static _i2.num get compressedrgbaastC8x8KHR => _i4.getProperty(
        _declaredWEBGLCompressedTextureAstc,
        'COMPRESSED_RGBA_ASTC_8x8_KHR',
      );
  static _i2.num get compressedrgbaastC10x5KHR => _i4.getProperty(
        _declaredWEBGLCompressedTextureAstc,
        'COMPRESSED_RGBA_ASTC_10x5_KHR',
      );
  static _i2.num get compressedrgbaastC10x6KHR => _i4.getProperty(
        _declaredWEBGLCompressedTextureAstc,
        'COMPRESSED_RGBA_ASTC_10x6_KHR',
      );
  static _i2.num get compressedrgbaastC10x8KHR => _i4.getProperty(
        _declaredWEBGLCompressedTextureAstc,
        'COMPRESSED_RGBA_ASTC_10x8_KHR',
      );
  static _i2.num get compressedrgbaastC10x10KHR => _i4.getProperty(
        _declaredWEBGLCompressedTextureAstc,
        'COMPRESSED_RGBA_ASTC_10x10_KHR',
      );
  static _i2.num get compressedrgbaastC12x10KHR => _i4.getProperty(
        _declaredWEBGLCompressedTextureAstc,
        'COMPRESSED_RGBA_ASTC_12x10_KHR',
      );
  static _i2.num get compressedrgbaastC12x12KHR => _i4.getProperty(
        _declaredWEBGLCompressedTextureAstc,
        'COMPRESSED_RGBA_ASTC_12x12_KHR',
      );
  static _i2.num get compressedsrgB8ALPHA8ASTC4x4KHR => _i4.getProperty(
        _declaredWEBGLCompressedTextureAstc,
        'COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR',
      );
  static _i2.num get compressedsrgB8ALPHA8ASTC5x4KHR => _i4.getProperty(
        _declaredWEBGLCompressedTextureAstc,
        'COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR',
      );
  static _i2.num get compressedsrgB8ALPHA8ASTC5x5KHR => _i4.getProperty(
        _declaredWEBGLCompressedTextureAstc,
        'COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR',
      );
  static _i2.num get compressedsrgB8ALPHA8ASTC6x5KHR => _i4.getProperty(
        _declaredWEBGLCompressedTextureAstc,
        'COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR',
      );
  static _i2.num get compressedsrgB8ALPHA8ASTC6x6KHR => _i4.getProperty(
        _declaredWEBGLCompressedTextureAstc,
        'COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR',
      );
  static _i2.num get compressedsrgB8ALPHA8ASTC8x5KHR => _i4.getProperty(
        _declaredWEBGLCompressedTextureAstc,
        'COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR',
      );
  static _i2.num get compressedsrgB8ALPHA8ASTC8x6KHR => _i4.getProperty(
        _declaredWEBGLCompressedTextureAstc,
        'COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR',
      );
  static _i2.num get compressedsrgB8ALPHA8ASTC8x8KHR => _i4.getProperty(
        _declaredWEBGLCompressedTextureAstc,
        'COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR',
      );
  static _i2.num get compressedsrgB8ALPHA8ASTC10x5KHR => _i4.getProperty(
        _declaredWEBGLCompressedTextureAstc,
        'COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR',
      );
  static _i2.num get compressedsrgB8ALPHA8ASTC10x6KHR => _i4.getProperty(
        _declaredWEBGLCompressedTextureAstc,
        'COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR',
      );
  static _i2.num get compressedsrgB8ALPHA8ASTC10x8KHR => _i4.getProperty(
        _declaredWEBGLCompressedTextureAstc,
        'COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR',
      );
  static _i2.num get compressedsrgB8ALPHA8ASTC10x10KHR => _i4.getProperty(
        _declaredWEBGLCompressedTextureAstc,
        'COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR',
      );
  static _i2.num get compressedsrgB8ALPHA8ASTC12x10KHR => _i4.getProperty(
        _declaredWEBGLCompressedTextureAstc,
        'COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR',
      );
  static _i2.num get compressedsrgB8ALPHA8ASTC12x12KHR => _i4.getProperty(
        _declaredWEBGLCompressedTextureAstc,
        'COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR',
      );
}

_i2.Object get _declaredWEBGLCompressedTextureAstc => _i4.getProperty(
      _self,
      'WEBGL_compressed_texture_astc',
    );

extension WEBGLCompressedTextureAstc$Typings on WEBGLCompressedTextureAstc {
  _i2.num get compressedrgbaastC4x4KHR => _i4.getProperty(
        this,
        'COMPRESSED_RGBA_ASTC_4x4_KHR',
      );
  _i2.num get compressedrgbaastC5x4KHR => _i4.getProperty(
        this,
        'COMPRESSED_RGBA_ASTC_5x4_KHR',
      );
  _i2.num get compressedrgbaastC5x5KHR => _i4.getProperty(
        this,
        'COMPRESSED_RGBA_ASTC_5x5_KHR',
      );
  _i2.num get compressedrgbaastC6x5KHR => _i4.getProperty(
        this,
        'COMPRESSED_RGBA_ASTC_6x5_KHR',
      );
  _i2.num get compressedrgbaastC6x6KHR => _i4.getProperty(
        this,
        'COMPRESSED_RGBA_ASTC_6x6_KHR',
      );
  _i2.num get compressedrgbaastC8x5KHR => _i4.getProperty(
        this,
        'COMPRESSED_RGBA_ASTC_8x5_KHR',
      );
  _i2.num get compressedrgbaastC8x6KHR => _i4.getProperty(
        this,
        'COMPRESSED_RGBA_ASTC_8x6_KHR',
      );
  _i2.num get compressedrgbaastC8x8KHR => _i4.getProperty(
        this,
        'COMPRESSED_RGBA_ASTC_8x8_KHR',
      );
  _i2.num get compressedrgbaastC10x5KHR => _i4.getProperty(
        this,
        'COMPRESSED_RGBA_ASTC_10x5_KHR',
      );
  _i2.num get compressedrgbaastC10x6KHR => _i4.getProperty(
        this,
        'COMPRESSED_RGBA_ASTC_10x6_KHR',
      );
  _i2.num get compressedrgbaastC10x8KHR => _i4.getProperty(
        this,
        'COMPRESSED_RGBA_ASTC_10x8_KHR',
      );
  _i2.num get compressedrgbaastC10x10KHR => _i4.getProperty(
        this,
        'COMPRESSED_RGBA_ASTC_10x10_KHR',
      );
  _i2.num get compressedrgbaastC12x10KHR => _i4.getProperty(
        this,
        'COMPRESSED_RGBA_ASTC_12x10_KHR',
      );
  _i2.num get compressedrgbaastC12x12KHR => _i4.getProperty(
        this,
        'COMPRESSED_RGBA_ASTC_12x12_KHR',
      );
  _i2.num get compressedsrgB8ALPHA8ASTC4x4KHR => _i4.getProperty(
        this,
        'COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR',
      );
  _i2.num get compressedsrgB8ALPHA8ASTC5x4KHR => _i4.getProperty(
        this,
        'COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR',
      );
  _i2.num get compressedsrgB8ALPHA8ASTC5x5KHR => _i4.getProperty(
        this,
        'COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR',
      );
  _i2.num get compressedsrgB8ALPHA8ASTC6x5KHR => _i4.getProperty(
        this,
        'COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR',
      );
  _i2.num get compressedsrgB8ALPHA8ASTC6x6KHR => _i4.getProperty(
        this,
        'COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR',
      );
  _i2.num get compressedsrgB8ALPHA8ASTC8x5KHR => _i4.getProperty(
        this,
        'COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR',
      );
  _i2.num get compressedsrgB8ALPHA8ASTC8x6KHR => _i4.getProperty(
        this,
        'COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR',
      );
  _i2.num get compressedsrgB8ALPHA8ASTC8x8KHR => _i4.getProperty(
        this,
        'COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR',
      );
  _i2.num get compressedsrgB8ALPHA8ASTC10x5KHR => _i4.getProperty(
        this,
        'COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR',
      );
  _i2.num get compressedsrgB8ALPHA8ASTC10x6KHR => _i4.getProperty(
        this,
        'COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR',
      );
  _i2.num get compressedsrgB8ALPHA8ASTC10x8KHR => _i4.getProperty(
        this,
        'COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR',
      );
  _i2.num get compressedsrgB8ALPHA8ASTC10x10KHR => _i4.getProperty(
        this,
        'COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR',
      );
  _i2.num get compressedsrgB8ALPHA8ASTC12x10KHR => _i4.getProperty(
        this,
        'COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR',
      );
  _i2.num get compressedsrgB8ALPHA8ASTC12x12KHR => _i4.getProperty(
        this,
        'COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR',
      );
  set getSupportedProfiles(_i2.List<_i2.String> Function() value) {
    _i4.setProperty(
      this,
      'getSupportedProfiles',
      _i4.allowInterop(value),
    );
  }

  _i2.List<_i2.String> Function() get getSupportedProfiles =>
      () => ((_i4.callMethod(
            _i4.getProperty(
              this,
              'getSupportedProfiles',
            ),
            r'call',
            [this],
          )) as _i2.List)
              .cast();
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_etc)
@_i1.JS('WEBGL_compressed_texture_etc')
@_i1.staticInterop
@_i1.anonymous
class WEBGLCompressedTextureEtc {
  external factory WEBGLCompressedTextureEtc._({
    _i2.dynamic compressedR11Eac,
    _i2.dynamic compressedSignedR11Eac,
    _i2.dynamic compressedRg11Eac,
    _i2.dynamic compressedSignedRg11Eac,
    _i2.dynamic compressedRgb8Etc2,
    _i2.dynamic compressedSrgb8Etc2,
    _i2.dynamic compressedRgb8PunchthroughAlpha1Etc2,
    _i2.dynamic compressedSrgb8PunchthroughAlpha1Etc2,
    _i2.dynamic compressedRgba8Etc2Eac,
    _i2.dynamic compressedSrgb8Alpha8Etc2Eac,
  });

  factory WEBGLCompressedTextureEtc({
    _i2.num? compressedR11Eac,
    _i2.num? compressedSignedR11Eac,
    _i2.num? compressedRg11Eac,
    _i2.num? compressedSignedRg11Eac,
    _i2.num? compressedRgb8Etc2,
    _i2.num? compressedSrgb8Etc2,
    _i2.num? compressedRgb8PunchthroughAlpha1Etc2,
    _i2.num? compressedSrgb8PunchthroughAlpha1Etc2,
    _i2.num? compressedRgba8Etc2Eac,
    _i2.num? compressedSrgb8Alpha8Etc2Eac,
  }) =>
      WEBGLCompressedTextureEtc._(
        compressedR11Eac: compressedR11Eac,
        compressedSignedR11Eac: compressedSignedR11Eac,
        compressedRg11Eac: compressedRg11Eac,
        compressedSignedRg11Eac: compressedSignedRg11Eac,
        compressedRgb8Etc2: compressedRgb8Etc2,
        compressedSrgb8Etc2: compressedSrgb8Etc2,
        compressedRgb8PunchthroughAlpha1Etc2:
            compressedRgb8PunchthroughAlpha1Etc2,
        compressedSrgb8PunchthroughAlpha1Etc2:
            compressedSrgb8PunchthroughAlpha1Etc2,
        compressedRgba8Etc2Eac: compressedRgba8Etc2Eac,
        compressedSrgb8Alpha8Etc2Eac: compressedSrgb8Alpha8Etc2Eac,
      );

  static _i2.num get compressedR11Eac => _i4.getProperty(
        _declaredWEBGLCompressedTextureEtc,
        'COMPRESSED_R11_EAC',
      );
  static _i2.num get compressedSignedR11Eac => _i4.getProperty(
        _declaredWEBGLCompressedTextureEtc,
        'COMPRESSED_SIGNED_R11_EAC',
      );
  static _i2.num get compressedRg11Eac => _i4.getProperty(
        _declaredWEBGLCompressedTextureEtc,
        'COMPRESSED_RG11_EAC',
      );
  static _i2.num get compressedSignedRg11Eac => _i4.getProperty(
        _declaredWEBGLCompressedTextureEtc,
        'COMPRESSED_SIGNED_RG11_EAC',
      );
  static _i2.num get compressedRgb8Etc2 => _i4.getProperty(
        _declaredWEBGLCompressedTextureEtc,
        'COMPRESSED_RGB8_ETC2',
      );
  static _i2.num get compressedSrgb8Etc2 => _i4.getProperty(
        _declaredWEBGLCompressedTextureEtc,
        'COMPRESSED_SRGB8_ETC2',
      );
  static _i2.num get compressedRgb8PunchthroughAlpha1Etc2 => _i4.getProperty(
        _declaredWEBGLCompressedTextureEtc,
        'COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2',
      );
  static _i2.num get compressedSrgb8PunchthroughAlpha1Etc2 => _i4.getProperty(
        _declaredWEBGLCompressedTextureEtc,
        'COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2',
      );
  static _i2.num get compressedRgba8Etc2Eac => _i4.getProperty(
        _declaredWEBGLCompressedTextureEtc,
        'COMPRESSED_RGBA8_ETC2_EAC',
      );
  static _i2.num get compressedSrgb8Alpha8Etc2Eac => _i4.getProperty(
        _declaredWEBGLCompressedTextureEtc,
        'COMPRESSED_SRGB8_ALPHA8_ETC2_EAC',
      );
}

_i2.Object get _declaredWEBGLCompressedTextureEtc => _i4.getProperty(
      _self,
      'WEBGL_compressed_texture_etc',
    );

extension WEBGLCompressedTextureEtc$Typings on WEBGLCompressedTextureEtc {
  _i2.num get compressedR11Eac => _i4.getProperty(
        this,
        'COMPRESSED_R11_EAC',
      );
  _i2.num get compressedSignedR11Eac => _i4.getProperty(
        this,
        'COMPRESSED_SIGNED_R11_EAC',
      );
  _i2.num get compressedRg11Eac => _i4.getProperty(
        this,
        'COMPRESSED_RG11_EAC',
      );
  _i2.num get compressedSignedRg11Eac => _i4.getProperty(
        this,
        'COMPRESSED_SIGNED_RG11_EAC',
      );
  _i2.num get compressedRgb8Etc2 => _i4.getProperty(
        this,
        'COMPRESSED_RGB8_ETC2',
      );
  _i2.num get compressedSrgb8Etc2 => _i4.getProperty(
        this,
        'COMPRESSED_SRGB8_ETC2',
      );
  _i2.num get compressedRgb8PunchthroughAlpha1Etc2 => _i4.getProperty(
        this,
        'COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2',
      );
  _i2.num get compressedSrgb8PunchthroughAlpha1Etc2 => _i4.getProperty(
        this,
        'COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2',
      );
  _i2.num get compressedRgba8Etc2Eac => _i4.getProperty(
        this,
        'COMPRESSED_RGBA8_ETC2_EAC',
      );
  _i2.num get compressedSrgb8Alpha8Etc2Eac => _i4.getProperty(
        this,
        'COMPRESSED_SRGB8_ALPHA8_ETC2_EAC',
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_etc1)
@_i1.JS('WEBGL_compressed_texture_etc1')
@_i1.staticInterop
@_i1.anonymous
class WEBGLCompressedTextureEtc1 {
  external factory WEBGLCompressedTextureEtc1._(
      {_i2.dynamic compressedRgbEtc1Webgl});

  factory WEBGLCompressedTextureEtc1({_i2.num? compressedRgbEtc1Webgl}) =>
      WEBGLCompressedTextureEtc1._(
          compressedRgbEtc1Webgl: compressedRgbEtc1Webgl);

  static _i2.num get compressedRgbEtc1Webgl => _i4.getProperty(
        _declaredWEBGLCompressedTextureEtc1,
        'COMPRESSED_RGB_ETC1_WEBGL',
      );
}

_i2.Object get _declaredWEBGLCompressedTextureEtc1 => _i4.getProperty(
      _self,
      'WEBGL_compressed_texture_etc1',
    );

extension WEBGLCompressedTextureEtc1$Typings on WEBGLCompressedTextureEtc1 {
  _i2.num get compressedRgbEtc1Webgl => _i4.getProperty(
        this,
        'COMPRESSED_RGB_ETC1_WEBGL',
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_pvrtc)
@_i1.JS('WEBGL_compressed_texture_pvrtc')
@_i1.staticInterop
@_i1.anonymous
class WEBGLCompressedTexturePvrtc {
  external factory WEBGLCompressedTexturePvrtc._({
    _i2.dynamic compressedRgbPvrtc4bppv1Img,
    _i2.dynamic compressedRgbPvrtc2bppv1Img,
    _i2.dynamic compressedRgbaPvrtc4bppv1Img,
    _i2.dynamic compressedRgbaPvrtc2bppv1Img,
  });

  factory WEBGLCompressedTexturePvrtc({
    _i2.num? compressedRgbPvrtc4bppv1Img,
    _i2.num? compressedRgbPvrtc2bppv1Img,
    _i2.num? compressedRgbaPvrtc4bppv1Img,
    _i2.num? compressedRgbaPvrtc2bppv1Img,
  }) =>
      WEBGLCompressedTexturePvrtc._(
        compressedRgbPvrtc4bppv1Img: compressedRgbPvrtc4bppv1Img,
        compressedRgbPvrtc2bppv1Img: compressedRgbPvrtc2bppv1Img,
        compressedRgbaPvrtc4bppv1Img: compressedRgbaPvrtc4bppv1Img,
        compressedRgbaPvrtc2bppv1Img: compressedRgbaPvrtc2bppv1Img,
      );

  static _i2.num get compressedRgbPvrtc4bppv1Img => _i4.getProperty(
        _declaredWEBGLCompressedTexturePvrtc,
        'COMPRESSED_RGB_PVRTC_4BPPV1_IMG',
      );
  static _i2.num get compressedRgbPvrtc2bppv1Img => _i4.getProperty(
        _declaredWEBGLCompressedTexturePvrtc,
        'COMPRESSED_RGB_PVRTC_2BPPV1_IMG',
      );
  static _i2.num get compressedRgbaPvrtc4bppv1Img => _i4.getProperty(
        _declaredWEBGLCompressedTexturePvrtc,
        'COMPRESSED_RGBA_PVRTC_4BPPV1_IMG',
      );
  static _i2.num get compressedRgbaPvrtc2bppv1Img => _i4.getProperty(
        _declaredWEBGLCompressedTexturePvrtc,
        'COMPRESSED_RGBA_PVRTC_2BPPV1_IMG',
      );
}

_i2.Object get _declaredWEBGLCompressedTexturePvrtc => _i4.getProperty(
      _self,
      'WEBGL_compressed_texture_pvrtc',
    );

extension WEBGLCompressedTexturePvrtc$Typings on WEBGLCompressedTexturePvrtc {
  _i2.num get compressedRgbPvrtc4bppv1Img => _i4.getProperty(
        this,
        'COMPRESSED_RGB_PVRTC_4BPPV1_IMG',
      );
  _i2.num get compressedRgbPvrtc2bppv1Img => _i4.getProperty(
        this,
        'COMPRESSED_RGB_PVRTC_2BPPV1_IMG',
      );
  _i2.num get compressedRgbaPvrtc4bppv1Img => _i4.getProperty(
        this,
        'COMPRESSED_RGBA_PVRTC_4BPPV1_IMG',
      );
  _i2.num get compressedRgbaPvrtc2bppv1Img => _i4.getProperty(
        this,
        'COMPRESSED_RGBA_PVRTC_2BPPV1_IMG',
      );
}

/* Source:  */
/// The WEBGL_compressed_texture_s3tc extension is part of the WebGL API and exposes four S3TC compressed texture formats.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_s3tc)
@_i1.JS('WEBGL_compressed_texture_s3tc')
@_i1.staticInterop
@_i1.anonymous
class WEBGLCompressedTextureS3tc {
  external factory WEBGLCompressedTextureS3tc._({
    _i2.dynamic compressedRgbS3tcDxt1Ext,
    _i2.dynamic compressedRgbaS3tcDxt1Ext,
    _i2.dynamic compressedRgbaS3tcDxt3Ext,
    _i2.dynamic compressedRgbaS3tcDxt5Ext,
  });

  factory WEBGLCompressedTextureS3tc({
    _i2.num? compressedRgbS3tcDxt1Ext,
    _i2.num? compressedRgbaS3tcDxt1Ext,
    _i2.num? compressedRgbaS3tcDxt3Ext,
    _i2.num? compressedRgbaS3tcDxt5Ext,
  }) =>
      WEBGLCompressedTextureS3tc._(
        compressedRgbS3tcDxt1Ext: compressedRgbS3tcDxt1Ext,
        compressedRgbaS3tcDxt1Ext: compressedRgbaS3tcDxt1Ext,
        compressedRgbaS3tcDxt3Ext: compressedRgbaS3tcDxt3Ext,
        compressedRgbaS3tcDxt5Ext: compressedRgbaS3tcDxt5Ext,
      );

  static _i2.num get compressedRgbS3tcDxt1Ext => _i4.getProperty(
        _declaredWEBGLCompressedTextureS3tc,
        'COMPRESSED_RGB_S3TC_DXT1_EXT',
      );
  static _i2.num get compressedRgbaS3tcDxt1Ext => _i4.getProperty(
        _declaredWEBGLCompressedTextureS3tc,
        'COMPRESSED_RGBA_S3TC_DXT1_EXT',
      );
  static _i2.num get compressedRgbaS3tcDxt3Ext => _i4.getProperty(
        _declaredWEBGLCompressedTextureS3tc,
        'COMPRESSED_RGBA_S3TC_DXT3_EXT',
      );
  static _i2.num get compressedRgbaS3tcDxt5Ext => _i4.getProperty(
        _declaredWEBGLCompressedTextureS3tc,
        'COMPRESSED_RGBA_S3TC_DXT5_EXT',
      );
}

_i2.Object get _declaredWEBGLCompressedTextureS3tc => _i4.getProperty(
      _self,
      'WEBGL_compressed_texture_s3tc',
    );

extension WEBGLCompressedTextureS3tc$Typings on WEBGLCompressedTextureS3tc {
  _i2.num get compressedRgbS3tcDxt1Ext => _i4.getProperty(
        this,
        'COMPRESSED_RGB_S3TC_DXT1_EXT',
      );
  _i2.num get compressedRgbaS3tcDxt1Ext => _i4.getProperty(
        this,
        'COMPRESSED_RGBA_S3TC_DXT1_EXT',
      );
  _i2.num get compressedRgbaS3tcDxt3Ext => _i4.getProperty(
        this,
        'COMPRESSED_RGBA_S3TC_DXT3_EXT',
      );
  _i2.num get compressedRgbaS3tcDxt5Ext => _i4.getProperty(
        this,
        'COMPRESSED_RGBA_S3TC_DXT5_EXT',
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_s3tc_srgb)
@_i1.JS('WEBGL_compressed_texture_s3tc_srgb')
@_i1.staticInterop
@_i1.anonymous
class WEBGLCompressedTextureS3tcSrgb {
  external factory WEBGLCompressedTextureS3tcSrgb._({
    _i2.dynamic compressedSrgbS3tcDxt1Ext,
    _i2.dynamic compressedSrgbAlphaS3tcDxt1Ext,
    _i2.dynamic compressedSrgbAlphaS3tcDxt3Ext,
    _i2.dynamic compressedSrgbAlphaS3tcDxt5Ext,
  });

  factory WEBGLCompressedTextureS3tcSrgb({
    _i2.num? compressedSrgbS3tcDxt1Ext,
    _i2.num? compressedSrgbAlphaS3tcDxt1Ext,
    _i2.num? compressedSrgbAlphaS3tcDxt3Ext,
    _i2.num? compressedSrgbAlphaS3tcDxt5Ext,
  }) =>
      WEBGLCompressedTextureS3tcSrgb._(
        compressedSrgbS3tcDxt1Ext: compressedSrgbS3tcDxt1Ext,
        compressedSrgbAlphaS3tcDxt1Ext: compressedSrgbAlphaS3tcDxt1Ext,
        compressedSrgbAlphaS3tcDxt3Ext: compressedSrgbAlphaS3tcDxt3Ext,
        compressedSrgbAlphaS3tcDxt5Ext: compressedSrgbAlphaS3tcDxt5Ext,
      );

  static _i2.num get compressedSrgbS3tcDxt1Ext => _i4.getProperty(
        _declaredWEBGLCompressedTextureS3tcSrgb,
        'COMPRESSED_SRGB_S3TC_DXT1_EXT',
      );
  static _i2.num get compressedSrgbAlphaS3tcDxt1Ext => _i4.getProperty(
        _declaredWEBGLCompressedTextureS3tcSrgb,
        'COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT',
      );
  static _i2.num get compressedSrgbAlphaS3tcDxt3Ext => _i4.getProperty(
        _declaredWEBGLCompressedTextureS3tcSrgb,
        'COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT',
      );
  static _i2.num get compressedSrgbAlphaS3tcDxt5Ext => _i4.getProperty(
        _declaredWEBGLCompressedTextureS3tcSrgb,
        'COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT',
      );
}

_i2.Object get _declaredWEBGLCompressedTextureS3tcSrgb => _i4.getProperty(
      _self,
      'WEBGL_compressed_texture_s3tc_srgb',
    );

extension WEBGLCompressedTextureS3tcSrgb$Typings
    on WEBGLCompressedTextureS3tcSrgb {
  _i2.num get compressedSrgbS3tcDxt1Ext => _i4.getProperty(
        this,
        'COMPRESSED_SRGB_S3TC_DXT1_EXT',
      );
  _i2.num get compressedSrgbAlphaS3tcDxt1Ext => _i4.getProperty(
        this,
        'COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT',
      );
  _i2.num get compressedSrgbAlphaS3tcDxt3Ext => _i4.getProperty(
        this,
        'COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT',
      );
  _i2.num get compressedSrgbAlphaS3tcDxt5Ext => _i4.getProperty(
        this,
        'COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT',
      );
}

/* Source:  */
/// The WEBGL_debug_renderer_info extension is part of the WebGL API and exposes two constants with information about the graphics driver for debugging purposes.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_debug_renderer_info)
@_i1.JS('WEBGL_debug_renderer_info')
@_i1.staticInterop
@_i1.anonymous
class WEBGLDebugRendererInfo {
  external factory WEBGLDebugRendererInfo._({
    _i2.dynamic unmaskedVendorWebgl,
    _i2.dynamic unmaskedRendererWebgl,
  });

  factory WEBGLDebugRendererInfo({
    _i2.num? unmaskedVendorWebgl,
    _i2.num? unmaskedRendererWebgl,
  }) =>
      WEBGLDebugRendererInfo._(
        unmaskedVendorWebgl: unmaskedVendorWebgl,
        unmaskedRendererWebgl: unmaskedRendererWebgl,
      );

  static _i2.num get unmaskedVendorWebgl => _i4.getProperty(
        _declaredWEBGLDebugRendererInfo,
        'UNMASKED_VENDOR_WEBGL',
      );
  static _i2.num get unmaskedRendererWebgl => _i4.getProperty(
        _declaredWEBGLDebugRendererInfo,
        'UNMASKED_RENDERER_WEBGL',
      );
}

_i2.Object get _declaredWEBGLDebugRendererInfo => _i4.getProperty(
      _self,
      'WEBGL_debug_renderer_info',
    );

extension WEBGLDebugRendererInfo$Typings on WEBGLDebugRendererInfo {
  _i2.num get unmaskedVendorWebgl => _i4.getProperty(
        this,
        'UNMASKED_VENDOR_WEBGL',
      );
  _i2.num get unmaskedRendererWebgl => _i4.getProperty(
        this,
        'UNMASKED_RENDERER_WEBGL',
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_debug_shaders)
@_i1.JS('WEBGL_debug_shaders')
@_i1.staticInterop
@_i1.anonymous
class WEBGLDebugShaders {
  external factory WEBGLDebugShaders._({_i2.dynamic getTranslatedShaderSource});

  factory WEBGLDebugShaders(
          {_i2.String Function(_i3.WebGLShader)? getTranslatedShaderSource}) =>
      WEBGLDebugShaders._(
          getTranslatedShaderSource: getTranslatedShaderSource == null
              ? null
              : _i4.allowInterop(getTranslatedShaderSource));
}

extension WEBGLDebugShaders$Typings on WEBGLDebugShaders {
  set getTranslatedShaderSource(_i2.String Function(_i3.WebGLShader) value) {
    _i4.setProperty(
      this,
      'getTranslatedShaderSource',
      _i4.allowInterop(value),
    );
  }

  _i2.String Function(_i3.WebGLShader) get getTranslatedShaderSource =>
      (_i3.WebGLShader p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'getTranslatedShaderSource',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
}

/* Source:  */
/// The WEBGL_depth_texture extension is part of the WebGL API and defines 2D depth and depth-stencil textures.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_depth_texture)
@_i1.JS('WEBGL_depth_texture')
@_i1.staticInterop
@_i1.anonymous
class WEBGLDepthTexture {
  external factory WEBGLDepthTexture._({_i2.dynamic unsignedInt248Webgl});

  factory WEBGLDepthTexture({_i2.num? unsignedInt248Webgl}) =>
      WEBGLDepthTexture._(unsignedInt248Webgl: unsignedInt248Webgl);

  static _i2.num get unsignedInt248Webgl => _i4.getProperty(
        _declaredWEBGLDepthTexture,
        'UNSIGNED_INT_24_8_WEBGL',
      );
}

_i2.Object get _declaredWEBGLDepthTexture => _i4.getProperty(
      _self,
      'WEBGL_depth_texture',
    );

extension WEBGLDepthTexture$Typings on WEBGLDepthTexture {
  _i2.num get unsignedInt248Webgl => _i4.getProperty(
        this,
        'UNSIGNED_INT_24_8_WEBGL',
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_draw_buffers)
@_i1.JS('WEBGL_draw_buffers')
@_i1.staticInterop
@_i1.anonymous
class WEBGLDrawBuffers {
  external factory WEBGLDrawBuffers._({
    _i2.dynamic colorAttachment0Webgl,
    _i2.dynamic colorAttachment1Webgl,
    _i2.dynamic colorAttachment2Webgl,
    _i2.dynamic colorAttachment3Webgl,
    _i2.dynamic colorAttachment4Webgl,
    _i2.dynamic colorAttachment5Webgl,
    _i2.dynamic colorAttachment6Webgl,
    _i2.dynamic colorAttachment7Webgl,
    _i2.dynamic colorAttachment8Webgl,
    _i2.dynamic colorAttachment9Webgl,
    _i2.dynamic colorAttachment10Webgl,
    _i2.dynamic colorAttachment11Webgl,
    _i2.dynamic colorAttachment12Webgl,
    _i2.dynamic colorAttachment13Webgl,
    _i2.dynamic colorAttachment14Webgl,
    _i2.dynamic colorAttachment15Webgl,
    _i2.dynamic drawBuffer0Webgl,
    _i2.dynamic drawBuffer1Webgl,
    _i2.dynamic drawBuffer2Webgl,
    _i2.dynamic drawBuffer3Webgl,
    _i2.dynamic drawBuffer4Webgl,
    _i2.dynamic drawBuffer5Webgl,
    _i2.dynamic drawBuffer6Webgl,
    _i2.dynamic drawBuffer7Webgl,
    _i2.dynamic drawBuffer8Webgl,
    _i2.dynamic drawBuffer9Webgl,
    _i2.dynamic drawBuffer10Webgl,
    _i2.dynamic drawBuffer11Webgl,
    _i2.dynamic drawBuffer12Webgl,
    _i2.dynamic drawBuffer13Webgl,
    _i2.dynamic drawBuffer14Webgl,
    _i2.dynamic drawBuffer15Webgl,
    _i2.dynamic maxColorAttachmentsWebgl,
    _i2.dynamic maxDrawBuffersWebgl,
  });

  factory WEBGLDrawBuffers({
    _i2.num? colorAttachment0Webgl,
    _i2.num? colorAttachment1Webgl,
    _i2.num? colorAttachment2Webgl,
    _i2.num? colorAttachment3Webgl,
    _i2.num? colorAttachment4Webgl,
    _i2.num? colorAttachment5Webgl,
    _i2.num? colorAttachment6Webgl,
    _i2.num? colorAttachment7Webgl,
    _i2.num? colorAttachment8Webgl,
    _i2.num? colorAttachment9Webgl,
    _i2.num? colorAttachment10Webgl,
    _i2.num? colorAttachment11Webgl,
    _i2.num? colorAttachment12Webgl,
    _i2.num? colorAttachment13Webgl,
    _i2.num? colorAttachment14Webgl,
    _i2.num? colorAttachment15Webgl,
    _i2.num? drawBuffer0Webgl,
    _i2.num? drawBuffer1Webgl,
    _i2.num? drawBuffer2Webgl,
    _i2.num? drawBuffer3Webgl,
    _i2.num? drawBuffer4Webgl,
    _i2.num? drawBuffer5Webgl,
    _i2.num? drawBuffer6Webgl,
    _i2.num? drawBuffer7Webgl,
    _i2.num? drawBuffer8Webgl,
    _i2.num? drawBuffer9Webgl,
    _i2.num? drawBuffer10Webgl,
    _i2.num? drawBuffer11Webgl,
    _i2.num? drawBuffer12Webgl,
    _i2.num? drawBuffer13Webgl,
    _i2.num? drawBuffer14Webgl,
    _i2.num? drawBuffer15Webgl,
    _i2.num? maxColorAttachmentsWebgl,
    _i2.num? maxDrawBuffersWebgl,
  }) =>
      WEBGLDrawBuffers._(
        colorAttachment0Webgl: colorAttachment0Webgl,
        colorAttachment1Webgl: colorAttachment1Webgl,
        colorAttachment2Webgl: colorAttachment2Webgl,
        colorAttachment3Webgl: colorAttachment3Webgl,
        colorAttachment4Webgl: colorAttachment4Webgl,
        colorAttachment5Webgl: colorAttachment5Webgl,
        colorAttachment6Webgl: colorAttachment6Webgl,
        colorAttachment7Webgl: colorAttachment7Webgl,
        colorAttachment8Webgl: colorAttachment8Webgl,
        colorAttachment9Webgl: colorAttachment9Webgl,
        colorAttachment10Webgl: colorAttachment10Webgl,
        colorAttachment11Webgl: colorAttachment11Webgl,
        colorAttachment12Webgl: colorAttachment12Webgl,
        colorAttachment13Webgl: colorAttachment13Webgl,
        colorAttachment14Webgl: colorAttachment14Webgl,
        colorAttachment15Webgl: colorAttachment15Webgl,
        drawBuffer0Webgl: drawBuffer0Webgl,
        drawBuffer1Webgl: drawBuffer1Webgl,
        drawBuffer2Webgl: drawBuffer2Webgl,
        drawBuffer3Webgl: drawBuffer3Webgl,
        drawBuffer4Webgl: drawBuffer4Webgl,
        drawBuffer5Webgl: drawBuffer5Webgl,
        drawBuffer6Webgl: drawBuffer6Webgl,
        drawBuffer7Webgl: drawBuffer7Webgl,
        drawBuffer8Webgl: drawBuffer8Webgl,
        drawBuffer9Webgl: drawBuffer9Webgl,
        drawBuffer10Webgl: drawBuffer10Webgl,
        drawBuffer11Webgl: drawBuffer11Webgl,
        drawBuffer12Webgl: drawBuffer12Webgl,
        drawBuffer13Webgl: drawBuffer13Webgl,
        drawBuffer14Webgl: drawBuffer14Webgl,
        drawBuffer15Webgl: drawBuffer15Webgl,
        maxColorAttachmentsWebgl: maxColorAttachmentsWebgl,
        maxDrawBuffersWebgl: maxDrawBuffersWebgl,
      );

  static _i2.num get colorAttachment0Webgl => _i4.getProperty(
        _declaredWEBGLDrawBuffers,
        'COLOR_ATTACHMENT0_WEBGL',
      );
  static _i2.num get colorAttachment1Webgl => _i4.getProperty(
        _declaredWEBGLDrawBuffers,
        'COLOR_ATTACHMENT1_WEBGL',
      );
  static _i2.num get colorAttachment2Webgl => _i4.getProperty(
        _declaredWEBGLDrawBuffers,
        'COLOR_ATTACHMENT2_WEBGL',
      );
  static _i2.num get colorAttachment3Webgl => _i4.getProperty(
        _declaredWEBGLDrawBuffers,
        'COLOR_ATTACHMENT3_WEBGL',
      );
  static _i2.num get colorAttachment4Webgl => _i4.getProperty(
        _declaredWEBGLDrawBuffers,
        'COLOR_ATTACHMENT4_WEBGL',
      );
  static _i2.num get colorAttachment5Webgl => _i4.getProperty(
        _declaredWEBGLDrawBuffers,
        'COLOR_ATTACHMENT5_WEBGL',
      );
  static _i2.num get colorAttachment6Webgl => _i4.getProperty(
        _declaredWEBGLDrawBuffers,
        'COLOR_ATTACHMENT6_WEBGL',
      );
  static _i2.num get colorAttachment7Webgl => _i4.getProperty(
        _declaredWEBGLDrawBuffers,
        'COLOR_ATTACHMENT7_WEBGL',
      );
  static _i2.num get colorAttachment8Webgl => _i4.getProperty(
        _declaredWEBGLDrawBuffers,
        'COLOR_ATTACHMENT8_WEBGL',
      );
  static _i2.num get colorAttachment9Webgl => _i4.getProperty(
        _declaredWEBGLDrawBuffers,
        'COLOR_ATTACHMENT9_WEBGL',
      );
  static _i2.num get colorAttachment10Webgl => _i4.getProperty(
        _declaredWEBGLDrawBuffers,
        'COLOR_ATTACHMENT10_WEBGL',
      );
  static _i2.num get colorAttachment11Webgl => _i4.getProperty(
        _declaredWEBGLDrawBuffers,
        'COLOR_ATTACHMENT11_WEBGL',
      );
  static _i2.num get colorAttachment12Webgl => _i4.getProperty(
        _declaredWEBGLDrawBuffers,
        'COLOR_ATTACHMENT12_WEBGL',
      );
  static _i2.num get colorAttachment13Webgl => _i4.getProperty(
        _declaredWEBGLDrawBuffers,
        'COLOR_ATTACHMENT13_WEBGL',
      );
  static _i2.num get colorAttachment14Webgl => _i4.getProperty(
        _declaredWEBGLDrawBuffers,
        'COLOR_ATTACHMENT14_WEBGL',
      );
  static _i2.num get colorAttachment15Webgl => _i4.getProperty(
        _declaredWEBGLDrawBuffers,
        'COLOR_ATTACHMENT15_WEBGL',
      );
  static _i2.num get drawBuffer0Webgl => _i4.getProperty(
        _declaredWEBGLDrawBuffers,
        'DRAW_BUFFER0_WEBGL',
      );
  static _i2.num get drawBuffer1Webgl => _i4.getProperty(
        _declaredWEBGLDrawBuffers,
        'DRAW_BUFFER1_WEBGL',
      );
  static _i2.num get drawBuffer2Webgl => _i4.getProperty(
        _declaredWEBGLDrawBuffers,
        'DRAW_BUFFER2_WEBGL',
      );
  static _i2.num get drawBuffer3Webgl => _i4.getProperty(
        _declaredWEBGLDrawBuffers,
        'DRAW_BUFFER3_WEBGL',
      );
  static _i2.num get drawBuffer4Webgl => _i4.getProperty(
        _declaredWEBGLDrawBuffers,
        'DRAW_BUFFER4_WEBGL',
      );
  static _i2.num get drawBuffer5Webgl => _i4.getProperty(
        _declaredWEBGLDrawBuffers,
        'DRAW_BUFFER5_WEBGL',
      );
  static _i2.num get drawBuffer6Webgl => _i4.getProperty(
        _declaredWEBGLDrawBuffers,
        'DRAW_BUFFER6_WEBGL',
      );
  static _i2.num get drawBuffer7Webgl => _i4.getProperty(
        _declaredWEBGLDrawBuffers,
        'DRAW_BUFFER7_WEBGL',
      );
  static _i2.num get drawBuffer8Webgl => _i4.getProperty(
        _declaredWEBGLDrawBuffers,
        'DRAW_BUFFER8_WEBGL',
      );
  static _i2.num get drawBuffer9Webgl => _i4.getProperty(
        _declaredWEBGLDrawBuffers,
        'DRAW_BUFFER9_WEBGL',
      );
  static _i2.num get drawBuffer10Webgl => _i4.getProperty(
        _declaredWEBGLDrawBuffers,
        'DRAW_BUFFER10_WEBGL',
      );
  static _i2.num get drawBuffer11Webgl => _i4.getProperty(
        _declaredWEBGLDrawBuffers,
        'DRAW_BUFFER11_WEBGL',
      );
  static _i2.num get drawBuffer12Webgl => _i4.getProperty(
        _declaredWEBGLDrawBuffers,
        'DRAW_BUFFER12_WEBGL',
      );
  static _i2.num get drawBuffer13Webgl => _i4.getProperty(
        _declaredWEBGLDrawBuffers,
        'DRAW_BUFFER13_WEBGL',
      );
  static _i2.num get drawBuffer14Webgl => _i4.getProperty(
        _declaredWEBGLDrawBuffers,
        'DRAW_BUFFER14_WEBGL',
      );
  static _i2.num get drawBuffer15Webgl => _i4.getProperty(
        _declaredWEBGLDrawBuffers,
        'DRAW_BUFFER15_WEBGL',
      );
  static _i2.num get maxColorAttachmentsWebgl => _i4.getProperty(
        _declaredWEBGLDrawBuffers,
        'MAX_COLOR_ATTACHMENTS_WEBGL',
      );
  static _i2.num get maxDrawBuffersWebgl => _i4.getProperty(
        _declaredWEBGLDrawBuffers,
        'MAX_DRAW_BUFFERS_WEBGL',
      );
}

_i2.Object get _declaredWEBGLDrawBuffers => _i4.getProperty(
      _self,
      'WEBGL_draw_buffers',
    );

extension WEBGLDrawBuffers$Typings on WEBGLDrawBuffers {
  _i2.num get colorAttachment0Webgl => _i4.getProperty(
        this,
        'COLOR_ATTACHMENT0_WEBGL',
      );
  _i2.num get colorAttachment1Webgl => _i4.getProperty(
        this,
        'COLOR_ATTACHMENT1_WEBGL',
      );
  _i2.num get colorAttachment2Webgl => _i4.getProperty(
        this,
        'COLOR_ATTACHMENT2_WEBGL',
      );
  _i2.num get colorAttachment3Webgl => _i4.getProperty(
        this,
        'COLOR_ATTACHMENT3_WEBGL',
      );
  _i2.num get colorAttachment4Webgl => _i4.getProperty(
        this,
        'COLOR_ATTACHMENT4_WEBGL',
      );
  _i2.num get colorAttachment5Webgl => _i4.getProperty(
        this,
        'COLOR_ATTACHMENT5_WEBGL',
      );
  _i2.num get colorAttachment6Webgl => _i4.getProperty(
        this,
        'COLOR_ATTACHMENT6_WEBGL',
      );
  _i2.num get colorAttachment7Webgl => _i4.getProperty(
        this,
        'COLOR_ATTACHMENT7_WEBGL',
      );
  _i2.num get colorAttachment8Webgl => _i4.getProperty(
        this,
        'COLOR_ATTACHMENT8_WEBGL',
      );
  _i2.num get colorAttachment9Webgl => _i4.getProperty(
        this,
        'COLOR_ATTACHMENT9_WEBGL',
      );
  _i2.num get colorAttachment10Webgl => _i4.getProperty(
        this,
        'COLOR_ATTACHMENT10_WEBGL',
      );
  _i2.num get colorAttachment11Webgl => _i4.getProperty(
        this,
        'COLOR_ATTACHMENT11_WEBGL',
      );
  _i2.num get colorAttachment12Webgl => _i4.getProperty(
        this,
        'COLOR_ATTACHMENT12_WEBGL',
      );
  _i2.num get colorAttachment13Webgl => _i4.getProperty(
        this,
        'COLOR_ATTACHMENT13_WEBGL',
      );
  _i2.num get colorAttachment14Webgl => _i4.getProperty(
        this,
        'COLOR_ATTACHMENT14_WEBGL',
      );
  _i2.num get colorAttachment15Webgl => _i4.getProperty(
        this,
        'COLOR_ATTACHMENT15_WEBGL',
      );
  _i2.num get drawBuffer0Webgl => _i4.getProperty(
        this,
        'DRAW_BUFFER0_WEBGL',
      );
  _i2.num get drawBuffer1Webgl => _i4.getProperty(
        this,
        'DRAW_BUFFER1_WEBGL',
      );
  _i2.num get drawBuffer2Webgl => _i4.getProperty(
        this,
        'DRAW_BUFFER2_WEBGL',
      );
  _i2.num get drawBuffer3Webgl => _i4.getProperty(
        this,
        'DRAW_BUFFER3_WEBGL',
      );
  _i2.num get drawBuffer4Webgl => _i4.getProperty(
        this,
        'DRAW_BUFFER4_WEBGL',
      );
  _i2.num get drawBuffer5Webgl => _i4.getProperty(
        this,
        'DRAW_BUFFER5_WEBGL',
      );
  _i2.num get drawBuffer6Webgl => _i4.getProperty(
        this,
        'DRAW_BUFFER6_WEBGL',
      );
  _i2.num get drawBuffer7Webgl => _i4.getProperty(
        this,
        'DRAW_BUFFER7_WEBGL',
      );
  _i2.num get drawBuffer8Webgl => _i4.getProperty(
        this,
        'DRAW_BUFFER8_WEBGL',
      );
  _i2.num get drawBuffer9Webgl => _i4.getProperty(
        this,
        'DRAW_BUFFER9_WEBGL',
      );
  _i2.num get drawBuffer10Webgl => _i4.getProperty(
        this,
        'DRAW_BUFFER10_WEBGL',
      );
  _i2.num get drawBuffer11Webgl => _i4.getProperty(
        this,
        'DRAW_BUFFER11_WEBGL',
      );
  _i2.num get drawBuffer12Webgl => _i4.getProperty(
        this,
        'DRAW_BUFFER12_WEBGL',
      );
  _i2.num get drawBuffer13Webgl => _i4.getProperty(
        this,
        'DRAW_BUFFER13_WEBGL',
      );
  _i2.num get drawBuffer14Webgl => _i4.getProperty(
        this,
        'DRAW_BUFFER14_WEBGL',
      );
  _i2.num get drawBuffer15Webgl => _i4.getProperty(
        this,
        'DRAW_BUFFER15_WEBGL',
      );
  _i2.num get maxColorAttachmentsWebgl => _i4.getProperty(
        this,
        'MAX_COLOR_ATTACHMENTS_WEBGL',
      );
  _i2.num get maxDrawBuffersWebgl => _i4.getProperty(
        this,
        'MAX_DRAW_BUFFERS_WEBGL',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_draw_buffers/drawBuffersWEBGL)
  void _drawBuffersWEBGL$1(_i2.List<_i2.num> buffers) {
    _i4.callMethod(
      this,
      'drawBuffersWEBGL',
      [buffers],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_draw_buffers/drawBuffersWEBGL)
  void _drawBuffersWEBGL$2(_i10.Iterable<_i2.num> buffers) {
    _i4.callMethod(
      this,
      'drawBuffersWEBGL',
      [buffers],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_draw_buffers/drawBuffersWEBGL)
    void Function(_i2.List<_i2.num> buffers) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_draw_buffers/drawBuffersWEBGL)
    void Function(_i10.Iterable<_i2.num> buffers) $2,
  }) get drawBuffersWEBGL => (
        $1: _drawBuffersWEBGL$1,
        $2: _drawBuffersWEBGL$2,
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_lose_context)
@_i1.JS('WEBGL_lose_context')
@_i1.staticInterop
@_i1.anonymous
class WEBGLLoseContext {
  external factory WEBGLLoseContext._({
    _i2.dynamic loseContext,
    _i2.dynamic restoreContext,
  });

  factory WEBGLLoseContext({
    void Function()? loseContext,
    void Function()? restoreContext,
  }) =>
      WEBGLLoseContext._(
        loseContext: loseContext == null ? null : _i4.allowInterop(loseContext),
        restoreContext:
            restoreContext == null ? null : _i4.allowInterop(restoreContext),
      );
}

extension WEBGLLoseContext$Typings on WEBGLLoseContext {
  set loseContext(void Function() value) {
    _i4.setProperty(
      this,
      'loseContext',
      _i4.allowInterop(value),
    );
  }

  void Function() get loseContext => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'loseContext',
        ),
        r'call',
        [this],
      );
  set restoreContext(void Function() value) {
    _i4.setProperty(
      this,
      'restoreContext',
      _i4.allowInterop(value),
    );
  }

  void Function() get restoreContext => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'restoreContext',
        ),
        r'call',
        [this],
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw)
@_i1.JS('WEBGL_multi_draw')
@_i1.staticInterop
@_i1.anonymous
class WEBGLMultiDraw {
  external factory WEBGLMultiDraw._();

  factory WEBGLMultiDraw() => WEBGLMultiDraw._();
}

extension WEBGLMultiDraw$Typings on WEBGLMultiDraw {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw/multiDrawArraysInstancedWEBGL)
  void _multiDrawArraysInstancedWEBGL$1(
    _i2.num mode,
    _i2.Object firstsList,
    _i2.num firstsOffset,
    _i2.Object countsList,
    _i2.num countsOffset,
    _i2.Object instanceCountsList,
    _i2.num instanceCountsOffset,
    _i2.num drawcount,
  ) {
    _i4.callMethod(
      this,
      'multiDrawArraysInstancedWEBGL',
      [
        mode,
        firstsList,
        firstsOffset,
        countsList,
        countsOffset,
        instanceCountsList,
        instanceCountsOffset,
        drawcount,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw/multiDrawArraysInstancedWEBGL)
  void _multiDrawArraysInstancedWEBGL$2(
    _i2.num mode,
    _i2.Object firstsList,
    _i2.num firstsOffset,
    _i2.Object countsList,
    _i2.num countsOffset,
    _i2.Object instanceCountsList,
    _i2.num instanceCountsOffset,
    _i2.num drawcount,
  ) {
    _i4.callMethod(
      this,
      'multiDrawArraysInstancedWEBGL',
      [
        mode,
        firstsList,
        firstsOffset,
        countsList,
        countsOffset,
        instanceCountsList,
        instanceCountsOffset,
        drawcount,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw/multiDrawArraysInstancedWEBGL)
    void Function(
      _i2.num mode,
      _i2.Object firstsList,
      _i2.num firstsOffset,
      _i2.Object countsList,
      _i2.num countsOffset,
      _i2.Object instanceCountsList,
      _i2.num instanceCountsOffset,
      _i2.num drawcount,
    ) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw/multiDrawArraysInstancedWEBGL)
    void Function(
      _i2.num mode,
      _i2.Object firstsList,
      _i2.num firstsOffset,
      _i2.Object countsList,
      _i2.num countsOffset,
      _i2.Object instanceCountsList,
      _i2.num instanceCountsOffset,
      _i2.num drawcount,
    ) $2,
  }) get multiDrawArraysInstancedWEBGL => (
        $1: _multiDrawArraysInstancedWEBGL$1,
        $2: _multiDrawArraysInstancedWEBGL$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw/multiDrawArraysWEBGL)
  void _multiDrawArraysWEBGL$1(
    _i2.num mode,
    _i2.Object firstsList,
    _i2.num firstsOffset,
    _i2.Object countsList,
    _i2.num countsOffset,
    _i2.num drawcount,
  ) {
    _i4.callMethod(
      this,
      'multiDrawArraysWEBGL',
      [
        mode,
        firstsList,
        firstsOffset,
        countsList,
        countsOffset,
        drawcount,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw/multiDrawArraysWEBGL)
  void _multiDrawArraysWEBGL$2(
    _i2.num mode,
    _i2.Object firstsList,
    _i2.num firstsOffset,
    _i2.Object countsList,
    _i2.num countsOffset,
    _i2.num drawcount,
  ) {
    _i4.callMethod(
      this,
      'multiDrawArraysWEBGL',
      [
        mode,
        firstsList,
        firstsOffset,
        countsList,
        countsOffset,
        drawcount,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw/multiDrawArraysWEBGL)
    void Function(
      _i2.num mode,
      _i2.Object firstsList,
      _i2.num firstsOffset,
      _i2.Object countsList,
      _i2.num countsOffset,
      _i2.num drawcount,
    ) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw/multiDrawArraysWEBGL)
    void Function(
      _i2.num mode,
      _i2.Object firstsList,
      _i2.num firstsOffset,
      _i2.Object countsList,
      _i2.num countsOffset,
      _i2.num drawcount,
    ) $2,
  }) get multiDrawArraysWEBGL => (
        $1: _multiDrawArraysWEBGL$1,
        $2: _multiDrawArraysWEBGL$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw/multiDrawElementsInstancedWEBGL)
  void _multiDrawElementsInstancedWEBGL$1(
    _i2.num mode,
    _i2.Object countsList,
    _i2.num countsOffset,
    _i2.num type,
    _i2.Object offsetsList,
    _i2.num offsetsOffset,
    _i2.Object instanceCountsList,
    _i2.num instanceCountsOffset,
    _i2.num drawcount,
  ) {
    _i4.callMethod(
      this,
      'multiDrawElementsInstancedWEBGL',
      [
        mode,
        countsList,
        countsOffset,
        type,
        offsetsList,
        offsetsOffset,
        instanceCountsList,
        instanceCountsOffset,
        drawcount,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw/multiDrawElementsInstancedWEBGL)
  void _multiDrawElementsInstancedWEBGL$2(
    _i2.num mode,
    _i2.Object countsList,
    _i2.num countsOffset,
    _i2.num type,
    _i2.Object offsetsList,
    _i2.num offsetsOffset,
    _i2.Object instanceCountsList,
    _i2.num instanceCountsOffset,
    _i2.num drawcount,
  ) {
    _i4.callMethod(
      this,
      'multiDrawElementsInstancedWEBGL',
      [
        mode,
        countsList,
        countsOffset,
        type,
        offsetsList,
        offsetsOffset,
        instanceCountsList,
        instanceCountsOffset,
        drawcount,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw/multiDrawElementsInstancedWEBGL)
    void Function(
      _i2.num mode,
      _i2.Object countsList,
      _i2.num countsOffset,
      _i2.num type,
      _i2.Object offsetsList,
      _i2.num offsetsOffset,
      _i2.Object instanceCountsList,
      _i2.num instanceCountsOffset,
      _i2.num drawcount,
    ) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw/multiDrawElementsInstancedWEBGL)
    void Function(
      _i2.num mode,
      _i2.Object countsList,
      _i2.num countsOffset,
      _i2.num type,
      _i2.Object offsetsList,
      _i2.num offsetsOffset,
      _i2.Object instanceCountsList,
      _i2.num instanceCountsOffset,
      _i2.num drawcount,
    ) $2,
  }) get multiDrawElementsInstancedWEBGL => (
        $1: _multiDrawElementsInstancedWEBGL$1,
        $2: _multiDrawElementsInstancedWEBGL$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw/multiDrawElementsWEBGL)
  void _multiDrawElementsWEBGL$1(
    _i2.num mode,
    _i2.Object countsList,
    _i2.num countsOffset,
    _i2.num type,
    _i2.Object offsetsList,
    _i2.num offsetsOffset,
    _i2.num drawcount,
  ) {
    _i4.callMethod(
      this,
      'multiDrawElementsWEBGL',
      [
        mode,
        countsList,
        countsOffset,
        type,
        offsetsList,
        offsetsOffset,
        drawcount,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw/multiDrawElementsWEBGL)
  void _multiDrawElementsWEBGL$2(
    _i2.num mode,
    _i2.Object countsList,
    _i2.num countsOffset,
    _i2.num type,
    _i2.Object offsetsList,
    _i2.num offsetsOffset,
    _i2.num drawcount,
  ) {
    _i4.callMethod(
      this,
      'multiDrawElementsWEBGL',
      [
        mode,
        countsList,
        countsOffset,
        type,
        offsetsList,
        offsetsOffset,
        drawcount,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw/multiDrawElementsWEBGL)
    void Function(
      _i2.num mode,
      _i2.Object countsList,
      _i2.num countsOffset,
      _i2.num type,
      _i2.Object offsetsList,
      _i2.num offsetsOffset,
      _i2.num drawcount,
    ) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw/multiDrawElementsWEBGL)
    void Function(
      _i2.num mode,
      _i2.Object countsList,
      _i2.num countsOffset,
      _i2.num type,
      _i2.Object offsetsList,
      _i2.num offsetsOffset,
      _i2.num drawcount,
    ) $2,
  }) get multiDrawElementsWEBGL => (
        $1: _multiDrawElementsWEBGL$1,
        $2: _multiDrawElementsWEBGL$2,
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext)
@_i1.JS()
@_i1.staticInterop
class WebGL2RenderingContext
    implements
        _i3.WebGL2RenderingContextBase,
        _i3.WebGL2RenderingContextOverloads,
        _i3.WebGLRenderingContextBase {
  factory WebGL2RenderingContext() => _i4.callConstructor(
        _declaredWebGL2RenderingContext,
        [],
      );

  static _i2.num get readBuffer => _i4.getProperty(
        _i8.target801,
        'READ_BUFFER',
      );
  static _i2.num get unpackRowLength => _i4.getProperty(
        _i8.target801,
        'UNPACK_ROW_LENGTH',
      );
  static _i2.num get unpackSkipRows => _i4.getProperty(
        _i8.target801,
        'UNPACK_SKIP_ROWS',
      );
  static _i2.num get unpackSkipPixels => _i4.getProperty(
        _i8.target801,
        'UNPACK_SKIP_PIXELS',
      );
  static _i2.num get packRowLength => _i4.getProperty(
        _i8.target801,
        'PACK_ROW_LENGTH',
      );
  static _i2.num get packSkipRows => _i4.getProperty(
        _i8.target801,
        'PACK_SKIP_ROWS',
      );
  static _i2.num get packSkipPixels => _i4.getProperty(
        _i8.target801,
        'PACK_SKIP_PIXELS',
      );
  static _i2.num get color => _i4.getProperty(
        _i8.target801,
        'COLOR',
      );
  static _i2.num get depth => _i4.getProperty(
        _i8.target801,
        'DEPTH',
      );
  static _i2.num get stencil => _i4.getProperty(
        _i8.target801,
        'STENCIL',
      );
  static _i2.num get red => _i4.getProperty(
        _i8.target801,
        'RED',
      );
  static _i2.num get rgb8 => _i4.getProperty(
        _i8.target801,
        'RGB8',
      );
  static _i2.num get rgba8 => _i4.getProperty(
        _i8.target801,
        'RGBA8',
      );
  static _i2.num get rgb10A2 => _i4.getProperty(
        _i8.target801,
        'RGB10_A2',
      );
  static _i2.num get textureBinding3d => _i4.getProperty(
        _i8.target801,
        'TEXTURE_BINDING_3D',
      );
  static _i2.num get unpackSkipImages => _i4.getProperty(
        _i8.target801,
        'UNPACK_SKIP_IMAGES',
      );
  static _i2.num get unpackImageHeight => _i4.getProperty(
        _i8.target801,
        'UNPACK_IMAGE_HEIGHT',
      );
  static _i2.num get texture3d => _i4.getProperty(
        _i8.target801,
        'TEXTURE_3D',
      );
  static _i2.num get textureWrapR => _i4.getProperty(
        _i8.target801,
        'TEXTURE_WRAP_R',
      );
  static _i2.num get max3dTextureSize => _i4.getProperty(
        _i8.target801,
        'MAX_3D_TEXTURE_SIZE',
      );
  static _i2.num get unsignedInt2101010Rev => _i4.getProperty(
        _i8.target801,
        'UNSIGNED_INT_2_10_10_10_REV',
      );
  static _i2.num get maxElementsVertices => _i4.getProperty(
        _i8.target801,
        'MAX_ELEMENTS_VERTICES',
      );
  static _i2.num get maxElementsIndices => _i4.getProperty(
        _i8.target801,
        'MAX_ELEMENTS_INDICES',
      );
  static _i2.num get textureMinLod => _i4.getProperty(
        _i8.target801,
        'TEXTURE_MIN_LOD',
      );
  static _i2.num get textureMaxLod => _i4.getProperty(
        _i8.target801,
        'TEXTURE_MAX_LOD',
      );
  static _i2.num get textureBaseLevel => _i4.getProperty(
        _i8.target801,
        'TEXTURE_BASE_LEVEL',
      );
  static _i2.num get textureMaxLevel => _i4.getProperty(
        _i8.target801,
        'TEXTURE_MAX_LEVEL',
      );
  static _i2.num get min => _i4.getProperty(
        _i8.target801,
        'MIN',
      );
  static _i2.num get max => _i4.getProperty(
        _i8.target801,
        'MAX',
      );
  static _i2.num get depthComponent24 => _i4.getProperty(
        _i8.target801,
        'DEPTH_COMPONENT24',
      );
  static _i2.num get maxTextureLodBias => _i4.getProperty(
        _i8.target801,
        'MAX_TEXTURE_LOD_BIAS',
      );
  static _i2.num get textureCompareMode => _i4.getProperty(
        _i8.target801,
        'TEXTURE_COMPARE_MODE',
      );
  static _i2.num get textureCompareFunc => _i4.getProperty(
        _i8.target801,
        'TEXTURE_COMPARE_FUNC',
      );
  static _i2.num get currentQuery => _i4.getProperty(
        _i8.target801,
        'CURRENT_QUERY',
      );
  static _i2.num get queryResult => _i4.getProperty(
        _i8.target801,
        'QUERY_RESULT',
      );
  static _i2.num get queryResultAvailable => _i4.getProperty(
        _i8.target801,
        'QUERY_RESULT_AVAILABLE',
      );
  static _i2.num get streamRead => _i4.getProperty(
        _i8.target801,
        'STREAM_READ',
      );
  static _i2.num get streamCopy => _i4.getProperty(
        _i8.target801,
        'STREAM_COPY',
      );
  static _i2.num get staticRead => _i4.getProperty(
        _i8.target801,
        'STATIC_READ',
      );
  static _i2.num get staticCopy => _i4.getProperty(
        _i8.target801,
        'STATIC_COPY',
      );
  static _i2.num get dynamicRead => _i4.getProperty(
        _i8.target801,
        'DYNAMIC_READ',
      );
  static _i2.num get dynamicCopy => _i4.getProperty(
        _i8.target801,
        'DYNAMIC_COPY',
      );
  static _i2.num get maxDrawBuffers => _i4.getProperty(
        _i8.target801,
        'MAX_DRAW_BUFFERS',
      );
  static _i2.num get drawBuffer0 => _i4.getProperty(
        _i8.target801,
        'DRAW_BUFFER0',
      );
  static _i2.num get drawBuffer1 => _i4.getProperty(
        _i8.target801,
        'DRAW_BUFFER1',
      );
  static _i2.num get drawBuffer2 => _i4.getProperty(
        _i8.target801,
        'DRAW_BUFFER2',
      );
  static _i2.num get drawBuffer3 => _i4.getProperty(
        _i8.target801,
        'DRAW_BUFFER3',
      );
  static _i2.num get drawBuffer4 => _i4.getProperty(
        _i8.target801,
        'DRAW_BUFFER4',
      );
  static _i2.num get drawBuffer5 => _i4.getProperty(
        _i8.target801,
        'DRAW_BUFFER5',
      );
  static _i2.num get drawBuffer6 => _i4.getProperty(
        _i8.target801,
        'DRAW_BUFFER6',
      );
  static _i2.num get drawBuffer7 => _i4.getProperty(
        _i8.target801,
        'DRAW_BUFFER7',
      );
  static _i2.num get drawBuffer8 => _i4.getProperty(
        _i8.target801,
        'DRAW_BUFFER8',
      );
  static _i2.num get drawBuffer9 => _i4.getProperty(
        _i8.target801,
        'DRAW_BUFFER9',
      );
  static _i2.num get drawBuffer10 => _i4.getProperty(
        _i8.target801,
        'DRAW_BUFFER10',
      );
  static _i2.num get drawBuffer11 => _i4.getProperty(
        _i8.target801,
        'DRAW_BUFFER11',
      );
  static _i2.num get drawBuffer12 => _i4.getProperty(
        _i8.target801,
        'DRAW_BUFFER12',
      );
  static _i2.num get drawBuffer13 => _i4.getProperty(
        _i8.target801,
        'DRAW_BUFFER13',
      );
  static _i2.num get drawBuffer14 => _i4.getProperty(
        _i8.target801,
        'DRAW_BUFFER14',
      );
  static _i2.num get drawBuffer15 => _i4.getProperty(
        _i8.target801,
        'DRAW_BUFFER15',
      );
  static _i2.num get maxFragmentUniformComponents => _i4.getProperty(
        _i8.target801,
        'MAX_FRAGMENT_UNIFORM_COMPONENTS',
      );
  static _i2.num get maxVertexUniformComponents => _i4.getProperty(
        _i8.target801,
        'MAX_VERTEX_UNIFORM_COMPONENTS',
      );
  static _i2.num get sampler3d => _i4.getProperty(
        _i8.target801,
        'SAMPLER_3D',
      );
  static _i2.num get sampler2dShadow => _i4.getProperty(
        _i8.target801,
        'SAMPLER_2D_SHADOW',
      );
  static _i2.num get fragmentShaderDerivativeHint => _i4.getProperty(
        _i8.target801,
        'FRAGMENT_SHADER_DERIVATIVE_HINT',
      );
  static _i2.num get pixelPackBuffer => _i4.getProperty(
        _i8.target801,
        'PIXEL_PACK_BUFFER',
      );
  static _i2.num get pixelUnpackBuffer => _i4.getProperty(
        _i8.target801,
        'PIXEL_UNPACK_BUFFER',
      );
  static _i2.num get pixelPackBufferBinding => _i4.getProperty(
        _i8.target801,
        'PIXEL_PACK_BUFFER_BINDING',
      );
  static _i2.num get pixelUnpackBufferBinding => _i4.getProperty(
        _i8.target801,
        'PIXEL_UNPACK_BUFFER_BINDING',
      );
  static _i2.num get floatmaT2x3 => _i4.getProperty(
        _i8.target801,
        'FLOAT_MAT2x3',
      );
  static _i2.num get floatmaT2x4 => _i4.getProperty(
        _i8.target801,
        'FLOAT_MAT2x4',
      );
  static _i2.num get floatmaT3x2 => _i4.getProperty(
        _i8.target801,
        'FLOAT_MAT3x2',
      );
  static _i2.num get floatmaT3x4 => _i4.getProperty(
        _i8.target801,
        'FLOAT_MAT3x4',
      );
  static _i2.num get floatmaT4x2 => _i4.getProperty(
        _i8.target801,
        'FLOAT_MAT4x2',
      );
  static _i2.num get floatmaT4x3 => _i4.getProperty(
        _i8.target801,
        'FLOAT_MAT4x3',
      );
  static _i2.num get srgb => _i4.getProperty(
        _i8.target801,
        'SRGB',
      );
  static _i2.num get srgb8 => _i4.getProperty(
        _i8.target801,
        'SRGB8',
      );
  static _i2.num get srgb8Alpha8 => _i4.getProperty(
        _i8.target801,
        'SRGB8_ALPHA8',
      );
  static _i2.num get compareRefToTexture => _i4.getProperty(
        _i8.target801,
        'COMPARE_REF_TO_TEXTURE',
      );
  static _i2.num get rgba32f => _i4.getProperty(
        _i8.target801,
        'RGBA32F',
      );
  static _i2.num get rgb32f => _i4.getProperty(
        _i8.target801,
        'RGB32F',
      );
  static _i2.num get rgba16f => _i4.getProperty(
        _i8.target801,
        'RGBA16F',
      );
  static _i2.num get rgb16f => _i4.getProperty(
        _i8.target801,
        'RGB16F',
      );
  static _i2.num get vertexAttribArrayInteger => _i4.getProperty(
        _i8.target801,
        'VERTEX_ATTRIB_ARRAY_INTEGER',
      );
  static _i2.num get maxArrayTextureLayers => _i4.getProperty(
        _i8.target801,
        'MAX_ARRAY_TEXTURE_LAYERS',
      );
  static _i2.num get minProgramTexelOffset => _i4.getProperty(
        _i8.target801,
        'MIN_PROGRAM_TEXEL_OFFSET',
      );
  static _i2.num get maxProgramTexelOffset => _i4.getProperty(
        _i8.target801,
        'MAX_PROGRAM_TEXEL_OFFSET',
      );
  static _i2.num get maxVaryingComponents => _i4.getProperty(
        _i8.target801,
        'MAX_VARYING_COMPONENTS',
      );
  static _i2.num get texture2dArray => _i4.getProperty(
        _i8.target801,
        'TEXTURE_2D_ARRAY',
      );
  static _i2.num get textureBinding2dArray => _i4.getProperty(
        _i8.target801,
        'TEXTURE_BINDING_2D_ARRAY',
      );
  static _i2.num get r11fG11fB10f => _i4.getProperty(
        _i8.target801,
        'R11F_G11F_B10F',
      );
  static _i2.num get unsignedInt10f11f11fRev => _i4.getProperty(
        _i8.target801,
        'UNSIGNED_INT_10F_11F_11F_REV',
      );
  static _i2.num get rgb9E5 => _i4.getProperty(
        _i8.target801,
        'RGB9_E5',
      );
  static _i2.num get unsignedInt5999Rev => _i4.getProperty(
        _i8.target801,
        'UNSIGNED_INT_5_9_9_9_REV',
      );
  static _i2.num get transformFeedbackBufferMode => _i4.getProperty(
        _i8.target801,
        'TRANSFORM_FEEDBACK_BUFFER_MODE',
      );
  static _i2.num get maxTransformFeedbackSeparateComponents => _i4.getProperty(
        _i8.target801,
        'MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS',
      );
  static _i2.num get transformFeedbackVaryings => _i4.getProperty(
        _i8.target801,
        'TRANSFORM_FEEDBACK_VARYINGS',
      );
  static _i2.num get transformFeedbackBufferStart => _i4.getProperty(
        _i8.target801,
        'TRANSFORM_FEEDBACK_BUFFER_START',
      );
  static _i2.num get transformFeedbackBufferSize => _i4.getProperty(
        _i8.target801,
        'TRANSFORM_FEEDBACK_BUFFER_SIZE',
      );
  static _i2.num get transformFeedbackPrimitivesWritten => _i4.getProperty(
        _i8.target801,
        'TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN',
      );
  static _i2.num get rasterizerDiscard => _i4.getProperty(
        _i8.target801,
        'RASTERIZER_DISCARD',
      );
  static _i2.num get maxTransformFeedbackInterleavedComponents =>
      _i4.getProperty(
        _i8.target801,
        'MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS',
      );
  static _i2.num get maxTransformFeedbackSeparateAttribs => _i4.getProperty(
        _i8.target801,
        'MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS',
      );
  static _i2.num get interleavedAttribs => _i4.getProperty(
        _i8.target801,
        'INTERLEAVED_ATTRIBS',
      );
  static _i2.num get separateAttribs => _i4.getProperty(
        _i8.target801,
        'SEPARATE_ATTRIBS',
      );
  static _i2.num get transformFeedbackBuffer => _i4.getProperty(
        _i8.target801,
        'TRANSFORM_FEEDBACK_BUFFER',
      );
  static _i2.num get transformFeedbackBufferBinding => _i4.getProperty(
        _i8.target801,
        'TRANSFORM_FEEDBACK_BUFFER_BINDING',
      );
  static _i2.num get rgba32ui => _i4.getProperty(
        _i8.target801,
        'RGBA32UI',
      );
  static _i2.num get rgb32ui => _i4.getProperty(
        _i8.target801,
        'RGB32UI',
      );
  static _i2.num get rgba16ui => _i4.getProperty(
        _i8.target801,
        'RGBA16UI',
      );
  static _i2.num get rgb16ui => _i4.getProperty(
        _i8.target801,
        'RGB16UI',
      );
  static _i2.num get rgba8ui => _i4.getProperty(
        _i8.target801,
        'RGBA8UI',
      );
  static _i2.num get rgb8ui => _i4.getProperty(
        _i8.target801,
        'RGB8UI',
      );
  static _i2.num get rgba32i => _i4.getProperty(
        _i8.target801,
        'RGBA32I',
      );
  static _i2.num get rgb32i => _i4.getProperty(
        _i8.target801,
        'RGB32I',
      );
  static _i2.num get rgba16i => _i4.getProperty(
        _i8.target801,
        'RGBA16I',
      );
  static _i2.num get rgb16i => _i4.getProperty(
        _i8.target801,
        'RGB16I',
      );
  static _i2.num get rgba8i => _i4.getProperty(
        _i8.target801,
        'RGBA8I',
      );
  static _i2.num get rgb8i => _i4.getProperty(
        _i8.target801,
        'RGB8I',
      );
  static _i2.num get redInteger => _i4.getProperty(
        _i8.target801,
        'RED_INTEGER',
      );
  static _i2.num get rgbInteger => _i4.getProperty(
        _i8.target801,
        'RGB_INTEGER',
      );
  static _i2.num get rgbaInteger => _i4.getProperty(
        _i8.target801,
        'RGBA_INTEGER',
      );
  static _i2.num get sampler2dArray => _i4.getProperty(
        _i8.target801,
        'SAMPLER_2D_ARRAY',
      );
  static _i2.num get sampler2dArrayShadow => _i4.getProperty(
        _i8.target801,
        'SAMPLER_2D_ARRAY_SHADOW',
      );
  static _i2.num get samplerCubeShadow => _i4.getProperty(
        _i8.target801,
        'SAMPLER_CUBE_SHADOW',
      );
  static _i2.num get unsignedIntVec2 => _i4.getProperty(
        _i8.target801,
        'UNSIGNED_INT_VEC2',
      );
  static _i2.num get unsignedIntVec3 => _i4.getProperty(
        _i8.target801,
        'UNSIGNED_INT_VEC3',
      );
  static _i2.num get unsignedIntVec4 => _i4.getProperty(
        _i8.target801,
        'UNSIGNED_INT_VEC4',
      );
  static _i2.num get intSampler2d => _i4.getProperty(
        _i8.target801,
        'INT_SAMPLER_2D',
      );
  static _i2.num get intSampler3d => _i4.getProperty(
        _i8.target801,
        'INT_SAMPLER_3D',
      );
  static _i2.num get intSamplerCube => _i4.getProperty(
        _i8.target801,
        'INT_SAMPLER_CUBE',
      );
  static _i2.num get intSampler2dArray => _i4.getProperty(
        _i8.target801,
        'INT_SAMPLER_2D_ARRAY',
      );
  static _i2.num get unsignedIntSampler2d => _i4.getProperty(
        _i8.target801,
        'UNSIGNED_INT_SAMPLER_2D',
      );
  static _i2.num get unsignedIntSampler3d => _i4.getProperty(
        _i8.target801,
        'UNSIGNED_INT_SAMPLER_3D',
      );
  static _i2.num get unsignedIntSamplerCube => _i4.getProperty(
        _i8.target801,
        'UNSIGNED_INT_SAMPLER_CUBE',
      );
  static _i2.num get unsignedIntSampler2dArray => _i4.getProperty(
        _i8.target801,
        'UNSIGNED_INT_SAMPLER_2D_ARRAY',
      );
  static _i2.num get depthComponent32f => _i4.getProperty(
        _i8.target801,
        'DEPTH_COMPONENT32F',
      );
  static _i2.num get depth32fStencil8 => _i4.getProperty(
        _i8.target801,
        'DEPTH32F_STENCIL8',
      );
  static _i2.num get float32UnsignedInt248Rev => _i4.getProperty(
        _i8.target801,
        'FLOAT_32_UNSIGNED_INT_24_8_REV',
      );
  static _i2.num get framebufferAttachmentColorEncoding => _i4.getProperty(
        _i8.target801,
        'FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING',
      );
  static _i2.num get framebufferAttachmentComponentType => _i4.getProperty(
        _i8.target801,
        'FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE',
      );
  static _i2.num get framebufferAttachmentRedSize => _i4.getProperty(
        _i8.target801,
        'FRAMEBUFFER_ATTACHMENT_RED_SIZE',
      );
  static _i2.num get framebufferAttachmentGreenSize => _i4.getProperty(
        _i8.target801,
        'FRAMEBUFFER_ATTACHMENT_GREEN_SIZE',
      );
  static _i2.num get framebufferAttachmentBlueSize => _i4.getProperty(
        _i8.target801,
        'FRAMEBUFFER_ATTACHMENT_BLUE_SIZE',
      );
  static _i2.num get framebufferAttachmentAlphaSize => _i4.getProperty(
        _i8.target801,
        'FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE',
      );
  static _i2.num get framebufferAttachmentDepthSize => _i4.getProperty(
        _i8.target801,
        'FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE',
      );
  static _i2.num get framebufferAttachmentStencilSize => _i4.getProperty(
        _i8.target801,
        'FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE',
      );
  static _i2.num get framebufferDefault => _i4.getProperty(
        _i8.target801,
        'FRAMEBUFFER_DEFAULT',
      );
  static _i2.num get unsignedInt248 => _i4.getProperty(
        _i8.target801,
        'UNSIGNED_INT_24_8',
      );
  static _i2.num get depth24Stencil8 => _i4.getProperty(
        _i8.target801,
        'DEPTH24_STENCIL8',
      );
  static _i2.num get unsignedNormalized => _i4.getProperty(
        _i8.target801,
        'UNSIGNED_NORMALIZED',
      );
  static _i2.num get drawFramebufferBinding => _i4.getProperty(
        _i8.target801,
        'DRAW_FRAMEBUFFER_BINDING',
      );
  static _i2.num get readFramebuffer => _i4.getProperty(
        _i8.target801,
        'READ_FRAMEBUFFER',
      );
  static _i2.num get drawFramebuffer => _i4.getProperty(
        _i8.target801,
        'DRAW_FRAMEBUFFER',
      );
  static _i2.num get readFramebufferBinding => _i4.getProperty(
        _i8.target801,
        'READ_FRAMEBUFFER_BINDING',
      );
  static _i2.num get renderbufferSamples => _i4.getProperty(
        _i8.target801,
        'RENDERBUFFER_SAMPLES',
      );
  static _i2.num get framebufferAttachmentTextureLayer => _i4.getProperty(
        _i8.target801,
        'FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER',
      );
  static _i2.num get maxColorAttachments => _i4.getProperty(
        _i8.target801,
        'MAX_COLOR_ATTACHMENTS',
      );
  static _i2.num get colorAttachment1 => _i4.getProperty(
        _i8.target801,
        'COLOR_ATTACHMENT1',
      );
  static _i2.num get colorAttachment2 => _i4.getProperty(
        _i8.target801,
        'COLOR_ATTACHMENT2',
      );
  static _i2.num get colorAttachment3 => _i4.getProperty(
        _i8.target801,
        'COLOR_ATTACHMENT3',
      );
  static _i2.num get colorAttachment4 => _i4.getProperty(
        _i8.target801,
        'COLOR_ATTACHMENT4',
      );
  static _i2.num get colorAttachment5 => _i4.getProperty(
        _i8.target801,
        'COLOR_ATTACHMENT5',
      );
  static _i2.num get colorAttachment6 => _i4.getProperty(
        _i8.target801,
        'COLOR_ATTACHMENT6',
      );
  static _i2.num get colorAttachment7 => _i4.getProperty(
        _i8.target801,
        'COLOR_ATTACHMENT7',
      );
  static _i2.num get colorAttachment8 => _i4.getProperty(
        _i8.target801,
        'COLOR_ATTACHMENT8',
      );
  static _i2.num get colorAttachment9 => _i4.getProperty(
        _i8.target801,
        'COLOR_ATTACHMENT9',
      );
  static _i2.num get colorAttachment10 => _i4.getProperty(
        _i8.target801,
        'COLOR_ATTACHMENT10',
      );
  static _i2.num get colorAttachment11 => _i4.getProperty(
        _i8.target801,
        'COLOR_ATTACHMENT11',
      );
  static _i2.num get colorAttachment12 => _i4.getProperty(
        _i8.target801,
        'COLOR_ATTACHMENT12',
      );
  static _i2.num get colorAttachment13 => _i4.getProperty(
        _i8.target801,
        'COLOR_ATTACHMENT13',
      );
  static _i2.num get colorAttachment14 => _i4.getProperty(
        _i8.target801,
        'COLOR_ATTACHMENT14',
      );
  static _i2.num get colorAttachment15 => _i4.getProperty(
        _i8.target801,
        'COLOR_ATTACHMENT15',
      );
  static _i2.num get framebufferIncompleteMultisample => _i4.getProperty(
        _i8.target801,
        'FRAMEBUFFER_INCOMPLETE_MULTISAMPLE',
      );
  static _i2.num get maxSamples => _i4.getProperty(
        _i8.target801,
        'MAX_SAMPLES',
      );
  static _i2.num get halfFloat => _i4.getProperty(
        _i8.target801,
        'HALF_FLOAT',
      );
  static _i2.num get rg => _i4.getProperty(
        _i8.target801,
        'RG',
      );
  static _i2.num get rgInteger => _i4.getProperty(
        _i8.target801,
        'RG_INTEGER',
      );
  static _i2.num get r8 => _i4.getProperty(
        _i8.target801,
        'R8',
      );
  static _i2.num get rg8 => _i4.getProperty(
        _i8.target801,
        'RG8',
      );
  static _i2.num get r16f => _i4.getProperty(
        _i8.target801,
        'R16F',
      );
  static _i2.num get r32f => _i4.getProperty(
        _i8.target801,
        'R32F',
      );
  static _i2.num get rg16f => _i4.getProperty(
        _i8.target801,
        'RG16F',
      );
  static _i2.num get rg32f => _i4.getProperty(
        _i8.target801,
        'RG32F',
      );
  static _i2.num get r8i => _i4.getProperty(
        _i8.target801,
        'R8I',
      );
  static _i2.num get r8ui => _i4.getProperty(
        _i8.target801,
        'R8UI',
      );
  static _i2.num get r16i => _i4.getProperty(
        _i8.target801,
        'R16I',
      );
  static _i2.num get r16ui => _i4.getProperty(
        _i8.target801,
        'R16UI',
      );
  static _i2.num get r32i => _i4.getProperty(
        _i8.target801,
        'R32I',
      );
  static _i2.num get r32ui => _i4.getProperty(
        _i8.target801,
        'R32UI',
      );
  static _i2.num get rg8i => _i4.getProperty(
        _i8.target801,
        'RG8I',
      );
  static _i2.num get rg8ui => _i4.getProperty(
        _i8.target801,
        'RG8UI',
      );
  static _i2.num get rg16i => _i4.getProperty(
        _i8.target801,
        'RG16I',
      );
  static _i2.num get rg16ui => _i4.getProperty(
        _i8.target801,
        'RG16UI',
      );
  static _i2.num get rg32i => _i4.getProperty(
        _i8.target801,
        'RG32I',
      );
  static _i2.num get rg32ui => _i4.getProperty(
        _i8.target801,
        'RG32UI',
      );
  static _i2.num get vertexArrayBinding => _i4.getProperty(
        _i8.target801,
        'VERTEX_ARRAY_BINDING',
      );
  static _i2.num get r8Snorm => _i4.getProperty(
        _i8.target801,
        'R8_SNORM',
      );
  static _i2.num get rg8Snorm => _i4.getProperty(
        _i8.target801,
        'RG8_SNORM',
      );
  static _i2.num get rgb8Snorm => _i4.getProperty(
        _i8.target801,
        'RGB8_SNORM',
      );
  static _i2.num get rgba8Snorm => _i4.getProperty(
        _i8.target801,
        'RGBA8_SNORM',
      );
  static _i2.num get signedNormalized => _i4.getProperty(
        _i8.target801,
        'SIGNED_NORMALIZED',
      );
  static _i2.num get copyReadBuffer => _i4.getProperty(
        _i8.target801,
        'COPY_READ_BUFFER',
      );
  static _i2.num get copyWriteBuffer => _i4.getProperty(
        _i8.target801,
        'COPY_WRITE_BUFFER',
      );
  static _i2.num get copyReadBufferBinding => _i4.getProperty(
        _i8.target801,
        'COPY_READ_BUFFER_BINDING',
      );
  static _i2.num get copyWriteBufferBinding => _i4.getProperty(
        _i8.target801,
        'COPY_WRITE_BUFFER_BINDING',
      );
  static _i2.num get uniformBuffer => _i4.getProperty(
        _i8.target801,
        'UNIFORM_BUFFER',
      );
  static _i2.num get uniformBufferBinding => _i4.getProperty(
        _i8.target801,
        'UNIFORM_BUFFER_BINDING',
      );
  static _i2.num get uniformBufferStart => _i4.getProperty(
        _i8.target801,
        'UNIFORM_BUFFER_START',
      );
  static _i2.num get uniformBufferSize => _i4.getProperty(
        _i8.target801,
        'UNIFORM_BUFFER_SIZE',
      );
  static _i2.num get maxVertexUniformBlocks => _i4.getProperty(
        _i8.target801,
        'MAX_VERTEX_UNIFORM_BLOCKS',
      );
  static _i2.num get maxFragmentUniformBlocks => _i4.getProperty(
        _i8.target801,
        'MAX_FRAGMENT_UNIFORM_BLOCKS',
      );
  static _i2.num get maxCombinedUniformBlocks => _i4.getProperty(
        _i8.target801,
        'MAX_COMBINED_UNIFORM_BLOCKS',
      );
  static _i2.num get maxUniformBufferBindings => _i4.getProperty(
        _i8.target801,
        'MAX_UNIFORM_BUFFER_BINDINGS',
      );
  static _i2.num get maxUniformBlockSize => _i4.getProperty(
        _i8.target801,
        'MAX_UNIFORM_BLOCK_SIZE',
      );
  static _i2.num get maxCombinedVertexUniformComponents => _i4.getProperty(
        _i8.target801,
        'MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS',
      );
  static _i2.num get maxCombinedFragmentUniformComponents => _i4.getProperty(
        _i8.target801,
        'MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS',
      );
  static _i2.num get uniformBufferOffsetAlignment => _i4.getProperty(
        _i8.target801,
        'UNIFORM_BUFFER_OFFSET_ALIGNMENT',
      );
  static _i2.num get activeUniformBlocks => _i4.getProperty(
        _i8.target801,
        'ACTIVE_UNIFORM_BLOCKS',
      );
  static _i2.num get uniformType => _i4.getProperty(
        _i8.target801,
        'UNIFORM_TYPE',
      );
  static _i2.num get uniformSize => _i4.getProperty(
        _i8.target801,
        'UNIFORM_SIZE',
      );
  static _i2.num get uniformBlockIndex => _i4.getProperty(
        _i8.target801,
        'UNIFORM_BLOCK_INDEX',
      );
  static _i2.num get uniformOffset => _i4.getProperty(
        _i8.target801,
        'UNIFORM_OFFSET',
      );
  static _i2.num get uniformArrayStride => _i4.getProperty(
        _i8.target801,
        'UNIFORM_ARRAY_STRIDE',
      );
  static _i2.num get uniformMatrixStride => _i4.getProperty(
        _i8.target801,
        'UNIFORM_MATRIX_STRIDE',
      );
  static _i2.num get uniformIsRowMajor => _i4.getProperty(
        _i8.target801,
        'UNIFORM_IS_ROW_MAJOR',
      );
  static _i2.num get uniformBlockBinding => _i4.getProperty(
        _i8.target801,
        'UNIFORM_BLOCK_BINDING',
      );
  static _i2.num get uniformBlockDataSize => _i4.getProperty(
        _i8.target801,
        'UNIFORM_BLOCK_DATA_SIZE',
      );
  static _i2.num get uniformBlockActiveUniforms => _i4.getProperty(
        _i8.target801,
        'UNIFORM_BLOCK_ACTIVE_UNIFORMS',
      );
  static _i2.num get uniformBlockActiveUniformIndices => _i4.getProperty(
        _i8.target801,
        'UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES',
      );
  static _i2.num get uniformBlockReferencedByVertexShader => _i4.getProperty(
        _i8.target801,
        'UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER',
      );
  static _i2.num get uniformBlockReferencedByFragmentShader => _i4.getProperty(
        _i8.target801,
        'UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER',
      );
  static _i2.num get invalidIndex => _i4.getProperty(
        _i8.target801,
        'INVALID_INDEX',
      );
  static _i2.num get maxVertexOutputComponents => _i4.getProperty(
        _i8.target801,
        'MAX_VERTEX_OUTPUT_COMPONENTS',
      );
  static _i2.num get maxFragmentInputComponents => _i4.getProperty(
        _i8.target801,
        'MAX_FRAGMENT_INPUT_COMPONENTS',
      );
  static _i2.num get maxServerWaitTimeout => _i4.getProperty(
        _i8.target801,
        'MAX_SERVER_WAIT_TIMEOUT',
      );
  static _i2.num get objectType => _i4.getProperty(
        _i8.target801,
        'OBJECT_TYPE',
      );
  static _i2.num get syncCondition => _i4.getProperty(
        _i8.target801,
        'SYNC_CONDITION',
      );
  static _i2.num get syncStatus => _i4.getProperty(
        _i8.target801,
        'SYNC_STATUS',
      );
  static _i2.num get syncFlags => _i4.getProperty(
        _i8.target801,
        'SYNC_FLAGS',
      );
  static _i2.num get syncFence => _i4.getProperty(
        _i8.target801,
        'SYNC_FENCE',
      );
  static _i2.num get syncGpuCommandsComplete => _i4.getProperty(
        _i8.target801,
        'SYNC_GPU_COMMANDS_COMPLETE',
      );
  static _i2.num get unsignaled => _i4.getProperty(
        _i8.target801,
        'UNSIGNALED',
      );
  static _i2.num get signaled => _i4.getProperty(
        _i8.target801,
        'SIGNALED',
      );
  static _i2.num get alreadySignaled => _i4.getProperty(
        _i8.target801,
        'ALREADY_SIGNALED',
      );
  static _i2.num get timeoutExpired => _i4.getProperty(
        _i8.target801,
        'TIMEOUT_EXPIRED',
      );
  static _i2.num get conditionSatisfied => _i4.getProperty(
        _i8.target801,
        'CONDITION_SATISFIED',
      );
  static _i2.num get waitFailed => _i4.getProperty(
        _i8.target801,
        'WAIT_FAILED',
      );
  static _i2.num get syncFlushCommandsBit => _i4.getProperty(
        _i8.target801,
        'SYNC_FLUSH_COMMANDS_BIT',
      );
  static _i2.num get vertexAttribArrayDivisor => _i4.getProperty(
        _i8.target801,
        'VERTEX_ATTRIB_ARRAY_DIVISOR',
      );
  static _i2.num get anySamplesPassed => _i4.getProperty(
        _i8.target801,
        'ANY_SAMPLES_PASSED',
      );
  static _i2.num get anySamplesPassedConservative => _i4.getProperty(
        _i8.target801,
        'ANY_SAMPLES_PASSED_CONSERVATIVE',
      );
  static _i2.num get samplerBinding => _i4.getProperty(
        _i8.target801,
        'SAMPLER_BINDING',
      );
  static _i2.num get rgb10A2ui => _i4.getProperty(
        _i8.target801,
        'RGB10_A2UI',
      );
  static _i2.num get int2101010Rev => _i4.getProperty(
        _i8.target801,
        'INT_2_10_10_10_REV',
      );
  static _i2.num get transformFeedback => _i4.getProperty(
        _i8.target801,
        'TRANSFORM_FEEDBACK',
      );
  static _i2.num get transformFeedbackPaused => _i4.getProperty(
        _i8.target801,
        'TRANSFORM_FEEDBACK_PAUSED',
      );
  static _i2.num get transformFeedbackActive => _i4.getProperty(
        _i8.target801,
        'TRANSFORM_FEEDBACK_ACTIVE',
      );
  static _i2.num get transformFeedbackBinding => _i4.getProperty(
        _i8.target801,
        'TRANSFORM_FEEDBACK_BINDING',
      );
  static _i2.num get textureImmutableFormat => _i4.getProperty(
        _i8.target801,
        'TEXTURE_IMMUTABLE_FORMAT',
      );
  static _i2.num get maxElementIndex => _i4.getProperty(
        _i8.target801,
        'MAX_ELEMENT_INDEX',
      );
  static _i2.num get textureImmutableLevels => _i4.getProperty(
        _i8.target801,
        'TEXTURE_IMMUTABLE_LEVELS',
      );
  static _i2.num get timeoutIgnored => _i4.getProperty(
        _i8.target801,
        'TIMEOUT_IGNORED',
      );
  static _i2.num get maxClientWaitTimeoutWebgl => _i4.getProperty(
        _i8.target801,
        'MAX_CLIENT_WAIT_TIMEOUT_WEBGL',
      );
  static _i2.num get depthBufferBit => _i4.getProperty(
        _i8.target801,
        'DEPTH_BUFFER_BIT',
      );
  static _i2.num get stencilBufferBit => _i4.getProperty(
        _i8.target801,
        'STENCIL_BUFFER_BIT',
      );
  static _i2.num get colorBufferBit => _i4.getProperty(
        _i8.target801,
        'COLOR_BUFFER_BIT',
      );
  static _i2.num get points => _i4.getProperty(
        _i8.target801,
        'POINTS',
      );
  static _i2.num get lines => _i4.getProperty(
        _i8.target801,
        'LINES',
      );
  static _i2.num get lineLoop => _i4.getProperty(
        _i8.target801,
        'LINE_LOOP',
      );
  static _i2.num get lineStrip => _i4.getProperty(
        _i8.target801,
        'LINE_STRIP',
      );
  static _i2.num get triangles => _i4.getProperty(
        _i8.target801,
        'TRIANGLES',
      );
  static _i2.num get triangleStrip => _i4.getProperty(
        _i8.target801,
        'TRIANGLE_STRIP',
      );
  static _i2.num get triangleFan => _i4.getProperty(
        _i8.target801,
        'TRIANGLE_FAN',
      );
  static _i2.num get zero => _i4.getProperty(
        _i8.target801,
        'ZERO',
      );
  static _i2.num get one => _i4.getProperty(
        _i8.target801,
        'ONE',
      );
  static _i2.num get srcColor => _i4.getProperty(
        _i8.target801,
        'SRC_COLOR',
      );
  static _i2.num get oneMinusSrcColor => _i4.getProperty(
        _i8.target801,
        'ONE_MINUS_SRC_COLOR',
      );
  static _i2.num get srcAlpha => _i4.getProperty(
        _i8.target801,
        'SRC_ALPHA',
      );
  static _i2.num get oneMinusSrcAlpha => _i4.getProperty(
        _i8.target801,
        'ONE_MINUS_SRC_ALPHA',
      );
  static _i2.num get dstAlpha => _i4.getProperty(
        _i8.target801,
        'DST_ALPHA',
      );
  static _i2.num get oneMinusDstAlpha => _i4.getProperty(
        _i8.target801,
        'ONE_MINUS_DST_ALPHA',
      );
  static _i2.num get dstColor => _i4.getProperty(
        _i8.target801,
        'DST_COLOR',
      );
  static _i2.num get oneMinusDstColor => _i4.getProperty(
        _i8.target801,
        'ONE_MINUS_DST_COLOR',
      );
  static _i2.num get srcAlphaSaturate => _i4.getProperty(
        _i8.target801,
        'SRC_ALPHA_SATURATE',
      );
  static _i2.num get funcAdd => _i4.getProperty(
        _i8.target801,
        'FUNC_ADD',
      );
  static _i2.num get blendEquation => _i4.getProperty(
        _i8.target801,
        'BLEND_EQUATION',
      );
  static _i2.num get blendEquationRgb => _i4.getProperty(
        _i8.target801,
        'BLEND_EQUATION_RGB',
      );
  static _i2.num get blendEquationAlpha => _i4.getProperty(
        _i8.target801,
        'BLEND_EQUATION_ALPHA',
      );
  static _i2.num get funcSubtract => _i4.getProperty(
        _i8.target801,
        'FUNC_SUBTRACT',
      );
  static _i2.num get funcReverseSubtract => _i4.getProperty(
        _i8.target801,
        'FUNC_REVERSE_SUBTRACT',
      );
  static _i2.num get blendDstRgb => _i4.getProperty(
        _i8.target801,
        'BLEND_DST_RGB',
      );
  static _i2.num get blendSrcRgb => _i4.getProperty(
        _i8.target801,
        'BLEND_SRC_RGB',
      );
  static _i2.num get blendDstAlpha => _i4.getProperty(
        _i8.target801,
        'BLEND_DST_ALPHA',
      );
  static _i2.num get blendSrcAlpha => _i4.getProperty(
        _i8.target801,
        'BLEND_SRC_ALPHA',
      );
  static _i2.num get constantColor => _i4.getProperty(
        _i8.target801,
        'CONSTANT_COLOR',
      );
  static _i2.num get oneMinusConstantColor => _i4.getProperty(
        _i8.target801,
        'ONE_MINUS_CONSTANT_COLOR',
      );
  static _i2.num get constantAlpha => _i4.getProperty(
        _i8.target801,
        'CONSTANT_ALPHA',
      );
  static _i2.num get oneMinusConstantAlpha => _i4.getProperty(
        _i8.target801,
        'ONE_MINUS_CONSTANT_ALPHA',
      );
  static _i2.num get blendColor => _i4.getProperty(
        _i8.target801,
        'BLEND_COLOR',
      );
  static _i2.num get arrayBuffer => _i4.getProperty(
        _i8.target801,
        'ARRAY_BUFFER',
      );
  static _i2.num get elementArrayBuffer => _i4.getProperty(
        _i8.target801,
        'ELEMENT_ARRAY_BUFFER',
      );
  static _i2.num get arrayBufferBinding => _i4.getProperty(
        _i8.target801,
        'ARRAY_BUFFER_BINDING',
      );
  static _i2.num get elementArrayBufferBinding => _i4.getProperty(
        _i8.target801,
        'ELEMENT_ARRAY_BUFFER_BINDING',
      );
  static _i2.num get streamDraw => _i4.getProperty(
        _i8.target801,
        'STREAM_DRAW',
      );
  static _i2.num get staticDraw => _i4.getProperty(
        _i8.target801,
        'STATIC_DRAW',
      );
  static _i2.num get dynamicDraw => _i4.getProperty(
        _i8.target801,
        'DYNAMIC_DRAW',
      );
  static _i2.num get bufferSize => _i4.getProperty(
        _i8.target801,
        'BUFFER_SIZE',
      );
  static _i2.num get bufferUsage => _i4.getProperty(
        _i8.target801,
        'BUFFER_USAGE',
      );
  static _i2.num get currentVertexAttrib => _i4.getProperty(
        _i8.target801,
        'CURRENT_VERTEX_ATTRIB',
      );
  static _i2.num get front => _i4.getProperty(
        _i8.target801,
        'FRONT',
      );
  static _i2.num get back => _i4.getProperty(
        _i8.target801,
        'BACK',
      );
  static _i2.num get frontAndBack => _i4.getProperty(
        _i8.target801,
        'FRONT_AND_BACK',
      );
  static _i2.num get cullFace => _i4.getProperty(
        _i8.target801,
        'CULL_FACE',
      );
  static _i2.num get blend => _i4.getProperty(
        _i8.target801,
        'BLEND',
      );
  static _i2.num get dither => _i4.getProperty(
        _i8.target801,
        'DITHER',
      );
  static _i2.num get stencilTest => _i4.getProperty(
        _i8.target801,
        'STENCIL_TEST',
      );
  static _i2.num get depthTest => _i4.getProperty(
        _i8.target801,
        'DEPTH_TEST',
      );
  static _i2.num get scissorTest => _i4.getProperty(
        _i8.target801,
        'SCISSOR_TEST',
      );
  static _i2.num get polygonOffsetFill => _i4.getProperty(
        _i8.target801,
        'POLYGON_OFFSET_FILL',
      );
  static _i2.num get sampleAlphaToCoverage => _i4.getProperty(
        _i8.target801,
        'SAMPLE_ALPHA_TO_COVERAGE',
      );
  static _i2.num get sampleCoverage => _i4.getProperty(
        _i8.target801,
        'SAMPLE_COVERAGE',
      );
  static _i2.num get noError => _i4.getProperty(
        _i8.target801,
        'NO_ERROR',
      );
  static _i2.num get invalidEnum => _i4.getProperty(
        _i8.target801,
        'INVALID_ENUM',
      );
  static _i2.num get invalidValue => _i4.getProperty(
        _i8.target801,
        'INVALID_VALUE',
      );
  static _i2.num get invalidOperation => _i4.getProperty(
        _i8.target801,
        'INVALID_OPERATION',
      );
  static _i2.num get outOfMemory => _i4.getProperty(
        _i8.target801,
        'OUT_OF_MEMORY',
      );
  static _i2.num get cw => _i4.getProperty(
        _i8.target801,
        'CW',
      );
  static _i2.num get ccw => _i4.getProperty(
        _i8.target801,
        'CCW',
      );
  static _i2.num get lineWidth => _i4.getProperty(
        _i8.target801,
        'LINE_WIDTH',
      );
  static _i2.num get aliasedPointSizeRange => _i4.getProperty(
        _i8.target801,
        'ALIASED_POINT_SIZE_RANGE',
      );
  static _i2.num get aliasedLineWidthRange => _i4.getProperty(
        _i8.target801,
        'ALIASED_LINE_WIDTH_RANGE',
      );
  static _i2.num get cullFaceMode => _i4.getProperty(
        _i8.target801,
        'CULL_FACE_MODE',
      );
  static _i2.num get frontFace => _i4.getProperty(
        _i8.target801,
        'FRONT_FACE',
      );
  static _i2.num get depthRange => _i4.getProperty(
        _i8.target801,
        'DEPTH_RANGE',
      );
  static _i2.num get depthWritemask => _i4.getProperty(
        _i8.target801,
        'DEPTH_WRITEMASK',
      );
  static _i2.num get depthClearValue => _i4.getProperty(
        _i8.target801,
        'DEPTH_CLEAR_VALUE',
      );
  static _i2.num get depthFunc => _i4.getProperty(
        _i8.target801,
        'DEPTH_FUNC',
      );
  static _i2.num get stencilClearValue => _i4.getProperty(
        _i8.target801,
        'STENCIL_CLEAR_VALUE',
      );
  static _i2.num get stencilFunc => _i4.getProperty(
        _i8.target801,
        'STENCIL_FUNC',
      );
  static _i2.num get stencilFail => _i4.getProperty(
        _i8.target801,
        'STENCIL_FAIL',
      );
  static _i2.num get stencilPassDepthFail => _i4.getProperty(
        _i8.target801,
        'STENCIL_PASS_DEPTH_FAIL',
      );
  static _i2.num get stencilPassDepthPass => _i4.getProperty(
        _i8.target801,
        'STENCIL_PASS_DEPTH_PASS',
      );
  static _i2.num get stencilRef => _i4.getProperty(
        _i8.target801,
        'STENCIL_REF',
      );
  static _i2.num get stencilValueMask => _i4.getProperty(
        _i8.target801,
        'STENCIL_VALUE_MASK',
      );
  static _i2.num get stencilWritemask => _i4.getProperty(
        _i8.target801,
        'STENCIL_WRITEMASK',
      );
  static _i2.num get stencilBackFunc => _i4.getProperty(
        _i8.target801,
        'STENCIL_BACK_FUNC',
      );
  static _i2.num get stencilBackFail => _i4.getProperty(
        _i8.target801,
        'STENCIL_BACK_FAIL',
      );
  static _i2.num get stencilBackPassDepthFail => _i4.getProperty(
        _i8.target801,
        'STENCIL_BACK_PASS_DEPTH_FAIL',
      );
  static _i2.num get stencilBackPassDepthPass => _i4.getProperty(
        _i8.target801,
        'STENCIL_BACK_PASS_DEPTH_PASS',
      );
  static _i2.num get stencilBackRef => _i4.getProperty(
        _i8.target801,
        'STENCIL_BACK_REF',
      );
  static _i2.num get stencilBackValueMask => _i4.getProperty(
        _i8.target801,
        'STENCIL_BACK_VALUE_MASK',
      );
  static _i2.num get stencilBackWritemask => _i4.getProperty(
        _i8.target801,
        'STENCIL_BACK_WRITEMASK',
      );
  static _i2.num get viewport => _i4.getProperty(
        _i8.target801,
        'VIEWPORT',
      );
  static _i2.num get scissorBox => _i4.getProperty(
        _i8.target801,
        'SCISSOR_BOX',
      );
  static _i2.num get colorClearValue => _i4.getProperty(
        _i8.target801,
        'COLOR_CLEAR_VALUE',
      );
  static _i2.num get colorWritemask => _i4.getProperty(
        _i8.target801,
        'COLOR_WRITEMASK',
      );
  static _i2.num get unpackAlignment => _i4.getProperty(
        _i8.target801,
        'UNPACK_ALIGNMENT',
      );
  static _i2.num get packAlignment => _i4.getProperty(
        _i8.target801,
        'PACK_ALIGNMENT',
      );
  static _i2.num get maxTextureSize => _i4.getProperty(
        _i8.target801,
        'MAX_TEXTURE_SIZE',
      );
  static _i2.num get maxViewportDims => _i4.getProperty(
        _i8.target801,
        'MAX_VIEWPORT_DIMS',
      );
  static _i2.num get subpixelBits => _i4.getProperty(
        _i8.target801,
        'SUBPIXEL_BITS',
      );
  static _i2.num get redBits => _i4.getProperty(
        _i8.target801,
        'RED_BITS',
      );
  static _i2.num get greenBits => _i4.getProperty(
        _i8.target801,
        'GREEN_BITS',
      );
  static _i2.num get blueBits => _i4.getProperty(
        _i8.target801,
        'BLUE_BITS',
      );
  static _i2.num get alphaBits => _i4.getProperty(
        _i8.target801,
        'ALPHA_BITS',
      );
  static _i2.num get depthBits => _i4.getProperty(
        _i8.target801,
        'DEPTH_BITS',
      );
  static _i2.num get stencilBits => _i4.getProperty(
        _i8.target801,
        'STENCIL_BITS',
      );
  static _i2.num get polygonOffsetUnits => _i4.getProperty(
        _i8.target801,
        'POLYGON_OFFSET_UNITS',
      );
  static _i2.num get polygonOffsetFactor => _i4.getProperty(
        _i8.target801,
        'POLYGON_OFFSET_FACTOR',
      );
  static _i2.num get textureBinding2d => _i4.getProperty(
        _i8.target801,
        'TEXTURE_BINDING_2D',
      );
  static _i2.num get sampleBuffers => _i4.getProperty(
        _i8.target801,
        'SAMPLE_BUFFERS',
      );
  static _i2.num get samples => _i4.getProperty(
        _i8.target801,
        'SAMPLES',
      );
  static _i2.num get sampleCoverageValue => _i4.getProperty(
        _i8.target801,
        'SAMPLE_COVERAGE_VALUE',
      );
  static _i2.num get sampleCoverageInvert => _i4.getProperty(
        _i8.target801,
        'SAMPLE_COVERAGE_INVERT',
      );
  static _i2.num get compressedTextureFormats => _i4.getProperty(
        _i8.target801,
        'COMPRESSED_TEXTURE_FORMATS',
      );
  static _i2.num get dontCare => _i4.getProperty(
        _i8.target801,
        'DONT_CARE',
      );
  static _i2.num get fastest => _i4.getProperty(
        _i8.target801,
        'FASTEST',
      );
  static _i2.num get nicest => _i4.getProperty(
        _i8.target801,
        'NICEST',
      );
  static _i2.num get generateMipmapHint => _i4.getProperty(
        _i8.target801,
        'GENERATE_MIPMAP_HINT',
      );
  static _i2.num get byte => _i4.getProperty(
        _i8.target801,
        'BYTE',
      );
  static _i2.num get unsignedByte => _i4.getProperty(
        _i8.target801,
        'UNSIGNED_BYTE',
      );
  static _i2.num get short => _i4.getProperty(
        _i8.target801,
        'SHORT',
      );
  static _i2.num get unsignedShort => _i4.getProperty(
        _i8.target801,
        'UNSIGNED_SHORT',
      );
  static _i2.num get int$ => _i4.getProperty(
        _i8.target801,
        'INT',
      );
  static _i2.num get unsignedInt => _i4.getProperty(
        _i8.target801,
        'UNSIGNED_INT',
      );
  static _i2.num get float => _i4.getProperty(
        _i8.target801,
        'FLOAT',
      );
  static _i2.num get depthComponent => _i4.getProperty(
        _i8.target801,
        'DEPTH_COMPONENT',
      );
  static _i2.num get alpha => _i4.getProperty(
        _i8.target801,
        'ALPHA',
      );
  static _i2.num get rgb => _i4.getProperty(
        _i8.target801,
        'RGB',
      );
  static _i2.num get rgba => _i4.getProperty(
        _i8.target801,
        'RGBA',
      );
  static _i2.num get luminance => _i4.getProperty(
        _i8.target801,
        'LUMINANCE',
      );
  static _i2.num get luminanceAlpha => _i4.getProperty(
        _i8.target801,
        'LUMINANCE_ALPHA',
      );
  static _i2.num get unsignedShort4444 => _i4.getProperty(
        _i8.target801,
        'UNSIGNED_SHORT_4_4_4_4',
      );
  static _i2.num get unsignedShort5551 => _i4.getProperty(
        _i8.target801,
        'UNSIGNED_SHORT_5_5_5_1',
      );
  static _i2.num get unsignedShort565 => _i4.getProperty(
        _i8.target801,
        'UNSIGNED_SHORT_5_6_5',
      );
  static _i2.num get fragmentShader => _i4.getProperty(
        _i8.target801,
        'FRAGMENT_SHADER',
      );
  static _i2.num get vertexShader => _i4.getProperty(
        _i8.target801,
        'VERTEX_SHADER',
      );
  static _i2.num get maxVertexAttribs => _i4.getProperty(
        _i8.target801,
        'MAX_VERTEX_ATTRIBS',
      );
  static _i2.num get maxVertexUniformVectors => _i4.getProperty(
        _i8.target801,
        'MAX_VERTEX_UNIFORM_VECTORS',
      );
  static _i2.num get maxVaryingVectors => _i4.getProperty(
        _i8.target801,
        'MAX_VARYING_VECTORS',
      );
  static _i2.num get maxCombinedTextureImageUnits => _i4.getProperty(
        _i8.target801,
        'MAX_COMBINED_TEXTURE_IMAGE_UNITS',
      );
  static _i2.num get maxVertexTextureImageUnits => _i4.getProperty(
        _i8.target801,
        'MAX_VERTEX_TEXTURE_IMAGE_UNITS',
      );
  static _i2.num get maxTextureImageUnits => _i4.getProperty(
        _i8.target801,
        'MAX_TEXTURE_IMAGE_UNITS',
      );
  static _i2.num get maxFragmentUniformVectors => _i4.getProperty(
        _i8.target801,
        'MAX_FRAGMENT_UNIFORM_VECTORS',
      );
  static _i2.num get shaderType => _i4.getProperty(
        _i8.target801,
        'SHADER_TYPE',
      );
  static _i2.num get deleteStatus => _i4.getProperty(
        _i8.target801,
        'DELETE_STATUS',
      );
  static _i2.num get linkStatus => _i4.getProperty(
        _i8.target801,
        'LINK_STATUS',
      );
  static _i2.num get validateStatus => _i4.getProperty(
        _i8.target801,
        'VALIDATE_STATUS',
      );
  static _i2.num get attachedShaders => _i4.getProperty(
        _i8.target801,
        'ATTACHED_SHADERS',
      );
  static _i2.num get activeUniforms => _i4.getProperty(
        _i8.target801,
        'ACTIVE_UNIFORMS',
      );
  static _i2.num get activeAttributes => _i4.getProperty(
        _i8.target801,
        'ACTIVE_ATTRIBUTES',
      );
  static _i2.num get shadingLanguageVersion => _i4.getProperty(
        _i8.target801,
        'SHADING_LANGUAGE_VERSION',
      );
  static _i2.num get currentProgram => _i4.getProperty(
        _i8.target801,
        'CURRENT_PROGRAM',
      );
  static _i2.num get never => _i4.getProperty(
        _i8.target801,
        'NEVER',
      );
  static _i2.num get less => _i4.getProperty(
        _i8.target801,
        'LESS',
      );
  static _i2.num get equal => _i4.getProperty(
        _i8.target801,
        'EQUAL',
      );
  static _i2.num get lequal => _i4.getProperty(
        _i8.target801,
        'LEQUAL',
      );
  static _i2.num get greater => _i4.getProperty(
        _i8.target801,
        'GREATER',
      );
  static _i2.num get notequal => _i4.getProperty(
        _i8.target801,
        'NOTEQUAL',
      );
  static _i2.num get gequal => _i4.getProperty(
        _i8.target801,
        'GEQUAL',
      );
  static _i2.num get always => _i4.getProperty(
        _i8.target801,
        'ALWAYS',
      );
  static _i2.num get keep => _i4.getProperty(
        _i8.target801,
        'KEEP',
      );
  static _i2.num get replace => _i4.getProperty(
        _i8.target801,
        'REPLACE',
      );
  static _i2.num get incr => _i4.getProperty(
        _i8.target801,
        'INCR',
      );
  static _i2.num get decr => _i4.getProperty(
        _i8.target801,
        'DECR',
      );
  static _i2.num get invert => _i4.getProperty(
        _i8.target801,
        'INVERT',
      );
  static _i2.num get incrWrap => _i4.getProperty(
        _i8.target801,
        'INCR_WRAP',
      );
  static _i2.num get decrWrap => _i4.getProperty(
        _i8.target801,
        'DECR_WRAP',
      );
  static _i2.num get vendor => _i4.getProperty(
        _i8.target801,
        'VENDOR',
      );
  static _i2.num get renderer => _i4.getProperty(
        _i8.target801,
        'RENDERER',
      );
  static _i2.num get version => _i4.getProperty(
        _i8.target801,
        'VERSION',
      );
  static _i2.num get nearest => _i4.getProperty(
        _i8.target801,
        'NEAREST',
      );
  static _i2.num get linear => _i4.getProperty(
        _i8.target801,
        'LINEAR',
      );
  static _i2.num get nearestMipmapNearest => _i4.getProperty(
        _i8.target801,
        'NEAREST_MIPMAP_NEAREST',
      );
  static _i2.num get linearMipmapNearest => _i4.getProperty(
        _i8.target801,
        'LINEAR_MIPMAP_NEAREST',
      );
  static _i2.num get nearestMipmapLinear => _i4.getProperty(
        _i8.target801,
        'NEAREST_MIPMAP_LINEAR',
      );
  static _i2.num get linearMipmapLinear => _i4.getProperty(
        _i8.target801,
        'LINEAR_MIPMAP_LINEAR',
      );
  static _i2.num get textureMagFilter => _i4.getProperty(
        _i8.target801,
        'TEXTURE_MAG_FILTER',
      );
  static _i2.num get textureMinFilter => _i4.getProperty(
        _i8.target801,
        'TEXTURE_MIN_FILTER',
      );
  static _i2.num get textureWrapS => _i4.getProperty(
        _i8.target801,
        'TEXTURE_WRAP_S',
      );
  static _i2.num get textureWrapT => _i4.getProperty(
        _i8.target801,
        'TEXTURE_WRAP_T',
      );
  static _i2.num get texture2d => _i4.getProperty(
        _i8.target801,
        'TEXTURE_2D',
      );
  static _i2.num get texture => _i4.getProperty(
        _i8.target801,
        'TEXTURE',
      );
  static _i2.num get textureCubeMap => _i4.getProperty(
        _i8.target801,
        'TEXTURE_CUBE_MAP',
      );
  static _i2.num get textureBindingCubeMap => _i4.getProperty(
        _i8.target801,
        'TEXTURE_BINDING_CUBE_MAP',
      );
  static _i2.num get textureCubeMapPositiveX => _i4.getProperty(
        _i8.target801,
        'TEXTURE_CUBE_MAP_POSITIVE_X',
      );
  static _i2.num get textureCubeMapNegativeX => _i4.getProperty(
        _i8.target801,
        'TEXTURE_CUBE_MAP_NEGATIVE_X',
      );
  static _i2.num get textureCubeMapPositiveY => _i4.getProperty(
        _i8.target801,
        'TEXTURE_CUBE_MAP_POSITIVE_Y',
      );
  static _i2.num get textureCubeMapNegativeY => _i4.getProperty(
        _i8.target801,
        'TEXTURE_CUBE_MAP_NEGATIVE_Y',
      );
  static _i2.num get textureCubeMapPositiveZ => _i4.getProperty(
        _i8.target801,
        'TEXTURE_CUBE_MAP_POSITIVE_Z',
      );
  static _i2.num get textureCubeMapNegativeZ => _i4.getProperty(
        _i8.target801,
        'TEXTURE_CUBE_MAP_NEGATIVE_Z',
      );
  static _i2.num get maxCubeMapTextureSize => _i4.getProperty(
        _i8.target801,
        'MAX_CUBE_MAP_TEXTURE_SIZE',
      );
  static _i2.num get texture0 => _i4.getProperty(
        _i8.target801,
        'TEXTURE0',
      );
  static _i2.num get texture1 => _i4.getProperty(
        _i8.target801,
        'TEXTURE1',
      );
  static _i2.num get texture2 => _i4.getProperty(
        _i8.target801,
        'TEXTURE2',
      );
  static _i2.num get texture3 => _i4.getProperty(
        _i8.target801,
        'TEXTURE3',
      );
  static _i2.num get texture4 => _i4.getProperty(
        _i8.target801,
        'TEXTURE4',
      );
  static _i2.num get texture5 => _i4.getProperty(
        _i8.target801,
        'TEXTURE5',
      );
  static _i2.num get texture6 => _i4.getProperty(
        _i8.target801,
        'TEXTURE6',
      );
  static _i2.num get texture7 => _i4.getProperty(
        _i8.target801,
        'TEXTURE7',
      );
  static _i2.num get texture8 => _i4.getProperty(
        _i8.target801,
        'TEXTURE8',
      );
  static _i2.num get texture9 => _i4.getProperty(
        _i8.target801,
        'TEXTURE9',
      );
  static _i2.num get texture10 => _i4.getProperty(
        _i8.target801,
        'TEXTURE10',
      );
  static _i2.num get texture11 => _i4.getProperty(
        _i8.target801,
        'TEXTURE11',
      );
  static _i2.num get texture12 => _i4.getProperty(
        _i8.target801,
        'TEXTURE12',
      );
  static _i2.num get texture13 => _i4.getProperty(
        _i8.target801,
        'TEXTURE13',
      );
  static _i2.num get texture14 => _i4.getProperty(
        _i8.target801,
        'TEXTURE14',
      );
  static _i2.num get texture15 => _i4.getProperty(
        _i8.target801,
        'TEXTURE15',
      );
  static _i2.num get texture16 => _i4.getProperty(
        _i8.target801,
        'TEXTURE16',
      );
  static _i2.num get texture17 => _i4.getProperty(
        _i8.target801,
        'TEXTURE17',
      );
  static _i2.num get texture18 => _i4.getProperty(
        _i8.target801,
        'TEXTURE18',
      );
  static _i2.num get texture19 => _i4.getProperty(
        _i8.target801,
        'TEXTURE19',
      );
  static _i2.num get texture20 => _i4.getProperty(
        _i8.target801,
        'TEXTURE20',
      );
  static _i2.num get texture21 => _i4.getProperty(
        _i8.target801,
        'TEXTURE21',
      );
  static _i2.num get texture22 => _i4.getProperty(
        _i8.target801,
        'TEXTURE22',
      );
  static _i2.num get texture23 => _i4.getProperty(
        _i8.target801,
        'TEXTURE23',
      );
  static _i2.num get texture24 => _i4.getProperty(
        _i8.target801,
        'TEXTURE24',
      );
  static _i2.num get texture25 => _i4.getProperty(
        _i8.target801,
        'TEXTURE25',
      );
  static _i2.num get texture26 => _i4.getProperty(
        _i8.target801,
        'TEXTURE26',
      );
  static _i2.num get texture27 => _i4.getProperty(
        _i8.target801,
        'TEXTURE27',
      );
  static _i2.num get texture28 => _i4.getProperty(
        _i8.target801,
        'TEXTURE28',
      );
  static _i2.num get texture29 => _i4.getProperty(
        _i8.target801,
        'TEXTURE29',
      );
  static _i2.num get texture30 => _i4.getProperty(
        _i8.target801,
        'TEXTURE30',
      );
  static _i2.num get texture31 => _i4.getProperty(
        _i8.target801,
        'TEXTURE31',
      );
  static _i2.num get activeTexture => _i4.getProperty(
        _i8.target801,
        'ACTIVE_TEXTURE',
      );
  static _i2.num get repeat => _i4.getProperty(
        _i8.target801,
        'REPEAT',
      );
  static _i2.num get clampToEdge => _i4.getProperty(
        _i8.target801,
        'CLAMP_TO_EDGE',
      );
  static _i2.num get mirroredRepeat => _i4.getProperty(
        _i8.target801,
        'MIRRORED_REPEAT',
      );
  static _i2.num get floatVec2 => _i4.getProperty(
        _i8.target801,
        'FLOAT_VEC2',
      );
  static _i2.num get floatVec3 => _i4.getProperty(
        _i8.target801,
        'FLOAT_VEC3',
      );
  static _i2.num get floatVec4 => _i4.getProperty(
        _i8.target801,
        'FLOAT_VEC4',
      );
  static _i2.num get intVec2 => _i4.getProperty(
        _i8.target801,
        'INT_VEC2',
      );
  static _i2.num get intVec3 => _i4.getProperty(
        _i8.target801,
        'INT_VEC3',
      );
  static _i2.num get intVec4 => _i4.getProperty(
        _i8.target801,
        'INT_VEC4',
      );
  static _i2.num get bool$ => _i4.getProperty(
        _i8.target801,
        'BOOL',
      );
  static _i2.num get boolVec2 => _i4.getProperty(
        _i8.target801,
        'BOOL_VEC2',
      );
  static _i2.num get boolVec3 => _i4.getProperty(
        _i8.target801,
        'BOOL_VEC3',
      );
  static _i2.num get boolVec4 => _i4.getProperty(
        _i8.target801,
        'BOOL_VEC4',
      );
  static _i2.num get floatMat2 => _i4.getProperty(
        _i8.target801,
        'FLOAT_MAT2',
      );
  static _i2.num get floatMat3 => _i4.getProperty(
        _i8.target801,
        'FLOAT_MAT3',
      );
  static _i2.num get floatMat4 => _i4.getProperty(
        _i8.target801,
        'FLOAT_MAT4',
      );
  static _i2.num get sampler2d => _i4.getProperty(
        _i8.target801,
        'SAMPLER_2D',
      );
  static _i2.num get samplerCube => _i4.getProperty(
        _i8.target801,
        'SAMPLER_CUBE',
      );
  static _i2.num get vertexAttribArrayEnabled => _i4.getProperty(
        _i8.target801,
        'VERTEX_ATTRIB_ARRAY_ENABLED',
      );
  static _i2.num get vertexAttribArraySize => _i4.getProperty(
        _i8.target801,
        'VERTEX_ATTRIB_ARRAY_SIZE',
      );
  static _i2.num get vertexAttribArrayStride => _i4.getProperty(
        _i8.target801,
        'VERTEX_ATTRIB_ARRAY_STRIDE',
      );
  static _i2.num get vertexAttribArrayType => _i4.getProperty(
        _i8.target801,
        'VERTEX_ATTRIB_ARRAY_TYPE',
      );
  static _i2.num get vertexAttribArrayNormalized => _i4.getProperty(
        _i8.target801,
        'VERTEX_ATTRIB_ARRAY_NORMALIZED',
      );
  static _i2.num get vertexAttribArrayPointer => _i4.getProperty(
        _i8.target801,
        'VERTEX_ATTRIB_ARRAY_POINTER',
      );
  static _i2.num get vertexAttribArrayBufferBinding => _i4.getProperty(
        _i8.target801,
        'VERTEX_ATTRIB_ARRAY_BUFFER_BINDING',
      );
  static _i2.num get implementationColorReadType => _i4.getProperty(
        _i8.target801,
        'IMPLEMENTATION_COLOR_READ_TYPE',
      );
  static _i2.num get implementationColorReadFormat => _i4.getProperty(
        _i8.target801,
        'IMPLEMENTATION_COLOR_READ_FORMAT',
      );
  static _i2.num get compileStatus => _i4.getProperty(
        _i8.target801,
        'COMPILE_STATUS',
      );
  static _i2.num get lowFloat => _i4.getProperty(
        _i8.target801,
        'LOW_FLOAT',
      );
  static _i2.num get mediumFloat => _i4.getProperty(
        _i8.target801,
        'MEDIUM_FLOAT',
      );
  static _i2.num get highFloat => _i4.getProperty(
        _i8.target801,
        'HIGH_FLOAT',
      );
  static _i2.num get lowInt => _i4.getProperty(
        _i8.target801,
        'LOW_INT',
      );
  static _i2.num get mediumInt => _i4.getProperty(
        _i8.target801,
        'MEDIUM_INT',
      );
  static _i2.num get highInt => _i4.getProperty(
        _i8.target801,
        'HIGH_INT',
      );
  static _i2.num get framebuffer => _i4.getProperty(
        _i8.target801,
        'FRAMEBUFFER',
      );
  static _i2.num get renderbuffer => _i4.getProperty(
        _i8.target801,
        'RENDERBUFFER',
      );
  static _i2.num get rgba4 => _i4.getProperty(
        _i8.target801,
        'RGBA4',
      );
  static _i2.num get rgb5A1 => _i4.getProperty(
        _i8.target801,
        'RGB5_A1',
      );
  static _i2.num get rgb565 => _i4.getProperty(
        _i8.target801,
        'RGB565',
      );
  static _i2.num get depthComponent16 => _i4.getProperty(
        _i8.target801,
        'DEPTH_COMPONENT16',
      );
  static _i2.num get stencilIndex8 => _i4.getProperty(
        _i8.target801,
        'STENCIL_INDEX8',
      );
  static _i2.num get depthStencil => _i4.getProperty(
        _i8.target801,
        'DEPTH_STENCIL',
      );
  static _i2.num get renderbufferWidth => _i4.getProperty(
        _i8.target801,
        'RENDERBUFFER_WIDTH',
      );
  static _i2.num get renderbufferHeight => _i4.getProperty(
        _i8.target801,
        'RENDERBUFFER_HEIGHT',
      );
  static _i2.num get renderbufferInternalFormat => _i4.getProperty(
        _i8.target801,
        'RENDERBUFFER_INTERNAL_FORMAT',
      );
  static _i2.num get renderbufferRedSize => _i4.getProperty(
        _i8.target801,
        'RENDERBUFFER_RED_SIZE',
      );
  static _i2.num get renderbufferGreenSize => _i4.getProperty(
        _i8.target801,
        'RENDERBUFFER_GREEN_SIZE',
      );
  static _i2.num get renderbufferBlueSize => _i4.getProperty(
        _i8.target801,
        'RENDERBUFFER_BLUE_SIZE',
      );
  static _i2.num get renderbufferAlphaSize => _i4.getProperty(
        _i8.target801,
        'RENDERBUFFER_ALPHA_SIZE',
      );
  static _i2.num get renderbufferDepthSize => _i4.getProperty(
        _i8.target801,
        'RENDERBUFFER_DEPTH_SIZE',
      );
  static _i2.num get renderbufferStencilSize => _i4.getProperty(
        _i8.target801,
        'RENDERBUFFER_STENCIL_SIZE',
      );
  static _i2.num get framebufferAttachmentObjectType => _i4.getProperty(
        _i8.target801,
        'FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE',
      );
  static _i2.num get framebufferAttachmentObjectName => _i4.getProperty(
        _i8.target801,
        'FRAMEBUFFER_ATTACHMENT_OBJECT_NAME',
      );
  static _i2.num get framebufferAttachmentTextureLevel => _i4.getProperty(
        _i8.target801,
        'FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL',
      );
  static _i2.num get framebufferAttachmentTextureCubeMapFace => _i4.getProperty(
        _i8.target801,
        'FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE',
      );
  static _i2.num get colorAttachment0 => _i4.getProperty(
        _i8.target801,
        'COLOR_ATTACHMENT0',
      );
  static _i2.num get depthAttachment => _i4.getProperty(
        _i8.target801,
        'DEPTH_ATTACHMENT',
      );
  static _i2.num get stencilAttachment => _i4.getProperty(
        _i8.target801,
        'STENCIL_ATTACHMENT',
      );
  static _i2.num get depthStencilAttachment => _i4.getProperty(
        _i8.target801,
        'DEPTH_STENCIL_ATTACHMENT',
      );
  static _i2.num get none => _i4.getProperty(
        _i8.target801,
        'NONE',
      );
  static _i2.num get framebufferComplete => _i4.getProperty(
        _i8.target801,
        'FRAMEBUFFER_COMPLETE',
      );
  static _i2.num get framebufferIncompleteAttachment => _i4.getProperty(
        _i8.target801,
        'FRAMEBUFFER_INCOMPLETE_ATTACHMENT',
      );
  static _i2.num get framebufferIncompleteMissingAttachment => _i4.getProperty(
        _i8.target801,
        'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT',
      );
  static _i2.num get framebufferIncompleteDimensions => _i4.getProperty(
        _i8.target801,
        'FRAMEBUFFER_INCOMPLETE_DIMENSIONS',
      );
  static _i2.num get framebufferUnsupported => _i4.getProperty(
        _i8.target801,
        'FRAMEBUFFER_UNSUPPORTED',
      );
  static _i2.num get framebufferBinding => _i4.getProperty(
        _i8.target801,
        'FRAMEBUFFER_BINDING',
      );
  static _i2.num get renderbufferBinding => _i4.getProperty(
        _i8.target801,
        'RENDERBUFFER_BINDING',
      );
  static _i2.num get maxRenderbufferSize => _i4.getProperty(
        _i8.target801,
        'MAX_RENDERBUFFER_SIZE',
      );
  static _i2.num get invalidFramebufferOperation => _i4.getProperty(
        _i8.target801,
        'INVALID_FRAMEBUFFER_OPERATION',
      );
  static _i2.num get unpackFlipYWebgl => _i4.getProperty(
        _i8.target801,
        'UNPACK_FLIP_Y_WEBGL',
      );
  static _i2.num get unpackPremultiplyAlphaWebgl => _i4.getProperty(
        _i8.target801,
        'UNPACK_PREMULTIPLY_ALPHA_WEBGL',
      );
  static _i2.num get contextLostWebgl => _i4.getProperty(
        _i8.target801,
        'CONTEXT_LOST_WEBGL',
      );
  static _i2.num get unpackColorspaceConversionWebgl => _i4.getProperty(
        _i8.target801,
        'UNPACK_COLORSPACE_CONVERSION_WEBGL',
      );
  static _i2.num get browserDefaultWebgl => _i4.getProperty(
        _i8.target801,
        'BROWSER_DEFAULT_WEBGL',
      );
}

_i2.Object get _declaredWebGL2RenderingContext => _i4.getProperty(
      _self,
      'WebGL2RenderingContext',
    ); /* Source:  */

@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class WebGL2RenderingContextBase {
  external factory WebGL2RenderingContextBase._({
    _i2.dynamic readBuffer$,
    _i2.dynamic unpackRowLength,
    _i2.dynamic unpackSkipRows,
    _i2.dynamic unpackSkipPixels,
    _i2.dynamic packRowLength,
    _i2.dynamic packSkipRows,
    _i2.dynamic packSkipPixels,
    _i2.dynamic color,
    _i2.dynamic depth,
    _i2.dynamic stencil,
    _i2.dynamic red,
    _i2.dynamic rgb8,
    _i2.dynamic rgba8,
    _i2.dynamic rgb10A2,
    _i2.dynamic textureBinding3d,
    _i2.dynamic unpackSkipImages,
    _i2.dynamic unpackImageHeight,
    _i2.dynamic texture3d,
    _i2.dynamic textureWrapR,
    _i2.dynamic max3dTextureSize,
    _i2.dynamic unsignedInt2101010Rev,
    _i2.dynamic maxElementsVertices,
    _i2.dynamic maxElementsIndices,
    _i2.dynamic textureMinLod,
    _i2.dynamic textureMaxLod,
    _i2.dynamic textureBaseLevel,
    _i2.dynamic textureMaxLevel,
    _i2.dynamic min,
    _i2.dynamic max,
    _i2.dynamic depthComponent24,
    _i2.dynamic maxTextureLodBias,
    _i2.dynamic textureCompareMode,
    _i2.dynamic textureCompareFunc,
    _i2.dynamic currentQuery,
    _i2.dynamic queryResult,
    _i2.dynamic queryResultAvailable,
    _i2.dynamic streamRead,
    _i2.dynamic streamCopy,
    _i2.dynamic staticRead,
    _i2.dynamic staticCopy,
    _i2.dynamic dynamicRead,
    _i2.dynamic dynamicCopy,
    _i2.dynamic maxDrawBuffers,
    _i2.dynamic drawBuffer0,
    _i2.dynamic drawBuffer1,
    _i2.dynamic drawBuffer2,
    _i2.dynamic drawBuffer3,
    _i2.dynamic drawBuffer4,
    _i2.dynamic drawBuffer5,
    _i2.dynamic drawBuffer6,
    _i2.dynamic drawBuffer7,
    _i2.dynamic drawBuffer8,
    _i2.dynamic drawBuffer9,
    _i2.dynamic drawBuffer10,
    _i2.dynamic drawBuffer11,
    _i2.dynamic drawBuffer12,
    _i2.dynamic drawBuffer13,
    _i2.dynamic drawBuffer14,
    _i2.dynamic drawBuffer15,
    _i2.dynamic maxFragmentUniformComponents,
    _i2.dynamic maxVertexUniformComponents,
    _i2.dynamic sampler3d,
    _i2.dynamic sampler2dShadow,
    _i2.dynamic fragmentShaderDerivativeHint,
    _i2.dynamic pixelPackBuffer,
    _i2.dynamic pixelUnpackBuffer,
    _i2.dynamic pixelPackBufferBinding,
    _i2.dynamic pixelUnpackBufferBinding,
    _i2.dynamic floatmaT2x3,
    _i2.dynamic floatmaT2x4,
    _i2.dynamic floatmaT3x2,
    _i2.dynamic floatmaT3x4,
    _i2.dynamic floatmaT4x2,
    _i2.dynamic floatmaT4x3,
    _i2.dynamic srgb,
    _i2.dynamic srgb8,
    _i2.dynamic srgb8Alpha8,
    _i2.dynamic compareRefToTexture,
    _i2.dynamic rgba32f,
    _i2.dynamic rgb32f,
    _i2.dynamic rgba16f,
    _i2.dynamic rgb16f,
    _i2.dynamic vertexAttribArrayInteger,
    _i2.dynamic maxArrayTextureLayers,
    _i2.dynamic minProgramTexelOffset,
    _i2.dynamic maxProgramTexelOffset,
    _i2.dynamic maxVaryingComponents,
    _i2.dynamic texture2dArray,
    _i2.dynamic textureBinding2dArray,
    _i2.dynamic r11fG11fB10f,
    _i2.dynamic unsignedInt10f11f11fRev,
    _i2.dynamic rgb9E5,
    _i2.dynamic unsignedInt5999Rev,
    _i2.dynamic transformFeedbackBufferMode,
    _i2.dynamic maxTransformFeedbackSeparateComponents,
    _i2.dynamic transformFeedbackVaryings$,
    _i2.dynamic transformFeedbackBufferStart,
    _i2.dynamic transformFeedbackBufferSize,
    _i2.dynamic transformFeedbackPrimitivesWritten,
    _i2.dynamic rasterizerDiscard,
    _i2.dynamic maxTransformFeedbackInterleavedComponents,
    _i2.dynamic maxTransformFeedbackSeparateAttribs,
    _i2.dynamic interleavedAttribs,
    _i2.dynamic separateAttribs,
    _i2.dynamic transformFeedbackBuffer,
    _i2.dynamic transformFeedbackBufferBinding,
    _i2.dynamic rgba32ui,
    _i2.dynamic rgb32ui,
    _i2.dynamic rgba16ui,
    _i2.dynamic rgb16ui,
    _i2.dynamic rgba8ui,
    _i2.dynamic rgb8ui,
    _i2.dynamic rgba32i,
    _i2.dynamic rgb32i,
    _i2.dynamic rgba16i,
    _i2.dynamic rgb16i,
    _i2.dynamic rgba8i,
    _i2.dynamic rgb8i,
    _i2.dynamic redInteger,
    _i2.dynamic rgbInteger,
    _i2.dynamic rgbaInteger,
    _i2.dynamic sampler2dArray,
    _i2.dynamic sampler2dArrayShadow,
    _i2.dynamic samplerCubeShadow,
    _i2.dynamic unsignedIntVec2,
    _i2.dynamic unsignedIntVec3,
    _i2.dynamic unsignedIntVec4,
    _i2.dynamic intSampler2d,
    _i2.dynamic intSampler3d,
    _i2.dynamic intSamplerCube,
    _i2.dynamic intSampler2dArray,
    _i2.dynamic unsignedIntSampler2d,
    _i2.dynamic unsignedIntSampler3d,
    _i2.dynamic unsignedIntSamplerCube,
    _i2.dynamic unsignedIntSampler2dArray,
    _i2.dynamic depthComponent32f,
    _i2.dynamic depth32fStencil8,
    _i2.dynamic float32UnsignedInt248Rev,
    _i2.dynamic framebufferAttachmentColorEncoding,
    _i2.dynamic framebufferAttachmentComponentType,
    _i2.dynamic framebufferAttachmentRedSize,
    _i2.dynamic framebufferAttachmentGreenSize,
    _i2.dynamic framebufferAttachmentBlueSize,
    _i2.dynamic framebufferAttachmentAlphaSize,
    _i2.dynamic framebufferAttachmentDepthSize,
    _i2.dynamic framebufferAttachmentStencilSize,
    _i2.dynamic framebufferDefault,
    _i2.dynamic unsignedInt248,
    _i2.dynamic depth24Stencil8,
    _i2.dynamic unsignedNormalized,
    _i2.dynamic drawFramebufferBinding,
    _i2.dynamic readFramebuffer,
    _i2.dynamic drawFramebuffer,
    _i2.dynamic readFramebufferBinding,
    _i2.dynamic renderbufferSamples,
    _i2.dynamic framebufferAttachmentTextureLayer,
    _i2.dynamic maxColorAttachments,
    _i2.dynamic colorAttachment1,
    _i2.dynamic colorAttachment2,
    _i2.dynamic colorAttachment3,
    _i2.dynamic colorAttachment4,
    _i2.dynamic colorAttachment5,
    _i2.dynamic colorAttachment6,
    _i2.dynamic colorAttachment7,
    _i2.dynamic colorAttachment8,
    _i2.dynamic colorAttachment9,
    _i2.dynamic colorAttachment10,
    _i2.dynamic colorAttachment11,
    _i2.dynamic colorAttachment12,
    _i2.dynamic colorAttachment13,
    _i2.dynamic colorAttachment14,
    _i2.dynamic colorAttachment15,
    _i2.dynamic framebufferIncompleteMultisample,
    _i2.dynamic maxSamples,
    _i2.dynamic halfFloat,
    _i2.dynamic rg,
    _i2.dynamic rgInteger,
    _i2.dynamic r8,
    _i2.dynamic rg8,
    _i2.dynamic r16f,
    _i2.dynamic r32f,
    _i2.dynamic rg16f,
    _i2.dynamic rg32f,
    _i2.dynamic r8i,
    _i2.dynamic r8ui,
    _i2.dynamic r16i,
    _i2.dynamic r16ui,
    _i2.dynamic r32i,
    _i2.dynamic r32ui,
    _i2.dynamic rg8i,
    _i2.dynamic rg8ui,
    _i2.dynamic rg16i,
    _i2.dynamic rg16ui,
    _i2.dynamic rg32i,
    _i2.dynamic rg32ui,
    _i2.dynamic vertexArrayBinding,
    _i2.dynamic r8Snorm,
    _i2.dynamic rg8Snorm,
    _i2.dynamic rgb8Snorm,
    _i2.dynamic rgba8Snorm,
    _i2.dynamic signedNormalized,
    _i2.dynamic copyReadBuffer,
    _i2.dynamic copyWriteBuffer,
    _i2.dynamic copyReadBufferBinding,
    _i2.dynamic copyWriteBufferBinding,
    _i2.dynamic uniformBuffer,
    _i2.dynamic uniformBufferBinding,
    _i2.dynamic uniformBufferStart,
    _i2.dynamic uniformBufferSize,
    _i2.dynamic maxVertexUniformBlocks,
    _i2.dynamic maxFragmentUniformBlocks,
    _i2.dynamic maxCombinedUniformBlocks,
    _i2.dynamic maxUniformBufferBindings,
    _i2.dynamic maxUniformBlockSize,
    _i2.dynamic maxCombinedVertexUniformComponents,
    _i2.dynamic maxCombinedFragmentUniformComponents,
    _i2.dynamic uniformBufferOffsetAlignment,
    _i2.dynamic activeUniformBlocks,
    _i2.dynamic uniformType,
    _i2.dynamic uniformSize,
    _i2.dynamic uniformBlockIndex,
    _i2.dynamic uniformOffset,
    _i2.dynamic uniformArrayStride,
    _i2.dynamic uniformMatrixStride,
    _i2.dynamic uniformIsRowMajor,
    _i2.dynamic uniformBlockBinding$,
    _i2.dynamic uniformBlockDataSize,
    _i2.dynamic uniformBlockActiveUniforms,
    _i2.dynamic uniformBlockActiveUniformIndices,
    _i2.dynamic uniformBlockReferencedByVertexShader,
    _i2.dynamic uniformBlockReferencedByFragmentShader,
    _i2.dynamic invalidIndex,
    _i2.dynamic maxVertexOutputComponents,
    _i2.dynamic maxFragmentInputComponents,
    _i2.dynamic maxServerWaitTimeout,
    _i2.dynamic objectType,
    _i2.dynamic syncCondition,
    _i2.dynamic syncStatus,
    _i2.dynamic syncFlags,
    _i2.dynamic syncFence,
    _i2.dynamic syncGpuCommandsComplete,
    _i2.dynamic unsignaled,
    _i2.dynamic signaled,
    _i2.dynamic alreadySignaled,
    _i2.dynamic timeoutExpired,
    _i2.dynamic conditionSatisfied,
    _i2.dynamic waitFailed,
    _i2.dynamic syncFlushCommandsBit,
    _i2.dynamic vertexAttribArrayDivisor,
    _i2.dynamic anySamplesPassed,
    _i2.dynamic anySamplesPassedConservative,
    _i2.dynamic samplerBinding,
    _i2.dynamic rgb10A2ui,
    _i2.dynamic int2101010Rev,
    _i2.dynamic transformFeedback,
    _i2.dynamic transformFeedbackPaused,
    _i2.dynamic transformFeedbackActive,
    _i2.dynamic transformFeedbackBinding,
    _i2.dynamic textureImmutableFormat,
    _i2.dynamic maxElementIndex,
    _i2.dynamic textureImmutableLevels,
    _i2.dynamic timeoutIgnored,
    _i2.dynamic maxClientWaitTimeoutWebgl,
    _i2.dynamic beginQuery,
    _i2.dynamic beginTransformFeedback,
    _i2.dynamic bindBufferBase,
    _i2.dynamic bindBufferRange,
    _i2.dynamic bindSampler,
    _i2.dynamic bindTransformFeedback,
    _i2.dynamic bindVertexArray,
    _i2.dynamic blitFramebuffer,
    _i2.dynamic clearBufferfi,
    _i2.dynamic clientWaitSync,
    _i2.dynamic copyBufferSubData,
    _i2.dynamic copyTexSubImage3D,
    _i2.dynamic createQuery,
    _i2.dynamic createSampler,
    _i2.dynamic createTransformFeedback,
    _i2.dynamic createVertexArray,
    _i2.dynamic deleteQuery,
    _i2.dynamic deleteSampler,
    _i2.dynamic deleteSync,
    _i2.dynamic deleteTransformFeedback,
    _i2.dynamic deleteVertexArray,
    _i2.dynamic drawArraysInstanced,
    _i2.dynamic drawElementsInstanced,
    _i2.dynamic drawRangeElements,
    _i2.dynamic endQuery,
    _i2.dynamic endTransformFeedback,
    _i2.dynamic fenceSync,
    _i2.dynamic framebufferTextureLayer,
    _i2.dynamic getActiveUniformBlockName,
    _i2.dynamic getActiveUniformBlockParameter,
    _i2.dynamic getBufferSubData,
    _i2.dynamic getFragDataLocation,
    _i2.dynamic getIndexedParameter,
    _i2.dynamic getInternalformatParameter,
    _i2.dynamic getQuery,
    _i2.dynamic getQueryParameter,
    _i2.dynamic getSamplerParameter,
    _i2.dynamic getSyncParameter,
    _i2.dynamic getTransformFeedbackVarying,
    _i2.dynamic getUniformBlockIndex,
    _i2.dynamic isQuery,
    _i2.dynamic isSampler,
    _i2.dynamic isSync,
    _i2.dynamic isTransformFeedback,
    _i2.dynamic isVertexArray,
    _i2.dynamic pauseTransformFeedback,
    _i2.dynamic readBuffer,
    _i2.dynamic renderbufferStorageMultisample,
    _i2.dynamic resumeTransformFeedback,
    _i2.dynamic samplerParameterf,
    _i2.dynamic samplerParameteri,
    _i2.dynamic texStorage2D,
    _i2.dynamic texStorage3D,
    _i2.dynamic uniform1ui,
    _i2.dynamic uniform2ui,
    _i2.dynamic uniform3ui,
    _i2.dynamic uniform4ui,
    _i2.dynamic uniformBlockBinding,
    _i2.dynamic vertexAttribDivisor,
    _i2.dynamic vertexAttribI4i,
    _i2.dynamic vertexAttribI4ui,
    _i2.dynamic vertexAttribIPointer,
    _i2.dynamic waitSync,
  });

  factory WebGL2RenderingContextBase({
    _i2.num? readBuffer$,
    _i2.num? unpackRowLength,
    _i2.num? unpackSkipRows,
    _i2.num? unpackSkipPixels,
    _i2.num? packRowLength,
    _i2.num? packSkipRows,
    _i2.num? packSkipPixels,
    _i2.num? color,
    _i2.num? depth,
    _i2.num? stencil,
    _i2.num? red,
    _i2.num? rgb8,
    _i2.num? rgba8,
    _i2.num? rgb10A2,
    _i2.num? textureBinding3d,
    _i2.num? unpackSkipImages,
    _i2.num? unpackImageHeight,
    _i2.num? texture3d,
    _i2.num? textureWrapR,
    _i2.num? max3dTextureSize,
    _i2.num? unsignedInt2101010Rev,
    _i2.num? maxElementsVertices,
    _i2.num? maxElementsIndices,
    _i2.num? textureMinLod,
    _i2.num? textureMaxLod,
    _i2.num? textureBaseLevel,
    _i2.num? textureMaxLevel,
    _i2.num? min,
    _i2.num? max,
    _i2.num? depthComponent24,
    _i2.num? maxTextureLodBias,
    _i2.num? textureCompareMode,
    _i2.num? textureCompareFunc,
    _i2.num? currentQuery,
    _i2.num? queryResult,
    _i2.num? queryResultAvailable,
    _i2.num? streamRead,
    _i2.num? streamCopy,
    _i2.num? staticRead,
    _i2.num? staticCopy,
    _i2.num? dynamicRead,
    _i2.num? dynamicCopy,
    _i2.num? maxDrawBuffers,
    _i2.num? drawBuffer0,
    _i2.num? drawBuffer1,
    _i2.num? drawBuffer2,
    _i2.num? drawBuffer3,
    _i2.num? drawBuffer4,
    _i2.num? drawBuffer5,
    _i2.num? drawBuffer6,
    _i2.num? drawBuffer7,
    _i2.num? drawBuffer8,
    _i2.num? drawBuffer9,
    _i2.num? drawBuffer10,
    _i2.num? drawBuffer11,
    _i2.num? drawBuffer12,
    _i2.num? drawBuffer13,
    _i2.num? drawBuffer14,
    _i2.num? drawBuffer15,
    _i2.num? maxFragmentUniformComponents,
    _i2.num? maxVertexUniformComponents,
    _i2.num? sampler3d,
    _i2.num? sampler2dShadow,
    _i2.num? fragmentShaderDerivativeHint,
    _i2.num? pixelPackBuffer,
    _i2.num? pixelUnpackBuffer,
    _i2.num? pixelPackBufferBinding,
    _i2.num? pixelUnpackBufferBinding,
    _i2.num? floatmaT2x3,
    _i2.num? floatmaT2x4,
    _i2.num? floatmaT3x2,
    _i2.num? floatmaT3x4,
    _i2.num? floatmaT4x2,
    _i2.num? floatmaT4x3,
    _i2.num? srgb,
    _i2.num? srgb8,
    _i2.num? srgb8Alpha8,
    _i2.num? compareRefToTexture,
    _i2.num? rgba32f,
    _i2.num? rgb32f,
    _i2.num? rgba16f,
    _i2.num? rgb16f,
    _i2.num? vertexAttribArrayInteger,
    _i2.num? maxArrayTextureLayers,
    _i2.num? minProgramTexelOffset,
    _i2.num? maxProgramTexelOffset,
    _i2.num? maxVaryingComponents,
    _i2.num? texture2dArray,
    _i2.num? textureBinding2dArray,
    _i2.num? r11fG11fB10f,
    _i2.num? unsignedInt10f11f11fRev,
    _i2.num? rgb9E5,
    _i2.num? unsignedInt5999Rev,
    _i2.num? transformFeedbackBufferMode,
    _i2.num? maxTransformFeedbackSeparateComponents,
    _i2.num? transformFeedbackVaryings$,
    _i2.num? transformFeedbackBufferStart,
    _i2.num? transformFeedbackBufferSize,
    _i2.num? transformFeedbackPrimitivesWritten,
    _i2.num? rasterizerDiscard,
    _i2.num? maxTransformFeedbackInterleavedComponents,
    _i2.num? maxTransformFeedbackSeparateAttribs,
    _i2.num? interleavedAttribs,
    _i2.num? separateAttribs,
    _i2.num? transformFeedbackBuffer,
    _i2.num? transformFeedbackBufferBinding,
    _i2.num? rgba32ui,
    _i2.num? rgb32ui,
    _i2.num? rgba16ui,
    _i2.num? rgb16ui,
    _i2.num? rgba8ui,
    _i2.num? rgb8ui,
    _i2.num? rgba32i,
    _i2.num? rgb32i,
    _i2.num? rgba16i,
    _i2.num? rgb16i,
    _i2.num? rgba8i,
    _i2.num? rgb8i,
    _i2.num? redInteger,
    _i2.num? rgbInteger,
    _i2.num? rgbaInteger,
    _i2.num? sampler2dArray,
    _i2.num? sampler2dArrayShadow,
    _i2.num? samplerCubeShadow,
    _i2.num? unsignedIntVec2,
    _i2.num? unsignedIntVec3,
    _i2.num? unsignedIntVec4,
    _i2.num? intSampler2d,
    _i2.num? intSampler3d,
    _i2.num? intSamplerCube,
    _i2.num? intSampler2dArray,
    _i2.num? unsignedIntSampler2d,
    _i2.num? unsignedIntSampler3d,
    _i2.num? unsignedIntSamplerCube,
    _i2.num? unsignedIntSampler2dArray,
    _i2.num? depthComponent32f,
    _i2.num? depth32fStencil8,
    _i2.num? float32UnsignedInt248Rev,
    _i2.num? framebufferAttachmentColorEncoding,
    _i2.num? framebufferAttachmentComponentType,
    _i2.num? framebufferAttachmentRedSize,
    _i2.num? framebufferAttachmentGreenSize,
    _i2.num? framebufferAttachmentBlueSize,
    _i2.num? framebufferAttachmentAlphaSize,
    _i2.num? framebufferAttachmentDepthSize,
    _i2.num? framebufferAttachmentStencilSize,
    _i2.num? framebufferDefault,
    _i2.num? unsignedInt248,
    _i2.num? depth24Stencil8,
    _i2.num? unsignedNormalized,
    _i2.num? drawFramebufferBinding,
    _i2.num? readFramebuffer,
    _i2.num? drawFramebuffer,
    _i2.num? readFramebufferBinding,
    _i2.num? renderbufferSamples,
    _i2.num? framebufferAttachmentTextureLayer,
    _i2.num? maxColorAttachments,
    _i2.num? colorAttachment1,
    _i2.num? colorAttachment2,
    _i2.num? colorAttachment3,
    _i2.num? colorAttachment4,
    _i2.num? colorAttachment5,
    _i2.num? colorAttachment6,
    _i2.num? colorAttachment7,
    _i2.num? colorAttachment8,
    _i2.num? colorAttachment9,
    _i2.num? colorAttachment10,
    _i2.num? colorAttachment11,
    _i2.num? colorAttachment12,
    _i2.num? colorAttachment13,
    _i2.num? colorAttachment14,
    _i2.num? colorAttachment15,
    _i2.num? framebufferIncompleteMultisample,
    _i2.num? maxSamples,
    _i2.num? halfFloat,
    _i2.num? rg,
    _i2.num? rgInteger,
    _i2.num? r8,
    _i2.num? rg8,
    _i2.num? r16f,
    _i2.num? r32f,
    _i2.num? rg16f,
    _i2.num? rg32f,
    _i2.num? r8i,
    _i2.num? r8ui,
    _i2.num? r16i,
    _i2.num? r16ui,
    _i2.num? r32i,
    _i2.num? r32ui,
    _i2.num? rg8i,
    _i2.num? rg8ui,
    _i2.num? rg16i,
    _i2.num? rg16ui,
    _i2.num? rg32i,
    _i2.num? rg32ui,
    _i2.num? vertexArrayBinding,
    _i2.num? r8Snorm,
    _i2.num? rg8Snorm,
    _i2.num? rgb8Snorm,
    _i2.num? rgba8Snorm,
    _i2.num? signedNormalized,
    _i2.num? copyReadBuffer,
    _i2.num? copyWriteBuffer,
    _i2.num? copyReadBufferBinding,
    _i2.num? copyWriteBufferBinding,
    _i2.num? uniformBuffer,
    _i2.num? uniformBufferBinding,
    _i2.num? uniformBufferStart,
    _i2.num? uniformBufferSize,
    _i2.num? maxVertexUniformBlocks,
    _i2.num? maxFragmentUniformBlocks,
    _i2.num? maxCombinedUniformBlocks,
    _i2.num? maxUniformBufferBindings,
    _i2.num? maxUniformBlockSize,
    _i2.num? maxCombinedVertexUniformComponents,
    _i2.num? maxCombinedFragmentUniformComponents,
    _i2.num? uniformBufferOffsetAlignment,
    _i2.num? activeUniformBlocks,
    _i2.num? uniformType,
    _i2.num? uniformSize,
    _i2.num? uniformBlockIndex,
    _i2.num? uniformOffset,
    _i2.num? uniformArrayStride,
    _i2.num? uniformMatrixStride,
    _i2.num? uniformIsRowMajor,
    _i2.num? uniformBlockBinding$,
    _i2.num? uniformBlockDataSize,
    _i2.num? uniformBlockActiveUniforms,
    _i2.num? uniformBlockActiveUniformIndices,
    _i2.num? uniformBlockReferencedByVertexShader,
    _i2.num? uniformBlockReferencedByFragmentShader,
    _i2.num? invalidIndex,
    _i2.num? maxVertexOutputComponents,
    _i2.num? maxFragmentInputComponents,
    _i2.num? maxServerWaitTimeout,
    _i2.num? objectType,
    _i2.num? syncCondition,
    _i2.num? syncStatus,
    _i2.num? syncFlags,
    _i2.num? syncFence,
    _i2.num? syncGpuCommandsComplete,
    _i2.num? unsignaled,
    _i2.num? signaled,
    _i2.num? alreadySignaled,
    _i2.num? timeoutExpired,
    _i2.num? conditionSatisfied,
    _i2.num? waitFailed,
    _i2.num? syncFlushCommandsBit,
    _i2.num? vertexAttribArrayDivisor,
    _i2.num? anySamplesPassed,
    _i2.num? anySamplesPassedConservative,
    _i2.num? samplerBinding,
    _i2.num? rgb10A2ui,
    _i2.num? int2101010Rev,
    _i2.num? transformFeedback,
    _i2.num? transformFeedbackPaused,
    _i2.num? transformFeedbackActive,
    _i2.num? transformFeedbackBinding,
    _i2.num? textureImmutableFormat,
    _i2.num? maxElementIndex,
    _i2.num? textureImmutableLevels,
    _i2.num? timeoutIgnored,
    _i2.num? maxClientWaitTimeoutWebgl,
    void Function(
      _i2.num,
      _i3.WebGLQuery,
    )? beginQuery,
    void Function(_i2.num)? beginTransformFeedback,
    void Function(
      _i2.num,
      _i2.num, [
      _i3.WebGLBuffer?,
    ])? bindBufferBase,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num, [
      _i3.WebGLBuffer?,
    ])? bindBufferRange,
    void Function(
      _i2.num, [
      _i3.WebGLSampler?,
    ])? bindSampler,
    void Function(
      _i2.num, [
      _i3.WebGLTransformFeedback?,
    ])? bindTransformFeedback,
    void Function([_i3.WebGLVertexArrayObject?])? bindVertexArray,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
    )? blitFramebuffer,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
    )? clearBufferfi,
    _i2.num Function(
      _i3.WebGLSync,
      _i2.num,
      _i2.num,
    )? clientWaitSync,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
    )? copyBufferSubData,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
    )? copyTexSubImage3D,
    _i3.WebGLQuery? Function()? createQuery,
    _i3.WebGLSampler? Function()? createSampler,
    _i3.WebGLTransformFeedback? Function()? createTransformFeedback,
    _i3.WebGLVertexArrayObject? Function()? createVertexArray,
    void Function([_i3.WebGLQuery?])? deleteQuery,
    void Function([_i3.WebGLSampler?])? deleteSampler,
    void Function([_i3.WebGLSync?])? deleteSync,
    void Function([_i3.WebGLTransformFeedback?])? deleteTransformFeedback,
    void Function([_i3.WebGLVertexArrayObject?])? deleteVertexArray,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
    )? drawArraysInstanced,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
    )? drawElementsInstanced,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
    )? drawRangeElements,
    void Function(_i2.num)? endQuery,
    void Function()? endTransformFeedback,
    _i3.WebGLSync? Function(
      _i2.num,
      _i2.num,
    )? fenceSync,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num, [
      _i3.WebGLTexture?,
    ])? framebufferTextureLayer,
    _i2.String? Function(
      _i3.WebGLProgram,
      _i2.num,
    )? getActiveUniformBlockName,
    _i2.dynamic Function(
      _i3.WebGLProgram,
      _i2.num,
      _i2.num,
    )? getActiveUniformBlockParameter,
    void Function(
      _i2.num,
      _i2.num,
      _i9.ArrayBufferView, [
      _i2.num?,
      _i2.num?,
    ])? getBufferSubData,
    _i2.num Function(
      _i3.WebGLProgram,
      _i2.String,
    )? getFragDataLocation,
    _i2.dynamic Function(
      _i2.num,
      _i2.num,
    )? getIndexedParameter,
    _i2.dynamic Function(
      _i2.num,
      _i2.num,
      _i2.num,
    )? getInternalformatParameter,
    _i3.WebGLQuery? Function(
      _i2.num,
      _i2.num,
    )? getQuery,
    _i2.dynamic Function(
      _i3.WebGLQuery,
      _i2.num,
    )? getQueryParameter,
    _i2.dynamic Function(
      _i3.WebGLSampler,
      _i2.num,
    )? getSamplerParameter,
    _i2.dynamic Function(
      _i3.WebGLSync,
      _i2.num,
    )? getSyncParameter,
    _i3.WebGLActiveInfo? Function(
      _i3.WebGLProgram,
      _i2.num,
    )? getTransformFeedbackVarying,
    _i2.num Function(
      _i3.WebGLProgram,
      _i2.String,
    )? getUniformBlockIndex,
    _i2.bool Function([_i3.WebGLQuery?])? isQuery,
    _i2.bool Function([_i3.WebGLSampler?])? isSampler,
    _i2.bool Function([_i3.WebGLSync?])? isSync,
    _i2.bool Function([_i3.WebGLTransformFeedback?])? isTransformFeedback,
    _i2.bool Function([_i3.WebGLVertexArrayObject?])? isVertexArray,
    void Function()? pauseTransformFeedback,
    void Function(_i2.num)? readBuffer,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
    )? renderbufferStorageMultisample,
    void Function()? resumeTransformFeedback,
    void Function(
      _i3.WebGLSampler,
      _i2.num,
      _i2.num,
    )? samplerParameterf,
    void Function(
      _i3.WebGLSampler,
      _i2.num,
      _i2.num,
    )? samplerParameteri,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
    )? texStorage2D,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
    )? texStorage3D,
    void Function(
      _i2.num, [
      _i3.WebGLUniformLocation?,
    ])? uniform1ui,
    void Function(
      _i2.num,
      _i2.num, [
      _i3.WebGLUniformLocation?,
    ])? uniform2ui,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num, [
      _i3.WebGLUniformLocation?,
    ])? uniform3ui,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num, [
      _i3.WebGLUniformLocation?,
    ])? uniform4ui,
    void Function(
      _i3.WebGLProgram,
      _i2.num,
      _i2.num,
    )? uniformBlockBinding,
    void Function(
      _i2.num,
      _i2.num,
    )? vertexAttribDivisor,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
    )? vertexAttribI4i,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
    )? vertexAttribI4ui,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
    )? vertexAttribIPointer,
    void Function(
      _i3.WebGLSync,
      _i2.num,
      _i2.num,
    )? waitSync,
  }) =>
      WebGL2RenderingContextBase._(
        readBuffer$: readBuffer$,
        unpackRowLength: unpackRowLength,
        unpackSkipRows: unpackSkipRows,
        unpackSkipPixels: unpackSkipPixels,
        packRowLength: packRowLength,
        packSkipRows: packSkipRows,
        packSkipPixels: packSkipPixels,
        color: color,
        depth: depth,
        stencil: stencil,
        red: red,
        rgb8: rgb8,
        rgba8: rgba8,
        rgb10A2: rgb10A2,
        textureBinding3d: textureBinding3d,
        unpackSkipImages: unpackSkipImages,
        unpackImageHeight: unpackImageHeight,
        texture3d: texture3d,
        textureWrapR: textureWrapR,
        max3dTextureSize: max3dTextureSize,
        unsignedInt2101010Rev: unsignedInt2101010Rev,
        maxElementsVertices: maxElementsVertices,
        maxElementsIndices: maxElementsIndices,
        textureMinLod: textureMinLod,
        textureMaxLod: textureMaxLod,
        textureBaseLevel: textureBaseLevel,
        textureMaxLevel: textureMaxLevel,
        min: min,
        max: max,
        depthComponent24: depthComponent24,
        maxTextureLodBias: maxTextureLodBias,
        textureCompareMode: textureCompareMode,
        textureCompareFunc: textureCompareFunc,
        currentQuery: currentQuery,
        queryResult: queryResult,
        queryResultAvailable: queryResultAvailable,
        streamRead: streamRead,
        streamCopy: streamCopy,
        staticRead: staticRead,
        staticCopy: staticCopy,
        dynamicRead: dynamicRead,
        dynamicCopy: dynamicCopy,
        maxDrawBuffers: maxDrawBuffers,
        drawBuffer0: drawBuffer0,
        drawBuffer1: drawBuffer1,
        drawBuffer2: drawBuffer2,
        drawBuffer3: drawBuffer3,
        drawBuffer4: drawBuffer4,
        drawBuffer5: drawBuffer5,
        drawBuffer6: drawBuffer6,
        drawBuffer7: drawBuffer7,
        drawBuffer8: drawBuffer8,
        drawBuffer9: drawBuffer9,
        drawBuffer10: drawBuffer10,
        drawBuffer11: drawBuffer11,
        drawBuffer12: drawBuffer12,
        drawBuffer13: drawBuffer13,
        drawBuffer14: drawBuffer14,
        drawBuffer15: drawBuffer15,
        maxFragmentUniformComponents: maxFragmentUniformComponents,
        maxVertexUniformComponents: maxVertexUniformComponents,
        sampler3d: sampler3d,
        sampler2dShadow: sampler2dShadow,
        fragmentShaderDerivativeHint: fragmentShaderDerivativeHint,
        pixelPackBuffer: pixelPackBuffer,
        pixelUnpackBuffer: pixelUnpackBuffer,
        pixelPackBufferBinding: pixelPackBufferBinding,
        pixelUnpackBufferBinding: pixelUnpackBufferBinding,
        floatmaT2x3: floatmaT2x3,
        floatmaT2x4: floatmaT2x4,
        floatmaT3x2: floatmaT3x2,
        floatmaT3x4: floatmaT3x4,
        floatmaT4x2: floatmaT4x2,
        floatmaT4x3: floatmaT4x3,
        srgb: srgb,
        srgb8: srgb8,
        srgb8Alpha8: srgb8Alpha8,
        compareRefToTexture: compareRefToTexture,
        rgba32f: rgba32f,
        rgb32f: rgb32f,
        rgba16f: rgba16f,
        rgb16f: rgb16f,
        vertexAttribArrayInteger: vertexAttribArrayInteger,
        maxArrayTextureLayers: maxArrayTextureLayers,
        minProgramTexelOffset: minProgramTexelOffset,
        maxProgramTexelOffset: maxProgramTexelOffset,
        maxVaryingComponents: maxVaryingComponents,
        texture2dArray: texture2dArray,
        textureBinding2dArray: textureBinding2dArray,
        r11fG11fB10f: r11fG11fB10f,
        unsignedInt10f11f11fRev: unsignedInt10f11f11fRev,
        rgb9E5: rgb9E5,
        unsignedInt5999Rev: unsignedInt5999Rev,
        transformFeedbackBufferMode: transformFeedbackBufferMode,
        maxTransformFeedbackSeparateComponents:
            maxTransformFeedbackSeparateComponents,
        transformFeedbackVaryings$: transformFeedbackVaryings$,
        transformFeedbackBufferStart: transformFeedbackBufferStart,
        transformFeedbackBufferSize: transformFeedbackBufferSize,
        transformFeedbackPrimitivesWritten: transformFeedbackPrimitivesWritten,
        rasterizerDiscard: rasterizerDiscard,
        maxTransformFeedbackInterleavedComponents:
            maxTransformFeedbackInterleavedComponents,
        maxTransformFeedbackSeparateAttribs:
            maxTransformFeedbackSeparateAttribs,
        interleavedAttribs: interleavedAttribs,
        separateAttribs: separateAttribs,
        transformFeedbackBuffer: transformFeedbackBuffer,
        transformFeedbackBufferBinding: transformFeedbackBufferBinding,
        rgba32ui: rgba32ui,
        rgb32ui: rgb32ui,
        rgba16ui: rgba16ui,
        rgb16ui: rgb16ui,
        rgba8ui: rgba8ui,
        rgb8ui: rgb8ui,
        rgba32i: rgba32i,
        rgb32i: rgb32i,
        rgba16i: rgba16i,
        rgb16i: rgb16i,
        rgba8i: rgba8i,
        rgb8i: rgb8i,
        redInteger: redInteger,
        rgbInteger: rgbInteger,
        rgbaInteger: rgbaInteger,
        sampler2dArray: sampler2dArray,
        sampler2dArrayShadow: sampler2dArrayShadow,
        samplerCubeShadow: samplerCubeShadow,
        unsignedIntVec2: unsignedIntVec2,
        unsignedIntVec3: unsignedIntVec3,
        unsignedIntVec4: unsignedIntVec4,
        intSampler2d: intSampler2d,
        intSampler3d: intSampler3d,
        intSamplerCube: intSamplerCube,
        intSampler2dArray: intSampler2dArray,
        unsignedIntSampler2d: unsignedIntSampler2d,
        unsignedIntSampler3d: unsignedIntSampler3d,
        unsignedIntSamplerCube: unsignedIntSamplerCube,
        unsignedIntSampler2dArray: unsignedIntSampler2dArray,
        depthComponent32f: depthComponent32f,
        depth32fStencil8: depth32fStencil8,
        float32UnsignedInt248Rev: float32UnsignedInt248Rev,
        framebufferAttachmentColorEncoding: framebufferAttachmentColorEncoding,
        framebufferAttachmentComponentType: framebufferAttachmentComponentType,
        framebufferAttachmentRedSize: framebufferAttachmentRedSize,
        framebufferAttachmentGreenSize: framebufferAttachmentGreenSize,
        framebufferAttachmentBlueSize: framebufferAttachmentBlueSize,
        framebufferAttachmentAlphaSize: framebufferAttachmentAlphaSize,
        framebufferAttachmentDepthSize: framebufferAttachmentDepthSize,
        framebufferAttachmentStencilSize: framebufferAttachmentStencilSize,
        framebufferDefault: framebufferDefault,
        unsignedInt248: unsignedInt248,
        depth24Stencil8: depth24Stencil8,
        unsignedNormalized: unsignedNormalized,
        drawFramebufferBinding: drawFramebufferBinding,
        readFramebuffer: readFramebuffer,
        drawFramebuffer: drawFramebuffer,
        readFramebufferBinding: readFramebufferBinding,
        renderbufferSamples: renderbufferSamples,
        framebufferAttachmentTextureLayer: framebufferAttachmentTextureLayer,
        maxColorAttachments: maxColorAttachments,
        colorAttachment1: colorAttachment1,
        colorAttachment2: colorAttachment2,
        colorAttachment3: colorAttachment3,
        colorAttachment4: colorAttachment4,
        colorAttachment5: colorAttachment5,
        colorAttachment6: colorAttachment6,
        colorAttachment7: colorAttachment7,
        colorAttachment8: colorAttachment8,
        colorAttachment9: colorAttachment9,
        colorAttachment10: colorAttachment10,
        colorAttachment11: colorAttachment11,
        colorAttachment12: colorAttachment12,
        colorAttachment13: colorAttachment13,
        colorAttachment14: colorAttachment14,
        colorAttachment15: colorAttachment15,
        framebufferIncompleteMultisample: framebufferIncompleteMultisample,
        maxSamples: maxSamples,
        halfFloat: halfFloat,
        rg: rg,
        rgInteger: rgInteger,
        r8: r8,
        rg8: rg8,
        r16f: r16f,
        r32f: r32f,
        rg16f: rg16f,
        rg32f: rg32f,
        r8i: r8i,
        r8ui: r8ui,
        r16i: r16i,
        r16ui: r16ui,
        r32i: r32i,
        r32ui: r32ui,
        rg8i: rg8i,
        rg8ui: rg8ui,
        rg16i: rg16i,
        rg16ui: rg16ui,
        rg32i: rg32i,
        rg32ui: rg32ui,
        vertexArrayBinding: vertexArrayBinding,
        r8Snorm: r8Snorm,
        rg8Snorm: rg8Snorm,
        rgb8Snorm: rgb8Snorm,
        rgba8Snorm: rgba8Snorm,
        signedNormalized: signedNormalized,
        copyReadBuffer: copyReadBuffer,
        copyWriteBuffer: copyWriteBuffer,
        copyReadBufferBinding: copyReadBufferBinding,
        copyWriteBufferBinding: copyWriteBufferBinding,
        uniformBuffer: uniformBuffer,
        uniformBufferBinding: uniformBufferBinding,
        uniformBufferStart: uniformBufferStart,
        uniformBufferSize: uniformBufferSize,
        maxVertexUniformBlocks: maxVertexUniformBlocks,
        maxFragmentUniformBlocks: maxFragmentUniformBlocks,
        maxCombinedUniformBlocks: maxCombinedUniformBlocks,
        maxUniformBufferBindings: maxUniformBufferBindings,
        maxUniformBlockSize: maxUniformBlockSize,
        maxCombinedVertexUniformComponents: maxCombinedVertexUniformComponents,
        maxCombinedFragmentUniformComponents:
            maxCombinedFragmentUniformComponents,
        uniformBufferOffsetAlignment: uniformBufferOffsetAlignment,
        activeUniformBlocks: activeUniformBlocks,
        uniformType: uniformType,
        uniformSize: uniformSize,
        uniformBlockIndex: uniformBlockIndex,
        uniformOffset: uniformOffset,
        uniformArrayStride: uniformArrayStride,
        uniformMatrixStride: uniformMatrixStride,
        uniformIsRowMajor: uniformIsRowMajor,
        uniformBlockBinding$: uniformBlockBinding$,
        uniformBlockDataSize: uniformBlockDataSize,
        uniformBlockActiveUniforms: uniformBlockActiveUniforms,
        uniformBlockActiveUniformIndices: uniformBlockActiveUniformIndices,
        uniformBlockReferencedByVertexShader:
            uniformBlockReferencedByVertexShader,
        uniformBlockReferencedByFragmentShader:
            uniformBlockReferencedByFragmentShader,
        invalidIndex: invalidIndex,
        maxVertexOutputComponents: maxVertexOutputComponents,
        maxFragmentInputComponents: maxFragmentInputComponents,
        maxServerWaitTimeout: maxServerWaitTimeout,
        objectType: objectType,
        syncCondition: syncCondition,
        syncStatus: syncStatus,
        syncFlags: syncFlags,
        syncFence: syncFence,
        syncGpuCommandsComplete: syncGpuCommandsComplete,
        unsignaled: unsignaled,
        signaled: signaled,
        alreadySignaled: alreadySignaled,
        timeoutExpired: timeoutExpired,
        conditionSatisfied: conditionSatisfied,
        waitFailed: waitFailed,
        syncFlushCommandsBit: syncFlushCommandsBit,
        vertexAttribArrayDivisor: vertexAttribArrayDivisor,
        anySamplesPassed: anySamplesPassed,
        anySamplesPassedConservative: anySamplesPassedConservative,
        samplerBinding: samplerBinding,
        rgb10A2ui: rgb10A2ui,
        int2101010Rev: int2101010Rev,
        transformFeedback: transformFeedback,
        transformFeedbackPaused: transformFeedbackPaused,
        transformFeedbackActive: transformFeedbackActive,
        transformFeedbackBinding: transformFeedbackBinding,
        textureImmutableFormat: textureImmutableFormat,
        maxElementIndex: maxElementIndex,
        textureImmutableLevels: textureImmutableLevels,
        timeoutIgnored: timeoutIgnored,
        maxClientWaitTimeoutWebgl: maxClientWaitTimeoutWebgl,
        beginQuery: beginQuery == null ? null : _i4.allowInterop(beginQuery),
        beginTransformFeedback: beginTransformFeedback == null
            ? null
            : _i4.allowInterop(beginTransformFeedback),
        bindBufferBase:
            bindBufferBase == null ? null : _i4.allowInterop(bindBufferBase),
        bindBufferRange:
            bindBufferRange == null ? null : _i4.allowInterop(bindBufferRange),
        bindSampler: bindSampler == null ? null : _i4.allowInterop(bindSampler),
        bindTransformFeedback: bindTransformFeedback == null
            ? null
            : _i4.allowInterop(bindTransformFeedback),
        bindVertexArray:
            bindVertexArray == null ? null : _i4.allowInterop(bindVertexArray),
        blitFramebuffer:
            blitFramebuffer == null ? null : _i4.allowInterop(blitFramebuffer),
        clearBufferfi:
            clearBufferfi == null ? null : _i4.allowInterop(clearBufferfi),
        clientWaitSync:
            clientWaitSync == null ? null : _i4.allowInterop(clientWaitSync),
        copyBufferSubData: copyBufferSubData == null
            ? null
            : _i4.allowInterop(copyBufferSubData),
        copyTexSubImage3D: copyTexSubImage3D == null
            ? null
            : _i4.allowInterop(copyTexSubImage3D),
        createQuery: createQuery == null
            ? null
            : _i4.allowInterop(() => () => createQuery() ?? _i6.undefined),
        createSampler: createSampler == null
            ? null
            : _i4.allowInterop(() => () => createSampler() ?? _i6.undefined),
        createTransformFeedback: createTransformFeedback == null
            ? null
            : _i4.allowInterop(
                () => () => createTransformFeedback() ?? _i6.undefined),
        createVertexArray: createVertexArray == null
            ? null
            : _i4
                .allowInterop(() => () => createVertexArray() ?? _i6.undefined),
        deleteQuery: deleteQuery == null ? null : _i4.allowInterop(deleteQuery),
        deleteSampler:
            deleteSampler == null ? null : _i4.allowInterop(deleteSampler),
        deleteSync: deleteSync == null ? null : _i4.allowInterop(deleteSync),
        deleteTransformFeedback: deleteTransformFeedback == null
            ? null
            : _i4.allowInterop(deleteTransformFeedback),
        deleteVertexArray: deleteVertexArray == null
            ? null
            : _i4.allowInterop(deleteVertexArray),
        drawArraysInstanced: drawArraysInstanced == null
            ? null
            : _i4.allowInterop(drawArraysInstanced),
        drawElementsInstanced: drawElementsInstanced == null
            ? null
            : _i4.allowInterop(drawElementsInstanced),
        drawRangeElements: drawRangeElements == null
            ? null
            : _i4.allowInterop(drawRangeElements),
        endQuery: endQuery == null ? null : _i4.allowInterop(endQuery),
        endTransformFeedback: endTransformFeedback == null
            ? null
            : _i4.allowInterop(endTransformFeedback),
        fenceSync: fenceSync == null
            ? null
            : _i4.allowInterop((
                p0,
                p1,
              ) =>
                () =>
                    fenceSync(
                      p0,
                      p1,
                    ) ??
                    _i6.undefined),
        framebufferTextureLayer: framebufferTextureLayer == null
            ? null
            : _i4.allowInterop(framebufferTextureLayer),
        getActiveUniformBlockName: getActiveUniformBlockName == null
            ? null
            : _i4.allowInterop((
                p0,
                p1,
              ) =>
                () =>
                    getActiveUniformBlockName(
                      p0,
                      p1,
                    ) ??
                    _i6.undefined),
        getActiveUniformBlockParameter: getActiveUniformBlockParameter == null
            ? null
            : _i4.allowInterop(getActiveUniformBlockParameter),
        getBufferSubData: getBufferSubData == null
            ? null
            : _i4.allowInterop(getBufferSubData),
        getFragDataLocation: getFragDataLocation == null
            ? null
            : _i4.allowInterop(getFragDataLocation),
        getIndexedParameter: getIndexedParameter == null
            ? null
            : _i4.allowInterop(getIndexedParameter),
        getInternalformatParameter: getInternalformatParameter == null
            ? null
            : _i4.allowInterop(getInternalformatParameter),
        getQuery: getQuery == null
            ? null
            : _i4.allowInterop((
                p0,
                p1,
              ) =>
                () =>
                    getQuery(
                      p0,
                      p1,
                    ) ??
                    _i6.undefined),
        getQueryParameter: getQueryParameter == null
            ? null
            : _i4.allowInterop(getQueryParameter),
        getSamplerParameter: getSamplerParameter == null
            ? null
            : _i4.allowInterop(getSamplerParameter),
        getSyncParameter: getSyncParameter == null
            ? null
            : _i4.allowInterop(getSyncParameter),
        getTransformFeedbackVarying: getTransformFeedbackVarying == null
            ? null
            : _i4.allowInterop((
                p0,
                p1,
              ) =>
                () =>
                    getTransformFeedbackVarying(
                      p0,
                      p1,
                    ) ??
                    _i6.undefined),
        getUniformBlockIndex: getUniformBlockIndex == null
            ? null
            : _i4.allowInterop(getUniformBlockIndex),
        isQuery: isQuery == null ? null : _i4.allowInterop(isQuery),
        isSampler: isSampler == null ? null : _i4.allowInterop(isSampler),
        isSync: isSync == null ? null : _i4.allowInterop(isSync),
        isTransformFeedback: isTransformFeedback == null
            ? null
            : _i4.allowInterop(isTransformFeedback),
        isVertexArray:
            isVertexArray == null ? null : _i4.allowInterop(isVertexArray),
        pauseTransformFeedback: pauseTransformFeedback == null
            ? null
            : _i4.allowInterop(pauseTransformFeedback),
        readBuffer: readBuffer == null ? null : _i4.allowInterop(readBuffer),
        renderbufferStorageMultisample: renderbufferStorageMultisample == null
            ? null
            : _i4.allowInterop(renderbufferStorageMultisample),
        resumeTransformFeedback: resumeTransformFeedback == null
            ? null
            : _i4.allowInterop(resumeTransformFeedback),
        samplerParameterf: samplerParameterf == null
            ? null
            : _i4.allowInterop(samplerParameterf),
        samplerParameteri: samplerParameteri == null
            ? null
            : _i4.allowInterop(samplerParameteri),
        texStorage2D:
            texStorage2D == null ? null : _i4.allowInterop(texStorage2D),
        texStorage3D:
            texStorage3D == null ? null : _i4.allowInterop(texStorage3D),
        uniform1ui: uniform1ui == null ? null : _i4.allowInterop(uniform1ui),
        uniform2ui: uniform2ui == null ? null : _i4.allowInterop(uniform2ui),
        uniform3ui: uniform3ui == null ? null : _i4.allowInterop(uniform3ui),
        uniform4ui: uniform4ui == null ? null : _i4.allowInterop(uniform4ui),
        uniformBlockBinding: uniformBlockBinding == null
            ? null
            : _i4.allowInterop(uniformBlockBinding),
        vertexAttribDivisor: vertexAttribDivisor == null
            ? null
            : _i4.allowInterop(vertexAttribDivisor),
        vertexAttribI4i:
            vertexAttribI4i == null ? null : _i4.allowInterop(vertexAttribI4i),
        vertexAttribI4ui: vertexAttribI4ui == null
            ? null
            : _i4.allowInterop(vertexAttribI4ui),
        vertexAttribIPointer: vertexAttribIPointer == null
            ? null
            : _i4.allowInterop(vertexAttribIPointer),
        waitSync: waitSync == null ? null : _i4.allowInterop(waitSync),
      );

  static _i2.num get readBuffer => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'READ_BUFFER',
      );
  static _i2.num get unpackRowLength => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'UNPACK_ROW_LENGTH',
      );
  static _i2.num get unpackSkipRows => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'UNPACK_SKIP_ROWS',
      );
  static _i2.num get unpackSkipPixels => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'UNPACK_SKIP_PIXELS',
      );
  static _i2.num get packRowLength => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'PACK_ROW_LENGTH',
      );
  static _i2.num get packSkipRows => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'PACK_SKIP_ROWS',
      );
  static _i2.num get packSkipPixels => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'PACK_SKIP_PIXELS',
      );
  static _i2.num get color => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'COLOR',
      );
  static _i2.num get depth => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'DEPTH',
      );
  static _i2.num get stencil => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'STENCIL',
      );
  static _i2.num get red => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'RED',
      );
  static _i2.num get rgb8 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'RGB8',
      );
  static _i2.num get rgba8 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'RGBA8',
      );
  static _i2.num get rgb10A2 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'RGB10_A2',
      );
  static _i2.num get textureBinding3d => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'TEXTURE_BINDING_3D',
      );
  static _i2.num get unpackSkipImages => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'UNPACK_SKIP_IMAGES',
      );
  static _i2.num get unpackImageHeight => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'UNPACK_IMAGE_HEIGHT',
      );
  static _i2.num get texture3d => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'TEXTURE_3D',
      );
  static _i2.num get textureWrapR => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'TEXTURE_WRAP_R',
      );
  static _i2.num get max3dTextureSize => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'MAX_3D_TEXTURE_SIZE',
      );
  static _i2.num get unsignedInt2101010Rev => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'UNSIGNED_INT_2_10_10_10_REV',
      );
  static _i2.num get maxElementsVertices => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'MAX_ELEMENTS_VERTICES',
      );
  static _i2.num get maxElementsIndices => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'MAX_ELEMENTS_INDICES',
      );
  static _i2.num get textureMinLod => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'TEXTURE_MIN_LOD',
      );
  static _i2.num get textureMaxLod => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'TEXTURE_MAX_LOD',
      );
  static _i2.num get textureBaseLevel => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'TEXTURE_BASE_LEVEL',
      );
  static _i2.num get textureMaxLevel => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'TEXTURE_MAX_LEVEL',
      );
  static _i2.num get min => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'MIN',
      );
  static _i2.num get max => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'MAX',
      );
  static _i2.num get depthComponent24 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'DEPTH_COMPONENT24',
      );
  static _i2.num get maxTextureLodBias => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'MAX_TEXTURE_LOD_BIAS',
      );
  static _i2.num get textureCompareMode => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'TEXTURE_COMPARE_MODE',
      );
  static _i2.num get textureCompareFunc => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'TEXTURE_COMPARE_FUNC',
      );
  static _i2.num get currentQuery => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'CURRENT_QUERY',
      );
  static _i2.num get queryResult => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'QUERY_RESULT',
      );
  static _i2.num get queryResultAvailable => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'QUERY_RESULT_AVAILABLE',
      );
  static _i2.num get streamRead => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'STREAM_READ',
      );
  static _i2.num get streamCopy => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'STREAM_COPY',
      );
  static _i2.num get staticRead => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'STATIC_READ',
      );
  static _i2.num get staticCopy => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'STATIC_COPY',
      );
  static _i2.num get dynamicRead => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'DYNAMIC_READ',
      );
  static _i2.num get dynamicCopy => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'DYNAMIC_COPY',
      );
  static _i2.num get maxDrawBuffers => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'MAX_DRAW_BUFFERS',
      );
  static _i2.num get drawBuffer0 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'DRAW_BUFFER0',
      );
  static _i2.num get drawBuffer1 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'DRAW_BUFFER1',
      );
  static _i2.num get drawBuffer2 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'DRAW_BUFFER2',
      );
  static _i2.num get drawBuffer3 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'DRAW_BUFFER3',
      );
  static _i2.num get drawBuffer4 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'DRAW_BUFFER4',
      );
  static _i2.num get drawBuffer5 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'DRAW_BUFFER5',
      );
  static _i2.num get drawBuffer6 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'DRAW_BUFFER6',
      );
  static _i2.num get drawBuffer7 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'DRAW_BUFFER7',
      );
  static _i2.num get drawBuffer8 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'DRAW_BUFFER8',
      );
  static _i2.num get drawBuffer9 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'DRAW_BUFFER9',
      );
  static _i2.num get drawBuffer10 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'DRAW_BUFFER10',
      );
  static _i2.num get drawBuffer11 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'DRAW_BUFFER11',
      );
  static _i2.num get drawBuffer12 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'DRAW_BUFFER12',
      );
  static _i2.num get drawBuffer13 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'DRAW_BUFFER13',
      );
  static _i2.num get drawBuffer14 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'DRAW_BUFFER14',
      );
  static _i2.num get drawBuffer15 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'DRAW_BUFFER15',
      );
  static _i2.num get maxFragmentUniformComponents => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'MAX_FRAGMENT_UNIFORM_COMPONENTS',
      );
  static _i2.num get maxVertexUniformComponents => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'MAX_VERTEX_UNIFORM_COMPONENTS',
      );
  static _i2.num get sampler3d => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'SAMPLER_3D',
      );
  static _i2.num get sampler2dShadow => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'SAMPLER_2D_SHADOW',
      );
  static _i2.num get fragmentShaderDerivativeHint => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'FRAGMENT_SHADER_DERIVATIVE_HINT',
      );
  static _i2.num get pixelPackBuffer => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'PIXEL_PACK_BUFFER',
      );
  static _i2.num get pixelUnpackBuffer => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'PIXEL_UNPACK_BUFFER',
      );
  static _i2.num get pixelPackBufferBinding => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'PIXEL_PACK_BUFFER_BINDING',
      );
  static _i2.num get pixelUnpackBufferBinding => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'PIXEL_UNPACK_BUFFER_BINDING',
      );
  static _i2.num get floatmaT2x3 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'FLOAT_MAT2x3',
      );
  static _i2.num get floatmaT2x4 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'FLOAT_MAT2x4',
      );
  static _i2.num get floatmaT3x2 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'FLOAT_MAT3x2',
      );
  static _i2.num get floatmaT3x4 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'FLOAT_MAT3x4',
      );
  static _i2.num get floatmaT4x2 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'FLOAT_MAT4x2',
      );
  static _i2.num get floatmaT4x3 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'FLOAT_MAT4x3',
      );
  static _i2.num get srgb => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'SRGB',
      );
  static _i2.num get srgb8 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'SRGB8',
      );
  static _i2.num get srgb8Alpha8 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'SRGB8_ALPHA8',
      );
  static _i2.num get compareRefToTexture => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'COMPARE_REF_TO_TEXTURE',
      );
  static _i2.num get rgba32f => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'RGBA32F',
      );
  static _i2.num get rgb32f => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'RGB32F',
      );
  static _i2.num get rgba16f => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'RGBA16F',
      );
  static _i2.num get rgb16f => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'RGB16F',
      );
  static _i2.num get vertexAttribArrayInteger => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'VERTEX_ATTRIB_ARRAY_INTEGER',
      );
  static _i2.num get maxArrayTextureLayers => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'MAX_ARRAY_TEXTURE_LAYERS',
      );
  static _i2.num get minProgramTexelOffset => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'MIN_PROGRAM_TEXEL_OFFSET',
      );
  static _i2.num get maxProgramTexelOffset => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'MAX_PROGRAM_TEXEL_OFFSET',
      );
  static _i2.num get maxVaryingComponents => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'MAX_VARYING_COMPONENTS',
      );
  static _i2.num get texture2dArray => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'TEXTURE_2D_ARRAY',
      );
  static _i2.num get textureBinding2dArray => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'TEXTURE_BINDING_2D_ARRAY',
      );
  static _i2.num get r11fG11fB10f => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'R11F_G11F_B10F',
      );
  static _i2.num get unsignedInt10f11f11fRev => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'UNSIGNED_INT_10F_11F_11F_REV',
      );
  static _i2.num get rgb9E5 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'RGB9_E5',
      );
  static _i2.num get unsignedInt5999Rev => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'UNSIGNED_INT_5_9_9_9_REV',
      );
  static _i2.num get transformFeedbackBufferMode => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'TRANSFORM_FEEDBACK_BUFFER_MODE',
      );
  static _i2.num get maxTransformFeedbackSeparateComponents => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS',
      );
  static _i2.num get transformFeedbackVaryings => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'TRANSFORM_FEEDBACK_VARYINGS',
      );
  static _i2.num get transformFeedbackBufferStart => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'TRANSFORM_FEEDBACK_BUFFER_START',
      );
  static _i2.num get transformFeedbackBufferSize => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'TRANSFORM_FEEDBACK_BUFFER_SIZE',
      );
  static _i2.num get transformFeedbackPrimitivesWritten => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN',
      );
  static _i2.num get rasterizerDiscard => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'RASTERIZER_DISCARD',
      );
  static _i2.num get maxTransformFeedbackInterleavedComponents =>
      _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS',
      );
  static _i2.num get maxTransformFeedbackSeparateAttribs => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS',
      );
  static _i2.num get interleavedAttribs => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'INTERLEAVED_ATTRIBS',
      );
  static _i2.num get separateAttribs => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'SEPARATE_ATTRIBS',
      );
  static _i2.num get transformFeedbackBuffer => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'TRANSFORM_FEEDBACK_BUFFER',
      );
  static _i2.num get transformFeedbackBufferBinding => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'TRANSFORM_FEEDBACK_BUFFER_BINDING',
      );
  static _i2.num get rgba32ui => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'RGBA32UI',
      );
  static _i2.num get rgb32ui => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'RGB32UI',
      );
  static _i2.num get rgba16ui => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'RGBA16UI',
      );
  static _i2.num get rgb16ui => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'RGB16UI',
      );
  static _i2.num get rgba8ui => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'RGBA8UI',
      );
  static _i2.num get rgb8ui => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'RGB8UI',
      );
  static _i2.num get rgba32i => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'RGBA32I',
      );
  static _i2.num get rgb32i => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'RGB32I',
      );
  static _i2.num get rgba16i => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'RGBA16I',
      );
  static _i2.num get rgb16i => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'RGB16I',
      );
  static _i2.num get rgba8i => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'RGBA8I',
      );
  static _i2.num get rgb8i => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'RGB8I',
      );
  static _i2.num get redInteger => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'RED_INTEGER',
      );
  static _i2.num get rgbInteger => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'RGB_INTEGER',
      );
  static _i2.num get rgbaInteger => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'RGBA_INTEGER',
      );
  static _i2.num get sampler2dArray => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'SAMPLER_2D_ARRAY',
      );
  static _i2.num get sampler2dArrayShadow => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'SAMPLER_2D_ARRAY_SHADOW',
      );
  static _i2.num get samplerCubeShadow => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'SAMPLER_CUBE_SHADOW',
      );
  static _i2.num get unsignedIntVec2 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'UNSIGNED_INT_VEC2',
      );
  static _i2.num get unsignedIntVec3 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'UNSIGNED_INT_VEC3',
      );
  static _i2.num get unsignedIntVec4 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'UNSIGNED_INT_VEC4',
      );
  static _i2.num get intSampler2d => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'INT_SAMPLER_2D',
      );
  static _i2.num get intSampler3d => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'INT_SAMPLER_3D',
      );
  static _i2.num get intSamplerCube => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'INT_SAMPLER_CUBE',
      );
  static _i2.num get intSampler2dArray => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'INT_SAMPLER_2D_ARRAY',
      );
  static _i2.num get unsignedIntSampler2d => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'UNSIGNED_INT_SAMPLER_2D',
      );
  static _i2.num get unsignedIntSampler3d => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'UNSIGNED_INT_SAMPLER_3D',
      );
  static _i2.num get unsignedIntSamplerCube => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'UNSIGNED_INT_SAMPLER_CUBE',
      );
  static _i2.num get unsignedIntSampler2dArray => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'UNSIGNED_INT_SAMPLER_2D_ARRAY',
      );
  static _i2.num get depthComponent32f => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'DEPTH_COMPONENT32F',
      );
  static _i2.num get depth32fStencil8 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'DEPTH32F_STENCIL8',
      );
  static _i2.num get float32UnsignedInt248Rev => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'FLOAT_32_UNSIGNED_INT_24_8_REV',
      );
  static _i2.num get framebufferAttachmentColorEncoding => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING',
      );
  static _i2.num get framebufferAttachmentComponentType => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE',
      );
  static _i2.num get framebufferAttachmentRedSize => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'FRAMEBUFFER_ATTACHMENT_RED_SIZE',
      );
  static _i2.num get framebufferAttachmentGreenSize => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'FRAMEBUFFER_ATTACHMENT_GREEN_SIZE',
      );
  static _i2.num get framebufferAttachmentBlueSize => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'FRAMEBUFFER_ATTACHMENT_BLUE_SIZE',
      );
  static _i2.num get framebufferAttachmentAlphaSize => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE',
      );
  static _i2.num get framebufferAttachmentDepthSize => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE',
      );
  static _i2.num get framebufferAttachmentStencilSize => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE',
      );
  static _i2.num get framebufferDefault => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'FRAMEBUFFER_DEFAULT',
      );
  static _i2.num get unsignedInt248 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'UNSIGNED_INT_24_8',
      );
  static _i2.num get depth24Stencil8 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'DEPTH24_STENCIL8',
      );
  static _i2.num get unsignedNormalized => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'UNSIGNED_NORMALIZED',
      );
  static _i2.num get drawFramebufferBinding => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'DRAW_FRAMEBUFFER_BINDING',
      );
  static _i2.num get readFramebuffer => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'READ_FRAMEBUFFER',
      );
  static _i2.num get drawFramebuffer => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'DRAW_FRAMEBUFFER',
      );
  static _i2.num get readFramebufferBinding => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'READ_FRAMEBUFFER_BINDING',
      );
  static _i2.num get renderbufferSamples => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'RENDERBUFFER_SAMPLES',
      );
  static _i2.num get framebufferAttachmentTextureLayer => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER',
      );
  static _i2.num get maxColorAttachments => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'MAX_COLOR_ATTACHMENTS',
      );
  static _i2.num get colorAttachment1 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'COLOR_ATTACHMENT1',
      );
  static _i2.num get colorAttachment2 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'COLOR_ATTACHMENT2',
      );
  static _i2.num get colorAttachment3 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'COLOR_ATTACHMENT3',
      );
  static _i2.num get colorAttachment4 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'COLOR_ATTACHMENT4',
      );
  static _i2.num get colorAttachment5 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'COLOR_ATTACHMENT5',
      );
  static _i2.num get colorAttachment6 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'COLOR_ATTACHMENT6',
      );
  static _i2.num get colorAttachment7 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'COLOR_ATTACHMENT7',
      );
  static _i2.num get colorAttachment8 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'COLOR_ATTACHMENT8',
      );
  static _i2.num get colorAttachment9 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'COLOR_ATTACHMENT9',
      );
  static _i2.num get colorAttachment10 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'COLOR_ATTACHMENT10',
      );
  static _i2.num get colorAttachment11 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'COLOR_ATTACHMENT11',
      );
  static _i2.num get colorAttachment12 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'COLOR_ATTACHMENT12',
      );
  static _i2.num get colorAttachment13 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'COLOR_ATTACHMENT13',
      );
  static _i2.num get colorAttachment14 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'COLOR_ATTACHMENT14',
      );
  static _i2.num get colorAttachment15 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'COLOR_ATTACHMENT15',
      );
  static _i2.num get framebufferIncompleteMultisample => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'FRAMEBUFFER_INCOMPLETE_MULTISAMPLE',
      );
  static _i2.num get maxSamples => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'MAX_SAMPLES',
      );
  static _i2.num get halfFloat => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'HALF_FLOAT',
      );
  static _i2.num get rg => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'RG',
      );
  static _i2.num get rgInteger => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'RG_INTEGER',
      );
  static _i2.num get r8 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'R8',
      );
  static _i2.num get rg8 => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'RG8',
      );
  static _i2.num get r16f => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'R16F',
      );
  static _i2.num get r32f => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'R32F',
      );
  static _i2.num get rg16f => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'RG16F',
      );
  static _i2.num get rg32f => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'RG32F',
      );
  static _i2.num get r8i => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'R8I',
      );
  static _i2.num get r8ui => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'R8UI',
      );
  static _i2.num get r16i => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'R16I',
      );
  static _i2.num get r16ui => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'R16UI',
      );
  static _i2.num get r32i => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'R32I',
      );
  static _i2.num get r32ui => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'R32UI',
      );
  static _i2.num get rg8i => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'RG8I',
      );
  static _i2.num get rg8ui => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'RG8UI',
      );
  static _i2.num get rg16i => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'RG16I',
      );
  static _i2.num get rg16ui => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'RG16UI',
      );
  static _i2.num get rg32i => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'RG32I',
      );
  static _i2.num get rg32ui => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'RG32UI',
      );
  static _i2.num get vertexArrayBinding => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'VERTEX_ARRAY_BINDING',
      );
  static _i2.num get r8Snorm => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'R8_SNORM',
      );
  static _i2.num get rg8Snorm => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'RG8_SNORM',
      );
  static _i2.num get rgb8Snorm => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'RGB8_SNORM',
      );
  static _i2.num get rgba8Snorm => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'RGBA8_SNORM',
      );
  static _i2.num get signedNormalized => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'SIGNED_NORMALIZED',
      );
  static _i2.num get copyReadBuffer => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'COPY_READ_BUFFER',
      );
  static _i2.num get copyWriteBuffer => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'COPY_WRITE_BUFFER',
      );
  static _i2.num get copyReadBufferBinding => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'COPY_READ_BUFFER_BINDING',
      );
  static _i2.num get copyWriteBufferBinding => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'COPY_WRITE_BUFFER_BINDING',
      );
  static _i2.num get uniformBuffer => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'UNIFORM_BUFFER',
      );
  static _i2.num get uniformBufferBinding => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'UNIFORM_BUFFER_BINDING',
      );
  static _i2.num get uniformBufferStart => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'UNIFORM_BUFFER_START',
      );
  static _i2.num get uniformBufferSize => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'UNIFORM_BUFFER_SIZE',
      );
  static _i2.num get maxVertexUniformBlocks => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'MAX_VERTEX_UNIFORM_BLOCKS',
      );
  static _i2.num get maxFragmentUniformBlocks => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'MAX_FRAGMENT_UNIFORM_BLOCKS',
      );
  static _i2.num get maxCombinedUniformBlocks => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'MAX_COMBINED_UNIFORM_BLOCKS',
      );
  static _i2.num get maxUniformBufferBindings => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'MAX_UNIFORM_BUFFER_BINDINGS',
      );
  static _i2.num get maxUniformBlockSize => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'MAX_UNIFORM_BLOCK_SIZE',
      );
  static _i2.num get maxCombinedVertexUniformComponents => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS',
      );
  static _i2.num get maxCombinedFragmentUniformComponents => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS',
      );
  static _i2.num get uniformBufferOffsetAlignment => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'UNIFORM_BUFFER_OFFSET_ALIGNMENT',
      );
  static _i2.num get activeUniformBlocks => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'ACTIVE_UNIFORM_BLOCKS',
      );
  static _i2.num get uniformType => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'UNIFORM_TYPE',
      );
  static _i2.num get uniformSize => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'UNIFORM_SIZE',
      );
  static _i2.num get uniformBlockIndex => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'UNIFORM_BLOCK_INDEX',
      );
  static _i2.num get uniformOffset => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'UNIFORM_OFFSET',
      );
  static _i2.num get uniformArrayStride => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'UNIFORM_ARRAY_STRIDE',
      );
  static _i2.num get uniformMatrixStride => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'UNIFORM_MATRIX_STRIDE',
      );
  static _i2.num get uniformIsRowMajor => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'UNIFORM_IS_ROW_MAJOR',
      );
  static _i2.num get uniformBlockBinding => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'UNIFORM_BLOCK_BINDING',
      );
  static _i2.num get uniformBlockDataSize => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'UNIFORM_BLOCK_DATA_SIZE',
      );
  static _i2.num get uniformBlockActiveUniforms => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'UNIFORM_BLOCK_ACTIVE_UNIFORMS',
      );
  static _i2.num get uniformBlockActiveUniformIndices => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES',
      );
  static _i2.num get uniformBlockReferencedByVertexShader => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER',
      );
  static _i2.num get uniformBlockReferencedByFragmentShader => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER',
      );
  static _i2.num get invalidIndex => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'INVALID_INDEX',
      );
  static _i2.num get maxVertexOutputComponents => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'MAX_VERTEX_OUTPUT_COMPONENTS',
      );
  static _i2.num get maxFragmentInputComponents => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'MAX_FRAGMENT_INPUT_COMPONENTS',
      );
  static _i2.num get maxServerWaitTimeout => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'MAX_SERVER_WAIT_TIMEOUT',
      );
  static _i2.num get objectType => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'OBJECT_TYPE',
      );
  static _i2.num get syncCondition => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'SYNC_CONDITION',
      );
  static _i2.num get syncStatus => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'SYNC_STATUS',
      );
  static _i2.num get syncFlags => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'SYNC_FLAGS',
      );
  static _i2.num get syncFence => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'SYNC_FENCE',
      );
  static _i2.num get syncGpuCommandsComplete => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'SYNC_GPU_COMMANDS_COMPLETE',
      );
  static _i2.num get unsignaled => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'UNSIGNALED',
      );
  static _i2.num get signaled => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'SIGNALED',
      );
  static _i2.num get alreadySignaled => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'ALREADY_SIGNALED',
      );
  static _i2.num get timeoutExpired => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'TIMEOUT_EXPIRED',
      );
  static _i2.num get conditionSatisfied => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'CONDITION_SATISFIED',
      );
  static _i2.num get waitFailed => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'WAIT_FAILED',
      );
  static _i2.num get syncFlushCommandsBit => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'SYNC_FLUSH_COMMANDS_BIT',
      );
  static _i2.num get vertexAttribArrayDivisor => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'VERTEX_ATTRIB_ARRAY_DIVISOR',
      );
  static _i2.num get anySamplesPassed => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'ANY_SAMPLES_PASSED',
      );
  static _i2.num get anySamplesPassedConservative => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'ANY_SAMPLES_PASSED_CONSERVATIVE',
      );
  static _i2.num get samplerBinding => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'SAMPLER_BINDING',
      );
  static _i2.num get rgb10A2ui => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'RGB10_A2UI',
      );
  static _i2.num get int2101010Rev => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'INT_2_10_10_10_REV',
      );
  static _i2.num get transformFeedback => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'TRANSFORM_FEEDBACK',
      );
  static _i2.num get transformFeedbackPaused => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'TRANSFORM_FEEDBACK_PAUSED',
      );
  static _i2.num get transformFeedbackActive => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'TRANSFORM_FEEDBACK_ACTIVE',
      );
  static _i2.num get transformFeedbackBinding => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'TRANSFORM_FEEDBACK_BINDING',
      );
  static _i2.num get textureImmutableFormat => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'TEXTURE_IMMUTABLE_FORMAT',
      );
  static _i2.num get maxElementIndex => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'MAX_ELEMENT_INDEX',
      );
  static _i2.num get textureImmutableLevels => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'TEXTURE_IMMUTABLE_LEVELS',
      );
  static _i2.num get timeoutIgnored => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'TIMEOUT_IGNORED',
      );
  static _i2.num get maxClientWaitTimeoutWebgl => _i4.getProperty(
        _declaredWebGL2RenderingContextBase,
        'MAX_CLIENT_WAIT_TIMEOUT_WEBGL',
      );
}

_i2.Object get _declaredWebGL2RenderingContextBase => _i4.getProperty(
      _self,
      'WebGL2RenderingContextBase',
    );

extension WebGL2RenderingContextBase$Typings on WebGL2RenderingContextBase {
  _i2.num get readBuffer$ => _i4.getProperty(
        this,
        'READ_BUFFER',
      );
  _i2.num get unpackRowLength => _i4.getProperty(
        this,
        'UNPACK_ROW_LENGTH',
      );
  _i2.num get unpackSkipRows => _i4.getProperty(
        this,
        'UNPACK_SKIP_ROWS',
      );
  _i2.num get unpackSkipPixels => _i4.getProperty(
        this,
        'UNPACK_SKIP_PIXELS',
      );
  _i2.num get packRowLength => _i4.getProperty(
        this,
        'PACK_ROW_LENGTH',
      );
  _i2.num get packSkipRows => _i4.getProperty(
        this,
        'PACK_SKIP_ROWS',
      );
  _i2.num get packSkipPixels => _i4.getProperty(
        this,
        'PACK_SKIP_PIXELS',
      );
  _i2.num get color => _i4.getProperty(
        this,
        'COLOR',
      );
  _i2.num get depth => _i4.getProperty(
        this,
        'DEPTH',
      );
  _i2.num get stencil => _i4.getProperty(
        this,
        'STENCIL',
      );
  _i2.num get red => _i4.getProperty(
        this,
        'RED',
      );
  _i2.num get rgb8 => _i4.getProperty(
        this,
        'RGB8',
      );
  _i2.num get rgba8 => _i4.getProperty(
        this,
        'RGBA8',
      );
  _i2.num get rgb10A2 => _i4.getProperty(
        this,
        'RGB10_A2',
      );
  _i2.num get textureBinding3d => _i4.getProperty(
        this,
        'TEXTURE_BINDING_3D',
      );
  _i2.num get unpackSkipImages => _i4.getProperty(
        this,
        'UNPACK_SKIP_IMAGES',
      );
  _i2.num get unpackImageHeight => _i4.getProperty(
        this,
        'UNPACK_IMAGE_HEIGHT',
      );
  _i2.num get texture3d => _i4.getProperty(
        this,
        'TEXTURE_3D',
      );
  _i2.num get textureWrapR => _i4.getProperty(
        this,
        'TEXTURE_WRAP_R',
      );
  _i2.num get max3dTextureSize => _i4.getProperty(
        this,
        'MAX_3D_TEXTURE_SIZE',
      );
  _i2.num get unsignedInt2101010Rev => _i4.getProperty(
        this,
        'UNSIGNED_INT_2_10_10_10_REV',
      );
  _i2.num get maxElementsVertices => _i4.getProperty(
        this,
        'MAX_ELEMENTS_VERTICES',
      );
  _i2.num get maxElementsIndices => _i4.getProperty(
        this,
        'MAX_ELEMENTS_INDICES',
      );
  _i2.num get textureMinLod => _i4.getProperty(
        this,
        'TEXTURE_MIN_LOD',
      );
  _i2.num get textureMaxLod => _i4.getProperty(
        this,
        'TEXTURE_MAX_LOD',
      );
  _i2.num get textureBaseLevel => _i4.getProperty(
        this,
        'TEXTURE_BASE_LEVEL',
      );
  _i2.num get textureMaxLevel => _i4.getProperty(
        this,
        'TEXTURE_MAX_LEVEL',
      );
  _i2.num get min => _i4.getProperty(
        this,
        'MIN',
      );
  _i2.num get max => _i4.getProperty(
        this,
        'MAX',
      );
  _i2.num get depthComponent24 => _i4.getProperty(
        this,
        'DEPTH_COMPONENT24',
      );
  _i2.num get maxTextureLodBias => _i4.getProperty(
        this,
        'MAX_TEXTURE_LOD_BIAS',
      );
  _i2.num get textureCompareMode => _i4.getProperty(
        this,
        'TEXTURE_COMPARE_MODE',
      );
  _i2.num get textureCompareFunc => _i4.getProperty(
        this,
        'TEXTURE_COMPARE_FUNC',
      );
  _i2.num get currentQuery => _i4.getProperty(
        this,
        'CURRENT_QUERY',
      );
  _i2.num get queryResult => _i4.getProperty(
        this,
        'QUERY_RESULT',
      );
  _i2.num get queryResultAvailable => _i4.getProperty(
        this,
        'QUERY_RESULT_AVAILABLE',
      );
  _i2.num get streamRead => _i4.getProperty(
        this,
        'STREAM_READ',
      );
  _i2.num get streamCopy => _i4.getProperty(
        this,
        'STREAM_COPY',
      );
  _i2.num get staticRead => _i4.getProperty(
        this,
        'STATIC_READ',
      );
  _i2.num get staticCopy => _i4.getProperty(
        this,
        'STATIC_COPY',
      );
  _i2.num get dynamicRead => _i4.getProperty(
        this,
        'DYNAMIC_READ',
      );
  _i2.num get dynamicCopy => _i4.getProperty(
        this,
        'DYNAMIC_COPY',
      );
  _i2.num get maxDrawBuffers => _i4.getProperty(
        this,
        'MAX_DRAW_BUFFERS',
      );
  _i2.num get drawBuffer0 => _i4.getProperty(
        this,
        'DRAW_BUFFER0',
      );
  _i2.num get drawBuffer1 => _i4.getProperty(
        this,
        'DRAW_BUFFER1',
      );
  _i2.num get drawBuffer2 => _i4.getProperty(
        this,
        'DRAW_BUFFER2',
      );
  _i2.num get drawBuffer3 => _i4.getProperty(
        this,
        'DRAW_BUFFER3',
      );
  _i2.num get drawBuffer4 => _i4.getProperty(
        this,
        'DRAW_BUFFER4',
      );
  _i2.num get drawBuffer5 => _i4.getProperty(
        this,
        'DRAW_BUFFER5',
      );
  _i2.num get drawBuffer6 => _i4.getProperty(
        this,
        'DRAW_BUFFER6',
      );
  _i2.num get drawBuffer7 => _i4.getProperty(
        this,
        'DRAW_BUFFER7',
      );
  _i2.num get drawBuffer8 => _i4.getProperty(
        this,
        'DRAW_BUFFER8',
      );
  _i2.num get drawBuffer9 => _i4.getProperty(
        this,
        'DRAW_BUFFER9',
      );
  _i2.num get drawBuffer10 => _i4.getProperty(
        this,
        'DRAW_BUFFER10',
      );
  _i2.num get drawBuffer11 => _i4.getProperty(
        this,
        'DRAW_BUFFER11',
      );
  _i2.num get drawBuffer12 => _i4.getProperty(
        this,
        'DRAW_BUFFER12',
      );
  _i2.num get drawBuffer13 => _i4.getProperty(
        this,
        'DRAW_BUFFER13',
      );
  _i2.num get drawBuffer14 => _i4.getProperty(
        this,
        'DRAW_BUFFER14',
      );
  _i2.num get drawBuffer15 => _i4.getProperty(
        this,
        'DRAW_BUFFER15',
      );
  _i2.num get maxFragmentUniformComponents => _i4.getProperty(
        this,
        'MAX_FRAGMENT_UNIFORM_COMPONENTS',
      );
  _i2.num get maxVertexUniformComponents => _i4.getProperty(
        this,
        'MAX_VERTEX_UNIFORM_COMPONENTS',
      );
  _i2.num get sampler3d => _i4.getProperty(
        this,
        'SAMPLER_3D',
      );
  _i2.num get sampler2dShadow => _i4.getProperty(
        this,
        'SAMPLER_2D_SHADOW',
      );
  _i2.num get fragmentShaderDerivativeHint => _i4.getProperty(
        this,
        'FRAGMENT_SHADER_DERIVATIVE_HINT',
      );
  _i2.num get pixelPackBuffer => _i4.getProperty(
        this,
        'PIXEL_PACK_BUFFER',
      );
  _i2.num get pixelUnpackBuffer => _i4.getProperty(
        this,
        'PIXEL_UNPACK_BUFFER',
      );
  _i2.num get pixelPackBufferBinding => _i4.getProperty(
        this,
        'PIXEL_PACK_BUFFER_BINDING',
      );
  _i2.num get pixelUnpackBufferBinding => _i4.getProperty(
        this,
        'PIXEL_UNPACK_BUFFER_BINDING',
      );
  _i2.num get floatmaT2x3 => _i4.getProperty(
        this,
        'FLOAT_MAT2x3',
      );
  _i2.num get floatmaT2x4 => _i4.getProperty(
        this,
        'FLOAT_MAT2x4',
      );
  _i2.num get floatmaT3x2 => _i4.getProperty(
        this,
        'FLOAT_MAT3x2',
      );
  _i2.num get floatmaT3x4 => _i4.getProperty(
        this,
        'FLOAT_MAT3x4',
      );
  _i2.num get floatmaT4x2 => _i4.getProperty(
        this,
        'FLOAT_MAT4x2',
      );
  _i2.num get floatmaT4x3 => _i4.getProperty(
        this,
        'FLOAT_MAT4x3',
      );
  _i2.num get srgb => _i4.getProperty(
        this,
        'SRGB',
      );
  _i2.num get srgb8 => _i4.getProperty(
        this,
        'SRGB8',
      );
  _i2.num get srgb8Alpha8 => _i4.getProperty(
        this,
        'SRGB8_ALPHA8',
      );
  _i2.num get compareRefToTexture => _i4.getProperty(
        this,
        'COMPARE_REF_TO_TEXTURE',
      );
  _i2.num get rgba32f => _i4.getProperty(
        this,
        'RGBA32F',
      );
  _i2.num get rgb32f => _i4.getProperty(
        this,
        'RGB32F',
      );
  _i2.num get rgba16f => _i4.getProperty(
        this,
        'RGBA16F',
      );
  _i2.num get rgb16f => _i4.getProperty(
        this,
        'RGB16F',
      );
  _i2.num get vertexAttribArrayInteger => _i4.getProperty(
        this,
        'VERTEX_ATTRIB_ARRAY_INTEGER',
      );
  _i2.num get maxArrayTextureLayers => _i4.getProperty(
        this,
        'MAX_ARRAY_TEXTURE_LAYERS',
      );
  _i2.num get minProgramTexelOffset => _i4.getProperty(
        this,
        'MIN_PROGRAM_TEXEL_OFFSET',
      );
  _i2.num get maxProgramTexelOffset => _i4.getProperty(
        this,
        'MAX_PROGRAM_TEXEL_OFFSET',
      );
  _i2.num get maxVaryingComponents => _i4.getProperty(
        this,
        'MAX_VARYING_COMPONENTS',
      );
  _i2.num get texture2dArray => _i4.getProperty(
        this,
        'TEXTURE_2D_ARRAY',
      );
  _i2.num get textureBinding2dArray => _i4.getProperty(
        this,
        'TEXTURE_BINDING_2D_ARRAY',
      );
  _i2.num get r11fG11fB10f => _i4.getProperty(
        this,
        'R11F_G11F_B10F',
      );
  _i2.num get unsignedInt10f11f11fRev => _i4.getProperty(
        this,
        'UNSIGNED_INT_10F_11F_11F_REV',
      );
  _i2.num get rgb9E5 => _i4.getProperty(
        this,
        'RGB9_E5',
      );
  _i2.num get unsignedInt5999Rev => _i4.getProperty(
        this,
        'UNSIGNED_INT_5_9_9_9_REV',
      );
  _i2.num get transformFeedbackBufferMode => _i4.getProperty(
        this,
        'TRANSFORM_FEEDBACK_BUFFER_MODE',
      );
  _i2.num get maxTransformFeedbackSeparateComponents => _i4.getProperty(
        this,
        'MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS',
      );
  _i2.num get transformFeedbackVaryings$ => _i4.getProperty(
        this,
        'TRANSFORM_FEEDBACK_VARYINGS',
      );
  _i2.num get transformFeedbackBufferStart => _i4.getProperty(
        this,
        'TRANSFORM_FEEDBACK_BUFFER_START',
      );
  _i2.num get transformFeedbackBufferSize => _i4.getProperty(
        this,
        'TRANSFORM_FEEDBACK_BUFFER_SIZE',
      );
  _i2.num get transformFeedbackPrimitivesWritten => _i4.getProperty(
        this,
        'TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN',
      );
  _i2.num get rasterizerDiscard => _i4.getProperty(
        this,
        'RASTERIZER_DISCARD',
      );
  _i2.num get maxTransformFeedbackInterleavedComponents => _i4.getProperty(
        this,
        'MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS',
      );
  _i2.num get maxTransformFeedbackSeparateAttribs => _i4.getProperty(
        this,
        'MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS',
      );
  _i2.num get interleavedAttribs => _i4.getProperty(
        this,
        'INTERLEAVED_ATTRIBS',
      );
  _i2.num get separateAttribs => _i4.getProperty(
        this,
        'SEPARATE_ATTRIBS',
      );
  _i2.num get transformFeedbackBuffer => _i4.getProperty(
        this,
        'TRANSFORM_FEEDBACK_BUFFER',
      );
  _i2.num get transformFeedbackBufferBinding => _i4.getProperty(
        this,
        'TRANSFORM_FEEDBACK_BUFFER_BINDING',
      );
  _i2.num get rgba32ui => _i4.getProperty(
        this,
        'RGBA32UI',
      );
  _i2.num get rgb32ui => _i4.getProperty(
        this,
        'RGB32UI',
      );
  _i2.num get rgba16ui => _i4.getProperty(
        this,
        'RGBA16UI',
      );
  _i2.num get rgb16ui => _i4.getProperty(
        this,
        'RGB16UI',
      );
  _i2.num get rgba8ui => _i4.getProperty(
        this,
        'RGBA8UI',
      );
  _i2.num get rgb8ui => _i4.getProperty(
        this,
        'RGB8UI',
      );
  _i2.num get rgba32i => _i4.getProperty(
        this,
        'RGBA32I',
      );
  _i2.num get rgb32i => _i4.getProperty(
        this,
        'RGB32I',
      );
  _i2.num get rgba16i => _i4.getProperty(
        this,
        'RGBA16I',
      );
  _i2.num get rgb16i => _i4.getProperty(
        this,
        'RGB16I',
      );
  _i2.num get rgba8i => _i4.getProperty(
        this,
        'RGBA8I',
      );
  _i2.num get rgb8i => _i4.getProperty(
        this,
        'RGB8I',
      );
  _i2.num get redInteger => _i4.getProperty(
        this,
        'RED_INTEGER',
      );
  _i2.num get rgbInteger => _i4.getProperty(
        this,
        'RGB_INTEGER',
      );
  _i2.num get rgbaInteger => _i4.getProperty(
        this,
        'RGBA_INTEGER',
      );
  _i2.num get sampler2dArray => _i4.getProperty(
        this,
        'SAMPLER_2D_ARRAY',
      );
  _i2.num get sampler2dArrayShadow => _i4.getProperty(
        this,
        'SAMPLER_2D_ARRAY_SHADOW',
      );
  _i2.num get samplerCubeShadow => _i4.getProperty(
        this,
        'SAMPLER_CUBE_SHADOW',
      );
  _i2.num get unsignedIntVec2 => _i4.getProperty(
        this,
        'UNSIGNED_INT_VEC2',
      );
  _i2.num get unsignedIntVec3 => _i4.getProperty(
        this,
        'UNSIGNED_INT_VEC3',
      );
  _i2.num get unsignedIntVec4 => _i4.getProperty(
        this,
        'UNSIGNED_INT_VEC4',
      );
  _i2.num get intSampler2d => _i4.getProperty(
        this,
        'INT_SAMPLER_2D',
      );
  _i2.num get intSampler3d => _i4.getProperty(
        this,
        'INT_SAMPLER_3D',
      );
  _i2.num get intSamplerCube => _i4.getProperty(
        this,
        'INT_SAMPLER_CUBE',
      );
  _i2.num get intSampler2dArray => _i4.getProperty(
        this,
        'INT_SAMPLER_2D_ARRAY',
      );
  _i2.num get unsignedIntSampler2d => _i4.getProperty(
        this,
        'UNSIGNED_INT_SAMPLER_2D',
      );
  _i2.num get unsignedIntSampler3d => _i4.getProperty(
        this,
        'UNSIGNED_INT_SAMPLER_3D',
      );
  _i2.num get unsignedIntSamplerCube => _i4.getProperty(
        this,
        'UNSIGNED_INT_SAMPLER_CUBE',
      );
  _i2.num get unsignedIntSampler2dArray => _i4.getProperty(
        this,
        'UNSIGNED_INT_SAMPLER_2D_ARRAY',
      );
  _i2.num get depthComponent32f => _i4.getProperty(
        this,
        'DEPTH_COMPONENT32F',
      );
  _i2.num get depth32fStencil8 => _i4.getProperty(
        this,
        'DEPTH32F_STENCIL8',
      );
  _i2.num get float32UnsignedInt248Rev => _i4.getProperty(
        this,
        'FLOAT_32_UNSIGNED_INT_24_8_REV',
      );
  _i2.num get framebufferAttachmentColorEncoding => _i4.getProperty(
        this,
        'FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING',
      );
  _i2.num get framebufferAttachmentComponentType => _i4.getProperty(
        this,
        'FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE',
      );
  _i2.num get framebufferAttachmentRedSize => _i4.getProperty(
        this,
        'FRAMEBUFFER_ATTACHMENT_RED_SIZE',
      );
  _i2.num get framebufferAttachmentGreenSize => _i4.getProperty(
        this,
        'FRAMEBUFFER_ATTACHMENT_GREEN_SIZE',
      );
  _i2.num get framebufferAttachmentBlueSize => _i4.getProperty(
        this,
        'FRAMEBUFFER_ATTACHMENT_BLUE_SIZE',
      );
  _i2.num get framebufferAttachmentAlphaSize => _i4.getProperty(
        this,
        'FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE',
      );
  _i2.num get framebufferAttachmentDepthSize => _i4.getProperty(
        this,
        'FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE',
      );
  _i2.num get framebufferAttachmentStencilSize => _i4.getProperty(
        this,
        'FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE',
      );
  _i2.num get framebufferDefault => _i4.getProperty(
        this,
        'FRAMEBUFFER_DEFAULT',
      );
  _i2.num get unsignedInt248 => _i4.getProperty(
        this,
        'UNSIGNED_INT_24_8',
      );
  _i2.num get depth24Stencil8 => _i4.getProperty(
        this,
        'DEPTH24_STENCIL8',
      );
  _i2.num get unsignedNormalized => _i4.getProperty(
        this,
        'UNSIGNED_NORMALIZED',
      );
  _i2.num get drawFramebufferBinding => _i4.getProperty(
        this,
        'DRAW_FRAMEBUFFER_BINDING',
      );
  _i2.num get readFramebuffer => _i4.getProperty(
        this,
        'READ_FRAMEBUFFER',
      );
  _i2.num get drawFramebuffer => _i4.getProperty(
        this,
        'DRAW_FRAMEBUFFER',
      );
  _i2.num get readFramebufferBinding => _i4.getProperty(
        this,
        'READ_FRAMEBUFFER_BINDING',
      );
  _i2.num get renderbufferSamples => _i4.getProperty(
        this,
        'RENDERBUFFER_SAMPLES',
      );
  _i2.num get framebufferAttachmentTextureLayer => _i4.getProperty(
        this,
        'FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER',
      );
  _i2.num get maxColorAttachments => _i4.getProperty(
        this,
        'MAX_COLOR_ATTACHMENTS',
      );
  _i2.num get colorAttachment1 => _i4.getProperty(
        this,
        'COLOR_ATTACHMENT1',
      );
  _i2.num get colorAttachment2 => _i4.getProperty(
        this,
        'COLOR_ATTACHMENT2',
      );
  _i2.num get colorAttachment3 => _i4.getProperty(
        this,
        'COLOR_ATTACHMENT3',
      );
  _i2.num get colorAttachment4 => _i4.getProperty(
        this,
        'COLOR_ATTACHMENT4',
      );
  _i2.num get colorAttachment5 => _i4.getProperty(
        this,
        'COLOR_ATTACHMENT5',
      );
  _i2.num get colorAttachment6 => _i4.getProperty(
        this,
        'COLOR_ATTACHMENT6',
      );
  _i2.num get colorAttachment7 => _i4.getProperty(
        this,
        'COLOR_ATTACHMENT7',
      );
  _i2.num get colorAttachment8 => _i4.getProperty(
        this,
        'COLOR_ATTACHMENT8',
      );
  _i2.num get colorAttachment9 => _i4.getProperty(
        this,
        'COLOR_ATTACHMENT9',
      );
  _i2.num get colorAttachment10 => _i4.getProperty(
        this,
        'COLOR_ATTACHMENT10',
      );
  _i2.num get colorAttachment11 => _i4.getProperty(
        this,
        'COLOR_ATTACHMENT11',
      );
  _i2.num get colorAttachment12 => _i4.getProperty(
        this,
        'COLOR_ATTACHMENT12',
      );
  _i2.num get colorAttachment13 => _i4.getProperty(
        this,
        'COLOR_ATTACHMENT13',
      );
  _i2.num get colorAttachment14 => _i4.getProperty(
        this,
        'COLOR_ATTACHMENT14',
      );
  _i2.num get colorAttachment15 => _i4.getProperty(
        this,
        'COLOR_ATTACHMENT15',
      );
  _i2.num get framebufferIncompleteMultisample => _i4.getProperty(
        this,
        'FRAMEBUFFER_INCOMPLETE_MULTISAMPLE',
      );
  _i2.num get maxSamples => _i4.getProperty(
        this,
        'MAX_SAMPLES',
      );
  _i2.num get halfFloat => _i4.getProperty(
        this,
        'HALF_FLOAT',
      );
  _i2.num get rg => _i4.getProperty(
        this,
        'RG',
      );
  _i2.num get rgInteger => _i4.getProperty(
        this,
        'RG_INTEGER',
      );
  _i2.num get r8 => _i4.getProperty(
        this,
        'R8',
      );
  _i2.num get rg8 => _i4.getProperty(
        this,
        'RG8',
      );
  _i2.num get r16f => _i4.getProperty(
        this,
        'R16F',
      );
  _i2.num get r32f => _i4.getProperty(
        this,
        'R32F',
      );
  _i2.num get rg16f => _i4.getProperty(
        this,
        'RG16F',
      );
  _i2.num get rg32f => _i4.getProperty(
        this,
        'RG32F',
      );
  _i2.num get r8i => _i4.getProperty(
        this,
        'R8I',
      );
  _i2.num get r8ui => _i4.getProperty(
        this,
        'R8UI',
      );
  _i2.num get r16i => _i4.getProperty(
        this,
        'R16I',
      );
  _i2.num get r16ui => _i4.getProperty(
        this,
        'R16UI',
      );
  _i2.num get r32i => _i4.getProperty(
        this,
        'R32I',
      );
  _i2.num get r32ui => _i4.getProperty(
        this,
        'R32UI',
      );
  _i2.num get rg8i => _i4.getProperty(
        this,
        'RG8I',
      );
  _i2.num get rg8ui => _i4.getProperty(
        this,
        'RG8UI',
      );
  _i2.num get rg16i => _i4.getProperty(
        this,
        'RG16I',
      );
  _i2.num get rg16ui => _i4.getProperty(
        this,
        'RG16UI',
      );
  _i2.num get rg32i => _i4.getProperty(
        this,
        'RG32I',
      );
  _i2.num get rg32ui => _i4.getProperty(
        this,
        'RG32UI',
      );
  _i2.num get vertexArrayBinding => _i4.getProperty(
        this,
        'VERTEX_ARRAY_BINDING',
      );
  _i2.num get r8Snorm => _i4.getProperty(
        this,
        'R8_SNORM',
      );
  _i2.num get rg8Snorm => _i4.getProperty(
        this,
        'RG8_SNORM',
      );
  _i2.num get rgb8Snorm => _i4.getProperty(
        this,
        'RGB8_SNORM',
      );
  _i2.num get rgba8Snorm => _i4.getProperty(
        this,
        'RGBA8_SNORM',
      );
  _i2.num get signedNormalized => _i4.getProperty(
        this,
        'SIGNED_NORMALIZED',
      );
  _i2.num get copyReadBuffer => _i4.getProperty(
        this,
        'COPY_READ_BUFFER',
      );
  _i2.num get copyWriteBuffer => _i4.getProperty(
        this,
        'COPY_WRITE_BUFFER',
      );
  _i2.num get copyReadBufferBinding => _i4.getProperty(
        this,
        'COPY_READ_BUFFER_BINDING',
      );
  _i2.num get copyWriteBufferBinding => _i4.getProperty(
        this,
        'COPY_WRITE_BUFFER_BINDING',
      );
  _i2.num get uniformBuffer => _i4.getProperty(
        this,
        'UNIFORM_BUFFER',
      );
  _i2.num get uniformBufferBinding => _i4.getProperty(
        this,
        'UNIFORM_BUFFER_BINDING',
      );
  _i2.num get uniformBufferStart => _i4.getProperty(
        this,
        'UNIFORM_BUFFER_START',
      );
  _i2.num get uniformBufferSize => _i4.getProperty(
        this,
        'UNIFORM_BUFFER_SIZE',
      );
  _i2.num get maxVertexUniformBlocks => _i4.getProperty(
        this,
        'MAX_VERTEX_UNIFORM_BLOCKS',
      );
  _i2.num get maxFragmentUniformBlocks => _i4.getProperty(
        this,
        'MAX_FRAGMENT_UNIFORM_BLOCKS',
      );
  _i2.num get maxCombinedUniformBlocks => _i4.getProperty(
        this,
        'MAX_COMBINED_UNIFORM_BLOCKS',
      );
  _i2.num get maxUniformBufferBindings => _i4.getProperty(
        this,
        'MAX_UNIFORM_BUFFER_BINDINGS',
      );
  _i2.num get maxUniformBlockSize => _i4.getProperty(
        this,
        'MAX_UNIFORM_BLOCK_SIZE',
      );
  _i2.num get maxCombinedVertexUniformComponents => _i4.getProperty(
        this,
        'MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS',
      );
  _i2.num get maxCombinedFragmentUniformComponents => _i4.getProperty(
        this,
        'MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS',
      );
  _i2.num get uniformBufferOffsetAlignment => _i4.getProperty(
        this,
        'UNIFORM_BUFFER_OFFSET_ALIGNMENT',
      );
  _i2.num get activeUniformBlocks => _i4.getProperty(
        this,
        'ACTIVE_UNIFORM_BLOCKS',
      );
  _i2.num get uniformType => _i4.getProperty(
        this,
        'UNIFORM_TYPE',
      );
  _i2.num get uniformSize => _i4.getProperty(
        this,
        'UNIFORM_SIZE',
      );
  _i2.num get uniformBlockIndex => _i4.getProperty(
        this,
        'UNIFORM_BLOCK_INDEX',
      );
  _i2.num get uniformOffset => _i4.getProperty(
        this,
        'UNIFORM_OFFSET',
      );
  _i2.num get uniformArrayStride => _i4.getProperty(
        this,
        'UNIFORM_ARRAY_STRIDE',
      );
  _i2.num get uniformMatrixStride => _i4.getProperty(
        this,
        'UNIFORM_MATRIX_STRIDE',
      );
  _i2.num get uniformIsRowMajor => _i4.getProperty(
        this,
        'UNIFORM_IS_ROW_MAJOR',
      );
  _i2.num get uniformBlockBinding$ => _i4.getProperty(
        this,
        'UNIFORM_BLOCK_BINDING',
      );
  _i2.num get uniformBlockDataSize => _i4.getProperty(
        this,
        'UNIFORM_BLOCK_DATA_SIZE',
      );
  _i2.num get uniformBlockActiveUniforms => _i4.getProperty(
        this,
        'UNIFORM_BLOCK_ACTIVE_UNIFORMS',
      );
  _i2.num get uniformBlockActiveUniformIndices => _i4.getProperty(
        this,
        'UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES',
      );
  _i2.num get uniformBlockReferencedByVertexShader => _i4.getProperty(
        this,
        'UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER',
      );
  _i2.num get uniformBlockReferencedByFragmentShader => _i4.getProperty(
        this,
        'UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER',
      );
  _i2.num get invalidIndex => _i4.getProperty(
        this,
        'INVALID_INDEX',
      );
  _i2.num get maxVertexOutputComponents => _i4.getProperty(
        this,
        'MAX_VERTEX_OUTPUT_COMPONENTS',
      );
  _i2.num get maxFragmentInputComponents => _i4.getProperty(
        this,
        'MAX_FRAGMENT_INPUT_COMPONENTS',
      );
  _i2.num get maxServerWaitTimeout => _i4.getProperty(
        this,
        'MAX_SERVER_WAIT_TIMEOUT',
      );
  _i2.num get objectType => _i4.getProperty(
        this,
        'OBJECT_TYPE',
      );
  _i2.num get syncCondition => _i4.getProperty(
        this,
        'SYNC_CONDITION',
      );
  _i2.num get syncStatus => _i4.getProperty(
        this,
        'SYNC_STATUS',
      );
  _i2.num get syncFlags => _i4.getProperty(
        this,
        'SYNC_FLAGS',
      );
  _i2.num get syncFence => _i4.getProperty(
        this,
        'SYNC_FENCE',
      );
  _i2.num get syncGpuCommandsComplete => _i4.getProperty(
        this,
        'SYNC_GPU_COMMANDS_COMPLETE',
      );
  _i2.num get unsignaled => _i4.getProperty(
        this,
        'UNSIGNALED',
      );
  _i2.num get signaled => _i4.getProperty(
        this,
        'SIGNALED',
      );
  _i2.num get alreadySignaled => _i4.getProperty(
        this,
        'ALREADY_SIGNALED',
      );
  _i2.num get timeoutExpired => _i4.getProperty(
        this,
        'TIMEOUT_EXPIRED',
      );
  _i2.num get conditionSatisfied => _i4.getProperty(
        this,
        'CONDITION_SATISFIED',
      );
  _i2.num get waitFailed => _i4.getProperty(
        this,
        'WAIT_FAILED',
      );
  _i2.num get syncFlushCommandsBit => _i4.getProperty(
        this,
        'SYNC_FLUSH_COMMANDS_BIT',
      );
  _i2.num get vertexAttribArrayDivisor => _i4.getProperty(
        this,
        'VERTEX_ATTRIB_ARRAY_DIVISOR',
      );
  _i2.num get anySamplesPassed => _i4.getProperty(
        this,
        'ANY_SAMPLES_PASSED',
      );
  _i2.num get anySamplesPassedConservative => _i4.getProperty(
        this,
        'ANY_SAMPLES_PASSED_CONSERVATIVE',
      );
  _i2.num get samplerBinding => _i4.getProperty(
        this,
        'SAMPLER_BINDING',
      );
  _i2.num get rgb10A2ui => _i4.getProperty(
        this,
        'RGB10_A2UI',
      );
  _i2.num get int2101010Rev => _i4.getProperty(
        this,
        'INT_2_10_10_10_REV',
      );
  _i2.num get transformFeedback => _i4.getProperty(
        this,
        'TRANSFORM_FEEDBACK',
      );
  _i2.num get transformFeedbackPaused => _i4.getProperty(
        this,
        'TRANSFORM_FEEDBACK_PAUSED',
      );
  _i2.num get transformFeedbackActive => _i4.getProperty(
        this,
        'TRANSFORM_FEEDBACK_ACTIVE',
      );
  _i2.num get transformFeedbackBinding => _i4.getProperty(
        this,
        'TRANSFORM_FEEDBACK_BINDING',
      );
  _i2.num get textureImmutableFormat => _i4.getProperty(
        this,
        'TEXTURE_IMMUTABLE_FORMAT',
      );
  _i2.num get maxElementIndex => _i4.getProperty(
        this,
        'MAX_ELEMENT_INDEX',
      );
  _i2.num get textureImmutableLevels => _i4.getProperty(
        this,
        'TEXTURE_IMMUTABLE_LEVELS',
      );
  _i2.num get timeoutIgnored => _i4.getProperty(
        this,
        'TIMEOUT_IGNORED',
      );
  _i2.num get maxClientWaitTimeoutWebgl => _i4.getProperty(
        this,
        'MAX_CLIENT_WAIT_TIMEOUT_WEBGL',
      );
  set beginQuery(
      void Function(
        _i2.num,
        _i3.WebGLQuery,
      ) value) {
    _i4.setProperty(
      this,
      'beginQuery',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i3.WebGLQuery,
  ) get beginQuery => (
        _i2.num p0,
        _i3.WebGLQuery p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'beginQuery',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set beginTransformFeedback(void Function(_i2.num) value) {
    _i4.setProperty(
      this,
      'beginTransformFeedback',
      _i4.allowInterop(value),
    );
  }

  void Function(_i2.num) get beginTransformFeedback =>
      (_i2.num p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'beginTransformFeedback',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set bindBufferBase(
      void Function(
        _i2.num,
        _i2.num, [
        _i3.WebGLBuffer?,
      ]) value) {
    _i4.setProperty(
      this,
      'bindBufferBase',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num, [
    _i3.WebGLBuffer?,
  ]) get bindBufferBase => (
        _i2.num p0,
        _i2.num p1, [
        _i3.WebGLBuffer? p2,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'bindBufferBase',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2 ?? _i6.undefined,
            ],
          );
  set bindBufferRange(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num, [
        _i3.WebGLBuffer?,
      ]) value) {
    _i4.setProperty(
      this,
      'bindBufferRange',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num, [
    _i3.WebGLBuffer?,
  ]) get bindBufferRange => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p3,
        _i2.num p4, [
        _i3.WebGLBuffer? p2,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'bindBufferRange',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2 ?? _i6.undefined,
              p3,
              p4,
            ],
          );
  set bindSampler(
      void Function(
        _i2.num, [
        _i3.WebGLSampler?,
      ]) value) {
    _i4.setProperty(
      this,
      'bindSampler',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num, [
    _i3.WebGLSampler?,
  ]) get bindSampler => (
        _i2.num p0, [
        _i3.WebGLSampler? p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'bindSampler',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
            ],
          );
  set bindTransformFeedback(
      void Function(
        _i2.num, [
        _i3.WebGLTransformFeedback?,
      ]) value) {
    _i4.setProperty(
      this,
      'bindTransformFeedback',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num, [
    _i3.WebGLTransformFeedback?,
  ]) get bindTransformFeedback => (
        _i2.num p0, [
        _i3.WebGLTransformFeedback? p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'bindTransformFeedback',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
            ],
          );
  set bindVertexArray(void Function([_i3.WebGLVertexArrayObject?]) value) {
    _i4.setProperty(
      this,
      'bindVertexArray',
      _i4.allowInterop(value),
    );
  }

  void Function([_i3.WebGLVertexArrayObject?]) get bindVertexArray =>
      ([_i3.WebGLVertexArrayObject? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'bindVertexArray',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set blitFramebuffer(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'blitFramebuffer',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
  ) get blitFramebuffer => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
        _i2.num p4,
        _i2.num p5,
        _i2.num p6,
        _i2.num p7,
        _i2.num p8,
        _i2.num p9,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'blitFramebuffer',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
              p4,
              p5,
              p6,
              p7,
              p8,
              p9,
            ],
          );
  set clearBufferfi(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'clearBufferfi',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
  ) get clearBufferfi => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'clearBufferfi',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
            ],
          );
  set clientWaitSync(
      _i2.num Function(
        _i3.WebGLSync,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'clientWaitSync',
      _i4.allowInterop(value),
    );
  }

  _i2.num Function(
    _i3.WebGLSync,
    _i2.num,
    _i2.num,
  ) get clientWaitSync => (
        _i3.WebGLSync p0,
        _i2.num p1,
        _i2.num p2,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'clientWaitSync',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
            ],
          );
  set copyBufferSubData(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'copyBufferSubData',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
  ) get copyBufferSubData => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
        _i2.num p4,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'copyBufferSubData',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
              p4,
            ],
          );
  set copyTexSubImage3D(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'copyTexSubImage3D',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
  ) get copyTexSubImage3D => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
        _i2.num p4,
        _i2.num p5,
        _i2.num p6,
        _i2.num p7,
        _i2.num p8,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'copyTexSubImage3D',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
              p4,
              p5,
              p6,
              p7,
              p8,
            ],
          );
  set createQuery(_i3.WebGLQuery? Function() value) {
    _i4.setProperty(
      this,
      'createQuery',
      _i4.allowInterop(() => () => value() ?? _i6.undefined),
    );
  }

  _i3.WebGLQuery? Function() get createQuery => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'createQuery',
        ),
        r'call',
        [this],
      );
  set createSampler(_i3.WebGLSampler? Function() value) {
    _i4.setProperty(
      this,
      'createSampler',
      _i4.allowInterop(() => () => value() ?? _i6.undefined),
    );
  }

  _i3.WebGLSampler? Function() get createSampler => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'createSampler',
        ),
        r'call',
        [this],
      );
  set createTransformFeedback(_i3.WebGLTransformFeedback? Function() value) {
    _i4.setProperty(
      this,
      'createTransformFeedback',
      _i4.allowInterop(() => () => value() ?? _i6.undefined),
    );
  }

  _i3.WebGLTransformFeedback? Function() get createTransformFeedback =>
      () => _i4.callMethod(
            _i4.getProperty(
              this,
              'createTransformFeedback',
            ),
            r'call',
            [this],
          );
  set createVertexArray(_i3.WebGLVertexArrayObject? Function() value) {
    _i4.setProperty(
      this,
      'createVertexArray',
      _i4.allowInterop(() => () => value() ?? _i6.undefined),
    );
  }

  _i3.WebGLVertexArrayObject? Function() get createVertexArray =>
      () => _i4.callMethod(
            _i4.getProperty(
              this,
              'createVertexArray',
            ),
            r'call',
            [this],
          );
  set deleteQuery(void Function([_i3.WebGLQuery?]) value) {
    _i4.setProperty(
      this,
      'deleteQuery',
      _i4.allowInterop(value),
    );
  }

  void Function([_i3.WebGLQuery?]) get deleteQuery =>
      ([_i3.WebGLQuery? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'deleteQuery',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set deleteSampler(void Function([_i3.WebGLSampler?]) value) {
    _i4.setProperty(
      this,
      'deleteSampler',
      _i4.allowInterop(value),
    );
  }

  void Function([_i3.WebGLSampler?]) get deleteSampler =>
      ([_i3.WebGLSampler? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'deleteSampler',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set deleteSync(void Function([_i3.WebGLSync?]) value) {
    _i4.setProperty(
      this,
      'deleteSync',
      _i4.allowInterop(value),
    );
  }

  void Function([_i3.WebGLSync?]) get deleteSync =>
      ([_i3.WebGLSync? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'deleteSync',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set deleteTransformFeedback(
      void Function([_i3.WebGLTransformFeedback?]) value) {
    _i4.setProperty(
      this,
      'deleteTransformFeedback',
      _i4.allowInterop(value),
    );
  }

  void Function([_i3.WebGLTransformFeedback?]) get deleteTransformFeedback =>
      ([_i3.WebGLTransformFeedback? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'deleteTransformFeedback',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set deleteVertexArray(void Function([_i3.WebGLVertexArrayObject?]) value) {
    _i4.setProperty(
      this,
      'deleteVertexArray',
      _i4.allowInterop(value),
    );
  }

  void Function([_i3.WebGLVertexArrayObject?]) get deleteVertexArray =>
      ([_i3.WebGLVertexArrayObject? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'deleteVertexArray',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set drawArraysInstanced(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'drawArraysInstanced',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
  ) get drawArraysInstanced => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'drawArraysInstanced',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
            ],
          );
  set drawElementsInstanced(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'drawElementsInstanced',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
  ) get drawElementsInstanced => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
        _i2.num p4,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'drawElementsInstanced',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
              p4,
            ],
          );
  set drawRangeElements(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'drawRangeElements',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
  ) get drawRangeElements => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
        _i2.num p4,
        _i2.num p5,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'drawRangeElements',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
              p4,
              p5,
            ],
          );
  set endQuery(void Function(_i2.num) value) {
    _i4.setProperty(
      this,
      'endQuery',
      _i4.allowInterop(value),
    );
  }

  void Function(_i2.num) get endQuery => (_i2.num p0) => _i4.callMethod(
        _i4.getProperty(
          this,
          'endQuery',
        ),
        r'call',
        [
          this,
          p0,
        ],
      );
  set endTransformFeedback(void Function() value) {
    _i4.setProperty(
      this,
      'endTransformFeedback',
      _i4.allowInterop(value),
    );
  }

  void Function() get endTransformFeedback => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'endTransformFeedback',
        ),
        r'call',
        [this],
      );
  set fenceSync(
      _i3.WebGLSync? Function(
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'fenceSync',
      _i4.allowInterop((
        p0,
        p1,
      ) =>
          () =>
              value(
                p0,
                p1,
              ) ??
              _i6.undefined),
    );
  }

  _i3.WebGLSync? Function(
    _i2.num,
    _i2.num,
  ) get fenceSync => (
        _i2.num p0,
        _i2.num p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'fenceSync',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set framebufferTextureLayer(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num, [
        _i3.WebGLTexture?,
      ]) value) {
    _i4.setProperty(
      this,
      'framebufferTextureLayer',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num, [
    _i3.WebGLTexture?,
  ]) get framebufferTextureLayer => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p3,
        _i2.num p4, [
        _i3.WebGLTexture? p2,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'framebufferTextureLayer',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2 ?? _i6.undefined,
              p3,
              p4,
            ],
          );
  set getActiveUniformBlockName(
      _i2.String? Function(
        _i3.WebGLProgram,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'getActiveUniformBlockName',
      _i4.allowInterop((
        p0,
        p1,
      ) =>
          () =>
              value(
                p0,
                p1,
              ) ??
              _i6.undefined),
    );
  }

  _i2.String? Function(
    _i3.WebGLProgram,
    _i2.num,
  ) get getActiveUniformBlockName => (
        _i3.WebGLProgram p0,
        _i2.num p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'getActiveUniformBlockName',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set getActiveUniformBlockParameter(
      _i2.dynamic Function(
        _i3.WebGLProgram,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'getActiveUniformBlockParameter',
      _i4.allowInterop(value),
    );
  }

  _i2.dynamic Function(
    _i3.WebGLProgram,
    _i2.num,
    _i2.num,
  ) get getActiveUniformBlockParameter => (
        _i3.WebGLProgram p0,
        _i2.num p1,
        _i2.num p2,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'getActiveUniformBlockParameter',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
            ],
          );
  set getBufferSubData(
      void Function(
        _i2.num,
        _i2.num,
        _i9.ArrayBufferView, [
        _i2.num?,
        _i2.num?,
      ]) value) {
    _i4.setProperty(
      this,
      'getBufferSubData',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i9.ArrayBufferView, [
    _i2.num?,
    _i2.num?,
  ]) get getBufferSubData => (
        _i2.num p0,
        _i2.num p1,
        _i9.ArrayBufferView p2, [
        _i2.num? p3,
        _i2.num? p4,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'getBufferSubData',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3 ?? _i6.undefined ?? _i6.undefined,
              p4 ?? _i6.undefined ?? _i6.undefined,
            ],
          );
  set getFragDataLocation(
      _i2.num Function(
        _i3.WebGLProgram,
        _i2.String,
      ) value) {
    _i4.setProperty(
      this,
      'getFragDataLocation',
      _i4.allowInterop(value),
    );
  }

  _i2.num Function(
    _i3.WebGLProgram,
    _i2.String,
  ) get getFragDataLocation => (
        _i3.WebGLProgram p0,
        _i2.String p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'getFragDataLocation',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set getIndexedParameter(
      _i2.dynamic Function(
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'getIndexedParameter',
      _i4.allowInterop(value),
    );
  }

  _i2.dynamic Function(
    _i2.num,
    _i2.num,
  ) get getIndexedParameter => (
        _i2.num p0,
        _i2.num p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'getIndexedParameter',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set getInternalformatParameter(
      _i2.dynamic Function(
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'getInternalformatParameter',
      _i4.allowInterop(value),
    );
  }

  _i2.dynamic Function(
    _i2.num,
    _i2.num,
    _i2.num,
  ) get getInternalformatParameter => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'getInternalformatParameter',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
            ],
          );
  set getQuery(
      _i3.WebGLQuery? Function(
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'getQuery',
      _i4.allowInterop((
        p0,
        p1,
      ) =>
          () =>
              value(
                p0,
                p1,
              ) ??
              _i6.undefined),
    );
  }

  _i3.WebGLQuery? Function(
    _i2.num,
    _i2.num,
  ) get getQuery => (
        _i2.num p0,
        _i2.num p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'getQuery',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set getQueryParameter(
      _i2.dynamic Function(
        _i3.WebGLQuery,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'getQueryParameter',
      _i4.allowInterop(value),
    );
  }

  _i2.dynamic Function(
    _i3.WebGLQuery,
    _i2.num,
  ) get getQueryParameter => (
        _i3.WebGLQuery p0,
        _i2.num p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'getQueryParameter',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set getSamplerParameter(
      _i2.dynamic Function(
        _i3.WebGLSampler,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'getSamplerParameter',
      _i4.allowInterop(value),
    );
  }

  _i2.dynamic Function(
    _i3.WebGLSampler,
    _i2.num,
  ) get getSamplerParameter => (
        _i3.WebGLSampler p0,
        _i2.num p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'getSamplerParameter',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set getSyncParameter(
      _i2.dynamic Function(
        _i3.WebGLSync,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'getSyncParameter',
      _i4.allowInterop(value),
    );
  }

  _i2.dynamic Function(
    _i3.WebGLSync,
    _i2.num,
  ) get getSyncParameter => (
        _i3.WebGLSync p0,
        _i2.num p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'getSyncParameter',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set getTransformFeedbackVarying(
      _i3.WebGLActiveInfo? Function(
        _i3.WebGLProgram,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'getTransformFeedbackVarying',
      _i4.allowInterop((
        p0,
        p1,
      ) =>
          () =>
              value(
                p0,
                p1,
              ) ??
              _i6.undefined),
    );
  }

  _i3.WebGLActiveInfo? Function(
    _i3.WebGLProgram,
    _i2.num,
  ) get getTransformFeedbackVarying => (
        _i3.WebGLProgram p0,
        _i2.num p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'getTransformFeedbackVarying',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set getUniformBlockIndex(
      _i2.num Function(
        _i3.WebGLProgram,
        _i2.String,
      ) value) {
    _i4.setProperty(
      this,
      'getUniformBlockIndex',
      _i4.allowInterop(value),
    );
  }

  _i2.num Function(
    _i3.WebGLProgram,
    _i2.String,
  ) get getUniformBlockIndex => (
        _i3.WebGLProgram p0,
        _i2.String p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'getUniformBlockIndex',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set isQuery(_i2.bool Function([_i3.WebGLQuery?]) value) {
    _i4.setProperty(
      this,
      'isQuery',
      _i4.allowInterop(value),
    );
  }

  _i2.bool Function([_i3.WebGLQuery?]) get isQuery =>
      ([_i3.WebGLQuery? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'isQuery',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set isSampler(_i2.bool Function([_i3.WebGLSampler?]) value) {
    _i4.setProperty(
      this,
      'isSampler',
      _i4.allowInterop(value),
    );
  }

  _i2.bool Function([_i3.WebGLSampler?]) get isSampler =>
      ([_i3.WebGLSampler? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'isSampler',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set isSync(_i2.bool Function([_i3.WebGLSync?]) value) {
    _i4.setProperty(
      this,
      'isSync',
      _i4.allowInterop(value),
    );
  }

  _i2.bool Function([_i3.WebGLSync?]) get isSync =>
      ([_i3.WebGLSync? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'isSync',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set isTransformFeedback(
      _i2.bool Function([_i3.WebGLTransformFeedback?]) value) {
    _i4.setProperty(
      this,
      'isTransformFeedback',
      _i4.allowInterop(value),
    );
  }

  _i2.bool Function([_i3.WebGLTransformFeedback?]) get isTransformFeedback =>
      ([_i3.WebGLTransformFeedback? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'isTransformFeedback',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set isVertexArray(_i2.bool Function([_i3.WebGLVertexArrayObject?]) value) {
    _i4.setProperty(
      this,
      'isVertexArray',
      _i4.allowInterop(value),
    );
  }

  _i2.bool Function([_i3.WebGLVertexArrayObject?]) get isVertexArray =>
      ([_i3.WebGLVertexArrayObject? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'isVertexArray',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set pauseTransformFeedback(void Function() value) {
    _i4.setProperty(
      this,
      'pauseTransformFeedback',
      _i4.allowInterop(value),
    );
  }

  void Function() get pauseTransformFeedback => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'pauseTransformFeedback',
        ),
        r'call',
        [this],
      );
  set readBuffer(void Function(_i2.num) value) {
    _i4.setProperty(
      this,
      'readBuffer',
      _i4.allowInterop(value),
    );
  }

  void Function(_i2.num) get readBuffer => (_i2.num p0) => _i4.callMethod(
        _i4.getProperty(
          this,
          'readBuffer',
        ),
        r'call',
        [
          this,
          p0,
        ],
      );
  set renderbufferStorageMultisample(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'renderbufferStorageMultisample',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
  ) get renderbufferStorageMultisample => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
        _i2.num p4,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'renderbufferStorageMultisample',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
              p4,
            ],
          );
  set resumeTransformFeedback(void Function() value) {
    _i4.setProperty(
      this,
      'resumeTransformFeedback',
      _i4.allowInterop(value),
    );
  }

  void Function() get resumeTransformFeedback => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'resumeTransformFeedback',
        ),
        r'call',
        [this],
      );
  set samplerParameterf(
      void Function(
        _i3.WebGLSampler,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'samplerParameterf',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i3.WebGLSampler,
    _i2.num,
    _i2.num,
  ) get samplerParameterf => (
        _i3.WebGLSampler p0,
        _i2.num p1,
        _i2.num p2,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'samplerParameterf',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
            ],
          );
  set samplerParameteri(
      void Function(
        _i3.WebGLSampler,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'samplerParameteri',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i3.WebGLSampler,
    _i2.num,
    _i2.num,
  ) get samplerParameteri => (
        _i3.WebGLSampler p0,
        _i2.num p1,
        _i2.num p2,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'samplerParameteri',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
            ],
          );
  set texStorage2D(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'texStorage2D',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
  ) get texStorage2D => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
        _i2.num p4,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'texStorage2D',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
              p4,
            ],
          );
  set texStorage3D(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'texStorage3D',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
  ) get texStorage3D => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
        _i2.num p4,
        _i2.num p5,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'texStorage3D',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
              p4,
              p5,
            ],
          );
  set uniform1ui(
      void Function(
        _i2.num, [
        _i3.WebGLUniformLocation?,
      ]) value) {
    _i4.setProperty(
      this,
      'uniform1ui',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num, [
    _i3.WebGLUniformLocation?,
  ]) get uniform1ui => (
        _i2.num p1, [
        _i3.WebGLUniformLocation? p0,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'uniform1ui',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
              p1,
            ],
          );
  set uniform2ui(
      void Function(
        _i2.num,
        _i2.num, [
        _i3.WebGLUniformLocation?,
      ]) value) {
    _i4.setProperty(
      this,
      'uniform2ui',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num, [
    _i3.WebGLUniformLocation?,
  ]) get uniform2ui => (
        _i2.num p1,
        _i2.num p2, [
        _i3.WebGLUniformLocation? p0,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'uniform2ui',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
              p1,
              p2,
            ],
          );
  set uniform3ui(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num, [
        _i3.WebGLUniformLocation?,
      ]) value) {
    _i4.setProperty(
      this,
      'uniform3ui',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num, [
    _i3.WebGLUniformLocation?,
  ]) get uniform3ui => (
        _i2.num p1,
        _i2.num p2,
        _i2.num p3, [
        _i3.WebGLUniformLocation? p0,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'uniform3ui',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
              p1,
              p2,
              p3,
            ],
          );
  set uniform4ui(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num, [
        _i3.WebGLUniformLocation?,
      ]) value) {
    _i4.setProperty(
      this,
      'uniform4ui',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num, [
    _i3.WebGLUniformLocation?,
  ]) get uniform4ui => (
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
        _i2.num p4, [
        _i3.WebGLUniformLocation? p0,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'uniform4ui',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
              p1,
              p2,
              p3,
              p4,
            ],
          );
  set uniformBlockBinding(
      void Function(
        _i3.WebGLProgram,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'uniformBlockBinding',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i3.WebGLProgram,
    _i2.num,
    _i2.num,
  ) get uniformBlockBinding => (
        _i3.WebGLProgram p0,
        _i2.num p1,
        _i2.num p2,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'uniformBlockBinding',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
            ],
          );
  set vertexAttribDivisor(
      void Function(
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'vertexAttribDivisor',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
  ) get vertexAttribDivisor => (
        _i2.num p0,
        _i2.num p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'vertexAttribDivisor',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set vertexAttribI4i(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'vertexAttribI4i',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
  ) get vertexAttribI4i => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
        _i2.num p4,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'vertexAttribI4i',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
              p4,
            ],
          );
  set vertexAttribI4ui(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'vertexAttribI4ui',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
  ) get vertexAttribI4ui => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
        _i2.num p4,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'vertexAttribI4ui',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
              p4,
            ],
          );
  set vertexAttribIPointer(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'vertexAttribIPointer',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
  ) get vertexAttribIPointer => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
        _i2.num p4,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'vertexAttribIPointer',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
              p4,
            ],
          );
  set waitSync(
      void Function(
        _i3.WebGLSync,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'waitSync',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i3.WebGLSync,
    _i2.num,
    _i2.num,
  ) get waitSync => (
        _i3.WebGLSync p0,
        _i2.num p1,
        _i2.num p2,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'waitSync',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
            ],
          );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/clearBuffer)
  void _clearBufferfv$1(
    _i2.num buffer,
    _i2.num drawbuffer,
    _i2.Object values, [
    _i2.num? srcOffset,
  ]) {
    _i4.callMethod(
      this,
      'clearBufferfv',
      [
        buffer,
        drawbuffer,
        values,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/clearBuffer)
  void _clearBufferfv$2(
    _i2.num buffer,
    _i2.num drawbuffer,
    _i10.Iterable<_i2.num> values, [
    _i2.num? srcOffset,
  ]) {
    _i4.callMethod(
      this,
      'clearBufferfv',
      [
        buffer,
        drawbuffer,
        values,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/clearBuffer)
    void Function(
      _i2.num buffer,
      _i2.num drawbuffer,
      _i2.Object values, [
      _i2.num? srcOffset,
    ]) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/clearBuffer)
    void Function(
      _i2.num buffer,
      _i2.num drawbuffer,
      _i10.Iterable<_i2.num> values, [
      _i2.num? srcOffset,
    ]) $2,
  }) get clearBufferfv => (
        $1: _clearBufferfv$1,
        $2: _clearBufferfv$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/clearBuffer)
  void _clearBufferiv$1(
    _i2.num buffer,
    _i2.num drawbuffer,
    _i2.Object values, [
    _i2.num? srcOffset,
  ]) {
    _i4.callMethod(
      this,
      'clearBufferiv',
      [
        buffer,
        drawbuffer,
        values,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/clearBuffer)
  void _clearBufferiv$2(
    _i2.num buffer,
    _i2.num drawbuffer,
    _i10.Iterable<_i2.num> values, [
    _i2.num? srcOffset,
  ]) {
    _i4.callMethod(
      this,
      'clearBufferiv',
      [
        buffer,
        drawbuffer,
        values,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/clearBuffer)
    void Function(
      _i2.num buffer,
      _i2.num drawbuffer,
      _i2.Object values, [
      _i2.num? srcOffset,
    ]) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/clearBuffer)
    void Function(
      _i2.num buffer,
      _i2.num drawbuffer,
      _i10.Iterable<_i2.num> values, [
      _i2.num? srcOffset,
    ]) $2,
  }) get clearBufferiv => (
        $1: _clearBufferiv$1,
        $2: _clearBufferiv$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/clearBuffer)
  void _clearBufferuiv$1(
    _i2.num buffer,
    _i2.num drawbuffer,
    _i2.Object values, [
    _i2.num? srcOffset,
  ]) {
    _i4.callMethod(
      this,
      'clearBufferuiv',
      [
        buffer,
        drawbuffer,
        values,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/clearBuffer)
  void _clearBufferuiv$2(
    _i2.num buffer,
    _i2.num drawbuffer,
    _i10.Iterable<_i2.num> values, [
    _i2.num? srcOffset,
  ]) {
    _i4.callMethod(
      this,
      'clearBufferuiv',
      [
        buffer,
        drawbuffer,
        values,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/clearBuffer)
    void Function(
      _i2.num buffer,
      _i2.num drawbuffer,
      _i2.Object values, [
      _i2.num? srcOffset,
    ]) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/clearBuffer)
    void Function(
      _i2.num buffer,
      _i2.num drawbuffer,
      _i10.Iterable<_i2.num> values, [
      _i2.num? srcOffset,
    ]) $2,
  }) get clearBufferuiv => (
        $1: _clearBufferuiv$1,
        $2: _clearBufferuiv$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/compressedTexImage3D)
  void _compressedTexImage3D$1(
    _i2.num target,
    _i2.num level,
    _i2.num internalformat,
    _i2.num width,
    _i2.num height,
    _i2.num depth,
    _i2.num border,
    _i2.num imageSize,
    _i2.num offset,
  ) {
    _i4.callMethod(
      this,
      'compressedTexImage3D',
      [
        target,
        level,
        internalformat,
        width,
        height,
        depth,
        border,
        imageSize,
        offset,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/compressedTexImage3D)
  void _compressedTexImage3D$2(
    _i2.num target,
    _i2.num level,
    _i2.num internalformat,
    _i2.num width,
    _i2.num height,
    _i2.num depth,
    _i2.num border,
    _i9.ArrayBufferView srcData, [
    _i2.num? srcOffset,
    _i2.num? srcLengthOverride,
  ]) {
    _i4.callMethod(
      this,
      'compressedTexImage3D',
      [
        target,
        level,
        internalformat,
        width,
        height,
        depth,
        border,
        srcData,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLengthOverride ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/compressedTexImage3D)
    void Function(
      _i2.num target,
      _i2.num level,
      _i2.num internalformat,
      _i2.num width,
      _i2.num height,
      _i2.num depth,
      _i2.num border,
      _i2.num imageSize,
      _i2.num offset,
    ) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/compressedTexImage3D)
    void Function(
      _i2.num target,
      _i2.num level,
      _i2.num internalformat,
      _i2.num width,
      _i2.num height,
      _i2.num depth,
      _i2.num border,
      _i9.ArrayBufferView srcData, [
      _i2.num? srcOffset,
      _i2.num? srcLengthOverride,
    ]) $2,
  }) get compressedTexImage3D => (
        $1: _compressedTexImage3D$1,
        $2: _compressedTexImage3D$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/compressedTexSubImage3D)
  void _compressedTexSubImage3D$1(
    _i2.num target,
    _i2.num level,
    _i2.num xoffset,
    _i2.num yoffset,
    _i2.num zoffset,
    _i2.num width,
    _i2.num height,
    _i2.num depth,
    _i2.num format,
    _i2.num imageSize,
    _i2.num offset,
  ) {
    _i4.callMethod(
      this,
      'compressedTexSubImage3D',
      [
        target,
        level,
        xoffset,
        yoffset,
        zoffset,
        width,
        height,
        depth,
        format,
        imageSize,
        offset,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/compressedTexSubImage3D)
  void _compressedTexSubImage3D$2(
    _i2.num target,
    _i2.num level,
    _i2.num xoffset,
    _i2.num yoffset,
    _i2.num zoffset,
    _i2.num width,
    _i2.num height,
    _i2.num depth,
    _i2.num format,
    _i9.ArrayBufferView srcData, [
    _i2.num? srcOffset,
    _i2.num? srcLengthOverride,
  ]) {
    _i4.callMethod(
      this,
      'compressedTexSubImage3D',
      [
        target,
        level,
        xoffset,
        yoffset,
        zoffset,
        width,
        height,
        depth,
        format,
        srcData,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLengthOverride ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/compressedTexSubImage3D)
    void Function(
      _i2.num target,
      _i2.num level,
      _i2.num xoffset,
      _i2.num yoffset,
      _i2.num zoffset,
      _i2.num width,
      _i2.num height,
      _i2.num depth,
      _i2.num format,
      _i2.num imageSize,
      _i2.num offset,
    ) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/compressedTexSubImage3D)
    void Function(
      _i2.num target,
      _i2.num level,
      _i2.num xoffset,
      _i2.num yoffset,
      _i2.num zoffset,
      _i2.num width,
      _i2.num height,
      _i2.num depth,
      _i2.num format,
      _i9.ArrayBufferView srcData, [
      _i2.num? srcOffset,
      _i2.num? srcLengthOverride,
    ]) $2,
  }) get compressedTexSubImage3D => (
        $1: _compressedTexSubImage3D$1,
        $2: _compressedTexSubImage3D$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/drawBuffers)
  void _drawBuffers$1(_i2.List<_i2.num> buffers) {
    _i4.callMethod(
      this,
      'drawBuffers',
      [buffers],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/drawBuffers)
  void _drawBuffers$2(_i10.Iterable<_i2.num> buffers) {
    _i4.callMethod(
      this,
      'drawBuffers',
      [buffers],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/drawBuffers)
    void Function(_i2.List<_i2.num> buffers) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/drawBuffers)
    void Function(_i10.Iterable<_i2.num> buffers) $2,
  }) get drawBuffers => (
        $1: _drawBuffers$1,
        $2: _drawBuffers$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getActiveUniforms)
  _i2.dynamic _getActiveUniforms$1(
    _i3.WebGLProgram program,
    _i2.List<_i2.num> uniformIndices,
    _i2.num pname,
  ) =>
      _i4.callMethod(
        this,
        'getActiveUniforms',
        [
          program,
          uniformIndices,
          pname,
        ],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getActiveUniforms)
  _i2.dynamic _getActiveUniforms$2(
    _i3.WebGLProgram program,
    _i10.Iterable<_i2.num> uniformIndices,
    _i2.num pname,
  ) =>
      _i4.callMethod(
        this,
        'getActiveUniforms',
        [
          program,
          uniformIndices,
          pname,
        ],
      );

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getActiveUniforms)
    _i2.dynamic Function(
      _i3.WebGLProgram program,
      _i2.List<_i2.num> uniformIndices,
      _i2.num pname,
    ) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getActiveUniforms)
    _i2.dynamic Function(
      _i3.WebGLProgram program,
      _i10.Iterable<_i2.num> uniformIndices,
      _i2.num pname,
    ) $2,
  }) get getActiveUniforms => (
        $1: _getActiveUniforms$1,
        $2: _getActiveUniforms$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getUniformIndices)
  _i2.List<_i2.num>? _getUniformIndices$1(
    _i3.WebGLProgram program,
    _i2.List<_i2.String> uniformNames,
  ) =>
      ((_i4.callMethod(
        this,
        'getUniformIndices',
        [
          program,
          uniformNames,
        ],
      )) as _i2.List?)
          ?.cast();

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getUniformIndices)
  _i10.Iterable<_i2.num>? _getUniformIndices$2(
    _i3.WebGLProgram program,
    _i10.Iterable<_i2.String> uniformNames,
  ) =>
      _i4.callMethod(
        this,
        'getUniformIndices',
        [
          program,
          uniformNames,
        ],
      );

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getUniformIndices)
    _i2.List<_i2.num>? Function(
      _i3.WebGLProgram program,
      _i2.List<_i2.String> uniformNames,
    ) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getUniformIndices)
    _i10.Iterable<_i2.num>? Function(
      _i3.WebGLProgram program,
      _i10.Iterable<_i2.String> uniformNames,
    ) $2,
  }) get getUniformIndices => (
        $1: _getUniformIndices$1,
        $2: _getUniformIndices$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/invalidateFramebuffer)
  void _invalidateFramebuffer$1(
    _i2.num target,
    _i2.List<_i2.num> attachments,
  ) {
    _i4.callMethod(
      this,
      'invalidateFramebuffer',
      [
        target,
        attachments,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/invalidateFramebuffer)
  void _invalidateFramebuffer$2(
    _i2.num target,
    _i10.Iterable<_i2.num> attachments,
  ) {
    _i4.callMethod(
      this,
      'invalidateFramebuffer',
      [
        target,
        attachments,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/invalidateFramebuffer)
    void Function(
      _i2.num target,
      _i2.List<_i2.num> attachments,
    ) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/invalidateFramebuffer)
    void Function(
      _i2.num target,
      _i10.Iterable<_i2.num> attachments,
    ) $2,
  }) get invalidateFramebuffer => (
        $1: _invalidateFramebuffer$1,
        $2: _invalidateFramebuffer$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/invalidateSubFramebuffer)
  void _invalidateSubFramebuffer$1(
    _i2.num target,
    _i2.List<_i2.num> attachments,
    _i2.num x,
    _i2.num y,
    _i2.num width,
    _i2.num height,
  ) {
    _i4.callMethod(
      this,
      'invalidateSubFramebuffer',
      [
        target,
        attachments,
        x,
        y,
        width,
        height,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/invalidateSubFramebuffer)
  void _invalidateSubFramebuffer$2(
    _i2.num target,
    _i10.Iterable<_i2.num> attachments,
    _i2.num x,
    _i2.num y,
    _i2.num width,
    _i2.num height,
  ) {
    _i4.callMethod(
      this,
      'invalidateSubFramebuffer',
      [
        target,
        attachments,
        x,
        y,
        width,
        height,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/invalidateSubFramebuffer)
    void Function(
      _i2.num target,
      _i2.List<_i2.num> attachments,
      _i2.num x,
      _i2.num y,
      _i2.num width,
      _i2.num height,
    ) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/invalidateSubFramebuffer)
    void Function(
      _i2.num target,
      _i10.Iterable<_i2.num> attachments,
      _i2.num x,
      _i2.num y,
      _i2.num width,
      _i2.num height,
    ) $2,
  }) get invalidateSubFramebuffer => (
        $1: _invalidateSubFramebuffer$1,
        $2: _invalidateSubFramebuffer$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/texImage3D)
  void _texImage3D$1(
    _i2.num target,
    _i2.num level,
    _i2.num internalformat,
    _i2.num width,
    _i2.num height,
    _i2.num depth,
    _i2.num border,
    _i2.num format,
    _i2.num type,
    _i2.num pboOffset,
  ) {
    _i4.callMethod(
      this,
      'texImage3D',
      [
        target,
        level,
        internalformat,
        width,
        height,
        depth,
        border,
        format,
        type,
        pboOffset,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/texImage3D)
  void _texImage3D$2(
    _i2.num target,
    _i2.num level,
    _i2.num internalformat,
    _i2.num width,
    _i2.num height,
    _i2.num depth,
    _i2.num border,
    _i2.num format,
    _i2.num type,
    _i2.Object source,
  ) {
    _i4.callMethod(
      this,
      'texImage3D',
      [
        target,
        level,
        internalformat,
        width,
        height,
        depth,
        border,
        format,
        type,
        source,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/texImage3D)
  void _texImage3D$3(
    _i2.num target,
    _i2.num level,
    _i2.num internalformat,
    _i2.num width,
    _i2.num height,
    _i2.num depth,
    _i2.num border,
    _i2.num format,
    _i2.num type, [
    _i9.ArrayBufferView? srcData,
  ]) {
    _i4.callMethod(
      this,
      'texImage3D',
      [
        target,
        level,
        internalformat,
        width,
        height,
        depth,
        border,
        format,
        type,
        srcData ?? _i6.undefined,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/texImage3D)
  void _texImage3D$4(
    _i2.num target,
    _i2.num level,
    _i2.num internalformat,
    _i2.num width,
    _i2.num height,
    _i2.num depth,
    _i2.num border,
    _i2.num format,
    _i2.num type,
    _i9.ArrayBufferView srcData,
    _i2.num srcOffset,
  ) {
    _i4.callMethod(
      this,
      'texImage3D',
      [
        target,
        level,
        internalformat,
        width,
        height,
        depth,
        border,
        format,
        type,
        srcData,
        srcOffset,
      ],
    );
  }

  /// Overload accessor: $1, $2, $3, $4
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/texImage3D)
    void Function(
      _i2.num target,
      _i2.num level,
      _i2.num internalformat,
      _i2.num width,
      _i2.num height,
      _i2.num depth,
      _i2.num border,
      _i2.num format,
      _i2.num type,
      _i2.num pboOffset,
    ) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/texImage3D)
    void Function(
      _i2.num target,
      _i2.num level,
      _i2.num internalformat,
      _i2.num width,
      _i2.num height,
      _i2.num depth,
      _i2.num border,
      _i2.num format,
      _i2.num type,
      _i2.Object source,
    ) $2,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/texImage3D)
    void Function(
      _i2.num target,
      _i2.num level,
      _i2.num internalformat,
      _i2.num width,
      _i2.num height,
      _i2.num depth,
      _i2.num border,
      _i2.num format,
      _i2.num type, [
      _i9.ArrayBufferView? srcData,
    ]) $3,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/texImage3D)
    void Function(
      _i2.num target,
      _i2.num level,
      _i2.num internalformat,
      _i2.num width,
      _i2.num height,
      _i2.num depth,
      _i2.num border,
      _i2.num format,
      _i2.num type,
      _i9.ArrayBufferView srcData,
      _i2.num srcOffset,
    ) $4,
  }) get texImage3D => (
        $1: _texImage3D$1,
        $2: _texImage3D$2,
        $3: _texImage3D$3,
        $4: _texImage3D$4,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/texSubImage3D)
  void _texSubImage3D$1(
    _i2.num target,
    _i2.num level,
    _i2.num xoffset,
    _i2.num yoffset,
    _i2.num zoffset,
    _i2.num width,
    _i2.num height,
    _i2.num depth,
    _i2.num format,
    _i2.num type,
    _i2.num pboOffset,
  ) {
    _i4.callMethod(
      this,
      'texSubImage3D',
      [
        target,
        level,
        xoffset,
        yoffset,
        zoffset,
        width,
        height,
        depth,
        format,
        type,
        pboOffset,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/texSubImage3D)
  void _texSubImage3D$2(
    _i2.num target,
    _i2.num level,
    _i2.num xoffset,
    _i2.num yoffset,
    _i2.num zoffset,
    _i2.num width,
    _i2.num height,
    _i2.num depth,
    _i2.num format,
    _i2.num type,
    _i2.Object source,
  ) {
    _i4.callMethod(
      this,
      'texSubImage3D',
      [
        target,
        level,
        xoffset,
        yoffset,
        zoffset,
        width,
        height,
        depth,
        format,
        type,
        source,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/texSubImage3D)
  void _texSubImage3D$3(
    _i2.num target,
    _i2.num level,
    _i2.num xoffset,
    _i2.num yoffset,
    _i2.num zoffset,
    _i2.num width,
    _i2.num height,
    _i2.num depth,
    _i2.num format,
    _i2.num type, [
    _i9.ArrayBufferView? srcData,
    _i2.num? srcOffset,
  ]) {
    _i4.callMethod(
      this,
      'texSubImage3D',
      [
        target,
        level,
        xoffset,
        yoffset,
        zoffset,
        width,
        height,
        depth,
        format,
        type,
        srcData ?? _i6.undefined,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2, $3
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/texSubImage3D)
    void Function(
      _i2.num target,
      _i2.num level,
      _i2.num xoffset,
      _i2.num yoffset,
      _i2.num zoffset,
      _i2.num width,
      _i2.num height,
      _i2.num depth,
      _i2.num format,
      _i2.num type,
      _i2.num pboOffset,
    ) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/texSubImage3D)
    void Function(
      _i2.num target,
      _i2.num level,
      _i2.num xoffset,
      _i2.num yoffset,
      _i2.num zoffset,
      _i2.num width,
      _i2.num height,
      _i2.num depth,
      _i2.num format,
      _i2.num type,
      _i2.Object source,
    ) $2,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/texSubImage3D)
    void Function(
      _i2.num target,
      _i2.num level,
      _i2.num xoffset,
      _i2.num yoffset,
      _i2.num zoffset,
      _i2.num width,
      _i2.num height,
      _i2.num depth,
      _i2.num format,
      _i2.num type, [
      _i9.ArrayBufferView? srcData,
      _i2.num? srcOffset,
    ]) $3,
  }) get texSubImage3D => (
        $1: _texSubImage3D$1,
        $2: _texSubImage3D$2,
        $3: _texSubImage3D$3,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/transformFeedbackVaryings)
  void _transformFeedbackVaryings$1(
    _i3.WebGLProgram program,
    _i2.List<_i2.String> varyings,
    _i2.num bufferMode,
  ) {
    _i4.callMethod(
      this,
      'transformFeedbackVaryings',
      [
        program,
        varyings,
        bufferMode,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/transformFeedbackVaryings)
  void _transformFeedbackVaryings$2(
    _i3.WebGLProgram program,
    _i10.Iterable<_i2.String> varyings,
    _i2.num bufferMode,
  ) {
    _i4.callMethod(
      this,
      'transformFeedbackVaryings',
      [
        program,
        varyings,
        bufferMode,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/transformFeedbackVaryings)
    void Function(
      _i3.WebGLProgram program,
      _i2.List<_i2.String> varyings,
      _i2.num bufferMode,
    ) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/transformFeedbackVaryings)
    void Function(
      _i3.WebGLProgram program,
      _i10.Iterable<_i2.String> varyings,
      _i2.num bufferMode,
    ) $2,
  }) get transformFeedbackVaryings => (
        $1: _transformFeedbackVaryings$1,
        $2: _transformFeedbackVaryings$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform)
  void _uniform1uiv$1(
    _i3.WebGLUniformLocation? location,
    _i2.Object data, [
    _i2.num? srcOffset,
    _i2.num? srcLength,
  ]) {
    _i4.callMethod(
      this,
      'uniform1uiv',
      [
        location ?? _i6.undefined,
        data,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLength ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform)
  void _uniform1uiv$2(
    _i3.WebGLUniformLocation? location,
    _i10.Iterable<_i2.num> data, [
    _i2.num? srcOffset,
    _i2.num? srcLength,
  ]) {
    _i4.callMethod(
      this,
      'uniform1uiv',
      [
        location ?? _i6.undefined,
        data,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLength ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform)
    void Function(
      _i3.WebGLUniformLocation? location,
      _i2.Object data, [
      _i2.num? srcOffset,
      _i2.num? srcLength,
    ]) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform)
    void Function(
      _i3.WebGLUniformLocation? location,
      _i10.Iterable<_i2.num> data, [
      _i2.num? srcOffset,
      _i2.num? srcLength,
    ]) $2,
  }) get uniform1uiv => (
        $1: _uniform1uiv$1,
        $2: _uniform1uiv$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform)
  void _uniform2uiv$1(
    _i3.WebGLUniformLocation? location,
    _i2.Object data, [
    _i2.num? srcOffset,
    _i2.num? srcLength,
  ]) {
    _i4.callMethod(
      this,
      'uniform2uiv',
      [
        location ?? _i6.undefined,
        data,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLength ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform)
  void _uniform2uiv$2(
    _i3.WebGLUniformLocation? location,
    _i10.Iterable<_i2.num> data, [
    _i2.num? srcOffset,
    _i2.num? srcLength,
  ]) {
    _i4.callMethod(
      this,
      'uniform2uiv',
      [
        location ?? _i6.undefined,
        data,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLength ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform)
    void Function(
      _i3.WebGLUniformLocation? location,
      _i2.Object data, [
      _i2.num? srcOffset,
      _i2.num? srcLength,
    ]) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform)
    void Function(
      _i3.WebGLUniformLocation? location,
      _i10.Iterable<_i2.num> data, [
      _i2.num? srcOffset,
      _i2.num? srcLength,
    ]) $2,
  }) get uniform2uiv => (
        $1: _uniform2uiv$1,
        $2: _uniform2uiv$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform)
  void _uniform3uiv$1(
    _i3.WebGLUniformLocation? location,
    _i2.Object data, [
    _i2.num? srcOffset,
    _i2.num? srcLength,
  ]) {
    _i4.callMethod(
      this,
      'uniform3uiv',
      [
        location ?? _i6.undefined,
        data,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLength ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform)
  void _uniform3uiv$2(
    _i3.WebGLUniformLocation? location,
    _i10.Iterable<_i2.num> data, [
    _i2.num? srcOffset,
    _i2.num? srcLength,
  ]) {
    _i4.callMethod(
      this,
      'uniform3uiv',
      [
        location ?? _i6.undefined,
        data,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLength ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform)
    void Function(
      _i3.WebGLUniformLocation? location,
      _i2.Object data, [
      _i2.num? srcOffset,
      _i2.num? srcLength,
    ]) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform)
    void Function(
      _i3.WebGLUniformLocation? location,
      _i10.Iterable<_i2.num> data, [
      _i2.num? srcOffset,
      _i2.num? srcLength,
    ]) $2,
  }) get uniform3uiv => (
        $1: _uniform3uiv$1,
        $2: _uniform3uiv$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform)
  void _uniform4uiv$1(
    _i3.WebGLUniformLocation? location,
    _i2.Object data, [
    _i2.num? srcOffset,
    _i2.num? srcLength,
  ]) {
    _i4.callMethod(
      this,
      'uniform4uiv',
      [
        location ?? _i6.undefined,
        data,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLength ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform)
  void _uniform4uiv$2(
    _i3.WebGLUniformLocation? location,
    _i10.Iterable<_i2.num> data, [
    _i2.num? srcOffset,
    _i2.num? srcLength,
  ]) {
    _i4.callMethod(
      this,
      'uniform4uiv',
      [
        location ?? _i6.undefined,
        data,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLength ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform)
    void Function(
      _i3.WebGLUniformLocation? location,
      _i2.Object data, [
      _i2.num? srcOffset,
      _i2.num? srcLength,
    ]) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform)
    void Function(
      _i3.WebGLUniformLocation? location,
      _i10.Iterable<_i2.num> data, [
      _i2.num? srcOffset,
      _i2.num? srcLength,
    ]) $2,
  }) get uniform4uiv => (
        $1: _uniform4uiv$1,
        $2: _uniform4uiv$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix)
  void _uniformMatrix2x3fv$1(
    _i3.WebGLUniformLocation? location,
    _i2.bool transpose,
    _i2.Object data, [
    _i2.num? srcOffset,
    _i2.num? srcLength,
  ]) {
    _i4.callMethod(
      this,
      'uniformMatrix2x3fv',
      [
        location ?? _i6.undefined,
        transpose,
        data,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLength ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix)
  void _uniformMatrix2x3fv$2(
    _i3.WebGLUniformLocation? location,
    _i2.bool transpose,
    _i10.Iterable<_i2.num> data, [
    _i2.num? srcOffset,
    _i2.num? srcLength,
  ]) {
    _i4.callMethod(
      this,
      'uniformMatrix2x3fv',
      [
        location ?? _i6.undefined,
        transpose,
        data,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLength ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix)
    void Function(
      _i3.WebGLUniformLocation? location,
      _i2.bool transpose,
      _i2.Object data, [
      _i2.num? srcOffset,
      _i2.num? srcLength,
    ]) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix)
    void Function(
      _i3.WebGLUniformLocation? location,
      _i2.bool transpose,
      _i10.Iterable<_i2.num> data, [
      _i2.num? srcOffset,
      _i2.num? srcLength,
    ]) $2,
  }) get uniformMatrix2x3fv => (
        $1: _uniformMatrix2x3fv$1,
        $2: _uniformMatrix2x3fv$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix)
  void _uniformMatrix2x4fv$1(
    _i3.WebGLUniformLocation? location,
    _i2.bool transpose,
    _i2.Object data, [
    _i2.num? srcOffset,
    _i2.num? srcLength,
  ]) {
    _i4.callMethod(
      this,
      'uniformMatrix2x4fv',
      [
        location ?? _i6.undefined,
        transpose,
        data,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLength ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix)
  void _uniformMatrix2x4fv$2(
    _i3.WebGLUniformLocation? location,
    _i2.bool transpose,
    _i10.Iterable<_i2.num> data, [
    _i2.num? srcOffset,
    _i2.num? srcLength,
  ]) {
    _i4.callMethod(
      this,
      'uniformMatrix2x4fv',
      [
        location ?? _i6.undefined,
        transpose,
        data,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLength ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix)
    void Function(
      _i3.WebGLUniformLocation? location,
      _i2.bool transpose,
      _i2.Object data, [
      _i2.num? srcOffset,
      _i2.num? srcLength,
    ]) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix)
    void Function(
      _i3.WebGLUniformLocation? location,
      _i2.bool transpose,
      _i10.Iterable<_i2.num> data, [
      _i2.num? srcOffset,
      _i2.num? srcLength,
    ]) $2,
  }) get uniformMatrix2x4fv => (
        $1: _uniformMatrix2x4fv$1,
        $2: _uniformMatrix2x4fv$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix)
  void _uniformMatrix3x2fv$1(
    _i3.WebGLUniformLocation? location,
    _i2.bool transpose,
    _i2.Object data, [
    _i2.num? srcOffset,
    _i2.num? srcLength,
  ]) {
    _i4.callMethod(
      this,
      'uniformMatrix3x2fv',
      [
        location ?? _i6.undefined,
        transpose,
        data,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLength ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix)
  void _uniformMatrix3x2fv$2(
    _i3.WebGLUniformLocation? location,
    _i2.bool transpose,
    _i10.Iterable<_i2.num> data, [
    _i2.num? srcOffset,
    _i2.num? srcLength,
  ]) {
    _i4.callMethod(
      this,
      'uniformMatrix3x2fv',
      [
        location ?? _i6.undefined,
        transpose,
        data,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLength ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix)
    void Function(
      _i3.WebGLUniformLocation? location,
      _i2.bool transpose,
      _i2.Object data, [
      _i2.num? srcOffset,
      _i2.num? srcLength,
    ]) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix)
    void Function(
      _i3.WebGLUniformLocation? location,
      _i2.bool transpose,
      _i10.Iterable<_i2.num> data, [
      _i2.num? srcOffset,
      _i2.num? srcLength,
    ]) $2,
  }) get uniformMatrix3x2fv => (
        $1: _uniformMatrix3x2fv$1,
        $2: _uniformMatrix3x2fv$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix)
  void _uniformMatrix3x4fv$1(
    _i3.WebGLUniformLocation? location,
    _i2.bool transpose,
    _i2.Object data, [
    _i2.num? srcOffset,
    _i2.num? srcLength,
  ]) {
    _i4.callMethod(
      this,
      'uniformMatrix3x4fv',
      [
        location ?? _i6.undefined,
        transpose,
        data,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLength ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix)
  void _uniformMatrix3x4fv$2(
    _i3.WebGLUniformLocation? location,
    _i2.bool transpose,
    _i10.Iterable<_i2.num> data, [
    _i2.num? srcOffset,
    _i2.num? srcLength,
  ]) {
    _i4.callMethod(
      this,
      'uniformMatrix3x4fv',
      [
        location ?? _i6.undefined,
        transpose,
        data,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLength ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix)
    void Function(
      _i3.WebGLUniformLocation? location,
      _i2.bool transpose,
      _i2.Object data, [
      _i2.num? srcOffset,
      _i2.num? srcLength,
    ]) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix)
    void Function(
      _i3.WebGLUniformLocation? location,
      _i2.bool transpose,
      _i10.Iterable<_i2.num> data, [
      _i2.num? srcOffset,
      _i2.num? srcLength,
    ]) $2,
  }) get uniformMatrix3x4fv => (
        $1: _uniformMatrix3x4fv$1,
        $2: _uniformMatrix3x4fv$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix)
  void _uniformMatrix4x2fv$1(
    _i3.WebGLUniformLocation? location,
    _i2.bool transpose,
    _i2.Object data, [
    _i2.num? srcOffset,
    _i2.num? srcLength,
  ]) {
    _i4.callMethod(
      this,
      'uniformMatrix4x2fv',
      [
        location ?? _i6.undefined,
        transpose,
        data,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLength ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix)
  void _uniformMatrix4x2fv$2(
    _i3.WebGLUniformLocation? location,
    _i2.bool transpose,
    _i10.Iterable<_i2.num> data, [
    _i2.num? srcOffset,
    _i2.num? srcLength,
  ]) {
    _i4.callMethod(
      this,
      'uniformMatrix4x2fv',
      [
        location ?? _i6.undefined,
        transpose,
        data,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLength ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix)
    void Function(
      _i3.WebGLUniformLocation? location,
      _i2.bool transpose,
      _i2.Object data, [
      _i2.num? srcOffset,
      _i2.num? srcLength,
    ]) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix)
    void Function(
      _i3.WebGLUniformLocation? location,
      _i2.bool transpose,
      _i10.Iterable<_i2.num> data, [
      _i2.num? srcOffset,
      _i2.num? srcLength,
    ]) $2,
  }) get uniformMatrix4x2fv => (
        $1: _uniformMatrix4x2fv$1,
        $2: _uniformMatrix4x2fv$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix)
  void _uniformMatrix4x3fv$1(
    _i3.WebGLUniformLocation? location,
    _i2.bool transpose,
    _i2.Object data, [
    _i2.num? srcOffset,
    _i2.num? srcLength,
  ]) {
    _i4.callMethod(
      this,
      'uniformMatrix4x3fv',
      [
        location ?? _i6.undefined,
        transpose,
        data,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLength ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix)
  void _uniformMatrix4x3fv$2(
    _i3.WebGLUniformLocation? location,
    _i2.bool transpose,
    _i10.Iterable<_i2.num> data, [
    _i2.num? srcOffset,
    _i2.num? srcLength,
  ]) {
    _i4.callMethod(
      this,
      'uniformMatrix4x3fv',
      [
        location ?? _i6.undefined,
        transpose,
        data,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLength ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix)
    void Function(
      _i3.WebGLUniformLocation? location,
      _i2.bool transpose,
      _i2.Object data, [
      _i2.num? srcOffset,
      _i2.num? srcLength,
    ]) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix)
    void Function(
      _i3.WebGLUniformLocation? location,
      _i2.bool transpose,
      _i10.Iterable<_i2.num> data, [
      _i2.num? srcOffset,
      _i2.num? srcLength,
    ]) $2,
  }) get uniformMatrix4x3fv => (
        $1: _uniformMatrix4x3fv$1,
        $2: _uniformMatrix4x3fv$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/vertexAttribI)
  void _vertexAttribI4iv$1(
    _i2.num index,
    _i2.Object values,
  ) {
    _i4.callMethod(
      this,
      'vertexAttribI4iv',
      [
        index,
        values,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/vertexAttribI)
  void _vertexAttribI4iv$2(
    _i2.num index,
    _i10.Iterable<_i2.num> values,
  ) {
    _i4.callMethod(
      this,
      'vertexAttribI4iv',
      [
        index,
        values,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/vertexAttribI)
    void Function(
      _i2.num index,
      _i2.Object values,
    ) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/vertexAttribI)
    void Function(
      _i2.num index,
      _i10.Iterable<_i2.num> values,
    ) $2,
  }) get vertexAttribI4iv => (
        $1: _vertexAttribI4iv$1,
        $2: _vertexAttribI4iv$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/vertexAttribI)
  void _vertexAttribI4uiv$1(
    _i2.num index,
    _i2.Object values,
  ) {
    _i4.callMethod(
      this,
      'vertexAttribI4uiv',
      [
        index,
        values,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/vertexAttribI)
  void _vertexAttribI4uiv$2(
    _i2.num index,
    _i10.Iterable<_i2.num> values,
  ) {
    _i4.callMethod(
      this,
      'vertexAttribI4uiv',
      [
        index,
        values,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/vertexAttribI)
    void Function(
      _i2.num index,
      _i2.Object values,
    ) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/vertexAttribI)
    void Function(
      _i2.num index,
      _i10.Iterable<_i2.num> values,
    ) $2,
  }) get vertexAttribI4uiv => (
        $1: _vertexAttribI4uiv$1,
        $2: _vertexAttribI4uiv$2,
      );
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class WebGL2RenderingContextOverloads {
  external factory WebGL2RenderingContextOverloads._();

  factory WebGL2RenderingContextOverloads() =>
      WebGL2RenderingContextOverloads._();
}

extension WebGL2RenderingContextOverloads$Typings
    on WebGL2RenderingContextOverloads {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bufferData)
  void _bufferData$1(
    _i2.num target,
    _i2.num size,
    _i2.num usage,
  ) {
    _i4.callMethod(
      this,
      'bufferData',
      [
        target,
        size,
        usage,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bufferData)
  void _bufferData$2(
    _i2.num target,
    _i2.num usage, [
    _i2.Object? srcData,
  ]) {
    _i4.callMethod(
      this,
      'bufferData',
      [
        target,
        srcData ?? _i6.undefined ?? _i6.undefined,
        usage,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bufferData)
  void _bufferData$3(
    _i2.num target,
    _i9.ArrayBufferView srcData,
    _i2.num usage,
    _i2.num srcOffset, [
    _i2.num? length,
  ]) {
    _i4.callMethod(
      this,
      'bufferData',
      [
        target,
        srcData,
        usage,
        srcOffset,
        length ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2, $3
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bufferData)
    void Function(
      _i2.num target,
      _i2.num size,
      _i2.num usage,
    ) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bufferData)
    void Function(
      _i2.num target,
      _i2.num usage, [
      _i2.Object? srcData,
    ]) $2,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bufferData)
    void Function(
      _i2.num target,
      _i9.ArrayBufferView srcData,
      _i2.num usage,
      _i2.num srcOffset, [
      _i2.num? length,
    ]) $3,
  }) get bufferData => (
        $1: _bufferData$1,
        $2: _bufferData$2,
        $3: _bufferData$3,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bufferSubData)
  void _bufferSubData$1(
    _i2.num target,
    _i2.num dstByteOffset,
    _i2.Object srcData,
  ) {
    _i4.callMethod(
      this,
      'bufferSubData',
      [
        target,
        dstByteOffset,
        srcData,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bufferSubData)
  void _bufferSubData$2(
    _i2.num target,
    _i2.num dstByteOffset,
    _i9.ArrayBufferView srcData,
    _i2.num srcOffset, [
    _i2.num? length,
  ]) {
    _i4.callMethod(
      this,
      'bufferSubData',
      [
        target,
        dstByteOffset,
        srcData,
        srcOffset,
        length ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bufferSubData)
    void Function(
      _i2.num target,
      _i2.num dstByteOffset,
      _i2.Object srcData,
    ) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bufferSubData)
    void Function(
      _i2.num target,
      _i2.num dstByteOffset,
      _i9.ArrayBufferView srcData,
      _i2.num srcOffset, [
      _i2.num? length,
    ]) $2,
  }) get bufferSubData => (
        $1: _bufferSubData$1,
        $2: _bufferSubData$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/compressedTexImage2D)
  void _compressedTexImage2D$1(
    _i2.num target,
    _i2.num level,
    _i2.num internalformat,
    _i2.num width,
    _i2.num height,
    _i2.num border,
    _i2.num imageSize,
    _i2.num offset,
  ) {
    _i4.callMethod(
      this,
      'compressedTexImage2D',
      [
        target,
        level,
        internalformat,
        width,
        height,
        border,
        imageSize,
        offset,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/compressedTexImage2D)
  void _compressedTexImage2D$2(
    _i2.num target,
    _i2.num level,
    _i2.num internalformat,
    _i2.num width,
    _i2.num height,
    _i2.num border,
    _i9.ArrayBufferView srcData, [
    _i2.num? srcOffset,
    _i2.num? srcLengthOverride,
  ]) {
    _i4.callMethod(
      this,
      'compressedTexImage2D',
      [
        target,
        level,
        internalformat,
        width,
        height,
        border,
        srcData,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLengthOverride ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/compressedTexImage2D)
    void Function(
      _i2.num target,
      _i2.num level,
      _i2.num internalformat,
      _i2.num width,
      _i2.num height,
      _i2.num border,
      _i2.num imageSize,
      _i2.num offset,
    ) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/compressedTexImage2D)
    void Function(
      _i2.num target,
      _i2.num level,
      _i2.num internalformat,
      _i2.num width,
      _i2.num height,
      _i2.num border,
      _i9.ArrayBufferView srcData, [
      _i2.num? srcOffset,
      _i2.num? srcLengthOverride,
    ]) $2,
  }) get compressedTexImage2D => (
        $1: _compressedTexImage2D$1,
        $2: _compressedTexImage2D$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/compressedTexSubImage2D)
  void _compressedTexSubImage2D$1(
    _i2.num target,
    _i2.num level,
    _i2.num xoffset,
    _i2.num yoffset,
    _i2.num width,
    _i2.num height,
    _i2.num format,
    _i2.num imageSize,
    _i2.num offset,
  ) {
    _i4.callMethod(
      this,
      'compressedTexSubImage2D',
      [
        target,
        level,
        xoffset,
        yoffset,
        width,
        height,
        format,
        imageSize,
        offset,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/compressedTexSubImage2D)
  void _compressedTexSubImage2D$2(
    _i2.num target,
    _i2.num level,
    _i2.num xoffset,
    _i2.num yoffset,
    _i2.num width,
    _i2.num height,
    _i2.num format,
    _i9.ArrayBufferView srcData, [
    _i2.num? srcOffset,
    _i2.num? srcLengthOverride,
  ]) {
    _i4.callMethod(
      this,
      'compressedTexSubImage2D',
      [
        target,
        level,
        xoffset,
        yoffset,
        width,
        height,
        format,
        srcData,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLengthOverride ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/compressedTexSubImage2D)
    void Function(
      _i2.num target,
      _i2.num level,
      _i2.num xoffset,
      _i2.num yoffset,
      _i2.num width,
      _i2.num height,
      _i2.num format,
      _i2.num imageSize,
      _i2.num offset,
    ) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/compressedTexSubImage2D)
    void Function(
      _i2.num target,
      _i2.num level,
      _i2.num xoffset,
      _i2.num yoffset,
      _i2.num width,
      _i2.num height,
      _i2.num format,
      _i9.ArrayBufferView srcData, [
      _i2.num? srcOffset,
      _i2.num? srcLengthOverride,
    ]) $2,
  }) get compressedTexSubImage2D => (
        $1: _compressedTexSubImage2D$1,
        $2: _compressedTexSubImage2D$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/readPixels)
  void _readPixels$1(
    _i2.num x,
    _i2.num y,
    _i2.num width,
    _i2.num height,
    _i2.num format,
    _i2.num type, [
    _i9.ArrayBufferView? dstData,
  ]) {
    _i4.callMethod(
      this,
      'readPixels',
      [
        x,
        y,
        width,
        height,
        format,
        type,
        dstData ?? _i6.undefined,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/readPixels)
  void _readPixels$2(
    _i2.num x,
    _i2.num y,
    _i2.num width,
    _i2.num height,
    _i2.num format,
    _i2.num type,
    _i2.num offset,
  ) {
    _i4.callMethod(
      this,
      'readPixels',
      [
        x,
        y,
        width,
        height,
        format,
        type,
        offset,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/readPixels)
  void _readPixels$3(
    _i2.num x,
    _i2.num y,
    _i2.num width,
    _i2.num height,
    _i2.num format,
    _i2.num type,
    _i9.ArrayBufferView dstData,
    _i2.num dstOffset,
  ) {
    _i4.callMethod(
      this,
      'readPixels',
      [
        x,
        y,
        width,
        height,
        format,
        type,
        dstData,
        dstOffset,
      ],
    );
  }

  /// Overload accessor: $1, $2, $3
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/readPixels)
    void Function(
      _i2.num x,
      _i2.num y,
      _i2.num width,
      _i2.num height,
      _i2.num format,
      _i2.num type, [
      _i9.ArrayBufferView? dstData,
    ]) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/readPixels)
    void Function(
      _i2.num x,
      _i2.num y,
      _i2.num width,
      _i2.num height,
      _i2.num format,
      _i2.num type,
      _i2.num offset,
    ) $2,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/readPixels)
    void Function(
      _i2.num x,
      _i2.num y,
      _i2.num width,
      _i2.num height,
      _i2.num format,
      _i2.num type,
      _i9.ArrayBufferView dstData,
      _i2.num dstOffset,
    ) $3,
  }) get readPixels => (
        $1: _readPixels$1,
        $2: _readPixels$2,
        $3: _readPixels$3,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texImage2D)
  void _texImage2D$1(
    _i2.num target,
    _i2.num level,
    _i2.num internalformat,
    _i2.num format,
    _i2.num type,
    _i2.Object source,
  ) {
    _i4.callMethod(
      this,
      'texImage2D',
      [
        target,
        level,
        internalformat,
        format,
        type,
        source,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texImage2D)
  void _texImage2D$2(
    _i2.num target,
    _i2.num level,
    _i2.num internalformat,
    _i2.num width,
    _i2.num height,
    _i2.num border,
    _i2.num format,
    _i2.num type, [
    _i9.ArrayBufferView? pixels,
  ]) {
    _i4.callMethod(
      this,
      'texImage2D',
      [
        target,
        level,
        internalformat,
        width,
        height,
        border,
        format,
        type,
        pixels ?? _i6.undefined,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texImage2D)
  void _texImage2D$3(
    _i2.num target,
    _i2.num level,
    _i2.num internalformat,
    _i2.num width,
    _i2.num height,
    _i2.num border,
    _i2.num format,
    _i2.num type,
    _i2.num pboOffset,
  ) {
    _i4.callMethod(
      this,
      'texImage2D',
      [
        target,
        level,
        internalformat,
        width,
        height,
        border,
        format,
        type,
        pboOffset,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texImage2D)
  void _texImage2D$4(
    _i2.num target,
    _i2.num level,
    _i2.num internalformat,
    _i2.num width,
    _i2.num height,
    _i2.num border,
    _i2.num format,
    _i2.num type,
    _i2.Object source,
  ) {
    _i4.callMethod(
      this,
      'texImage2D',
      [
        target,
        level,
        internalformat,
        width,
        height,
        border,
        format,
        type,
        source,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texImage2D)
  void _texImage2D$5(
    _i2.num target,
    _i2.num level,
    _i2.num internalformat,
    _i2.num width,
    _i2.num height,
    _i2.num border,
    _i2.num format,
    _i2.num type,
    _i9.ArrayBufferView srcData,
    _i2.num srcOffset,
  ) {
    _i4.callMethod(
      this,
      'texImage2D',
      [
        target,
        level,
        internalformat,
        width,
        height,
        border,
        format,
        type,
        srcData,
        srcOffset,
      ],
    );
  }

  /// Overload accessor: $1, $2, $3, $4, $5
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texImage2D)
    void Function(
      _i2.num target,
      _i2.num level,
      _i2.num internalformat,
      _i2.num format,
      _i2.num type,
      _i2.Object source,
    ) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texImage2D)
    void Function(
      _i2.num target,
      _i2.num level,
      _i2.num internalformat,
      _i2.num width,
      _i2.num height,
      _i2.num border,
      _i2.num format,
      _i2.num type, [
      _i9.ArrayBufferView? pixels,
    ]) $2,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texImage2D)
    void Function(
      _i2.num target,
      _i2.num level,
      _i2.num internalformat,
      _i2.num width,
      _i2.num height,
      _i2.num border,
      _i2.num format,
      _i2.num type,
      _i2.num pboOffset,
    ) $3,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texImage2D)
    void Function(
      _i2.num target,
      _i2.num level,
      _i2.num internalformat,
      _i2.num width,
      _i2.num height,
      _i2.num border,
      _i2.num format,
      _i2.num type,
      _i2.Object source,
    ) $4,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texImage2D)
    void Function(
      _i2.num target,
      _i2.num level,
      _i2.num internalformat,
      _i2.num width,
      _i2.num height,
      _i2.num border,
      _i2.num format,
      _i2.num type,
      _i9.ArrayBufferView srcData,
      _i2.num srcOffset,
    ) $5,
  }) get texImage2D => (
        $1: _texImage2D$1,
        $2: _texImage2D$2,
        $3: _texImage2D$3,
        $4: _texImage2D$4,
        $5: _texImage2D$5,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texSubImage2D)
  void _texSubImage2D$1(
    _i2.num target,
    _i2.num level,
    _i2.num xoffset,
    _i2.num yoffset,
    _i2.num format,
    _i2.num type,
    _i2.Object source,
  ) {
    _i4.callMethod(
      this,
      'texSubImage2D',
      [
        target,
        level,
        xoffset,
        yoffset,
        format,
        type,
        source,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texSubImage2D)
  void _texSubImage2D$2(
    _i2.num target,
    _i2.num level,
    _i2.num xoffset,
    _i2.num yoffset,
    _i2.num width,
    _i2.num height,
    _i2.num format,
    _i2.num type, [
    _i9.ArrayBufferView? pixels,
  ]) {
    _i4.callMethod(
      this,
      'texSubImage2D',
      [
        target,
        level,
        xoffset,
        yoffset,
        width,
        height,
        format,
        type,
        pixels ?? _i6.undefined,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texSubImage2D)
  void _texSubImage2D$3(
    _i2.num target,
    _i2.num level,
    _i2.num xoffset,
    _i2.num yoffset,
    _i2.num width,
    _i2.num height,
    _i2.num format,
    _i2.num type,
    _i2.num pboOffset,
  ) {
    _i4.callMethod(
      this,
      'texSubImage2D',
      [
        target,
        level,
        xoffset,
        yoffset,
        width,
        height,
        format,
        type,
        pboOffset,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texSubImage2D)
  void _texSubImage2D$4(
    _i2.num target,
    _i2.num level,
    _i2.num xoffset,
    _i2.num yoffset,
    _i2.num width,
    _i2.num height,
    _i2.num format,
    _i2.num type,
    _i2.Object source,
  ) {
    _i4.callMethod(
      this,
      'texSubImage2D',
      [
        target,
        level,
        xoffset,
        yoffset,
        width,
        height,
        format,
        type,
        source,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texSubImage2D)
  void _texSubImage2D$5(
    _i2.num target,
    _i2.num level,
    _i2.num xoffset,
    _i2.num yoffset,
    _i2.num width,
    _i2.num height,
    _i2.num format,
    _i2.num type,
    _i9.ArrayBufferView srcData,
    _i2.num srcOffset,
  ) {
    _i4.callMethod(
      this,
      'texSubImage2D',
      [
        target,
        level,
        xoffset,
        yoffset,
        width,
        height,
        format,
        type,
        srcData,
        srcOffset,
      ],
    );
  }

  /// Overload accessor: $1, $2, $3, $4, $5
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texSubImage2D)
    void Function(
      _i2.num target,
      _i2.num level,
      _i2.num xoffset,
      _i2.num yoffset,
      _i2.num format,
      _i2.num type,
      _i2.Object source,
    ) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texSubImage2D)
    void Function(
      _i2.num target,
      _i2.num level,
      _i2.num xoffset,
      _i2.num yoffset,
      _i2.num width,
      _i2.num height,
      _i2.num format,
      _i2.num type, [
      _i9.ArrayBufferView? pixels,
    ]) $2,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texSubImage2D)
    void Function(
      _i2.num target,
      _i2.num level,
      _i2.num xoffset,
      _i2.num yoffset,
      _i2.num width,
      _i2.num height,
      _i2.num format,
      _i2.num type,
      _i2.num pboOffset,
    ) $3,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texSubImage2D)
    void Function(
      _i2.num target,
      _i2.num level,
      _i2.num xoffset,
      _i2.num yoffset,
      _i2.num width,
      _i2.num height,
      _i2.num format,
      _i2.num type,
      _i2.Object source,
    ) $4,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texSubImage2D)
    void Function(
      _i2.num target,
      _i2.num level,
      _i2.num xoffset,
      _i2.num yoffset,
      _i2.num width,
      _i2.num height,
      _i2.num format,
      _i2.num type,
      _i9.ArrayBufferView srcData,
      _i2.num srcOffset,
    ) $5,
  }) get texSubImage2D => (
        $1: _texSubImage2D$1,
        $2: _texSubImage2D$2,
        $3: _texSubImage2D$3,
        $4: _texSubImage2D$4,
        $5: _texSubImage2D$5,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
  void _uniform1fv$1(
    _i3.WebGLUniformLocation? location,
    _i2.Object data, [
    _i2.num? srcOffset,
    _i2.num? srcLength,
  ]) {
    _i4.callMethod(
      this,
      'uniform1fv',
      [
        location ?? _i6.undefined,
        data,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLength ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
  void _uniform1fv$2(
    _i3.WebGLUniformLocation? location,
    _i10.Iterable<_i2.num> data, [
    _i2.num? srcOffset,
    _i2.num? srcLength,
  ]) {
    _i4.callMethod(
      this,
      'uniform1fv',
      [
        location ?? _i6.undefined,
        data,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLength ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    void Function(
      _i3.WebGLUniformLocation? location,
      _i2.Object data, [
      _i2.num? srcOffset,
      _i2.num? srcLength,
    ]) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    void Function(
      _i3.WebGLUniformLocation? location,
      _i10.Iterable<_i2.num> data, [
      _i2.num? srcOffset,
      _i2.num? srcLength,
    ]) $2,
  }) get uniform1fv => (
        $1: _uniform1fv$1,
        $2: _uniform1fv$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
  void _uniform1iv$1(
    _i3.WebGLUniformLocation? location,
    _i2.Object data, [
    _i2.num? srcOffset,
    _i2.num? srcLength,
  ]) {
    _i4.callMethod(
      this,
      'uniform1iv',
      [
        location ?? _i6.undefined,
        data,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLength ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
  void _uniform1iv$2(
    _i3.WebGLUniformLocation? location,
    _i10.Iterable<_i2.num> data, [
    _i2.num? srcOffset,
    _i2.num? srcLength,
  ]) {
    _i4.callMethod(
      this,
      'uniform1iv',
      [
        location ?? _i6.undefined,
        data,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLength ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    void Function(
      _i3.WebGLUniformLocation? location,
      _i2.Object data, [
      _i2.num? srcOffset,
      _i2.num? srcLength,
    ]) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    void Function(
      _i3.WebGLUniformLocation? location,
      _i10.Iterable<_i2.num> data, [
      _i2.num? srcOffset,
      _i2.num? srcLength,
    ]) $2,
  }) get uniform1iv => (
        $1: _uniform1iv$1,
        $2: _uniform1iv$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
  void _uniform2fv$1(
    _i3.WebGLUniformLocation? location,
    _i2.Object data, [
    _i2.num? srcOffset,
    _i2.num? srcLength,
  ]) {
    _i4.callMethod(
      this,
      'uniform2fv',
      [
        location ?? _i6.undefined,
        data,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLength ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
  void _uniform2fv$2(
    _i3.WebGLUniformLocation? location,
    _i10.Iterable<_i2.num> data, [
    _i2.num? srcOffset,
    _i2.num? srcLength,
  ]) {
    _i4.callMethod(
      this,
      'uniform2fv',
      [
        location ?? _i6.undefined,
        data,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLength ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    void Function(
      _i3.WebGLUniformLocation? location,
      _i2.Object data, [
      _i2.num? srcOffset,
      _i2.num? srcLength,
    ]) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    void Function(
      _i3.WebGLUniformLocation? location,
      _i10.Iterable<_i2.num> data, [
      _i2.num? srcOffset,
      _i2.num? srcLength,
    ]) $2,
  }) get uniform2fv => (
        $1: _uniform2fv$1,
        $2: _uniform2fv$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
  void _uniform2iv$1(
    _i3.WebGLUniformLocation? location,
    _i2.Object data, [
    _i2.num? srcOffset,
    _i2.num? srcLength,
  ]) {
    _i4.callMethod(
      this,
      'uniform2iv',
      [
        location ?? _i6.undefined,
        data,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLength ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
  void _uniform2iv$2(
    _i3.WebGLUniformLocation? location,
    _i10.Iterable<_i2.num> data, [
    _i2.num? srcOffset,
    _i2.num? srcLength,
  ]) {
    _i4.callMethod(
      this,
      'uniform2iv',
      [
        location ?? _i6.undefined,
        data,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLength ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    void Function(
      _i3.WebGLUniformLocation? location,
      _i2.Object data, [
      _i2.num? srcOffset,
      _i2.num? srcLength,
    ]) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    void Function(
      _i3.WebGLUniformLocation? location,
      _i10.Iterable<_i2.num> data, [
      _i2.num? srcOffset,
      _i2.num? srcLength,
    ]) $2,
  }) get uniform2iv => (
        $1: _uniform2iv$1,
        $2: _uniform2iv$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
  void _uniform3fv$1(
    _i3.WebGLUniformLocation? location,
    _i2.Object data, [
    _i2.num? srcOffset,
    _i2.num? srcLength,
  ]) {
    _i4.callMethod(
      this,
      'uniform3fv',
      [
        location ?? _i6.undefined,
        data,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLength ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
  void _uniform3fv$2(
    _i3.WebGLUniformLocation? location,
    _i10.Iterable<_i2.num> data, [
    _i2.num? srcOffset,
    _i2.num? srcLength,
  ]) {
    _i4.callMethod(
      this,
      'uniform3fv',
      [
        location ?? _i6.undefined,
        data,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLength ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    void Function(
      _i3.WebGLUniformLocation? location,
      _i2.Object data, [
      _i2.num? srcOffset,
      _i2.num? srcLength,
    ]) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    void Function(
      _i3.WebGLUniformLocation? location,
      _i10.Iterable<_i2.num> data, [
      _i2.num? srcOffset,
      _i2.num? srcLength,
    ]) $2,
  }) get uniform3fv => (
        $1: _uniform3fv$1,
        $2: _uniform3fv$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
  void _uniform3iv$1(
    _i3.WebGLUniformLocation? location,
    _i2.Object data, [
    _i2.num? srcOffset,
    _i2.num? srcLength,
  ]) {
    _i4.callMethod(
      this,
      'uniform3iv',
      [
        location ?? _i6.undefined,
        data,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLength ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
  void _uniform3iv$2(
    _i3.WebGLUniformLocation? location,
    _i10.Iterable<_i2.num> data, [
    _i2.num? srcOffset,
    _i2.num? srcLength,
  ]) {
    _i4.callMethod(
      this,
      'uniform3iv',
      [
        location ?? _i6.undefined,
        data,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLength ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    void Function(
      _i3.WebGLUniformLocation? location,
      _i2.Object data, [
      _i2.num? srcOffset,
      _i2.num? srcLength,
    ]) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    void Function(
      _i3.WebGLUniformLocation? location,
      _i10.Iterable<_i2.num> data, [
      _i2.num? srcOffset,
      _i2.num? srcLength,
    ]) $2,
  }) get uniform3iv => (
        $1: _uniform3iv$1,
        $2: _uniform3iv$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
  void _uniform4fv$1(
    _i3.WebGLUniformLocation? location,
    _i2.Object data, [
    _i2.num? srcOffset,
    _i2.num? srcLength,
  ]) {
    _i4.callMethod(
      this,
      'uniform4fv',
      [
        location ?? _i6.undefined,
        data,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLength ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
  void _uniform4fv$2(
    _i3.WebGLUniformLocation? location,
    _i10.Iterable<_i2.num> data, [
    _i2.num? srcOffset,
    _i2.num? srcLength,
  ]) {
    _i4.callMethod(
      this,
      'uniform4fv',
      [
        location ?? _i6.undefined,
        data,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLength ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    void Function(
      _i3.WebGLUniformLocation? location,
      _i2.Object data, [
      _i2.num? srcOffset,
      _i2.num? srcLength,
    ]) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    void Function(
      _i3.WebGLUniformLocation? location,
      _i10.Iterable<_i2.num> data, [
      _i2.num? srcOffset,
      _i2.num? srcLength,
    ]) $2,
  }) get uniform4fv => (
        $1: _uniform4fv$1,
        $2: _uniform4fv$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
  void _uniform4iv$1(
    _i3.WebGLUniformLocation? location,
    _i2.Object data, [
    _i2.num? srcOffset,
    _i2.num? srcLength,
  ]) {
    _i4.callMethod(
      this,
      'uniform4iv',
      [
        location ?? _i6.undefined,
        data,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLength ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
  void _uniform4iv$2(
    _i3.WebGLUniformLocation? location,
    _i10.Iterable<_i2.num> data, [
    _i2.num? srcOffset,
    _i2.num? srcLength,
  ]) {
    _i4.callMethod(
      this,
      'uniform4iv',
      [
        location ?? _i6.undefined,
        data,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLength ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    void Function(
      _i3.WebGLUniformLocation? location,
      _i2.Object data, [
      _i2.num? srcOffset,
      _i2.num? srcLength,
    ]) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    void Function(
      _i3.WebGLUniformLocation? location,
      _i10.Iterable<_i2.num> data, [
      _i2.num? srcOffset,
      _i2.num? srcLength,
    ]) $2,
  }) get uniform4iv => (
        $1: _uniform4iv$1,
        $2: _uniform4iv$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix)
  void _uniformMatrix2fv$1(
    _i3.WebGLUniformLocation? location,
    _i2.bool transpose,
    _i2.Object data, [
    _i2.num? srcOffset,
    _i2.num? srcLength,
  ]) {
    _i4.callMethod(
      this,
      'uniformMatrix2fv',
      [
        location ?? _i6.undefined,
        transpose,
        data,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLength ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix)
  void _uniformMatrix2fv$2(
    _i3.WebGLUniformLocation? location,
    _i2.bool transpose,
    _i10.Iterable<_i2.num> data, [
    _i2.num? srcOffset,
    _i2.num? srcLength,
  ]) {
    _i4.callMethod(
      this,
      'uniformMatrix2fv',
      [
        location ?? _i6.undefined,
        transpose,
        data,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLength ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix)
    void Function(
      _i3.WebGLUniformLocation? location,
      _i2.bool transpose,
      _i2.Object data, [
      _i2.num? srcOffset,
      _i2.num? srcLength,
    ]) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix)
    void Function(
      _i3.WebGLUniformLocation? location,
      _i2.bool transpose,
      _i10.Iterable<_i2.num> data, [
      _i2.num? srcOffset,
      _i2.num? srcLength,
    ]) $2,
  }) get uniformMatrix2fv => (
        $1: _uniformMatrix2fv$1,
        $2: _uniformMatrix2fv$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix)
  void _uniformMatrix3fv$1(
    _i3.WebGLUniformLocation? location,
    _i2.bool transpose,
    _i2.Object data, [
    _i2.num? srcOffset,
    _i2.num? srcLength,
  ]) {
    _i4.callMethod(
      this,
      'uniformMatrix3fv',
      [
        location ?? _i6.undefined,
        transpose,
        data,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLength ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix)
  void _uniformMatrix3fv$2(
    _i3.WebGLUniformLocation? location,
    _i2.bool transpose,
    _i10.Iterable<_i2.num> data, [
    _i2.num? srcOffset,
    _i2.num? srcLength,
  ]) {
    _i4.callMethod(
      this,
      'uniformMatrix3fv',
      [
        location ?? _i6.undefined,
        transpose,
        data,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLength ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix)
    void Function(
      _i3.WebGLUniformLocation? location,
      _i2.bool transpose,
      _i2.Object data, [
      _i2.num? srcOffset,
      _i2.num? srcLength,
    ]) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix)
    void Function(
      _i3.WebGLUniformLocation? location,
      _i2.bool transpose,
      _i10.Iterable<_i2.num> data, [
      _i2.num? srcOffset,
      _i2.num? srcLength,
    ]) $2,
  }) get uniformMatrix3fv => (
        $1: _uniformMatrix3fv$1,
        $2: _uniformMatrix3fv$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix)
  void _uniformMatrix4fv$1(
    _i3.WebGLUniformLocation? location,
    _i2.bool transpose,
    _i2.Object data, [
    _i2.num? srcOffset,
    _i2.num? srcLength,
  ]) {
    _i4.callMethod(
      this,
      'uniformMatrix4fv',
      [
        location ?? _i6.undefined,
        transpose,
        data,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLength ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix)
  void _uniformMatrix4fv$2(
    _i3.WebGLUniformLocation? location,
    _i2.bool transpose,
    _i10.Iterable<_i2.num> data, [
    _i2.num? srcOffset,
    _i2.num? srcLength,
  ]) {
    _i4.callMethod(
      this,
      'uniformMatrix4fv',
      [
        location ?? _i6.undefined,
        transpose,
        data,
        srcOffset ?? _i6.undefined ?? _i6.undefined,
        srcLength ?? _i6.undefined ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix)
    void Function(
      _i3.WebGLUniformLocation? location,
      _i2.bool transpose,
      _i2.Object data, [
      _i2.num? srcOffset,
      _i2.num? srcLength,
    ]) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix)
    void Function(
      _i3.WebGLUniformLocation? location,
      _i2.bool transpose,
      _i10.Iterable<_i2.num> data, [
      _i2.num? srcOffset,
      _i2.num? srcLength,
    ]) $2,
  }) get uniformMatrix4fv => (
        $1: _uniformMatrix4fv$1,
        $2: _uniformMatrix4fv$2,
      );
}

/* Source:  */
/// Part of the WebGL API and represents the information returned by calling the WebGLRenderingContext.getActiveAttrib() and WebGLRenderingContext.getActiveUniform() methods.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLActiveInfo)
@_i1.JS()
@_i1.staticInterop
class WebGLActiveInfo {
  factory WebGLActiveInfo() => _i4.callConstructor(
        _declaredWebGLActiveInfo,
        [],
      );
}

_i2.Object get _declaredWebGLActiveInfo => _i4.getProperty(
      _self,
      'WebGLActiveInfo',
    );

extension WebGLActiveInfo$Typings on WebGLActiveInfo {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLActiveInfo/name)
  _i2.String get name => _i4.getProperty(
        this,
        'name',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLActiveInfo/size)
  _i2.num get size => _i4.getProperty(
        this,
        'size',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLActiveInfo/type)
  _i2.num get type => _i4.getProperty(
        this,
        'type',
      );
}

/* Source:  */
/// Part of the WebGL API and represents an opaque buffer object storing data such as vertices or colors.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLBuffer)
@_i1.JS()
@_i1.staticInterop
class WebGLBuffer {
  factory WebGLBuffer() => _i4.callConstructor(
        _declaredWebGLBuffer,
        [],
      );
}

_i2.Object get _declaredWebGLBuffer => _i4.getProperty(
      _self,
      'WebGLBuffer',
    ); /* Source:  */

/// The WebContextEvent interface is part of the WebGL API and is an interface for an event that is generated in response to a status change to the WebGL rendering context.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLContextEvent)
@_i1.JS()
@_i1.staticInterop
class WebGLContextEvent implements _i3.Event {
  factory WebGLContextEvent(
    _i2.String type, [
    _i3.WebGLContextEventInit? eventInit,
  ]) =>
      _i4.callConstructor(
        _declaredWebGLContextEvent,
        [
          type,
          eventInit ?? _i6.undefined,
        ],
      );
}

_i2.Object get _declaredWebGLContextEvent => _i4.getProperty(
      _self,
      'WebGLContextEvent',
    );

extension WebGLContextEvent$Typings on WebGLContextEvent {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLContextEvent/statusMessage)
  _i2.String get statusMessage => _i4.getProperty(
        this,
        'statusMessage',
      );
}

/* Source:  */
/// Part of the WebGL API and represents a collection of buffers that serve as a rendering destination.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLFramebuffer)
@_i1.JS()
@_i1.staticInterop
class WebGLFramebuffer {
  factory WebGLFramebuffer() => _i4.callConstructor(
        _declaredWebGLFramebuffer,
        [],
      );
}

_i2.Object get _declaredWebGLFramebuffer => _i4.getProperty(
      _self,
      'WebGLFramebuffer',
    ); /* Source:  */

/// The WebGLProgram is part of the WebGL API and is a combination of two compiled WebGLShaders consisting of a vertex shader and a fragment shader (both written in GLSL).
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLProgram)
@_i1.JS()
@_i1.staticInterop
class WebGLProgram {
  factory WebGLProgram() => _i4.callConstructor(
        _declaredWebGLProgram,
        [],
      );
}

_i2.Object get _declaredWebGLProgram => _i4.getProperty(
      _self,
      'WebGLProgram',
    ); /* Source:  */

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLQuery)
@_i1.JS()
@_i1.staticInterop
class WebGLQuery {
  factory WebGLQuery() => _i4.callConstructor(
        _declaredWebGLQuery,
        [],
      );
}

_i2.Object get _declaredWebGLQuery => _i4.getProperty(
      _self,
      'WebGLQuery',
    ); /* Source:  */

/// Part of the WebGL API and represents a buffer that can contain an image, or can be source or target of an rendering operation.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderbuffer)
@_i1.JS()
@_i1.staticInterop
class WebGLRenderbuffer {
  factory WebGLRenderbuffer() => _i4.callConstructor(
        _declaredWebGLRenderbuffer,
        [],
      );
}

_i2.Object get _declaredWebGLRenderbuffer => _i4.getProperty(
      _self,
      'WebGLRenderbuffer',
    ); /* Source:  */

/// Provides an interface to the OpenGL ES 2.0 graphics rendering context for the drawing surface of an HTML <canvas> element.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext)
@_i1.JS()
@_i1.staticInterop
class WebGLRenderingContext
    implements
        _i3.WebGLRenderingContextBase,
        _i3.WebGLRenderingContextOverloads {
  factory WebGLRenderingContext() => _i4.callConstructor(
        _declaredWebGLRenderingContext,
        [],
      );

  static _i2.num get depthBufferBit => _i4.getProperty(
        _i8.target809,
        'DEPTH_BUFFER_BIT',
      );
  static _i2.num get stencilBufferBit => _i4.getProperty(
        _i8.target809,
        'STENCIL_BUFFER_BIT',
      );
  static _i2.num get colorBufferBit => _i4.getProperty(
        _i8.target809,
        'COLOR_BUFFER_BIT',
      );
  static _i2.num get points => _i4.getProperty(
        _i8.target809,
        'POINTS',
      );
  static _i2.num get lines => _i4.getProperty(
        _i8.target809,
        'LINES',
      );
  static _i2.num get lineLoop => _i4.getProperty(
        _i8.target809,
        'LINE_LOOP',
      );
  static _i2.num get lineStrip => _i4.getProperty(
        _i8.target809,
        'LINE_STRIP',
      );
  static _i2.num get triangles => _i4.getProperty(
        _i8.target809,
        'TRIANGLES',
      );
  static _i2.num get triangleStrip => _i4.getProperty(
        _i8.target809,
        'TRIANGLE_STRIP',
      );
  static _i2.num get triangleFan => _i4.getProperty(
        _i8.target809,
        'TRIANGLE_FAN',
      );
  static _i2.num get zero => _i4.getProperty(
        _i8.target809,
        'ZERO',
      );
  static _i2.num get one => _i4.getProperty(
        _i8.target809,
        'ONE',
      );
  static _i2.num get srcColor => _i4.getProperty(
        _i8.target809,
        'SRC_COLOR',
      );
  static _i2.num get oneMinusSrcColor => _i4.getProperty(
        _i8.target809,
        'ONE_MINUS_SRC_COLOR',
      );
  static _i2.num get srcAlpha => _i4.getProperty(
        _i8.target809,
        'SRC_ALPHA',
      );
  static _i2.num get oneMinusSrcAlpha => _i4.getProperty(
        _i8.target809,
        'ONE_MINUS_SRC_ALPHA',
      );
  static _i2.num get dstAlpha => _i4.getProperty(
        _i8.target809,
        'DST_ALPHA',
      );
  static _i2.num get oneMinusDstAlpha => _i4.getProperty(
        _i8.target809,
        'ONE_MINUS_DST_ALPHA',
      );
  static _i2.num get dstColor => _i4.getProperty(
        _i8.target809,
        'DST_COLOR',
      );
  static _i2.num get oneMinusDstColor => _i4.getProperty(
        _i8.target809,
        'ONE_MINUS_DST_COLOR',
      );
  static _i2.num get srcAlphaSaturate => _i4.getProperty(
        _i8.target809,
        'SRC_ALPHA_SATURATE',
      );
  static _i2.num get funcAdd => _i4.getProperty(
        _i8.target809,
        'FUNC_ADD',
      );
  static _i2.num get blendEquation => _i4.getProperty(
        _i8.target809,
        'BLEND_EQUATION',
      );
  static _i2.num get blendEquationRgb => _i4.getProperty(
        _i8.target809,
        'BLEND_EQUATION_RGB',
      );
  static _i2.num get blendEquationAlpha => _i4.getProperty(
        _i8.target809,
        'BLEND_EQUATION_ALPHA',
      );
  static _i2.num get funcSubtract => _i4.getProperty(
        _i8.target809,
        'FUNC_SUBTRACT',
      );
  static _i2.num get funcReverseSubtract => _i4.getProperty(
        _i8.target809,
        'FUNC_REVERSE_SUBTRACT',
      );
  static _i2.num get blendDstRgb => _i4.getProperty(
        _i8.target809,
        'BLEND_DST_RGB',
      );
  static _i2.num get blendSrcRgb => _i4.getProperty(
        _i8.target809,
        'BLEND_SRC_RGB',
      );
  static _i2.num get blendDstAlpha => _i4.getProperty(
        _i8.target809,
        'BLEND_DST_ALPHA',
      );
  static _i2.num get blendSrcAlpha => _i4.getProperty(
        _i8.target809,
        'BLEND_SRC_ALPHA',
      );
  static _i2.num get constantColor => _i4.getProperty(
        _i8.target809,
        'CONSTANT_COLOR',
      );
  static _i2.num get oneMinusConstantColor => _i4.getProperty(
        _i8.target809,
        'ONE_MINUS_CONSTANT_COLOR',
      );
  static _i2.num get constantAlpha => _i4.getProperty(
        _i8.target809,
        'CONSTANT_ALPHA',
      );
  static _i2.num get oneMinusConstantAlpha => _i4.getProperty(
        _i8.target809,
        'ONE_MINUS_CONSTANT_ALPHA',
      );
  static _i2.num get blendColor => _i4.getProperty(
        _i8.target809,
        'BLEND_COLOR',
      );
  static _i2.num get arrayBuffer => _i4.getProperty(
        _i8.target809,
        'ARRAY_BUFFER',
      );
  static _i2.num get elementArrayBuffer => _i4.getProperty(
        _i8.target809,
        'ELEMENT_ARRAY_BUFFER',
      );
  static _i2.num get arrayBufferBinding => _i4.getProperty(
        _i8.target809,
        'ARRAY_BUFFER_BINDING',
      );
  static _i2.num get elementArrayBufferBinding => _i4.getProperty(
        _i8.target809,
        'ELEMENT_ARRAY_BUFFER_BINDING',
      );
  static _i2.num get streamDraw => _i4.getProperty(
        _i8.target809,
        'STREAM_DRAW',
      );
  static _i2.num get staticDraw => _i4.getProperty(
        _i8.target809,
        'STATIC_DRAW',
      );
  static _i2.num get dynamicDraw => _i4.getProperty(
        _i8.target809,
        'DYNAMIC_DRAW',
      );
  static _i2.num get bufferSize => _i4.getProperty(
        _i8.target809,
        'BUFFER_SIZE',
      );
  static _i2.num get bufferUsage => _i4.getProperty(
        _i8.target809,
        'BUFFER_USAGE',
      );
  static _i2.num get currentVertexAttrib => _i4.getProperty(
        _i8.target809,
        'CURRENT_VERTEX_ATTRIB',
      );
  static _i2.num get front => _i4.getProperty(
        _i8.target809,
        'FRONT',
      );
  static _i2.num get back => _i4.getProperty(
        _i8.target809,
        'BACK',
      );
  static _i2.num get frontAndBack => _i4.getProperty(
        _i8.target809,
        'FRONT_AND_BACK',
      );
  static _i2.num get cullFace => _i4.getProperty(
        _i8.target809,
        'CULL_FACE',
      );
  static _i2.num get blend => _i4.getProperty(
        _i8.target809,
        'BLEND',
      );
  static _i2.num get dither => _i4.getProperty(
        _i8.target809,
        'DITHER',
      );
  static _i2.num get stencilTest => _i4.getProperty(
        _i8.target809,
        'STENCIL_TEST',
      );
  static _i2.num get depthTest => _i4.getProperty(
        _i8.target809,
        'DEPTH_TEST',
      );
  static _i2.num get scissorTest => _i4.getProperty(
        _i8.target809,
        'SCISSOR_TEST',
      );
  static _i2.num get polygonOffsetFill => _i4.getProperty(
        _i8.target809,
        'POLYGON_OFFSET_FILL',
      );
  static _i2.num get sampleAlphaToCoverage => _i4.getProperty(
        _i8.target809,
        'SAMPLE_ALPHA_TO_COVERAGE',
      );
  static _i2.num get sampleCoverage => _i4.getProperty(
        _i8.target809,
        'SAMPLE_COVERAGE',
      );
  static _i2.num get noError => _i4.getProperty(
        _i8.target809,
        'NO_ERROR',
      );
  static _i2.num get invalidEnum => _i4.getProperty(
        _i8.target809,
        'INVALID_ENUM',
      );
  static _i2.num get invalidValue => _i4.getProperty(
        _i8.target809,
        'INVALID_VALUE',
      );
  static _i2.num get invalidOperation => _i4.getProperty(
        _i8.target809,
        'INVALID_OPERATION',
      );
  static _i2.num get outOfMemory => _i4.getProperty(
        _i8.target809,
        'OUT_OF_MEMORY',
      );
  static _i2.num get cw => _i4.getProperty(
        _i8.target809,
        'CW',
      );
  static _i2.num get ccw => _i4.getProperty(
        _i8.target809,
        'CCW',
      );
  static _i2.num get lineWidth => _i4.getProperty(
        _i8.target809,
        'LINE_WIDTH',
      );
  static _i2.num get aliasedPointSizeRange => _i4.getProperty(
        _i8.target809,
        'ALIASED_POINT_SIZE_RANGE',
      );
  static _i2.num get aliasedLineWidthRange => _i4.getProperty(
        _i8.target809,
        'ALIASED_LINE_WIDTH_RANGE',
      );
  static _i2.num get cullFaceMode => _i4.getProperty(
        _i8.target809,
        'CULL_FACE_MODE',
      );
  static _i2.num get frontFace => _i4.getProperty(
        _i8.target809,
        'FRONT_FACE',
      );
  static _i2.num get depthRange => _i4.getProperty(
        _i8.target809,
        'DEPTH_RANGE',
      );
  static _i2.num get depthWritemask => _i4.getProperty(
        _i8.target809,
        'DEPTH_WRITEMASK',
      );
  static _i2.num get depthClearValue => _i4.getProperty(
        _i8.target809,
        'DEPTH_CLEAR_VALUE',
      );
  static _i2.num get depthFunc => _i4.getProperty(
        _i8.target809,
        'DEPTH_FUNC',
      );
  static _i2.num get stencilClearValue => _i4.getProperty(
        _i8.target809,
        'STENCIL_CLEAR_VALUE',
      );
  static _i2.num get stencilFunc => _i4.getProperty(
        _i8.target809,
        'STENCIL_FUNC',
      );
  static _i2.num get stencilFail => _i4.getProperty(
        _i8.target809,
        'STENCIL_FAIL',
      );
  static _i2.num get stencilPassDepthFail => _i4.getProperty(
        _i8.target809,
        'STENCIL_PASS_DEPTH_FAIL',
      );
  static _i2.num get stencilPassDepthPass => _i4.getProperty(
        _i8.target809,
        'STENCIL_PASS_DEPTH_PASS',
      );
  static _i2.num get stencilRef => _i4.getProperty(
        _i8.target809,
        'STENCIL_REF',
      );
  static _i2.num get stencilValueMask => _i4.getProperty(
        _i8.target809,
        'STENCIL_VALUE_MASK',
      );
  static _i2.num get stencilWritemask => _i4.getProperty(
        _i8.target809,
        'STENCIL_WRITEMASK',
      );
  static _i2.num get stencilBackFunc => _i4.getProperty(
        _i8.target809,
        'STENCIL_BACK_FUNC',
      );
  static _i2.num get stencilBackFail => _i4.getProperty(
        _i8.target809,
        'STENCIL_BACK_FAIL',
      );
  static _i2.num get stencilBackPassDepthFail => _i4.getProperty(
        _i8.target809,
        'STENCIL_BACK_PASS_DEPTH_FAIL',
      );
  static _i2.num get stencilBackPassDepthPass => _i4.getProperty(
        _i8.target809,
        'STENCIL_BACK_PASS_DEPTH_PASS',
      );
  static _i2.num get stencilBackRef => _i4.getProperty(
        _i8.target809,
        'STENCIL_BACK_REF',
      );
  static _i2.num get stencilBackValueMask => _i4.getProperty(
        _i8.target809,
        'STENCIL_BACK_VALUE_MASK',
      );
  static _i2.num get stencilBackWritemask => _i4.getProperty(
        _i8.target809,
        'STENCIL_BACK_WRITEMASK',
      );
  static _i2.num get viewport => _i4.getProperty(
        _i8.target809,
        'VIEWPORT',
      );
  static _i2.num get scissorBox => _i4.getProperty(
        _i8.target809,
        'SCISSOR_BOX',
      );
  static _i2.num get colorClearValue => _i4.getProperty(
        _i8.target809,
        'COLOR_CLEAR_VALUE',
      );
  static _i2.num get colorWritemask => _i4.getProperty(
        _i8.target809,
        'COLOR_WRITEMASK',
      );
  static _i2.num get unpackAlignment => _i4.getProperty(
        _i8.target809,
        'UNPACK_ALIGNMENT',
      );
  static _i2.num get packAlignment => _i4.getProperty(
        _i8.target809,
        'PACK_ALIGNMENT',
      );
  static _i2.num get maxTextureSize => _i4.getProperty(
        _i8.target809,
        'MAX_TEXTURE_SIZE',
      );
  static _i2.num get maxViewportDims => _i4.getProperty(
        _i8.target809,
        'MAX_VIEWPORT_DIMS',
      );
  static _i2.num get subpixelBits => _i4.getProperty(
        _i8.target809,
        'SUBPIXEL_BITS',
      );
  static _i2.num get redBits => _i4.getProperty(
        _i8.target809,
        'RED_BITS',
      );
  static _i2.num get greenBits => _i4.getProperty(
        _i8.target809,
        'GREEN_BITS',
      );
  static _i2.num get blueBits => _i4.getProperty(
        _i8.target809,
        'BLUE_BITS',
      );
  static _i2.num get alphaBits => _i4.getProperty(
        _i8.target809,
        'ALPHA_BITS',
      );
  static _i2.num get depthBits => _i4.getProperty(
        _i8.target809,
        'DEPTH_BITS',
      );
  static _i2.num get stencilBits => _i4.getProperty(
        _i8.target809,
        'STENCIL_BITS',
      );
  static _i2.num get polygonOffsetUnits => _i4.getProperty(
        _i8.target809,
        'POLYGON_OFFSET_UNITS',
      );
  static _i2.num get polygonOffsetFactor => _i4.getProperty(
        _i8.target809,
        'POLYGON_OFFSET_FACTOR',
      );
  static _i2.num get textureBinding2d => _i4.getProperty(
        _i8.target809,
        'TEXTURE_BINDING_2D',
      );
  static _i2.num get sampleBuffers => _i4.getProperty(
        _i8.target809,
        'SAMPLE_BUFFERS',
      );
  static _i2.num get samples => _i4.getProperty(
        _i8.target809,
        'SAMPLES',
      );
  static _i2.num get sampleCoverageValue => _i4.getProperty(
        _i8.target809,
        'SAMPLE_COVERAGE_VALUE',
      );
  static _i2.num get sampleCoverageInvert => _i4.getProperty(
        _i8.target809,
        'SAMPLE_COVERAGE_INVERT',
      );
  static _i2.num get compressedTextureFormats => _i4.getProperty(
        _i8.target809,
        'COMPRESSED_TEXTURE_FORMATS',
      );
  static _i2.num get dontCare => _i4.getProperty(
        _i8.target809,
        'DONT_CARE',
      );
  static _i2.num get fastest => _i4.getProperty(
        _i8.target809,
        'FASTEST',
      );
  static _i2.num get nicest => _i4.getProperty(
        _i8.target809,
        'NICEST',
      );
  static _i2.num get generateMipmapHint => _i4.getProperty(
        _i8.target809,
        'GENERATE_MIPMAP_HINT',
      );
  static _i2.num get byte => _i4.getProperty(
        _i8.target809,
        'BYTE',
      );
  static _i2.num get unsignedByte => _i4.getProperty(
        _i8.target809,
        'UNSIGNED_BYTE',
      );
  static _i2.num get short => _i4.getProperty(
        _i8.target809,
        'SHORT',
      );
  static _i2.num get unsignedShort => _i4.getProperty(
        _i8.target809,
        'UNSIGNED_SHORT',
      );
  static _i2.num get int$ => _i4.getProperty(
        _i8.target809,
        'INT',
      );
  static _i2.num get unsignedInt => _i4.getProperty(
        _i8.target809,
        'UNSIGNED_INT',
      );
  static _i2.num get float => _i4.getProperty(
        _i8.target809,
        'FLOAT',
      );
  static _i2.num get depthComponent => _i4.getProperty(
        _i8.target809,
        'DEPTH_COMPONENT',
      );
  static _i2.num get alpha => _i4.getProperty(
        _i8.target809,
        'ALPHA',
      );
  static _i2.num get rgb => _i4.getProperty(
        _i8.target809,
        'RGB',
      );
  static _i2.num get rgba => _i4.getProperty(
        _i8.target809,
        'RGBA',
      );
  static _i2.num get luminance => _i4.getProperty(
        _i8.target809,
        'LUMINANCE',
      );
  static _i2.num get luminanceAlpha => _i4.getProperty(
        _i8.target809,
        'LUMINANCE_ALPHA',
      );
  static _i2.num get unsignedShort4444 => _i4.getProperty(
        _i8.target809,
        'UNSIGNED_SHORT_4_4_4_4',
      );
  static _i2.num get unsignedShort5551 => _i4.getProperty(
        _i8.target809,
        'UNSIGNED_SHORT_5_5_5_1',
      );
  static _i2.num get unsignedShort565 => _i4.getProperty(
        _i8.target809,
        'UNSIGNED_SHORT_5_6_5',
      );
  static _i2.num get fragmentShader => _i4.getProperty(
        _i8.target809,
        'FRAGMENT_SHADER',
      );
  static _i2.num get vertexShader => _i4.getProperty(
        _i8.target809,
        'VERTEX_SHADER',
      );
  static _i2.num get maxVertexAttribs => _i4.getProperty(
        _i8.target809,
        'MAX_VERTEX_ATTRIBS',
      );
  static _i2.num get maxVertexUniformVectors => _i4.getProperty(
        _i8.target809,
        'MAX_VERTEX_UNIFORM_VECTORS',
      );
  static _i2.num get maxVaryingVectors => _i4.getProperty(
        _i8.target809,
        'MAX_VARYING_VECTORS',
      );
  static _i2.num get maxCombinedTextureImageUnits => _i4.getProperty(
        _i8.target809,
        'MAX_COMBINED_TEXTURE_IMAGE_UNITS',
      );
  static _i2.num get maxVertexTextureImageUnits => _i4.getProperty(
        _i8.target809,
        'MAX_VERTEX_TEXTURE_IMAGE_UNITS',
      );
  static _i2.num get maxTextureImageUnits => _i4.getProperty(
        _i8.target809,
        'MAX_TEXTURE_IMAGE_UNITS',
      );
  static _i2.num get maxFragmentUniformVectors => _i4.getProperty(
        _i8.target809,
        'MAX_FRAGMENT_UNIFORM_VECTORS',
      );
  static _i2.num get shaderType => _i4.getProperty(
        _i8.target809,
        'SHADER_TYPE',
      );
  static _i2.num get deleteStatus => _i4.getProperty(
        _i8.target809,
        'DELETE_STATUS',
      );
  static _i2.num get linkStatus => _i4.getProperty(
        _i8.target809,
        'LINK_STATUS',
      );
  static _i2.num get validateStatus => _i4.getProperty(
        _i8.target809,
        'VALIDATE_STATUS',
      );
  static _i2.num get attachedShaders => _i4.getProperty(
        _i8.target809,
        'ATTACHED_SHADERS',
      );
  static _i2.num get activeUniforms => _i4.getProperty(
        _i8.target809,
        'ACTIVE_UNIFORMS',
      );
  static _i2.num get activeAttributes => _i4.getProperty(
        _i8.target809,
        'ACTIVE_ATTRIBUTES',
      );
  static _i2.num get shadingLanguageVersion => _i4.getProperty(
        _i8.target809,
        'SHADING_LANGUAGE_VERSION',
      );
  static _i2.num get currentProgram => _i4.getProperty(
        _i8.target809,
        'CURRENT_PROGRAM',
      );
  static _i2.num get never => _i4.getProperty(
        _i8.target809,
        'NEVER',
      );
  static _i2.num get less => _i4.getProperty(
        _i8.target809,
        'LESS',
      );
  static _i2.num get equal => _i4.getProperty(
        _i8.target809,
        'EQUAL',
      );
  static _i2.num get lequal => _i4.getProperty(
        _i8.target809,
        'LEQUAL',
      );
  static _i2.num get greater => _i4.getProperty(
        _i8.target809,
        'GREATER',
      );
  static _i2.num get notequal => _i4.getProperty(
        _i8.target809,
        'NOTEQUAL',
      );
  static _i2.num get gequal => _i4.getProperty(
        _i8.target809,
        'GEQUAL',
      );
  static _i2.num get always => _i4.getProperty(
        _i8.target809,
        'ALWAYS',
      );
  static _i2.num get keep => _i4.getProperty(
        _i8.target809,
        'KEEP',
      );
  static _i2.num get replace => _i4.getProperty(
        _i8.target809,
        'REPLACE',
      );
  static _i2.num get incr => _i4.getProperty(
        _i8.target809,
        'INCR',
      );
  static _i2.num get decr => _i4.getProperty(
        _i8.target809,
        'DECR',
      );
  static _i2.num get invert => _i4.getProperty(
        _i8.target809,
        'INVERT',
      );
  static _i2.num get incrWrap => _i4.getProperty(
        _i8.target809,
        'INCR_WRAP',
      );
  static _i2.num get decrWrap => _i4.getProperty(
        _i8.target809,
        'DECR_WRAP',
      );
  static _i2.num get vendor => _i4.getProperty(
        _i8.target809,
        'VENDOR',
      );
  static _i2.num get renderer => _i4.getProperty(
        _i8.target809,
        'RENDERER',
      );
  static _i2.num get version => _i4.getProperty(
        _i8.target809,
        'VERSION',
      );
  static _i2.num get nearest => _i4.getProperty(
        _i8.target809,
        'NEAREST',
      );
  static _i2.num get linear => _i4.getProperty(
        _i8.target809,
        'LINEAR',
      );
  static _i2.num get nearestMipmapNearest => _i4.getProperty(
        _i8.target809,
        'NEAREST_MIPMAP_NEAREST',
      );
  static _i2.num get linearMipmapNearest => _i4.getProperty(
        _i8.target809,
        'LINEAR_MIPMAP_NEAREST',
      );
  static _i2.num get nearestMipmapLinear => _i4.getProperty(
        _i8.target809,
        'NEAREST_MIPMAP_LINEAR',
      );
  static _i2.num get linearMipmapLinear => _i4.getProperty(
        _i8.target809,
        'LINEAR_MIPMAP_LINEAR',
      );
  static _i2.num get textureMagFilter => _i4.getProperty(
        _i8.target809,
        'TEXTURE_MAG_FILTER',
      );
  static _i2.num get textureMinFilter => _i4.getProperty(
        _i8.target809,
        'TEXTURE_MIN_FILTER',
      );
  static _i2.num get textureWrapS => _i4.getProperty(
        _i8.target809,
        'TEXTURE_WRAP_S',
      );
  static _i2.num get textureWrapT => _i4.getProperty(
        _i8.target809,
        'TEXTURE_WRAP_T',
      );
  static _i2.num get texture2d => _i4.getProperty(
        _i8.target809,
        'TEXTURE_2D',
      );
  static _i2.num get texture => _i4.getProperty(
        _i8.target809,
        'TEXTURE',
      );
  static _i2.num get textureCubeMap => _i4.getProperty(
        _i8.target809,
        'TEXTURE_CUBE_MAP',
      );
  static _i2.num get textureBindingCubeMap => _i4.getProperty(
        _i8.target809,
        'TEXTURE_BINDING_CUBE_MAP',
      );
  static _i2.num get textureCubeMapPositiveX => _i4.getProperty(
        _i8.target809,
        'TEXTURE_CUBE_MAP_POSITIVE_X',
      );
  static _i2.num get textureCubeMapNegativeX => _i4.getProperty(
        _i8.target809,
        'TEXTURE_CUBE_MAP_NEGATIVE_X',
      );
  static _i2.num get textureCubeMapPositiveY => _i4.getProperty(
        _i8.target809,
        'TEXTURE_CUBE_MAP_POSITIVE_Y',
      );
  static _i2.num get textureCubeMapNegativeY => _i4.getProperty(
        _i8.target809,
        'TEXTURE_CUBE_MAP_NEGATIVE_Y',
      );
  static _i2.num get textureCubeMapPositiveZ => _i4.getProperty(
        _i8.target809,
        'TEXTURE_CUBE_MAP_POSITIVE_Z',
      );
  static _i2.num get textureCubeMapNegativeZ => _i4.getProperty(
        _i8.target809,
        'TEXTURE_CUBE_MAP_NEGATIVE_Z',
      );
  static _i2.num get maxCubeMapTextureSize => _i4.getProperty(
        _i8.target809,
        'MAX_CUBE_MAP_TEXTURE_SIZE',
      );
  static _i2.num get texture0 => _i4.getProperty(
        _i8.target809,
        'TEXTURE0',
      );
  static _i2.num get texture1 => _i4.getProperty(
        _i8.target809,
        'TEXTURE1',
      );
  static _i2.num get texture2 => _i4.getProperty(
        _i8.target809,
        'TEXTURE2',
      );
  static _i2.num get texture3 => _i4.getProperty(
        _i8.target809,
        'TEXTURE3',
      );
  static _i2.num get texture4 => _i4.getProperty(
        _i8.target809,
        'TEXTURE4',
      );
  static _i2.num get texture5 => _i4.getProperty(
        _i8.target809,
        'TEXTURE5',
      );
  static _i2.num get texture6 => _i4.getProperty(
        _i8.target809,
        'TEXTURE6',
      );
  static _i2.num get texture7 => _i4.getProperty(
        _i8.target809,
        'TEXTURE7',
      );
  static _i2.num get texture8 => _i4.getProperty(
        _i8.target809,
        'TEXTURE8',
      );
  static _i2.num get texture9 => _i4.getProperty(
        _i8.target809,
        'TEXTURE9',
      );
  static _i2.num get texture10 => _i4.getProperty(
        _i8.target809,
        'TEXTURE10',
      );
  static _i2.num get texture11 => _i4.getProperty(
        _i8.target809,
        'TEXTURE11',
      );
  static _i2.num get texture12 => _i4.getProperty(
        _i8.target809,
        'TEXTURE12',
      );
  static _i2.num get texture13 => _i4.getProperty(
        _i8.target809,
        'TEXTURE13',
      );
  static _i2.num get texture14 => _i4.getProperty(
        _i8.target809,
        'TEXTURE14',
      );
  static _i2.num get texture15 => _i4.getProperty(
        _i8.target809,
        'TEXTURE15',
      );
  static _i2.num get texture16 => _i4.getProperty(
        _i8.target809,
        'TEXTURE16',
      );
  static _i2.num get texture17 => _i4.getProperty(
        _i8.target809,
        'TEXTURE17',
      );
  static _i2.num get texture18 => _i4.getProperty(
        _i8.target809,
        'TEXTURE18',
      );
  static _i2.num get texture19 => _i4.getProperty(
        _i8.target809,
        'TEXTURE19',
      );
  static _i2.num get texture20 => _i4.getProperty(
        _i8.target809,
        'TEXTURE20',
      );
  static _i2.num get texture21 => _i4.getProperty(
        _i8.target809,
        'TEXTURE21',
      );
  static _i2.num get texture22 => _i4.getProperty(
        _i8.target809,
        'TEXTURE22',
      );
  static _i2.num get texture23 => _i4.getProperty(
        _i8.target809,
        'TEXTURE23',
      );
  static _i2.num get texture24 => _i4.getProperty(
        _i8.target809,
        'TEXTURE24',
      );
  static _i2.num get texture25 => _i4.getProperty(
        _i8.target809,
        'TEXTURE25',
      );
  static _i2.num get texture26 => _i4.getProperty(
        _i8.target809,
        'TEXTURE26',
      );
  static _i2.num get texture27 => _i4.getProperty(
        _i8.target809,
        'TEXTURE27',
      );
  static _i2.num get texture28 => _i4.getProperty(
        _i8.target809,
        'TEXTURE28',
      );
  static _i2.num get texture29 => _i4.getProperty(
        _i8.target809,
        'TEXTURE29',
      );
  static _i2.num get texture30 => _i4.getProperty(
        _i8.target809,
        'TEXTURE30',
      );
  static _i2.num get texture31 => _i4.getProperty(
        _i8.target809,
        'TEXTURE31',
      );
  static _i2.num get activeTexture => _i4.getProperty(
        _i8.target809,
        'ACTIVE_TEXTURE',
      );
  static _i2.num get repeat => _i4.getProperty(
        _i8.target809,
        'REPEAT',
      );
  static _i2.num get clampToEdge => _i4.getProperty(
        _i8.target809,
        'CLAMP_TO_EDGE',
      );
  static _i2.num get mirroredRepeat => _i4.getProperty(
        _i8.target809,
        'MIRRORED_REPEAT',
      );
  static _i2.num get floatVec2 => _i4.getProperty(
        _i8.target809,
        'FLOAT_VEC2',
      );
  static _i2.num get floatVec3 => _i4.getProperty(
        _i8.target809,
        'FLOAT_VEC3',
      );
  static _i2.num get floatVec4 => _i4.getProperty(
        _i8.target809,
        'FLOAT_VEC4',
      );
  static _i2.num get intVec2 => _i4.getProperty(
        _i8.target809,
        'INT_VEC2',
      );
  static _i2.num get intVec3 => _i4.getProperty(
        _i8.target809,
        'INT_VEC3',
      );
  static _i2.num get intVec4 => _i4.getProperty(
        _i8.target809,
        'INT_VEC4',
      );
  static _i2.num get bool$ => _i4.getProperty(
        _i8.target809,
        'BOOL',
      );
  static _i2.num get boolVec2 => _i4.getProperty(
        _i8.target809,
        'BOOL_VEC2',
      );
  static _i2.num get boolVec3 => _i4.getProperty(
        _i8.target809,
        'BOOL_VEC3',
      );
  static _i2.num get boolVec4 => _i4.getProperty(
        _i8.target809,
        'BOOL_VEC4',
      );
  static _i2.num get floatMat2 => _i4.getProperty(
        _i8.target809,
        'FLOAT_MAT2',
      );
  static _i2.num get floatMat3 => _i4.getProperty(
        _i8.target809,
        'FLOAT_MAT3',
      );
  static _i2.num get floatMat4 => _i4.getProperty(
        _i8.target809,
        'FLOAT_MAT4',
      );
  static _i2.num get sampler2d => _i4.getProperty(
        _i8.target809,
        'SAMPLER_2D',
      );
  static _i2.num get samplerCube => _i4.getProperty(
        _i8.target809,
        'SAMPLER_CUBE',
      );
  static _i2.num get vertexAttribArrayEnabled => _i4.getProperty(
        _i8.target809,
        'VERTEX_ATTRIB_ARRAY_ENABLED',
      );
  static _i2.num get vertexAttribArraySize => _i4.getProperty(
        _i8.target809,
        'VERTEX_ATTRIB_ARRAY_SIZE',
      );
  static _i2.num get vertexAttribArrayStride => _i4.getProperty(
        _i8.target809,
        'VERTEX_ATTRIB_ARRAY_STRIDE',
      );
  static _i2.num get vertexAttribArrayType => _i4.getProperty(
        _i8.target809,
        'VERTEX_ATTRIB_ARRAY_TYPE',
      );
  static _i2.num get vertexAttribArrayNormalized => _i4.getProperty(
        _i8.target809,
        'VERTEX_ATTRIB_ARRAY_NORMALIZED',
      );
  static _i2.num get vertexAttribArrayPointer => _i4.getProperty(
        _i8.target809,
        'VERTEX_ATTRIB_ARRAY_POINTER',
      );
  static _i2.num get vertexAttribArrayBufferBinding => _i4.getProperty(
        _i8.target809,
        'VERTEX_ATTRIB_ARRAY_BUFFER_BINDING',
      );
  static _i2.num get implementationColorReadType => _i4.getProperty(
        _i8.target809,
        'IMPLEMENTATION_COLOR_READ_TYPE',
      );
  static _i2.num get implementationColorReadFormat => _i4.getProperty(
        _i8.target809,
        'IMPLEMENTATION_COLOR_READ_FORMAT',
      );
  static _i2.num get compileStatus => _i4.getProperty(
        _i8.target809,
        'COMPILE_STATUS',
      );
  static _i2.num get lowFloat => _i4.getProperty(
        _i8.target809,
        'LOW_FLOAT',
      );
  static _i2.num get mediumFloat => _i4.getProperty(
        _i8.target809,
        'MEDIUM_FLOAT',
      );
  static _i2.num get highFloat => _i4.getProperty(
        _i8.target809,
        'HIGH_FLOAT',
      );
  static _i2.num get lowInt => _i4.getProperty(
        _i8.target809,
        'LOW_INT',
      );
  static _i2.num get mediumInt => _i4.getProperty(
        _i8.target809,
        'MEDIUM_INT',
      );
  static _i2.num get highInt => _i4.getProperty(
        _i8.target809,
        'HIGH_INT',
      );
  static _i2.num get framebuffer => _i4.getProperty(
        _i8.target809,
        'FRAMEBUFFER',
      );
  static _i2.num get renderbuffer => _i4.getProperty(
        _i8.target809,
        'RENDERBUFFER',
      );
  static _i2.num get rgba4 => _i4.getProperty(
        _i8.target809,
        'RGBA4',
      );
  static _i2.num get rgb5A1 => _i4.getProperty(
        _i8.target809,
        'RGB5_A1',
      );
  static _i2.num get rgb565 => _i4.getProperty(
        _i8.target809,
        'RGB565',
      );
  static _i2.num get depthComponent16 => _i4.getProperty(
        _i8.target809,
        'DEPTH_COMPONENT16',
      );
  static _i2.num get stencilIndex8 => _i4.getProperty(
        _i8.target809,
        'STENCIL_INDEX8',
      );
  static _i2.num get depthStencil => _i4.getProperty(
        _i8.target809,
        'DEPTH_STENCIL',
      );
  static _i2.num get renderbufferWidth => _i4.getProperty(
        _i8.target809,
        'RENDERBUFFER_WIDTH',
      );
  static _i2.num get renderbufferHeight => _i4.getProperty(
        _i8.target809,
        'RENDERBUFFER_HEIGHT',
      );
  static _i2.num get renderbufferInternalFormat => _i4.getProperty(
        _i8.target809,
        'RENDERBUFFER_INTERNAL_FORMAT',
      );
  static _i2.num get renderbufferRedSize => _i4.getProperty(
        _i8.target809,
        'RENDERBUFFER_RED_SIZE',
      );
  static _i2.num get renderbufferGreenSize => _i4.getProperty(
        _i8.target809,
        'RENDERBUFFER_GREEN_SIZE',
      );
  static _i2.num get renderbufferBlueSize => _i4.getProperty(
        _i8.target809,
        'RENDERBUFFER_BLUE_SIZE',
      );
  static _i2.num get renderbufferAlphaSize => _i4.getProperty(
        _i8.target809,
        'RENDERBUFFER_ALPHA_SIZE',
      );
  static _i2.num get renderbufferDepthSize => _i4.getProperty(
        _i8.target809,
        'RENDERBUFFER_DEPTH_SIZE',
      );
  static _i2.num get renderbufferStencilSize => _i4.getProperty(
        _i8.target809,
        'RENDERBUFFER_STENCIL_SIZE',
      );
  static _i2.num get framebufferAttachmentObjectType => _i4.getProperty(
        _i8.target809,
        'FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE',
      );
  static _i2.num get framebufferAttachmentObjectName => _i4.getProperty(
        _i8.target809,
        'FRAMEBUFFER_ATTACHMENT_OBJECT_NAME',
      );
  static _i2.num get framebufferAttachmentTextureLevel => _i4.getProperty(
        _i8.target809,
        'FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL',
      );
  static _i2.num get framebufferAttachmentTextureCubeMapFace => _i4.getProperty(
        _i8.target809,
        'FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE',
      );
  static _i2.num get colorAttachment0 => _i4.getProperty(
        _i8.target809,
        'COLOR_ATTACHMENT0',
      );
  static _i2.num get depthAttachment => _i4.getProperty(
        _i8.target809,
        'DEPTH_ATTACHMENT',
      );
  static _i2.num get stencilAttachment => _i4.getProperty(
        _i8.target809,
        'STENCIL_ATTACHMENT',
      );
  static _i2.num get depthStencilAttachment => _i4.getProperty(
        _i8.target809,
        'DEPTH_STENCIL_ATTACHMENT',
      );
  static _i2.num get none => _i4.getProperty(
        _i8.target809,
        'NONE',
      );
  static _i2.num get framebufferComplete => _i4.getProperty(
        _i8.target809,
        'FRAMEBUFFER_COMPLETE',
      );
  static _i2.num get framebufferIncompleteAttachment => _i4.getProperty(
        _i8.target809,
        'FRAMEBUFFER_INCOMPLETE_ATTACHMENT',
      );
  static _i2.num get framebufferIncompleteMissingAttachment => _i4.getProperty(
        _i8.target809,
        'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT',
      );
  static _i2.num get framebufferIncompleteDimensions => _i4.getProperty(
        _i8.target809,
        'FRAMEBUFFER_INCOMPLETE_DIMENSIONS',
      );
  static _i2.num get framebufferUnsupported => _i4.getProperty(
        _i8.target809,
        'FRAMEBUFFER_UNSUPPORTED',
      );
  static _i2.num get framebufferBinding => _i4.getProperty(
        _i8.target809,
        'FRAMEBUFFER_BINDING',
      );
  static _i2.num get renderbufferBinding => _i4.getProperty(
        _i8.target809,
        'RENDERBUFFER_BINDING',
      );
  static _i2.num get maxRenderbufferSize => _i4.getProperty(
        _i8.target809,
        'MAX_RENDERBUFFER_SIZE',
      );
  static _i2.num get invalidFramebufferOperation => _i4.getProperty(
        _i8.target809,
        'INVALID_FRAMEBUFFER_OPERATION',
      );
  static _i2.num get unpackFlipYWebgl => _i4.getProperty(
        _i8.target809,
        'UNPACK_FLIP_Y_WEBGL',
      );
  static _i2.num get unpackPremultiplyAlphaWebgl => _i4.getProperty(
        _i8.target809,
        'UNPACK_PREMULTIPLY_ALPHA_WEBGL',
      );
  static _i2.num get contextLostWebgl => _i4.getProperty(
        _i8.target809,
        'CONTEXT_LOST_WEBGL',
      );
  static _i2.num get unpackColorspaceConversionWebgl => _i4.getProperty(
        _i8.target809,
        'UNPACK_COLORSPACE_CONVERSION_WEBGL',
      );
  static _i2.num get browserDefaultWebgl => _i4.getProperty(
        _i8.target809,
        'BROWSER_DEFAULT_WEBGL',
      );
}

_i2.Object get _declaredWebGLRenderingContext => _i4.getProperty(
      _self,
      'WebGLRenderingContext',
    ); /* Source:  */

@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class WebGLRenderingContextBase {
  external factory WebGLRenderingContextBase._({
    _i2.dynamic drawingBufferColorSpace,
    _i2.dynamic drawingBufferHeight,
    _i2.dynamic drawingBufferWidth,
    _i2.dynamic depthBufferBit,
    _i2.dynamic stencilBufferBit,
    _i2.dynamic colorBufferBit,
    _i2.dynamic points,
    _i2.dynamic lines,
    _i2.dynamic lineLoop,
    _i2.dynamic lineStrip,
    _i2.dynamic triangles,
    _i2.dynamic triangleStrip,
    _i2.dynamic triangleFan,
    _i2.dynamic zero,
    _i2.dynamic one,
    _i2.dynamic srcColor,
    _i2.dynamic oneMinusSrcColor,
    _i2.dynamic srcAlpha,
    _i2.dynamic oneMinusSrcAlpha,
    _i2.dynamic dstAlpha,
    _i2.dynamic oneMinusDstAlpha,
    _i2.dynamic dstColor,
    _i2.dynamic oneMinusDstColor,
    _i2.dynamic srcAlphaSaturate,
    _i2.dynamic funcAdd,
    _i2.dynamic blendEquation$,
    _i2.dynamic blendEquationRgb,
    _i2.dynamic blendEquationAlpha,
    _i2.dynamic funcSubtract,
    _i2.dynamic funcReverseSubtract,
    _i2.dynamic blendDstRgb,
    _i2.dynamic blendSrcRgb,
    _i2.dynamic blendDstAlpha,
    _i2.dynamic blendSrcAlpha,
    _i2.dynamic constantColor,
    _i2.dynamic oneMinusConstantColor,
    _i2.dynamic constantAlpha,
    _i2.dynamic oneMinusConstantAlpha,
    _i2.dynamic blendColor$,
    _i2.dynamic arrayBuffer,
    _i2.dynamic elementArrayBuffer,
    _i2.dynamic arrayBufferBinding,
    _i2.dynamic elementArrayBufferBinding,
    _i2.dynamic streamDraw,
    _i2.dynamic staticDraw,
    _i2.dynamic dynamicDraw,
    _i2.dynamic bufferSize,
    _i2.dynamic bufferUsage,
    _i2.dynamic currentVertexAttrib,
    _i2.dynamic front,
    _i2.dynamic back,
    _i2.dynamic frontAndBack,
    _i2.dynamic cullFace$,
    _i2.dynamic blend,
    _i2.dynamic dither,
    _i2.dynamic stencilTest,
    _i2.dynamic depthTest,
    _i2.dynamic scissorTest,
    _i2.dynamic polygonOffsetFill,
    _i2.dynamic sampleAlphaToCoverage,
    _i2.dynamic sampleCoverage$,
    _i2.dynamic noError,
    _i2.dynamic invalidEnum,
    _i2.dynamic invalidValue,
    _i2.dynamic invalidOperation,
    _i2.dynamic outOfMemory,
    _i2.dynamic cw,
    _i2.dynamic ccw,
    _i2.dynamic lineWidth$,
    _i2.dynamic aliasedPointSizeRange,
    _i2.dynamic aliasedLineWidthRange,
    _i2.dynamic cullFaceMode,
    _i2.dynamic frontFace$,
    _i2.dynamic depthRange$,
    _i2.dynamic depthWritemask,
    _i2.dynamic depthClearValue,
    _i2.dynamic depthFunc$,
    _i2.dynamic stencilClearValue,
    _i2.dynamic stencilFunc$,
    _i2.dynamic stencilFail,
    _i2.dynamic stencilPassDepthFail,
    _i2.dynamic stencilPassDepthPass,
    _i2.dynamic stencilRef,
    _i2.dynamic stencilValueMask,
    _i2.dynamic stencilWritemask,
    _i2.dynamic stencilBackFunc,
    _i2.dynamic stencilBackFail,
    _i2.dynamic stencilBackPassDepthFail,
    _i2.dynamic stencilBackPassDepthPass,
    _i2.dynamic stencilBackRef,
    _i2.dynamic stencilBackValueMask,
    _i2.dynamic stencilBackWritemask,
    _i2.dynamic viewport$,
    _i2.dynamic scissorBox,
    _i2.dynamic colorClearValue,
    _i2.dynamic colorWritemask,
    _i2.dynamic unpackAlignment,
    _i2.dynamic packAlignment,
    _i2.dynamic maxTextureSize,
    _i2.dynamic maxViewportDims,
    _i2.dynamic subpixelBits,
    _i2.dynamic redBits,
    _i2.dynamic greenBits,
    _i2.dynamic blueBits,
    _i2.dynamic alphaBits,
    _i2.dynamic depthBits,
    _i2.dynamic stencilBits,
    _i2.dynamic polygonOffsetUnits,
    _i2.dynamic polygonOffsetFactor,
    _i2.dynamic textureBinding2d,
    _i2.dynamic sampleBuffers,
    _i2.dynamic samples,
    _i2.dynamic sampleCoverageValue,
    _i2.dynamic sampleCoverageInvert,
    _i2.dynamic compressedTextureFormats,
    _i2.dynamic dontCare,
    _i2.dynamic fastest,
    _i2.dynamic nicest,
    _i2.dynamic generateMipmapHint,
    _i2.dynamic byte,
    _i2.dynamic unsignedByte,
    _i2.dynamic short,
    _i2.dynamic unsignedShort,
    _i2.dynamic int$,
    _i2.dynamic unsignedInt,
    _i2.dynamic float,
    _i2.dynamic depthComponent,
    _i2.dynamic alpha,
    _i2.dynamic rgb,
    _i2.dynamic rgba,
    _i2.dynamic luminance,
    _i2.dynamic luminanceAlpha,
    _i2.dynamic unsignedShort4444,
    _i2.dynamic unsignedShort5551,
    _i2.dynamic unsignedShort565,
    _i2.dynamic fragmentShader,
    _i2.dynamic vertexShader,
    _i2.dynamic maxVertexAttribs,
    _i2.dynamic maxVertexUniformVectors,
    _i2.dynamic maxVaryingVectors,
    _i2.dynamic maxCombinedTextureImageUnits,
    _i2.dynamic maxVertexTextureImageUnits,
    _i2.dynamic maxTextureImageUnits,
    _i2.dynamic maxFragmentUniformVectors,
    _i2.dynamic shaderType,
    _i2.dynamic deleteStatus,
    _i2.dynamic linkStatus,
    _i2.dynamic validateStatus,
    _i2.dynamic attachedShaders,
    _i2.dynamic activeUniforms,
    _i2.dynamic activeAttributes,
    _i2.dynamic shadingLanguageVersion,
    _i2.dynamic currentProgram,
    _i2.dynamic never,
    _i2.dynamic less,
    _i2.dynamic equal,
    _i2.dynamic lequal,
    _i2.dynamic greater,
    _i2.dynamic notequal,
    _i2.dynamic gequal,
    _i2.dynamic always,
    _i2.dynamic keep,
    _i2.dynamic replace,
    _i2.dynamic incr,
    _i2.dynamic decr,
    _i2.dynamic invert,
    _i2.dynamic incrWrap,
    _i2.dynamic decrWrap,
    _i2.dynamic vendor,
    _i2.dynamic renderer,
    _i2.dynamic version,
    _i2.dynamic nearest,
    _i2.dynamic linear,
    _i2.dynamic nearestMipmapNearest,
    _i2.dynamic linearMipmapNearest,
    _i2.dynamic nearestMipmapLinear,
    _i2.dynamic linearMipmapLinear,
    _i2.dynamic textureMagFilter,
    _i2.dynamic textureMinFilter,
    _i2.dynamic textureWrapS,
    _i2.dynamic textureWrapT,
    _i2.dynamic texture2d,
    _i2.dynamic texture,
    _i2.dynamic textureCubeMap,
    _i2.dynamic textureBindingCubeMap,
    _i2.dynamic textureCubeMapPositiveX,
    _i2.dynamic textureCubeMapNegativeX,
    _i2.dynamic textureCubeMapPositiveY,
    _i2.dynamic textureCubeMapNegativeY,
    _i2.dynamic textureCubeMapPositiveZ,
    _i2.dynamic textureCubeMapNegativeZ,
    _i2.dynamic maxCubeMapTextureSize,
    _i2.dynamic texture0,
    _i2.dynamic texture1,
    _i2.dynamic texture2,
    _i2.dynamic texture3,
    _i2.dynamic texture4,
    _i2.dynamic texture5,
    _i2.dynamic texture6,
    _i2.dynamic texture7,
    _i2.dynamic texture8,
    _i2.dynamic texture9,
    _i2.dynamic texture10,
    _i2.dynamic texture11,
    _i2.dynamic texture12,
    _i2.dynamic texture13,
    _i2.dynamic texture14,
    _i2.dynamic texture15,
    _i2.dynamic texture16,
    _i2.dynamic texture17,
    _i2.dynamic texture18,
    _i2.dynamic texture19,
    _i2.dynamic texture20,
    _i2.dynamic texture21,
    _i2.dynamic texture22,
    _i2.dynamic texture23,
    _i2.dynamic texture24,
    _i2.dynamic texture25,
    _i2.dynamic texture26,
    _i2.dynamic texture27,
    _i2.dynamic texture28,
    _i2.dynamic texture29,
    _i2.dynamic texture30,
    _i2.dynamic texture31,
    _i2.dynamic activeTexture$,
    _i2.dynamic repeat,
    _i2.dynamic clampToEdge,
    _i2.dynamic mirroredRepeat,
    _i2.dynamic floatVec2,
    _i2.dynamic floatVec3,
    _i2.dynamic floatVec4,
    _i2.dynamic intVec2,
    _i2.dynamic intVec3,
    _i2.dynamic intVec4,
    _i2.dynamic bool$,
    _i2.dynamic boolVec2,
    _i2.dynamic boolVec3,
    _i2.dynamic boolVec4,
    _i2.dynamic floatMat2,
    _i2.dynamic floatMat3,
    _i2.dynamic floatMat4,
    _i2.dynamic sampler2d,
    _i2.dynamic samplerCube,
    _i2.dynamic vertexAttribArrayEnabled,
    _i2.dynamic vertexAttribArraySize,
    _i2.dynamic vertexAttribArrayStride,
    _i2.dynamic vertexAttribArrayType,
    _i2.dynamic vertexAttribArrayNormalized,
    _i2.dynamic vertexAttribArrayPointer,
    _i2.dynamic vertexAttribArrayBufferBinding,
    _i2.dynamic implementationColorReadType,
    _i2.dynamic implementationColorReadFormat,
    _i2.dynamic compileStatus,
    _i2.dynamic lowFloat,
    _i2.dynamic mediumFloat,
    _i2.dynamic highFloat,
    _i2.dynamic lowInt,
    _i2.dynamic mediumInt,
    _i2.dynamic highInt,
    _i2.dynamic framebuffer,
    _i2.dynamic renderbuffer,
    _i2.dynamic rgba4,
    _i2.dynamic rgb5A1,
    _i2.dynamic rgb565,
    _i2.dynamic depthComponent16,
    _i2.dynamic stencilIndex8,
    _i2.dynamic depthStencil,
    _i2.dynamic renderbufferWidth,
    _i2.dynamic renderbufferHeight,
    _i2.dynamic renderbufferInternalFormat,
    _i2.dynamic renderbufferRedSize,
    _i2.dynamic renderbufferGreenSize,
    _i2.dynamic renderbufferBlueSize,
    _i2.dynamic renderbufferAlphaSize,
    _i2.dynamic renderbufferDepthSize,
    _i2.dynamic renderbufferStencilSize,
    _i2.dynamic framebufferAttachmentObjectType,
    _i2.dynamic framebufferAttachmentObjectName,
    _i2.dynamic framebufferAttachmentTextureLevel,
    _i2.dynamic framebufferAttachmentTextureCubeMapFace,
    _i2.dynamic colorAttachment0,
    _i2.dynamic depthAttachment,
    _i2.dynamic stencilAttachment,
    _i2.dynamic depthStencilAttachment,
    _i2.dynamic none,
    _i2.dynamic framebufferComplete,
    _i2.dynamic framebufferIncompleteAttachment,
    _i2.dynamic framebufferIncompleteMissingAttachment,
    _i2.dynamic framebufferIncompleteDimensions,
    _i2.dynamic framebufferUnsupported,
    _i2.dynamic framebufferBinding,
    _i2.dynamic renderbufferBinding,
    _i2.dynamic maxRenderbufferSize,
    _i2.dynamic invalidFramebufferOperation,
    _i2.dynamic unpackFlipYWebgl,
    _i2.dynamic unpackPremultiplyAlphaWebgl,
    _i2.dynamic contextLostWebgl,
    _i2.dynamic unpackColorspaceConversionWebgl,
    _i2.dynamic browserDefaultWebgl,
    _i2.dynamic activeTexture,
    _i2.dynamic attachShader,
    _i2.dynamic bindAttribLocation,
    _i2.dynamic bindBuffer,
    _i2.dynamic bindFramebuffer,
    _i2.dynamic bindRenderbuffer,
    _i2.dynamic bindTexture,
    _i2.dynamic blendColor,
    _i2.dynamic blendEquation,
    _i2.dynamic blendEquationSeparate,
    _i2.dynamic blendFunc,
    _i2.dynamic blendFuncSeparate,
    _i2.dynamic checkFramebufferStatus,
    _i2.dynamic clear,
    _i2.dynamic clearColor,
    _i2.dynamic clearDepth,
    _i2.dynamic clearStencil,
    _i2.dynamic colorMask,
    _i2.dynamic compileShader,
    _i2.dynamic copyTexImage2D,
    _i2.dynamic copyTexSubImage2D,
    _i2.dynamic createBuffer,
    _i2.dynamic createFramebuffer,
    _i2.dynamic createProgram,
    _i2.dynamic createRenderbuffer,
    _i2.dynamic createShader,
    _i2.dynamic createTexture,
    _i2.dynamic cullFace,
    _i2.dynamic deleteBuffer,
    _i2.dynamic deleteFramebuffer,
    _i2.dynamic deleteProgram,
    _i2.dynamic deleteRenderbuffer,
    _i2.dynamic deleteShader,
    _i2.dynamic deleteTexture,
    _i2.dynamic depthFunc,
    _i2.dynamic depthMask,
    _i2.dynamic depthRange,
    _i2.dynamic detachShader,
    _i2.dynamic disable,
    _i2.dynamic disableVertexAttribArray,
    _i2.dynamic drawArrays,
    _i2.dynamic drawElements,
    _i2.dynamic enable,
    _i2.dynamic enableVertexAttribArray,
    _i2.dynamic finish,
    _i2.dynamic flush,
    _i2.dynamic framebufferRenderbuffer,
    _i2.dynamic framebufferTexture2D,
    _i2.dynamic frontFace,
    _i2.dynamic generateMipmap,
    _i2.dynamic getActiveAttrib,
    _i2.dynamic getActiveUniform,
    _i2.dynamic getAttachedShaders,
    _i2.dynamic getAttribLocation,
    _i2.dynamic getBufferParameter,
    _i2.dynamic getContextAttributes,
    _i2.dynamic getError,
    _i2.dynamic getFramebufferAttachmentParameter,
    _i2.dynamic getParameter,
    _i2.dynamic getProgramInfoLog,
    _i2.dynamic getProgramParameter,
    _i2.dynamic getRenderbufferParameter,
    _i2.dynamic getShaderInfoLog,
    _i2.dynamic getShaderParameter,
    _i2.dynamic getShaderPrecisionFormat,
    _i2.dynamic getShaderSource,
    _i2.dynamic getSupportedExtensions,
    _i2.dynamic getTexParameter,
    _i2.dynamic getUniform,
    _i2.dynamic getUniformLocation,
    _i2.dynamic getVertexAttrib,
    _i2.dynamic getVertexAttribOffset,
    _i2.dynamic hint,
    _i2.dynamic isBuffer,
    _i2.dynamic isContextLost,
    _i2.dynamic isEnabled,
    _i2.dynamic isFramebuffer,
    _i2.dynamic isProgram,
    _i2.dynamic isRenderbuffer,
    _i2.dynamic isShader,
    _i2.dynamic isTexture,
    _i2.dynamic lineWidth,
    _i2.dynamic linkProgram,
    _i2.dynamic pixelStorei,
    _i2.dynamic polygonOffset,
    _i2.dynamic renderbufferStorage,
    _i2.dynamic sampleCoverage,
    _i2.dynamic scissor,
    _i2.dynamic shaderSource,
    _i2.dynamic stencilFunc,
    _i2.dynamic stencilFuncSeparate,
    _i2.dynamic stencilMask,
    _i2.dynamic stencilMaskSeparate,
    _i2.dynamic stencilOp,
    _i2.dynamic stencilOpSeparate,
    _i2.dynamic texParameterf,
    _i2.dynamic texParameteri,
    _i2.dynamic uniform1f,
    _i2.dynamic uniform1i,
    _i2.dynamic uniform2f,
    _i2.dynamic uniform2i,
    _i2.dynamic uniform3f,
    _i2.dynamic uniform3i,
    _i2.dynamic uniform4f,
    _i2.dynamic uniform4i,
    _i2.dynamic useProgram,
    _i2.dynamic validateProgram,
    _i2.dynamic vertexAttrib1f,
    _i2.dynamic vertexAttrib2f,
    _i2.dynamic vertexAttrib3f,
    _i2.dynamic vertexAttrib4f,
    _i2.dynamic vertexAttribPointer,
    _i2.dynamic viewport,
  });

  factory WebGLRenderingContextBase({
    _i3.PredefinedColorSpace? drawingBufferColorSpace,
    _i2.num? drawingBufferHeight,
    _i2.num? drawingBufferWidth,
    _i2.num? depthBufferBit,
    _i2.num? stencilBufferBit,
    _i2.num? colorBufferBit,
    _i2.num? points,
    _i2.num? lines,
    _i2.num? lineLoop,
    _i2.num? lineStrip,
    _i2.num? triangles,
    _i2.num? triangleStrip,
    _i2.num? triangleFan,
    _i2.num? zero,
    _i2.num? one,
    _i2.num? srcColor,
    _i2.num? oneMinusSrcColor,
    _i2.num? srcAlpha,
    _i2.num? oneMinusSrcAlpha,
    _i2.num? dstAlpha,
    _i2.num? oneMinusDstAlpha,
    _i2.num? dstColor,
    _i2.num? oneMinusDstColor,
    _i2.num? srcAlphaSaturate,
    _i2.num? funcAdd,
    _i2.num? blendEquation$,
    _i2.num? blendEquationRgb,
    _i2.num? blendEquationAlpha,
    _i2.num? funcSubtract,
    _i2.num? funcReverseSubtract,
    _i2.num? blendDstRgb,
    _i2.num? blendSrcRgb,
    _i2.num? blendDstAlpha,
    _i2.num? blendSrcAlpha,
    _i2.num? constantColor,
    _i2.num? oneMinusConstantColor,
    _i2.num? constantAlpha,
    _i2.num? oneMinusConstantAlpha,
    _i2.num? blendColor$,
    _i2.num? arrayBuffer,
    _i2.num? elementArrayBuffer,
    _i2.num? arrayBufferBinding,
    _i2.num? elementArrayBufferBinding,
    _i2.num? streamDraw,
    _i2.num? staticDraw,
    _i2.num? dynamicDraw,
    _i2.num? bufferSize,
    _i2.num? bufferUsage,
    _i2.num? currentVertexAttrib,
    _i2.num? front,
    _i2.num? back,
    _i2.num? frontAndBack,
    _i2.num? cullFace$,
    _i2.num? blend,
    _i2.num? dither,
    _i2.num? stencilTest,
    _i2.num? depthTest,
    _i2.num? scissorTest,
    _i2.num? polygonOffsetFill,
    _i2.num? sampleAlphaToCoverage,
    _i2.num? sampleCoverage$,
    _i2.num? noError,
    _i2.num? invalidEnum,
    _i2.num? invalidValue,
    _i2.num? invalidOperation,
    _i2.num? outOfMemory,
    _i2.num? cw,
    _i2.num? ccw,
    _i2.num? lineWidth$,
    _i2.num? aliasedPointSizeRange,
    _i2.num? aliasedLineWidthRange,
    _i2.num? cullFaceMode,
    _i2.num? frontFace$,
    _i2.num? depthRange$,
    _i2.num? depthWritemask,
    _i2.num? depthClearValue,
    _i2.num? depthFunc$,
    _i2.num? stencilClearValue,
    _i2.num? stencilFunc$,
    _i2.num? stencilFail,
    _i2.num? stencilPassDepthFail,
    _i2.num? stencilPassDepthPass,
    _i2.num? stencilRef,
    _i2.num? stencilValueMask,
    _i2.num? stencilWritemask,
    _i2.num? stencilBackFunc,
    _i2.num? stencilBackFail,
    _i2.num? stencilBackPassDepthFail,
    _i2.num? stencilBackPassDepthPass,
    _i2.num? stencilBackRef,
    _i2.num? stencilBackValueMask,
    _i2.num? stencilBackWritemask,
    _i2.num? viewport$,
    _i2.num? scissorBox,
    _i2.num? colorClearValue,
    _i2.num? colorWritemask,
    _i2.num? unpackAlignment,
    _i2.num? packAlignment,
    _i2.num? maxTextureSize,
    _i2.num? maxViewportDims,
    _i2.num? subpixelBits,
    _i2.num? redBits,
    _i2.num? greenBits,
    _i2.num? blueBits,
    _i2.num? alphaBits,
    _i2.num? depthBits,
    _i2.num? stencilBits,
    _i2.num? polygonOffsetUnits,
    _i2.num? polygonOffsetFactor,
    _i2.num? textureBinding2d,
    _i2.num? sampleBuffers,
    _i2.num? samples,
    _i2.num? sampleCoverageValue,
    _i2.num? sampleCoverageInvert,
    _i2.num? compressedTextureFormats,
    _i2.num? dontCare,
    _i2.num? fastest,
    _i2.num? nicest,
    _i2.num? generateMipmapHint,
    _i2.num? byte,
    _i2.num? unsignedByte,
    _i2.num? short,
    _i2.num? unsignedShort,
    _i2.num? int$,
    _i2.num? unsignedInt,
    _i2.num? float,
    _i2.num? depthComponent,
    _i2.num? alpha,
    _i2.num? rgb,
    _i2.num? rgba,
    _i2.num? luminance,
    _i2.num? luminanceAlpha,
    _i2.num? unsignedShort4444,
    _i2.num? unsignedShort5551,
    _i2.num? unsignedShort565,
    _i2.num? fragmentShader,
    _i2.num? vertexShader,
    _i2.num? maxVertexAttribs,
    _i2.num? maxVertexUniformVectors,
    _i2.num? maxVaryingVectors,
    _i2.num? maxCombinedTextureImageUnits,
    _i2.num? maxVertexTextureImageUnits,
    _i2.num? maxTextureImageUnits,
    _i2.num? maxFragmentUniformVectors,
    _i2.num? shaderType,
    _i2.num? deleteStatus,
    _i2.num? linkStatus,
    _i2.num? validateStatus,
    _i2.num? attachedShaders,
    _i2.num? activeUniforms,
    _i2.num? activeAttributes,
    _i2.num? shadingLanguageVersion,
    _i2.num? currentProgram,
    _i2.num? never,
    _i2.num? less,
    _i2.num? equal,
    _i2.num? lequal,
    _i2.num? greater,
    _i2.num? notequal,
    _i2.num? gequal,
    _i2.num? always,
    _i2.num? keep,
    _i2.num? replace,
    _i2.num? incr,
    _i2.num? decr,
    _i2.num? invert,
    _i2.num? incrWrap,
    _i2.num? decrWrap,
    _i2.num? vendor,
    _i2.num? renderer,
    _i2.num? version,
    _i2.num? nearest,
    _i2.num? linear,
    _i2.num? nearestMipmapNearest,
    _i2.num? linearMipmapNearest,
    _i2.num? nearestMipmapLinear,
    _i2.num? linearMipmapLinear,
    _i2.num? textureMagFilter,
    _i2.num? textureMinFilter,
    _i2.num? textureWrapS,
    _i2.num? textureWrapT,
    _i2.num? texture2d,
    _i2.num? texture,
    _i2.num? textureCubeMap,
    _i2.num? textureBindingCubeMap,
    _i2.num? textureCubeMapPositiveX,
    _i2.num? textureCubeMapNegativeX,
    _i2.num? textureCubeMapPositiveY,
    _i2.num? textureCubeMapNegativeY,
    _i2.num? textureCubeMapPositiveZ,
    _i2.num? textureCubeMapNegativeZ,
    _i2.num? maxCubeMapTextureSize,
    _i2.num? texture0,
    _i2.num? texture1,
    _i2.num? texture2,
    _i2.num? texture3,
    _i2.num? texture4,
    _i2.num? texture5,
    _i2.num? texture6,
    _i2.num? texture7,
    _i2.num? texture8,
    _i2.num? texture9,
    _i2.num? texture10,
    _i2.num? texture11,
    _i2.num? texture12,
    _i2.num? texture13,
    _i2.num? texture14,
    _i2.num? texture15,
    _i2.num? texture16,
    _i2.num? texture17,
    _i2.num? texture18,
    _i2.num? texture19,
    _i2.num? texture20,
    _i2.num? texture21,
    _i2.num? texture22,
    _i2.num? texture23,
    _i2.num? texture24,
    _i2.num? texture25,
    _i2.num? texture26,
    _i2.num? texture27,
    _i2.num? texture28,
    _i2.num? texture29,
    _i2.num? texture30,
    _i2.num? texture31,
    _i2.num? activeTexture$,
    _i2.num? repeat,
    _i2.num? clampToEdge,
    _i2.num? mirroredRepeat,
    _i2.num? floatVec2,
    _i2.num? floatVec3,
    _i2.num? floatVec4,
    _i2.num? intVec2,
    _i2.num? intVec3,
    _i2.num? intVec4,
    _i2.num? bool$,
    _i2.num? boolVec2,
    _i2.num? boolVec3,
    _i2.num? boolVec4,
    _i2.num? floatMat2,
    _i2.num? floatMat3,
    _i2.num? floatMat4,
    _i2.num? sampler2d,
    _i2.num? samplerCube,
    _i2.num? vertexAttribArrayEnabled,
    _i2.num? vertexAttribArraySize,
    _i2.num? vertexAttribArrayStride,
    _i2.num? vertexAttribArrayType,
    _i2.num? vertexAttribArrayNormalized,
    _i2.num? vertexAttribArrayPointer,
    _i2.num? vertexAttribArrayBufferBinding,
    _i2.num? implementationColorReadType,
    _i2.num? implementationColorReadFormat,
    _i2.num? compileStatus,
    _i2.num? lowFloat,
    _i2.num? mediumFloat,
    _i2.num? highFloat,
    _i2.num? lowInt,
    _i2.num? mediumInt,
    _i2.num? highInt,
    _i2.num? framebuffer,
    _i2.num? renderbuffer,
    _i2.num? rgba4,
    _i2.num? rgb5A1,
    _i2.num? rgb565,
    _i2.num? depthComponent16,
    _i2.num? stencilIndex8,
    _i2.num? depthStencil,
    _i2.num? renderbufferWidth,
    _i2.num? renderbufferHeight,
    _i2.num? renderbufferInternalFormat,
    _i2.num? renderbufferRedSize,
    _i2.num? renderbufferGreenSize,
    _i2.num? renderbufferBlueSize,
    _i2.num? renderbufferAlphaSize,
    _i2.num? renderbufferDepthSize,
    _i2.num? renderbufferStencilSize,
    _i2.num? framebufferAttachmentObjectType,
    _i2.num? framebufferAttachmentObjectName,
    _i2.num? framebufferAttachmentTextureLevel,
    _i2.num? framebufferAttachmentTextureCubeMapFace,
    _i2.num? colorAttachment0,
    _i2.num? depthAttachment,
    _i2.num? stencilAttachment,
    _i2.num? depthStencilAttachment,
    _i2.num? none,
    _i2.num? framebufferComplete,
    _i2.num? framebufferIncompleteAttachment,
    _i2.num? framebufferIncompleteMissingAttachment,
    _i2.num? framebufferIncompleteDimensions,
    _i2.num? framebufferUnsupported,
    _i2.num? framebufferBinding,
    _i2.num? renderbufferBinding,
    _i2.num? maxRenderbufferSize,
    _i2.num? invalidFramebufferOperation,
    _i2.num? unpackFlipYWebgl,
    _i2.num? unpackPremultiplyAlphaWebgl,
    _i2.num? contextLostWebgl,
    _i2.num? unpackColorspaceConversionWebgl,
    _i2.num? browserDefaultWebgl,
    void Function(_i2.num)? activeTexture,
    void Function(
      _i3.WebGLProgram,
      _i3.WebGLShader,
    )? attachShader,
    void Function(
      _i3.WebGLProgram,
      _i2.num,
      _i2.String,
    )? bindAttribLocation,
    void Function(
      _i2.num, [
      _i3.WebGLBuffer?,
    ])? bindBuffer,
    void Function(
      _i2.num, [
      _i3.WebGLFramebuffer?,
    ])? bindFramebuffer,
    void Function(
      _i2.num, [
      _i3.WebGLRenderbuffer?,
    ])? bindRenderbuffer,
    void Function(
      _i2.num, [
      _i3.WebGLTexture?,
    ])? bindTexture,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
    )? blendColor,
    void Function(_i2.num)? blendEquation,
    void Function(
      _i2.num,
      _i2.num,
    )? blendEquationSeparate,
    void Function(
      _i2.num,
      _i2.num,
    )? blendFunc,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
    )? blendFuncSeparate,
    _i2.num Function(_i2.num)? checkFramebufferStatus,
    void Function(_i2.num)? clear,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
    )? clearColor,
    void Function(_i2.num)? clearDepth,
    void Function(_i2.num)? clearStencil,
    void Function(
      _i2.bool,
      _i2.bool,
      _i2.bool,
      _i2.bool,
    )? colorMask,
    void Function(_i3.WebGLShader)? compileShader,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
    )? copyTexImage2D,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
    )? copyTexSubImage2D,
    _i3.WebGLBuffer? Function()? createBuffer,
    _i3.WebGLFramebuffer? Function()? createFramebuffer,
    _i3.WebGLProgram? Function()? createProgram,
    _i3.WebGLRenderbuffer? Function()? createRenderbuffer,
    _i3.WebGLShader? Function(_i2.num)? createShader,
    _i3.WebGLTexture? Function()? createTexture,
    void Function(_i2.num)? cullFace,
    void Function([_i3.WebGLBuffer?])? deleteBuffer,
    void Function([_i3.WebGLFramebuffer?])? deleteFramebuffer,
    void Function([_i3.WebGLProgram?])? deleteProgram,
    void Function([_i3.WebGLRenderbuffer?])? deleteRenderbuffer,
    void Function([_i3.WebGLShader?])? deleteShader,
    void Function([_i3.WebGLTexture?])? deleteTexture,
    void Function(_i2.num)? depthFunc,
    void Function(_i2.bool)? depthMask,
    void Function(
      _i2.num,
      _i2.num,
    )? depthRange,
    void Function(
      _i3.WebGLProgram,
      _i3.WebGLShader,
    )? detachShader,
    void Function(_i2.num)? disable,
    void Function(_i2.num)? disableVertexAttribArray,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
    )? drawArrays,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
    )? drawElements,
    void Function(_i2.num)? enable,
    void Function(_i2.num)? enableVertexAttribArray,
    void Function()? finish,
    void Function()? flush,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num, [
      _i3.WebGLRenderbuffer?,
    ])? framebufferRenderbuffer,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num, [
      _i3.WebGLTexture?,
    ])? framebufferTexture2D,
    void Function(_i2.num)? frontFace,
    void Function(_i2.num)? generateMipmap,
    _i3.WebGLActiveInfo? Function(
      _i3.WebGLProgram,
      _i2.num,
    )? getActiveAttrib,
    _i3.WebGLActiveInfo? Function(
      _i3.WebGLProgram,
      _i2.num,
    )? getActiveUniform,
    _i2.List<_i3.WebGLShader>? Function(_i3.WebGLProgram)? getAttachedShaders,
    _i2.num Function(
      _i3.WebGLProgram,
      _i2.String,
    )? getAttribLocation,
    _i2.dynamic Function(
      _i2.num,
      _i2.num,
    )? getBufferParameter,
    _i3.WebGLContextAttributes? Function()? getContextAttributes,
    _i2.num Function()? getError,
    _i2.dynamic Function(
      _i2.num,
      _i2.num,
      _i2.num,
    )? getFramebufferAttachmentParameter,
    _i2.dynamic Function(_i2.num)? getParameter,
    _i2.String? Function(_i3.WebGLProgram)? getProgramInfoLog,
    _i2.dynamic Function(
      _i3.WebGLProgram,
      _i2.num,
    )? getProgramParameter,
    _i2.dynamic Function(
      _i2.num,
      _i2.num,
    )? getRenderbufferParameter,
    _i2.String? Function(_i3.WebGLShader)? getShaderInfoLog,
    _i2.dynamic Function(
      _i3.WebGLShader,
      _i2.num,
    )? getShaderParameter,
    _i3.WebGLShaderPrecisionFormat? Function(
      _i2.num,
      _i2.num,
    )? getShaderPrecisionFormat,
    _i2.String? Function(_i3.WebGLShader)? getShaderSource,
    _i2.List<_i2.String>? Function()? getSupportedExtensions,
    _i2.dynamic Function(
      _i2.num,
      _i2.num,
    )? getTexParameter,
    _i2.dynamic Function(
      _i3.WebGLProgram,
      _i3.WebGLUniformLocation,
    )? getUniform,
    _i3.WebGLUniformLocation? Function(
      _i3.WebGLProgram,
      _i2.String,
    )? getUniformLocation,
    _i2.dynamic Function(
      _i2.num,
      _i2.num,
    )? getVertexAttrib,
    _i2.num Function(
      _i2.num,
      _i2.num,
    )? getVertexAttribOffset,
    void Function(
      _i2.num,
      _i2.num,
    )? hint,
    _i2.bool Function([_i3.WebGLBuffer?])? isBuffer,
    _i2.bool Function()? isContextLost,
    _i2.bool Function(_i2.num)? isEnabled,
    _i2.bool Function([_i3.WebGLFramebuffer?])? isFramebuffer,
    _i2.bool Function([_i3.WebGLProgram?])? isProgram,
    _i2.bool Function([_i3.WebGLRenderbuffer?])? isRenderbuffer,
    _i2.bool Function([_i3.WebGLShader?])? isShader,
    _i2.bool Function([_i3.WebGLTexture?])? isTexture,
    void Function(_i2.num)? lineWidth,
    void Function(_i3.WebGLProgram)? linkProgram,
    void Function(
      _i2.num,
      _i2.Object,
    )? pixelStorei,
    void Function(
      _i2.num,
      _i2.num,
    )? polygonOffset,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
    )? renderbufferStorage,
    void Function(
      _i2.num,
      _i2.bool,
    )? sampleCoverage,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
    )? scissor,
    void Function(
      _i3.WebGLShader,
      _i2.String,
    )? shaderSource,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
    )? stencilFunc,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
    )? stencilFuncSeparate,
    void Function(_i2.num)? stencilMask,
    void Function(
      _i2.num,
      _i2.num,
    )? stencilMaskSeparate,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
    )? stencilOp,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
    )? stencilOpSeparate,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
    )? texParameterf,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
    )? texParameteri,
    void Function(
      _i2.num, [
      _i3.WebGLUniformLocation?,
    ])? uniform1f,
    void Function(
      _i2.num, [
      _i3.WebGLUniformLocation?,
    ])? uniform1i,
    void Function(
      _i2.num,
      _i2.num, [
      _i3.WebGLUniformLocation?,
    ])? uniform2f,
    void Function(
      _i2.num,
      _i2.num, [
      _i3.WebGLUniformLocation?,
    ])? uniform2i,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num, [
      _i3.WebGLUniformLocation?,
    ])? uniform3f,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num, [
      _i3.WebGLUniformLocation?,
    ])? uniform3i,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num, [
      _i3.WebGLUniformLocation?,
    ])? uniform4f,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num, [
      _i3.WebGLUniformLocation?,
    ])? uniform4i,
    void Function([_i3.WebGLProgram?])? useProgram,
    void Function(_i3.WebGLProgram)? validateProgram,
    void Function(
      _i2.num,
      _i2.num,
    )? vertexAttrib1f,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
    )? vertexAttrib2f,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
    )? vertexAttrib3f,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
    )? vertexAttrib4f,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.bool,
      _i2.num,
      _i2.num,
    )? vertexAttribPointer,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
    )? viewport,
  }) =>
      WebGLRenderingContextBase._(
        drawingBufferColorSpace: drawingBufferColorSpace?.name ?? _i6.undefined,
        drawingBufferHeight: drawingBufferHeight,
        drawingBufferWidth: drawingBufferWidth,
        depthBufferBit: depthBufferBit,
        stencilBufferBit: stencilBufferBit,
        colorBufferBit: colorBufferBit,
        points: points,
        lines: lines,
        lineLoop: lineLoop,
        lineStrip: lineStrip,
        triangles: triangles,
        triangleStrip: triangleStrip,
        triangleFan: triangleFan,
        zero: zero,
        one: one,
        srcColor: srcColor,
        oneMinusSrcColor: oneMinusSrcColor,
        srcAlpha: srcAlpha,
        oneMinusSrcAlpha: oneMinusSrcAlpha,
        dstAlpha: dstAlpha,
        oneMinusDstAlpha: oneMinusDstAlpha,
        dstColor: dstColor,
        oneMinusDstColor: oneMinusDstColor,
        srcAlphaSaturate: srcAlphaSaturate,
        funcAdd: funcAdd,
        blendEquation$: blendEquation$,
        blendEquationRgb: blendEquationRgb,
        blendEquationAlpha: blendEquationAlpha,
        funcSubtract: funcSubtract,
        funcReverseSubtract: funcReverseSubtract,
        blendDstRgb: blendDstRgb,
        blendSrcRgb: blendSrcRgb,
        blendDstAlpha: blendDstAlpha,
        blendSrcAlpha: blendSrcAlpha,
        constantColor: constantColor,
        oneMinusConstantColor: oneMinusConstantColor,
        constantAlpha: constantAlpha,
        oneMinusConstantAlpha: oneMinusConstantAlpha,
        blendColor$: blendColor$,
        arrayBuffer: arrayBuffer,
        elementArrayBuffer: elementArrayBuffer,
        arrayBufferBinding: arrayBufferBinding,
        elementArrayBufferBinding: elementArrayBufferBinding,
        streamDraw: streamDraw,
        staticDraw: staticDraw,
        dynamicDraw: dynamicDraw,
        bufferSize: bufferSize,
        bufferUsage: bufferUsage,
        currentVertexAttrib: currentVertexAttrib,
        front: front,
        back: back,
        frontAndBack: frontAndBack,
        cullFace$: cullFace$,
        blend: blend,
        dither: dither,
        stencilTest: stencilTest,
        depthTest: depthTest,
        scissorTest: scissorTest,
        polygonOffsetFill: polygonOffsetFill,
        sampleAlphaToCoverage: sampleAlphaToCoverage,
        sampleCoverage$: sampleCoverage$,
        noError: noError,
        invalidEnum: invalidEnum,
        invalidValue: invalidValue,
        invalidOperation: invalidOperation,
        outOfMemory: outOfMemory,
        cw: cw,
        ccw: ccw,
        lineWidth$: lineWidth$,
        aliasedPointSizeRange: aliasedPointSizeRange,
        aliasedLineWidthRange: aliasedLineWidthRange,
        cullFaceMode: cullFaceMode,
        frontFace$: frontFace$,
        depthRange$: depthRange$,
        depthWritemask: depthWritemask,
        depthClearValue: depthClearValue,
        depthFunc$: depthFunc$,
        stencilClearValue: stencilClearValue,
        stencilFunc$: stencilFunc$,
        stencilFail: stencilFail,
        stencilPassDepthFail: stencilPassDepthFail,
        stencilPassDepthPass: stencilPassDepthPass,
        stencilRef: stencilRef,
        stencilValueMask: stencilValueMask,
        stencilWritemask: stencilWritemask,
        stencilBackFunc: stencilBackFunc,
        stencilBackFail: stencilBackFail,
        stencilBackPassDepthFail: stencilBackPassDepthFail,
        stencilBackPassDepthPass: stencilBackPassDepthPass,
        stencilBackRef: stencilBackRef,
        stencilBackValueMask: stencilBackValueMask,
        stencilBackWritemask: stencilBackWritemask,
        viewport$: viewport$,
        scissorBox: scissorBox,
        colorClearValue: colorClearValue,
        colorWritemask: colorWritemask,
        unpackAlignment: unpackAlignment,
        packAlignment: packAlignment,
        maxTextureSize: maxTextureSize,
        maxViewportDims: maxViewportDims,
        subpixelBits: subpixelBits,
        redBits: redBits,
        greenBits: greenBits,
        blueBits: blueBits,
        alphaBits: alphaBits,
        depthBits: depthBits,
        stencilBits: stencilBits,
        polygonOffsetUnits: polygonOffsetUnits,
        polygonOffsetFactor: polygonOffsetFactor,
        textureBinding2d: textureBinding2d,
        sampleBuffers: sampleBuffers,
        samples: samples,
        sampleCoverageValue: sampleCoverageValue,
        sampleCoverageInvert: sampleCoverageInvert,
        compressedTextureFormats: compressedTextureFormats,
        dontCare: dontCare,
        fastest: fastest,
        nicest: nicest,
        generateMipmapHint: generateMipmapHint,
        byte: byte,
        unsignedByte: unsignedByte,
        short: short,
        unsignedShort: unsignedShort,
        int$: int$,
        unsignedInt: unsignedInt,
        float: float,
        depthComponent: depthComponent,
        alpha: alpha,
        rgb: rgb,
        rgba: rgba,
        luminance: luminance,
        luminanceAlpha: luminanceAlpha,
        unsignedShort4444: unsignedShort4444,
        unsignedShort5551: unsignedShort5551,
        unsignedShort565: unsignedShort565,
        fragmentShader: fragmentShader,
        vertexShader: vertexShader,
        maxVertexAttribs: maxVertexAttribs,
        maxVertexUniformVectors: maxVertexUniformVectors,
        maxVaryingVectors: maxVaryingVectors,
        maxCombinedTextureImageUnits: maxCombinedTextureImageUnits,
        maxVertexTextureImageUnits: maxVertexTextureImageUnits,
        maxTextureImageUnits: maxTextureImageUnits,
        maxFragmentUniformVectors: maxFragmentUniformVectors,
        shaderType: shaderType,
        deleteStatus: deleteStatus,
        linkStatus: linkStatus,
        validateStatus: validateStatus,
        attachedShaders: attachedShaders,
        activeUniforms: activeUniforms,
        activeAttributes: activeAttributes,
        shadingLanguageVersion: shadingLanguageVersion,
        currentProgram: currentProgram,
        never: never,
        less: less,
        equal: equal,
        lequal: lequal,
        greater: greater,
        notequal: notequal,
        gequal: gequal,
        always: always,
        keep: keep,
        replace: replace,
        incr: incr,
        decr: decr,
        invert: invert,
        incrWrap: incrWrap,
        decrWrap: decrWrap,
        vendor: vendor,
        renderer: renderer,
        version: version,
        nearest: nearest,
        linear: linear,
        nearestMipmapNearest: nearestMipmapNearest,
        linearMipmapNearest: linearMipmapNearest,
        nearestMipmapLinear: nearestMipmapLinear,
        linearMipmapLinear: linearMipmapLinear,
        textureMagFilter: textureMagFilter,
        textureMinFilter: textureMinFilter,
        textureWrapS: textureWrapS,
        textureWrapT: textureWrapT,
        texture2d: texture2d,
        texture: texture,
        textureCubeMap: textureCubeMap,
        textureBindingCubeMap: textureBindingCubeMap,
        textureCubeMapPositiveX: textureCubeMapPositiveX,
        textureCubeMapNegativeX: textureCubeMapNegativeX,
        textureCubeMapPositiveY: textureCubeMapPositiveY,
        textureCubeMapNegativeY: textureCubeMapNegativeY,
        textureCubeMapPositiveZ: textureCubeMapPositiveZ,
        textureCubeMapNegativeZ: textureCubeMapNegativeZ,
        maxCubeMapTextureSize: maxCubeMapTextureSize,
        texture0: texture0,
        texture1: texture1,
        texture2: texture2,
        texture3: texture3,
        texture4: texture4,
        texture5: texture5,
        texture6: texture6,
        texture7: texture7,
        texture8: texture8,
        texture9: texture9,
        texture10: texture10,
        texture11: texture11,
        texture12: texture12,
        texture13: texture13,
        texture14: texture14,
        texture15: texture15,
        texture16: texture16,
        texture17: texture17,
        texture18: texture18,
        texture19: texture19,
        texture20: texture20,
        texture21: texture21,
        texture22: texture22,
        texture23: texture23,
        texture24: texture24,
        texture25: texture25,
        texture26: texture26,
        texture27: texture27,
        texture28: texture28,
        texture29: texture29,
        texture30: texture30,
        texture31: texture31,
        activeTexture$: activeTexture$,
        repeat: repeat,
        clampToEdge: clampToEdge,
        mirroredRepeat: mirroredRepeat,
        floatVec2: floatVec2,
        floatVec3: floatVec3,
        floatVec4: floatVec4,
        intVec2: intVec2,
        intVec3: intVec3,
        intVec4: intVec4,
        bool$: bool$,
        boolVec2: boolVec2,
        boolVec3: boolVec3,
        boolVec4: boolVec4,
        floatMat2: floatMat2,
        floatMat3: floatMat3,
        floatMat4: floatMat4,
        sampler2d: sampler2d,
        samplerCube: samplerCube,
        vertexAttribArrayEnabled: vertexAttribArrayEnabled,
        vertexAttribArraySize: vertexAttribArraySize,
        vertexAttribArrayStride: vertexAttribArrayStride,
        vertexAttribArrayType: vertexAttribArrayType,
        vertexAttribArrayNormalized: vertexAttribArrayNormalized,
        vertexAttribArrayPointer: vertexAttribArrayPointer,
        vertexAttribArrayBufferBinding: vertexAttribArrayBufferBinding,
        implementationColorReadType: implementationColorReadType,
        implementationColorReadFormat: implementationColorReadFormat,
        compileStatus: compileStatus,
        lowFloat: lowFloat,
        mediumFloat: mediumFloat,
        highFloat: highFloat,
        lowInt: lowInt,
        mediumInt: mediumInt,
        highInt: highInt,
        framebuffer: framebuffer,
        renderbuffer: renderbuffer,
        rgba4: rgba4,
        rgb5A1: rgb5A1,
        rgb565: rgb565,
        depthComponent16: depthComponent16,
        stencilIndex8: stencilIndex8,
        depthStencil: depthStencil,
        renderbufferWidth: renderbufferWidth,
        renderbufferHeight: renderbufferHeight,
        renderbufferInternalFormat: renderbufferInternalFormat,
        renderbufferRedSize: renderbufferRedSize,
        renderbufferGreenSize: renderbufferGreenSize,
        renderbufferBlueSize: renderbufferBlueSize,
        renderbufferAlphaSize: renderbufferAlphaSize,
        renderbufferDepthSize: renderbufferDepthSize,
        renderbufferStencilSize: renderbufferStencilSize,
        framebufferAttachmentObjectType: framebufferAttachmentObjectType,
        framebufferAttachmentObjectName: framebufferAttachmentObjectName,
        framebufferAttachmentTextureLevel: framebufferAttachmentTextureLevel,
        framebufferAttachmentTextureCubeMapFace:
            framebufferAttachmentTextureCubeMapFace,
        colorAttachment0: colorAttachment0,
        depthAttachment: depthAttachment,
        stencilAttachment: stencilAttachment,
        depthStencilAttachment: depthStencilAttachment,
        none: none,
        framebufferComplete: framebufferComplete,
        framebufferIncompleteAttachment: framebufferIncompleteAttachment,
        framebufferIncompleteMissingAttachment:
            framebufferIncompleteMissingAttachment,
        framebufferIncompleteDimensions: framebufferIncompleteDimensions,
        framebufferUnsupported: framebufferUnsupported,
        framebufferBinding: framebufferBinding,
        renderbufferBinding: renderbufferBinding,
        maxRenderbufferSize: maxRenderbufferSize,
        invalidFramebufferOperation: invalidFramebufferOperation,
        unpackFlipYWebgl: unpackFlipYWebgl,
        unpackPremultiplyAlphaWebgl: unpackPremultiplyAlphaWebgl,
        contextLostWebgl: contextLostWebgl,
        unpackColorspaceConversionWebgl: unpackColorspaceConversionWebgl,
        browserDefaultWebgl: browserDefaultWebgl,
        activeTexture:
            activeTexture == null ? null : _i4.allowInterop(activeTexture),
        attachShader:
            attachShader == null ? null : _i4.allowInterop(attachShader),
        bindAttribLocation: bindAttribLocation == null
            ? null
            : _i4.allowInterop(bindAttribLocation),
        bindBuffer: bindBuffer == null ? null : _i4.allowInterop(bindBuffer),
        bindFramebuffer:
            bindFramebuffer == null ? null : _i4.allowInterop(bindFramebuffer),
        bindRenderbuffer: bindRenderbuffer == null
            ? null
            : _i4.allowInterop(bindRenderbuffer),
        bindTexture: bindTexture == null ? null : _i4.allowInterop(bindTexture),
        blendColor: blendColor == null ? null : _i4.allowInterop(blendColor),
        blendEquation:
            blendEquation == null ? null : _i4.allowInterop(blendEquation),
        blendEquationSeparate: blendEquationSeparate == null
            ? null
            : _i4.allowInterop(blendEquationSeparate),
        blendFunc: blendFunc == null ? null : _i4.allowInterop(blendFunc),
        blendFuncSeparate: blendFuncSeparate == null
            ? null
            : _i4.allowInterop(blendFuncSeparate),
        checkFramebufferStatus: checkFramebufferStatus == null
            ? null
            : _i4.allowInterop(checkFramebufferStatus),
        clear: clear == null ? null : _i4.allowInterop(clear),
        clearColor: clearColor == null ? null : _i4.allowInterop(clearColor),
        clearDepth: clearDepth == null ? null : _i4.allowInterop(clearDepth),
        clearStencil:
            clearStencil == null ? null : _i4.allowInterop(clearStencil),
        colorMask: colorMask == null ? null : _i4.allowInterop(colorMask),
        compileShader:
            compileShader == null ? null : _i4.allowInterop(compileShader),
        copyTexImage2D:
            copyTexImage2D == null ? null : _i4.allowInterop(copyTexImage2D),
        copyTexSubImage2D: copyTexSubImage2D == null
            ? null
            : _i4.allowInterop(copyTexSubImage2D),
        createBuffer: createBuffer == null
            ? null
            : _i4.allowInterop(() => () => createBuffer() ?? _i6.undefined),
        createFramebuffer: createFramebuffer == null
            ? null
            : _i4
                .allowInterop(() => () => createFramebuffer() ?? _i6.undefined),
        createProgram: createProgram == null
            ? null
            : _i4.allowInterop(() => () => createProgram() ?? _i6.undefined),
        createRenderbuffer: createRenderbuffer == null
            ? null
            : _i4.allowInterop(
                () => () => createRenderbuffer() ?? _i6.undefined),
        createShader: createShader == null
            ? null
            : _i4.allowInterop((p0) => () => createShader(p0) ?? _i6.undefined),
        createTexture: createTexture == null
            ? null
            : _i4.allowInterop(() => () => createTexture() ?? _i6.undefined),
        cullFace: cullFace == null ? null : _i4.allowInterop(cullFace),
        deleteBuffer:
            deleteBuffer == null ? null : _i4.allowInterop(deleteBuffer),
        deleteFramebuffer: deleteFramebuffer == null
            ? null
            : _i4.allowInterop(deleteFramebuffer),
        deleteProgram:
            deleteProgram == null ? null : _i4.allowInterop(deleteProgram),
        deleteRenderbuffer: deleteRenderbuffer == null
            ? null
            : _i4.allowInterop(deleteRenderbuffer),
        deleteShader:
            deleteShader == null ? null : _i4.allowInterop(deleteShader),
        deleteTexture:
            deleteTexture == null ? null : _i4.allowInterop(deleteTexture),
        depthFunc: depthFunc == null ? null : _i4.allowInterop(depthFunc),
        depthMask: depthMask == null ? null : _i4.allowInterop(depthMask),
        depthRange: depthRange == null ? null : _i4.allowInterop(depthRange),
        detachShader:
            detachShader == null ? null : _i4.allowInterop(detachShader),
        disable: disable == null ? null : _i4.allowInterop(disable),
        disableVertexAttribArray: disableVertexAttribArray == null
            ? null
            : _i4.allowInterop(disableVertexAttribArray),
        drawArrays: drawArrays == null ? null : _i4.allowInterop(drawArrays),
        drawElements:
            drawElements == null ? null : _i4.allowInterop(drawElements),
        enable: enable == null ? null : _i4.allowInterop(enable),
        enableVertexAttribArray: enableVertexAttribArray == null
            ? null
            : _i4.allowInterop(enableVertexAttribArray),
        finish: finish == null ? null : _i4.allowInterop(finish),
        flush: flush == null ? null : _i4.allowInterop(flush),
        framebufferRenderbuffer: framebufferRenderbuffer == null
            ? null
            : _i4.allowInterop(framebufferRenderbuffer),
        framebufferTexture2D: framebufferTexture2D == null
            ? null
            : _i4.allowInterop(framebufferTexture2D),
        frontFace: frontFace == null ? null : _i4.allowInterop(frontFace),
        generateMipmap:
            generateMipmap == null ? null : _i4.allowInterop(generateMipmap),
        getActiveAttrib: getActiveAttrib == null
            ? null
            : _i4.allowInterop((
                p0,
                p1,
              ) =>
                () =>
                    getActiveAttrib(
                      p0,
                      p1,
                    ) ??
                    _i6.undefined),
        getActiveUniform: getActiveUniform == null
            ? null
            : _i4.allowInterop((
                p0,
                p1,
              ) =>
                () =>
                    getActiveUniform(
                      p0,
                      p1,
                    ) ??
                    _i6.undefined),
        getAttachedShaders: getAttachedShaders == null
            ? null
            : _i4.allowInterop(
                (p0) => () => getAttachedShaders(p0) ?? _i6.undefined),
        getAttribLocation: getAttribLocation == null
            ? null
            : _i4.allowInterop(getAttribLocation),
        getBufferParameter: getBufferParameter == null
            ? null
            : _i4.allowInterop(getBufferParameter),
        getContextAttributes: getContextAttributes == null
            ? null
            : _i4.allowInterop(
                () => () => getContextAttributes() ?? _i6.undefined),
        getError: getError == null ? null : _i4.allowInterop(getError),
        getFramebufferAttachmentParameter:
            getFramebufferAttachmentParameter == null
                ? null
                : _i4.allowInterop(getFramebufferAttachmentParameter),
        getParameter:
            getParameter == null ? null : _i4.allowInterop(getParameter),
        getProgramInfoLog: getProgramInfoLog == null
            ? null
            : _i4.allowInterop(
                (p0) => () => getProgramInfoLog(p0) ?? _i6.undefined),
        getProgramParameter: getProgramParameter == null
            ? null
            : _i4.allowInterop(getProgramParameter),
        getRenderbufferParameter: getRenderbufferParameter == null
            ? null
            : _i4.allowInterop(getRenderbufferParameter),
        getShaderInfoLog: getShaderInfoLog == null
            ? null
            : _i4.allowInterop(
                (p0) => () => getShaderInfoLog(p0) ?? _i6.undefined),
        getShaderParameter: getShaderParameter == null
            ? null
            : _i4.allowInterop(getShaderParameter),
        getShaderPrecisionFormat: getShaderPrecisionFormat == null
            ? null
            : _i4.allowInterop((
                p0,
                p1,
              ) =>
                () =>
                    getShaderPrecisionFormat(
                      p0,
                      p1,
                    ) ??
                    _i6.undefined),
        getShaderSource: getShaderSource == null
            ? null
            : _i4.allowInterop(
                (p0) => () => getShaderSource(p0) ?? _i6.undefined),
        getSupportedExtensions: getSupportedExtensions == null
            ? null
            : _i4.allowInterop(
                () => () => getSupportedExtensions() ?? _i6.undefined),
        getTexParameter:
            getTexParameter == null ? null : _i4.allowInterop(getTexParameter),
        getUniform: getUniform == null ? null : _i4.allowInterop(getUniform),
        getUniformLocation: getUniformLocation == null
            ? null
            : _i4.allowInterop((
                p0,
                p1,
              ) =>
                () =>
                    getUniformLocation(
                      p0,
                      p1,
                    ) ??
                    _i6.undefined),
        getVertexAttrib:
            getVertexAttrib == null ? null : _i4.allowInterop(getVertexAttrib),
        getVertexAttribOffset: getVertexAttribOffset == null
            ? null
            : _i4.allowInterop(getVertexAttribOffset),
        hint: hint == null ? null : _i4.allowInterop(hint),
        isBuffer: isBuffer == null ? null : _i4.allowInterop(isBuffer),
        isContextLost:
            isContextLost == null ? null : _i4.allowInterop(isContextLost),
        isEnabled: isEnabled == null ? null : _i4.allowInterop(isEnabled),
        isFramebuffer:
            isFramebuffer == null ? null : _i4.allowInterop(isFramebuffer),
        isProgram: isProgram == null ? null : _i4.allowInterop(isProgram),
        isRenderbuffer:
            isRenderbuffer == null ? null : _i4.allowInterop(isRenderbuffer),
        isShader: isShader == null ? null : _i4.allowInterop(isShader),
        isTexture: isTexture == null ? null : _i4.allowInterop(isTexture),
        lineWidth: lineWidth == null ? null : _i4.allowInterop(lineWidth),
        linkProgram: linkProgram == null ? null : _i4.allowInterop(linkProgram),
        pixelStorei: pixelStorei == null ? null : _i4.allowInterop(pixelStorei),
        polygonOffset:
            polygonOffset == null ? null : _i4.allowInterop(polygonOffset),
        renderbufferStorage: renderbufferStorage == null
            ? null
            : _i4.allowInterop(renderbufferStorage),
        sampleCoverage:
            sampleCoverage == null ? null : _i4.allowInterop(sampleCoverage),
        scissor: scissor == null ? null : _i4.allowInterop(scissor),
        shaderSource:
            shaderSource == null ? null : _i4.allowInterop(shaderSource),
        stencilFunc: stencilFunc == null ? null : _i4.allowInterop(stencilFunc),
        stencilFuncSeparate: stencilFuncSeparate == null
            ? null
            : _i4.allowInterop(stencilFuncSeparate),
        stencilMask: stencilMask == null ? null : _i4.allowInterop(stencilMask),
        stencilMaskSeparate: stencilMaskSeparate == null
            ? null
            : _i4.allowInterop(stencilMaskSeparate),
        stencilOp: stencilOp == null ? null : _i4.allowInterop(stencilOp),
        stencilOpSeparate: stencilOpSeparate == null
            ? null
            : _i4.allowInterop(stencilOpSeparate),
        texParameterf:
            texParameterf == null ? null : _i4.allowInterop(texParameterf),
        texParameteri:
            texParameteri == null ? null : _i4.allowInterop(texParameteri),
        uniform1f: uniform1f == null ? null : _i4.allowInterop(uniform1f),
        uniform1i: uniform1i == null ? null : _i4.allowInterop(uniform1i),
        uniform2f: uniform2f == null ? null : _i4.allowInterop(uniform2f),
        uniform2i: uniform2i == null ? null : _i4.allowInterop(uniform2i),
        uniform3f: uniform3f == null ? null : _i4.allowInterop(uniform3f),
        uniform3i: uniform3i == null ? null : _i4.allowInterop(uniform3i),
        uniform4f: uniform4f == null ? null : _i4.allowInterop(uniform4f),
        uniform4i: uniform4i == null ? null : _i4.allowInterop(uniform4i),
        useProgram: useProgram == null ? null : _i4.allowInterop(useProgram),
        validateProgram:
            validateProgram == null ? null : _i4.allowInterop(validateProgram),
        vertexAttrib1f:
            vertexAttrib1f == null ? null : _i4.allowInterop(vertexAttrib1f),
        vertexAttrib2f:
            vertexAttrib2f == null ? null : _i4.allowInterop(vertexAttrib2f),
        vertexAttrib3f:
            vertexAttrib3f == null ? null : _i4.allowInterop(vertexAttrib3f),
        vertexAttrib4f:
            vertexAttrib4f == null ? null : _i4.allowInterop(vertexAttrib4f),
        vertexAttribPointer: vertexAttribPointer == null
            ? null
            : _i4.allowInterop(vertexAttribPointer),
        viewport: viewport == null ? null : _i4.allowInterop(viewport),
      );

  static _i2.num get depthBufferBit => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'DEPTH_BUFFER_BIT',
      );
  static _i2.num get stencilBufferBit => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'STENCIL_BUFFER_BIT',
      );
  static _i2.num get colorBufferBit => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'COLOR_BUFFER_BIT',
      );
  static _i2.num get points => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'POINTS',
      );
  static _i2.num get lines => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'LINES',
      );
  static _i2.num get lineLoop => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'LINE_LOOP',
      );
  static _i2.num get lineStrip => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'LINE_STRIP',
      );
  static _i2.num get triangles => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TRIANGLES',
      );
  static _i2.num get triangleStrip => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TRIANGLE_STRIP',
      );
  static _i2.num get triangleFan => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TRIANGLE_FAN',
      );
  static _i2.num get zero => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'ZERO',
      );
  static _i2.num get one => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'ONE',
      );
  static _i2.num get srcColor => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'SRC_COLOR',
      );
  static _i2.num get oneMinusSrcColor => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'ONE_MINUS_SRC_COLOR',
      );
  static _i2.num get srcAlpha => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'SRC_ALPHA',
      );
  static _i2.num get oneMinusSrcAlpha => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'ONE_MINUS_SRC_ALPHA',
      );
  static _i2.num get dstAlpha => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'DST_ALPHA',
      );
  static _i2.num get oneMinusDstAlpha => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'ONE_MINUS_DST_ALPHA',
      );
  static _i2.num get dstColor => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'DST_COLOR',
      );
  static _i2.num get oneMinusDstColor => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'ONE_MINUS_DST_COLOR',
      );
  static _i2.num get srcAlphaSaturate => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'SRC_ALPHA_SATURATE',
      );
  static _i2.num get funcAdd => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'FUNC_ADD',
      );
  static _i2.num get blendEquation => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'BLEND_EQUATION',
      );
  static _i2.num get blendEquationRgb => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'BLEND_EQUATION_RGB',
      );
  static _i2.num get blendEquationAlpha => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'BLEND_EQUATION_ALPHA',
      );
  static _i2.num get funcSubtract => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'FUNC_SUBTRACT',
      );
  static _i2.num get funcReverseSubtract => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'FUNC_REVERSE_SUBTRACT',
      );
  static _i2.num get blendDstRgb => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'BLEND_DST_RGB',
      );
  static _i2.num get blendSrcRgb => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'BLEND_SRC_RGB',
      );
  static _i2.num get blendDstAlpha => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'BLEND_DST_ALPHA',
      );
  static _i2.num get blendSrcAlpha => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'BLEND_SRC_ALPHA',
      );
  static _i2.num get constantColor => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'CONSTANT_COLOR',
      );
  static _i2.num get oneMinusConstantColor => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'ONE_MINUS_CONSTANT_COLOR',
      );
  static _i2.num get constantAlpha => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'CONSTANT_ALPHA',
      );
  static _i2.num get oneMinusConstantAlpha => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'ONE_MINUS_CONSTANT_ALPHA',
      );
  static _i2.num get blendColor => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'BLEND_COLOR',
      );
  static _i2.num get arrayBuffer => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'ARRAY_BUFFER',
      );
  static _i2.num get elementArrayBuffer => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'ELEMENT_ARRAY_BUFFER',
      );
  static _i2.num get arrayBufferBinding => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'ARRAY_BUFFER_BINDING',
      );
  static _i2.num get elementArrayBufferBinding => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'ELEMENT_ARRAY_BUFFER_BINDING',
      );
  static _i2.num get streamDraw => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'STREAM_DRAW',
      );
  static _i2.num get staticDraw => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'STATIC_DRAW',
      );
  static _i2.num get dynamicDraw => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'DYNAMIC_DRAW',
      );
  static _i2.num get bufferSize => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'BUFFER_SIZE',
      );
  static _i2.num get bufferUsage => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'BUFFER_USAGE',
      );
  static _i2.num get currentVertexAttrib => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'CURRENT_VERTEX_ATTRIB',
      );
  static _i2.num get front => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'FRONT',
      );
  static _i2.num get back => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'BACK',
      );
  static _i2.num get frontAndBack => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'FRONT_AND_BACK',
      );
  static _i2.num get cullFace => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'CULL_FACE',
      );
  static _i2.num get blend => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'BLEND',
      );
  static _i2.num get dither => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'DITHER',
      );
  static _i2.num get stencilTest => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'STENCIL_TEST',
      );
  static _i2.num get depthTest => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'DEPTH_TEST',
      );
  static _i2.num get scissorTest => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'SCISSOR_TEST',
      );
  static _i2.num get polygonOffsetFill => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'POLYGON_OFFSET_FILL',
      );
  static _i2.num get sampleAlphaToCoverage => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'SAMPLE_ALPHA_TO_COVERAGE',
      );
  static _i2.num get sampleCoverage => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'SAMPLE_COVERAGE',
      );
  static _i2.num get noError => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'NO_ERROR',
      );
  static _i2.num get invalidEnum => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'INVALID_ENUM',
      );
  static _i2.num get invalidValue => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'INVALID_VALUE',
      );
  static _i2.num get invalidOperation => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'INVALID_OPERATION',
      );
  static _i2.num get outOfMemory => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'OUT_OF_MEMORY',
      );
  static _i2.num get cw => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'CW',
      );
  static _i2.num get ccw => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'CCW',
      );
  static _i2.num get lineWidth => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'LINE_WIDTH',
      );
  static _i2.num get aliasedPointSizeRange => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'ALIASED_POINT_SIZE_RANGE',
      );
  static _i2.num get aliasedLineWidthRange => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'ALIASED_LINE_WIDTH_RANGE',
      );
  static _i2.num get cullFaceMode => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'CULL_FACE_MODE',
      );
  static _i2.num get frontFace => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'FRONT_FACE',
      );
  static _i2.num get depthRange => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'DEPTH_RANGE',
      );
  static _i2.num get depthWritemask => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'DEPTH_WRITEMASK',
      );
  static _i2.num get depthClearValue => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'DEPTH_CLEAR_VALUE',
      );
  static _i2.num get depthFunc => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'DEPTH_FUNC',
      );
  static _i2.num get stencilClearValue => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'STENCIL_CLEAR_VALUE',
      );
  static _i2.num get stencilFunc => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'STENCIL_FUNC',
      );
  static _i2.num get stencilFail => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'STENCIL_FAIL',
      );
  static _i2.num get stencilPassDepthFail => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'STENCIL_PASS_DEPTH_FAIL',
      );
  static _i2.num get stencilPassDepthPass => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'STENCIL_PASS_DEPTH_PASS',
      );
  static _i2.num get stencilRef => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'STENCIL_REF',
      );
  static _i2.num get stencilValueMask => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'STENCIL_VALUE_MASK',
      );
  static _i2.num get stencilWritemask => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'STENCIL_WRITEMASK',
      );
  static _i2.num get stencilBackFunc => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'STENCIL_BACK_FUNC',
      );
  static _i2.num get stencilBackFail => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'STENCIL_BACK_FAIL',
      );
  static _i2.num get stencilBackPassDepthFail => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'STENCIL_BACK_PASS_DEPTH_FAIL',
      );
  static _i2.num get stencilBackPassDepthPass => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'STENCIL_BACK_PASS_DEPTH_PASS',
      );
  static _i2.num get stencilBackRef => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'STENCIL_BACK_REF',
      );
  static _i2.num get stencilBackValueMask => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'STENCIL_BACK_VALUE_MASK',
      );
  static _i2.num get stencilBackWritemask => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'STENCIL_BACK_WRITEMASK',
      );
  static _i2.num get viewport => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'VIEWPORT',
      );
  static _i2.num get scissorBox => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'SCISSOR_BOX',
      );
  static _i2.num get colorClearValue => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'COLOR_CLEAR_VALUE',
      );
  static _i2.num get colorWritemask => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'COLOR_WRITEMASK',
      );
  static _i2.num get unpackAlignment => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'UNPACK_ALIGNMENT',
      );
  static _i2.num get packAlignment => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'PACK_ALIGNMENT',
      );
  static _i2.num get maxTextureSize => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'MAX_TEXTURE_SIZE',
      );
  static _i2.num get maxViewportDims => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'MAX_VIEWPORT_DIMS',
      );
  static _i2.num get subpixelBits => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'SUBPIXEL_BITS',
      );
  static _i2.num get redBits => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'RED_BITS',
      );
  static _i2.num get greenBits => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'GREEN_BITS',
      );
  static _i2.num get blueBits => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'BLUE_BITS',
      );
  static _i2.num get alphaBits => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'ALPHA_BITS',
      );
  static _i2.num get depthBits => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'DEPTH_BITS',
      );
  static _i2.num get stencilBits => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'STENCIL_BITS',
      );
  static _i2.num get polygonOffsetUnits => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'POLYGON_OFFSET_UNITS',
      );
  static _i2.num get polygonOffsetFactor => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'POLYGON_OFFSET_FACTOR',
      );
  static _i2.num get textureBinding2d => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE_BINDING_2D',
      );
  static _i2.num get sampleBuffers => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'SAMPLE_BUFFERS',
      );
  static _i2.num get samples => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'SAMPLES',
      );
  static _i2.num get sampleCoverageValue => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'SAMPLE_COVERAGE_VALUE',
      );
  static _i2.num get sampleCoverageInvert => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'SAMPLE_COVERAGE_INVERT',
      );
  static _i2.num get compressedTextureFormats => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'COMPRESSED_TEXTURE_FORMATS',
      );
  static _i2.num get dontCare => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'DONT_CARE',
      );
  static _i2.num get fastest => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'FASTEST',
      );
  static _i2.num get nicest => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'NICEST',
      );
  static _i2.num get generateMipmapHint => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'GENERATE_MIPMAP_HINT',
      );
  static _i2.num get byte => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'BYTE',
      );
  static _i2.num get unsignedByte => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'UNSIGNED_BYTE',
      );
  static _i2.num get short => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'SHORT',
      );
  static _i2.num get unsignedShort => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'UNSIGNED_SHORT',
      );
  static _i2.num get int$ => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'INT',
      );
  static _i2.num get unsignedInt => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'UNSIGNED_INT',
      );
  static _i2.num get float => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'FLOAT',
      );
  static _i2.num get depthComponent => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'DEPTH_COMPONENT',
      );
  static _i2.num get alpha => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'ALPHA',
      );
  static _i2.num get rgb => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'RGB',
      );
  static _i2.num get rgba => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'RGBA',
      );
  static _i2.num get luminance => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'LUMINANCE',
      );
  static _i2.num get luminanceAlpha => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'LUMINANCE_ALPHA',
      );
  static _i2.num get unsignedShort4444 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'UNSIGNED_SHORT_4_4_4_4',
      );
  static _i2.num get unsignedShort5551 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'UNSIGNED_SHORT_5_5_5_1',
      );
  static _i2.num get unsignedShort565 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'UNSIGNED_SHORT_5_6_5',
      );
  static _i2.num get fragmentShader => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'FRAGMENT_SHADER',
      );
  static _i2.num get vertexShader => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'VERTEX_SHADER',
      );
  static _i2.num get maxVertexAttribs => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'MAX_VERTEX_ATTRIBS',
      );
  static _i2.num get maxVertexUniformVectors => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'MAX_VERTEX_UNIFORM_VECTORS',
      );
  static _i2.num get maxVaryingVectors => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'MAX_VARYING_VECTORS',
      );
  static _i2.num get maxCombinedTextureImageUnits => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'MAX_COMBINED_TEXTURE_IMAGE_UNITS',
      );
  static _i2.num get maxVertexTextureImageUnits => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'MAX_VERTEX_TEXTURE_IMAGE_UNITS',
      );
  static _i2.num get maxTextureImageUnits => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'MAX_TEXTURE_IMAGE_UNITS',
      );
  static _i2.num get maxFragmentUniformVectors => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'MAX_FRAGMENT_UNIFORM_VECTORS',
      );
  static _i2.num get shaderType => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'SHADER_TYPE',
      );
  static _i2.num get deleteStatus => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'DELETE_STATUS',
      );
  static _i2.num get linkStatus => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'LINK_STATUS',
      );
  static _i2.num get validateStatus => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'VALIDATE_STATUS',
      );
  static _i2.num get attachedShaders => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'ATTACHED_SHADERS',
      );
  static _i2.num get activeUniforms => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'ACTIVE_UNIFORMS',
      );
  static _i2.num get activeAttributes => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'ACTIVE_ATTRIBUTES',
      );
  static _i2.num get shadingLanguageVersion => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'SHADING_LANGUAGE_VERSION',
      );
  static _i2.num get currentProgram => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'CURRENT_PROGRAM',
      );
  static _i2.num get never => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'NEVER',
      );
  static _i2.num get less => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'LESS',
      );
  static _i2.num get equal => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'EQUAL',
      );
  static _i2.num get lequal => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'LEQUAL',
      );
  static _i2.num get greater => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'GREATER',
      );
  static _i2.num get notequal => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'NOTEQUAL',
      );
  static _i2.num get gequal => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'GEQUAL',
      );
  static _i2.num get always => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'ALWAYS',
      );
  static _i2.num get keep => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'KEEP',
      );
  static _i2.num get replace => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'REPLACE',
      );
  static _i2.num get incr => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'INCR',
      );
  static _i2.num get decr => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'DECR',
      );
  static _i2.num get invert => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'INVERT',
      );
  static _i2.num get incrWrap => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'INCR_WRAP',
      );
  static _i2.num get decrWrap => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'DECR_WRAP',
      );
  static _i2.num get vendor => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'VENDOR',
      );
  static _i2.num get renderer => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'RENDERER',
      );
  static _i2.num get version => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'VERSION',
      );
  static _i2.num get nearest => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'NEAREST',
      );
  static _i2.num get linear => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'LINEAR',
      );
  static _i2.num get nearestMipmapNearest => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'NEAREST_MIPMAP_NEAREST',
      );
  static _i2.num get linearMipmapNearest => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'LINEAR_MIPMAP_NEAREST',
      );
  static _i2.num get nearestMipmapLinear => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'NEAREST_MIPMAP_LINEAR',
      );
  static _i2.num get linearMipmapLinear => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'LINEAR_MIPMAP_LINEAR',
      );
  static _i2.num get textureMagFilter => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE_MAG_FILTER',
      );
  static _i2.num get textureMinFilter => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE_MIN_FILTER',
      );
  static _i2.num get textureWrapS => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE_WRAP_S',
      );
  static _i2.num get textureWrapT => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE_WRAP_T',
      );
  static _i2.num get texture2d => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE_2D',
      );
  static _i2.num get texture => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE',
      );
  static _i2.num get textureCubeMap => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE_CUBE_MAP',
      );
  static _i2.num get textureBindingCubeMap => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE_BINDING_CUBE_MAP',
      );
  static _i2.num get textureCubeMapPositiveX => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE_CUBE_MAP_POSITIVE_X',
      );
  static _i2.num get textureCubeMapNegativeX => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE_CUBE_MAP_NEGATIVE_X',
      );
  static _i2.num get textureCubeMapPositiveY => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE_CUBE_MAP_POSITIVE_Y',
      );
  static _i2.num get textureCubeMapNegativeY => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE_CUBE_MAP_NEGATIVE_Y',
      );
  static _i2.num get textureCubeMapPositiveZ => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE_CUBE_MAP_POSITIVE_Z',
      );
  static _i2.num get textureCubeMapNegativeZ => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE_CUBE_MAP_NEGATIVE_Z',
      );
  static _i2.num get maxCubeMapTextureSize => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'MAX_CUBE_MAP_TEXTURE_SIZE',
      );
  static _i2.num get texture0 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE0',
      );
  static _i2.num get texture1 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE1',
      );
  static _i2.num get texture2 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE2',
      );
  static _i2.num get texture3 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE3',
      );
  static _i2.num get texture4 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE4',
      );
  static _i2.num get texture5 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE5',
      );
  static _i2.num get texture6 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE6',
      );
  static _i2.num get texture7 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE7',
      );
  static _i2.num get texture8 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE8',
      );
  static _i2.num get texture9 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE9',
      );
  static _i2.num get texture10 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE10',
      );
  static _i2.num get texture11 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE11',
      );
  static _i2.num get texture12 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE12',
      );
  static _i2.num get texture13 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE13',
      );
  static _i2.num get texture14 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE14',
      );
  static _i2.num get texture15 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE15',
      );
  static _i2.num get texture16 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE16',
      );
  static _i2.num get texture17 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE17',
      );
  static _i2.num get texture18 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE18',
      );
  static _i2.num get texture19 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE19',
      );
  static _i2.num get texture20 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE20',
      );
  static _i2.num get texture21 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE21',
      );
  static _i2.num get texture22 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE22',
      );
  static _i2.num get texture23 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE23',
      );
  static _i2.num get texture24 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE24',
      );
  static _i2.num get texture25 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE25',
      );
  static _i2.num get texture26 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE26',
      );
  static _i2.num get texture27 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE27',
      );
  static _i2.num get texture28 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE28',
      );
  static _i2.num get texture29 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE29',
      );
  static _i2.num get texture30 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE30',
      );
  static _i2.num get texture31 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'TEXTURE31',
      );
  static _i2.num get activeTexture => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'ACTIVE_TEXTURE',
      );
  static _i2.num get repeat => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'REPEAT',
      );
  static _i2.num get clampToEdge => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'CLAMP_TO_EDGE',
      );
  static _i2.num get mirroredRepeat => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'MIRRORED_REPEAT',
      );
  static _i2.num get floatVec2 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'FLOAT_VEC2',
      );
  static _i2.num get floatVec3 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'FLOAT_VEC3',
      );
  static _i2.num get floatVec4 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'FLOAT_VEC4',
      );
  static _i2.num get intVec2 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'INT_VEC2',
      );
  static _i2.num get intVec3 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'INT_VEC3',
      );
  static _i2.num get intVec4 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'INT_VEC4',
      );
  static _i2.num get bool$ => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'BOOL',
      );
  static _i2.num get boolVec2 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'BOOL_VEC2',
      );
  static _i2.num get boolVec3 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'BOOL_VEC3',
      );
  static _i2.num get boolVec4 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'BOOL_VEC4',
      );
  static _i2.num get floatMat2 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'FLOAT_MAT2',
      );
  static _i2.num get floatMat3 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'FLOAT_MAT3',
      );
  static _i2.num get floatMat4 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'FLOAT_MAT4',
      );
  static _i2.num get sampler2d => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'SAMPLER_2D',
      );
  static _i2.num get samplerCube => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'SAMPLER_CUBE',
      );
  static _i2.num get vertexAttribArrayEnabled => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'VERTEX_ATTRIB_ARRAY_ENABLED',
      );
  static _i2.num get vertexAttribArraySize => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'VERTEX_ATTRIB_ARRAY_SIZE',
      );
  static _i2.num get vertexAttribArrayStride => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'VERTEX_ATTRIB_ARRAY_STRIDE',
      );
  static _i2.num get vertexAttribArrayType => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'VERTEX_ATTRIB_ARRAY_TYPE',
      );
  static _i2.num get vertexAttribArrayNormalized => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'VERTEX_ATTRIB_ARRAY_NORMALIZED',
      );
  static _i2.num get vertexAttribArrayPointer => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'VERTEX_ATTRIB_ARRAY_POINTER',
      );
  static _i2.num get vertexAttribArrayBufferBinding => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'VERTEX_ATTRIB_ARRAY_BUFFER_BINDING',
      );
  static _i2.num get implementationColorReadType => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'IMPLEMENTATION_COLOR_READ_TYPE',
      );
  static _i2.num get implementationColorReadFormat => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'IMPLEMENTATION_COLOR_READ_FORMAT',
      );
  static _i2.num get compileStatus => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'COMPILE_STATUS',
      );
  static _i2.num get lowFloat => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'LOW_FLOAT',
      );
  static _i2.num get mediumFloat => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'MEDIUM_FLOAT',
      );
  static _i2.num get highFloat => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'HIGH_FLOAT',
      );
  static _i2.num get lowInt => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'LOW_INT',
      );
  static _i2.num get mediumInt => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'MEDIUM_INT',
      );
  static _i2.num get highInt => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'HIGH_INT',
      );
  static _i2.num get framebuffer => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'FRAMEBUFFER',
      );
  static _i2.num get renderbuffer => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'RENDERBUFFER',
      );
  static _i2.num get rgba4 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'RGBA4',
      );
  static _i2.num get rgb5A1 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'RGB5_A1',
      );
  static _i2.num get rgb565 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'RGB565',
      );
  static _i2.num get depthComponent16 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'DEPTH_COMPONENT16',
      );
  static _i2.num get stencilIndex8 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'STENCIL_INDEX8',
      );
  static _i2.num get depthStencil => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'DEPTH_STENCIL',
      );
  static _i2.num get renderbufferWidth => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'RENDERBUFFER_WIDTH',
      );
  static _i2.num get renderbufferHeight => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'RENDERBUFFER_HEIGHT',
      );
  static _i2.num get renderbufferInternalFormat => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'RENDERBUFFER_INTERNAL_FORMAT',
      );
  static _i2.num get renderbufferRedSize => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'RENDERBUFFER_RED_SIZE',
      );
  static _i2.num get renderbufferGreenSize => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'RENDERBUFFER_GREEN_SIZE',
      );
  static _i2.num get renderbufferBlueSize => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'RENDERBUFFER_BLUE_SIZE',
      );
  static _i2.num get renderbufferAlphaSize => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'RENDERBUFFER_ALPHA_SIZE',
      );
  static _i2.num get renderbufferDepthSize => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'RENDERBUFFER_DEPTH_SIZE',
      );
  static _i2.num get renderbufferStencilSize => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'RENDERBUFFER_STENCIL_SIZE',
      );
  static _i2.num get framebufferAttachmentObjectType => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE',
      );
  static _i2.num get framebufferAttachmentObjectName => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'FRAMEBUFFER_ATTACHMENT_OBJECT_NAME',
      );
  static _i2.num get framebufferAttachmentTextureLevel => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL',
      );
  static _i2.num get framebufferAttachmentTextureCubeMapFace => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE',
      );
  static _i2.num get colorAttachment0 => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'COLOR_ATTACHMENT0',
      );
  static _i2.num get depthAttachment => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'DEPTH_ATTACHMENT',
      );
  static _i2.num get stencilAttachment => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'STENCIL_ATTACHMENT',
      );
  static _i2.num get depthStencilAttachment => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'DEPTH_STENCIL_ATTACHMENT',
      );
  static _i2.num get none => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'NONE',
      );
  static _i2.num get framebufferComplete => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'FRAMEBUFFER_COMPLETE',
      );
  static _i2.num get framebufferIncompleteAttachment => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'FRAMEBUFFER_INCOMPLETE_ATTACHMENT',
      );
  static _i2.num get framebufferIncompleteMissingAttachment => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT',
      );
  static _i2.num get framebufferIncompleteDimensions => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'FRAMEBUFFER_INCOMPLETE_DIMENSIONS',
      );
  static _i2.num get framebufferUnsupported => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'FRAMEBUFFER_UNSUPPORTED',
      );
  static _i2.num get framebufferBinding => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'FRAMEBUFFER_BINDING',
      );
  static _i2.num get renderbufferBinding => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'RENDERBUFFER_BINDING',
      );
  static _i2.num get maxRenderbufferSize => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'MAX_RENDERBUFFER_SIZE',
      );
  static _i2.num get invalidFramebufferOperation => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'INVALID_FRAMEBUFFER_OPERATION',
      );
  static _i2.num get unpackFlipYWebgl => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'UNPACK_FLIP_Y_WEBGL',
      );
  static _i2.num get unpackPremultiplyAlphaWebgl => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'UNPACK_PREMULTIPLY_ALPHA_WEBGL',
      );
  static _i2.num get contextLostWebgl => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'CONTEXT_LOST_WEBGL',
      );
  static _i2.num get unpackColorspaceConversionWebgl => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'UNPACK_COLORSPACE_CONVERSION_WEBGL',
      );
  static _i2.num get browserDefaultWebgl => _i4.getProperty(
        _declaredWebGLRenderingContextBase,
        'BROWSER_DEFAULT_WEBGL',
      );
}

_i2.Object get _declaredWebGLRenderingContextBase => _i4.getProperty(
      _self,
      'WebGLRenderingContextBase',
    );

extension WebGLRenderingContextBase$Typings on WebGLRenderingContextBase {
  _i3.PredefinedColorSpace get drawingBufferColorSpace =>
      _i3.PredefinedColorSpaceOptions.values.byName(_i4.getProperty(
        this,
        'drawingBufferColorSpace',
      ));
  set drawingBufferColorSpace(_i3.PredefinedColorSpace value) {
    _i4.setProperty(
      this,
      'drawingBufferColorSpace',
      value.name,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/drawingBufferHeight)
  _i2.num get drawingBufferHeight => _i4.getProperty(
        this,
        'drawingBufferHeight',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/drawingBufferWidth)
  _i2.num get drawingBufferWidth => _i4.getProperty(
        this,
        'drawingBufferWidth',
      );
  _i2.num get depthBufferBit => _i4.getProperty(
        this,
        'DEPTH_BUFFER_BIT',
      );
  _i2.num get stencilBufferBit => _i4.getProperty(
        this,
        'STENCIL_BUFFER_BIT',
      );
  _i2.num get colorBufferBit => _i4.getProperty(
        this,
        'COLOR_BUFFER_BIT',
      );
  _i2.num get points => _i4.getProperty(
        this,
        'POINTS',
      );
  _i2.num get lines => _i4.getProperty(
        this,
        'LINES',
      );
  _i2.num get lineLoop => _i4.getProperty(
        this,
        'LINE_LOOP',
      );
  _i2.num get lineStrip => _i4.getProperty(
        this,
        'LINE_STRIP',
      );
  _i2.num get triangles => _i4.getProperty(
        this,
        'TRIANGLES',
      );
  _i2.num get triangleStrip => _i4.getProperty(
        this,
        'TRIANGLE_STRIP',
      );
  _i2.num get triangleFan => _i4.getProperty(
        this,
        'TRIANGLE_FAN',
      );
  _i2.num get zero => _i4.getProperty(
        this,
        'ZERO',
      );
  _i2.num get one => _i4.getProperty(
        this,
        'ONE',
      );
  _i2.num get srcColor => _i4.getProperty(
        this,
        'SRC_COLOR',
      );
  _i2.num get oneMinusSrcColor => _i4.getProperty(
        this,
        'ONE_MINUS_SRC_COLOR',
      );
  _i2.num get srcAlpha => _i4.getProperty(
        this,
        'SRC_ALPHA',
      );
  _i2.num get oneMinusSrcAlpha => _i4.getProperty(
        this,
        'ONE_MINUS_SRC_ALPHA',
      );
  _i2.num get dstAlpha => _i4.getProperty(
        this,
        'DST_ALPHA',
      );
  _i2.num get oneMinusDstAlpha => _i4.getProperty(
        this,
        'ONE_MINUS_DST_ALPHA',
      );
  _i2.num get dstColor => _i4.getProperty(
        this,
        'DST_COLOR',
      );
  _i2.num get oneMinusDstColor => _i4.getProperty(
        this,
        'ONE_MINUS_DST_COLOR',
      );
  _i2.num get srcAlphaSaturate => _i4.getProperty(
        this,
        'SRC_ALPHA_SATURATE',
      );
  _i2.num get funcAdd => _i4.getProperty(
        this,
        'FUNC_ADD',
      );
  _i2.num get blendEquation$ => _i4.getProperty(
        this,
        'BLEND_EQUATION',
      );
  _i2.num get blendEquationRgb => _i4.getProperty(
        this,
        'BLEND_EQUATION_RGB',
      );
  _i2.num get blendEquationAlpha => _i4.getProperty(
        this,
        'BLEND_EQUATION_ALPHA',
      );
  _i2.num get funcSubtract => _i4.getProperty(
        this,
        'FUNC_SUBTRACT',
      );
  _i2.num get funcReverseSubtract => _i4.getProperty(
        this,
        'FUNC_REVERSE_SUBTRACT',
      );
  _i2.num get blendDstRgb => _i4.getProperty(
        this,
        'BLEND_DST_RGB',
      );
  _i2.num get blendSrcRgb => _i4.getProperty(
        this,
        'BLEND_SRC_RGB',
      );
  _i2.num get blendDstAlpha => _i4.getProperty(
        this,
        'BLEND_DST_ALPHA',
      );
  _i2.num get blendSrcAlpha => _i4.getProperty(
        this,
        'BLEND_SRC_ALPHA',
      );
  _i2.num get constantColor => _i4.getProperty(
        this,
        'CONSTANT_COLOR',
      );
  _i2.num get oneMinusConstantColor => _i4.getProperty(
        this,
        'ONE_MINUS_CONSTANT_COLOR',
      );
  _i2.num get constantAlpha => _i4.getProperty(
        this,
        'CONSTANT_ALPHA',
      );
  _i2.num get oneMinusConstantAlpha => _i4.getProperty(
        this,
        'ONE_MINUS_CONSTANT_ALPHA',
      );
  _i2.num get blendColor$ => _i4.getProperty(
        this,
        'BLEND_COLOR',
      );
  _i2.num get arrayBuffer => _i4.getProperty(
        this,
        'ARRAY_BUFFER',
      );
  _i2.num get elementArrayBuffer => _i4.getProperty(
        this,
        'ELEMENT_ARRAY_BUFFER',
      );
  _i2.num get arrayBufferBinding => _i4.getProperty(
        this,
        'ARRAY_BUFFER_BINDING',
      );
  _i2.num get elementArrayBufferBinding => _i4.getProperty(
        this,
        'ELEMENT_ARRAY_BUFFER_BINDING',
      );
  _i2.num get streamDraw => _i4.getProperty(
        this,
        'STREAM_DRAW',
      );
  _i2.num get staticDraw => _i4.getProperty(
        this,
        'STATIC_DRAW',
      );
  _i2.num get dynamicDraw => _i4.getProperty(
        this,
        'DYNAMIC_DRAW',
      );
  _i2.num get bufferSize => _i4.getProperty(
        this,
        'BUFFER_SIZE',
      );
  _i2.num get bufferUsage => _i4.getProperty(
        this,
        'BUFFER_USAGE',
      );
  _i2.num get currentVertexAttrib => _i4.getProperty(
        this,
        'CURRENT_VERTEX_ATTRIB',
      );
  _i2.num get front => _i4.getProperty(
        this,
        'FRONT',
      );
  _i2.num get back => _i4.getProperty(
        this,
        'BACK',
      );
  _i2.num get frontAndBack => _i4.getProperty(
        this,
        'FRONT_AND_BACK',
      );
  _i2.num get cullFace$ => _i4.getProperty(
        this,
        'CULL_FACE',
      );
  _i2.num get blend => _i4.getProperty(
        this,
        'BLEND',
      );
  _i2.num get dither => _i4.getProperty(
        this,
        'DITHER',
      );
  _i2.num get stencilTest => _i4.getProperty(
        this,
        'STENCIL_TEST',
      );
  _i2.num get depthTest => _i4.getProperty(
        this,
        'DEPTH_TEST',
      );
  _i2.num get scissorTest => _i4.getProperty(
        this,
        'SCISSOR_TEST',
      );
  _i2.num get polygonOffsetFill => _i4.getProperty(
        this,
        'POLYGON_OFFSET_FILL',
      );
  _i2.num get sampleAlphaToCoverage => _i4.getProperty(
        this,
        'SAMPLE_ALPHA_TO_COVERAGE',
      );
  _i2.num get sampleCoverage$ => _i4.getProperty(
        this,
        'SAMPLE_COVERAGE',
      );
  _i2.num get noError => _i4.getProperty(
        this,
        'NO_ERROR',
      );
  _i2.num get invalidEnum => _i4.getProperty(
        this,
        'INVALID_ENUM',
      );
  _i2.num get invalidValue => _i4.getProperty(
        this,
        'INVALID_VALUE',
      );
  _i2.num get invalidOperation => _i4.getProperty(
        this,
        'INVALID_OPERATION',
      );
  _i2.num get outOfMemory => _i4.getProperty(
        this,
        'OUT_OF_MEMORY',
      );
  _i2.num get cw => _i4.getProperty(
        this,
        'CW',
      );
  _i2.num get ccw => _i4.getProperty(
        this,
        'CCW',
      );
  _i2.num get lineWidth$ => _i4.getProperty(
        this,
        'LINE_WIDTH',
      );
  _i2.num get aliasedPointSizeRange => _i4.getProperty(
        this,
        'ALIASED_POINT_SIZE_RANGE',
      );
  _i2.num get aliasedLineWidthRange => _i4.getProperty(
        this,
        'ALIASED_LINE_WIDTH_RANGE',
      );
  _i2.num get cullFaceMode => _i4.getProperty(
        this,
        'CULL_FACE_MODE',
      );
  _i2.num get frontFace$ => _i4.getProperty(
        this,
        'FRONT_FACE',
      );
  _i2.num get depthRange$ => _i4.getProperty(
        this,
        'DEPTH_RANGE',
      );
  _i2.num get depthWritemask => _i4.getProperty(
        this,
        'DEPTH_WRITEMASK',
      );
  _i2.num get depthClearValue => _i4.getProperty(
        this,
        'DEPTH_CLEAR_VALUE',
      );
  _i2.num get depthFunc$ => _i4.getProperty(
        this,
        'DEPTH_FUNC',
      );
  _i2.num get stencilClearValue => _i4.getProperty(
        this,
        'STENCIL_CLEAR_VALUE',
      );
  _i2.num get stencilFunc$ => _i4.getProperty(
        this,
        'STENCIL_FUNC',
      );
  _i2.num get stencilFail => _i4.getProperty(
        this,
        'STENCIL_FAIL',
      );
  _i2.num get stencilPassDepthFail => _i4.getProperty(
        this,
        'STENCIL_PASS_DEPTH_FAIL',
      );
  _i2.num get stencilPassDepthPass => _i4.getProperty(
        this,
        'STENCIL_PASS_DEPTH_PASS',
      );
  _i2.num get stencilRef => _i4.getProperty(
        this,
        'STENCIL_REF',
      );
  _i2.num get stencilValueMask => _i4.getProperty(
        this,
        'STENCIL_VALUE_MASK',
      );
  _i2.num get stencilWritemask => _i4.getProperty(
        this,
        'STENCIL_WRITEMASK',
      );
  _i2.num get stencilBackFunc => _i4.getProperty(
        this,
        'STENCIL_BACK_FUNC',
      );
  _i2.num get stencilBackFail => _i4.getProperty(
        this,
        'STENCIL_BACK_FAIL',
      );
  _i2.num get stencilBackPassDepthFail => _i4.getProperty(
        this,
        'STENCIL_BACK_PASS_DEPTH_FAIL',
      );
  _i2.num get stencilBackPassDepthPass => _i4.getProperty(
        this,
        'STENCIL_BACK_PASS_DEPTH_PASS',
      );
  _i2.num get stencilBackRef => _i4.getProperty(
        this,
        'STENCIL_BACK_REF',
      );
  _i2.num get stencilBackValueMask => _i4.getProperty(
        this,
        'STENCIL_BACK_VALUE_MASK',
      );
  _i2.num get stencilBackWritemask => _i4.getProperty(
        this,
        'STENCIL_BACK_WRITEMASK',
      );
  _i2.num get viewport$ => _i4.getProperty(
        this,
        'VIEWPORT',
      );
  _i2.num get scissorBox => _i4.getProperty(
        this,
        'SCISSOR_BOX',
      );
  _i2.num get colorClearValue => _i4.getProperty(
        this,
        'COLOR_CLEAR_VALUE',
      );
  _i2.num get colorWritemask => _i4.getProperty(
        this,
        'COLOR_WRITEMASK',
      );
  _i2.num get unpackAlignment => _i4.getProperty(
        this,
        'UNPACK_ALIGNMENT',
      );
  _i2.num get packAlignment => _i4.getProperty(
        this,
        'PACK_ALIGNMENT',
      );
  _i2.num get maxTextureSize => _i4.getProperty(
        this,
        'MAX_TEXTURE_SIZE',
      );
  _i2.num get maxViewportDims => _i4.getProperty(
        this,
        'MAX_VIEWPORT_DIMS',
      );
  _i2.num get subpixelBits => _i4.getProperty(
        this,
        'SUBPIXEL_BITS',
      );
  _i2.num get redBits => _i4.getProperty(
        this,
        'RED_BITS',
      );
  _i2.num get greenBits => _i4.getProperty(
        this,
        'GREEN_BITS',
      );
  _i2.num get blueBits => _i4.getProperty(
        this,
        'BLUE_BITS',
      );
  _i2.num get alphaBits => _i4.getProperty(
        this,
        'ALPHA_BITS',
      );
  _i2.num get depthBits => _i4.getProperty(
        this,
        'DEPTH_BITS',
      );
  _i2.num get stencilBits => _i4.getProperty(
        this,
        'STENCIL_BITS',
      );
  _i2.num get polygonOffsetUnits => _i4.getProperty(
        this,
        'POLYGON_OFFSET_UNITS',
      );
  _i2.num get polygonOffsetFactor => _i4.getProperty(
        this,
        'POLYGON_OFFSET_FACTOR',
      );
  _i2.num get textureBinding2d => _i4.getProperty(
        this,
        'TEXTURE_BINDING_2D',
      );
  _i2.num get sampleBuffers => _i4.getProperty(
        this,
        'SAMPLE_BUFFERS',
      );
  _i2.num get samples => _i4.getProperty(
        this,
        'SAMPLES',
      );
  _i2.num get sampleCoverageValue => _i4.getProperty(
        this,
        'SAMPLE_COVERAGE_VALUE',
      );
  _i2.num get sampleCoverageInvert => _i4.getProperty(
        this,
        'SAMPLE_COVERAGE_INVERT',
      );
  _i2.num get compressedTextureFormats => _i4.getProperty(
        this,
        'COMPRESSED_TEXTURE_FORMATS',
      );
  _i2.num get dontCare => _i4.getProperty(
        this,
        'DONT_CARE',
      );
  _i2.num get fastest => _i4.getProperty(
        this,
        'FASTEST',
      );
  _i2.num get nicest => _i4.getProperty(
        this,
        'NICEST',
      );
  _i2.num get generateMipmapHint => _i4.getProperty(
        this,
        'GENERATE_MIPMAP_HINT',
      );
  _i2.num get byte => _i4.getProperty(
        this,
        'BYTE',
      );
  _i2.num get unsignedByte => _i4.getProperty(
        this,
        'UNSIGNED_BYTE',
      );
  _i2.num get short => _i4.getProperty(
        this,
        'SHORT',
      );
  _i2.num get unsignedShort => _i4.getProperty(
        this,
        'UNSIGNED_SHORT',
      );
  _i2.num get int$ => _i4.getProperty(
        this,
        'INT',
      );
  _i2.num get unsignedInt => _i4.getProperty(
        this,
        'UNSIGNED_INT',
      );
  _i2.num get float => _i4.getProperty(
        this,
        'FLOAT',
      );
  _i2.num get depthComponent => _i4.getProperty(
        this,
        'DEPTH_COMPONENT',
      );
  _i2.num get alpha => _i4.getProperty(
        this,
        'ALPHA',
      );
  _i2.num get rgb => _i4.getProperty(
        this,
        'RGB',
      );
  _i2.num get rgba => _i4.getProperty(
        this,
        'RGBA',
      );
  _i2.num get luminance => _i4.getProperty(
        this,
        'LUMINANCE',
      );
  _i2.num get luminanceAlpha => _i4.getProperty(
        this,
        'LUMINANCE_ALPHA',
      );
  _i2.num get unsignedShort4444 => _i4.getProperty(
        this,
        'UNSIGNED_SHORT_4_4_4_4',
      );
  _i2.num get unsignedShort5551 => _i4.getProperty(
        this,
        'UNSIGNED_SHORT_5_5_5_1',
      );
  _i2.num get unsignedShort565 => _i4.getProperty(
        this,
        'UNSIGNED_SHORT_5_6_5',
      );
  _i2.num get fragmentShader => _i4.getProperty(
        this,
        'FRAGMENT_SHADER',
      );
  _i2.num get vertexShader => _i4.getProperty(
        this,
        'VERTEX_SHADER',
      );
  _i2.num get maxVertexAttribs => _i4.getProperty(
        this,
        'MAX_VERTEX_ATTRIBS',
      );
  _i2.num get maxVertexUniformVectors => _i4.getProperty(
        this,
        'MAX_VERTEX_UNIFORM_VECTORS',
      );
  _i2.num get maxVaryingVectors => _i4.getProperty(
        this,
        'MAX_VARYING_VECTORS',
      );
  _i2.num get maxCombinedTextureImageUnits => _i4.getProperty(
        this,
        'MAX_COMBINED_TEXTURE_IMAGE_UNITS',
      );
  _i2.num get maxVertexTextureImageUnits => _i4.getProperty(
        this,
        'MAX_VERTEX_TEXTURE_IMAGE_UNITS',
      );
  _i2.num get maxTextureImageUnits => _i4.getProperty(
        this,
        'MAX_TEXTURE_IMAGE_UNITS',
      );
  _i2.num get maxFragmentUniformVectors => _i4.getProperty(
        this,
        'MAX_FRAGMENT_UNIFORM_VECTORS',
      );
  _i2.num get shaderType => _i4.getProperty(
        this,
        'SHADER_TYPE',
      );
  _i2.num get deleteStatus => _i4.getProperty(
        this,
        'DELETE_STATUS',
      );
  _i2.num get linkStatus => _i4.getProperty(
        this,
        'LINK_STATUS',
      );
  _i2.num get validateStatus => _i4.getProperty(
        this,
        'VALIDATE_STATUS',
      );
  _i2.num get attachedShaders => _i4.getProperty(
        this,
        'ATTACHED_SHADERS',
      );
  _i2.num get activeUniforms => _i4.getProperty(
        this,
        'ACTIVE_UNIFORMS',
      );
  _i2.num get activeAttributes => _i4.getProperty(
        this,
        'ACTIVE_ATTRIBUTES',
      );
  _i2.num get shadingLanguageVersion => _i4.getProperty(
        this,
        'SHADING_LANGUAGE_VERSION',
      );
  _i2.num get currentProgram => _i4.getProperty(
        this,
        'CURRENT_PROGRAM',
      );
  _i2.num get never => _i4.getProperty(
        this,
        'NEVER',
      );
  _i2.num get less => _i4.getProperty(
        this,
        'LESS',
      );
  _i2.num get equal => _i4.getProperty(
        this,
        'EQUAL',
      );
  _i2.num get lequal => _i4.getProperty(
        this,
        'LEQUAL',
      );
  _i2.num get greater => _i4.getProperty(
        this,
        'GREATER',
      );
  _i2.num get notequal => _i4.getProperty(
        this,
        'NOTEQUAL',
      );
  _i2.num get gequal => _i4.getProperty(
        this,
        'GEQUAL',
      );
  _i2.num get always => _i4.getProperty(
        this,
        'ALWAYS',
      );
  _i2.num get keep => _i4.getProperty(
        this,
        'KEEP',
      );
  _i2.num get replace => _i4.getProperty(
        this,
        'REPLACE',
      );
  _i2.num get incr => _i4.getProperty(
        this,
        'INCR',
      );
  _i2.num get decr => _i4.getProperty(
        this,
        'DECR',
      );
  _i2.num get invert => _i4.getProperty(
        this,
        'INVERT',
      );
  _i2.num get incrWrap => _i4.getProperty(
        this,
        'INCR_WRAP',
      );
  _i2.num get decrWrap => _i4.getProperty(
        this,
        'DECR_WRAP',
      );
  _i2.num get vendor => _i4.getProperty(
        this,
        'VENDOR',
      );
  _i2.num get renderer => _i4.getProperty(
        this,
        'RENDERER',
      );
  _i2.num get version => _i4.getProperty(
        this,
        'VERSION',
      );
  _i2.num get nearest => _i4.getProperty(
        this,
        'NEAREST',
      );
  _i2.num get linear => _i4.getProperty(
        this,
        'LINEAR',
      );
  _i2.num get nearestMipmapNearest => _i4.getProperty(
        this,
        'NEAREST_MIPMAP_NEAREST',
      );
  _i2.num get linearMipmapNearest => _i4.getProperty(
        this,
        'LINEAR_MIPMAP_NEAREST',
      );
  _i2.num get nearestMipmapLinear => _i4.getProperty(
        this,
        'NEAREST_MIPMAP_LINEAR',
      );
  _i2.num get linearMipmapLinear => _i4.getProperty(
        this,
        'LINEAR_MIPMAP_LINEAR',
      );
  _i2.num get textureMagFilter => _i4.getProperty(
        this,
        'TEXTURE_MAG_FILTER',
      );
  _i2.num get textureMinFilter => _i4.getProperty(
        this,
        'TEXTURE_MIN_FILTER',
      );
  _i2.num get textureWrapS => _i4.getProperty(
        this,
        'TEXTURE_WRAP_S',
      );
  _i2.num get textureWrapT => _i4.getProperty(
        this,
        'TEXTURE_WRAP_T',
      );
  _i2.num get texture2d => _i4.getProperty(
        this,
        'TEXTURE_2D',
      );
  _i2.num get texture => _i4.getProperty(
        this,
        'TEXTURE',
      );
  _i2.num get textureCubeMap => _i4.getProperty(
        this,
        'TEXTURE_CUBE_MAP',
      );
  _i2.num get textureBindingCubeMap => _i4.getProperty(
        this,
        'TEXTURE_BINDING_CUBE_MAP',
      );
  _i2.num get textureCubeMapPositiveX => _i4.getProperty(
        this,
        'TEXTURE_CUBE_MAP_POSITIVE_X',
      );
  _i2.num get textureCubeMapNegativeX => _i4.getProperty(
        this,
        'TEXTURE_CUBE_MAP_NEGATIVE_X',
      );
  _i2.num get textureCubeMapPositiveY => _i4.getProperty(
        this,
        'TEXTURE_CUBE_MAP_POSITIVE_Y',
      );
  _i2.num get textureCubeMapNegativeY => _i4.getProperty(
        this,
        'TEXTURE_CUBE_MAP_NEGATIVE_Y',
      );
  _i2.num get textureCubeMapPositiveZ => _i4.getProperty(
        this,
        'TEXTURE_CUBE_MAP_POSITIVE_Z',
      );
  _i2.num get textureCubeMapNegativeZ => _i4.getProperty(
        this,
        'TEXTURE_CUBE_MAP_NEGATIVE_Z',
      );
  _i2.num get maxCubeMapTextureSize => _i4.getProperty(
        this,
        'MAX_CUBE_MAP_TEXTURE_SIZE',
      );
  _i2.num get texture0 => _i4.getProperty(
        this,
        'TEXTURE0',
      );
  _i2.num get texture1 => _i4.getProperty(
        this,
        'TEXTURE1',
      );
  _i2.num get texture2 => _i4.getProperty(
        this,
        'TEXTURE2',
      );
  _i2.num get texture3 => _i4.getProperty(
        this,
        'TEXTURE3',
      );
  _i2.num get texture4 => _i4.getProperty(
        this,
        'TEXTURE4',
      );
  _i2.num get texture5 => _i4.getProperty(
        this,
        'TEXTURE5',
      );
  _i2.num get texture6 => _i4.getProperty(
        this,
        'TEXTURE6',
      );
  _i2.num get texture7 => _i4.getProperty(
        this,
        'TEXTURE7',
      );
  _i2.num get texture8 => _i4.getProperty(
        this,
        'TEXTURE8',
      );
  _i2.num get texture9 => _i4.getProperty(
        this,
        'TEXTURE9',
      );
  _i2.num get texture10 => _i4.getProperty(
        this,
        'TEXTURE10',
      );
  _i2.num get texture11 => _i4.getProperty(
        this,
        'TEXTURE11',
      );
  _i2.num get texture12 => _i4.getProperty(
        this,
        'TEXTURE12',
      );
  _i2.num get texture13 => _i4.getProperty(
        this,
        'TEXTURE13',
      );
  _i2.num get texture14 => _i4.getProperty(
        this,
        'TEXTURE14',
      );
  _i2.num get texture15 => _i4.getProperty(
        this,
        'TEXTURE15',
      );
  _i2.num get texture16 => _i4.getProperty(
        this,
        'TEXTURE16',
      );
  _i2.num get texture17 => _i4.getProperty(
        this,
        'TEXTURE17',
      );
  _i2.num get texture18 => _i4.getProperty(
        this,
        'TEXTURE18',
      );
  _i2.num get texture19 => _i4.getProperty(
        this,
        'TEXTURE19',
      );
  _i2.num get texture20 => _i4.getProperty(
        this,
        'TEXTURE20',
      );
  _i2.num get texture21 => _i4.getProperty(
        this,
        'TEXTURE21',
      );
  _i2.num get texture22 => _i4.getProperty(
        this,
        'TEXTURE22',
      );
  _i2.num get texture23 => _i4.getProperty(
        this,
        'TEXTURE23',
      );
  _i2.num get texture24 => _i4.getProperty(
        this,
        'TEXTURE24',
      );
  _i2.num get texture25 => _i4.getProperty(
        this,
        'TEXTURE25',
      );
  _i2.num get texture26 => _i4.getProperty(
        this,
        'TEXTURE26',
      );
  _i2.num get texture27 => _i4.getProperty(
        this,
        'TEXTURE27',
      );
  _i2.num get texture28 => _i4.getProperty(
        this,
        'TEXTURE28',
      );
  _i2.num get texture29 => _i4.getProperty(
        this,
        'TEXTURE29',
      );
  _i2.num get texture30 => _i4.getProperty(
        this,
        'TEXTURE30',
      );
  _i2.num get texture31 => _i4.getProperty(
        this,
        'TEXTURE31',
      );
  _i2.num get activeTexture$ => _i4.getProperty(
        this,
        'ACTIVE_TEXTURE',
      );
  _i2.num get repeat => _i4.getProperty(
        this,
        'REPEAT',
      );
  _i2.num get clampToEdge => _i4.getProperty(
        this,
        'CLAMP_TO_EDGE',
      );
  _i2.num get mirroredRepeat => _i4.getProperty(
        this,
        'MIRRORED_REPEAT',
      );
  _i2.num get floatVec2 => _i4.getProperty(
        this,
        'FLOAT_VEC2',
      );
  _i2.num get floatVec3 => _i4.getProperty(
        this,
        'FLOAT_VEC3',
      );
  _i2.num get floatVec4 => _i4.getProperty(
        this,
        'FLOAT_VEC4',
      );
  _i2.num get intVec2 => _i4.getProperty(
        this,
        'INT_VEC2',
      );
  _i2.num get intVec3 => _i4.getProperty(
        this,
        'INT_VEC3',
      );
  _i2.num get intVec4 => _i4.getProperty(
        this,
        'INT_VEC4',
      );
  _i2.num get bool$ => _i4.getProperty(
        this,
        'BOOL',
      );
  _i2.num get boolVec2 => _i4.getProperty(
        this,
        'BOOL_VEC2',
      );
  _i2.num get boolVec3 => _i4.getProperty(
        this,
        'BOOL_VEC3',
      );
  _i2.num get boolVec4 => _i4.getProperty(
        this,
        'BOOL_VEC4',
      );
  _i2.num get floatMat2 => _i4.getProperty(
        this,
        'FLOAT_MAT2',
      );
  _i2.num get floatMat3 => _i4.getProperty(
        this,
        'FLOAT_MAT3',
      );
  _i2.num get floatMat4 => _i4.getProperty(
        this,
        'FLOAT_MAT4',
      );
  _i2.num get sampler2d => _i4.getProperty(
        this,
        'SAMPLER_2D',
      );
  _i2.num get samplerCube => _i4.getProperty(
        this,
        'SAMPLER_CUBE',
      );
  _i2.num get vertexAttribArrayEnabled => _i4.getProperty(
        this,
        'VERTEX_ATTRIB_ARRAY_ENABLED',
      );
  _i2.num get vertexAttribArraySize => _i4.getProperty(
        this,
        'VERTEX_ATTRIB_ARRAY_SIZE',
      );
  _i2.num get vertexAttribArrayStride => _i4.getProperty(
        this,
        'VERTEX_ATTRIB_ARRAY_STRIDE',
      );
  _i2.num get vertexAttribArrayType => _i4.getProperty(
        this,
        'VERTEX_ATTRIB_ARRAY_TYPE',
      );
  _i2.num get vertexAttribArrayNormalized => _i4.getProperty(
        this,
        'VERTEX_ATTRIB_ARRAY_NORMALIZED',
      );
  _i2.num get vertexAttribArrayPointer => _i4.getProperty(
        this,
        'VERTEX_ATTRIB_ARRAY_POINTER',
      );
  _i2.num get vertexAttribArrayBufferBinding => _i4.getProperty(
        this,
        'VERTEX_ATTRIB_ARRAY_BUFFER_BINDING',
      );
  _i2.num get implementationColorReadType => _i4.getProperty(
        this,
        'IMPLEMENTATION_COLOR_READ_TYPE',
      );
  _i2.num get implementationColorReadFormat => _i4.getProperty(
        this,
        'IMPLEMENTATION_COLOR_READ_FORMAT',
      );
  _i2.num get compileStatus => _i4.getProperty(
        this,
        'COMPILE_STATUS',
      );
  _i2.num get lowFloat => _i4.getProperty(
        this,
        'LOW_FLOAT',
      );
  _i2.num get mediumFloat => _i4.getProperty(
        this,
        'MEDIUM_FLOAT',
      );
  _i2.num get highFloat => _i4.getProperty(
        this,
        'HIGH_FLOAT',
      );
  _i2.num get lowInt => _i4.getProperty(
        this,
        'LOW_INT',
      );
  _i2.num get mediumInt => _i4.getProperty(
        this,
        'MEDIUM_INT',
      );
  _i2.num get highInt => _i4.getProperty(
        this,
        'HIGH_INT',
      );
  _i2.num get framebuffer => _i4.getProperty(
        this,
        'FRAMEBUFFER',
      );
  _i2.num get renderbuffer => _i4.getProperty(
        this,
        'RENDERBUFFER',
      );
  _i2.num get rgba4 => _i4.getProperty(
        this,
        'RGBA4',
      );
  _i2.num get rgb5A1 => _i4.getProperty(
        this,
        'RGB5_A1',
      );
  _i2.num get rgb565 => _i4.getProperty(
        this,
        'RGB565',
      );
  _i2.num get depthComponent16 => _i4.getProperty(
        this,
        'DEPTH_COMPONENT16',
      );
  _i2.num get stencilIndex8 => _i4.getProperty(
        this,
        'STENCIL_INDEX8',
      );
  _i2.num get depthStencil => _i4.getProperty(
        this,
        'DEPTH_STENCIL',
      );
  _i2.num get renderbufferWidth => _i4.getProperty(
        this,
        'RENDERBUFFER_WIDTH',
      );
  _i2.num get renderbufferHeight => _i4.getProperty(
        this,
        'RENDERBUFFER_HEIGHT',
      );
  _i2.num get renderbufferInternalFormat => _i4.getProperty(
        this,
        'RENDERBUFFER_INTERNAL_FORMAT',
      );
  _i2.num get renderbufferRedSize => _i4.getProperty(
        this,
        'RENDERBUFFER_RED_SIZE',
      );
  _i2.num get renderbufferGreenSize => _i4.getProperty(
        this,
        'RENDERBUFFER_GREEN_SIZE',
      );
  _i2.num get renderbufferBlueSize => _i4.getProperty(
        this,
        'RENDERBUFFER_BLUE_SIZE',
      );
  _i2.num get renderbufferAlphaSize => _i4.getProperty(
        this,
        'RENDERBUFFER_ALPHA_SIZE',
      );
  _i2.num get renderbufferDepthSize => _i4.getProperty(
        this,
        'RENDERBUFFER_DEPTH_SIZE',
      );
  _i2.num get renderbufferStencilSize => _i4.getProperty(
        this,
        'RENDERBUFFER_STENCIL_SIZE',
      );
  _i2.num get framebufferAttachmentObjectType => _i4.getProperty(
        this,
        'FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE',
      );
  _i2.num get framebufferAttachmentObjectName => _i4.getProperty(
        this,
        'FRAMEBUFFER_ATTACHMENT_OBJECT_NAME',
      );
  _i2.num get framebufferAttachmentTextureLevel => _i4.getProperty(
        this,
        'FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL',
      );
  _i2.num get framebufferAttachmentTextureCubeMapFace => _i4.getProperty(
        this,
        'FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE',
      );
  _i2.num get colorAttachment0 => _i4.getProperty(
        this,
        'COLOR_ATTACHMENT0',
      );
  _i2.num get depthAttachment => _i4.getProperty(
        this,
        'DEPTH_ATTACHMENT',
      );
  _i2.num get stencilAttachment => _i4.getProperty(
        this,
        'STENCIL_ATTACHMENT',
      );
  _i2.num get depthStencilAttachment => _i4.getProperty(
        this,
        'DEPTH_STENCIL_ATTACHMENT',
      );
  _i2.num get none => _i4.getProperty(
        this,
        'NONE',
      );
  _i2.num get framebufferComplete => _i4.getProperty(
        this,
        'FRAMEBUFFER_COMPLETE',
      );
  _i2.num get framebufferIncompleteAttachment => _i4.getProperty(
        this,
        'FRAMEBUFFER_INCOMPLETE_ATTACHMENT',
      );
  _i2.num get framebufferIncompleteMissingAttachment => _i4.getProperty(
        this,
        'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT',
      );
  _i2.num get framebufferIncompleteDimensions => _i4.getProperty(
        this,
        'FRAMEBUFFER_INCOMPLETE_DIMENSIONS',
      );
  _i2.num get framebufferUnsupported => _i4.getProperty(
        this,
        'FRAMEBUFFER_UNSUPPORTED',
      );
  _i2.num get framebufferBinding => _i4.getProperty(
        this,
        'FRAMEBUFFER_BINDING',
      );
  _i2.num get renderbufferBinding => _i4.getProperty(
        this,
        'RENDERBUFFER_BINDING',
      );
  _i2.num get maxRenderbufferSize => _i4.getProperty(
        this,
        'MAX_RENDERBUFFER_SIZE',
      );
  _i2.num get invalidFramebufferOperation => _i4.getProperty(
        this,
        'INVALID_FRAMEBUFFER_OPERATION',
      );
  _i2.num get unpackFlipYWebgl => _i4.getProperty(
        this,
        'UNPACK_FLIP_Y_WEBGL',
      );
  _i2.num get unpackPremultiplyAlphaWebgl => _i4.getProperty(
        this,
        'UNPACK_PREMULTIPLY_ALPHA_WEBGL',
      );
  _i2.num get contextLostWebgl => _i4.getProperty(
        this,
        'CONTEXT_LOST_WEBGL',
      );
  _i2.num get unpackColorspaceConversionWebgl => _i4.getProperty(
        this,
        'UNPACK_COLORSPACE_CONVERSION_WEBGL',
      );
  _i2.num get browserDefaultWebgl => _i4.getProperty(
        this,
        'BROWSER_DEFAULT_WEBGL',
      );
  set activeTexture(void Function(_i2.num) value) {
    _i4.setProperty(
      this,
      'activeTexture',
      _i4.allowInterop(value),
    );
  }

  void Function(_i2.num) get activeTexture => (_i2.num p0) => _i4.callMethod(
        _i4.getProperty(
          this,
          'activeTexture',
        ),
        r'call',
        [
          this,
          p0,
        ],
      );
  set attachShader(
      void Function(
        _i3.WebGLProgram,
        _i3.WebGLShader,
      ) value) {
    _i4.setProperty(
      this,
      'attachShader',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i3.WebGLProgram,
    _i3.WebGLShader,
  ) get attachShader => (
        _i3.WebGLProgram p0,
        _i3.WebGLShader p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'attachShader',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set bindAttribLocation(
      void Function(
        _i3.WebGLProgram,
        _i2.num,
        _i2.String,
      ) value) {
    _i4.setProperty(
      this,
      'bindAttribLocation',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i3.WebGLProgram,
    _i2.num,
    _i2.String,
  ) get bindAttribLocation => (
        _i3.WebGLProgram p0,
        _i2.num p1,
        _i2.String p2,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'bindAttribLocation',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
            ],
          );
  set bindBuffer(
      void Function(
        _i2.num, [
        _i3.WebGLBuffer?,
      ]) value) {
    _i4.setProperty(
      this,
      'bindBuffer',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num, [
    _i3.WebGLBuffer?,
  ]) get bindBuffer => (
        _i2.num p0, [
        _i3.WebGLBuffer? p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'bindBuffer',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
            ],
          );
  set bindFramebuffer(
      void Function(
        _i2.num, [
        _i3.WebGLFramebuffer?,
      ]) value) {
    _i4.setProperty(
      this,
      'bindFramebuffer',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num, [
    _i3.WebGLFramebuffer?,
  ]) get bindFramebuffer => (
        _i2.num p0, [
        _i3.WebGLFramebuffer? p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'bindFramebuffer',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
            ],
          );
  set bindRenderbuffer(
      void Function(
        _i2.num, [
        _i3.WebGLRenderbuffer?,
      ]) value) {
    _i4.setProperty(
      this,
      'bindRenderbuffer',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num, [
    _i3.WebGLRenderbuffer?,
  ]) get bindRenderbuffer => (
        _i2.num p0, [
        _i3.WebGLRenderbuffer? p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'bindRenderbuffer',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
            ],
          );
  set bindTexture(
      void Function(
        _i2.num, [
        _i3.WebGLTexture?,
      ]) value) {
    _i4.setProperty(
      this,
      'bindTexture',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num, [
    _i3.WebGLTexture?,
  ]) get bindTexture => (
        _i2.num p0, [
        _i3.WebGLTexture? p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'bindTexture',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
            ],
          );
  set blendColor(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'blendColor',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
  ) get blendColor => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'blendColor',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
            ],
          );
  set blendEquation(void Function(_i2.num) value) {
    _i4.setProperty(
      this,
      'blendEquation',
      _i4.allowInterop(value),
    );
  }

  void Function(_i2.num) get blendEquation => (_i2.num p0) => _i4.callMethod(
        _i4.getProperty(
          this,
          'blendEquation',
        ),
        r'call',
        [
          this,
          p0,
        ],
      );
  set blendEquationSeparate(
      void Function(
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'blendEquationSeparate',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
  ) get blendEquationSeparate => (
        _i2.num p0,
        _i2.num p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'blendEquationSeparate',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set blendFunc(
      void Function(
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'blendFunc',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
  ) get blendFunc => (
        _i2.num p0,
        _i2.num p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'blendFunc',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set blendFuncSeparate(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'blendFuncSeparate',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
  ) get blendFuncSeparate => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'blendFuncSeparate',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
            ],
          );
  set checkFramebufferStatus(_i2.num Function(_i2.num) value) {
    _i4.setProperty(
      this,
      'checkFramebufferStatus',
      _i4.allowInterop(value),
    );
  }

  _i2.num Function(_i2.num) get checkFramebufferStatus =>
      (_i2.num p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'checkFramebufferStatus',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set clear(void Function(_i2.num) value) {
    _i4.setProperty(
      this,
      'clear',
      _i4.allowInterop(value),
    );
  }

  void Function(_i2.num) get clear => (_i2.num p0) => _i4.callMethod(
        _i4.getProperty(
          this,
          'clear',
        ),
        r'call',
        [
          this,
          p0,
        ],
      );
  set clearColor(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'clearColor',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
  ) get clearColor => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'clearColor',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
            ],
          );
  set clearDepth(void Function(_i2.num) value) {
    _i4.setProperty(
      this,
      'clearDepth',
      _i4.allowInterop(value),
    );
  }

  void Function(_i2.num) get clearDepth => (_i2.num p0) => _i4.callMethod(
        _i4.getProperty(
          this,
          'clearDepth',
        ),
        r'call',
        [
          this,
          p0,
        ],
      );
  set clearStencil(void Function(_i2.num) value) {
    _i4.setProperty(
      this,
      'clearStencil',
      _i4.allowInterop(value),
    );
  }

  void Function(_i2.num) get clearStencil => (_i2.num p0) => _i4.callMethod(
        _i4.getProperty(
          this,
          'clearStencil',
        ),
        r'call',
        [
          this,
          p0,
        ],
      );
  set colorMask(
      void Function(
        _i2.bool,
        _i2.bool,
        _i2.bool,
        _i2.bool,
      ) value) {
    _i4.setProperty(
      this,
      'colorMask',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.bool,
    _i2.bool,
    _i2.bool,
    _i2.bool,
  ) get colorMask => (
        _i2.bool p0,
        _i2.bool p1,
        _i2.bool p2,
        _i2.bool p3,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'colorMask',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
            ],
          );
  set compileShader(void Function(_i3.WebGLShader) value) {
    _i4.setProperty(
      this,
      'compileShader',
      _i4.allowInterop(value),
    );
  }

  void Function(_i3.WebGLShader) get compileShader =>
      (_i3.WebGLShader p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'compileShader',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set copyTexImage2D(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'copyTexImage2D',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
  ) get copyTexImage2D => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
        _i2.num p4,
        _i2.num p5,
        _i2.num p6,
        _i2.num p7,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'copyTexImage2D',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
              p4,
              p5,
              p6,
              p7,
            ],
          );
  set copyTexSubImage2D(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'copyTexSubImage2D',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
  ) get copyTexSubImage2D => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
        _i2.num p4,
        _i2.num p5,
        _i2.num p6,
        _i2.num p7,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'copyTexSubImage2D',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
              p4,
              p5,
              p6,
              p7,
            ],
          );
  set createBuffer(_i3.WebGLBuffer? Function() value) {
    _i4.setProperty(
      this,
      'createBuffer',
      _i4.allowInterop(() => () => value() ?? _i6.undefined),
    );
  }

  _i3.WebGLBuffer? Function() get createBuffer => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'createBuffer',
        ),
        r'call',
        [this],
      );
  set createFramebuffer(_i3.WebGLFramebuffer? Function() value) {
    _i4.setProperty(
      this,
      'createFramebuffer',
      _i4.allowInterop(() => () => value() ?? _i6.undefined),
    );
  }

  _i3.WebGLFramebuffer? Function() get createFramebuffer =>
      () => _i4.callMethod(
            _i4.getProperty(
              this,
              'createFramebuffer',
            ),
            r'call',
            [this],
          );
  set createProgram(_i3.WebGLProgram? Function() value) {
    _i4.setProperty(
      this,
      'createProgram',
      _i4.allowInterop(() => () => value() ?? _i6.undefined),
    );
  }

  _i3.WebGLProgram? Function() get createProgram => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'createProgram',
        ),
        r'call',
        [this],
      );
  set createRenderbuffer(_i3.WebGLRenderbuffer? Function() value) {
    _i4.setProperty(
      this,
      'createRenderbuffer',
      _i4.allowInterop(() => () => value() ?? _i6.undefined),
    );
  }

  _i3.WebGLRenderbuffer? Function() get createRenderbuffer =>
      () => _i4.callMethod(
            _i4.getProperty(
              this,
              'createRenderbuffer',
            ),
            r'call',
            [this],
          );
  set createShader(_i3.WebGLShader? Function(_i2.num) value) {
    _i4.setProperty(
      this,
      'createShader',
      _i4.allowInterop((p0) => () => value(p0) ?? _i6.undefined),
    );
  }

  _i3.WebGLShader? Function(_i2.num) get createShader =>
      (_i2.num p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'createShader',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set createTexture(_i3.WebGLTexture? Function() value) {
    _i4.setProperty(
      this,
      'createTexture',
      _i4.allowInterop(() => () => value() ?? _i6.undefined),
    );
  }

  _i3.WebGLTexture? Function() get createTexture => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'createTexture',
        ),
        r'call',
        [this],
      );
  set cullFace(void Function(_i2.num) value) {
    _i4.setProperty(
      this,
      'cullFace',
      _i4.allowInterop(value),
    );
  }

  void Function(_i2.num) get cullFace => (_i2.num p0) => _i4.callMethod(
        _i4.getProperty(
          this,
          'cullFace',
        ),
        r'call',
        [
          this,
          p0,
        ],
      );
  set deleteBuffer(void Function([_i3.WebGLBuffer?]) value) {
    _i4.setProperty(
      this,
      'deleteBuffer',
      _i4.allowInterop(value),
    );
  }

  void Function([_i3.WebGLBuffer?]) get deleteBuffer =>
      ([_i3.WebGLBuffer? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'deleteBuffer',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set deleteFramebuffer(void Function([_i3.WebGLFramebuffer?]) value) {
    _i4.setProperty(
      this,
      'deleteFramebuffer',
      _i4.allowInterop(value),
    );
  }

  void Function([_i3.WebGLFramebuffer?]) get deleteFramebuffer =>
      ([_i3.WebGLFramebuffer? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'deleteFramebuffer',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set deleteProgram(void Function([_i3.WebGLProgram?]) value) {
    _i4.setProperty(
      this,
      'deleteProgram',
      _i4.allowInterop(value),
    );
  }

  void Function([_i3.WebGLProgram?]) get deleteProgram =>
      ([_i3.WebGLProgram? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'deleteProgram',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set deleteRenderbuffer(void Function([_i3.WebGLRenderbuffer?]) value) {
    _i4.setProperty(
      this,
      'deleteRenderbuffer',
      _i4.allowInterop(value),
    );
  }

  void Function([_i3.WebGLRenderbuffer?]) get deleteRenderbuffer =>
      ([_i3.WebGLRenderbuffer? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'deleteRenderbuffer',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set deleteShader(void Function([_i3.WebGLShader?]) value) {
    _i4.setProperty(
      this,
      'deleteShader',
      _i4.allowInterop(value),
    );
  }

  void Function([_i3.WebGLShader?]) get deleteShader =>
      ([_i3.WebGLShader? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'deleteShader',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set deleteTexture(void Function([_i3.WebGLTexture?]) value) {
    _i4.setProperty(
      this,
      'deleteTexture',
      _i4.allowInterop(value),
    );
  }

  void Function([_i3.WebGLTexture?]) get deleteTexture =>
      ([_i3.WebGLTexture? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'deleteTexture',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set depthFunc(void Function(_i2.num) value) {
    _i4.setProperty(
      this,
      'depthFunc',
      _i4.allowInterop(value),
    );
  }

  void Function(_i2.num) get depthFunc => (_i2.num p0) => _i4.callMethod(
        _i4.getProperty(
          this,
          'depthFunc',
        ),
        r'call',
        [
          this,
          p0,
        ],
      );
  set depthMask(void Function(_i2.bool) value) {
    _i4.setProperty(
      this,
      'depthMask',
      _i4.allowInterop(value),
    );
  }

  void Function(_i2.bool) get depthMask => (_i2.bool p0) => _i4.callMethod(
        _i4.getProperty(
          this,
          'depthMask',
        ),
        r'call',
        [
          this,
          p0,
        ],
      );
  set depthRange(
      void Function(
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'depthRange',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
  ) get depthRange => (
        _i2.num p0,
        _i2.num p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'depthRange',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set detachShader(
      void Function(
        _i3.WebGLProgram,
        _i3.WebGLShader,
      ) value) {
    _i4.setProperty(
      this,
      'detachShader',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i3.WebGLProgram,
    _i3.WebGLShader,
  ) get detachShader => (
        _i3.WebGLProgram p0,
        _i3.WebGLShader p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'detachShader',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set disable(void Function(_i2.num) value) {
    _i4.setProperty(
      this,
      'disable',
      _i4.allowInterop(value),
    );
  }

  void Function(_i2.num) get disable => (_i2.num p0) => _i4.callMethod(
        _i4.getProperty(
          this,
          'disable',
        ),
        r'call',
        [
          this,
          p0,
        ],
      );
  set disableVertexAttribArray(void Function(_i2.num) value) {
    _i4.setProperty(
      this,
      'disableVertexAttribArray',
      _i4.allowInterop(value),
    );
  }

  void Function(_i2.num) get disableVertexAttribArray =>
      (_i2.num p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'disableVertexAttribArray',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set drawArrays(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'drawArrays',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
  ) get drawArrays => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'drawArrays',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
            ],
          );
  set drawElements(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'drawElements',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
  ) get drawElements => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'drawElements',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
            ],
          );
  set enable(void Function(_i2.num) value) {
    _i4.setProperty(
      this,
      'enable',
      _i4.allowInterop(value),
    );
  }

  void Function(_i2.num) get enable => (_i2.num p0) => _i4.callMethod(
        _i4.getProperty(
          this,
          'enable',
        ),
        r'call',
        [
          this,
          p0,
        ],
      );
  set enableVertexAttribArray(void Function(_i2.num) value) {
    _i4.setProperty(
      this,
      'enableVertexAttribArray',
      _i4.allowInterop(value),
    );
  }

  void Function(_i2.num) get enableVertexAttribArray =>
      (_i2.num p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'enableVertexAttribArray',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set finish(void Function() value) {
    _i4.setProperty(
      this,
      'finish',
      _i4.allowInterop(value),
    );
  }

  void Function() get finish => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'finish',
        ),
        r'call',
        [this],
      );
  set flush(void Function() value) {
    _i4.setProperty(
      this,
      'flush',
      _i4.allowInterop(value),
    );
  }

  void Function() get flush => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'flush',
        ),
        r'call',
        [this],
      );
  set framebufferRenderbuffer(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num, [
        _i3.WebGLRenderbuffer?,
      ]) value) {
    _i4.setProperty(
      this,
      'framebufferRenderbuffer',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num, [
    _i3.WebGLRenderbuffer?,
  ]) get framebufferRenderbuffer => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2, [
        _i3.WebGLRenderbuffer? p3,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'framebufferRenderbuffer',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3 ?? _i6.undefined,
            ],
          );
  set framebufferTexture2D(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num, [
        _i3.WebGLTexture?,
      ]) value) {
    _i4.setProperty(
      this,
      'framebufferTexture2D',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num, [
    _i3.WebGLTexture?,
  ]) get framebufferTexture2D => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p4, [
        _i3.WebGLTexture? p3,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'framebufferTexture2D',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3 ?? _i6.undefined,
              p4,
            ],
          );
  set frontFace(void Function(_i2.num) value) {
    _i4.setProperty(
      this,
      'frontFace',
      _i4.allowInterop(value),
    );
  }

  void Function(_i2.num) get frontFace => (_i2.num p0) => _i4.callMethod(
        _i4.getProperty(
          this,
          'frontFace',
        ),
        r'call',
        [
          this,
          p0,
        ],
      );
  set generateMipmap(void Function(_i2.num) value) {
    _i4.setProperty(
      this,
      'generateMipmap',
      _i4.allowInterop(value),
    );
  }

  void Function(_i2.num) get generateMipmap => (_i2.num p0) => _i4.callMethod(
        _i4.getProperty(
          this,
          'generateMipmap',
        ),
        r'call',
        [
          this,
          p0,
        ],
      );
  set getActiveAttrib(
      _i3.WebGLActiveInfo? Function(
        _i3.WebGLProgram,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'getActiveAttrib',
      _i4.allowInterop((
        p0,
        p1,
      ) =>
          () =>
              value(
                p0,
                p1,
              ) ??
              _i6.undefined),
    );
  }

  _i3.WebGLActiveInfo? Function(
    _i3.WebGLProgram,
    _i2.num,
  ) get getActiveAttrib => (
        _i3.WebGLProgram p0,
        _i2.num p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'getActiveAttrib',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set getActiveUniform(
      _i3.WebGLActiveInfo? Function(
        _i3.WebGLProgram,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'getActiveUniform',
      _i4.allowInterop((
        p0,
        p1,
      ) =>
          () =>
              value(
                p0,
                p1,
              ) ??
              _i6.undefined),
    );
  }

  _i3.WebGLActiveInfo? Function(
    _i3.WebGLProgram,
    _i2.num,
  ) get getActiveUniform => (
        _i3.WebGLProgram p0,
        _i2.num p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'getActiveUniform',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set getAttachedShaders(
      _i2.List<_i3.WebGLShader>? Function(_i3.WebGLProgram) value) {
    _i4.setProperty(
      this,
      'getAttachedShaders',
      _i4.allowInterop((p0) => () => value(p0) ?? _i6.undefined),
    );
  }

  _i2.List<_i3.WebGLShader>? Function(_i3.WebGLProgram)
      get getAttachedShaders => (_i3.WebGLProgram p0) => ((_i4.callMethod(
            _i4.getProperty(
              this,
              'getAttachedShaders',
            ),
            r'call',
            [
              this,
              p0,
            ],
          )) as _i2.List?)
              ?.cast();
  set getAttribLocation(
      _i2.num Function(
        _i3.WebGLProgram,
        _i2.String,
      ) value) {
    _i4.setProperty(
      this,
      'getAttribLocation',
      _i4.allowInterop(value),
    );
  }

  _i2.num Function(
    _i3.WebGLProgram,
    _i2.String,
  ) get getAttribLocation => (
        _i3.WebGLProgram p0,
        _i2.String p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'getAttribLocation',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set getBufferParameter(
      _i2.dynamic Function(
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'getBufferParameter',
      _i4.allowInterop(value),
    );
  }

  _i2.dynamic Function(
    _i2.num,
    _i2.num,
  ) get getBufferParameter => (
        _i2.num p0,
        _i2.num p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'getBufferParameter',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set getContextAttributes(_i3.WebGLContextAttributes? Function() value) {
    _i4.setProperty(
      this,
      'getContextAttributes',
      _i4.allowInterop(() => () => value() ?? _i6.undefined),
    );
  }

  _i3.WebGLContextAttributes? Function() get getContextAttributes =>
      () => _i4.callMethod(
            _i4.getProperty(
              this,
              'getContextAttributes',
            ),
            r'call',
            [this],
          );
  set getError(_i2.num Function() value) {
    _i4.setProperty(
      this,
      'getError',
      _i4.allowInterop(value),
    );
  }

  _i2.num Function() get getError => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'getError',
        ),
        r'call',
        [this],
      );
  set getFramebufferAttachmentParameter(
      _i2.dynamic Function(
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'getFramebufferAttachmentParameter',
      _i4.allowInterop(value),
    );
  }

  _i2.dynamic Function(
    _i2.num,
    _i2.num,
    _i2.num,
  ) get getFramebufferAttachmentParameter => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'getFramebufferAttachmentParameter',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
            ],
          );
  set getParameter(_i2.dynamic Function(_i2.num) value) {
    _i4.setProperty(
      this,
      'getParameter',
      _i4.allowInterop(value),
    );
  }

  _i2.dynamic Function(_i2.num) get getParameter =>
      (_i2.num p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'getParameter',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set getProgramInfoLog(_i2.String? Function(_i3.WebGLProgram) value) {
    _i4.setProperty(
      this,
      'getProgramInfoLog',
      _i4.allowInterop((p0) => () => value(p0) ?? _i6.undefined),
    );
  }

  _i2.String? Function(_i3.WebGLProgram) get getProgramInfoLog =>
      (_i3.WebGLProgram p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'getProgramInfoLog',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set getProgramParameter(
      _i2.dynamic Function(
        _i3.WebGLProgram,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'getProgramParameter',
      _i4.allowInterop(value),
    );
  }

  _i2.dynamic Function(
    _i3.WebGLProgram,
    _i2.num,
  ) get getProgramParameter => (
        _i3.WebGLProgram p0,
        _i2.num p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'getProgramParameter',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set getRenderbufferParameter(
      _i2.dynamic Function(
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'getRenderbufferParameter',
      _i4.allowInterop(value),
    );
  }

  _i2.dynamic Function(
    _i2.num,
    _i2.num,
  ) get getRenderbufferParameter => (
        _i2.num p0,
        _i2.num p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'getRenderbufferParameter',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set getShaderInfoLog(_i2.String? Function(_i3.WebGLShader) value) {
    _i4.setProperty(
      this,
      'getShaderInfoLog',
      _i4.allowInterop((p0) => () => value(p0) ?? _i6.undefined),
    );
  }

  _i2.String? Function(_i3.WebGLShader) get getShaderInfoLog =>
      (_i3.WebGLShader p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'getShaderInfoLog',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set getShaderParameter(
      _i2.dynamic Function(
        _i3.WebGLShader,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'getShaderParameter',
      _i4.allowInterop(value),
    );
  }

  _i2.dynamic Function(
    _i3.WebGLShader,
    _i2.num,
  ) get getShaderParameter => (
        _i3.WebGLShader p0,
        _i2.num p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'getShaderParameter',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set getShaderPrecisionFormat(
      _i3.WebGLShaderPrecisionFormat? Function(
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'getShaderPrecisionFormat',
      _i4.allowInterop((
        p0,
        p1,
      ) =>
          () =>
              value(
                p0,
                p1,
              ) ??
              _i6.undefined),
    );
  }

  _i3.WebGLShaderPrecisionFormat? Function(
    _i2.num,
    _i2.num,
  ) get getShaderPrecisionFormat => (
        _i2.num p0,
        _i2.num p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'getShaderPrecisionFormat',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set getShaderSource(_i2.String? Function(_i3.WebGLShader) value) {
    _i4.setProperty(
      this,
      'getShaderSource',
      _i4.allowInterop((p0) => () => value(p0) ?? _i6.undefined),
    );
  }

  _i2.String? Function(_i3.WebGLShader) get getShaderSource =>
      (_i3.WebGLShader p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'getShaderSource',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set getSupportedExtensions(_i2.List<_i2.String>? Function() value) {
    _i4.setProperty(
      this,
      'getSupportedExtensions',
      _i4.allowInterop(() => () => value() ?? _i6.undefined),
    );
  }

  _i2.List<_i2.String>? Function() get getSupportedExtensions =>
      () => ((_i4.callMethod(
            _i4.getProperty(
              this,
              'getSupportedExtensions',
            ),
            r'call',
            [this],
          )) as _i2.List?)
              ?.cast();
  set getTexParameter(
      _i2.dynamic Function(
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'getTexParameter',
      _i4.allowInterop(value),
    );
  }

  _i2.dynamic Function(
    _i2.num,
    _i2.num,
  ) get getTexParameter => (
        _i2.num p0,
        _i2.num p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'getTexParameter',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set getUniform(
      _i2.dynamic Function(
        _i3.WebGLProgram,
        _i3.WebGLUniformLocation,
      ) value) {
    _i4.setProperty(
      this,
      'getUniform',
      _i4.allowInterop(value),
    );
  }

  _i2.dynamic Function(
    _i3.WebGLProgram,
    _i3.WebGLUniformLocation,
  ) get getUniform => (
        _i3.WebGLProgram p0,
        _i3.WebGLUniformLocation p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'getUniform',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set getUniformLocation(
      _i3.WebGLUniformLocation? Function(
        _i3.WebGLProgram,
        _i2.String,
      ) value) {
    _i4.setProperty(
      this,
      'getUniformLocation',
      _i4.allowInterop((
        p0,
        p1,
      ) =>
          () =>
              value(
                p0,
                p1,
              ) ??
              _i6.undefined),
    );
  }

  _i3.WebGLUniformLocation? Function(
    _i3.WebGLProgram,
    _i2.String,
  ) get getUniformLocation => (
        _i3.WebGLProgram p0,
        _i2.String p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'getUniformLocation',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set getVertexAttrib(
      _i2.dynamic Function(
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'getVertexAttrib',
      _i4.allowInterop(value),
    );
  }

  _i2.dynamic Function(
    _i2.num,
    _i2.num,
  ) get getVertexAttrib => (
        _i2.num p0,
        _i2.num p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'getVertexAttrib',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set getVertexAttribOffset(
      _i2.num Function(
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'getVertexAttribOffset',
      _i4.allowInterop(value),
    );
  }

  _i2.num Function(
    _i2.num,
    _i2.num,
  ) get getVertexAttribOffset => (
        _i2.num p0,
        _i2.num p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'getVertexAttribOffset',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set hint(
      void Function(
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'hint',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
  ) get hint => (
        _i2.num p0,
        _i2.num p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'hint',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set isBuffer(_i2.bool Function([_i3.WebGLBuffer?]) value) {
    _i4.setProperty(
      this,
      'isBuffer',
      _i4.allowInterop(value),
    );
  }

  _i2.bool Function([_i3.WebGLBuffer?]) get isBuffer =>
      ([_i3.WebGLBuffer? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'isBuffer',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set isContextLost(_i2.bool Function() value) {
    _i4.setProperty(
      this,
      'isContextLost',
      _i4.allowInterop(value),
    );
  }

  _i2.bool Function() get isContextLost => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'isContextLost',
        ),
        r'call',
        [this],
      );
  set isEnabled(_i2.bool Function(_i2.num) value) {
    _i4.setProperty(
      this,
      'isEnabled',
      _i4.allowInterop(value),
    );
  }

  _i2.bool Function(_i2.num) get isEnabled => (_i2.num p0) => _i4.callMethod(
        _i4.getProperty(
          this,
          'isEnabled',
        ),
        r'call',
        [
          this,
          p0,
        ],
      );
  set isFramebuffer(_i2.bool Function([_i3.WebGLFramebuffer?]) value) {
    _i4.setProperty(
      this,
      'isFramebuffer',
      _i4.allowInterop(value),
    );
  }

  _i2.bool Function([_i3.WebGLFramebuffer?]) get isFramebuffer =>
      ([_i3.WebGLFramebuffer? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'isFramebuffer',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set isProgram(_i2.bool Function([_i3.WebGLProgram?]) value) {
    _i4.setProperty(
      this,
      'isProgram',
      _i4.allowInterop(value),
    );
  }

  _i2.bool Function([_i3.WebGLProgram?]) get isProgram =>
      ([_i3.WebGLProgram? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'isProgram',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set isRenderbuffer(_i2.bool Function([_i3.WebGLRenderbuffer?]) value) {
    _i4.setProperty(
      this,
      'isRenderbuffer',
      _i4.allowInterop(value),
    );
  }

  _i2.bool Function([_i3.WebGLRenderbuffer?]) get isRenderbuffer =>
      ([_i3.WebGLRenderbuffer? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'isRenderbuffer',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set isShader(_i2.bool Function([_i3.WebGLShader?]) value) {
    _i4.setProperty(
      this,
      'isShader',
      _i4.allowInterop(value),
    );
  }

  _i2.bool Function([_i3.WebGLShader?]) get isShader =>
      ([_i3.WebGLShader? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'isShader',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set isTexture(_i2.bool Function([_i3.WebGLTexture?]) value) {
    _i4.setProperty(
      this,
      'isTexture',
      _i4.allowInterop(value),
    );
  }

  _i2.bool Function([_i3.WebGLTexture?]) get isTexture =>
      ([_i3.WebGLTexture? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'isTexture',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set lineWidth(void Function(_i2.num) value) {
    _i4.setProperty(
      this,
      'lineWidth',
      _i4.allowInterop(value),
    );
  }

  void Function(_i2.num) get lineWidth => (_i2.num p0) => _i4.callMethod(
        _i4.getProperty(
          this,
          'lineWidth',
        ),
        r'call',
        [
          this,
          p0,
        ],
      );
  set linkProgram(void Function(_i3.WebGLProgram) value) {
    _i4.setProperty(
      this,
      'linkProgram',
      _i4.allowInterop(value),
    );
  }

  void Function(_i3.WebGLProgram) get linkProgram =>
      (_i3.WebGLProgram p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'linkProgram',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set pixelStorei(
      void Function(
        _i2.num,
        _i2.Object,
      ) value) {
    _i4.setProperty(
      this,
      'pixelStorei',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.Object,
  ) get pixelStorei => (
        _i2.num p0,
        _i2.Object p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'pixelStorei',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set polygonOffset(
      void Function(
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'polygonOffset',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
  ) get polygonOffset => (
        _i2.num p0,
        _i2.num p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'polygonOffset',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set renderbufferStorage(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'renderbufferStorage',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
  ) get renderbufferStorage => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'renderbufferStorage',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
            ],
          );
  set sampleCoverage(
      void Function(
        _i2.num,
        _i2.bool,
      ) value) {
    _i4.setProperty(
      this,
      'sampleCoverage',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.bool,
  ) get sampleCoverage => (
        _i2.num p0,
        _i2.bool p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'sampleCoverage',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set scissor(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'scissor',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
  ) get scissor => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'scissor',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
            ],
          );
  set shaderSource(
      void Function(
        _i3.WebGLShader,
        _i2.String,
      ) value) {
    _i4.setProperty(
      this,
      'shaderSource',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i3.WebGLShader,
    _i2.String,
  ) get shaderSource => (
        _i3.WebGLShader p0,
        _i2.String p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'shaderSource',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set stencilFunc(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'stencilFunc',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
  ) get stencilFunc => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'stencilFunc',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
            ],
          );
  set stencilFuncSeparate(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'stencilFuncSeparate',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
  ) get stencilFuncSeparate => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'stencilFuncSeparate',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
            ],
          );
  set stencilMask(void Function(_i2.num) value) {
    _i4.setProperty(
      this,
      'stencilMask',
      _i4.allowInterop(value),
    );
  }

  void Function(_i2.num) get stencilMask => (_i2.num p0) => _i4.callMethod(
        _i4.getProperty(
          this,
          'stencilMask',
        ),
        r'call',
        [
          this,
          p0,
        ],
      );
  set stencilMaskSeparate(
      void Function(
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'stencilMaskSeparate',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
  ) get stencilMaskSeparate => (
        _i2.num p0,
        _i2.num p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'stencilMaskSeparate',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set stencilOp(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'stencilOp',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
  ) get stencilOp => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'stencilOp',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
            ],
          );
  set stencilOpSeparate(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'stencilOpSeparate',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
  ) get stencilOpSeparate => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'stencilOpSeparate',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
            ],
          );
  set texParameterf(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'texParameterf',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
  ) get texParameterf => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'texParameterf',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
            ],
          );
  set texParameteri(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'texParameteri',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
  ) get texParameteri => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'texParameteri',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
            ],
          );
  set uniform1f(
      void Function(
        _i2.num, [
        _i3.WebGLUniformLocation?,
      ]) value) {
    _i4.setProperty(
      this,
      'uniform1f',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num, [
    _i3.WebGLUniformLocation?,
  ]) get uniform1f => (
        _i2.num p1, [
        _i3.WebGLUniformLocation? p0,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'uniform1f',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
              p1,
            ],
          );
  set uniform1i(
      void Function(
        _i2.num, [
        _i3.WebGLUniformLocation?,
      ]) value) {
    _i4.setProperty(
      this,
      'uniform1i',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num, [
    _i3.WebGLUniformLocation?,
  ]) get uniform1i => (
        _i2.num p1, [
        _i3.WebGLUniformLocation? p0,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'uniform1i',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
              p1,
            ],
          );
  set uniform2f(
      void Function(
        _i2.num,
        _i2.num, [
        _i3.WebGLUniformLocation?,
      ]) value) {
    _i4.setProperty(
      this,
      'uniform2f',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num, [
    _i3.WebGLUniformLocation?,
  ]) get uniform2f => (
        _i2.num p1,
        _i2.num p2, [
        _i3.WebGLUniformLocation? p0,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'uniform2f',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
              p1,
              p2,
            ],
          );
  set uniform2i(
      void Function(
        _i2.num,
        _i2.num, [
        _i3.WebGLUniformLocation?,
      ]) value) {
    _i4.setProperty(
      this,
      'uniform2i',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num, [
    _i3.WebGLUniformLocation?,
  ]) get uniform2i => (
        _i2.num p1,
        _i2.num p2, [
        _i3.WebGLUniformLocation? p0,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'uniform2i',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
              p1,
              p2,
            ],
          );
  set uniform3f(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num, [
        _i3.WebGLUniformLocation?,
      ]) value) {
    _i4.setProperty(
      this,
      'uniform3f',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num, [
    _i3.WebGLUniformLocation?,
  ]) get uniform3f => (
        _i2.num p1,
        _i2.num p2,
        _i2.num p3, [
        _i3.WebGLUniformLocation? p0,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'uniform3f',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
              p1,
              p2,
              p3,
            ],
          );
  set uniform3i(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num, [
        _i3.WebGLUniformLocation?,
      ]) value) {
    _i4.setProperty(
      this,
      'uniform3i',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num, [
    _i3.WebGLUniformLocation?,
  ]) get uniform3i => (
        _i2.num p1,
        _i2.num p2,
        _i2.num p3, [
        _i3.WebGLUniformLocation? p0,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'uniform3i',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
              p1,
              p2,
              p3,
            ],
          );
  set uniform4f(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num, [
        _i3.WebGLUniformLocation?,
      ]) value) {
    _i4.setProperty(
      this,
      'uniform4f',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num, [
    _i3.WebGLUniformLocation?,
  ]) get uniform4f => (
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
        _i2.num p4, [
        _i3.WebGLUniformLocation? p0,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'uniform4f',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
              p1,
              p2,
              p3,
              p4,
            ],
          );
  set uniform4i(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num, [
        _i3.WebGLUniformLocation?,
      ]) value) {
    _i4.setProperty(
      this,
      'uniform4i',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num, [
    _i3.WebGLUniformLocation?,
  ]) get uniform4i => (
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
        _i2.num p4, [
        _i3.WebGLUniformLocation? p0,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'uniform4i',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
              p1,
              p2,
              p3,
              p4,
            ],
          );
  set useProgram(void Function([_i3.WebGLProgram?]) value) {
    _i4.setProperty(
      this,
      'useProgram',
      _i4.allowInterop(value),
    );
  }

  void Function([_i3.WebGLProgram?]) get useProgram =>
      ([_i3.WebGLProgram? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'useProgram',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set validateProgram(void Function(_i3.WebGLProgram) value) {
    _i4.setProperty(
      this,
      'validateProgram',
      _i4.allowInterop(value),
    );
  }

  void Function(_i3.WebGLProgram) get validateProgram =>
      (_i3.WebGLProgram p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'validateProgram',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set vertexAttrib1f(
      void Function(
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'vertexAttrib1f',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
  ) get vertexAttrib1f => (
        _i2.num p0,
        _i2.num p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'vertexAttrib1f',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set vertexAttrib2f(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'vertexAttrib2f',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
  ) get vertexAttrib2f => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'vertexAttrib2f',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
            ],
          );
  set vertexAttrib3f(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'vertexAttrib3f',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
  ) get vertexAttrib3f => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'vertexAttrib3f',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
            ],
          );
  set vertexAttrib4f(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'vertexAttrib4f',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
  ) get vertexAttrib4f => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
        _i2.num p4,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'vertexAttrib4f',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
              p4,
            ],
          );
  set vertexAttribPointer(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.bool,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'vertexAttribPointer',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.bool,
    _i2.num,
    _i2.num,
  ) get vertexAttribPointer => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.bool p3,
        _i2.num p4,
        _i2.num p5,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'vertexAttribPointer',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
              p4,
              p5,
            ],
          );
  set viewport(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
      ) value) {
    _i4.setProperty(
      this,
      'viewport',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
  ) get viewport => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'viewport',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
            ],
          );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
  _i3.ANGLEInstancedArrays? _getExtension$1(_i2.String extensionName) =>
      _i4.callMethod(
        this,
        'getExtension',
        [extensionName],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
  _i3.EXTBlendMinmax? _getExtension$2(_i2.String extensionName) =>
      _i4.callMethod(
        this,
        'getExtension',
        [extensionName],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
  _i3.EXTColorBufferFloat? _getExtension$3(_i2.String extensionName) =>
      _i4.callMethod(
        this,
        'getExtension',
        [extensionName],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
  _i3.EXTColorBufferHalfFloat? _getExtension$4(_i2.String extensionName) =>
      _i4.callMethod(
        this,
        'getExtension',
        [extensionName],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
  _i3.EXTFloatBlend? _getExtension$5(_i2.String extensionName) =>
      _i4.callMethod(
        this,
        'getExtension',
        [extensionName],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
  _i3.EXTFragDepth? _getExtension$6(_i2.String extensionName) => _i4.callMethod(
        this,
        'getExtension',
        [extensionName],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
  _i3.EXTSRGB? _getExtension$7(_i2.String extensionName) => _i4.callMethod(
        this,
        'getExtension',
        [extensionName],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
  _i3.EXTShaderTextureLod? _getExtension$8(_i2.String extensionName) =>
      _i4.callMethod(
        this,
        'getExtension',
        [extensionName],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
  _i3.EXTTextureCompressionBptc? _getExtension$9(_i2.String extensionName) =>
      _i4.callMethod(
        this,
        'getExtension',
        [extensionName],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
  _i3.EXTTextureCompressionRgtc? _getExtension$10(_i2.String extensionName) =>
      _i4.callMethod(
        this,
        'getExtension',
        [extensionName],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
  _i3.EXTTextureFilterAnisotropic? _getExtension$11(_i2.String extensionName) =>
      _i4.callMethod(
        this,
        'getExtension',
        [extensionName],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
  _i3.KHRParallelShaderCompile? _getExtension$12(_i2.String extensionName) =>
      _i4.callMethod(
        this,
        'getExtension',
        [extensionName],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
  _i3.OESElementIndexUint? _getExtension$13(_i2.String extensionName) =>
      _i4.callMethod(
        this,
        'getExtension',
        [extensionName],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
  _i3.OESFboRenderMipmap? _getExtension$14(_i2.String extensionName) =>
      _i4.callMethod(
        this,
        'getExtension',
        [extensionName],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
  _i3.OESStandardDerivatives? _getExtension$15(_i2.String extensionName) =>
      _i4.callMethod(
        this,
        'getExtension',
        [extensionName],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
  _i3.OESTextureFloat? _getExtension$16(_i2.String extensionName) =>
      _i4.callMethod(
        this,
        'getExtension',
        [extensionName],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
  _i3.OESTextureFloatLinear? _getExtension$17(_i2.String extensionName) =>
      _i4.callMethod(
        this,
        'getExtension',
        [extensionName],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
  _i3.OESTextureHalfFloat? _getExtension$18(_i2.String extensionName) =>
      _i4.callMethod(
        this,
        'getExtension',
        [extensionName],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
  _i3.OESTextureHalfFloatLinear? _getExtension$19(_i2.String extensionName) =>
      _i4.callMethod(
        this,
        'getExtension',
        [extensionName],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
  _i3.OESVertexArrayObject? _getExtension$20(_i2.String extensionName) =>
      _i4.callMethod(
        this,
        'getExtension',
        [extensionName],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
  _i3.OVRMultiview2? _getExtension$21(_i2.String extensionName) =>
      _i4.callMethod(
        this,
        'getExtension',
        [extensionName],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
  _i3.WEBGLColorBufferFloat? _getExtension$22(_i2.String extensionName) =>
      _i4.callMethod(
        this,
        'getExtension',
        [extensionName],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
  _i3.WEBGLCompressedTextureAstc? _getExtension$23(_i2.String extensionName) =>
      _i4.callMethod(
        this,
        'getExtension',
        [extensionName],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
  _i3.WEBGLCompressedTextureEtc? _getExtension$24(_i2.String extensionName) =>
      _i4.callMethod(
        this,
        'getExtension',
        [extensionName],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
  _i3.WEBGLCompressedTextureEtc1? _getExtension$25(_i2.String extensionName) =>
      _i4.callMethod(
        this,
        'getExtension',
        [extensionName],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
  _i3.WEBGLCompressedTexturePvrtc? _getExtension$26(_i2.String extensionName) =>
      _i4.callMethod(
        this,
        'getExtension',
        [extensionName],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
  _i3.WEBGLCompressedTextureS3tc? _getExtension$27(_i2.String extensionName) =>
      _i4.callMethod(
        this,
        'getExtension',
        [extensionName],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
  _i3.WEBGLCompressedTextureS3tcSrgb? _getExtension$28(
          _i2.String extensionName) =>
      _i4.callMethod(
        this,
        'getExtension',
        [extensionName],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
  _i3.WEBGLDebugRendererInfo? _getExtension$29(_i2.String extensionName) =>
      _i4.callMethod(
        this,
        'getExtension',
        [extensionName],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
  _i3.WEBGLDebugShaders? _getExtension$30(_i2.String extensionName) =>
      _i4.callMethod(
        this,
        'getExtension',
        [extensionName],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
  _i3.WEBGLDepthTexture? _getExtension$31(_i2.String extensionName) =>
      _i4.callMethod(
        this,
        'getExtension',
        [extensionName],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
  _i3.WEBGLDrawBuffers? _getExtension$32(_i2.String extensionName) =>
      _i4.callMethod(
        this,
        'getExtension',
        [extensionName],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
  _i3.WEBGLLoseContext? _getExtension$33(_i2.String extensionName) =>
      _i4.callMethod(
        this,
        'getExtension',
        [extensionName],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
  _i3.WEBGLMultiDraw? _getExtension$34(_i2.String extensionName) =>
      _i4.callMethod(
        this,
        'getExtension',
        [extensionName],
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
  _i2.dynamic _getExtension$35(_i2.String name) => _i4.callMethod(
        this,
        'getExtension',
        [name],
      );

  /// Overload accessor: $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
    _i3.ANGLEInstancedArrays? Function(_i2.String extensionName) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
    _i3.EXTBlendMinmax? Function(_i2.String extensionName) $2,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
    _i3.EXTColorBufferFloat? Function(_i2.String extensionName) $3,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
    _i3.EXTColorBufferHalfFloat? Function(_i2.String extensionName) $4,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
    _i3.EXTFloatBlend? Function(_i2.String extensionName) $5,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
    _i3.EXTFragDepth? Function(_i2.String extensionName) $6,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
    _i3.EXTSRGB? Function(_i2.String extensionName) $7,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
    _i3.EXTShaderTextureLod? Function(_i2.String extensionName) $8,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
    _i3.EXTTextureCompressionBptc? Function(_i2.String extensionName) $9,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
    _i3.EXTTextureCompressionRgtc? Function(_i2.String extensionName) $10,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
    _i3.EXTTextureFilterAnisotropic? Function(_i2.String extensionName) $11,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
    _i3.KHRParallelShaderCompile? Function(_i2.String extensionName) $12,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
    _i3.OESElementIndexUint? Function(_i2.String extensionName) $13,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
    _i3.OESFboRenderMipmap? Function(_i2.String extensionName) $14,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
    _i3.OESStandardDerivatives? Function(_i2.String extensionName) $15,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
    _i3.OESTextureFloat? Function(_i2.String extensionName) $16,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
    _i3.OESTextureFloatLinear? Function(_i2.String extensionName) $17,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
    _i3.OESTextureHalfFloat? Function(_i2.String extensionName) $18,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
    _i3.OESTextureHalfFloatLinear? Function(_i2.String extensionName) $19,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
    _i3.OESVertexArrayObject? Function(_i2.String extensionName) $20,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
    _i3.OVRMultiview2? Function(_i2.String extensionName) $21,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
    _i3.WEBGLColorBufferFloat? Function(_i2.String extensionName) $22,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
    _i3.WEBGLCompressedTextureAstc? Function(_i2.String extensionName) $23,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
    _i3.WEBGLCompressedTextureEtc? Function(_i2.String extensionName) $24,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
    _i3.WEBGLCompressedTextureEtc1? Function(_i2.String extensionName) $25,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
    _i3.WEBGLCompressedTexturePvrtc? Function(_i2.String extensionName) $26,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
    _i3.WEBGLCompressedTextureS3tc? Function(_i2.String extensionName) $27,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
    _i3.WEBGLCompressedTextureS3tcSrgb? Function(_i2.String extensionName) $28,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
    _i3.WEBGLDebugRendererInfo? Function(_i2.String extensionName) $29,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
    _i3.WEBGLDebugShaders? Function(_i2.String extensionName) $30,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
    _i3.WEBGLDepthTexture? Function(_i2.String extensionName) $31,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
    _i3.WEBGLDrawBuffers? Function(_i2.String extensionName) $32,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
    _i3.WEBGLLoseContext? Function(_i2.String extensionName) $33,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
    _i3.WEBGLMultiDraw? Function(_i2.String extensionName) $34,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
    _i2.dynamic Function(_i2.String name) $35,
  }) get getExtension => (
        $1: _getExtension$1,
        $2: _getExtension$2,
        $3: _getExtension$3,
        $4: _getExtension$4,
        $5: _getExtension$5,
        $6: _getExtension$6,
        $7: _getExtension$7,
        $8: _getExtension$8,
        $9: _getExtension$9,
        $10: _getExtension$10,
        $11: _getExtension$11,
        $12: _getExtension$12,
        $13: _getExtension$13,
        $14: _getExtension$14,
        $15: _getExtension$15,
        $16: _getExtension$16,
        $17: _getExtension$17,
        $18: _getExtension$18,
        $19: _getExtension$19,
        $20: _getExtension$20,
        $21: _getExtension$21,
        $22: _getExtension$22,
        $23: _getExtension$23,
        $24: _getExtension$24,
        $25: _getExtension$25,
        $26: _getExtension$26,
        $27: _getExtension$27,
        $28: _getExtension$28,
        $29: _getExtension$29,
        $30: _getExtension$30,
        $31: _getExtension$31,
        $32: _getExtension$32,
        $33: _getExtension$33,
        $34: _getExtension$34,
        $35: _getExtension$35,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib)
  void _vertexAttrib1fv$1(
    _i2.num index,
    _i2.Object values,
  ) {
    _i4.callMethod(
      this,
      'vertexAttrib1fv',
      [
        index,
        values,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib)
  void _vertexAttrib1fv$2(
    _i2.num index,
    _i10.Iterable<_i2.num> values,
  ) {
    _i4.callMethod(
      this,
      'vertexAttrib1fv',
      [
        index,
        values,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib)
    void Function(
      _i2.num index,
      _i2.Object values,
    ) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib)
    void Function(
      _i2.num index,
      _i10.Iterable<_i2.num> values,
    ) $2,
  }) get vertexAttrib1fv => (
        $1: _vertexAttrib1fv$1,
        $2: _vertexAttrib1fv$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib)
  void _vertexAttrib2fv$1(
    _i2.num index,
    _i2.Object values,
  ) {
    _i4.callMethod(
      this,
      'vertexAttrib2fv',
      [
        index,
        values,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib)
  void _vertexAttrib2fv$2(
    _i2.num index,
    _i10.Iterable<_i2.num> values,
  ) {
    _i4.callMethod(
      this,
      'vertexAttrib2fv',
      [
        index,
        values,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib)
    void Function(
      _i2.num index,
      _i2.Object values,
    ) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib)
    void Function(
      _i2.num index,
      _i10.Iterable<_i2.num> values,
    ) $2,
  }) get vertexAttrib2fv => (
        $1: _vertexAttrib2fv$1,
        $2: _vertexAttrib2fv$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib)
  void _vertexAttrib3fv$1(
    _i2.num index,
    _i2.Object values,
  ) {
    _i4.callMethod(
      this,
      'vertexAttrib3fv',
      [
        index,
        values,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib)
  void _vertexAttrib3fv$2(
    _i2.num index,
    _i10.Iterable<_i2.num> values,
  ) {
    _i4.callMethod(
      this,
      'vertexAttrib3fv',
      [
        index,
        values,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib)
    void Function(
      _i2.num index,
      _i2.Object values,
    ) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib)
    void Function(
      _i2.num index,
      _i10.Iterable<_i2.num> values,
    ) $2,
  }) get vertexAttrib3fv => (
        $1: _vertexAttrib3fv$1,
        $2: _vertexAttrib3fv$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib)
  void _vertexAttrib4fv$1(
    _i2.num index,
    _i2.Object values,
  ) {
    _i4.callMethod(
      this,
      'vertexAttrib4fv',
      [
        index,
        values,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib)
  void _vertexAttrib4fv$2(
    _i2.num index,
    _i10.Iterable<_i2.num> values,
  ) {
    _i4.callMethod(
      this,
      'vertexAttrib4fv',
      [
        index,
        values,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib)
    void Function(
      _i2.num index,
      _i2.Object values,
    ) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib)
    void Function(
      _i2.num index,
      _i10.Iterable<_i2.num> values,
    ) $2,
  }) get vertexAttrib4fv => (
        $1: _vertexAttrib4fv$1,
        $2: _vertexAttrib4fv$2,
      );
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class WebGLRenderingContextOverloads {
  external factory WebGLRenderingContextOverloads._({
    _i2.dynamic bufferSubData,
    _i2.dynamic compressedTexImage2D,
    _i2.dynamic compressedTexSubImage2D,
    _i2.dynamic readPixels,
  });

  factory WebGLRenderingContextOverloads({
    void Function(
      _i2.num,
      _i2.num,
      _i2.Object,
    )? bufferSubData,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i9.ArrayBufferView,
    )? compressedTexImage2D,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i9.ArrayBufferView,
    )? compressedTexSubImage2D,
    void Function(
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num,
      _i2.num, [
      _i9.ArrayBufferView?,
    ])? readPixels,
  }) =>
      WebGLRenderingContextOverloads._(
        bufferSubData:
            bufferSubData == null ? null : _i4.allowInterop(bufferSubData),
        compressedTexImage2D: compressedTexImage2D == null
            ? null
            : _i4.allowInterop(compressedTexImage2D),
        compressedTexSubImage2D: compressedTexSubImage2D == null
            ? null
            : _i4.allowInterop(compressedTexSubImage2D),
        readPixels: readPixels == null ? null : _i4.allowInterop(readPixels),
      );
}

extension WebGLRenderingContextOverloads$Typings
    on WebGLRenderingContextOverloads {
  set bufferSubData(
      void Function(
        _i2.num,
        _i2.num,
        _i2.Object,
      ) value) {
    _i4.setProperty(
      this,
      'bufferSubData',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.Object,
  ) get bufferSubData => (
        _i2.num p0,
        _i2.num p1,
        _i2.Object p2,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'bufferSubData',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
            ],
          );
  set compressedTexImage2D(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i9.ArrayBufferView,
      ) value) {
    _i4.setProperty(
      this,
      'compressedTexImage2D',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i9.ArrayBufferView,
  ) get compressedTexImage2D => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
        _i2.num p4,
        _i2.num p5,
        _i9.ArrayBufferView p6,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'compressedTexImage2D',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
              p4,
              p5,
              p6,
            ],
          );
  set compressedTexSubImage2D(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i9.ArrayBufferView,
      ) value) {
    _i4.setProperty(
      this,
      'compressedTexSubImage2D',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i9.ArrayBufferView,
  ) get compressedTexSubImage2D => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
        _i2.num p4,
        _i2.num p5,
        _i2.num p6,
        _i9.ArrayBufferView p7,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'compressedTexSubImage2D',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
              p4,
              p5,
              p6,
              p7,
            ],
          );
  set readPixels(
      void Function(
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num,
        _i2.num, [
        _i9.ArrayBufferView?,
      ]) value) {
    _i4.setProperty(
      this,
      'readPixels',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num,
    _i2.num, [
    _i9.ArrayBufferView?,
  ]) get readPixels => (
        _i2.num p0,
        _i2.num p1,
        _i2.num p2,
        _i2.num p3,
        _i2.num p4,
        _i2.num p5, [
        _i9.ArrayBufferView? p6,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'readPixels',
            ),
            r'call',
            [
              this,
              p0,
              p1,
              p2,
              p3,
              p4,
              p5,
              p6 ?? _i6.undefined,
            ],
          );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bufferData)
  void _bufferData$1(
    _i2.num target,
    _i2.num size,
    _i2.num usage,
  ) {
    _i4.callMethod(
      this,
      'bufferData',
      [
        target,
        size,
        usage,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bufferData)
  void _bufferData$2(
    _i2.num target,
    _i2.num usage, [
    _i2.Object? data,
  ]) {
    _i4.callMethod(
      this,
      'bufferData',
      [
        target,
        data ?? _i6.undefined ?? _i6.undefined,
        usage,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bufferData)
    void Function(
      _i2.num target,
      _i2.num size,
      _i2.num usage,
    ) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bufferData)
    void Function(
      _i2.num target,
      _i2.num usage, [
      _i2.Object? data,
    ]) $2,
  }) get bufferData => (
        $1: _bufferData$1,
        $2: _bufferData$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texImage2D)
  void _texImage2D$1(
    _i2.num target,
    _i2.num level,
    _i2.num internalformat,
    _i2.num format,
    _i2.num type,
    _i2.Object source,
  ) {
    _i4.callMethod(
      this,
      'texImage2D',
      [
        target,
        level,
        internalformat,
        format,
        type,
        source,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texImage2D)
  void _texImage2D$2(
    _i2.num target,
    _i2.num level,
    _i2.num internalformat,
    _i2.num width,
    _i2.num height,
    _i2.num border,
    _i2.num format,
    _i2.num type, [
    _i9.ArrayBufferView? pixels,
  ]) {
    _i4.callMethod(
      this,
      'texImage2D',
      [
        target,
        level,
        internalformat,
        width,
        height,
        border,
        format,
        type,
        pixels ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texImage2D)
    void Function(
      _i2.num target,
      _i2.num level,
      _i2.num internalformat,
      _i2.num format,
      _i2.num type,
      _i2.Object source,
    ) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texImage2D)
    void Function(
      _i2.num target,
      _i2.num level,
      _i2.num internalformat,
      _i2.num width,
      _i2.num height,
      _i2.num border,
      _i2.num format,
      _i2.num type, [
      _i9.ArrayBufferView? pixels,
    ]) $2,
  }) get texImage2D => (
        $1: _texImage2D$1,
        $2: _texImage2D$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texSubImage2D)
  void _texSubImage2D$1(
    _i2.num target,
    _i2.num level,
    _i2.num xoffset,
    _i2.num yoffset,
    _i2.num format,
    _i2.num type,
    _i2.Object source,
  ) {
    _i4.callMethod(
      this,
      'texSubImage2D',
      [
        target,
        level,
        xoffset,
        yoffset,
        format,
        type,
        source,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texSubImage2D)
  void _texSubImage2D$2(
    _i2.num target,
    _i2.num level,
    _i2.num xoffset,
    _i2.num yoffset,
    _i2.num width,
    _i2.num height,
    _i2.num format,
    _i2.num type, [
    _i9.ArrayBufferView? pixels,
  ]) {
    _i4.callMethod(
      this,
      'texSubImage2D',
      [
        target,
        level,
        xoffset,
        yoffset,
        width,
        height,
        format,
        type,
        pixels ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texSubImage2D)
    void Function(
      _i2.num target,
      _i2.num level,
      _i2.num xoffset,
      _i2.num yoffset,
      _i2.num format,
      _i2.num type,
      _i2.Object source,
    ) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texSubImage2D)
    void Function(
      _i2.num target,
      _i2.num level,
      _i2.num xoffset,
      _i2.num yoffset,
      _i2.num width,
      _i2.num height,
      _i2.num format,
      _i2.num type, [
      _i9.ArrayBufferView? pixels,
    ]) $2,
  }) get texSubImage2D => (
        $1: _texSubImage2D$1,
        $2: _texSubImage2D$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
  void _uniform1fv$1(
    _i2.Object v, [
    _i3.WebGLUniformLocation? location,
  ]) {
    _i4.callMethod(
      this,
      'uniform1fv',
      [
        location ?? _i6.undefined,
        v,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
  void _uniform1fv$2(
    _i10.Iterable<_i2.num> v, [
    _i3.WebGLUniformLocation? location,
  ]) {
    _i4.callMethod(
      this,
      'uniform1fv',
      [
        location ?? _i6.undefined,
        v,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    void Function(
      _i2.Object v, [
      _i3.WebGLUniformLocation? location,
    ]) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    void Function(
      _i10.Iterable<_i2.num> v, [
      _i3.WebGLUniformLocation? location,
    ]) $2,
  }) get uniform1fv => (
        $1: _uniform1fv$1,
        $2: _uniform1fv$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
  void _uniform1iv$1(
    _i2.Object v, [
    _i3.WebGLUniformLocation? location,
  ]) {
    _i4.callMethod(
      this,
      'uniform1iv',
      [
        location ?? _i6.undefined,
        v,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
  void _uniform1iv$2(
    _i10.Iterable<_i2.num> v, [
    _i3.WebGLUniformLocation? location,
  ]) {
    _i4.callMethod(
      this,
      'uniform1iv',
      [
        location ?? _i6.undefined,
        v,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    void Function(
      _i2.Object v, [
      _i3.WebGLUniformLocation? location,
    ]) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    void Function(
      _i10.Iterable<_i2.num> v, [
      _i3.WebGLUniformLocation? location,
    ]) $2,
  }) get uniform1iv => (
        $1: _uniform1iv$1,
        $2: _uniform1iv$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
  void _uniform2fv$1(
    _i2.Object v, [
    _i3.WebGLUniformLocation? location,
  ]) {
    _i4.callMethod(
      this,
      'uniform2fv',
      [
        location ?? _i6.undefined,
        v,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
  void _uniform2fv$2(
    _i10.Iterable<_i2.num> v, [
    _i3.WebGLUniformLocation? location,
  ]) {
    _i4.callMethod(
      this,
      'uniform2fv',
      [
        location ?? _i6.undefined,
        v,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    void Function(
      _i2.Object v, [
      _i3.WebGLUniformLocation? location,
    ]) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    void Function(
      _i10.Iterable<_i2.num> v, [
      _i3.WebGLUniformLocation? location,
    ]) $2,
  }) get uniform2fv => (
        $1: _uniform2fv$1,
        $2: _uniform2fv$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
  void _uniform2iv$1(
    _i2.Object v, [
    _i3.WebGLUniformLocation? location,
  ]) {
    _i4.callMethod(
      this,
      'uniform2iv',
      [
        location ?? _i6.undefined,
        v,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
  void _uniform2iv$2(
    _i10.Iterable<_i2.num> v, [
    _i3.WebGLUniformLocation? location,
  ]) {
    _i4.callMethod(
      this,
      'uniform2iv',
      [
        location ?? _i6.undefined,
        v,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    void Function(
      _i2.Object v, [
      _i3.WebGLUniformLocation? location,
    ]) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    void Function(
      _i10.Iterable<_i2.num> v, [
      _i3.WebGLUniformLocation? location,
    ]) $2,
  }) get uniform2iv => (
        $1: _uniform2iv$1,
        $2: _uniform2iv$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
  void _uniform3fv$1(
    _i2.Object v, [
    _i3.WebGLUniformLocation? location,
  ]) {
    _i4.callMethod(
      this,
      'uniform3fv',
      [
        location ?? _i6.undefined,
        v,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
  void _uniform3fv$2(
    _i10.Iterable<_i2.num> v, [
    _i3.WebGLUniformLocation? location,
  ]) {
    _i4.callMethod(
      this,
      'uniform3fv',
      [
        location ?? _i6.undefined,
        v,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    void Function(
      _i2.Object v, [
      _i3.WebGLUniformLocation? location,
    ]) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    void Function(
      _i10.Iterable<_i2.num> v, [
      _i3.WebGLUniformLocation? location,
    ]) $2,
  }) get uniform3fv => (
        $1: _uniform3fv$1,
        $2: _uniform3fv$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
  void _uniform3iv$1(
    _i2.Object v, [
    _i3.WebGLUniformLocation? location,
  ]) {
    _i4.callMethod(
      this,
      'uniform3iv',
      [
        location ?? _i6.undefined,
        v,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
  void _uniform3iv$2(
    _i10.Iterable<_i2.num> v, [
    _i3.WebGLUniformLocation? location,
  ]) {
    _i4.callMethod(
      this,
      'uniform3iv',
      [
        location ?? _i6.undefined,
        v,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    void Function(
      _i2.Object v, [
      _i3.WebGLUniformLocation? location,
    ]) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    void Function(
      _i10.Iterable<_i2.num> v, [
      _i3.WebGLUniformLocation? location,
    ]) $2,
  }) get uniform3iv => (
        $1: _uniform3iv$1,
        $2: _uniform3iv$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
  void _uniform4fv$1(
    _i2.Object v, [
    _i3.WebGLUniformLocation? location,
  ]) {
    _i4.callMethod(
      this,
      'uniform4fv',
      [
        location ?? _i6.undefined,
        v,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
  void _uniform4fv$2(
    _i10.Iterable<_i2.num> v, [
    _i3.WebGLUniformLocation? location,
  ]) {
    _i4.callMethod(
      this,
      'uniform4fv',
      [
        location ?? _i6.undefined,
        v,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    void Function(
      _i2.Object v, [
      _i3.WebGLUniformLocation? location,
    ]) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    void Function(
      _i10.Iterable<_i2.num> v, [
      _i3.WebGLUniformLocation? location,
    ]) $2,
  }) get uniform4fv => (
        $1: _uniform4fv$1,
        $2: _uniform4fv$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
  void _uniform4iv$1(
    _i2.Object v, [
    _i3.WebGLUniformLocation? location,
  ]) {
    _i4.callMethod(
      this,
      'uniform4iv',
      [
        location ?? _i6.undefined,
        v,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
  void _uniform4iv$2(
    _i10.Iterable<_i2.num> v, [
    _i3.WebGLUniformLocation? location,
  ]) {
    _i4.callMethod(
      this,
      'uniform4iv',
      [
        location ?? _i6.undefined,
        v,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    void Function(
      _i2.Object v, [
      _i3.WebGLUniformLocation? location,
    ]) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
    void Function(
      _i10.Iterable<_i2.num> v, [
      _i3.WebGLUniformLocation? location,
    ]) $2,
  }) get uniform4iv => (
        $1: _uniform4iv$1,
        $2: _uniform4iv$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix)
  void _uniformMatrix2fv$1(
    _i2.bool transpose,
    _i2.Object value, [
    _i3.WebGLUniformLocation? location,
  ]) {
    _i4.callMethod(
      this,
      'uniformMatrix2fv',
      [
        location ?? _i6.undefined,
        transpose,
        value,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix)
  void _uniformMatrix2fv$2(
    _i2.bool transpose,
    _i10.Iterable<_i2.num> value, [
    _i3.WebGLUniformLocation? location,
  ]) {
    _i4.callMethod(
      this,
      'uniformMatrix2fv',
      [
        location ?? _i6.undefined,
        transpose,
        value,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix)
    void Function(
      _i2.bool transpose,
      _i2.Object value, [
      _i3.WebGLUniformLocation? location,
    ]) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix)
    void Function(
      _i2.bool transpose,
      _i10.Iterable<_i2.num> value, [
      _i3.WebGLUniformLocation? location,
    ]) $2,
  }) get uniformMatrix2fv => (
        $1: _uniformMatrix2fv$1,
        $2: _uniformMatrix2fv$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix)
  void _uniformMatrix3fv$1(
    _i2.bool transpose,
    _i2.Object value, [
    _i3.WebGLUniformLocation? location,
  ]) {
    _i4.callMethod(
      this,
      'uniformMatrix3fv',
      [
        location ?? _i6.undefined,
        transpose,
        value,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix)
  void _uniformMatrix3fv$2(
    _i2.bool transpose,
    _i10.Iterable<_i2.num> value, [
    _i3.WebGLUniformLocation? location,
  ]) {
    _i4.callMethod(
      this,
      'uniformMatrix3fv',
      [
        location ?? _i6.undefined,
        transpose,
        value,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix)
    void Function(
      _i2.bool transpose,
      _i2.Object value, [
      _i3.WebGLUniformLocation? location,
    ]) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix)
    void Function(
      _i2.bool transpose,
      _i10.Iterable<_i2.num> value, [
      _i3.WebGLUniformLocation? location,
    ]) $2,
  }) get uniformMatrix3fv => (
        $1: _uniformMatrix3fv$1,
        $2: _uniformMatrix3fv$2,
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix)
  void _uniformMatrix4fv$1(
    _i2.bool transpose,
    _i2.Object value, [
    _i3.WebGLUniformLocation? location,
  ]) {
    _i4.callMethod(
      this,
      'uniformMatrix4fv',
      [
        location ?? _i6.undefined,
        transpose,
        value,
      ],
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix)
  void _uniformMatrix4fv$2(
    _i2.bool transpose,
    _i10.Iterable<_i2.num> value, [
    _i3.WebGLUniformLocation? location,
  ]) {
    _i4.callMethod(
      this,
      'uniformMatrix4fv',
      [
        location ?? _i6.undefined,
        transpose,
        value,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix)
    void Function(
      _i2.bool transpose,
      _i2.Object value, [
      _i3.WebGLUniformLocation? location,
    ]) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix)
    void Function(
      _i2.bool transpose,
      _i10.Iterable<_i2.num> value, [
      _i3.WebGLUniformLocation? location,
    ]) $2,
  }) get uniformMatrix4fv => (
        $1: _uniformMatrix4fv$1,
        $2: _uniformMatrix4fv$2,
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLSampler)
@_i1.JS()
@_i1.staticInterop
class WebGLSampler {
  factory WebGLSampler() => _i4.callConstructor(
        _declaredWebGLSampler,
        [],
      );
}

_i2.Object get _declaredWebGLSampler => _i4.getProperty(
      _self,
      'WebGLSampler',
    ); /* Source:  */

/// The WebGLShader is part of the WebGL API and can either be a vertex or a fragment shader. A WebGLProgram requires both types of shaders.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLShader)
@_i1.JS()
@_i1.staticInterop
class WebGLShader {
  factory WebGLShader() => _i4.callConstructor(
        _declaredWebGLShader,
        [],
      );
}

_i2.Object get _declaredWebGLShader => _i4.getProperty(
      _self,
      'WebGLShader',
    ); /* Source:  */

/// Part of the WebGL API and represents the information returned by calling the WebGLRenderingContext.getShaderPrecisionFormat() method.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLShaderPrecisionFormat)
@_i1.JS()
@_i1.staticInterop
class WebGLShaderPrecisionFormat {
  factory WebGLShaderPrecisionFormat() => _i4.callConstructor(
        _declaredWebGLShaderPrecisionFormat,
        [],
      );
}

_i2.Object get _declaredWebGLShaderPrecisionFormat => _i4.getProperty(
      _self,
      'WebGLShaderPrecisionFormat',
    );

extension WebGLShaderPrecisionFormat$Typings on WebGLShaderPrecisionFormat {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLShaderPrecisionFormat/precision)
  _i2.num get precision => _i4.getProperty(
        this,
        'precision',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLShaderPrecisionFormat/rangeMax)
  _i2.num get rangeMax => _i4.getProperty(
        this,
        'rangeMax',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLShaderPrecisionFormat/rangeMin)
  _i2.num get rangeMin => _i4.getProperty(
        this,
        'rangeMin',
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLSync)
@_i1.JS()
@_i1.staticInterop
class WebGLSync {
  factory WebGLSync() => _i4.callConstructor(
        _declaredWebGLSync,
        [],
      );
}

_i2.Object get _declaredWebGLSync => _i4.getProperty(
      _self,
      'WebGLSync',
    ); /* Source:  */

/// Part of the WebGL API and represents an opaque texture object providing storage and state for texturing operations.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLTexture)
@_i1.JS()
@_i1.staticInterop
class WebGLTexture {
  factory WebGLTexture() => _i4.callConstructor(
        _declaredWebGLTexture,
        [],
      );
}

_i2.Object get _declaredWebGLTexture => _i4.getProperty(
      _self,
      'WebGLTexture',
    ); /* Source:  */

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLTransformFeedback)
@_i1.JS()
@_i1.staticInterop
class WebGLTransformFeedback {
  factory WebGLTransformFeedback() => _i4.callConstructor(
        _declaredWebGLTransformFeedback,
        [],
      );
}

_i2.Object get _declaredWebGLTransformFeedback => _i4.getProperty(
      _self,
      'WebGLTransformFeedback',
    ); /* Source:  */

/// Part of the WebGL API and represents the location of a uniform variable in a shader program.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLUniformLocation)
@_i1.JS()
@_i1.staticInterop
class WebGLUniformLocation {
  factory WebGLUniformLocation() => _i4.callConstructor(
        _declaredWebGLUniformLocation,
        [],
      );
}

_i2.Object get _declaredWebGLUniformLocation => _i4.getProperty(
      _self,
      'WebGLUniformLocation',
    ); /* Source:  */

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLVertexArrayObject)
@_i1.JS()
@_i1.staticInterop
class WebGLVertexArrayObject {
  factory WebGLVertexArrayObject() => _i4.callConstructor(
        _declaredWebGLVertexArrayObject,
        [],
      );
}

_i2.Object get _declaredWebGLVertexArrayObject => _i4.getProperty(
      _self,
      'WebGLVertexArrayObject',
    ); /* Source:  */

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLVertexArrayObjectOES)
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class WebGLVertexArrayObjectOES {
  external factory WebGLVertexArrayObjectOES._();

  factory WebGLVertexArrayObjectOES() => WebGLVertexArrayObjectOES._();
}

enum WebSocketEventMap<T$> {
  close<_i3.CloseEvent>(r'close'),
  error<_i3.Event>(r'error'),
  message<_i3.MessageEvent<_i2.dynamic>>(r'message'),
  open<_i3.Event>(r'open');

  const WebSocketEventMap(this.value);

  final _i2.String value;
}

/* Source:  */
/// Provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket)
@_i1.JS()
@_i1.staticInterop
class WebSocket implements _i3.EventTarget {
  factory WebSocket(
    _i2.Object url, [
    _i2.Object? protocols,
  ]) =>
      _i4.callConstructor(
        _declaredWebSocket,
        [
          url,
          protocols ?? _i6.undefined,
        ],
      );

  static _i2.num get connecting => _i4.getProperty(
        _declaredWebSocket,
        'CONNECTING',
      );
  static _i2.num get open => _i4.getProperty(
        _declaredWebSocket,
        'OPEN',
      );
  static _i2.num get closing => _i4.getProperty(
        _declaredWebSocket,
        'CLOSING',
      );
  static _i2.num get closed => _i4.getProperty(
        _declaredWebSocket,
        'CLOSED',
      );
}

_i2.Object get _declaredWebSocket => _i4.getProperty(
      _self,
      'WebSocket',
    );

extension WebSocket$Typings on WebSocket {
  /// Returns a string that indicates how binary data from the WebSocket object is exposed to scripts:
  ///
  ///  Can be set, to change how binary data is returned. The default is "blob".
  ///
  ///  [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/binaryType)
  _i3.BinaryType get binaryType =>
      _i3.BinaryTypeOptions.values.byName(_i4.getProperty(
        this,
        'binaryType',
      ));
  set binaryType(_i3.BinaryType value) {
    _i4.setProperty(
      this,
      'binaryType',
      value.name,
    );
  }

  /// Returns the number of bytes of application data (UTF-8 text and binary data) that have been queued using send() but not yet been transmitted to the network.
  ///
  /// If the WebSocket connection is closed, this attribute's value will only increase with each call to the send() method. (The number does not reset to zero once the connection closes.)
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/bufferedAmount)
  _i2.num get bufferedAmount => _i4.getProperty(
        this,
        'bufferedAmount',
      );

  /// Returns the extensions selected by the server, if any.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/extensions)
  _i2.String get extensions => _i4.getProperty(
        this,
        'extensions',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/close_event)
  _i2.dynamic Function(_i3.CloseEvent)? get onclose =>
      (_i3.CloseEvent p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onclose',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onclose(_i2.dynamic Function(_i3.CloseEvent)? value) {
    _i4.setProperty(
      this,
      'onclose',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/error_event)
  _i2.dynamic Function(_i3.Event)? get onerror =>
      (_i3.Event p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onerror',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onerror(_i2.dynamic Function(_i3.Event)? value) {
    _i4.setProperty(
      this,
      'onerror',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/message_event)
  _i2.dynamic Function(_i3.MessageEvent<_i2.dynamic>)? get onmessage =>
      (_i3.MessageEvent<_i2.dynamic> p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onmessage',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onmessage(_i2.dynamic Function(_i3.MessageEvent<_i2.dynamic>)? value) {
    _i4.setProperty(
      this,
      'onmessage',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/open_event)
  _i2.dynamic Function(_i3.Event)? get onopen =>
      (_i3.Event p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onopen',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onopen(_i2.dynamic Function(_i3.Event)? value) {
    _i4.setProperty(
      this,
      'onopen',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// Returns the subprotocol selected by the server, if any. It can be used in conjunction with the array form of the constructor's second argument to perform subprotocol negotiation.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/protocol)
  _i2.String get protocol => _i4.getProperty(
        this,
        'protocol',
      );

  /// Returns the state of the WebSocket object's connection. It can have the values described below.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/readyState)
  _i2.num get readyState => _i4.getProperty(
        this,
        'readyState',
      );

  /// Returns the URL that was used to establish the WebSocket connection.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/url)
  _i2.String get url => _i4.getProperty(
        this,
        'url',
      );
  _i2.num get connecting => _i4.getProperty(
        this,
        'CONNECTING',
      );
  _i2.num get open => _i4.getProperty(
        this,
        'OPEN',
      );
  _i2.num get closing => _i4.getProperty(
        this,
        'CLOSING',
      );
  _i2.num get closed => _i4.getProperty(
        this,
        'CLOSED',
      );
  set close(
      void Function([
        _i2.num?,
        _i2.String?,
      ]) value) {
    _i4.setProperty(
      this,
      'close',
      _i4.allowInterop(value),
    );
  }

  void Function([
    _i2.num?,
    _i2.String?,
  ]) get close => ([
        _i2.num? p0,
        _i2.String? p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'close',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
              p1 ?? _i6.undefined,
            ],
          );
  set send(void Function(_i2.Object) value) {
    _i4.setProperty(
      this,
      'send',
      _i4.allowInterop(value),
    );
  }

  void Function(_i2.Object) get send => (_i2.Object p0) => _i4.callMethod(
        _i4.getProperty(
          this,
          'send',
        ),
        r'call',
        [
          this,
          p0,
        ],
      );

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$1<K$>(
    _i3.WebSocketEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function<K$>(
      _i3.WebSocketEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get addEventListener => (
        $1: _addEventListener$1,
        $2: _addEventListener$2,
      );

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$1<K$>(
    _i3.WebSocketEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function<K$>(
      _i3.WebSocketEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get removeEventListener => (
        $1: _removeEventListener$1,
        $2: _removeEventListener$2,
      );
}

/* Source:  */
/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransport)
@_i1.JS()
@_i1.staticInterop
class WebTransport {
  factory WebTransport(
    _i2.Object url, [
    _i3.WebTransportOptions? options,
  ]) =>
      _i4.callConstructor(
        _declaredWebTransport,
        [
          url,
          options ?? _i6.undefined,
        ],
      );
}

_i2.Object get _declaredWebTransport => _i4.getProperty(
      _self,
      'WebTransport',
    );

extension WebTransport$Typings on WebTransport {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransport/closed)
  _i2.Future<_i3.WebTransportCloseInfo> get closed =>
      _i4.promiseToFuture(_i4.getProperty(
        this,
        'closed',
      ));

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransport/datagrams)
  _i3.WebTransportDatagramDuplexStream get datagrams => _i4.getProperty(
        this,
        'datagrams',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransport/incomingBidirectionalStreams)
  _i3.ReadableStream<_i2.dynamic> get incomingBidirectionalStreams =>
      _i4.getProperty(
        this,
        'incomingBidirectionalStreams',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransport/incomingUnidirectionalStreams)
  _i3.ReadableStream<_i2.dynamic> get incomingUnidirectionalStreams =>
      _i4.getProperty(
        this,
        'incomingUnidirectionalStreams',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransport/ready)
  _i2.Future<_i2.dynamic> get ready => _i4.promiseToFuture(_i4.getProperty(
        this,
        'ready',
      ));
  set close(void Function([_i3.WebTransportCloseInfo?]) value) {
    _i4.setProperty(
      this,
      'close',
      _i4.allowInterop(value),
    );
  }

  void Function([_i3.WebTransportCloseInfo?]) get close =>
      ([_i3.WebTransportCloseInfo? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'close',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set createBidirectionalStream(
      _i2.Future<_i3.WebTransportBidirectionalStream> Function(
              [_i3.WebTransportSendStreamOptions?])
          value) {
    _i4.setProperty(
      this,
      'createBidirectionalStream',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i3.WebTransportBidirectionalStream> Function(
      [_i3.WebTransportSendStreamOptions?]) get createBidirectionalStream => (
          [_i3.WebTransportSendStreamOptions? p0]) =>
      _i4.promiseToFuture(_i4.callMethod(
        _i4.getProperty(
          this,
          'createBidirectionalStream',
        ),
        r'call',
        [
          this,
          p0 ?? _i6.undefined,
        ],
      ));
  set createUnidirectionalStream(
      _i2.Future<_i3.WritableStream<_i2.dynamic>> Function(
              [_i3.WebTransportSendStreamOptions?])
          value) {
    _i4.setProperty(
      this,
      'createUnidirectionalStream',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i3.WritableStream<_i2.dynamic>> Function(
      [_i3.WebTransportSendStreamOptions?]) get createUnidirectionalStream => (
          [_i3.WebTransportSendStreamOptions? p0]) =>
      _i4.promiseToFuture(_i4.callMethod(
        _i4.getProperty(
          this,
          'createUnidirectionalStream',
        ),
        r'call',
        [
          this,
          p0 ?? _i6.undefined,
        ],
      ));
}

/* Source:  */
/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportBidirectionalStream)
@_i1.JS()
@_i1.staticInterop
class WebTransportBidirectionalStream {
  factory WebTransportBidirectionalStream() => _i4.callConstructor(
        _declaredWebTransportBidirectionalStream,
        [],
      );
}

_i2.Object get _declaredWebTransportBidirectionalStream => _i4.getProperty(
      _self,
      'WebTransportBidirectionalStream',
    );

extension WebTransportBidirectionalStream$Typings
    on WebTransportBidirectionalStream {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportBidirectionalStream/readable)
  _i3.ReadableStream<_i2.dynamic> get readable => _i4.getProperty(
        this,
        'readable',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportBidirectionalStream/writable)
  _i3.WritableStream<_i2.dynamic> get writable => _i4.getProperty(
        this,
        'writable',
      );
}

/* Source:  */
/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream)
@_i1.JS()
@_i1.staticInterop
class WebTransportDatagramDuplexStream {
  factory WebTransportDatagramDuplexStream() => _i4.callConstructor(
        _declaredWebTransportDatagramDuplexStream,
        [],
      );
}

_i2.Object get _declaredWebTransportDatagramDuplexStream => _i4.getProperty(
      _self,
      'WebTransportDatagramDuplexStream',
    );

extension WebTransportDatagramDuplexStream$Typings
    on WebTransportDatagramDuplexStream {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/incomingHighWaterMark)
  _i2.num get incomingHighWaterMark => _i4.getProperty(
        this,
        'incomingHighWaterMark',
      );
  set incomingHighWaterMark(_i2.num value) {
    _i4.setProperty(
      this,
      'incomingHighWaterMark',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/incomingMaxAge)
  _i2.num get incomingMaxAge => _i4.getProperty(
        this,
        'incomingMaxAge',
      );
  set incomingMaxAge(_i2.num value) {
    _i4.setProperty(
      this,
      'incomingMaxAge',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/maxDatagramSize)
  _i2.num get maxDatagramSize => _i4.getProperty(
        this,
        'maxDatagramSize',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/outgoingHighWaterMark)
  _i2.num get outgoingHighWaterMark => _i4.getProperty(
        this,
        'outgoingHighWaterMark',
      );
  set outgoingHighWaterMark(_i2.num value) {
    _i4.setProperty(
      this,
      'outgoingHighWaterMark',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/outgoingMaxAge)
  _i2.num get outgoingMaxAge => _i4.getProperty(
        this,
        'outgoingMaxAge',
      );
  set outgoingMaxAge(_i2.num value) {
    _i4.setProperty(
      this,
      'outgoingMaxAge',
      value,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/readable)
  _i3.ReadableStream<_i2.dynamic> get readable => _i4.getProperty(
        this,
        'readable',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/writable)
  _i3.WritableStream<_i2.dynamic> get writable => _i4.getProperty(
        this,
        'writable',
      );
}

/* Source:  */
/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportError)
@_i1.JS()
@_i1.staticInterop
class WebTransportError implements _i3.DOMException {
  factory WebTransportError([
    _i2.String? message,
    _i3.WebTransportErrorOptions? options,
  ]) =>
      _i4.callConstructor(
        _declaredWebTransportError,
        [
          message ?? _i6.undefined,
          options ?? _i6.undefined,
        ],
      );
}

_i2.Object get _declaredWebTransportError => _i4.getProperty(
      _self,
      'WebTransportError',
    );

extension WebTransportError$Typings on WebTransportError {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportError/source)
  _i3.WebTransportErrorSource get source =>
      _i3.WebTransportErrorSourceOptions.values.byName(_i4.getProperty(
        this,
        'source',
      ));

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportError/streamErrorCode)
  _i2.num? get streamErrorCode => _i4.getProperty(
        this,
        'streamErrorCode',
      );
}

/* Source:  */
/// This ServiceWorker API interface represents the scope of a service worker client that is a document in a browser context, controlled by an active worker. The service worker client independently selects and uses a service worker for its own loading and sub-resources.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WindowClient)
@_i1.JS()
@_i1.staticInterop
class WindowClient implements _i3.Client {
  factory WindowClient() => _i4.callConstructor(
        _declaredWindowClient,
        [],
      );
}

_i2.Object get _declaredWindowClient => _i4.getProperty(
      _self,
      'WindowClient',
    );

extension WindowClient$Typings on WindowClient {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WindowClient/focused)
  _i2.bool get focused => _i4.getProperty(
        this,
        'focused',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WindowClient/visibilityState)
  _i3.DocumentVisibilityState get visibilityState =>
      _i3.DocumentVisibilityStateOptions.values.byName(_i4.getProperty(
        this,
        'visibilityState',
      ));
  set focus(_i2.Future<_i3.WindowClient> Function() value) {
    _i4.setProperty(
      this,
      'focus',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i3.WindowClient> Function() get focus =>
      () => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'focus',
            ),
            r'call',
            [this],
          ));
  set navigate(_i2.Future<_i3.WindowClient?> Function(_i2.Object) value) {
    _i4.setProperty(
      this,
      'navigate',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i3.WindowClient?> Function(_i2.Object) get navigate =>
      (_i2.Object p0) => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'navigate',
            ),
            r'call',
            [
              this,
              p0,
            ],
          ));
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class WindowOrWorkerGlobalScope {
  external factory WindowOrWorkerGlobalScope._({
    _i2.dynamic caches,
    _i2.dynamic crossOriginIsolated,
    _i2.dynamic crypto,
    _i2.dynamic indexedDB,
    _i2.dynamic isSecureContext,
    _i2.dynamic origin,
    _i2.dynamic performance,
    _i2.dynamic atob,
    _i2.dynamic btoa,
    _i2.dynamic clearInterval,
    _i2.dynamic clearTimeout,
    _i2.dynamic fetch,
    _i2.dynamic queueMicrotask,
    _i2.dynamic reportError,
    _i2.dynamic setInterval,
    _i2.dynamic setTimeout,
    _i2.dynamic structuredClone,
  });

  factory WindowOrWorkerGlobalScope({
    _i3.CacheStorage? caches,
    _i2.bool? crossOriginIsolated,
    _i3.Crypto? crypto,
    _i3.IDBFactory? indexedDB,
    _i2.bool? isSecureContext,
    _i2.String? origin,
    _i3.Performance? performance,
    _i2.String Function(_i2.String)? atob,
    _i2.String Function(_i2.String)? btoa,
    void Function([_i2.num?])? clearInterval,
    void Function([_i2.num?])? clearTimeout,
    _i2.Future<_i3.Response> Function(
      _i2.Object, [
      _i3.RequestInit?,
    ])? fetch,
    void Function(_i3.VoidFunction)? queueMicrotask,
    void Function([_i2.dynamic])? reportError,
    _i2.num Function(
      _i2.Object, [
      _i2.num?,
      _i2.Iterable<_i2.dynamic>?,
    ])? setInterval,
    _i2.num Function(
      _i2.Object, [
      _i2.num?,
      _i2.Iterable<_i2.dynamic>?,
    ])? setTimeout,
    T Function<T>(
      T, [
      _i3.StructuredSerializeOptions?,
    ])? structuredClone,
  }) =>
      WindowOrWorkerGlobalScope._(
        caches: caches ?? _i6.undefined,
        crossOriginIsolated: crossOriginIsolated,
        crypto: crypto ?? _i6.undefined,
        indexedDB: indexedDB ?? _i6.undefined,
        isSecureContext: isSecureContext,
        origin: origin,
        performance: performance ?? _i6.undefined,
        atob: atob == null ? null : _i4.allowInterop(atob),
        btoa: btoa == null ? null : _i4.allowInterop(btoa),
        clearInterval:
            clearInterval == null ? null : _i4.allowInterop(clearInterval),
        clearTimeout:
            clearTimeout == null ? null : _i4.allowInterop(clearTimeout),
        fetch: fetch == null ? null : _i4.allowInterop(fetch),
        queueMicrotask:
            queueMicrotask == null ? null : _i4.allowInterop(queueMicrotask),
        reportError: reportError == null ? null : _i4.allowInterop(reportError),
        setInterval: setInterval == null
            ? null
            : _i4.allowInterop((
                _i2.Object v0, [
                _i2.num? v1,
                a0,
                a1,
                a2,
                a3,
                a4,
                a5,
                a6,
                a7,
                a8,
                a9,
              ]) =>
                setInterval(
                  v0,
                  v1,
                  [
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                  ],
                )),
        setTimeout: setTimeout == null
            ? null
            : _i4.allowInterop((
                _i2.Object v0, [
                _i2.num? v1,
                a0,
                a1,
                a2,
                a3,
                a4,
                a5,
                a6,
                a7,
                a8,
                a9,
              ]) =>
                setTimeout(
                  v0,
                  v1,
                  [
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                  ],
                )),
        structuredClone:
            structuredClone == null ? null : _i4.allowInterop(structuredClone),
      );
}

extension WindowOrWorkerGlobalScope$Typings on WindowOrWorkerGlobalScope {
  /// Available only in secure contexts.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/caches)
  _i3.CacheStorage get caches => _i4.getProperty(
        this,
        'caches',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/crossOriginIsolated)
  _i2.bool get crossOriginIsolated => _i4.getProperty(
        this,
        'crossOriginIsolated',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/crypto_property)
  _i3.Crypto get crypto => _i4.getProperty(
        this,
        'crypto',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/indexedDB)
  _i3.IDBFactory get indexedDB => _i4.getProperty(
        this,
        'indexedDB',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/isSecureContext)
  _i2.bool get isSecureContext => _i4.getProperty(
        this,
        'isSecureContext',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/origin)
  _i2.String get origin => _i4.getProperty(
        this,
        'origin',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/performance_property)
  _i3.Performance get performance => _i4.getProperty(
        this,
        'performance',
      );
  set atob(_i2.String Function(_i2.String) value) {
    _i4.setProperty(
      this,
      'atob',
      _i4.allowInterop(value),
    );
  }

  _i2.String Function(_i2.String) get atob => (_i2.String p0) => _i4.callMethod(
        _i4.getProperty(
          this,
          'atob',
        ),
        r'call',
        [
          this,
          p0,
        ],
      );
  set btoa(_i2.String Function(_i2.String) value) {
    _i4.setProperty(
      this,
      'btoa',
      _i4.allowInterop(value),
    );
  }

  _i2.String Function(_i2.String) get btoa => (_i2.String p0) => _i4.callMethod(
        _i4.getProperty(
          this,
          'btoa',
        ),
        r'call',
        [
          this,
          p0,
        ],
      );
  set clearInterval(void Function([_i2.num?]) value) {
    _i4.setProperty(
      this,
      'clearInterval',
      _i4.allowInterop(value),
    );
  }

  void Function([_i2.num?]) get clearInterval =>
      ([_i2.num? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'clearInterval',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set clearTimeout(void Function([_i2.num?]) value) {
    _i4.setProperty(
      this,
      'clearTimeout',
      _i4.allowInterop(value),
    );
  }

  void Function([_i2.num?]) get clearTimeout =>
      ([_i2.num? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'clearTimeout',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set fetch(
      _i2.Future<_i3.Response> Function(
        _i2.Object, [
        _i3.RequestInit?,
      ]) value) {
    _i4.setProperty(
      this,
      'fetch',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<_i3.Response> Function(
    _i2.Object, [
    _i3.RequestInit?,
  ]) get fetch => (
        _i2.Object p0, [
        _i3.RequestInit? p1,
      ]) =>
          _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'fetch',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
            ],
          ));
  set queueMicrotask(void Function(_i3.VoidFunction) value) {
    _i4.setProperty(
      this,
      'queueMicrotask',
      _i4.allowInterop(value),
    );
  }

  void Function(_i3.VoidFunction) get queueMicrotask =>
      (_i3.VoidFunction p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'queueMicrotask',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set reportError(void Function([_i2.dynamic]) value) {
    _i4.setProperty(
      this,
      'reportError',
      _i4.allowInterop(value),
    );
  }

  void Function([_i2.dynamic]) get reportError =>
      ([_i2.dynamic p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'reportError',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set setInterval(
      _i2.num Function(
        _i2.Object, [
        _i2.num?,
        _i2.Iterable<_i2.dynamic>?,
      ]) value) {
    _i4.setProperty(
      this,
      'setInterval',
      _i4.allowInterop((
        _i2.Object v0, [
        _i2.num? v1,
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
        a6,
        a7,
        a8,
        a9,
      ]) =>
          value(
            v0,
            v1,
            [
              a0,
              a1,
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              a9,
            ],
          )),
    );
  }

  _i2.num Function(
    _i2.Object, [
    _i2.num?,
    _i2.Iterable<_i2.dynamic>?,
  ]) get setInterval => (
        _i2.Object p0, [
        _i2.num? p1,
        _i2.Iterable<_i2.dynamic>? p2,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'setInterval',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
              p2 ?? _i6.undefined,
            ],
          );
  set setTimeout(
      _i2.num Function(
        _i2.Object, [
        _i2.num?,
        _i2.Iterable<_i2.dynamic>?,
      ]) value) {
    _i4.setProperty(
      this,
      'setTimeout',
      _i4.allowInterop((
        _i2.Object v0, [
        _i2.num? v1,
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
        a6,
        a7,
        a8,
        a9,
      ]) =>
          value(
            v0,
            v1,
            [
              a0,
              a1,
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              a9,
            ],
          )),
    );
  }

  _i2.num Function(
    _i2.Object, [
    _i2.num?,
    _i2.Iterable<_i2.dynamic>?,
  ]) get setTimeout => (
        _i2.Object p0, [
        _i2.num? p1,
        _i2.Iterable<_i2.dynamic>? p2,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'setTimeout',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
              p2 ?? _i6.undefined,
            ],
          );
  set structuredClone(
      T Function<T>(
        T, [
        _i3.StructuredSerializeOptions?,
      ]) value) {
    _i4.setProperty(
      this,
      'structuredClone',
      _i4.allowInterop(value),
    );
  }

  T Function<T>(
    T, [
    _i3.StructuredSerializeOptions?,
  ]) get structuredClone => <T>(
        T p0, [
        _i3.StructuredSerializeOptions? p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'structuredClone',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
            ],
          );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/createImageBitmap)
  _i2.Future<_i3.ImageBitmap> _createImageBitmap$1(
    _i2.Object image, [
    _i3.ImageBitmapOptions? options,
  ]) =>
      _i4.promiseToFuture(_i4.callMethod(
        this,
        'createImageBitmap',
        [
          image,
          options ?? _i6.undefined,
        ],
      ));

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/createImageBitmap)
  _i2.Future<_i3.ImageBitmap> _createImageBitmap$2(
    _i2.Object image,
    _i2.num sx,
    _i2.num sy,
    _i2.num sw,
    _i2.num sh, [
    _i3.ImageBitmapOptions? options,
  ]) =>
      _i4.promiseToFuture(_i4.callMethod(
        this,
        'createImageBitmap',
        [
          image,
          sx,
          sy,
          sw,
          sh,
          options ?? _i6.undefined,
        ],
      ));

  /// Overload accessor: $1, $2
  ({
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/createImageBitmap)
    _i2.Future<_i3.ImageBitmap> Function(
      _i2.Object image, [
      _i3.ImageBitmapOptions? options,
    ]) $1,

    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/createImageBitmap)
    _i2.Future<_i3.ImageBitmap> Function(
      _i2.Object image,
      _i2.num sx,
      _i2.num sy,
      _i2.num sw,
      _i2.num sh, [
      _i3.ImageBitmapOptions? options,
    ]) $2,
  }) get createImageBitmap => (
        $1: _createImageBitmap$1,
        $2: _createImageBitmap$2,
      );
}

enum WorkerEventMap<T$ extends _i3.Event> {
  message<_i3.MessageEvent<_i2.dynamic>>(r'message'),
  messageerror<_i3.MessageEvent<_i2.dynamic>>(r'messageerror'),
  error<_i3.ErrorEvent>(r'error');

  const WorkerEventMap(this.value);

  final _i2.String value;
}

/* Source:  */
/// This Web Workers API interface represents a background task that can be easily created and can send messages back to its creator. Creating a worker is as simple as calling the Worker() constructor and specifying a script to be run in the worker thread.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Worker)
@_i1.JS()
@_i1.staticInterop
class Worker implements _i3.EventTarget, _i3.AbstractWorker {
  factory Worker(
    _i2.Object scriptURL, [
    _i3.WorkerOptions? options,
  ]) =>
      _i4.callConstructor(
        _declaredWorker,
        [
          scriptURL,
          options ?? _i6.undefined,
        ],
      );
}

_i2.Object get _declaredWorker => _i4.getProperty(
      _self,
      'Worker',
    );

extension Worker$Typings on Worker {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Worker/message_event)
  _i2.dynamic Function(_i3.MessageEvent<_i2.dynamic>)? get onmessage =>
      (_i3.MessageEvent<_i2.dynamic> p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onmessage',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onmessage(_i2.dynamic Function(_i3.MessageEvent<_i2.dynamic>)? value) {
    _i4.setProperty(
      this,
      'onmessage',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Worker/messageerror_event)
  _i2.dynamic Function(_i3.MessageEvent<_i2.dynamic>)? get onmessageerror =>
      (_i3.MessageEvent<_i2.dynamic> p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onmessageerror',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onmessageerror(
      _i2.dynamic Function(_i3.MessageEvent<_i2.dynamic>)? value) {
    _i4.setProperty(
      this,
      'onmessageerror',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  set terminate(void Function() value) {
    _i4.setProperty(
      this,
      'terminate',
      _i4.allowInterop(value),
    );
  }

  void Function() get terminate => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'terminate',
        ),
        r'call',
        [this],
      );

  /// Clones message and transmits it to worker's global environment. transfer can be passed as a list of objects that are to be transferred rather than cloned.
  ///
  ///  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Worker/postMessage)
  void _postMessage$1(
    _i2.List<_i2.Object> transfer, [
    _i2.dynamic message,
  ]) {
    _i4.callMethod(
      this,
      'postMessage',
      [
        message,
        transfer,
      ],
    );
  }

  /// Clones message and transmits it to worker's global environment. transfer can be passed as a list of objects that are to be transferred rather than cloned.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Worker/postMessage)
  void _postMessage$2([
    _i2.dynamic message,
    _i3.StructuredSerializeOptions? options,
  ]) {
    _i4.callMethod(
      this,
      'postMessage',
      [
        message,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Clones message and transmits it to worker's global environment. transfer can be passed as a list of objects that are to be transferred rather than cloned.
    ///
    ///  [MDN Reference](https://developer.mozilla.org/docs/Web/API/Worker/postMessage)
    void Function(
      _i2.List<_i2.Object> transfer, [
      _i2.dynamic message,
    ]) $1,

    /// Clones message and transmits it to worker's global environment. transfer can be passed as a list of objects that are to be transferred rather than cloned.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Worker/postMessage)
    void Function([
      _i2.dynamic message,
      _i3.StructuredSerializeOptions? options,
    ]) $2,
  }) get postMessage => (
        $1: _postMessage$1,
        $2: _postMessage$2,
      );

  ///
  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$1<K$ extends _i3.Event>(
    _i3.WorkerEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  ///
  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    ///
    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function<K$ extends _i3.Event>(
      _i3.WorkerEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    ///
    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get addEventListener => (
        $1: _addEventListener$1,
        $2: _addEventListener$2,
      );

  ///
  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$1<K$ extends _i3.Event>(
    _i3.WorkerEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  ///
  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    ///
    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function<K$ extends _i3.Event>(
      _i3.WorkerEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    ///
    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get removeEventListener => (
        $1: _removeEventListener$1,
        $2: _removeEventListener$2,
      );
}

enum WorkerGlobalScopeEventMap<T$> {
  error<_i3.ErrorEvent>(r'error'),
  languagechange<_i3.Event>(r'languagechange'),
  offline<_i3.Event>(r'offline'),
  online<_i3.Event>(r'online'),
  rejectionhandled<_i3.PromiseRejectionEvent>(r'rejectionhandled'),
  unhandledrejection<_i3.PromiseRejectionEvent>(r'unhandledrejection');

  const WorkerGlobalScopeEventMap(this.value);

  final _i2.String value;
}

/* Source:  */
/// This Web Workers API interface is an interface representing the scope of any worker. Workers have no browsing context; this scope contains the information usually conveyed by Window objects — in this case event handlers, the console or the associated WorkerNavigator object. Each WorkerGlobalScope has its own event loop.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope)
@_i1.JS()
@_i1.staticInterop
class WorkerGlobalScope
    implements
        _i3.EventTarget,
        _i3.FontFaceSource,
        _i3.WindowOrWorkerGlobalScope {
  factory WorkerGlobalScope() => _i4.callConstructor(
        _declaredWorkerGlobalScope,
        [],
      );
}

_i2.Object get _declaredWorkerGlobalScope => _i4.getProperty(
      _self,
      'WorkerGlobalScope',
    );

extension WorkerGlobalScope$Typings on WorkerGlobalScope {
  /// Returns workerGlobal's WorkerLocation object.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope/location)
  _i3.WorkerLocation get location => _i4.getProperty(
        this,
        'location',
      );

  /// Returns workerGlobal's WorkerNavigator object.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope/navigator)
  _i3.WorkerNavigator get navigator => _i4.getProperty(
        this,
        'navigator',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope/error_event)
  _i2.dynamic Function(_i3.ErrorEvent)? get onerror =>
      (_i3.ErrorEvent p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onerror',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onerror(_i2.dynamic Function(_i3.ErrorEvent)? value) {
    _i4.setProperty(
      this,
      'onerror',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope/languagechange_event)
  _i2.dynamic Function(_i3.Event)? get onlanguagechange =>
      (_i3.Event p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onlanguagechange',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onlanguagechange(_i2.dynamic Function(_i3.Event)? value) {
    _i4.setProperty(
      this,
      'onlanguagechange',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope/offline_event)
  _i2.dynamic Function(_i3.Event)? get onoffline =>
      (_i3.Event p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onoffline',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onoffline(_i2.dynamic Function(_i3.Event)? value) {
    _i4.setProperty(
      this,
      'onoffline',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope/online_event)
  _i2.dynamic Function(_i3.Event)? get ononline =>
      (_i3.Event p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'ononline',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set ononline(_i2.dynamic Function(_i3.Event)? value) {
    _i4.setProperty(
      this,
      'ononline',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  _i2.dynamic Function(_i3.PromiseRejectionEvent)? get onrejectionhandled =>
      (_i3.PromiseRejectionEvent p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onrejectionhandled',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onrejectionhandled(
      _i2.dynamic Function(_i3.PromiseRejectionEvent)? value) {
    _i4.setProperty(
      this,
      'onrejectionhandled',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  _i2.dynamic Function(_i3.PromiseRejectionEvent)? get onunhandledrejection =>
      (_i3.PromiseRejectionEvent p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onunhandledrejection',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onunhandledrejection(
      _i2.dynamic Function(_i3.PromiseRejectionEvent)? value) {
    _i4.setProperty(
      this,
      'onunhandledrejection',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// Returns workerGlobal.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope/self)
  _Intersection7 get self => _i4.getProperty(
        this,
        'self',
      );
  set importScripts(void Function([_i2.Iterable<_i2.dynamic>?]) value) {
    _i4.setProperty(
      this,
      'importScripts',
      _i4.allowInterop(([
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
        a6,
        a7,
        a8,
        a9,
      ]) =>
          value([
            a0,
            a1,
            a2,
            a3,
            a4,
            a5,
            a6,
            a7,
            a8,
            a9,
          ])),
    );
  }

  void Function([_i2.Iterable<_i2.dynamic>?]) get importScripts =>
      ([_i2.Iterable<_i2.dynamic>? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'importScripts',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$1<K$>(
    _i3.WorkerGlobalScopeEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function<K$>(
      _i3.WorkerGlobalScopeEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get addEventListener => (
        $1: _addEventListener$1,
        $2: _addEventListener$2,
      );

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$1<K$>(
    _i3.WorkerGlobalScopeEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function<K$>(
      _i3.WorkerGlobalScopeEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get removeEventListener => (
        $1: _removeEventListener$1,
        $2: _removeEventListener$2,
      );
}

/* Source:  */
/// The absolute location of the script executed by the Worker. Such an object is initialized for each worker and is available via the WorkerGlobalScope.location property obtained by calling self.location.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WorkerLocation)
@_i1.JS()
@_i1.staticInterop
class WorkerLocation {
  factory WorkerLocation() => _i4.callConstructor(
        _declaredWorkerLocation,
        [],
      );
}

_i2.Object get _declaredWorkerLocation => _i4.getProperty(
      _self,
      'WorkerLocation',
    );

extension WorkerLocation$Typings on WorkerLocation {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WorkerLocation/hash)
  _i2.String get hash => _i4.getProperty(
        this,
        'hash',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WorkerLocation/host)
  _i2.String get host => _i4.getProperty(
        this,
        'host',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WorkerLocation/hostname)
  _i2.String get hostname => _i4.getProperty(
        this,
        'hostname',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WorkerLocation/href)
  _i2.String get href => _i4.getProperty(
        this,
        'href',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WorkerLocation/origin)
  _i2.String get origin => _i4.getProperty(
        this,
        'origin',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WorkerLocation/pathname)
  _i2.String get pathname => _i4.getProperty(
        this,
        'pathname',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WorkerLocation/port)
  _i2.String get port => _i4.getProperty(
        this,
        'port',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WorkerLocation/protocol)
  _i2.String get protocol => _i4.getProperty(
        this,
        'protocol',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WorkerLocation/search)
  _i2.String get search => _i4.getProperty(
        this,
        'search',
      );
  set toString$(_i2.String Function() value) {
    _i4.setProperty(
      this,
      'toString',
      _i4.allowInterop(value),
    );
  }

  _i2.String Function() get toString$ => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'toString',
        ),
        r'call',
        [this],
      );
}

/* Source:  */
/// A subset of the Navigator interface allowed to be accessed from a Worker. Such an object is initialized for each worker and is available via the WorkerGlobalScope.navigator property obtained by calling window.self.navigator.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WorkerNavigator)
@_i1.JS()
@_i1.staticInterop
class WorkerNavigator
    implements
        _i3.NavigatorBadge,
        _i3.NavigatorConcurrentHardware,
        _i3.NavigatorID,
        _i3.NavigatorLanguage,
        _i3.NavigatorLocks,
        _i3.NavigatorOnLine,
        _i3.NavigatorStorage {
  factory WorkerNavigator() => _i4.callConstructor(
        _declaredWorkerNavigator,
        [],
      );
}

_i2.Object get _declaredWorkerNavigator => _i4.getProperty(
      _self,
      'WorkerNavigator',
    );

extension WorkerNavigator$Typings on WorkerNavigator {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WorkerNavigator/mediaCapabilities)
  _i3.MediaCapabilities get mediaCapabilities => _i4.getProperty(
        this,
        'mediaCapabilities',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WorkerNavigator/permissions)
  _i3.Permissions get permissions => _i4.getProperty(
        this,
        'permissions',
      );
}

/* Source:  */
/// This Streams API interface provides a standard abstraction for writing streaming data to a destination, known as a sink. This object comes with built-in backpressure and queuing.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStream)
@_i1.JS()
@_i1.staticInterop
class WritableStream<W> {
  factory WritableStream([
    _i3.UnderlyingSink<W>? underlyingSink,
    _i3.QueuingStrategy<W>? strategy,
  ]) =>
      _i4.callConstructor(
        _declaredWritableStream,
        [
          underlyingSink ?? _i6.undefined,
          strategy ?? _i6.undefined,
        ],
      );
}

_i2.Object get _declaredWritableStream => _i4.getProperty(
      _self,
      'WritableStream',
    );

extension WritableStream$Typings<W> on WritableStream<W> {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStream/locked)
  _i2.bool get locked => _i4.getProperty(
        this,
        'locked',
      );
  set abort(_i2.Future<void> Function([_i2.dynamic]) value) {
    _i4.setProperty(
      this,
      'abort',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<void> Function([_i2.dynamic]) get abort =>
      ([_i2.dynamic p0]) => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'abort',
            ),
            r'call',
            [
              this,
              p0,
            ],
          ));
  set close(_i2.Future<void> Function() value) {
    _i4.setProperty(
      this,
      'close',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<void> Function() get close =>
      () => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'close',
            ),
            r'call',
            [this],
          ));
  set getWriter(_i3.WritableStreamDefaultWriter<W> Function() value) {
    _i4.setProperty(
      this,
      'getWriter',
      _i4.allowInterop(value),
    );
  }

  _i3.WritableStreamDefaultWriter<W> Function() get getWriter =>
      () => _i4.callMethod(
            _i4.getProperty(
              this,
              'getWriter',
            ),
            r'call',
            [this],
          );
}

/* Source:  */
/// This Streams API interface represents a controller allowing control of a WritableStream's state. When constructing a WritableStream, the underlying sink is given a corresponding WritableStreamDefaultController instance to manipulate.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultController)
@_i1.JS()
@_i1.staticInterop
class WritableStreamDefaultController {
  factory WritableStreamDefaultController() => _i4.callConstructor(
        _declaredWritableStreamDefaultController,
        [],
      );
}

_i2.Object get _declaredWritableStreamDefaultController => _i4.getProperty(
      _self,
      'WritableStreamDefaultController',
    );

extension WritableStreamDefaultController$Typings
    on WritableStreamDefaultController {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultController/signal)
  _i3.AbortSignal get signal => _i4.getProperty(
        this,
        'signal',
      );
  set error(void Function([_i2.dynamic]) value) {
    _i4.setProperty(
      this,
      'error',
      _i4.allowInterop(value),
    );
  }

  void Function([_i2.dynamic]) get error =>
      ([_i2.dynamic p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'error',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
}

/* Source:  */
/// This Streams API interface is the object returned by WritableStream.getWriter() and once created locks the < writer to the WritableStream ensuring that no other streams can write to the underlying sink.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter)
@_i1.JS()
@_i1.staticInterop
class WritableStreamDefaultWriter<W> {
  factory WritableStreamDefaultWriter(_i3.WritableStream<W> stream) =>
      _i4.callConstructor(
        _declaredWritableStreamDefaultWriter,
        [stream],
      );
}

_i2.Object get _declaredWritableStreamDefaultWriter => _i4.getProperty(
      _self,
      'WritableStreamDefaultWriter',
    );

extension WritableStreamDefaultWriter$Typings<W>
    on WritableStreamDefaultWriter<W> {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/closed)
  _i2.Future<_i2.dynamic> get closed => _i4.promiseToFuture(_i4.getProperty(
        this,
        'closed',
      ));

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/desiredSize)
  _i2.num? get desiredSize => _i4.getProperty(
        this,
        'desiredSize',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/ready)
  _i2.Future<_i2.dynamic> get ready => _i4.promiseToFuture(_i4.getProperty(
        this,
        'ready',
      ));
  set abort(_i2.Future<void> Function([_i2.dynamic]) value) {
    _i4.setProperty(
      this,
      'abort',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<void> Function([_i2.dynamic]) get abort =>
      ([_i2.dynamic p0]) => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'abort',
            ),
            r'call',
            [
              this,
              p0,
            ],
          ));
  set close(_i2.Future<void> Function() value) {
    _i4.setProperty(
      this,
      'close',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<void> Function() get close =>
      () => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'close',
            ),
            r'call',
            [this],
          ));
  set releaseLock(void Function() value) {
    _i4.setProperty(
      this,
      'releaseLock',
      _i4.allowInterop(value),
    );
  }

  void Function() get releaseLock => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'releaseLock',
        ),
        r'call',
        [this],
      );
  set write(_i2.Future<void> Function([W?]) value) {
    _i4.setProperty(
      this,
      'write',
      _i4.allowInterop(value),
    );
  }

  _i2.Future<void> Function([W?]) get write =>
      ([W? p0]) => _i4.promiseToFuture(_i4.callMethod(
            _i4.getProperty(
              this,
              'write',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          ));
}

enum XMLHttpRequestEventMap<T$> {
  readystatechange<_i3.Event>(r'readystatechange'),
  abort<_i3.ProgressEvent<_i3.XMLHttpRequestEventTarget>>(r'abort'),
  error<_i3.ProgressEvent<_i3.XMLHttpRequestEventTarget>>(r'error'),
  load<_i3.ProgressEvent<_i3.XMLHttpRequestEventTarget>>(r'load'),
  loadend<_i3.ProgressEvent<_i3.XMLHttpRequestEventTarget>>(r'loadend'),
  loadstart<_i3.ProgressEvent<_i3.XMLHttpRequestEventTarget>>(r'loadstart'),
  progress<_i3.ProgressEvent<_i3.XMLHttpRequestEventTarget>>(r'progress'),
  timeout<_i3.ProgressEvent<_i3.XMLHttpRequestEventTarget>>(r'timeout');

  const XMLHttpRequestEventMap(this.value);

  final _i2.String value;
}

/* Source:  */
/// Use XMLHttpRequest (XHR) objects to interact with servers. You can retrieve data from a URL without having to do a full page refresh. This enables a Web page to update just part of a page without disrupting what the user is doing.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest)
@_i1.JS()
@_i1.staticInterop
class XMLHttpRequest implements _i3.XMLHttpRequestEventTarget {
  factory XMLHttpRequest() => _i4.callConstructor(
        _declaredXMLHttpRequest,
        [],
      );

  static _i2.num get unsent => _i4.getProperty(
        _declaredXMLHttpRequest,
        'UNSENT',
      );
  static _i2.num get opened => _i4.getProperty(
        _declaredXMLHttpRequest,
        'OPENED',
      );
  static _i2.num get headersReceived => _i4.getProperty(
        _declaredXMLHttpRequest,
        'HEADERS_RECEIVED',
      );
  static _i2.num get loading => _i4.getProperty(
        _declaredXMLHttpRequest,
        'LOADING',
      );
  static _i2.num get done => _i4.getProperty(
        _declaredXMLHttpRequest,
        'DONE',
      );
}

_i2.Object get _declaredXMLHttpRequest => _i4.getProperty(
      _self,
      'XMLHttpRequest',
    );

extension XMLHttpRequest$Typings on XMLHttpRequest {
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/readystatechange_event)
  _i2.dynamic Function(_i3.Event)? get onreadystatechange =>
      (_i3.Event p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onreadystatechange',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onreadystatechange(_i2.dynamic Function(_i3.Event)? value) {
    _i4.setProperty(
      this,
      'onreadystatechange',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// Returns client's state.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/readyState)
  _i2.num get readyState => _i4.getProperty(
        this,
        'readyState',
      );

  /// Returns the response body.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/response)
  _i2.dynamic get response => _i4.getProperty(
        this,
        'response',
      );

  /// Returns response as text.
  ///
  /// Throws an "InvalidStateError" DOMException if responseType is not the empty string or "text".
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/responseText)
  _i2.String get responseText => _i4.getProperty(
        this,
        'responseText',
      );

  /// Returns the response type.
  ///
  ///  Can be set to change the response type. Values are: the empty string (default), "arraybuffer", "blob", "document", "json", and "text".
  ///
  ///  When set: setting to "document" is ignored if current global object is not a Window object.
  ///
  ///  When set: throws an "InvalidStateError" DOMException if state is loading or done.
  ///
  ///  When set: throws an "InvalidAccessError" DOMException if the synchronous flag is set and current global object is a Window object.
  ///
  ///  [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/responseType)
  _i3.XMLHttpRequestResponseType get responseType =>
      _i3.XMLHttpRequestResponseTypeOptions.values.byName(_i4.getProperty(
        this,
        'responseType',
      ));
  set responseType(_i3.XMLHttpRequestResponseType value) {
    _i4.setProperty(
      this,
      'responseType',
      value.name,
    );
  }

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/responseURL)
  _i2.String get responseURL => _i4.getProperty(
        this,
        'responseURL',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/status)
  _i2.num get status => _i4.getProperty(
        this,
        'status',
      );

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/statusText)
  _i2.String get statusText => _i4.getProperty(
        this,
        'statusText',
      );

  /// Can be set to a time in milliseconds. When set to a non-zero value will cause fetching to terminate after the given time has passed. When the time has passed, the request has not yet completed, and this's synchronous flag is unset, a timeout event will then be dispatched, or a "TimeoutError" DOMException will be thrown otherwise (for the send() method).
  ///
  ///  When set: throws an "InvalidAccessError" DOMException if the synchronous flag is set and current global object is a Window object.
  ///
  ///  [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/timeout)
  _i2.num get timeout => _i4.getProperty(
        this,
        'timeout',
      );
  set timeout(_i2.num value) {
    _i4.setProperty(
      this,
      'timeout',
      value,
    );
  }

  /// Returns the associated XMLHttpRequestUpload object. It can be used to gather transmission information when data is transferred to a server.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/upload)
  _i3.XMLHttpRequestUpload get upload => _i4.getProperty(
        this,
        'upload',
      );

  /// True when credentials are to be included in a cross-origin request. False when they are to be excluded in a cross-origin request and when cookies are to be ignored in its response. Initially false.
  ///
  ///  When set: throws an "InvalidStateError" DOMException if state is not unsent or opened, or if the send() flag is set.
  ///
  ///  [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/withCredentials)
  _i2.bool get withCredentials => _i4.getProperty(
        this,
        'withCredentials',
      );
  set withCredentials(_i2.bool value) {
    _i4.setProperty(
      this,
      'withCredentials',
      value,
    );
  }

  _i2.num get unsent => _i4.getProperty(
        this,
        'UNSENT',
      );
  _i2.num get opened => _i4.getProperty(
        this,
        'OPENED',
      );
  _i2.num get headersReceived => _i4.getProperty(
        this,
        'HEADERS_RECEIVED',
      );
  _i2.num get loading => _i4.getProperty(
        this,
        'LOADING',
      );
  _i2.num get done => _i4.getProperty(
        this,
        'DONE',
      );
  set abort(void Function() value) {
    _i4.setProperty(
      this,
      'abort',
      _i4.allowInterop(value),
    );
  }

  void Function() get abort => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'abort',
        ),
        r'call',
        [this],
      );
  set getAllResponseHeaders(_i2.String Function() value) {
    _i4.setProperty(
      this,
      'getAllResponseHeaders',
      _i4.allowInterop(value),
    );
  }

  _i2.String Function() get getAllResponseHeaders => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'getAllResponseHeaders',
        ),
        r'call',
        [this],
      );
  set getResponseHeader(_i2.String? Function(_i2.String) value) {
    _i4.setProperty(
      this,
      'getResponseHeader',
      _i4.allowInterop((p0) => () => value(p0) ?? _i6.undefined),
    );
  }

  _i2.String? Function(_i2.String) get getResponseHeader =>
      (_i2.String p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'getResponseHeader',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set overrideMimeType(void Function(_i2.String) value) {
    _i4.setProperty(
      this,
      'overrideMimeType',
      _i4.allowInterop(value),
    );
  }

  void Function(_i2.String) get overrideMimeType =>
      (_i2.String p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'overrideMimeType',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set send(void Function([_i2.Object?]) value) {
    _i4.setProperty(
      this,
      'send',
      _i4.allowInterop(value),
    );
  }

  void Function([_i2.Object?]) get send => ([_i2.Object? p0]) => _i4.callMethod(
        _i4.getProperty(
          this,
          'send',
        ),
        r'call',
        [
          this,
          p0 ?? _i6.undefined ?? _i6.undefined,
        ],
      );
  set setRequestHeader(
      void Function(
        _i2.String,
        _i2.String,
      ) value) {
    _i4.setProperty(
      this,
      'setRequestHeader',
      _i4.allowInterop(value),
    );
  }

  void Function(
    _i2.String,
    _i2.String,
  ) get setRequestHeader => (
        _i2.String p0,
        _i2.String p1,
      ) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'setRequestHeader',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );

  /// Sets the request method, request URL, and synchronous flag.
  ///
  ///  Throws a "SyntaxError" DOMException if either method is not a valid method or url cannot be parsed.
  ///
  ///  Throws a "SecurityError" DOMException if method is a case-insensitive match for `CONNECT`, `TRACE`, or `TRACK`.
  ///
  ///  Throws an "InvalidAccessError" DOMException if async is false, current global object is a Window object, and the timeout attribute is not zero or the responseType attribute is not the empty string.
  ///
  ///  [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/open)
  void _open$1(
    _i2.String method,
    _i2.Object url,
  ) {
    _i4.callMethod(
      this,
      'open',
      [
        method,
        url,
      ],
    );
  }

  /// Sets the request method, request URL, and synchronous flag.
  ///
  /// Throws a "SyntaxError" DOMException if either method is not a valid method or url cannot be parsed.
  ///
  /// Throws a "SecurityError" DOMException if method is a case-insensitive match for `CONNECT`, `TRACE`, or `TRACK`.
  ///
  /// Throws an "InvalidAccessError" DOMException if async is false, current global object is a Window object, and the timeout attribute is not zero or the responseType attribute is not the empty string.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/open)
  void _open$2(
    _i2.String method,
    _i2.Object url,
    _i2.bool async, [
    _i2.String? username,
    _i2.String? password,
  ]) {
    _i4.callMethod(
      this,
      'open',
      [
        method,
        url,
        async,
        username ?? _i6.undefined,
        password ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Sets the request method, request URL, and synchronous flag.
    ///
    ///  Throws a "SyntaxError" DOMException if either method is not a valid method or url cannot be parsed.
    ///
    ///  Throws a "SecurityError" DOMException if method is a case-insensitive match for `CONNECT`, `TRACE`, or `TRACK`.
    ///
    ///  Throws an "InvalidAccessError" DOMException if async is false, current global object is a Window object, and the timeout attribute is not zero or the responseType attribute is not the empty string.
    ///
    ///  [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/open)
    void Function(
      _i2.String method,
      _i2.Object url,
    ) $1,

    /// Sets the request method, request URL, and synchronous flag.
    ///
    /// Throws a "SyntaxError" DOMException if either method is not a valid method or url cannot be parsed.
    ///
    /// Throws a "SecurityError" DOMException if method is a case-insensitive match for `CONNECT`, `TRACE`, or `TRACK`.
    ///
    /// Throws an "InvalidAccessError" DOMException if async is false, current global object is a Window object, and the timeout attribute is not zero or the responseType attribute is not the empty string.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/open)
    void Function(
      _i2.String method,
      _i2.Object url,
      _i2.bool async, [
      _i2.String? username,
      _i2.String? password,
    ]) $2,
  }) get open => (
        $1: _open$1,
        $2: _open$2,
      );

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$1<K$>(
    _i3.XMLHttpRequestEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function<K$>(
      _i3.XMLHttpRequestEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get addEventListener => (
        $1: _addEventListener$1,
        $2: _addEventListener$2,
      );

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$1<K$>(
    _i3.XMLHttpRequestEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function<K$>(
      _i3.XMLHttpRequestEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get removeEventListener => (
        $1: _removeEventListener$1,
        $2: _removeEventListener$2,
      );
}

enum XMLHttpRequestEventTargetEventMap<T$ extends _i3.Event> {
  abort<_i3.ProgressEvent<_i3.XMLHttpRequestEventTarget>>(r'abort'),
  error<_i3.ProgressEvent<_i3.XMLHttpRequestEventTarget>>(r'error'),
  load<_i3.ProgressEvent<_i3.XMLHttpRequestEventTarget>>(r'load'),
  loadend<_i3.ProgressEvent<_i3.XMLHttpRequestEventTarget>>(r'loadend'),
  loadstart<_i3.ProgressEvent<_i3.XMLHttpRequestEventTarget>>(r'loadstart'),
  progress<_i3.ProgressEvent<_i3.XMLHttpRequestEventTarget>>(r'progress'),
  timeout<_i3.ProgressEvent<_i3.XMLHttpRequestEventTarget>>(r'timeout');

  const XMLHttpRequestEventTargetEventMap(this.value);

  final _i2.String value;
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequestEventTarget)
@_i1.JS()
@_i1.staticInterop
class XMLHttpRequestEventTarget implements _i3.EventTarget {
  factory XMLHttpRequestEventTarget() => _i4.callConstructor(
        _declaredXMLHttpRequestEventTarget,
        [],
      );
}

_i2.Object get _declaredXMLHttpRequestEventTarget => _i4.getProperty(
      _self,
      'XMLHttpRequestEventTarget',
    );

extension XMLHttpRequestEventTarget$Typings on XMLHttpRequestEventTarget {
  _i2.dynamic Function(_i3.ProgressEvent<_i3.EventTarget>)? get onabort =>
      (_i3.ProgressEvent<_i3.EventTarget> p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onabort',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onabort(_i2.dynamic Function(_i3.ProgressEvent<_i3.EventTarget>)? value) {
    _i4.setProperty(
      this,
      'onabort',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  _i2.dynamic Function(_i3.ProgressEvent<_i3.EventTarget>)? get onerror =>
      (_i3.ProgressEvent<_i3.EventTarget> p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onerror',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onerror(_i2.dynamic Function(_i3.ProgressEvent<_i3.EventTarget>)? value) {
    _i4.setProperty(
      this,
      'onerror',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  _i2.dynamic Function(_i3.ProgressEvent<_i3.EventTarget>)? get onload =>
      (_i3.ProgressEvent<_i3.EventTarget> p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onload',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onload(_i2.dynamic Function(_i3.ProgressEvent<_i3.EventTarget>)? value) {
    _i4.setProperty(
      this,
      'onload',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  _i2.dynamic Function(_i3.ProgressEvent<_i3.EventTarget>)? get onloadend =>
      (_i3.ProgressEvent<_i3.EventTarget> p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onloadend',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onloadend(
      _i2.dynamic Function(_i3.ProgressEvent<_i3.EventTarget>)? value) {
    _i4.setProperty(
      this,
      'onloadend',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  _i2.dynamic Function(_i3.ProgressEvent<_i3.EventTarget>)? get onloadstart =>
      (_i3.ProgressEvent<_i3.EventTarget> p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onloadstart',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onloadstart(
      _i2.dynamic Function(_i3.ProgressEvent<_i3.EventTarget>)? value) {
    _i4.setProperty(
      this,
      'onloadstart',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  _i2.dynamic Function(_i3.ProgressEvent<_i3.EventTarget>)? get onprogress =>
      (_i3.ProgressEvent<_i3.EventTarget> p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'onprogress',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set onprogress(
      _i2.dynamic Function(_i3.ProgressEvent<_i3.EventTarget>)? value) {
    _i4.setProperty(
      this,
      'onprogress',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  _i2.dynamic Function(_i3.ProgressEvent<_i3.EventTarget>)? get ontimeout =>
      (_i3.ProgressEvent<_i3.EventTarget> p0) => _i4.callMethod(
            _i4.getProperty(
              this,
              'ontimeout',
            ),
            r'call',
            [
              this,
              p0,
            ],
          );
  set ontimeout(
      _i2.dynamic Function(_i3.ProgressEvent<_i3.EventTarget>)? value) {
    _i4.setProperty(
      this,
      'ontimeout',
      value == null ? _i6.undefined : _i4.allowInterop(value),
    );
  }

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$1<K$ extends _i3.Event>(
    _i3.XMLHttpRequestEventTargetEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function<K$ extends _i3.Event>(
      _i3.XMLHttpRequestEventTargetEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get addEventListener => (
        $1: _addEventListener$1,
        $2: _addEventListener$2,
      );

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$1<K$ extends _i3.Event>(
    _i3.XMLHttpRequestEventTargetEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function<K$ extends _i3.Event>(
      _i3.XMLHttpRequestEventTargetEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get removeEventListener => (
        $1: _removeEventListener$1,
        $2: _removeEventListener$2,
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequestUpload)
@_i1.JS()
@_i1.staticInterop
class XMLHttpRequestUpload implements _i3.XMLHttpRequestEventTarget {
  factory XMLHttpRequestUpload() => _i4.callConstructor(
        _declaredXMLHttpRequestUpload,
        [],
      );
}

_i2.Object get _declaredXMLHttpRequestUpload => _i4.getProperty(
      _self,
      'XMLHttpRequestUpload',
    );

extension XMLHttpRequestUpload$Typings on XMLHttpRequestUpload {
  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$1<K$ extends _i3.Event>(
    _i3.XMLHttpRequestEventTargetEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
  ///
  /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
  ///
  /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
  ///
  /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
  ///
  /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
  ///
  /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
  ///
  /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
  void _addEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'addEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function<K$ extends _i3.Event>(
      _i3.XMLHttpRequestEventTargetEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
    ///
    /// The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
    ///
    /// When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
    ///
    /// When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
    ///
    /// When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
    ///
    /// If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
    ///
    /// The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get addEventListener => (
        $1: _addEventListener$1,
        $2: _addEventListener$2,
      );

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$1<K$ extends _i3.Event>(
    _i3.XMLHttpRequestEventTargetEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type.name,
        _i4.allowInterop(listener),
        options ?? _i6.undefined,
      ],
    );
  }

  /// Removes the event listener in target's event listener list with the same type, callback, and options.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
  void _removeEventListener$2(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) {
    _i4.callMethod(
      this,
      'removeEventListener',
      [
        type,
        listener,
        options ?? _i6.undefined,
      ],
    );
  }

  /// Overload accessor: $1, $2
  ({
    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function<K$ extends _i3.Event>(
      _i3.XMLHttpRequestEventTargetEventMap<K$> type,
      _i2.dynamic Function(K$) listener, [
      _i2.Object? options,
    ]) $1,

    /// Removes the event listener in target's event listener list with the same type, callback, and options.
    ///
    /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
    void Function(
      _i2.String type,
      _i2.Object listener, [
      _i2.Object? options,
    ]) $2,
  }) get removeEventListener => (
        $1: _removeEventListener$1,
        $2: _removeEventListener$2,
      );
}

/* Source:  */
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/console)
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class Console {
  external factory Console._({
    _i2.dynamic assert$,
    _i2.dynamic clear,
    _i2.dynamic count,
    _i2.dynamic countReset,
    _i2.dynamic debug,
    _i2.dynamic dir,
    _i2.dynamic dirxml,
    _i2.dynamic error,
    _i2.dynamic group,
    _i2.dynamic groupCollapsed,
    _i2.dynamic groupEnd,
    _i2.dynamic info,
    _i2.dynamic log,
    _i2.dynamic table,
    _i2.dynamic time,
    _i2.dynamic timeEnd,
    _i2.dynamic timeLog,
    _i2.dynamic timeStamp,
    _i2.dynamic trace,
    _i2.dynamic warn,
  });

  factory Console({
    void Function([
      _i2.bool?,
      _i2.Iterable<_i2.dynamic>?,
    ])? assert$,
    void Function()? clear,
    void Function([_i2.String?])? count,
    void Function([_i2.String?])? countReset,
    void Function([_i2.Iterable<_i2.dynamic>?])? debug,
    void Function([
      _i2.dynamic,
      _i2.dynamic,
    ])? dir,
    void Function([_i2.Iterable<_i2.dynamic>?])? dirxml,
    void Function([_i2.Iterable<_i2.dynamic>?])? error,
    void Function([_i2.Iterable<_i2.dynamic>?])? group,
    void Function([_i2.Iterable<_i2.dynamic>?])? groupCollapsed,
    void Function()? groupEnd,
    void Function([_i2.Iterable<_i2.dynamic>?])? info,
    void Function([_i2.Iterable<_i2.dynamic>?])? log,
    void Function([
      _i2.dynamic,
      _i2.List<_i2.String>?,
    ])? table,
    void Function([_i2.String?])? time,
    void Function([_i2.String?])? timeEnd,
    void Function([
      _i2.String?,
      _i2.Iterable<_i2.dynamic>?,
    ])? timeLog,
    void Function([_i2.String?])? timeStamp,
    void Function([_i2.Iterable<_i2.dynamic>?])? trace,
    void Function([_i2.Iterable<_i2.dynamic>?])? warn,
  }) =>
      Console._(
        assert$: assert$ == null
            ? null
            : _i4.allowInterop(([
                _i2.bool? v0,
                a0,
                a1,
                a2,
                a3,
                a4,
                a5,
                a6,
                a7,
                a8,
                a9,
              ]) =>
                assert$(
                  v0,
                  [
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                  ],
                )),
        clear: clear == null ? null : _i4.allowInterop(clear),
        count: count == null ? null : _i4.allowInterop(count),
        countReset: countReset == null ? null : _i4.allowInterop(countReset),
        debug: debug == null
            ? null
            : _i4.allowInterop(([
                a0,
                a1,
                a2,
                a3,
                a4,
                a5,
                a6,
                a7,
                a8,
                a9,
              ]) =>
                debug([
                  a0,
                  a1,
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  a9,
                ])),
        dir: dir == null ? null : _i4.allowInterop(dir),
        dirxml: dirxml == null
            ? null
            : _i4.allowInterop(([
                a0,
                a1,
                a2,
                a3,
                a4,
                a5,
                a6,
                a7,
                a8,
                a9,
              ]) =>
                dirxml([
                  a0,
                  a1,
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  a9,
                ])),
        error: error == null
            ? null
            : _i4.allowInterop(([
                a0,
                a1,
                a2,
                a3,
                a4,
                a5,
                a6,
                a7,
                a8,
                a9,
              ]) =>
                error([
                  a0,
                  a1,
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  a9,
                ])),
        group: group == null
            ? null
            : _i4.allowInterop(([
                a0,
                a1,
                a2,
                a3,
                a4,
                a5,
                a6,
                a7,
                a8,
                a9,
              ]) =>
                group([
                  a0,
                  a1,
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  a9,
                ])),
        groupCollapsed: groupCollapsed == null
            ? null
            : _i4.allowInterop(([
                a0,
                a1,
                a2,
                a3,
                a4,
                a5,
                a6,
                a7,
                a8,
                a9,
              ]) =>
                groupCollapsed([
                  a0,
                  a1,
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  a9,
                ])),
        groupEnd: groupEnd == null ? null : _i4.allowInterop(groupEnd),
        info: info == null
            ? null
            : _i4.allowInterop(([
                a0,
                a1,
                a2,
                a3,
                a4,
                a5,
                a6,
                a7,
                a8,
                a9,
              ]) =>
                info([
                  a0,
                  a1,
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  a9,
                ])),
        log: log == null
            ? null
            : _i4.allowInterop(([
                a0,
                a1,
                a2,
                a3,
                a4,
                a5,
                a6,
                a7,
                a8,
                a9,
              ]) =>
                log([
                  a0,
                  a1,
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  a9,
                ])),
        table: table == null ? null : _i4.allowInterop(table),
        time: time == null ? null : _i4.allowInterop(time),
        timeEnd: timeEnd == null ? null : _i4.allowInterop(timeEnd),
        timeLog: timeLog == null
            ? null
            : _i4.allowInterop(([
                _i2.String? v0,
                a0,
                a1,
                a2,
                a3,
                a4,
                a5,
                a6,
                a7,
                a8,
                a9,
              ]) =>
                timeLog(
                  v0,
                  [
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                  ],
                )),
        timeStamp: timeStamp == null ? null : _i4.allowInterop(timeStamp),
        trace: trace == null
            ? null
            : _i4.allowInterop(([
                a0,
                a1,
                a2,
                a3,
                a4,
                a5,
                a6,
                a7,
                a8,
                a9,
              ]) =>
                trace([
                  a0,
                  a1,
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  a9,
                ])),
        warn: warn == null
            ? null
            : _i4.allowInterop(([
                a0,
                a1,
                a2,
                a3,
                a4,
                a5,
                a6,
                a7,
                a8,
                a9,
              ]) =>
                warn([
                  a0,
                  a1,
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  a9,
                ])),
      );
}

extension Console$Typings on Console {
  set assert$(
      void Function([
        _i2.bool?,
        _i2.Iterable<_i2.dynamic>?,
      ]) value) {
    _i4.setProperty(
      this,
      'assert',
      _i4.allowInterop(([
        _i2.bool? v0,
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
        a6,
        a7,
        a8,
        a9,
      ]) =>
          value(
            v0,
            [
              a0,
              a1,
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              a9,
            ],
          )),
    );
  }

  void Function([
    _i2.bool?,
    _i2.Iterable<_i2.dynamic>?,
  ]) get assert$ => ([
        _i2.bool? p0,
        _i2.Iterable<_i2.dynamic>? p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'assert',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
              p1 ?? _i6.undefined,
            ],
          );
  set clear(void Function() value) {
    _i4.setProperty(
      this,
      'clear',
      _i4.allowInterop(value),
    );
  }

  void Function() get clear => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'clear',
        ),
        r'call',
        [this],
      );
  set count(void Function([_i2.String?]) value) {
    _i4.setProperty(
      this,
      'count',
      _i4.allowInterop(value),
    );
  }

  void Function([_i2.String?]) get count =>
      ([_i2.String? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'count',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set countReset(void Function([_i2.String?]) value) {
    _i4.setProperty(
      this,
      'countReset',
      _i4.allowInterop(value),
    );
  }

  void Function([_i2.String?]) get countReset =>
      ([_i2.String? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'countReset',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set debug(void Function([_i2.Iterable<_i2.dynamic>?]) value) {
    _i4.setProperty(
      this,
      'debug',
      _i4.allowInterop(([
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
        a6,
        a7,
        a8,
        a9,
      ]) =>
          value([
            a0,
            a1,
            a2,
            a3,
            a4,
            a5,
            a6,
            a7,
            a8,
            a9,
          ])),
    );
  }

  void Function([_i2.Iterable<_i2.dynamic>?]) get debug =>
      ([_i2.Iterable<_i2.dynamic>? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'debug',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set dir(
      void Function([
        _i2.dynamic,
        _i2.dynamic,
      ]) value) {
    _i4.setProperty(
      this,
      'dir',
      _i4.allowInterop(value),
    );
  }

  void Function([
    _i2.dynamic,
    _i2.dynamic,
  ]) get dir => ([
        _i2.dynamic p0,
        _i2.dynamic p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'dir',
            ),
            r'call',
            [
              this,
              p0,
              p1,
            ],
          );
  set dirxml(void Function([_i2.Iterable<_i2.dynamic>?]) value) {
    _i4.setProperty(
      this,
      'dirxml',
      _i4.allowInterop(([
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
        a6,
        a7,
        a8,
        a9,
      ]) =>
          value([
            a0,
            a1,
            a2,
            a3,
            a4,
            a5,
            a6,
            a7,
            a8,
            a9,
          ])),
    );
  }

  void Function([_i2.Iterable<_i2.dynamic>?]) get dirxml =>
      ([_i2.Iterable<_i2.dynamic>? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'dirxml',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set error(void Function([_i2.Iterable<_i2.dynamic>?]) value) {
    _i4.setProperty(
      this,
      'error',
      _i4.allowInterop(([
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
        a6,
        a7,
        a8,
        a9,
      ]) =>
          value([
            a0,
            a1,
            a2,
            a3,
            a4,
            a5,
            a6,
            a7,
            a8,
            a9,
          ])),
    );
  }

  void Function([_i2.Iterable<_i2.dynamic>?]) get error =>
      ([_i2.Iterable<_i2.dynamic>? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'error',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set group(void Function([_i2.Iterable<_i2.dynamic>?]) value) {
    _i4.setProperty(
      this,
      'group',
      _i4.allowInterop(([
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
        a6,
        a7,
        a8,
        a9,
      ]) =>
          value([
            a0,
            a1,
            a2,
            a3,
            a4,
            a5,
            a6,
            a7,
            a8,
            a9,
          ])),
    );
  }

  void Function([_i2.Iterable<_i2.dynamic>?]) get group =>
      ([_i2.Iterable<_i2.dynamic>? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'group',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set groupCollapsed(void Function([_i2.Iterable<_i2.dynamic>?]) value) {
    _i4.setProperty(
      this,
      'groupCollapsed',
      _i4.allowInterop(([
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
        a6,
        a7,
        a8,
        a9,
      ]) =>
          value([
            a0,
            a1,
            a2,
            a3,
            a4,
            a5,
            a6,
            a7,
            a8,
            a9,
          ])),
    );
  }

  void Function([_i2.Iterable<_i2.dynamic>?]) get groupCollapsed =>
      ([_i2.Iterable<_i2.dynamic>? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'groupCollapsed',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set groupEnd(void Function() value) {
    _i4.setProperty(
      this,
      'groupEnd',
      _i4.allowInterop(value),
    );
  }

  void Function() get groupEnd => () => _i4.callMethod(
        _i4.getProperty(
          this,
          'groupEnd',
        ),
        r'call',
        [this],
      );
  set info(void Function([_i2.Iterable<_i2.dynamic>?]) value) {
    _i4.setProperty(
      this,
      'info',
      _i4.allowInterop(([
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
        a6,
        a7,
        a8,
        a9,
      ]) =>
          value([
            a0,
            a1,
            a2,
            a3,
            a4,
            a5,
            a6,
            a7,
            a8,
            a9,
          ])),
    );
  }

  void Function([_i2.Iterable<_i2.dynamic>?]) get info =>
      ([_i2.Iterable<_i2.dynamic>? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'info',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set log(void Function([_i2.Iterable<_i2.dynamic>?]) value) {
    _i4.setProperty(
      this,
      'log',
      _i4.allowInterop(([
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
        a6,
        a7,
        a8,
        a9,
      ]) =>
          value([
            a0,
            a1,
            a2,
            a3,
            a4,
            a5,
            a6,
            a7,
            a8,
            a9,
          ])),
    );
  }

  void Function([_i2.Iterable<_i2.dynamic>?]) get log =>
      ([_i2.Iterable<_i2.dynamic>? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'log',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set table(
      void Function([
        _i2.dynamic,
        _i2.List<_i2.String>?,
      ]) value) {
    _i4.setProperty(
      this,
      'table',
      _i4.allowInterop(value),
    );
  }

  void Function([
    _i2.dynamic,
    _i2.List<_i2.String>?,
  ]) get table => ([
        _i2.dynamic p0,
        _i2.List<_i2.String>? p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'table',
            ),
            r'call',
            [
              this,
              p0,
              p1 ?? _i6.undefined,
            ],
          );
  set time(void Function([_i2.String?]) value) {
    _i4.setProperty(
      this,
      'time',
      _i4.allowInterop(value),
    );
  }

  void Function([_i2.String?]) get time => ([_i2.String? p0]) => _i4.callMethod(
        _i4.getProperty(
          this,
          'time',
        ),
        r'call',
        [
          this,
          p0 ?? _i6.undefined,
        ],
      );
  set timeEnd(void Function([_i2.String?]) value) {
    _i4.setProperty(
      this,
      'timeEnd',
      _i4.allowInterop(value),
    );
  }

  void Function([_i2.String?]) get timeEnd =>
      ([_i2.String? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'timeEnd',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set timeLog(
      void Function([
        _i2.String?,
        _i2.Iterable<_i2.dynamic>?,
      ]) value) {
    _i4.setProperty(
      this,
      'timeLog',
      _i4.allowInterop(([
        _i2.String? v0,
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
        a6,
        a7,
        a8,
        a9,
      ]) =>
          value(
            v0,
            [
              a0,
              a1,
              a2,
              a3,
              a4,
              a5,
              a6,
              a7,
              a8,
              a9,
            ],
          )),
    );
  }

  void Function([
    _i2.String?,
    _i2.Iterable<_i2.dynamic>?,
  ]) get timeLog => ([
        _i2.String? p0,
        _i2.Iterable<_i2.dynamic>? p1,
      ]) =>
          _i4.callMethod(
            _i4.getProperty(
              this,
              'timeLog',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
              p1 ?? _i6.undefined,
            ],
          );
  set timeStamp(void Function([_i2.String?]) value) {
    _i4.setProperty(
      this,
      'timeStamp',
      _i4.allowInterop(value),
    );
  }

  void Function([_i2.String?]) get timeStamp =>
      ([_i2.String? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'timeStamp',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set trace(void Function([_i2.Iterable<_i2.dynamic>?]) value) {
    _i4.setProperty(
      this,
      'trace',
      _i4.allowInterop(([
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
        a6,
        a7,
        a8,
        a9,
      ]) =>
          value([
            a0,
            a1,
            a2,
            a3,
            a4,
            a5,
            a6,
            a7,
            a8,
            a9,
          ])),
    );
  }

  void Function([_i2.Iterable<_i2.dynamic>?]) get trace =>
      ([_i2.Iterable<_i2.dynamic>? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'trace',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
  set warn(void Function([_i2.Iterable<_i2.dynamic>?]) value) {
    _i4.setProperty(
      this,
      'warn',
      _i4.allowInterop(([
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
        a6,
        a7,
        a8,
        a9,
      ]) =>
          value([
            a0,
            a1,
            a2,
            a3,
            a4,
            a5,
            a6,
            a7,
            a8,
            a9,
          ])),
    );
  }

  void Function([_i2.Iterable<_i2.dynamic>?]) get warn =>
      ([_i2.Iterable<_i2.dynamic>? p0]) => _i4.callMethod(
            _i4.getProperty(
              this,
              'warn',
            ),
            r'call',
            [
              this,
              p0 ?? _i6.undefined,
            ],
          );
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class EncodedVideoChunkOutputCallback {
  external factory EncodedVideoChunkOutputCallback._();

  factory EncodedVideoChunkOutputCallback() =>
      EncodedVideoChunkOutputCallback._();
}

extension EncodedVideoChunkOutputCallback$Typings
    on EncodedVideoChunkOutputCallback {
  void call(
    _i3.EncodedVideoChunk chunk, [
    _i3.EncodedVideoChunkMetadata? metadata,
  ]) {
    _i4.callMethod(
      this,
      'call',
      [
        this,
        chunk,
        metadata ?? _i6.undefined,
      ],
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class FrameRequestCallback {
  external factory FrameRequestCallback._();

  factory FrameRequestCallback() => FrameRequestCallback._();
}

extension FrameRequestCallback$Typings on FrameRequestCallback {
  void call(_i2.num time) {
    _i4.callMethod(
      this,
      'call',
      [
        this,
        time,
      ],
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class LockGrantedCallback {
  external factory LockGrantedCallback._();

  factory LockGrantedCallback() => LockGrantedCallback._();
}

extension LockGrantedCallback$Typings on LockGrantedCallback {
  _i2.dynamic call([_i3.Lock? lock]) => _i4.callMethod(
        this,
        'call',
        [
          this,
          lock ?? _i6.undefined,
        ],
      );
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class OnErrorEventHandlerNonNull {
  external factory OnErrorEventHandlerNonNull._();

  factory OnErrorEventHandlerNonNull() => OnErrorEventHandlerNonNull._();
}

extension OnErrorEventHandlerNonNull$Typings on OnErrorEventHandlerNonNull {
  _i2.dynamic call(
    _i2.Object event, [
    _i2.String? source,
    _i2.num? lineno,
    _i2.num? colno,
    _i9.Error? error,
  ]) =>
      _i4.callMethod(
        this,
        'call',
        [
          this,
          event,
          source ?? _i6.undefined,
          lineno ?? _i6.undefined,
          colno ?? _i6.undefined,
          error ?? _i6.undefined,
        ],
      );
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class PerformanceObserverCallback {
  external factory PerformanceObserverCallback._();

  factory PerformanceObserverCallback() => PerformanceObserverCallback._();
}

extension PerformanceObserverCallback$Typings on PerformanceObserverCallback {
  void call(
    _i3.PerformanceObserverEntryList entries,
    _i3.PerformanceObserver observer,
  ) {
    _i4.callMethod(
      this,
      'call',
      [
        this,
        entries,
        observer,
      ],
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class QueuingStrategySize<T> {
  external factory QueuingStrategySize._();

  factory QueuingStrategySize() => QueuingStrategySize._();
}

extension QueuingStrategySize$Typings<T> on QueuingStrategySize<T> {
  _i2.num call(T chunk) => _i4.callMethod(
        this,
        'call',
        [
          this,
          chunk,
        ],
      );
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class ReportingObserverCallback {
  external factory ReportingObserverCallback._();

  factory ReportingObserverCallback() => ReportingObserverCallback._();
}

extension ReportingObserverCallback$Typings on ReportingObserverCallback {
  void call(
    _i2.List<_i3.Report> reports,
    _i3.ReportingObserver observer,
  ) {
    _i4.callMethod(
      this,
      'call',
      [
        this,
        reports,
        observer,
      ],
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class TransformerFlushCallback<O> {
  external factory TransformerFlushCallback._();

  factory TransformerFlushCallback() => TransformerFlushCallback._();
}

extension TransformerFlushCallback$Typings<O> on TransformerFlushCallback<O> {
  _i7.FutureOr<void> call(_i3.TransformStreamDefaultController<O> controller) =>
      _i4.callMethod(
        this,
        'call',
        [
          this,
          controller,
        ],
      );
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class TransformerStartCallback<O> {
  external factory TransformerStartCallback._();

  factory TransformerStartCallback() => TransformerStartCallback._();
}

extension TransformerStartCallback$Typings<O> on TransformerStartCallback<O> {
  _i2.dynamic call(_i3.TransformStreamDefaultController<O> controller) =>
      _i4.callMethod(
        this,
        'call',
        [
          this,
          controller,
        ],
      );
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class TransformerTransformCallback<I, O> {
  external factory TransformerTransformCallback._();

  factory TransformerTransformCallback() => TransformerTransformCallback._();
}

extension TransformerTransformCallback$Typings<I, O>
    on TransformerTransformCallback<I, O> {
  _i7.FutureOr<void> call(
    I chunk,
    _i3.TransformStreamDefaultController<O> controller,
  ) =>
      _i4.callMethod(
        this,
        'call',
        [
          this,
          chunk,
          controller,
        ],
      );
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class UnderlyingSinkAbortCallback {
  external factory UnderlyingSinkAbortCallback._();

  factory UnderlyingSinkAbortCallback() => UnderlyingSinkAbortCallback._();
}

extension UnderlyingSinkAbortCallback$Typings on UnderlyingSinkAbortCallback {
  _i7.FutureOr<void> call([_i2.dynamic reason]) => _i4.callMethod(
        this,
        'call',
        [
          this,
          reason,
        ],
      );
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class UnderlyingSinkCloseCallback {
  external factory UnderlyingSinkCloseCallback._();

  factory UnderlyingSinkCloseCallback() => UnderlyingSinkCloseCallback._();
}

extension UnderlyingSinkCloseCallback$Typings on UnderlyingSinkCloseCallback {
  _i7.FutureOr<void> call() => _i4.callMethod(
        this,
        'call',
        [this],
      );
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class UnderlyingSinkStartCallback {
  external factory UnderlyingSinkStartCallback._();

  factory UnderlyingSinkStartCallback() => UnderlyingSinkStartCallback._();
}

extension UnderlyingSinkStartCallback$Typings on UnderlyingSinkStartCallback {
  _i2.dynamic call(_i3.WritableStreamDefaultController controller) =>
      _i4.callMethod(
        this,
        'call',
        [
          this,
          controller,
        ],
      );
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class UnderlyingSinkWriteCallback<W> {
  external factory UnderlyingSinkWriteCallback._();

  factory UnderlyingSinkWriteCallback() => UnderlyingSinkWriteCallback._();
}

extension UnderlyingSinkWriteCallback$Typings<W>
    on UnderlyingSinkWriteCallback<W> {
  _i7.FutureOr<void> call(
    W chunk,
    _i3.WritableStreamDefaultController controller,
  ) =>
      _i4.callMethod(
        this,
        'call',
        [
          this,
          chunk,
          controller,
        ],
      );
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class UnderlyingSourceCancelCallback {
  external factory UnderlyingSourceCancelCallback._();

  factory UnderlyingSourceCancelCallback() =>
      UnderlyingSourceCancelCallback._();
}

extension UnderlyingSourceCancelCallback$Typings
    on UnderlyingSourceCancelCallback {
  _i7.FutureOr<void> call([_i2.dynamic reason]) => _i4.callMethod(
        this,
        'call',
        [
          this,
          reason,
        ],
      );
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class UnderlyingSourcePullCallback<R> {
  external factory UnderlyingSourcePullCallback._();

  factory UnderlyingSourcePullCallback() => UnderlyingSourcePullCallback._();
}

extension UnderlyingSourcePullCallback$Typings<R>
    on UnderlyingSourcePullCallback<R> {
  _i7.FutureOr<void> call(_i2.Object controller) => _i4.callMethod(
        this,
        'call',
        [
          this,
          controller,
        ],
      );
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class UnderlyingSourceStartCallback<R> {
  external factory UnderlyingSourceStartCallback._();

  factory UnderlyingSourceStartCallback() => UnderlyingSourceStartCallback._();
}

extension UnderlyingSourceStartCallback$Typings<R>
    on UnderlyingSourceStartCallback<R> {
  _i2.dynamic call(_i2.Object controller) => _i4.callMethod(
        this,
        'call',
        [
          this,
          controller,
        ],
      );
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class VideoFrameOutputCallback {
  external factory VideoFrameOutputCallback._();

  factory VideoFrameOutputCallback() => VideoFrameOutputCallback._();
}

extension VideoFrameOutputCallback$Typings on VideoFrameOutputCallback {
  void call(_i3.VideoFrame output) {
    _i4.callMethod(
      this,
      'call',
      [
        this,
        output,
      ],
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class VoidFunction {
  external factory VoidFunction._();

  factory VoidFunction() => VoidFunction._();
}

extension VoidFunction$Typings on VoidFunction {
  void call() {
    _i4.callMethod(
      this,
      'call',
      [this],
    );
  }
}

/* Source:  */
@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class WebCodecsErrorCallback {
  external factory WebCodecsErrorCallback._();

  factory WebCodecsErrorCallback() => WebCodecsErrorCallback._();
}

extension WebCodecsErrorCallback$Typings on WebCodecsErrorCallback {
  void call(_i3.DOMException error) {
    _i4.callMethod(
      this,
      'call',
      [
        this,
        error,
      ],
    );
  }
}

/// Aborts dedicatedWorkerGlobal.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/close)
void close() {
  _i4.callMethod(
    _self,
    'close',
    [],
  );
}

/// Clones message and transmits it to the Worker object associated with dedicatedWorkerGlobal. transfer can be passed as a list of objects that are to be transferred rather than cloned.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/postMessage)
void _postMessage$1(
  _i2.List<_i2.Object> transfer, [
  _i2.dynamic message,
]) {
  _i4.callMethod(
    _self,
    'postMessage',
    [
      message,
      transfer,
    ],
  );
}

/// Clones message and transmits it to the Worker object associated with dedicatedWorkerGlobal. transfer can be passed as a list of objects that are to be transferred rather than cloned.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/postMessage)
void _postMessage$2([
  _i2.dynamic message,
  _i3.StructuredSerializeOptions? options,
]) {
  _i4.callMethod(
    _self,
    'postMessage',
    [
      message,
      options ?? _i6.undefined,
    ],
  );
}

/// Overload accessor: $1, $2
({
  /// Clones message and transmits it to the Worker object associated with dedicatedWorkerGlobal. transfer can be passed as a list of objects that are to be transferred rather than cloned.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/postMessage)
  void Function(
    _i2.List<_i2.Object> transfer, [
    _i2.dynamic message,
  ]) $1,

  /// Clones message and transmits it to the Worker object associated with dedicatedWorkerGlobal. transfer can be passed as a list of objects that are to be transferred rather than cloned.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/postMessage)
  void Function([
    _i2.dynamic message,
    _i3.StructuredSerializeOptions? options,
  ]) $2,
}) get postMessage => (
      $1: _postMessage$1,
      $2: _postMessage$2,
    );

/// Dispatches a synthetic event event to target and returns true if either event's cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/dispatchEvent)
_i2.bool _dispatchEvent$1(_i3.Event event) => _i4.callMethod(
      _self,
      'dispatchEvent',
      [event],
    );

/// Dispatches a synthetic event event to target and returns true if either event's cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/dispatchEvent)
_i2.bool _dispatchEvent$2(_i3.Event event) => _i4.callMethod(
      _self,
      'dispatchEvent',
      [event],
    );

/// Overload accessor: $1, $2
({
  /// Dispatches a synthetic event event to target and returns true if either event's cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/dispatchEvent)
  _i2.bool Function(_i3.Event event) $1,

  /// Dispatches a synthetic event event to target and returns true if either event's cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise.
  ///
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/dispatchEvent)
  _i2.bool Function(_i3.Event event) $2,
}) get dispatchEvent => (
      $1: _dispatchEvent$1,
      $2: _dispatchEvent$2,
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/atob)
_i2.String atob(_i2.String data) => _i4.callMethod(
      _self,
      'atob',
      [data],
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/btoa)
_i2.String btoa(_i2.String data) => _i4.callMethod(
      _self,
      'btoa',
      [data],
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/clearInterval)
void clearInterval([_i2.num? id]) {
  _i4.callMethod(
    _self,
    'clearInterval',
    [id ?? _i6.undefined],
  );
}

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/clearTimeout)
void clearTimeout([_i2.num? id]) {
  _i4.callMethod(
    _self,
    'clearTimeout',
    [id ?? _i6.undefined],
  );
}

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/createImageBitmap)
_i2.Future<_i3.ImageBitmap> _createImageBitmap$1(
  _i2.Object image, [
  _i3.ImageBitmapOptions? options,
]) =>
    _i4.promiseToFuture(_i4.callMethod(
      _self,
      'createImageBitmap',
      [
        image,
        options ?? _i6.undefined,
      ],
    ));

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/createImageBitmap)
_i2.Future<_i3.ImageBitmap> _createImageBitmap$2(
  _i2.Object image,
  _i2.num sx,
  _i2.num sy,
  _i2.num sw,
  _i2.num sh, [
  _i3.ImageBitmapOptions? options,
]) =>
    _i4.promiseToFuture(_i4.callMethod(
      _self,
      'createImageBitmap',
      [
        image,
        sx,
        sy,
        sw,
        sh,
        options ?? _i6.undefined,
      ],
    ));

/// Overload accessor: $1, $2
({
  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/createImageBitmap)
  _i2.Future<_i3.ImageBitmap> Function(
    _i2.Object image, [
    _i3.ImageBitmapOptions? options,
  ]) $1,

  /// [MDN Reference](https://developer.mozilla.org/docs/Web/API/createImageBitmap)
  _i2.Future<_i3.ImageBitmap> Function(
    _i2.Object image,
    _i2.num sx,
    _i2.num sy,
    _i2.num sw,
    _i2.num sh, [
    _i3.ImageBitmapOptions? options,
  ]) $2,
}) get createImageBitmap => (
      $1: _createImageBitmap$1,
      $2: _createImageBitmap$2,
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/fetch)
_i2.Future<_i3.Response> fetch(
  _i2.Object input, [
  _i3.RequestInit? init,
]) =>
    _i4.promiseToFuture(_i4.callMethod(
      _self,
      'fetch',
      [
        input,
        init ?? _i6.undefined,
      ],
    ));

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/queueMicrotask)
void queueMicrotask(_i3.VoidFunction callback) {
  _i4.callMethod(
    _self,
    'queueMicrotask',
    [callback],
  );
}

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/reportError)
void reportError([_i2.dynamic e]) {
  _i4.callMethod(
    _self,
    'reportError',
    [e],
  );
}

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/setInterval)
_i2.num setInterval(
  _i2.Object handler, [
  _i2.num? timeout,
  _i2.Iterable<_i2.dynamic>? arguments,
]) =>
    _i4.callMethod(
      _self,
      'setInterval',
      [
        handler,
        timeout ?? _i6.undefined,
        ...?arguments,
      ],
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/setTimeout)
_i2.num setTimeout(
  _i2.Object handler, [
  _i2.num? timeout,
  _i2.Iterable<_i2.dynamic>? arguments,
]) =>
    _i4.callMethod(
      _self,
      'setTimeout',
      [
        handler,
        timeout ?? _i6.undefined,
        ...?arguments,
      ],
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/structuredClone)
T structuredClone<T>(
  T value, [
  _i3.StructuredSerializeOptions? options,
]) =>
    _i4.callMethod(
      _self,
      'structuredClone',
      [
        value,
        options ?? _i6.undefined,
      ],
    );
void cancelAnimationFrame(_i2.num handle) {
  _i4.callMethod(
    _self,
    'cancelAnimationFrame',
    [handle],
  );
}

_i2.num requestAnimationFrame(_i3.FrameRequestCallback callback) =>
    _i4.callMethod(
      _self,
      'requestAnimationFrame',
      [callback],
    );
void _addEventListener$1<K$>(
  _i3.DedicatedWorkerGlobalScopeEventMap<K$> type,
  _i2.dynamic Function(K$) listener, [
  _i2.Object? options,
]) {
  _i4.callMethod(
    _self,
    'addEventListener',
    [
      type.name,
      _i4.allowInterop(listener),
      options ?? _i6.undefined,
    ],
  );
}

void _addEventListener$2(
  _i2.String type,
  _i2.Object listener, [
  _i2.Object? options,
]) {
  _i4.callMethod(
    _self,
    'addEventListener',
    [
      type,
      listener,
      options ?? _i6.undefined,
    ],
  );
}

/// Overload accessor: $1, $2
({
  void Function<K$>(
    _i3.DedicatedWorkerGlobalScopeEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) $1,
  void Function(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) $2,
}) get addEventListener => (
      $1: _addEventListener$1,
      $2: _addEventListener$2,
    );
void _removeEventListener$1<K$>(
  _i3.DedicatedWorkerGlobalScopeEventMap<K$> type,
  _i2.dynamic Function(K$) listener, [
  _i2.Object? options,
]) {
  _i4.callMethod(
    _self,
    'removeEventListener',
    [
      type.name,
      _i4.allowInterop(listener),
      options ?? _i6.undefined,
    ],
  );
}

void _removeEventListener$2(
  _i2.String type,
  _i2.Object listener, [
  _i2.Object? options,
]) {
  _i4.callMethod(
    _self,
    'removeEventListener',
    [
      type,
      listener,
      options ?? _i6.undefined,
    ],
  );
}

/// Overload accessor: $1, $2
({
  void Function<K$>(
    _i3.DedicatedWorkerGlobalScopeEventMap<K$> type,
    _i2.dynamic Function(K$) listener, [
    _i2.Object? options,
  ]) $1,
  void Function(
    _i2.String type,
    _i2.Object listener, [
    _i2.Object? options,
  ]) $2,
}) get removeEventListener => (
      $1: _removeEventListener$1,
      $2: _removeEventListener$2,
    );

/// A controller object that allows you to abort one or more DOM requests as and when desired.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortController)
_i2.dynamic get abortController => _i4.getProperty(
      _self,
      'AbortController',
    );

/// A signal object that allows you to communicate with a DOM request (such as a Fetch) and abort it if required via an AbortController object.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal)
_i2.dynamic get abortSignal => _i4.getProperty(
      _self,
      'AbortSignal',
    );

/// A file-like object of immutable, raw data. Blobs represent data that isn't necessarily in a JavaScript-native format. The File interface is based on Blob, inheriting blob functionality and expanding it to support files on the user's system.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob)
_i2.dynamic get blob => _i4.getProperty(
      _self,
      'Blob',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/BroadcastChannel)
_i2.dynamic get broadcastChannel => _i4.getProperty(
      _self,
      'BroadcastChannel',
    );

/// This Streams API interface provides a built-in byte length queuing strategy that can be used when constructing streams.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ByteLengthQueuingStrategy)
_i2.dynamic get byteLengthQueuingStrategy => _i4.getProperty(
      _self,
      'ByteLengthQueuingStrategy',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSImageValue)
_i2.dynamic get cssImageValue => _i4.getProperty(
      _self,
      'CSSImageValue',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeywordValue)
_i2.dynamic get cssKeywordValue => _i4.getProperty(
      _self,
      'CSSKeywordValue',
    );
_i2.dynamic get cssMathClamp => _i4.getProperty(
      _self,
      'CSSMathClamp',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathInvert)
_i2.dynamic get cssMathInvert => _i4.getProperty(
      _self,
      'CSSMathInvert',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathMax)
_i2.dynamic get cssMathMax => _i4.getProperty(
      _self,
      'CSSMathMax',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathMin)
_i2.dynamic get cssMathMin => _i4.getProperty(
      _self,
      'CSSMathMin',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathNegate)
_i2.dynamic get cssMathNegate => _i4.getProperty(
      _self,
      'CSSMathNegate',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathProduct)
_i2.dynamic get cssMathProduct => _i4.getProperty(
      _self,
      'CSSMathProduct',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathSum)
_i2.dynamic get cssMathSum => _i4.getProperty(
      _self,
      'CSSMathSum',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathValue)
_i2.dynamic get cssMathValue => _i4.getProperty(
      _self,
      'CSSMathValue',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMatrixComponent)
_i2.dynamic get cssMatrixComponent => _i4.getProperty(
      _self,
      'CSSMatrixComponent',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericArray)
_i2.dynamic get cssNumericArray => _i4.getProperty(
      _self,
      'CSSNumericArray',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericValue)
_i2.dynamic get cssNumericValue => _i4.getProperty(
      _self,
      'CSSNumericValue',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSPerspective)
_i2.dynamic get cssPerspective => _i4.getProperty(
      _self,
      'CSSPerspective',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRotate)
_i2.dynamic get cssRotate => _i4.getProperty(
      _self,
      'CSSRotate',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSScale)
_i2.dynamic get cssScale => _i4.getProperty(
      _self,
      'CSSScale',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkew)
_i2.dynamic get cssSkew => _i4.getProperty(
      _self,
      'CSSSkew',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkewX)
_i2.dynamic get cssSkewX => _i4.getProperty(
      _self,
      'CSSSkewX',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkewY)
_i2.dynamic get cssSkewY => _i4.getProperty(
      _self,
      'CSSSkewY',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleValue)
_i2.dynamic get cssStyleValue => _i4.getProperty(
      _self,
      'CSSStyleValue',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTransformComponent)
_i2.dynamic get cssTransformComponent => _i4.getProperty(
      _self,
      'CSSTransformComponent',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTransformValue)
_i2.dynamic get cssTransformValue => _i4.getProperty(
      _self,
      'CSSTransformValue',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTranslate)
_i2.dynamic get cssTranslate => _i4.getProperty(
      _self,
      'CSSTranslate',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSUnitValue)
_i2.dynamic get cssUnitValue => _i4.getProperty(
      _self,
      'CSSUnitValue',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSUnparsedValue)
_i2.dynamic get cssUnparsedValue => _i4.getProperty(
      _self,
      'CSSUnparsedValue',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSVariableReferenceValue)
_i2.dynamic get cssVariableReferenceValue => _i4.getProperty(
      _self,
      'CSSVariableReferenceValue',
    );

/// Provides a storage mechanism for Request / Response object pairs that are cached, for example as part of the ServiceWorker life cycle. Note that the Cache interface is exposed to windowed scopes as well as workers. You don't have to use it in conjunction with service workers, even though it is defined in the service worker spec.
/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Cache)
_i2.dynamic get cache => _i4.getProperty(
      _self,
      'Cache',
    );

/// The storage for Cache objects.
/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CacheStorage)
_i2.dynamic get cacheStorage => _i4.getProperty(
      _self,
      'CacheStorage',
    );

/// An opaque object describing a gradient. It is returned by the methods CanvasRenderingContext2D.createLinearGradient() or CanvasRenderingContext2D.createRadialGradient().
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasGradient)
_i2.dynamic get canvasGradient => _i4.getProperty(
      _self,
      'CanvasGradient',
    );

/// An opaque object describing a pattern, based on an image, a canvas, or a video, created by the CanvasRenderingContext2D.createPattern() method.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasPattern)
_i2.dynamic get canvasPattern => _i4.getProperty(
      _self,
      'CanvasPattern',
    );

/// The Client interface represents an executable context such as a Worker, or a SharedWorker. Window clients are represented by the more-specific WindowClient. You can get Client/WindowClient objects from methods such as Clients.matchAll() and Clients.get().
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Client)
_i2.dynamic get client => _i4.getProperty(
      _self,
      'Client',
    );

/// Provides access to Client objects. Access it via self.clients within a service worker.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Clients)
_i2.dynamic get clients => _i4.getProperty(
      _self,
      'Clients',
    );

/// A CloseEvent is sent to clients using WebSockets when the connection is closed. This is delivered to the listener indicated by the WebSocket object's onclose attribute.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CloseEvent)
_i2.dynamic get closeEvent => _i4.getProperty(
      _self,
      'CloseEvent',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CompressionStream)
_i2.dynamic get compressionStream => _i4.getProperty(
      _self,
      'CompressionStream',
    );

/// This Streams API interface provides a built-in byte length queuing strategy that can be used when constructing streams.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CountQueuingStrategy)
_i2.dynamic get countQueuingStrategy => _i4.getProperty(
      _self,
      'CountQueuingStrategy',
    );

/// The CryptoKey dictionary of the Web Crypto API represents a cryptographic key.
/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CryptoKey)
_i2.dynamic get cryptoKey => _i4.getProperty(
      _self,
      'CryptoKey',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/CustomEvent)
_i2.dynamic get customEvent => _i4.getProperty(
      _self,
      'CustomEvent',
    );

/// An abnormal event (called an exception) which occurs as a result of calling a method or accessing a property of a web API.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMException)
_i2.dynamic get domException => _i4.getProperty(
      _self,
      'DOMException',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix)
_i2.dynamic get domMatrix => _i4.getProperty(
      _self,
      'DOMMatrix',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly)
_i2.dynamic get domMatrixReadOnly => _i4.getProperty(
      _self,
      'DOMMatrixReadOnly',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPoint)
_i2.dynamic get domPoint => _i4.getProperty(
      _self,
      'DOMPoint',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly)
_i2.dynamic get domPointReadOnly => _i4.getProperty(
      _self,
      'DOMPointReadOnly',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMQuad)
_i2.dynamic get domQuad => _i4.getProperty(
      _self,
      'DOMQuad',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRect)
_i2.dynamic get domRect => _i4.getProperty(
      _self,
      'DOMRect',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly)
_i2.dynamic get domRectReadOnly => _i4.getProperty(
      _self,
      'DOMRectReadOnly',
    );

/// A type returned by some APIs which contains a list of DOMString (strings).
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMStringList)
_i2.dynamic get domStringList => _i4.getProperty(
      _self,
      'DOMStringList',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DecompressionStream)
_i2.dynamic get decompressionStream => _i4.getProperty(
      _self,
      'DecompressionStream',
    );

/// (the Worker global scope) is accessible through the self keyword. Some additional global functions, namespaces objects, and constructors, not typically associated with the worker global scope, but available on it, are listed in the JavaScript Reference. See also: Functions available to workers.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope)
_i2.dynamic get dedicatedWorkerGlobalScope => _i4.getProperty(
      _self,
      'DedicatedWorkerGlobalScope',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk)
_i2.dynamic get encodedVideoChunk => _i4.getProperty(
      _self,
      'EncodedVideoChunk',
    );

/// Events providing information related to errors in scripts or in files.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ErrorEvent)
_i2.dynamic get errorEvent => _i4.getProperty(
      _self,
      'ErrorEvent',
    );

/// An event which takes place in the DOM.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event)
_i2.dynamic get event => _i4.getProperty(
      _self,
      'Event',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventSource)
_i2.dynamic get eventSource => _i4.getProperty(
      _self,
      'EventSource',
    );

/// EventTarget is a DOM interface implemented by objects that can receive events and may have listeners for them.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget)
_i2.dynamic get eventTarget => _i4.getProperty(
      _self,
      'EventTarget',
    );

/// Extends the lifetime of the install and activate events dispatched on the global scope as part of the service worker lifecycle. This ensures that any functional events (like FetchEvent) are not dispatched until it upgrades database schemas and deletes the outdated cache entries.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ExtendableEvent)
_i2.dynamic get extendableEvent => _i4.getProperty(
      _self,
      'ExtendableEvent',
    );

/// This ServiceWorker API interface represents the event object of a message event fired on a service worker (when a channel message is received on the ServiceWorkerGlobalScope from another context) — extends the lifetime of such events.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ExtendableMessageEvent)
_i2.dynamic get extendableMessageEvent => _i4.getProperty(
      _self,
      'ExtendableMessageEvent',
    );

/// This is the event type for fetch events dispatched on the service worker global scope. It contains information about the fetch, including the request and how the receiver will treat the response. It provides the event.respondWith() method, which allows us to provide a response to this fetch.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FetchEvent)
_i2.dynamic get fetchEvent => _i4.getProperty(
      _self,
      'FetchEvent',
    );

/// Provides information about files and allows JavaScript in a web page to access their content.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/File)
_i2.dynamic get file => _i4.getProperty(
      _self,
      'File',
    );

/// An object of this type is returned by the files property of the HTML <input> element; this lets you access the list of files selected with the <input type="file"> element. It's also used for a list of files dropped into web content when using the drag and drop API; see the DataTransfer object for details on this usage.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileList)
_i2.dynamic get fileList => _i4.getProperty(
      _self,
      'FileList',
    );

/// Lets web applications asynchronously read the contents of files (or raw data buffers) stored on the user's computer, using File or Blob objects to specify the file or data to read.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader)
_i2.dynamic get fileReader => _i4.getProperty(
      _self,
      'FileReader',
    );

/// Allows to read File or Blob objects in a synchronous way.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReaderSync)
_i2.dynamic get fileReaderSync => _i4.getProperty(
      _self,
      'FileReaderSync',
    );

/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryHandle)
_i2.dynamic get fileSystemDirectoryHandle => _i4.getProperty(
      _self,
      'FileSystemDirectoryHandle',
    );

/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemFileHandle)
_i2.dynamic get fileSystemFileHandle => _i4.getProperty(
      _self,
      'FileSystemFileHandle',
    );

/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemHandle)
_i2.dynamic get fileSystemHandle => _i4.getProperty(
      _self,
      'FileSystemHandle',
    );

/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemSyncAccessHandle)
_i2.dynamic get fileSystemSyncAccessHandle => _i4.getProperty(
      _self,
      'FileSystemSyncAccessHandle',
    );

/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemWritableFileStream)
_i2.dynamic get fileSystemWritableFileStream => _i4.getProperty(
      _self,
      'FileSystemWritableFileStream',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace)
_i2.dynamic get fontFace => _i4.getProperty(
      _self,
      'FontFace',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSet)
_i2.dynamic get fontFaceSet => _i4.getProperty(
      _self,
      'FontFaceSet',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSetLoadEvent)
_i2.dynamic get fontFaceSetLoadEvent => _i4.getProperty(
      _self,
      'FontFaceSetLoadEvent',
    );

/// Provides a way to easily construct a set of key/value pairs representing form fields and their values, which can then be easily sent using the XMLHttpRequest.send() method. It uses the same format a form would use if the encoding type were set to "multipart/form-data".
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData)
_i2.dynamic get formData => _i4.getProperty(
      _self,
      'FormData',
    );

/// This Fetch API interface allows you to perform various actions on HTTP request and response headers. These actions include retrieving, setting, adding to, and removing. A Headers object has an associated header list, which is initially empty and consists of zero or more name and value pairs.  You can add to this using methods like append() (see Examples.) In all methods of this interface, header names are matched by case-insensitive byte sequence.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Headers)
_i2.dynamic get headers => _i4.getProperty(
      _self,
      'Headers',
    );

/// This IndexedDB API interface represents a cursor for traversing or iterating over multiple records in a database.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor)
_i2.dynamic get idbCursor => _i4.getProperty(
      _self,
      'IDBCursor',
    );

/// This IndexedDB API interface represents a cursor for traversing or iterating over multiple records in a database. It is the same as the IDBCursor, except that it includes the value property.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursorWithValue)
_i2.dynamic get idbCursorWithValue => _i4.getProperty(
      _self,
      'IDBCursorWithValue',
    );

/// This IndexedDB API interface provides a connection to a database; you can use an IDBDatabase object to open a transaction on your database then create, manipulate, and delete objects (data) in that database. The interface provides the only way to get and manage versions of the database.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase)
_i2.dynamic get idbDatabase => _i4.getProperty(
      _self,
      'IDBDatabase',
    );

/// In the following code snippet, we make a request to open a database, and include handlers for the success and error cases. For a full working example, see our To-do Notifications app (view example live.)
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBFactory)
_i2.dynamic get idbFactory => _i4.getProperty(
      _self,
      'IDBFactory',
    );

/// IDBIndex interface of the IndexedDB API provides asynchronous access to an index in a database. An index is a kind of object store for looking up records in another object store, called the referenced object store. You use this interface to retrieve data.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex)
_i2.dynamic get idbIndex => _i4.getProperty(
      _self,
      'IDBIndex',
    );

/// A key range can be a single value or a range with upper and lower bounds or endpoints. If the key range has both upper and lower bounds, then it is bounded; if it has no bounds, it is unbounded. A bounded key range can either be open (the endpoints are excluded) or closed (the endpoints are included). To retrieve all keys within a certain range, you can use the following code constructs:
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange)
_i2.dynamic get idbKeyRange => _i4.getProperty(
      _self,
      'IDBKeyRange',
    );

/// This example shows a variety of different uses of object stores, from updating the data structure with IDBObjectStore.createIndex inside an onupgradeneeded function, to adding a new item to our object store with IDBObjectStore.add. For a full working example, see our To-do Notifications app (view example live.)
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore)
_i2.dynamic get idbObjectStore => _i4.getProperty(
      _self,
      'IDBObjectStore',
    );

/// Also inherits methods from its parents IDBRequest and EventTarget.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBOpenDBRequest)
_i2.dynamic get idbOpenDBRequest => _i4.getProperty(
      _self,
      'IDBOpenDBRequest',
    );

/// The request object does not initially contain any information about the result of the operation, but once information becomes available, an event is fired on the request, and the information becomes available through the properties of the IDBRequest instance.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBRequest)
_i2.dynamic get idbRequest => _i4.getProperty(
      _self,
      'IDBRequest',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction)
_i2.dynamic get idbTransaction => _i4.getProperty(
      _self,
      'IDBTransaction',
    );

/// This IndexedDB API interface indicates that the version of the database has changed, as the result of an IDBOpenDBRequest.onupgradeneeded event handler function.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBVersionChangeEvent)
_i2.dynamic get idbVersionChangeEvent => _i4.getProperty(
      _self,
      'IDBVersionChangeEvent',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageBitmap)
_i2.dynamic get imageBitmap => _i4.getProperty(
      _self,
      'ImageBitmap',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageBitmapRenderingContext)
_i2.dynamic get imageBitmapRenderingContext => _i4.getProperty(
      _self,
      'ImageBitmapRenderingContext',
    );

/// The underlying pixel data of an area of a <canvas> element. It is created using the ImageData() constructor or creator methods on the CanvasRenderingContext2D object associated with a canvas: createImageData() and getImageData(). It can also be used to set a part of the canvas by using putImageData().
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageData)
_i2.dynamic get imageData => _i4.getProperty(
      _self,
      'ImageData',
    );

/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Lock)
_i2.dynamic get lock => _i4.getProperty(
      _self,
      'Lock',
    );

/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/LockManager)
_i2.dynamic get lockManager => _i4.getProperty(
      _self,
      'LockManager',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaCapabilities)
_i2.dynamic get mediaCapabilities => _i4.getProperty(
      _self,
      'MediaCapabilities',
    );

/// This Channel Messaging API interface allows us to create a new message channel and send data through it via its two MessagePort properties.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageChannel)
_i2.dynamic get messageChannel => _i4.getProperty(
      _self,
      'MessageChannel',
    );

/// A message received by a target object.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageEvent)
_i2.dynamic get messageEvent => _i4.getProperty(
      _self,
      'MessageEvent',
    );

/// This Channel Messaging API interface represents one of the two ports of a MessageChannel, allowing messages to be sent from one port and listening out for them arriving at the other.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessagePort)
_i2.dynamic get messagePort => _i4.getProperty(
      _self,
      'MessagePort',
    );

/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationPreloadManager)
_i2.dynamic get navigationPreloadManager => _i4.getProperty(
      _self,
      'NavigationPreloadManager',
    );

/// This Notifications API interface is used to configure and display desktop notifications to the user.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification)
_i2.dynamic get notification => _i4.getProperty(
      _self,
      'Notification',
    );

/// The parameter passed into the onnotificationclick handler, the NotificationEvent interface represents a notification click event that is dispatched on the ServiceWorkerGlobalScope of a ServiceWorker.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/NotificationEvent)
_i2.dynamic get notificationEvent => _i4.getProperty(
      _self,
      'NotificationEvent',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas)
_i2.dynamic get offscreenCanvas => _i4.getProperty(
      _self,
      'OffscreenCanvas',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvasRenderingContext2D)
_i2.dynamic get offscreenCanvasRenderingContext2D => _i4.getProperty(
      _self,
      'OffscreenCanvasRenderingContext2D',
    );

/// This Canvas 2D API interface is used to declare a path that can then be used on a CanvasRenderingContext2D object. The path methods of the CanvasRenderingContext2D interface are also present on this interface, which gives you the convenience of being able to retain and replay your path whenever desired.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Path2D)
_i2.dynamic get path2D => _i4.getProperty(
      _self,
      'Path2D',
    );

/// Encapsulates a single performance metric that is part of the performance timeline. A performance entry can be directly created by making a performance mark or measure (for example by calling the mark() method) at an explicit point in an application. Performance entries are also created in indirect ways such as loading a resource (such as an image).
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEntry)
_i2.dynamic get performanceEntry => _i4.getProperty(
      _self,
      'PerformanceEntry',
    );

/// PerformanceMark is an abstract interface for PerformanceEntry objects with an entryType of "mark". Entries of this type are created by calling performance.mark() to add a named DOMHighResTimeStamp (the mark) to the browser's performance timeline.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceMark)
_i2.dynamic get performanceMark => _i4.getProperty(
      _self,
      'PerformanceMark',
    );

/// PerformanceMeasure is an abstract interface for PerformanceEntry objects with an entryType of "measure". Entries of this type are created by calling performance.measure() to add a named DOMHighResTimeStamp (the measure) between two marks to the browser's performance timeline.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceMeasure)
_i2.dynamic get performanceMeasure => _i4.getProperty(
      _self,
      'PerformanceMeasure',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceObserver)
_i2.dynamic get performanceObserver => _i4.getProperty(
      _self,
      'PerformanceObserver',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceObserverEntryList)
_i2.dynamic get performanceObserverEntryList => _i4.getProperty(
      _self,
      'PerformanceObserverEntryList',
    );

/// Enables retrieval and analysis of detailed network timing data regarding the loading of an application's resources. An application can use the timing metrics to determine, for example, the length of time it takes to fetch a specific resource, such as an XMLHttpRequest, <SVG>, image, or script.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming)
_i2.dynamic get performanceResourceTiming => _i4.getProperty(
      _self,
      'PerformanceResourceTiming',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceServerTiming)
_i2.dynamic get performanceServerTiming => _i4.getProperty(
      _self,
      'PerformanceServerTiming',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PermissionStatus)
_i2.dynamic get permissionStatus => _i4.getProperty(
      _self,
      'PermissionStatus',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Permissions)
_i2.dynamic get permissions => _i4.getProperty(
      _self,
      'Permissions',
    );

/// Events measuring progress of an underlying process, like an HTTP request (for an XMLHttpRequest, or the loading of the underlying resource of an <img>, <audio>, <video>, <style> or <link>).
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ProgressEvent)
_i2.dynamic get progressEvent => _i4.getProperty(
      _self,
      'ProgressEvent',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PromiseRejectionEvent)
_i2.dynamic get promiseRejectionEvent => _i4.getProperty(
      _self,
      'PromiseRejectionEvent',
    );

/// This Push API interface represents a push message that has been received. This event is sent to the global scope of a ServiceWorker. It contains the information sent from an application server to a PushSubscription.
/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushEvent)
_i2.dynamic get pushEvent => _i4.getProperty(
      _self,
      'PushEvent',
    );

/// This Push API interface provides a way to receive notifications from third-party servers as well as request URLs for push notifications.
/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushManager)
_i2.dynamic get pushManager => _i4.getProperty(
      _self,
      'PushManager',
    );

/// This Push API interface provides methods which let you retrieve the push data sent by a server in various formats.
/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushMessageData)
_i2.dynamic get pushMessageData => _i4.getProperty(
      _self,
      'PushMessageData',
    );

/// This Push API interface provides a subcription's URL endpoint and allows unsubscription from a push service.
/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushSubscription)
_i2.dynamic get pushSubscription => _i4.getProperty(
      _self,
      'PushSubscription',
    );

/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushSubscriptionOptions)
_i2.dynamic get pushSubscriptionOptions => _i4.getProperty(
      _self,
      'PushSubscriptionOptions',
    );
_i2.dynamic get rtcEncodedAudioFrame => _i4.getProperty(
      _self,
      'RTCEncodedAudioFrame',
    );
_i2.dynamic get rtcEncodedVideoFrame => _i4.getProperty(
      _self,
      'RTCEncodedVideoFrame',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController)
_i2.dynamic get readableByteStreamController => _i4.getProperty(
      _self,
      'ReadableByteStreamController',
    );

/// This Streams API interface represents a readable stream of byte data. The Fetch API offers a concrete instance of a ReadableStream through the body property of a Response object.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream)
_i2.dynamic get readableStream => _i4.getProperty(
      _self,
      'ReadableStream',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBReader)
_i2.dynamic get readableStreamBYOBReader => _i4.getProperty(
      _self,
      'ReadableStreamBYOBReader',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBRequest)
_i2.dynamic get readableStreamBYOBRequest => _i4.getProperty(
      _self,
      'ReadableStreamBYOBRequest',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultController)
_i2.dynamic get readableStreamDefaultController => _i4.getProperty(
      _self,
      'ReadableStreamDefaultController',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultReader)
_i2.dynamic get readableStreamDefaultReader => _i4.getProperty(
      _self,
      'ReadableStreamDefaultReader',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Report)
_i2.dynamic get report => _i4.getProperty(
      _self,
      'Report',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReportBody)
_i2.dynamic get reportBody => _i4.getProperty(
      _self,
      'ReportBody',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReportingObserver)
_i2.dynamic get reportingObserver => _i4.getProperty(
      _self,
      'ReportingObserver',
    );

/// This Fetch API interface represents a resource request.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request)
_i2.dynamic get request => _i4.getProperty(
      _self,
      'Request',
    );

/// This Fetch API interface represents the response to a request.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Response)
_i2.dynamic get response => _i4.getProperty(
      _self,
      'Response',
    );

/// Inherits from Event, and represents the event object of an event sent on a document or worker when its content security policy is violated.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent)
_i2.dynamic get securityPolicyViolationEvent => _i4.getProperty(
      _self,
      'SecurityPolicyViolationEvent',
    );

/// This ServiceWorker API interface provides a reference to a service worker. Multiple browsing contexts (e.g. pages, workers, etc.) can be associated with the same service worker, each through a unique ServiceWorker object.
/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorker)
_i2.dynamic get serviceWorker => _i4.getProperty(
      _self,
      'ServiceWorker',
    );

/// The ServiceWorkerContainer interface of the ServiceWorker API provides an object representing the service worker as an overall unit in the network ecosystem, including facilities to register, unregister and update service workers, and access the state of service workers and their registrations.
/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer)
_i2.dynamic get serviceWorkerContainer => _i4.getProperty(
      _self,
      'ServiceWorkerContainer',
    );

/// This ServiceWorker API interface represents the global execution context of a service worker.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerGlobalScope)
_i2.dynamic get serviceWorkerGlobalScope => _i4.getProperty(
      _self,
      'ServiceWorkerGlobalScope',
    );

/// This ServiceWorker API interface represents the service worker registration. You register a service worker to control one or more pages that share the same origin.
/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration)
_i2.dynamic get serviceWorkerRegistration => _i4.getProperty(
      _self,
      'ServiceWorkerRegistration',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SharedWorkerGlobalScope)
_i2.dynamic get sharedWorkerGlobalScope => _i4.getProperty(
      _self,
      'SharedWorkerGlobalScope',
    );

/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/StorageManager)
_i2.dynamic get storageManager => _i4.getProperty(
      _self,
      'StorageManager',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/StylePropertyMapReadOnly)
_i2.dynamic get stylePropertyMapReadOnly => _i4.getProperty(
      _self,
      'StylePropertyMapReadOnly',
    );

/// This Web Crypto API interface provides a number of low-level cryptographic functions. It is accessed via the Crypto.subtle properties available in a window context (via Window.crypto).
/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto)
_i2.dynamic get subtleCrypto => _i4.getProperty(
      _self,
      'SubtleCrypto',
    );

/// A decoder for a specific method, that is a specific character encoding, like utf-8, iso-8859-2, koi8, cp1261, gbk, etc. A decoder takes a stream of bytes as input and emits a stream of code points. For a more scalable, non-native library, see StringView – a C-like representation of strings based on typed arrays.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextDecoder)
_i2.dynamic get textDecoder => _i4.getProperty(
      _self,
      'TextDecoder',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextDecoderStream)
_i2.dynamic get textDecoderStream => _i4.getProperty(
      _self,
      'TextDecoderStream',
    );

/// TextEncoder takes a stream of code points as input and emits a stream of bytes. For a more scalable, non-native library, see StringView – a C-like representation of strings based on typed arrays.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextEncoder)
_i2.dynamic get textEncoder => _i4.getProperty(
      _self,
      'TextEncoder',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextEncoderStream)
_i2.dynamic get textEncoderStream => _i4.getProperty(
      _self,
      'TextEncoderStream',
    );

/// The dimensions of a piece of text in the canvas, as created by the CanvasRenderingContext2D.measureText() method.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics)
_i2.dynamic get textMetrics => _i4.getProperty(
      _self,
      'TextMetrics',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/TransformStream)
_i2.dynamic get transformStream => _i4.getProperty(
      _self,
      'TransformStream',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/TransformStreamDefaultController)
_i2.dynamic get transformStreamDefaultController => _i4.getProperty(
      _self,
      'TransformStreamDefaultController',
    );

/// The URL interface represents an object providing static methods used for creating object URLs.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL)
_i2.dynamic get url => _i4.getProperty(
      _self,
      'URL',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/URLSearchParams)
_i2.dynamic get urlSearchParams => _i4.getProperty(
      _self,
      'URLSearchParams',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoColorSpace)
_i2.dynamic get videoColorSpace => _i4.getProperty(
      _self,
      'VideoColorSpace',
    );

/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoDecoder)
_i2.dynamic get videoDecoder => _i4.getProperty(
      _self,
      'VideoDecoder',
    );

/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoEncoder)
_i2.dynamic get videoEncoder => _i4.getProperty(
      _self,
      'VideoEncoder',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame)
_i2.dynamic get videoFrame => _i4.getProperty(
      _self,
      'VideoFrame',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext)
_i2.dynamic get webGL2RenderingContext => _i4.getProperty(
      _self,
      'WebGL2RenderingContext',
    );

/// Part of the WebGL API and represents the information returned by calling the WebGLRenderingContext.getActiveAttrib() and WebGLRenderingContext.getActiveUniform() methods.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLActiveInfo)
_i2.dynamic get webGLActiveInfo => _i4.getProperty(
      _self,
      'WebGLActiveInfo',
    );

/// Part of the WebGL API and represents an opaque buffer object storing data such as vertices or colors.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLBuffer)
_i2.dynamic get webGLBuffer => _i4.getProperty(
      _self,
      'WebGLBuffer',
    );

/// The WebContextEvent interface is part of the WebGL API and is an interface for an event that is generated in response to a status change to the WebGL rendering context.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLContextEvent)
_i2.dynamic get webGLContextEvent => _i4.getProperty(
      _self,
      'WebGLContextEvent',
    );

/// Part of the WebGL API and represents a collection of buffers that serve as a rendering destination.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLFramebuffer)
_i2.dynamic get webGLFramebuffer => _i4.getProperty(
      _self,
      'WebGLFramebuffer',
    );

/// The WebGLProgram is part of the WebGL API and is a combination of two compiled WebGLShaders consisting of a vertex shader and a fragment shader (both written in GLSL).
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLProgram)
_i2.dynamic get webGLProgram => _i4.getProperty(
      _self,
      'WebGLProgram',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLQuery)
_i2.dynamic get webGLQuery => _i4.getProperty(
      _self,
      'WebGLQuery',
    );

/// Part of the WebGL API and represents a buffer that can contain an image, or can be source or target of an rendering operation.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderbuffer)
_i2.dynamic get webGLRenderbuffer => _i4.getProperty(
      _self,
      'WebGLRenderbuffer',
    );

/// Provides an interface to the OpenGL ES 2.0 graphics rendering context for the drawing surface of an HTML <canvas> element.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext)
_i2.dynamic get webGLRenderingContext => _i4.getProperty(
      _self,
      'WebGLRenderingContext',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLSampler)
_i2.dynamic get webGLSampler => _i4.getProperty(
      _self,
      'WebGLSampler',
    );

/// The WebGLShader is part of the WebGL API and can either be a vertex or a fragment shader. A WebGLProgram requires both types of shaders.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLShader)
_i2.dynamic get webGLShader => _i4.getProperty(
      _self,
      'WebGLShader',
    );

/// Part of the WebGL API and represents the information returned by calling the WebGLRenderingContext.getShaderPrecisionFormat() method.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLShaderPrecisionFormat)
_i2.dynamic get webGLShaderPrecisionFormat => _i4.getProperty(
      _self,
      'WebGLShaderPrecisionFormat',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLSync)
_i2.dynamic get webGLSync => _i4.getProperty(
      _self,
      'WebGLSync',
    );

/// Part of the WebGL API and represents an opaque texture object providing storage and state for texturing operations.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLTexture)
_i2.dynamic get webGLTexture => _i4.getProperty(
      _self,
      'WebGLTexture',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLTransformFeedback)
_i2.dynamic get webGLTransformFeedback => _i4.getProperty(
      _self,
      'WebGLTransformFeedback',
    );

/// Part of the WebGL API and represents the location of a uniform variable in a shader program.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLUniformLocation)
_i2.dynamic get webGLUniformLocation => _i4.getProperty(
      _self,
      'WebGLUniformLocation',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLVertexArrayObject)
_i2.dynamic get webGLVertexArrayObject => _i4.getProperty(
      _self,
      'WebGLVertexArrayObject',
    );

/// Provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket)
_i2.dynamic get webSocket => _i4.getProperty(
      _self,
      'WebSocket',
    );

/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransport)
_i2.dynamic get webTransport => _i4.getProperty(
      _self,
      'WebTransport',
    );

/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportBidirectionalStream)
_i2.dynamic get webTransportBidirectionalStream => _i4.getProperty(
      _self,
      'WebTransportBidirectionalStream',
    );

/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream)
_i2.dynamic get webTransportDatagramDuplexStream => _i4.getProperty(
      _self,
      'WebTransportDatagramDuplexStream',
    );

/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportError)
_i2.dynamic get webTransportError => _i4.getProperty(
      _self,
      'WebTransportError',
    );

/// This ServiceWorker API interface represents the scope of a service worker client that is a document in a browser context, controlled by an active worker. The service worker client independently selects and uses a service worker for its own loading and sub-resources.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WindowClient)
_i2.dynamic get windowClient => _i4.getProperty(
      _self,
      'WindowClient',
    );

/// This Web Workers API interface represents a background task that can be easily created and can send messages back to its creator. Creating a worker is as simple as calling the Worker() constructor and specifying a script to be run in the worker thread.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Worker)
_i2.dynamic get worker => _i4.getProperty(
      _self,
      'Worker',
    );

/// This Web Workers API interface is an interface representing the scope of any worker. Workers have no browsing context; this scope contains the information usually conveyed by Window objects — in this case event handlers, the console or the associated WorkerNavigator object. Each WorkerGlobalScope has its own event loop.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope)
_i2.dynamic get workerGlobalScope => _i4.getProperty(
      _self,
      'WorkerGlobalScope',
    );

/// The absolute location of the script executed by the Worker. Such an object is initialized for each worker and is available via the WorkerGlobalScope.location property obtained by calling self.location.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WorkerLocation)
_i2.dynamic get workerLocation => _i4.getProperty(
      _self,
      'WorkerLocation',
    );

/// A subset of the Navigator interface allowed to be accessed from a Worker. Such an object is initialized for each worker and is available via the WorkerGlobalScope.navigator property obtained by calling window.self.navigator.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WorkerNavigator)
_i2.dynamic get workerNavigator => _i4.getProperty(
      _self,
      'WorkerNavigator',
    );

/// This Streams API interface provides a standard abstraction for writing streaming data to a destination, known as a sink. This object comes with built-in backpressure and queuing.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStream)
_i2.dynamic get writableStream => _i4.getProperty(
      _self,
      'WritableStream',
    );

/// This Streams API interface represents a controller allowing control of a WritableStream's state. When constructing a WritableStream, the underlying sink is given a corresponding WritableStreamDefaultController instance to manipulate.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultController)
_i2.dynamic get writableStreamDefaultController => _i4.getProperty(
      _self,
      'WritableStreamDefaultController',
    );

/// This Streams API interface is the object returned by WritableStream.getWriter() and once created locks the < writer to the WritableStream ensuring that no other streams can write to the underlying sink.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter)
_i2.dynamic get writableStreamDefaultWriter => _i4.getProperty(
      _self,
      'WritableStreamDefaultWriter',
    );

/// Use XMLHttpRequest (XHR) objects to interact with servers. You can retrieve data from a URL without having to do a full page refresh. This enables a Web page to update just part of a page without disrupting what the user is doing.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest)
_i2.dynamic get xmlHttpRequest => _i4.getProperty(
      _self,
      'XMLHttpRequest',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequestEventTarget)
_i2.dynamic get xmlHttpRequestEventTarget => _i4.getProperty(
      _self,
      'XMLHttpRequestEventTarget',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequestUpload)
_i2.dynamic get xmlHttpRequestUpload => _i4.getProperty(
      _self,
      'XMLHttpRequestUpload',
    );
_i3.Console get console => _i4.getProperty(
      _self,
      'console',
    );

/// Returns dedicatedWorkerGlobal's name, i.e. the value given to the Worker constructor. Primarily useful for debugging.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/name)
_i2.String get name => _i4.getProperty(
      _self,
      'name',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/message_event)
_i2.dynamic Function(_i3.MessageEvent<_i2.dynamic>)? get onmessage =>
    (_i3.MessageEvent<_i2.dynamic> p0) => _i4.callMethod(
          _i4.getProperty(
            _self,
            'onmessage',
          ),
          r'call',
          [
            _self,
            p0,
          ],
        );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/messageerror_event)
_i2.dynamic Function(_i3.MessageEvent<_i2.dynamic>)? get onmessageerror =>
    (_i3.MessageEvent<_i2.dynamic> p0) => _i4.callMethod(
          _i4.getProperty(
            _self,
            'onmessageerror',
          ),
          r'call',
          [
            _self,
            p0,
          ],
        );

/// Returns workerGlobal's WorkerLocation object.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope/location)
_i3.WorkerLocation get location => _i4.getProperty(
      _self,
      'location',
    );

/// Returns workerGlobal's WorkerNavigator object.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope/navigator)
_i3.WorkerNavigator get navigator => _i4.getProperty(
      _self,
      'navigator',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope/error_event)
_i2.dynamic Function(_i3.ErrorEvent)? get onerror =>
    (_i3.ErrorEvent p0) => _i4.callMethod(
          _i4.getProperty(
            _self,
            'onerror',
          ),
          r'call',
          [
            _self,
            p0,
          ],
        );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope/languagechange_event)
_i2.dynamic Function(_i3.Event)? get onlanguagechange =>
    (_i3.Event p0) => _i4.callMethod(
          _i4.getProperty(
            _self,
            'onlanguagechange',
          ),
          r'call',
          [
            _self,
            p0,
          ],
        );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope/offline_event)
_i2.dynamic Function(_i3.Event)? get onoffline =>
    (_i3.Event p0) => _i4.callMethod(
          _i4.getProperty(
            _self,
            'onoffline',
          ),
          r'call',
          [
            _self,
            p0,
          ],
        );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope/online_event)
_i2.dynamic Function(_i3.Event)? get ononline =>
    (_i3.Event p0) => _i4.callMethod(
          _i4.getProperty(
            _self,
            'ononline',
          ),
          r'call',
          [
            _self,
            p0,
          ],
        );
_i2.dynamic Function(_i3.PromiseRejectionEvent)? get onrejectionhandled =>
    (_i3.PromiseRejectionEvent p0) => _i4.callMethod(
          _i4.getProperty(
            _self,
            'onrejectionhandled',
          ),
          r'call',
          [
            _self,
            p0,
          ],
        );
_i2.dynamic Function(_i3.PromiseRejectionEvent)? get onunhandledrejection =>
    (_i3.PromiseRejectionEvent p0) => _i4.callMethod(
          _i4.getProperty(
            _self,
            'onunhandledrejection',
          ),
          r'call',
          [
            _self,
            p0,
          ],
        );

/// Returns workerGlobal.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/WorkerGlobalScope/self)
_Intersection8 get self => _i4.getProperty(
      _self,
      'self',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/fonts)
_i3.FontFaceSet get fonts => _i4.getProperty(
      _self,
      'fonts',
    );

/// Available only in secure contexts.
///
/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/caches)
_i3.CacheStorage get caches => _i4.getProperty(
      _self,
      'caches',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/crossOriginIsolated)
_i2.bool get crossOriginIsolated => _i4.getProperty(
      _self,
      'crossOriginIsolated',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/crypto_property)
_i3.Crypto get crypto => _i4.getProperty(
      _self,
      'crypto',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/indexedDB)
_i3.IDBFactory get indexedDB => _i4.getProperty(
      _self,
      'indexedDB',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/isSecureContext)
_i2.bool get isSecureContext => _i4.getProperty(
      _self,
      'isSecureContext',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/origin)
_i2.String get origin => _i4.getProperty(
      _self,
      'origin',
    );

/// [MDN Reference](https://developer.mozilla.org/docs/Web/API/performance_property)
_i3.Performance get performance => _i4.getProperty(
      _self,
      'performance',
    ); /* Source:  */

@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
class _IterableLike$<T> {}

@_i1.JS()
@_i1.staticInterop
@_i1.anonymous
abstract class _GlobalThis {}
