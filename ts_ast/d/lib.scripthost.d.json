{
  "typedefs": {},
  "structs": {
    "ActiveXObject": {
      "indexes": [],
      "props": {
        "undefined": {
          "_": 29,
          "isMethod": true,
          "isNullable": false,
          "type": {
            "core": "any",
            "isFuture": false
          },
          "isStatic": false
        }
      },
      "generics": [],
      "isClass": false,
      "doc": ""
    },
    "ITextWriter": {
      "indexes": [],
      "props": {
        "Write": {
          "_": 34,
          "doc": "",
          "isMethod": true,
          "isNullable": false,
          "type": {
            "core": "void",
            "isFuture": false
          },
          "isStatic": false
        },
        "WriteLine": {
          "_": 35,
          "doc": "",
          "isMethod": true,
          "isNullable": false,
          "type": {
            "core": "void",
            "isFuture": false
          },
          "isStatic": false
        },
        "Close": {
          "_": 36,
          "doc": "",
          "isMethod": true,
          "isNullable": false,
          "type": {
            "core": "void",
            "isFuture": false
          },
          "isStatic": false
        }
      },
      "generics": [],
      "isClass": false,
      "doc": ""
    },
    "TextStreamBase": {
      "indexes": [],
      "props": {
        "Column": {
          "_": 43,
          "doc": "The column number of the current character position in an input stream.",
          "isMethod": false,
          "isNullable": false,
          "type": {
            "core": "number",
            "isFuture": false
          },
          "isStatic": false
        },
        "Line": {
          "_": 48,
          "doc": "The current line number in an input stream.",
          "isMethod": false,
          "isNullable": false,
          "type": {
            "core": "number",
            "isFuture": false
          },
          "isStatic": false
        },
        "Close": {
          "_": 55,
          "doc": "Closes a text stream.\nIt is not necessary to close standard streams; they close automatically when the process ends. If\nyou close a standard stream, be aware that any other pointers to that standard stream become invalid.",
          "isMethod": true,
          "isNullable": false,
          "type": {
            "core": "void",
            "isFuture": false
          },
          "isStatic": false
        }
      },
      "generics": [],
      "isClass": false,
      "doc": ""
    },
    "TextStreamWriter": {
      "indexes": [],
      "props": {
        "Write": {
          "_": 62,
          "doc": "Sends a string to an output stream.",
          "isMethod": true,
          "isNullable": false,
          "type": {
            "core": "void",
            "isFuture": false
          },
          "isStatic": false
        },
        "WriteBlankLines": {
          "_": 67,
          "doc": "Sends a specified number of blank lines (newline characters) to an output stream.",
          "isMethod": true,
          "isNullable": false,
          "type": {
            "core": "void",
            "isFuture": false
          },
          "isStatic": false
        },
        "WriteLine": {
          "_": 72,
          "doc": "Sends a string followed by a newline character to an output stream.",
          "isMethod": true,
          "isNullable": false,
          "type": {
            "core": "void",
            "isFuture": false
          },
          "isStatic": false
        }
      },
      "generics": [],
      "isClass": false,
      "doc": ""
    },
    "TextStreamReader": {
      "indexes": [],
      "props": {
        "Read": {
          "_": 81,
          "doc": "Returns a specified number of characters from an input stream, starting at the current pointer position.\nDoes not return until the ENTER key is pressed.\nCan only be used on a stream in reading mode; causes an error in writing or appending mode.",
          "isMethod": true,
          "isNullable": false,
          "type": {
            "core": "string",
            "isFuture": false
          },
          "isStatic": false
        },
        "ReadAll": {
          "_": 87,
          "doc": "Returns all characters from an input stream.\nCan only be used on a stream in reading mode; causes an error in writing or appending mode.",
          "isMethod": true,
          "isNullable": false,
          "type": {
            "core": "string",
            "isFuture": false
          },
          "isStatic": false
        },
        "ReadLine": {
          "_": 94,
          "doc": "Returns an entire line from an input stream.\nAlthough this method extracts the newline character, it does not add it to the returned string.\nCan only be used on a stream in reading mode; causes an error in writing or appending mode.",
          "isMethod": true,
          "isNullable": false,
          "type": {
            "core": "string",
            "isFuture": false
          },
          "isStatic": false
        },
        "Skip": {
          "_": 101,
          "doc": "Skips a specified number of characters when reading from an input text stream.\nCan only be used on a stream in reading mode; causes an error in writing or appending mode.",
          "isMethod": true,
          "isNullable": false,
          "type": {
            "core": "void",
            "isFuture": false
          },
          "isStatic": false
        },
        "SkipLine": {
          "_": 107,
          "doc": "Skips the next line when reading from an input text stream.\nCan only be used on a stream in reading mode, not writing or appending mode.",
          "isMethod": true,
          "isNullable": false,
          "type": {
            "core": "void",
            "isFuture": false
          },
          "isStatic": false
        },
        "AtEndOfLine": {
          "_": 112,
          "doc": "Indicates whether the stream pointer position is at the end of a line.",
          "isMethod": false,
          "isNullable": false,
          "type": {
            "core": "boolean",
            "isFuture": false
          },
          "isStatic": false
        },
        "AtEndOfStream": {
          "_": 117,
          "doc": "Indicates whether the stream pointer position is at the end of a stream.",
          "isMethod": false,
          "isNullable": false,
          "type": {
            "core": "boolean",
            "isFuture": false
          },
          "isStatic": false
        }
      },
      "generics": [],
      "isClass": false,
      "doc": ""
    },
    "": {
      "indexes": [],
      "props": {
        "Echo": {
          "_": 125,
          "doc": "Outputs text to either a message box (under WScript.exe) or the command console window followed by\na newline (under CScript.exe).",
          "isMethod": true,
          "isNullable": false,
          "type": {
            "core": "void",
            "isFuture": false
          },
          "isStatic": false
        },
        "StdErr": {
          "_": 131,
          "doc": "Exposes the write-only error output stream for the current script.\nCan be accessed only while using CScript.exe.",
          "isMethod": false,
          "isNullable": false,
          "type": {
            "ref": "TextStreamWriter",
            "generics": [],
            "isFuture": false
          },
          "isStatic": false
        },
        "StdOut": {
          "_": 137,
          "doc": "Exposes the write-only output stream for the current script.\nCan be accessed only while using CScript.exe.",
          "isMethod": false,
          "isNullable": false,
          "type": {
            "ref": "TextStreamWriter",
            "generics": [],
            "isFuture": false
          },
          "isStatic": false
        },
        "Arguments": {
          "_": 138,
          "doc": "",
          "isMethod": false,
          "isNullable": false,
          "type": {
            "ref": "",
            "generics": [],
            "isFuture": false
          },
          "isStatic": false
        },
        "ScriptFullName": {
          "_": 143,
          "doc": "The full path of the currently running script.",
          "isMethod": false,
          "isNullable": false,
          "type": {
            "core": "string",
            "isFuture": false
          },
          "isStatic": false
        },
        "Quit": {
          "_": 148,
          "doc": "Forces the script to stop immediately, with an optional exit code.",
          "isMethod": true,
          "isNullable": false,
          "type": {
            "core": "number",
            "isFuture": false
          },
          "isStatic": false
        },
        "BuildVersion": {
          "_": 153,
          "doc": "The Windows Script Host build version number.",
          "isMethod": false,
          "isNullable": false,
          "type": {
            "core": "number",
            "isFuture": false
          },
          "isStatic": false
        },
        "FullName": {
          "_": 158,
          "doc": "Fully qualified path of the host executable.",
          "isMethod": false,
          "isNullable": false,
          "type": {
            "core": "string",
            "isFuture": false
          },
          "isStatic": false
        },
        "Interactive": {
          "_": 163,
          "doc": "Gets/sets the script mode - interactive(true) or batch(false).",
          "isMethod": false,
          "isNullable": false,
          "type": {
            "core": "boolean",
            "isFuture": false
          },
          "isStatic": false
        },
        "Name": {
          "_": 168,
          "doc": "The name of the host executable (WScript.exe or CScript.exe).",
          "isMethod": false,
          "isNullable": false,
          "type": {
            "core": "string",
            "isFuture": false
          },
          "isStatic": false
        },
        "Path": {
          "_": 173,
          "doc": "Path of the directory containing the host executable.",
          "isMethod": false,
          "isNullable": false,
          "type": {
            "core": "string",
            "isFuture": false
          },
          "isStatic": false
        },
        "ScriptName": {
          "_": 178,
          "doc": "The filename of the currently running script.",
          "isMethod": false,
          "isNullable": false,
          "type": {
            "core": "string",
            "isFuture": false
          },
          "isStatic": false
        },
        "StdIn": {
          "_": 184,
          "doc": "Exposes the read-only input stream for the current script.\nCan be accessed only while using CScript.exe.",
          "isMethod": false,
          "isNullable": false,
          "type": {
            "ref": "TextStreamReader",
            "generics": [],
            "isFuture": false
          },
          "isStatic": false
        },
        "Version": {
          "_": 189,
          "doc": "Windows Script Host version",
          "isMethod": false,
          "isNullable": false,
          "type": {
            "core": "string",
            "isFuture": false
          },
          "isStatic": false
        },
        "ConnectObject": {
          "_": 194,
          "doc": "Connects a COM object's event sources to functions named with a given prefix, in the form prefix_event.",
          "isMethod": true,
          "isNullable": false,
          "type": {
            "core": "void",
            "isFuture": false
          },
          "isStatic": false
        },
        "CreateObject": {
          "_": 201,
          "doc": "Creates a COM object.",
          "isMethod": true,
          "isNullable": false,
          "type": {
            "core": "any",
            "isFuture": false
          },
          "isStatic": false
        },
        "DisconnectObject": {
          "_": 206,
          "doc": "Disconnects a COM object from its event sources.",
          "isMethod": true,
          "isNullable": false,
          "type": {
            "core": "void",
            "isFuture": false
          },
          "isStatic": false
        },
        "GetObject": {
          "_": 215,
          "doc": "Retrieves an existing object with the specified ProgID from memory, or creates a new one from a file.",
          "isMethod": true,
          "isNullable": false,
          "type": {
            "core": "any",
            "isFuture": false
          },
          "isStatic": false
        },
        "Sleep": {
          "_": 221,
          "doc": "Suspends script execution for a specified length of time, then continues execution.",
          "isMethod": true,
          "isNullable": false,
          "type": {
            "core": "void",
            "isFuture": false
          },
          "isStatic": false
        }
      },
      "generics": [],
      "isClass": false
    },
    "SafeArray": {
      "indexes": [],
      "props": {
        "SafeArray_typekey": {
          "_": 234,
          "doc": "",
          "isMethod": false,
          "isNullable": false,
          "type": {
            "ref": "SafeArray",
            "generics": [
              {
                "ref": "T",
                "generics": [],
                "isFuture": false
              }
            ],
            "isFuture": false
          },
          "isStatic": false
        }
      },
      "generics": [
        {
          "name": "T",
          "constraint": {
            "core": "any",
            "isFuture": false
          }
        }
      ],
      "isClass": true
    },
    "Enumerator": {
      "indexes": [],
      "props": {
        "atEnd": {
          "_": 245,
          "doc": "Returns true if the current item is the last one in the collection, or the collection is empty,\nor the current item is undefined.",
          "isMethod": true,
          "isNullable": false,
          "type": {
            "core": "boolean",
            "isFuture": false
          },
          "isStatic": false
        },
        "item": {
          "_": 250,
          "doc": "Returns the current item in the collection",
          "isMethod": true,
          "isNullable": false,
          "type": {
            "ref": "T",
            "generics": [],
            "isFuture": false
          },
          "isStatic": false
        },
        "moveFirst": {
          "_": 256,
          "doc": "Resets the current item in the collection to the first item. If there are no items in the collection,\nthe current item is set to undefined.",
          "isMethod": true,
          "isNullable": false,
          "type": {
            "core": "void",
            "isFuture": false
          },
          "isStatic": false
        },
        "moveNext": {
          "_": 262,
          "doc": "Moves the current item to the next item in the collection. If the enumerator is at the end of\nthe collection or the collection is empty, the current item is set to undefined.",
          "isMethod": true,
          "isNullable": false,
          "type": {
            "core": "void",
            "isFuture": false
          },
          "isStatic": false
        }
      },
      "generics": [
        {
          "name": "T",
          "constraint": {
            "core": "any",
            "isFuture": false
          }
        }
      ],
      "isClass": false,
      "doc": "Allows enumerating over a COM collection, which may not have indexed item access."
    },
    "EnumeratorConstructor": {
      "indexes": [],
      "props": {
        "undefined": {
          "_": 268,
          "isMethod": true,
          "isNullable": false,
          "type": {
            "ref": "Enumerator",
            "generics": [
              {
                "ref": "T",
                "generics": [],
                "isFuture": false
              }
            ],
            "isFuture": false
          },
          "isStatic": false
        }
      },
      "generics": [],
      "isClass": false,
      "doc": ""
    },
    "VBArray": {
      "indexes": [],
      "props": {
        "dimensions": {
          "_": 280,
          "doc": "Returns the number of dimensions (1-based).",
          "isMethod": true,
          "isNullable": false,
          "type": {
            "core": "number",
            "isFuture": false
          },
          "isStatic": false
        },
        "getItem": {
          "_": 285,
          "doc": "Takes an index for each dimension in the array, and returns the item at the corresponding location.",
          "isMethod": true,
          "isNullable": false,
          "type": {
            "ref": "T",
            "generics": [],
            "isFuture": false
          },
          "isStatic": false
        },
        "lbound": {
          "_": 291,
          "doc": "Returns the smallest available index for a given dimension.",
          "isMethod": true,
          "isNullable": false,
          "type": {
            "core": "number",
            "isFuture": false
          },
          "isStatic": false
        },
        "ubound": {
          "_": 297,
          "doc": "Returns the largest available index for a given dimension.",
          "isMethod": true,
          "isNullable": false,
          "type": {
            "core": "number",
            "isFuture": false
          },
          "isStatic": false
        },
        "toArray": {
          "_": 304,
          "doc": "Returns a Javascript array with all the elements in the VBArray. If there are multiple dimensions,\neach successive dimension is appended to the end of the array.\nExample: [[1,2,3],[4,5,6]] becomes [1,2,3,4,5,6]",
          "isMethod": true,
          "isNullable": false,
          "type": {
            "array": {
              "ref": "T",
              "generics": [],
              "isFuture": false
            },
            "isFuture": false
          },
          "isStatic": false
        }
      },
      "generics": [
        {
          "name": "T",
          "constraint": {
            "core": "any",
            "isFuture": false
          }
        }
      ],
      "isClass": false,
      "doc": "Enables reading from a COM safe array, which might have an alternate lower bound, or multiple dimensions."
    },
    "VBArrayConstructor": {
      "indexes": [],
      "props": {
        "undefined": {
          "_": 308,
          "isMethod": true,
          "isNullable": false,
          "type": {
            "ref": "VBArray",
            "generics": [
              {
                "ref": "T",
                "generics": [],
                "isFuture": false
              }
            ],
            "isFuture": false
          },
          "isStatic": false
        }
      },
      "generics": [],
      "isClass": false,
      "doc": ""
    },
    "VarDate": {
      "indexes": [],
      "props": {
        "VarDate_typekey": {
          "_": 318,
          "doc": "",
          "isMethod": false,
          "isNullable": false,
          "type": {
            "ref": "VarDate",
            "generics": [],
            "isFuture": false
          },
          "isStatic": false
        }
      },
      "generics": [],
      "isClass": true
    },
    "DateConstructor": {
      "indexes": [],
      "props": {
        "undefined": {
          "_": 322,
          "isMethod": true,
          "isNullable": false,
          "type": {
            "ref": "Date",
            "generics": [],
            "isFuture": false
          },
          "isStatic": false
        }
      },
      "generics": [],
      "isClass": false,
      "doc": ""
    },
    "Date": {
      "indexes": [],
      "props": {
        "getVarDate": {
          "_": 326,
          "doc": "",
          "isMethod": false,
          "isNullable": false,
          "type": {
            "generics": [],
            "params": [],
            "isFuture": false
          },
          "isStatic": false
        }
      },
      "generics": [],
      "isClass": false,
      "doc": "Enables basic storage and retrieval of dates and times."
    }
  },
  "funcs": {},
  "vars": {
    "ActiveXObject": {
      "type": {
        "ref": "ActiveXObject",
        "generics": [],
        "isFuture": false
      }
    },
    "WScript": {
      "type": {
        "ref": "",
        "generics": [],
        "isFuture": false
      },
      "isFuture": false
    },
    "WSH": {
      "type": {
        "type": {
          "ref": "",
          "generics": [],
          "isFuture": false
        },
        "isFuture": false
      }
    },
    "Enumerator": {
      "type": {
        "ref": "EnumeratorConstructor",
        "generics": [],
        "isFuture": false
      }
    },
    "VBArray": {
      "type": {
        "ref": "VBArrayConstructor",
        "generics": [],
        "isFuture": false
      }
    }
  },
  "modules": {}
}